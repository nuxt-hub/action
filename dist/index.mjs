import { homedir, type } from "os";
import { stat, unwatchFile, watch, watchFile } from "fs";
import * as sysPath$1 from "path";
import * as sysPath from "path";
import { EventEmitter } from "events";
import { Readable, Writable } from "node:stream";
import { promisify, stripVTControlCharacters } from "node:util";
import { createHash } from "node:crypto";
import { access, lstat, readdir, realpath, stat as stat$1 } from "node:fs/promises";
import { existsSync, promises, readFileSync } from "node:fs";
import { dirname, join, relative, resolve, sep } from "node:path";
import { lstat as lstat$1, open, readdir as readdir$1, realpath as realpath$1, stat as stat$2 } from "fs/promises";
import { homedir as homedir$1 } from "node:os";
import "node:module";
import y, { stdin, stdout } from "node:process";
import * as tty from "node:tty";
import * as g from "node:readline";
import O from "node:readline";
import "node:child_process";
import zlib from "node:zlib";

//#region rolldown:runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function() {
	return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
	if (from && typeof from === "object" || typeof from === "function") for (var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++) {
		key = keys[i];
		if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
			get: ((k$2) => from[k$2]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
		});
	}
	return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
	value: mod,
	enumerable: true
}) : target, mod));
var __require = /* @__PURE__ */ ((x$3) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x$3, { get: (a, b$2) => (typeof require !== "undefined" ? require : a)[b$2] }) : x$3)(function(x$3) {
	if (typeof require !== "undefined") return require.apply(this, arguments);
	throw Error("Calling `require` for \"" + x$3 + "\" in an environment that doesn't expose the `require` function.");
});

//#endregion
//#region node_modules/.pnpm/ufo@1.6.1/node_modules/ufo/dist/index.mjs
const r = String.fromCharCode;
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const PLUS_RE = /\+/g;
const ENC_CARET_RE = /%5e/gi;
const ENC_BACKTICK_RE = /%60/gi;
const ENC_PIPE_RE = /%7c/gi;
const ENC_SPACE_RE = /%20/gi;
function encode(text) {
	return encodeURI("" + text).replace(ENC_PIPE_RE, "|");
}
function encodeQueryValue(input) {
	return encode(typeof input === "string" ? input : JSON.stringify(input)).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CARET_RE, "^").replace(SLASH_RE, "%2F");
}
function encodeQueryKey(text) {
	return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function decode$1(text = "") {
	try {
		return decodeURIComponent("" + text);
	} catch {
		return "" + text;
	}
}
function decodeQueryKey(text) {
	return decode$1(text.replace(PLUS_RE, " "));
}
function decodeQueryValue(text) {
	return decode$1(text.replace(PLUS_RE, " "));
}
function parseQuery(parametersString = "") {
	const object = /* @__PURE__ */ Object.create(null);
	if (parametersString[0] === "?") parametersString = parametersString.slice(1);
	for (const parameter of parametersString.split("&")) {
		const s = parameter.match(/([^=]+)=?(.*)/) || [];
		if (s.length < 2) continue;
		const key = decodeQueryKey(s[1]);
		if (key === "__proto__" || key === "constructor") continue;
		const value$1 = decodeQueryValue(s[2] || "");
		if (object[key] === void 0) object[key] = value$1;
		else if (Array.isArray(object[key])) object[key].push(value$1);
		else object[key] = [object[key], value$1];
	}
	return object;
}
function encodeQueryItem(key, value$1) {
	if (typeof value$1 === "number" || typeof value$1 === "boolean") value$1 = String(value$1);
	if (!value$1) return encodeQueryKey(key);
	if (Array.isArray(value$1)) return value$1.map((_value) => `${encodeQueryKey(key)}=${encodeQueryValue(_value)}`).join("&");
	return `${encodeQueryKey(key)}=${encodeQueryValue(value$1)}`;
}
function stringifyQuery(query) {
	return Object.keys(query).filter((k$2) => query[k$2] !== void 0).map((k$2) => encodeQueryItem(k$2, query[k$2])).filter(Boolean).join("&");
}
const PROTOCOL_STRICT_REGEX = /^[\s\w\0+.-]{2,}:([/\\]{1,2})/;
const PROTOCOL_REGEX = /^[\s\w\0+.-]{2,}:([/\\]{2})?/;
const PROTOCOL_RELATIVE_REGEX = /^([/\\]\s*){2,}[^/\\]/;
const TRAILING_SLASH_RE = /\/$|\/\?|\/#/;
const JOIN_LEADING_SLASH_RE = /^\.?\//;
function hasProtocol(inputString, opts = {}) {
	if (typeof opts === "boolean") opts = { acceptRelative: opts };
	if (opts.strict) return PROTOCOL_STRICT_REGEX.test(inputString);
	return PROTOCOL_REGEX.test(inputString) || (opts.acceptRelative ? PROTOCOL_RELATIVE_REGEX.test(inputString) : false);
}
function hasTrailingSlash(input = "", respectQueryAndFragment) {
	if (!respectQueryAndFragment) return input.endsWith("/");
	return TRAILING_SLASH_RE.test(input);
}
function withoutTrailingSlash(input = "", respectQueryAndFragment) {
	if (!respectQueryAndFragment) return (hasTrailingSlash(input) ? input.slice(0, -1) : input) || "/";
	if (!hasTrailingSlash(input, true)) return input || "/";
	let path$9 = input;
	let fragment = "";
	const fragmentIndex = input.indexOf("#");
	if (fragmentIndex !== -1) {
		path$9 = input.slice(0, fragmentIndex);
		fragment = input.slice(fragmentIndex);
	}
	const [s0, ...s] = path$9.split("?");
	const cleanPath = s0.endsWith("/") ? s0.slice(0, -1) : s0;
	return (cleanPath || "/") + (s.length > 0 ? `?${s.join("?")}` : "") + fragment;
}
function withTrailingSlash(input = "", respectQueryAndFragment) {
	if (!respectQueryAndFragment) return input.endsWith("/") ? input : input + "/";
	if (hasTrailingSlash(input, true)) return input || "/";
	let path$9 = input;
	let fragment = "";
	const fragmentIndex = input.indexOf("#");
	if (fragmentIndex !== -1) {
		path$9 = input.slice(0, fragmentIndex);
		fragment = input.slice(fragmentIndex);
		if (!path$9) return fragment;
	}
	const [s0, ...s] = path$9.split("?");
	return s0 + "/" + (s.length > 0 ? `?${s.join("?")}` : "") + fragment;
}
function withBase(input, base) {
	if (isEmptyURL(base) || hasProtocol(input)) return input;
	const _base = withoutTrailingSlash(base);
	if (input.startsWith(_base)) return input;
	return joinURL(_base, input);
}
function withQuery(input, query) {
	const parsed = parseURL$1(input);
	const mergedQuery = {
		...parseQuery(parsed.search),
		...query
	};
	parsed.search = stringifyQuery(mergedQuery);
	return stringifyParsedURL(parsed);
}
function isEmptyURL(url) {
	return !url || url === "/";
}
function isNonEmptyURL(url) {
	return url && url !== "/";
}
function joinURL(base, ...input) {
	let url = base || "";
	for (const segment of input.filter((url2) => isNonEmptyURL(url2))) if (url) {
		const _segment = segment.replace(JOIN_LEADING_SLASH_RE, "");
		url = withTrailingSlash(url) + _segment;
	} else url = segment;
	return url;
}
const protocolRelative = Symbol.for("ufo:protocolRelative");
function parseURL$1(input = "", defaultProto) {
	const _specialProtoMatch = input.match(/^[\s\0]*(blob:|data:|javascript:|vbscript:)(.*)/i);
	if (_specialProtoMatch) {
		const [, _proto, _pathname = ""] = _specialProtoMatch;
		return {
			protocol: _proto.toLowerCase(),
			pathname: _pathname,
			href: _proto + _pathname,
			auth: "",
			host: "",
			search: "",
			hash: ""
		};
	}
	if (!hasProtocol(input, { acceptRelative: true })) return defaultProto ? parseURL$1(defaultProto + input) : parsePath(input);
	const [, protocol = "", auth, hostAndPath = ""] = input.replace(/\\/g, "/").match(/^[\s\0]*([\w+.-]{2,}:)?\/\/([^/@]+@)?(.*)/) || [];
	let [, host = "", path$9 = ""] = hostAndPath.match(/([^#/?]*)(.*)?/) || [];
	if (protocol === "file:") path$9 = path$9.replace(/\/(?=[A-Za-z]:)/, "");
	const { pathname, search, hash } = parsePath(path$9);
	return {
		protocol: protocol.toLowerCase(),
		auth: auth ? auth.slice(0, Math.max(0, auth.length - 1)) : "",
		host,
		pathname,
		search,
		hash,
		[protocolRelative]: !protocol
	};
}
function parsePath(input = "") {
	const [pathname = "", search = "", hash = ""] = (input.match(/([^#?]*)(\?[^#]*)?(#.*)?/) || []).splice(1);
	return {
		pathname,
		search,
		hash
	};
}
function stringifyParsedURL(parsed) {
	const pathname = parsed.pathname || "";
	const search = parsed.search ? (parsed.search.startsWith("?") ? "" : "?") + parsed.search : "";
	const hash = parsed.hash || "";
	const auth = parsed.auth ? parsed.auth + "@" : "";
	const host = parsed.host || "";
	const proto = parsed.protocol || parsed[protocolRelative] ? (parsed.protocol || "") + "//" : "";
	return proto + auth + host + pathname + search + hash;
}

//#endregion
//#region node_modules/.pnpm/destr@2.0.5/node_modules/destr/dist/index.mjs
const suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
const suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
const JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value$1) {
	if (key === "__proto__" || key === "constructor" && value$1 && typeof value$1 === "object" && "prototype" in value$1) {
		warnKeyDropped(key);
		return;
	}
	return value$1;
}
function warnKeyDropped(key) {
	console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value$1, options = {}) {
	if (typeof value$1 !== "string") return value$1;
	if (value$1[0] === "\"" && value$1[value$1.length - 1] === "\"" && value$1.indexOf("\\") === -1) return value$1.slice(1, -1);
	const _value = value$1.trim();
	if (_value.length <= 9) switch (_value.toLowerCase()) {
		case "true": return true;
		case "false": return false;
		case "undefined": return void 0;
		case "null": return null;
		case "nan": return Number.NaN;
		case "infinity": return Number.POSITIVE_INFINITY;
		case "-infinity": return Number.NEGATIVE_INFINITY;
	}
	if (!JsonSigRx.test(value$1)) {
		if (options.strict) throw new SyntaxError("[destr] Invalid JSON");
		return value$1;
	}
	try {
		if (suspectProtoRx.test(value$1) || suspectConstructorRx.test(value$1)) {
			if (options.strict) throw new Error("[destr] Possible prototype pollution");
			return JSON.parse(value$1, jsonParseTransform);
		}
		return JSON.parse(value$1);
	} catch (error$1) {
		if (options.strict) throw error$1;
		return value$1;
	}
}

//#endregion
//#region node_modules/.pnpm/ofetch@1.4.1/node_modules/ofetch/dist/shared/ofetch.03887fc3.mjs
var FetchError = class extends Error {
	constructor(message, opts) {
		super(message, opts);
		this.name = "FetchError";
		if (opts?.cause && !this.cause) this.cause = opts.cause;
	}
};
function createFetchError(ctx) {
	const errorMessage = ctx.error?.message || ctx.error?.toString() || "";
	const method = ctx.request?.method || ctx.options?.method || "GET";
	const url = ctx.request?.url || String(ctx.request) || "/";
	const requestStr = `[${method}] ${JSON.stringify(url)}`;
	const statusStr = ctx.response ? `${ctx.response.status} ${ctx.response.statusText}` : "<no response>";
	const message = `${requestStr}: ${statusStr}${errorMessage ? ` ${errorMessage}` : ""}`;
	const fetchError = new FetchError(message, ctx.error ? { cause: ctx.error } : void 0);
	for (const key of [
		"request",
		"options",
		"response"
	]) Object.defineProperty(fetchError, key, { get() {
		return ctx[key];
	} });
	for (const [key, refKey] of [
		["data", "_data"],
		["status", "status"],
		["statusCode", "status"],
		["statusText", "statusText"],
		["statusMessage", "statusText"]
	]) Object.defineProperty(fetchError, key, { get() {
		return ctx.response && ctx.response[refKey];
	} });
	return fetchError;
}
const payloadMethods = new Set(Object.freeze([
	"PATCH",
	"POST",
	"PUT",
	"DELETE"
]));
function isPayloadMethod(method = "GET") {
	return payloadMethods.has(method.toUpperCase());
}
function isJSONSerializable(value$1) {
	if (value$1 === void 0) return false;
	const t = typeof value$1;
	if (t === "string" || t === "number" || t === "boolean" || t === null) return true;
	if (t !== "object") return false;
	if (Array.isArray(value$1)) return true;
	if (value$1.buffer) return false;
	return value$1.constructor && value$1.constructor.name === "Object" || typeof value$1.toJSON === "function";
}
const textTypes = /* @__PURE__ */ new Set([
	"image/svg",
	"application/xml",
	"application/xhtml",
	"application/html"
]);
const JSON_RE = /^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;
function detectResponseType(_contentType = "") {
	if (!_contentType) return "json";
	const contentType = _contentType.split(";").shift() || "";
	if (JSON_RE.test(contentType)) return "json";
	if (textTypes.has(contentType) || contentType.startsWith("text/")) return "text";
	return "blob";
}
function resolveFetchOptions(request$1, input, defaults$1, Headers$8) {
	const headers = mergeHeaders(input?.headers ?? request$1?.headers, defaults$1?.headers, Headers$8);
	let query;
	if (defaults$1?.query || defaults$1?.params || input?.params || input?.query) query = {
		...defaults$1?.params,
		...defaults$1?.query,
		...input?.params,
		...input?.query
	};
	return {
		...defaults$1,
		...input,
		query,
		params: query,
		headers
	};
}
function mergeHeaders(input, defaults$1, Headers$8) {
	if (!defaults$1) return new Headers$8(input);
	const headers = new Headers$8(defaults$1);
	if (input) for (const [key, value$1] of Symbol.iterator in input || Array.isArray(input) ? input : new Headers$8(input)) headers.set(key, value$1);
	return headers;
}
async function callHooks(context, hooks) {
	if (hooks) if (Array.isArray(hooks)) for (const hook of hooks) await hook(context);
	else await hooks(context);
}
const retryStatusCodes = /* @__PURE__ */ new Set([
	408,
	409,
	425,
	429,
	500,
	502,
	503,
	504
]);
const nullBodyResponses = /* @__PURE__ */ new Set([
	101,
	204,
	205,
	304
]);
function createFetch(globalOptions = {}) {
	const { fetch: fetch$2 = globalThis.fetch, Headers: Headers$8 = globalThis.Headers, AbortController: AbortController$2 = globalThis.AbortController } = globalOptions;
	async function onError$1(context) {
		const isAbort = context.error && context.error.name === "AbortError" && !context.options.timeout || false;
		if (context.options.retry !== false && !isAbort) {
			let retries;
			if (typeof context.options.retry === "number") retries = context.options.retry;
			else retries = isPayloadMethod(context.options.method) ? 0 : 1;
			const responseCode = context.response && context.response.status || 500;
			if (retries > 0 && (Array.isArray(context.options.retryStatusCodes) ? context.options.retryStatusCodes.includes(responseCode) : retryStatusCodes.has(responseCode))) {
				const retryDelay = typeof context.options.retryDelay === "function" ? context.options.retryDelay(context) : context.options.retryDelay || 0;
				if (retryDelay > 0) await new Promise((resolve$1) => setTimeout(resolve$1, retryDelay));
				return $fetchRaw(context.request, {
					...context.options,
					retry: retries - 1
				});
			}
		}
		const error$1 = createFetchError(context);
		if (Error.captureStackTrace) Error.captureStackTrace(error$1, $fetchRaw);
		throw error$1;
	}
	const $fetchRaw = async function $fetchRaw2(_request, _options = {}) {
		const context = {
			request: _request,
			options: resolveFetchOptions(_request, _options, globalOptions.defaults, Headers$8),
			response: void 0,
			error: void 0
		};
		if (context.options.method) context.options.method = context.options.method.toUpperCase();
		if (context.options.onRequest) await callHooks(context, context.options.onRequest);
		if (typeof context.request === "string") {
			if (context.options.baseURL) context.request = withBase(context.request, context.options.baseURL);
			if (context.options.query) {
				context.request = withQuery(context.request, context.options.query);
				delete context.options.query;
			}
			if ("query" in context.options) delete context.options.query;
			if ("params" in context.options) delete context.options.params;
		}
		if (context.options.body && isPayloadMethod(context.options.method)) {
			if (isJSONSerializable(context.options.body)) {
				context.options.body = typeof context.options.body === "string" ? context.options.body : JSON.stringify(context.options.body);
				context.options.headers = new Headers$8(context.options.headers || {});
				if (!context.options.headers.has("content-type")) context.options.headers.set("content-type", "application/json");
				if (!context.options.headers.has("accept")) context.options.headers.set("accept", "application/json");
			} else if ("pipeTo" in context.options.body && typeof context.options.body.pipeTo === "function" || typeof context.options.body.pipe === "function") {
				if (!("duplex" in context.options)) context.options.duplex = "half";
			}
		}
		let abortTimeout;
		if (!context.options.signal && context.options.timeout) {
			const controller = new AbortController$2();
			abortTimeout = setTimeout(() => {
				const error$1 = new Error("[TimeoutError]: The operation was aborted due to timeout");
				error$1.name = "TimeoutError";
				error$1.code = 23;
				controller.abort(error$1);
			}, context.options.timeout);
			context.options.signal = controller.signal;
		}
		try {
			context.response = await fetch$2(context.request, context.options);
		} catch (error$1) {
			context.error = error$1;
			if (context.options.onRequestError) await callHooks(context, context.options.onRequestError);
			return await onError$1(context);
		} finally {
			if (abortTimeout) clearTimeout(abortTimeout);
		}
		const hasBody = (context.response.body || context.response._bodyInit) && !nullBodyResponses.has(context.response.status) && context.options.method !== "HEAD";
		if (hasBody) {
			const responseType = (context.options.parseResponse ? "json" : context.options.responseType) || detectResponseType(context.response.headers.get("content-type") || "");
			switch (responseType) {
				case "json": {
					const data = await context.response.text();
					const parseFunction = context.options.parseResponse || destr;
					context.response._data = parseFunction(data);
					break;
				}
				case "stream": {
					context.response._data = context.response.body || context.response._bodyInit;
					break;
				}
				default: context.response._data = await context.response[responseType]();
			}
		}
		if (context.options.onResponse) await callHooks(context, context.options.onResponse);
		if (!context.options.ignoreResponseError && context.response.status >= 400 && context.response.status < 600) {
			if (context.options.onResponseError) await callHooks(context, context.options.onResponseError);
			return await onError$1(context);
		}
		return context.response;
	};
	const $fetch = async function $fetch2(request$1, options) {
		const r$1 = await $fetchRaw(request$1, options);
		return r$1._data;
	};
	$fetch.raw = $fetchRaw;
	$fetch.native = (...args) => fetch$2(...args);
	$fetch.create = (defaultOptions$1 = {}, customGlobalOptions = {}) => createFetch({
		...globalOptions,
		...customGlobalOptions,
		defaults: {
			...globalOptions.defaults,
			...customGlobalOptions.defaults,
			...defaultOptions$1
		}
	});
	return $fetch;
}

//#endregion
//#region node_modules/.pnpm/ofetch@1.4.1/node_modules/ofetch/dist/index.mjs
const _globalThis = function() {
	if (typeof globalThis !== "undefined") return globalThis;
	if (typeof self !== "undefined") return self;
	if (typeof window !== "undefined") return window;
	if (typeof global !== "undefined") return global;
	throw new Error("unable to locate global object");
}();
const fetch$1 = _globalThis.fetch ? (...args) => _globalThis.fetch(...args) : () => Promise.reject(new Error("[ofetch] global.fetch is not supported!"));
const Headers$7 = _globalThis.Headers;
const AbortController$1 = _globalThis.AbortController;
const ofetch = createFetch({
	fetch: fetch$1,
	Headers: Headers$7,
	AbortController: AbortController$1
});

//#endregion
//#region node_modules/.pnpm/picocolors@1.1.1/node_modules/picocolors/picocolors.browser.js
var require_picocolors_browser = __commonJS({ "node_modules/.pnpm/picocolors@1.1.1/node_modules/picocolors/picocolors.browser.js"(exports, module) {
	var x$2 = String;
	var create = function() {
		return {
			isColorSupported: false,
			reset: x$2,
			bold: x$2,
			dim: x$2,
			italic: x$2,
			underline: x$2,
			inverse: x$2,
			hidden: x$2,
			strikethrough: x$2,
			black: x$2,
			red: x$2,
			green: x$2,
			yellow: x$2,
			blue: x$2,
			magenta: x$2,
			cyan: x$2,
			white: x$2,
			gray: x$2,
			bgBlack: x$2,
			bgRed: x$2,
			bgGreen: x$2,
			bgYellow: x$2,
			bgBlue: x$2,
			bgMagenta: x$2,
			bgCyan: x$2,
			bgWhite: x$2,
			blackBright: x$2,
			redBright: x$2,
			greenBright: x$2,
			yellowBright: x$2,
			blueBright: x$2,
			magentaBright: x$2,
			cyanBright: x$2,
			whiteBright: x$2,
			bgBlackBright: x$2,
			bgRedBright: x$2,
			bgGreenBright: x$2,
			bgYellowBright: x$2,
			bgBlueBright: x$2,
			bgMagentaBright: x$2,
			bgCyanBright: x$2,
			bgWhiteBright: x$2
		};
	};
	module.exports = create();
	module.exports.createColors = create;
} });

//#endregion
//#region node_modules/.pnpm/pretty-bytes@6.1.1/node_modules/pretty-bytes/index.js
const BYTE_UNITS = [
	"B",
	"kB",
	"MB",
	"GB",
	"TB",
	"PB",
	"EB",
	"ZB",
	"YB"
];
const BIBYTE_UNITS = [
	"B",
	"KiB",
	"MiB",
	"GiB",
	"TiB",
	"PiB",
	"EiB",
	"ZiB",
	"YiB"
];
const BIT_UNITS = [
	"b",
	"kbit",
	"Mbit",
	"Gbit",
	"Tbit",
	"Pbit",
	"Ebit",
	"Zbit",
	"Ybit"
];
const BIBIT_UNITS = [
	"b",
	"kibit",
	"Mibit",
	"Gibit",
	"Tibit",
	"Pibit",
	"Eibit",
	"Zibit",
	"Yibit"
];
const toLocaleString = (number, locale, options) => {
	let result = number;
	if (typeof locale === "string" || Array.isArray(locale)) result = number.toLocaleString(locale, options);
	else if (locale === true || options !== void 0) result = number.toLocaleString(void 0, options);
	return result;
};
function prettyBytes(number, options) {
	if (!Number.isFinite(number)) throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);
	options = {
		bits: false,
		binary: false,
		space: true,
		...options
	};
	const UNITS = options.bits ? options.binary ? BIBIT_UNITS : BIT_UNITS : options.binary ? BIBYTE_UNITS : BYTE_UNITS;
	const separator = options.space ? " " : "";
	if (options.signed && number === 0) return ` 0${separator}${UNITS[0]}`;
	const isNegative = number < 0;
	const prefix = isNegative ? "-" : options.signed ? "+" : "";
	if (isNegative) number = -number;
	let localeOptions;
	if (options.minimumFractionDigits !== void 0) localeOptions = { minimumFractionDigits: options.minimumFractionDigits };
	if (options.maximumFractionDigits !== void 0) localeOptions = {
		maximumFractionDigits: options.maximumFractionDigits,
		...localeOptions
	};
	if (number < 1) {
		const numberString$1 = toLocaleString(number, options.locale, localeOptions);
		return prefix + numberString$1 + separator + UNITS[0];
	}
	const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);
	number /= (options.binary ? 1024 : 1e3) ** exponent;
	if (!localeOptions) number = number.toPrecision(3);
	const numberString = toLocaleString(Number(number), options.locale, localeOptions);
	const unit = UNITS[exponent];
	return prefix + numberString + separator + unit;
}

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/utils.js
var require_utils$2 = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toCommandProperties = exports.toCommandValue = void 0;
	/**
	* Sanitizes an input into a string so it can be passed into issueCommand safely
	* @param input input to sanitize into a string
	*/
	function toCommandValue(input) {
		if (input === null || input === void 0) return "";
		else if (typeof input === "string" || input instanceof String) return input;
		return JSON.stringify(input);
	}
	exports.toCommandValue = toCommandValue;
	/**
	*
	* @param annotationProperties
	* @returns The command properties to send with the actual annotation command
	* See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
	*/
	function toCommandProperties(annotationProperties) {
		if (!Object.keys(annotationProperties).length) return {};
		return {
			title: annotationProperties.title,
			file: annotationProperties.file,
			line: annotationProperties.startLine,
			endLine: annotationProperties.endLine,
			col: annotationProperties.startColumn,
			endColumn: annotationProperties.endColumn
		};
	}
	exports.toCommandProperties = toCommandProperties;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/command.js
var require_command = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/command.js"(exports) {
	var __createBinding$9 = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		var desc = Object.getOwnPropertyDescriptor(m$1, k$2);
		if (!desc || ("get" in desc ? !m$1.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault$9 = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar$9 = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k$2)) __createBinding$9(result, mod, k$2);
		}
		__setModuleDefault$9(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.issue = exports.issueCommand = void 0;
	const os$4 = __importStar$9(__require("os"));
	const utils_1$3 = require_utils$2();
	/**
	* Commands
	*
	* Command Format:
	*   ::name key=value,key=value::message
	*
	* Examples:
	*   ::warning::This is the message
	*   ::set-env name=MY_VAR::some value
	*/
	function issueCommand(command, properties, message) {
		const cmd = new Command(command, properties, message);
		process.stdout.write(cmd.toString() + os$4.EOL);
	}
	exports.issueCommand = issueCommand;
	function issue(name, message = "") {
		issueCommand(name, {}, message);
	}
	exports.issue = issue;
	const CMD_STRING = "::";
	var Command = class {
		constructor(command, properties, message) {
			if (!command) command = "missing.command";
			this.command = command;
			this.properties = properties;
			this.message = message;
		}
		toString() {
			let cmdStr = CMD_STRING + this.command;
			if (this.properties && Object.keys(this.properties).length > 0) {
				cmdStr += " ";
				let first = true;
				for (const key in this.properties) if (this.properties.hasOwnProperty(key)) {
					const val = this.properties[key];
					if (val) {
						if (first) first = false;
						else cmdStr += ",";
						cmdStr += `${key}=${escapeProperty(val)}`;
					}
				}
			}
			cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
			return cmdStr;
		}
	};
	function escapeData(s) {
		return (0, utils_1$3.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
	}
	function escapeProperty(s) {
		return (0, utils_1$3.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
	}
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/file-command.js"(exports) {
	var __createBinding$8 = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		var desc = Object.getOwnPropertyDescriptor(m$1, k$2);
		if (!desc || ("get" in desc ? !m$1.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault$8 = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar$8 = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k$2)) __createBinding$8(result, mod, k$2);
		}
		__setModuleDefault$8(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
	const crypto$4 = __importStar$8(__require("crypto"));
	const fs$2 = __importStar$8(__require("fs"));
	const os$3 = __importStar$8(__require("os"));
	const utils_1$2 = require_utils$2();
	function issueFileCommand(command, message) {
		const filePath = process.env[`GITHUB_${command}`];
		if (!filePath) throw new Error(`Unable to find environment variable for file command ${command}`);
		if (!fs$2.existsSync(filePath)) throw new Error(`Missing file at path: ${filePath}`);
		fs$2.appendFileSync(filePath, `${(0, utils_1$2.toCommandValue)(message)}${os$3.EOL}`, { encoding: "utf8" });
	}
	exports.issueFileCommand = issueFileCommand;
	function prepareKeyValueMessage(key, value$1) {
		const delimiter = `ghadelimiter_${crypto$4.randomUUID()}`;
		const convertedValue = (0, utils_1$2.toCommandValue)(value$1);
		if (key.includes(delimiter)) throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
		if (convertedValue.includes(delimiter)) throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
		return `${key}<<${delimiter}${os$3.EOL}${convertedValue}${os$3.EOL}${delimiter}`;
	}
	exports.prepareKeyValueMessage = prepareKeyValueMessage;
} });

//#endregion
//#region node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({ "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.checkBypass = exports.getProxyUrl = void 0;
	function getProxyUrl$1(reqUrl) {
		const usingSsl = reqUrl.protocol === "https:";
		if (checkBypass(reqUrl)) return void 0;
		const proxyVar = (() => {
			if (usingSsl) return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
			else return process.env["http_proxy"] || process.env["HTTP_PROXY"];
		})();
		if (proxyVar) try {
			return new DecodedURL(proxyVar);
		} catch (_a$1) {
			if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://")) return new DecodedURL(`http://${proxyVar}`);
		}
		else return void 0;
	}
	exports.getProxyUrl = getProxyUrl$1;
	function checkBypass(reqUrl) {
		if (!reqUrl.hostname) return false;
		const reqHost = reqUrl.hostname;
		if (isLoopbackAddress(reqHost)) return true;
		const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
		if (!noProxy) return false;
		let reqPort;
		if (reqUrl.port) reqPort = Number(reqUrl.port);
		else if (reqUrl.protocol === "http:") reqPort = 80;
		else if (reqUrl.protocol === "https:") reqPort = 443;
		const upperReqHosts = [reqUrl.hostname.toUpperCase()];
		if (typeof reqPort === "number") upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
		for (const upperNoProxyItem of noProxy.split(",").map((x$3) => x$3.trim().toUpperCase()).filter((x$3) => x$3)) if (upperNoProxyItem === "*" || upperReqHosts.some((x$3) => x$3 === upperNoProxyItem || x$3.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x$3.endsWith(`${upperNoProxyItem}`))) return true;
		return false;
	}
	exports.checkBypass = checkBypass;
	function isLoopbackAddress(host) {
		const hostLower = host.toLowerCase();
		return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
	}
	var DecodedURL = class extends URL {
		constructor(url, base) {
			super(url, base);
			this._decodedUsername = decodeURIComponent(super.username);
			this._decodedPassword = decodeURIComponent(super.password);
		}
		get username() {
			return this._decodedUsername;
		}
		get password() {
			return this._decodedPassword;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js
var require_tunnel$1 = __commonJS({ "node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js"(exports) {
	var net$3 = __require("net");
	var tls$1 = __require("tls");
	var http$3 = __require("http");
	var https$3 = __require("https");
	var events$1 = __require("events");
	var assert$20 = __require("assert");
	var util$17 = __require("util");
	exports.httpOverHttp = httpOverHttp;
	exports.httpsOverHttp = httpsOverHttp;
	exports.httpOverHttps = httpOverHttps;
	exports.httpsOverHttps = httpsOverHttps;
	function httpOverHttp(options) {
		var agent = new TunnelingAgent(options);
		agent.request = http$3.request;
		return agent;
	}
	function httpsOverHttp(options) {
		var agent = new TunnelingAgent(options);
		agent.request = http$3.request;
		agent.createSocket = createSecureSocket;
		agent.defaultPort = 443;
		return agent;
	}
	function httpOverHttps(options) {
		var agent = new TunnelingAgent(options);
		agent.request = https$3.request;
		return agent;
	}
	function httpsOverHttps(options) {
		var agent = new TunnelingAgent(options);
		agent.request = https$3.request;
		agent.createSocket = createSecureSocket;
		agent.defaultPort = 443;
		return agent;
	}
	function TunnelingAgent(options) {
		var self$1 = this;
		self$1.options = options || {};
		self$1.proxyOptions = self$1.options.proxy || {};
		self$1.maxSockets = self$1.options.maxSockets || http$3.Agent.defaultMaxSockets;
		self$1.requests = [];
		self$1.sockets = [];
		self$1.on("free", function onFree(socket, host, port, localAddress) {
			var options$1 = toOptions(host, port, localAddress);
			for (var i = 0, len = self$1.requests.length; i < len; ++i) {
				var pending = self$1.requests[i];
				if (pending.host === options$1.host && pending.port === options$1.port) {
					self$1.requests.splice(i, 1);
					pending.request.onSocket(socket);
					return;
				}
			}
			socket.destroy();
			self$1.removeSocket(socket);
		});
	}
	util$17.inherits(TunnelingAgent, events$1.EventEmitter);
	TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
		var self$1 = this;
		var options = mergeOptions({ request: req }, self$1.options, toOptions(host, port, localAddress));
		if (self$1.sockets.length >= this.maxSockets) {
			self$1.requests.push(options);
			return;
		}
		self$1.createSocket(options, function(socket) {
			socket.on("free", onFree);
			socket.on("close", onCloseOrRemove);
			socket.on("agentRemove", onCloseOrRemove);
			req.onSocket(socket);
			function onFree() {
				self$1.emit("free", socket, options);
			}
			function onCloseOrRemove(err) {
				self$1.removeSocket(socket);
				socket.removeListener("free", onFree);
				socket.removeListener("close", onCloseOrRemove);
				socket.removeListener("agentRemove", onCloseOrRemove);
			}
		});
	};
	TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
		var self$1 = this;
		var placeholder = {};
		self$1.sockets.push(placeholder);
		var connectOptions = mergeOptions({}, self$1.proxyOptions, {
			method: "CONNECT",
			path: options.host + ":" + options.port,
			agent: false,
			headers: { host: options.host + ":" + options.port }
		});
		if (options.localAddress) connectOptions.localAddress = options.localAddress;
		if (connectOptions.proxyAuth) {
			connectOptions.headers = connectOptions.headers || {};
			connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
		}
		debug$4("making CONNECT request");
		var connectReq = self$1.request(connectOptions);
		connectReq.useChunkedEncodingByDefault = false;
		connectReq.once("response", onResponse);
		connectReq.once("upgrade", onUpgrade);
		connectReq.once("connect", onConnect);
		connectReq.once("error", onError$1);
		connectReq.end();
		function onResponse(res) {
			res.upgrade = true;
		}
		function onUpgrade(res, socket, head) {
			process.nextTick(function() {
				onConnect(res, socket, head);
			});
		}
		function onConnect(res, socket, head) {
			connectReq.removeAllListeners();
			socket.removeAllListeners();
			if (res.statusCode !== 200) {
				debug$4("tunneling socket could not be established, statusCode=%d", res.statusCode);
				socket.destroy();
				var error$1 = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
				error$1.code = "ECONNRESET";
				options.request.emit("error", error$1);
				self$1.removeSocket(placeholder);
				return;
			}
			if (head.length > 0) {
				debug$4("got illegal response body from proxy");
				socket.destroy();
				var error$1 = new Error("got illegal response body from proxy");
				error$1.code = "ECONNRESET";
				options.request.emit("error", error$1);
				self$1.removeSocket(placeholder);
				return;
			}
			debug$4("tunneling connection has established");
			self$1.sockets[self$1.sockets.indexOf(placeholder)] = socket;
			return cb(socket);
		}
		function onError$1(cause) {
			connectReq.removeAllListeners();
			debug$4("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
			var error$1 = new Error("tunneling socket could not be established, cause=" + cause.message);
			error$1.code = "ECONNRESET";
			options.request.emit("error", error$1);
			self$1.removeSocket(placeholder);
		}
	};
	TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
		var pos = this.sockets.indexOf(socket);
		if (pos === -1) return;
		this.sockets.splice(pos, 1);
		var pending = this.requests.shift();
		if (pending) this.createSocket(pending, function(socket$1) {
			pending.request.onSocket(socket$1);
		});
	};
	function createSecureSocket(options, cb) {
		var self$1 = this;
		TunnelingAgent.prototype.createSocket.call(self$1, options, function(socket) {
			var hostHeader = options.request.getHeader("host");
			var tlsOptions = mergeOptions({}, self$1.options, {
				socket,
				servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
			});
			var secureSocket = tls$1.connect(0, tlsOptions);
			self$1.sockets[self$1.sockets.indexOf(socket)] = secureSocket;
			cb(secureSocket);
		});
	}
	function toOptions(host, port, localAddress) {
		if (typeof host === "string") return {
			host,
			port,
			localAddress
		};
		return host;
	}
	function mergeOptions(target) {
		for (var i = 1, len = arguments.length; i < len; ++i) {
			var overrides = arguments[i];
			if (typeof overrides === "object") {
				var keys = Object.keys(overrides);
				for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
					var k$2 = keys[j];
					if (overrides[k$2] !== void 0) target[k$2] = overrides[k$2];
				}
			}
		}
		return target;
	}
	var debug$4;
	if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) debug$4 = function() {
		var args = Array.prototype.slice.call(arguments);
		if (typeof args[0] === "string") args[0] = "TUNNEL: " + args[0];
		else args.unshift("TUNNEL:");
		console.error.apply(console, args);
	};
	else debug$4 = function() {};
	exports.debug = debug$4;
} });

//#endregion
//#region node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js
var require_tunnel = __commonJS({ "node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js"(exports, module) {
	module.exports = require_tunnel$1();
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/symbols.js
var require_symbols$4 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/symbols.js"(exports, module) {
	module.exports = {
		kClose: Symbol("close"),
		kDestroy: Symbol("destroy"),
		kDispatch: Symbol("dispatch"),
		kUrl: Symbol("url"),
		kWriting: Symbol("writing"),
		kResuming: Symbol("resuming"),
		kQueue: Symbol("queue"),
		kConnect: Symbol("connect"),
		kConnecting: Symbol("connecting"),
		kHeadersList: Symbol("headers list"),
		kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
		kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
		kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
		kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
		kKeepAlive: Symbol("keep alive"),
		kHeadersTimeout: Symbol("headers timeout"),
		kBodyTimeout: Symbol("body timeout"),
		kServerName: Symbol("server name"),
		kLocalAddress: Symbol("local address"),
		kHost: Symbol("host"),
		kNoRef: Symbol("no ref"),
		kBodyUsed: Symbol("used"),
		kRunning: Symbol("running"),
		kBlocking: Symbol("blocking"),
		kPending: Symbol("pending"),
		kSize: Symbol("size"),
		kBusy: Symbol("busy"),
		kQueued: Symbol("queued"),
		kFree: Symbol("free"),
		kConnected: Symbol("connected"),
		kClosed: Symbol("closed"),
		kNeedDrain: Symbol("need drain"),
		kReset: Symbol("reset"),
		kDestroyed: Symbol.for("nodejs.stream.destroyed"),
		kMaxHeadersSize: Symbol("max headers size"),
		kRunningIdx: Symbol("running index"),
		kPendingIdx: Symbol("pending index"),
		kError: Symbol("error"),
		kClients: Symbol("clients"),
		kClient: Symbol("client"),
		kParser: Symbol("parser"),
		kOnDestroyed: Symbol("destroy callbacks"),
		kPipelining: Symbol("pipelining"),
		kSocket: Symbol("socket"),
		kHostHeader: Symbol("host header"),
		kConnector: Symbol("connector"),
		kStrictContentLength: Symbol("strict content length"),
		kMaxRedirections: Symbol("maxRedirections"),
		kMaxRequests: Symbol("maxRequestsPerClient"),
		kProxy: Symbol("proxy agent options"),
		kCounter: Symbol("socket request counter"),
		kInterceptors: Symbol("dispatch interceptors"),
		kMaxResponseSize: Symbol("max response size"),
		kHTTP2Session: Symbol("http2Session"),
		kHTTP2SessionState: Symbol("http2Session state"),
		kHTTP2BuildRequest: Symbol("http2 build request"),
		kHTTP1BuildRequest: Symbol("http1 build request"),
		kHTTP2CopyHeaders: Symbol("http2 copy headers"),
		kHTTPConnVersion: Symbol("http connection version"),
		kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
		kConstruct: Symbol("constructable")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/errors.js
var require_errors = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/errors.js"(exports, module) {
	var UndiciError$2 = class extends Error {
		constructor(message) {
			super(message);
			this.name = "UndiciError";
			this.code = "UND_ERR";
		}
	};
	var ConnectTimeoutError$1 = class ConnectTimeoutError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ConnectTimeoutError$1);
			this.name = "ConnectTimeoutError";
			this.message = message || "Connect Timeout Error";
			this.code = "UND_ERR_CONNECT_TIMEOUT";
		}
	};
	var HeadersTimeoutError$1 = class HeadersTimeoutError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, HeadersTimeoutError$1);
			this.name = "HeadersTimeoutError";
			this.message = message || "Headers Timeout Error";
			this.code = "UND_ERR_HEADERS_TIMEOUT";
		}
	};
	var HeadersOverflowError$1 = class HeadersOverflowError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, HeadersOverflowError$1);
			this.name = "HeadersOverflowError";
			this.message = message || "Headers Overflow Error";
			this.code = "UND_ERR_HEADERS_OVERFLOW";
		}
	};
	var BodyTimeoutError$1 = class BodyTimeoutError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, BodyTimeoutError$1);
			this.name = "BodyTimeoutError";
			this.message = message || "Body Timeout Error";
			this.code = "UND_ERR_BODY_TIMEOUT";
		}
	};
	var ResponseStatusCodeError$1 = class ResponseStatusCodeError$1 extends UndiciError$2 {
		constructor(message, statusCode, headers, body) {
			super(message);
			Error.captureStackTrace(this, ResponseStatusCodeError$1);
			this.name = "ResponseStatusCodeError";
			this.message = message || "Response Status Code Error";
			this.code = "UND_ERR_RESPONSE_STATUS_CODE";
			this.body = body;
			this.status = statusCode;
			this.statusCode = statusCode;
			this.headers = headers;
		}
	};
	var InvalidArgumentError$22 = class InvalidArgumentError$22 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InvalidArgumentError$22);
			this.name = "InvalidArgumentError";
			this.message = message || "Invalid Argument Error";
			this.code = "UND_ERR_INVALID_ARG";
		}
	};
	var InvalidReturnValueError$2 = class InvalidReturnValueError$2 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InvalidReturnValueError$2);
			this.name = "InvalidReturnValueError";
			this.message = message || "Invalid Return Value Error";
			this.code = "UND_ERR_INVALID_RETURN_VALUE";
		}
	};
	var RequestAbortedError$9 = class RequestAbortedError$9 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, RequestAbortedError$9);
			this.name = "AbortError";
			this.message = message || "Request aborted";
			this.code = "UND_ERR_ABORTED";
		}
	};
	var InformationalError$1 = class InformationalError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InformationalError$1);
			this.name = "InformationalError";
			this.message = message || "Request information";
			this.code = "UND_ERR_INFO";
		}
	};
	var RequestContentLengthMismatchError$1 = class RequestContentLengthMismatchError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, RequestContentLengthMismatchError$1);
			this.name = "RequestContentLengthMismatchError";
			this.message = message || "Request body length does not match content-length header";
			this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ResponseContentLengthMismatchError$1 = class ResponseContentLengthMismatchError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ResponseContentLengthMismatchError$1);
			this.name = "ResponseContentLengthMismatchError";
			this.message = message || "Response body length does not match content-length header";
			this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ClientDestroyedError$2 = class ClientDestroyedError$2 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ClientDestroyedError$2);
			this.name = "ClientDestroyedError";
			this.message = message || "The client is destroyed";
			this.code = "UND_ERR_DESTROYED";
		}
	};
	var ClientClosedError$1 = class ClientClosedError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ClientClosedError$1);
			this.name = "ClientClosedError";
			this.message = message || "The client is closed";
			this.code = "UND_ERR_CLOSED";
		}
	};
	var SocketError$3 = class SocketError$3 extends UndiciError$2 {
		constructor(message, socket) {
			super(message);
			Error.captureStackTrace(this, SocketError$3);
			this.name = "SocketError";
			this.message = message || "Socket error";
			this.code = "UND_ERR_SOCKET";
			this.socket = socket;
		}
	};
	var NotSupportedError$2 = class NotSupportedError$2 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, NotSupportedError$2);
			this.name = "NotSupportedError";
			this.message = message || "Not supported error";
			this.code = "UND_ERR_NOT_SUPPORTED";
		}
	};
	var BalancedPoolMissingUpstreamError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, NotSupportedError$2);
			this.name = "MissingUpstreamError";
			this.message = message || "No upstream has been added to the BalancedPool";
			this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
		}
	};
	var HTTPParserError$1 = class HTTPParserError$1 extends Error {
		constructor(message, code, data) {
			super(message);
			Error.captureStackTrace(this, HTTPParserError$1);
			this.name = "HTTPParserError";
			this.code = code ? `HPE_${code}` : void 0;
			this.data = data ? data.toString() : void 0;
		}
	};
	var ResponseExceededMaxSizeError$1 = class ResponseExceededMaxSizeError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ResponseExceededMaxSizeError$1);
			this.name = "ResponseExceededMaxSizeError";
			this.message = message || "Response content exceeded max size";
			this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
		}
	};
	var RequestRetryError$1 = class RequestRetryError$1 extends UndiciError$2 {
		constructor(message, code, { headers, data }) {
			super(message);
			Error.captureStackTrace(this, RequestRetryError$1);
			this.name = "RequestRetryError";
			this.message = message || "Request retry error";
			this.code = "UND_ERR_REQ_RETRY";
			this.statusCode = code;
			this.data = data;
			this.headers = headers;
		}
	};
	module.exports = {
		HTTPParserError: HTTPParserError$1,
		UndiciError: UndiciError$2,
		HeadersTimeoutError: HeadersTimeoutError$1,
		HeadersOverflowError: HeadersOverflowError$1,
		BodyTimeoutError: BodyTimeoutError$1,
		RequestContentLengthMismatchError: RequestContentLengthMismatchError$1,
		ConnectTimeoutError: ConnectTimeoutError$1,
		ResponseStatusCodeError: ResponseStatusCodeError$1,
		InvalidArgumentError: InvalidArgumentError$22,
		InvalidReturnValueError: InvalidReturnValueError$2,
		RequestAbortedError: RequestAbortedError$9,
		ClientDestroyedError: ClientDestroyedError$2,
		ClientClosedError: ClientClosedError$1,
		InformationalError: InformationalError$1,
		SocketError: SocketError$3,
		NotSupportedError: NotSupportedError$2,
		ResponseContentLengthMismatchError: ResponseContentLengthMismatchError$1,
		BalancedPoolMissingUpstreamError: BalancedPoolMissingUpstreamError$1,
		ResponseExceededMaxSizeError: ResponseExceededMaxSizeError$1,
		RequestRetryError: RequestRetryError$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/constants.js
var require_constants$5 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/constants.js"(exports, module) {
	/** @type {Record<string, string | undefined>} */
	const headerNameLowerCasedRecord$1 = {};
	const wellknownHeaderNames = [
		"Accept",
		"Accept-Encoding",
		"Accept-Language",
		"Accept-Ranges",
		"Access-Control-Allow-Credentials",
		"Access-Control-Allow-Headers",
		"Access-Control-Allow-Methods",
		"Access-Control-Allow-Origin",
		"Access-Control-Expose-Headers",
		"Access-Control-Max-Age",
		"Access-Control-Request-Headers",
		"Access-Control-Request-Method",
		"Age",
		"Allow",
		"Alt-Svc",
		"Alt-Used",
		"Authorization",
		"Cache-Control",
		"Clear-Site-Data",
		"Connection",
		"Content-Disposition",
		"Content-Encoding",
		"Content-Language",
		"Content-Length",
		"Content-Location",
		"Content-Range",
		"Content-Security-Policy",
		"Content-Security-Policy-Report-Only",
		"Content-Type",
		"Cookie",
		"Cross-Origin-Embedder-Policy",
		"Cross-Origin-Opener-Policy",
		"Cross-Origin-Resource-Policy",
		"Date",
		"Device-Memory",
		"Downlink",
		"ECT",
		"ETag",
		"Expect",
		"Expect-CT",
		"Expires",
		"Forwarded",
		"From",
		"Host",
		"If-Match",
		"If-Modified-Since",
		"If-None-Match",
		"If-Range",
		"If-Unmodified-Since",
		"Keep-Alive",
		"Last-Modified",
		"Link",
		"Location",
		"Max-Forwards",
		"Origin",
		"Permissions-Policy",
		"Pragma",
		"Proxy-Authenticate",
		"Proxy-Authorization",
		"RTT",
		"Range",
		"Referer",
		"Referrer-Policy",
		"Refresh",
		"Retry-After",
		"Sec-WebSocket-Accept",
		"Sec-WebSocket-Extensions",
		"Sec-WebSocket-Key",
		"Sec-WebSocket-Protocol",
		"Sec-WebSocket-Version",
		"Server",
		"Server-Timing",
		"Service-Worker-Allowed",
		"Service-Worker-Navigation-Preload",
		"Set-Cookie",
		"SourceMap",
		"Strict-Transport-Security",
		"Supports-Loading-Mode",
		"TE",
		"Timing-Allow-Origin",
		"Trailer",
		"Transfer-Encoding",
		"Upgrade",
		"Upgrade-Insecure-Requests",
		"User-Agent",
		"Vary",
		"Via",
		"WWW-Authenticate",
		"X-Content-Type-Options",
		"X-DNS-Prefetch-Control",
		"X-Frame-Options",
		"X-Permitted-Cross-Domain-Policies",
		"X-Powered-By",
		"X-Requested-With",
		"X-XSS-Protection"
	];
	for (let i = 0; i < wellknownHeaderNames.length; ++i) {
		const key = wellknownHeaderNames[i];
		const lowerCasedKey = key.toLowerCase();
		headerNameLowerCasedRecord$1[key] = headerNameLowerCasedRecord$1[lowerCasedKey] = lowerCasedKey;
	}
	Object.setPrototypeOf(headerNameLowerCasedRecord$1, null);
	module.exports = {
		wellknownHeaderNames,
		headerNameLowerCasedRecord: headerNameLowerCasedRecord$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/util.js
var require_util$6 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/util.js"(exports, module) {
	const assert$19 = __require("assert");
	const { kDestroyed: kDestroyed$1, kBodyUsed: kBodyUsed$2 } = require_symbols$4();
	const { IncomingMessage } = __require("http");
	const stream$1 = __require("stream");
	const net$2 = __require("net");
	const { InvalidArgumentError: InvalidArgumentError$21 } = require_errors();
	const { Blob: Blob$5 } = __require("buffer");
	const nodeUtil = __require("util");
	const { stringify: stringify$3 } = __require("querystring");
	const { headerNameLowerCasedRecord } = require_constants$5();
	const [nodeMajor$1, nodeMinor$1] = process.versions.node.split(".").map((v$1) => Number(v$1));
	function nop$1() {}
	function isStream(obj) {
		return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
	}
	function isBlobLike$7(object) {
		return Blob$5 && object instanceof Blob$5 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
	}
	function buildURL$2(url, queryParams) {
		if (url.includes("?") || url.includes("#")) throw new Error("Query params cannot be passed when url already contains \"?\" or \"#\".");
		const stringified = stringify$3(queryParams);
		if (stringified) url += "?" + stringified;
		return url;
	}
	function parseURL(url) {
		if (typeof url === "string") {
			url = new URL(url);
			if (!/^https?:/.test(url.origin || url.protocol)) throw new InvalidArgumentError$21("Invalid URL protocol: the URL must start with `http:` or `https:`.");
			return url;
		}
		if (!url || typeof url !== "object") throw new InvalidArgumentError$21("Invalid URL: The URL argument must be a non-null object.");
		if (!/^https?:/.test(url.origin || url.protocol)) throw new InvalidArgumentError$21("Invalid URL protocol: the URL must start with `http:` or `https:`.");
		if (!(url instanceof URL)) {
			if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) throw new InvalidArgumentError$21("Invalid URL: port must be a valid integer or a string representation of an integer.");
			if (url.path != null && typeof url.path !== "string") throw new InvalidArgumentError$21("Invalid URL path: the path must be a string or null/undefined.");
			if (url.pathname != null && typeof url.pathname !== "string") throw new InvalidArgumentError$21("Invalid URL pathname: the pathname must be a string or null/undefined.");
			if (url.hostname != null && typeof url.hostname !== "string") throw new InvalidArgumentError$21("Invalid URL hostname: the hostname must be a string or null/undefined.");
			if (url.origin != null && typeof url.origin !== "string") throw new InvalidArgumentError$21("Invalid URL origin: the origin must be a string or null/undefined.");
			const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
			let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
			let path$9 = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
			if (origin.endsWith("/")) origin = origin.substring(0, origin.length - 1);
			if (path$9 && !path$9.startsWith("/")) path$9 = `/${path$9}`;
			url = new URL(origin + path$9);
		}
		return url;
	}
	function parseOrigin$1(url) {
		url = parseURL(url);
		if (url.pathname !== "/" || url.search || url.hash) throw new InvalidArgumentError$21("invalid url");
		return url;
	}
	function getHostname(host) {
		if (host[0] === "[") {
			const idx$1 = host.indexOf("]");
			assert$19(idx$1 !== -1);
			return host.substring(1, idx$1);
		}
		const idx = host.indexOf(":");
		if (idx === -1) return host;
		return host.substring(0, idx);
	}
	function getServerName(host) {
		if (!host) return null;
		assert$19.strictEqual(typeof host, "string");
		const servername = getHostname(host);
		if (net$2.isIP(servername)) return "";
		return servername;
	}
	function deepClone(obj) {
		return JSON.parse(JSON.stringify(obj));
	}
	function isAsyncIterable(obj) {
		return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
	}
	function isIterable(obj) {
		return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
	}
	function bodyLength(body) {
		if (body == null) return 0;
		else if (isStream(body)) {
			const state = body._readableState;
			return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
		} else if (isBlobLike$7(body)) return body.size != null ? body.size : null;
		else if (isBuffer$1(body)) return body.byteLength;
		return null;
	}
	function isDestroyed(stream$2) {
		return !stream$2 || !!(stream$2.destroyed || stream$2[kDestroyed$1]);
	}
	function isReadableAborted(stream$2) {
		const state = stream$2 && stream$2._readableState;
		return isDestroyed(stream$2) && state && !state.endEmitted;
	}
	function destroy(stream$2, err) {
		if (stream$2 == null || !isStream(stream$2) || isDestroyed(stream$2)) return;
		if (typeof stream$2.destroy === "function") {
			if (Object.getPrototypeOf(stream$2).constructor === IncomingMessage) stream$2.socket = null;
			stream$2.destroy(err);
		} else if (err) process.nextTick((stream$3, err$1) => {
			stream$3.emit("error", err$1);
		}, stream$2, err);
		if (stream$2.destroyed !== true) stream$2[kDestroyed$1] = true;
	}
	const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
	function parseKeepAliveTimeout(val) {
		const m$1 = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
		return m$1 ? parseInt(m$1[1], 10) * 1e3 : null;
	}
	/**
	* Retrieves a header name and returns its lowercase value.
	* @param {string | Buffer} value Header name
	* @returns {string}
	*/
	function headerNameToString(value$1) {
		return headerNameLowerCasedRecord[value$1] || value$1.toLowerCase();
	}
	function parseHeaders$1(headers, obj = {}) {
		if (!Array.isArray(headers)) return headers;
		for (let i = 0; i < headers.length; i += 2) {
			const key = headers[i].toString().toLowerCase();
			let val = obj[key];
			if (!val) if (Array.isArray(headers[i + 1])) obj[key] = headers[i + 1].map((x$3) => x$3.toString("utf8"));
			else obj[key] = headers[i + 1].toString("utf8");
			else {
				if (!Array.isArray(val)) {
					val = [val];
					obj[key] = val;
				}
				val.push(headers[i + 1].toString("utf8"));
			}
		}
		if ("content-length" in obj && "content-disposition" in obj) obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
		return obj;
	}
	function parseRawHeaders(headers) {
		const ret = [];
		let hasContentLength = false;
		let contentDispositionIdx = -1;
		for (let n = 0; n < headers.length; n += 2) {
			const key = headers[n + 0].toString();
			const val = headers[n + 1].toString("utf8");
			if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
				ret.push(key, val);
				hasContentLength = true;
			} else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) contentDispositionIdx = ret.push(key, val) - 1;
			else ret.push(key, val);
		}
		if (hasContentLength && contentDispositionIdx !== -1) ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
		return ret;
	}
	function isBuffer$1(buffer) {
		return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
	}
	function validateHandler(handler, method, upgrade$1) {
		if (!handler || typeof handler !== "object") throw new InvalidArgumentError$21("handler must be an object");
		if (typeof handler.onConnect !== "function") throw new InvalidArgumentError$21("invalid onConnect method");
		if (typeof handler.onError !== "function") throw new InvalidArgumentError$21("invalid onError method");
		if (typeof handler.onBodySent !== "function" && handler.onBodySent !== void 0) throw new InvalidArgumentError$21("invalid onBodySent method");
		if (upgrade$1 || method === "CONNECT") {
			if (typeof handler.onUpgrade !== "function") throw new InvalidArgumentError$21("invalid onUpgrade method");
		} else {
			if (typeof handler.onHeaders !== "function") throw new InvalidArgumentError$21("invalid onHeaders method");
			if (typeof handler.onData !== "function") throw new InvalidArgumentError$21("invalid onData method");
			if (typeof handler.onComplete !== "function") throw new InvalidArgumentError$21("invalid onComplete method");
		}
	}
	function isDisturbed$2(body) {
		return !!(body && (stream$1.isDisturbed ? stream$1.isDisturbed(body) || body[kBodyUsed$2] : body[kBodyUsed$2] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
	}
	function isErrored$2(body) {
		return !!(body && (stream$1.isErrored ? stream$1.isErrored(body) : /state: 'errored'/.test(nodeUtil.inspect(body))));
	}
	function isReadable$1(body) {
		return !!(body && (stream$1.isReadable ? stream$1.isReadable(body) : /state: 'readable'/.test(nodeUtil.inspect(body))));
	}
	function getSocketInfo(socket) {
		return {
			localAddress: socket.localAddress,
			localPort: socket.localPort,
			remoteAddress: socket.remoteAddress,
			remotePort: socket.remotePort,
			remoteFamily: socket.remoteFamily,
			timeout: socket.timeout,
			bytesWritten: socket.bytesWritten,
			bytesRead: socket.bytesRead
		};
	}
	async function* convertIterableToBuffer(iterable) {
		for await (const chunk of iterable) yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
	}
	let ReadableStream$5;
	function ReadableStreamFrom$3(iterable) {
		if (!ReadableStream$5) ReadableStream$5 = __require("stream/web").ReadableStream;
		if (ReadableStream$5.from) return ReadableStream$5.from(convertIterableToBuffer(iterable));
		let iterator;
		return new ReadableStream$5({
			async start() {
				iterator = iterable[Symbol.asyncIterator]();
			},
			async pull(controller) {
				const { done, value: value$1 } = await iterator.next();
				if (done) queueMicrotask(() => {
					controller.close();
				});
				else {
					const buf = Buffer.isBuffer(value$1) ? value$1 : Buffer.from(value$1);
					controller.enqueue(new Uint8Array(buf));
				}
				return controller.desiredSize > 0;
			},
			async cancel(reason) {
				await iterator.return();
			}
		}, 0);
	}
	function isFormDataLike(object) {
		return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
	}
	function throwIfAborted$1(signal) {
		if (!signal) return;
		if (typeof signal.throwIfAborted === "function") signal.throwIfAborted();
		else if (signal.aborted) {
			const err = new Error("The operation was aborted");
			err.name = "AbortError";
			throw err;
		}
	}
	function addAbortListener$2(signal, listener) {
		if ("addEventListener" in signal) {
			signal.addEventListener("abort", listener, { once: true });
			return () => signal.removeEventListener("abort", listener);
		}
		signal.addListener("abort", listener);
		return () => signal.removeListener("abort", listener);
	}
	const hasToWellFormed = !!String.prototype.toWellFormed;
	/**
	* @param {string} val
	*/
	function toUSVString$5(val) {
		if (hasToWellFormed) return `${val}`.toWellFormed();
		else if (nodeUtil.toUSVString) return nodeUtil.toUSVString(val);
		return `${val}`;
	}
	function parseRangeHeader$1(range) {
		if (range == null || range === "") return {
			start: 0,
			end: null,
			size: null
		};
		const m$1 = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
		return m$1 ? {
			start: parseInt(m$1[1]),
			end: m$1[2] ? parseInt(m$1[2]) : null,
			size: m$1[3] ? parseInt(m$1[3]) : null
		} : null;
	}
	const kEnumerableProperty$9 = Object.create(null);
	kEnumerableProperty$9.enumerable = true;
	module.exports = {
		kEnumerableProperty: kEnumerableProperty$9,
		nop: nop$1,
		isDisturbed: isDisturbed$2,
		isErrored: isErrored$2,
		isReadable: isReadable$1,
		toUSVString: toUSVString$5,
		isReadableAborted,
		isBlobLike: isBlobLike$7,
		parseOrigin: parseOrigin$1,
		parseURL,
		getServerName,
		isStream,
		isIterable,
		isAsyncIterable,
		isDestroyed,
		headerNameToString,
		parseRawHeaders,
		parseHeaders: parseHeaders$1,
		parseKeepAliveTimeout,
		destroy,
		bodyLength,
		deepClone,
		ReadableStreamFrom: ReadableStreamFrom$3,
		isBuffer: isBuffer$1,
		validateHandler,
		getSocketInfo,
		isFormDataLike,
		buildURL: buildURL$2,
		throwIfAborted: throwIfAborted$1,
		addAbortListener: addAbortListener$2,
		parseRangeHeader: parseRangeHeader$1,
		nodeMajor: nodeMajor$1,
		nodeMinor: nodeMinor$1,
		nodeHasAutoSelectFamily: nodeMajor$1 > 18 || nodeMajor$1 === 18 && nodeMinor$1 >= 13,
		safeHTTPMethods: [
			"GET",
			"HEAD",
			"OPTIONS",
			"TRACE"
		]
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/timers.js
var require_timers = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/timers.js"(exports, module) {
	let fastNow = Date.now();
	let fastNowTimeout;
	const fastTimers = [];
	function onTimeout() {
		fastNow = Date.now();
		let len = fastTimers.length;
		let idx = 0;
		while (idx < len) {
			const timer = fastTimers[idx];
			if (timer.state === 0) timer.state = fastNow + timer.delay;
			else if (timer.state > 0 && fastNow >= timer.state) {
				timer.state = -1;
				timer.callback(timer.opaque);
			}
			if (timer.state === -1) {
				timer.state = -2;
				if (idx !== len - 1) fastTimers[idx] = fastTimers.pop();
				else fastTimers.pop();
				len -= 1;
			} else idx += 1;
		}
		if (fastTimers.length > 0) refreshTimeout();
	}
	function refreshTimeout() {
		if (fastNowTimeout && fastNowTimeout.refresh) fastNowTimeout.refresh();
		else {
			clearTimeout(fastNowTimeout);
			fastNowTimeout = setTimeout(onTimeout, 1e3);
			if (fastNowTimeout.unref) fastNowTimeout.unref();
		}
	}
	var Timeout = class {
		constructor(callback, delay, opaque) {
			this.callback = callback;
			this.delay = delay;
			this.opaque = opaque;
			this.state = -2;
			this.refresh();
		}
		refresh() {
			if (this.state === -2) {
				fastTimers.push(this);
				if (!fastNowTimeout || fastTimers.length === 1) refreshTimeout();
			}
			this.state = 0;
		}
		clear() {
			this.state = -1;
		}
	};
	module.exports = {
		setTimeout(callback, delay, opaque) {
			return delay < 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);
		},
		clearTimeout(timeout) {
			if (timeout instanceof Timeout) timeout.clear();
			else clearTimeout(timeout);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(exports, module) {
	/**
	* Copyright Brian White. All rights reserved.
	*
	* @see https://github.com/mscdex/streamsearch
	*
	* Permission is hereby granted, free of charge, to any person obtaining a copy
	* of this software and associated documentation files (the "Software"), to
	* deal in the Software without restriction, including without limitation the
	* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	* sell copies of the Software, and to permit persons to whom the Software is
	* furnished to do so, subject to the following conditions:
	*
	* The above copyright notice and this permission notice shall be included in
	* all copies or substantial portions of the Software.
	*
	* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	* IN THE SOFTWARE.
	*
	* Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
	* by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
	*/
	const EventEmitter$6 = __require("node:events").EventEmitter;
	const inherits$5 = __require("node:util").inherits;
	function SBMH(needle) {
		if (typeof needle === "string") needle = Buffer.from(needle);
		if (!Buffer.isBuffer(needle)) throw new TypeError("The needle has to be a String or a Buffer.");
		const needleLength = needle.length;
		if (needleLength === 0) throw new Error("The needle cannot be an empty String/Buffer.");
		if (needleLength > 256) throw new Error("The needle cannot have a length bigger than 256.");
		this.maxMatches = Infinity;
		this.matches = 0;
		this._occ = new Array(256).fill(needleLength);
		this._lookbehind_size = 0;
		this._needle = needle;
		this._bufpos = 0;
		this._lookbehind = Buffer.alloc(needleLength);
		for (var i = 0; i < needleLength - 1; ++i) this._occ[needle[i]] = needleLength - 1 - i;
	}
	inherits$5(SBMH, EventEmitter$6);
	SBMH.prototype.reset = function() {
		this._lookbehind_size = 0;
		this.matches = 0;
		this._bufpos = 0;
	};
	SBMH.prototype.push = function(chunk, pos) {
		if (!Buffer.isBuffer(chunk)) chunk = Buffer.from(chunk, "binary");
		const chlen = chunk.length;
		this._bufpos = pos || 0;
		let r$1;
		while (r$1 !== chlen && this.matches < this.maxMatches) r$1 = this._sbmh_feed(chunk);
		return r$1;
	};
	SBMH.prototype._sbmh_feed = function(data) {
		const len = data.length;
		const needle = this._needle;
		const needleLength = needle.length;
		const lastNeedleChar = needle[needleLength - 1];
		let pos = -this._lookbehind_size;
		let ch;
		if (pos < 0) {
			while (pos < 0 && pos <= len - needleLength) {
				ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
				if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
					this._lookbehind_size = 0;
					++this.matches;
					this.emit("info", true);
					return this._bufpos = pos + needleLength;
				}
				pos += this._occ[ch];
			}
			if (pos < 0) while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) ++pos;
			if (pos >= 0) {
				this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
				this._lookbehind_size = 0;
			} else {
				const bytesToCutOff = this._lookbehind_size + pos;
				if (bytesToCutOff > 0) this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
				this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff);
				this._lookbehind_size -= bytesToCutOff;
				data.copy(this._lookbehind, this._lookbehind_size);
				this._lookbehind_size += len;
				this._bufpos = len;
				return len;
			}
		}
		pos += (pos >= 0) * this._bufpos;
		if (data.indexOf(needle, pos) !== -1) {
			pos = data.indexOf(needle, pos);
			++this.matches;
			if (pos > 0) this.emit("info", true, data, this._bufpos, pos);
			else this.emit("info", true);
			return this._bufpos = pos + needleLength;
		} else pos = len - needleLength;
		while (pos < len && (data[pos] !== needle[0] || Buffer.compare(data.subarray(pos, pos + len - pos), needle.subarray(0, len - pos)) !== 0)) ++pos;
		if (pos < len) {
			data.copy(this._lookbehind, 0, pos, pos + (len - pos));
			this._lookbehind_size = len - pos;
		}
		if (pos > 0) this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
		this._bufpos = len;
		return len;
	};
	SBMH.prototype._sbmh_lookup_char = function(data, pos) {
		return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
	};
	SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
		for (var i = 0; i < len; ++i) if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) return false;
		return true;
	};
	module.exports = SBMH;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(exports, module) {
	const inherits$4 = __require("node:util").inherits;
	const ReadableStream$4 = __require("node:stream").Readable;
	function PartStream$1(opts) {
		ReadableStream$4.call(this, opts);
	}
	inherits$4(PartStream$1, ReadableStream$4);
	PartStream$1.prototype._read = function(n) {};
	module.exports = PartStream$1;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js"(exports, module) {
	module.exports = function getLimit$3(limits, name, defaultLimit) {
		if (!limits || limits[name] === void 0 || limits[name] === null) return defaultLimit;
		if (typeof limits[name] !== "number" || isNaN(limits[name])) throw new TypeError("Limit " + name + " is not a valid number");
		return limits[name];
	};
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(exports, module) {
	const EventEmitter$5 = __require("node:events").EventEmitter;
	const inherits$3 = __require("node:util").inherits;
	const getLimit$2 = require_getLimit();
	const StreamSearch$1 = require_sbmh();
	const B_DCRLF = Buffer.from("\r\n\r\n");
	const RE_CRLF = /\r\n/g;
	const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
	function HeaderParser$1(cfg) {
		EventEmitter$5.call(this);
		cfg = cfg || {};
		const self$1 = this;
		this.nread = 0;
		this.maxed = false;
		this.npairs = 0;
		this.maxHeaderPairs = getLimit$2(cfg, "maxHeaderPairs", 2e3);
		this.maxHeaderSize = getLimit$2(cfg, "maxHeaderSize", 80 * 1024);
		this.buffer = "";
		this.header = {};
		this.finished = false;
		this.ss = new StreamSearch$1(B_DCRLF);
		this.ss.on("info", function(isMatch, data, start, end) {
			if (data && !self$1.maxed) {
				if (self$1.nread + end - start >= self$1.maxHeaderSize) {
					end = self$1.maxHeaderSize - self$1.nread + start;
					self$1.nread = self$1.maxHeaderSize;
					self$1.maxed = true;
				} else self$1.nread += end - start;
				self$1.buffer += data.toString("binary", start, end);
			}
			if (isMatch) self$1._finish();
		});
	}
	inherits$3(HeaderParser$1, EventEmitter$5);
	HeaderParser$1.prototype.push = function(data) {
		const r$1 = this.ss.push(data);
		if (this.finished) return r$1;
	};
	HeaderParser$1.prototype.reset = function() {
		this.finished = false;
		this.buffer = "";
		this.header = {};
		this.ss.reset();
	};
	HeaderParser$1.prototype._finish = function() {
		if (this.buffer) this._parseHeader();
		this.ss.matches = this.ss.maxMatches;
		const header = this.header;
		this.header = {};
		this.buffer = "";
		this.finished = true;
		this.nread = this.npairs = 0;
		this.maxed = false;
		this.emit("header", header);
	};
	HeaderParser$1.prototype._parseHeader = function() {
		if (this.npairs === this.maxHeaderPairs) return;
		const lines = this.buffer.split(RE_CRLF);
		const len = lines.length;
		let m$1, h$1;
		for (var i = 0; i < len; ++i) {
			if (lines[i].length === 0) continue;
			if (lines[i][0] === "	" || lines[i][0] === " ") {
				if (h$1) {
					this.header[h$1][this.header[h$1].length - 1] += lines[i];
					continue;
				}
			}
			const posColon = lines[i].indexOf(":");
			if (posColon === -1 || posColon === 0) return;
			m$1 = RE_HDR.exec(lines[i]);
			h$1 = m$1[1].toLowerCase();
			this.header[h$1] = this.header[h$1] || [];
			this.header[h$1].push(m$1[2] || "");
			if (++this.npairs === this.maxHeaderPairs) break;
		}
	};
	module.exports = HeaderParser$1;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(exports, module) {
	const WritableStream$1 = __require("node:stream").Writable;
	const inherits$2 = __require("node:util").inherits;
	const StreamSearch = require_sbmh();
	const PartStream = require_PartStream();
	const HeaderParser = require_HeaderParser();
	const DASH = 45;
	const B_ONEDASH = Buffer.from("-");
	const B_CRLF = Buffer.from("\r\n");
	const EMPTY_FN$1 = function() {};
	function Dicer$2(cfg) {
		if (!(this instanceof Dicer$2)) return new Dicer$2(cfg);
		WritableStream$1.call(this, cfg);
		if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") throw new TypeError("Boundary required");
		if (typeof cfg.boundary === "string") this.setBoundary(cfg.boundary);
		else this._bparser = void 0;
		this._headerFirst = cfg.headerFirst;
		this._dashes = 0;
		this._parts = 0;
		this._finished = false;
		this._realFinish = false;
		this._isPreamble = true;
		this._justMatched = false;
		this._firstWrite = true;
		this._inHeader = true;
		this._part = void 0;
		this._cb = void 0;
		this._ignoreData = false;
		this._partOpts = { highWaterMark: cfg.partHwm };
		this._pause = false;
		const self$1 = this;
		this._hparser = new HeaderParser(cfg);
		this._hparser.on("header", function(header) {
			self$1._inHeader = false;
			self$1._part.emit("header", header);
		});
	}
	inherits$2(Dicer$2, WritableStream$1);
	Dicer$2.prototype.emit = function(ev) {
		if (ev === "finish" && !this._realFinish) {
			if (!this._finished) {
				const self$1 = this;
				process.nextTick(function() {
					self$1.emit("error", new Error("Unexpected end of multipart data"));
					if (self$1._part && !self$1._ignoreData) {
						const type$1 = self$1._isPreamble ? "Preamble" : "Part";
						self$1._part.emit("error", new Error(type$1 + " terminated early due to unexpected end of multipart data"));
						self$1._part.push(null);
						process.nextTick(function() {
							self$1._realFinish = true;
							self$1.emit("finish");
							self$1._realFinish = false;
						});
						return;
					}
					self$1._realFinish = true;
					self$1.emit("finish");
					self$1._realFinish = false;
				});
			}
		} else WritableStream$1.prototype.emit.apply(this, arguments);
	};
	Dicer$2.prototype._write = function(data, encoding, cb) {
		if (!this._hparser && !this._bparser) return cb();
		if (this._headerFirst && this._isPreamble) {
			if (!this._part) {
				this._part = new PartStream(this._partOpts);
				if (this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
				else this._ignore();
			}
			const r$1 = this._hparser.push(data);
			if (!this._inHeader && r$1 !== void 0 && r$1 < data.length) data = data.slice(r$1);
			else return cb();
		}
		if (this._firstWrite) {
			this._bparser.push(B_CRLF);
			this._firstWrite = false;
		}
		this._bparser.push(data);
		if (this._pause) this._cb = cb;
		else cb();
	};
	Dicer$2.prototype.reset = function() {
		this._part = void 0;
		this._bparser = void 0;
		this._hparser = void 0;
	};
	Dicer$2.prototype.setBoundary = function(boundary) {
		const self$1 = this;
		this._bparser = new StreamSearch("\r\n--" + boundary);
		this._bparser.on("info", function(isMatch, data, start, end) {
			self$1._oninfo(isMatch, data, start, end);
		});
	};
	Dicer$2.prototype._ignore = function() {
		if (this._part && !this._ignoreData) {
			this._ignoreData = true;
			this._part.on("error", EMPTY_FN$1);
			this._part.resume();
		}
	};
	Dicer$2.prototype._oninfo = function(isMatch, data, start, end) {
		let buf;
		const self$1 = this;
		let i = 0;
		let r$1;
		let shouldWriteMore = true;
		if (!this._part && this._justMatched && data) {
			while (this._dashes < 2 && start + i < end) if (data[start + i] === DASH) {
				++i;
				++this._dashes;
			} else {
				if (this._dashes) buf = B_ONEDASH;
				this._dashes = 0;
				break;
			}
			if (this._dashes === 2) {
				if (start + i < end && this.listenerCount("trailer") !== 0) this.emit("trailer", data.slice(start + i, end));
				this.reset();
				this._finished = true;
				if (self$1._parts === 0) {
					self$1._realFinish = true;
					self$1.emit("finish");
					self$1._realFinish = false;
				}
			}
			if (this._dashes) return;
		}
		if (this._justMatched) this._justMatched = false;
		if (!this._part) {
			this._part = new PartStream(this._partOpts);
			this._part._read = function(n) {
				self$1._unpause();
			};
			if (this._isPreamble && this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
			else if (this._isPreamble !== true && this.listenerCount("part") !== 0) this.emit("part", this._part);
			else this._ignore();
			if (!this._isPreamble) this._inHeader = true;
		}
		if (data && start < end && !this._ignoreData) {
			if (this._isPreamble || !this._inHeader) {
				if (buf) shouldWriteMore = this._part.push(buf);
				shouldWriteMore = this._part.push(data.slice(start, end));
				if (!shouldWriteMore) this._pause = true;
			} else if (!this._isPreamble && this._inHeader) {
				if (buf) this._hparser.push(buf);
				r$1 = this._hparser.push(data.slice(start, end));
				if (!this._inHeader && r$1 !== void 0 && r$1 < end) this._oninfo(false, data, start + r$1, end);
			}
		}
		if (isMatch) {
			this._hparser.reset();
			if (this._isPreamble) this._isPreamble = false;
			else if (start !== end) {
				++this._parts;
				this._part.on("end", function() {
					if (--self$1._parts === 0) if (self$1._finished) {
						self$1._realFinish = true;
						self$1.emit("finish");
						self$1._realFinish = false;
					} else self$1._unpause();
				});
			}
			this._part.push(null);
			this._part = void 0;
			this._ignoreData = false;
			this._justMatched = true;
			this._dashes = 0;
		}
	};
	Dicer$2.prototype._unpause = function() {
		if (!this._pause) return;
		this._pause = false;
		if (this._cb) {
			const cb = this._cb;
			this._cb = void 0;
			cb();
		}
	};
	module.exports = Dicer$2;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js"(exports, module) {
	const utf8Decoder = new TextDecoder("utf-8");
	const textDecoders = new Map([["utf-8", utf8Decoder], ["utf8", utf8Decoder]]);
	function getDecoder(charset) {
		let lc;
		while (true) switch (charset) {
			case "utf-8":
			case "utf8": return decoders.utf8;
			case "latin1":
			case "ascii":
			case "us-ascii":
			case "iso-8859-1":
			case "iso8859-1":
			case "iso88591":
			case "iso_8859-1":
			case "windows-1252":
			case "iso_8859-1:1987":
			case "cp1252":
			case "x-cp1252": return decoders.latin1;
			case "utf16le":
			case "utf-16le":
			case "ucs2":
			case "ucs-2": return decoders.utf16le;
			case "base64": return decoders.base64;
			default:
				if (lc === void 0) {
					lc = true;
					charset = charset.toLowerCase();
					continue;
				}
				return decoders.other.bind(charset);
		}
	}
	const decoders = {
		utf8: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			return data.utf8Slice(0, data.length);
		},
		latin1: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") return data;
			return data.latin1Slice(0, data.length);
		},
		utf16le: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			return data.ucs2Slice(0, data.length);
		},
		base64: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			return data.base64Slice(0, data.length);
		},
		other: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			if (textDecoders.has((void 0).toString())) try {
				return textDecoders.get(void 0).decode(data);
			} catch {}
			return typeof data === "string" ? data : data.toString();
		}
	};
	function decodeText$3(text, sourceEncoding, destEncoding) {
		if (text) return getDecoder(destEncoding)(text, sourceEncoding);
		return text;
	}
	module.exports = decodeText$3;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js"(exports, module) {
	const decodeText$2 = require_decodeText();
	const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
	const EncodedLookup = {
		"%00": "\0",
		"%01": "",
		"%02": "",
		"%03": "",
		"%04": "",
		"%05": "",
		"%06": "",
		"%07": "\x07",
		"%08": "\b",
		"%09": "	",
		"%0a": "\n",
		"%0A": "\n",
		"%0b": "\v",
		"%0B": "\v",
		"%0c": "\f",
		"%0C": "\f",
		"%0d": "\r",
		"%0D": "\r",
		"%0e": "",
		"%0E": "",
		"%0f": "",
		"%0F": "",
		"%10": "",
		"%11": "",
		"%12": "",
		"%13": "",
		"%14": "",
		"%15": "",
		"%16": "",
		"%17": "",
		"%18": "",
		"%19": "",
		"%1a": "",
		"%1A": "",
		"%1b": "\x1B",
		"%1B": "\x1B",
		"%1c": "",
		"%1C": "",
		"%1d": "",
		"%1D": "",
		"%1e": "",
		"%1E": "",
		"%1f": "",
		"%1F": "",
		"%20": " ",
		"%21": "!",
		"%22": "\"",
		"%23": "#",
		"%24": "$",
		"%25": "%",
		"%26": "&",
		"%27": "'",
		"%28": "(",
		"%29": ")",
		"%2a": "*",
		"%2A": "*",
		"%2b": "+",
		"%2B": "+",
		"%2c": ",",
		"%2C": ",",
		"%2d": "-",
		"%2D": "-",
		"%2e": ".",
		"%2E": ".",
		"%2f": "/",
		"%2F": "/",
		"%30": "0",
		"%31": "1",
		"%32": "2",
		"%33": "3",
		"%34": "4",
		"%35": "5",
		"%36": "6",
		"%37": "7",
		"%38": "8",
		"%39": "9",
		"%3a": ":",
		"%3A": ":",
		"%3b": ";",
		"%3B": ";",
		"%3c": "<",
		"%3C": "<",
		"%3d": "=",
		"%3D": "=",
		"%3e": ">",
		"%3E": ">",
		"%3f": "?",
		"%3F": "?",
		"%40": "@",
		"%41": "A",
		"%42": "B",
		"%43": "C",
		"%44": "D",
		"%45": "E",
		"%46": "F",
		"%47": "G",
		"%48": "H",
		"%49": "I",
		"%4a": "J",
		"%4A": "J",
		"%4b": "K",
		"%4B": "K",
		"%4c": "L",
		"%4C": "L",
		"%4d": "M",
		"%4D": "M",
		"%4e": "N",
		"%4E": "N",
		"%4f": "O",
		"%4F": "O",
		"%50": "P",
		"%51": "Q",
		"%52": "R",
		"%53": "S",
		"%54": "T",
		"%55": "U",
		"%56": "V",
		"%57": "W",
		"%58": "X",
		"%59": "Y",
		"%5a": "Z",
		"%5A": "Z",
		"%5b": "[",
		"%5B": "[",
		"%5c": "\\",
		"%5C": "\\",
		"%5d": "]",
		"%5D": "]",
		"%5e": "^",
		"%5E": "^",
		"%5f": "_",
		"%5F": "_",
		"%60": "`",
		"%61": "a",
		"%62": "b",
		"%63": "c",
		"%64": "d",
		"%65": "e",
		"%66": "f",
		"%67": "g",
		"%68": "h",
		"%69": "i",
		"%6a": "j",
		"%6A": "j",
		"%6b": "k",
		"%6B": "k",
		"%6c": "l",
		"%6C": "l",
		"%6d": "m",
		"%6D": "m",
		"%6e": "n",
		"%6E": "n",
		"%6f": "o",
		"%6F": "o",
		"%70": "p",
		"%71": "q",
		"%72": "r",
		"%73": "s",
		"%74": "t",
		"%75": "u",
		"%76": "v",
		"%77": "w",
		"%78": "x",
		"%79": "y",
		"%7a": "z",
		"%7A": "z",
		"%7b": "{",
		"%7B": "{",
		"%7c": "|",
		"%7C": "|",
		"%7d": "}",
		"%7D": "}",
		"%7e": "~",
		"%7E": "~",
		"%7f": "",
		"%7F": "",
		"%80": "",
		"%81": "",
		"%82": "",
		"%83": "",
		"%84": "",
		"%85": "",
		"%86": "",
		"%87": "",
		"%88": "",
		"%89": "",
		"%8a": "",
		"%8A": "",
		"%8b": "",
		"%8B": "",
		"%8c": "",
		"%8C": "",
		"%8d": "",
		"%8D": "",
		"%8e": "",
		"%8E": "",
		"%8f": "",
		"%8F": "",
		"%90": "",
		"%91": "",
		"%92": "",
		"%93": "",
		"%94": "",
		"%95": "",
		"%96": "",
		"%97": "",
		"%98": "",
		"%99": "",
		"%9a": "",
		"%9A": "",
		"%9b": "",
		"%9B": "",
		"%9c": "",
		"%9C": "",
		"%9d": "",
		"%9D": "",
		"%9e": "",
		"%9E": "",
		"%9f": "",
		"%9F": "",
		"%a0": "\xA0",
		"%A0": "\xA0",
		"%a1": "¡",
		"%A1": "¡",
		"%a2": "¢",
		"%A2": "¢",
		"%a3": "£",
		"%A3": "£",
		"%a4": "¤",
		"%A4": "¤",
		"%a5": "¥",
		"%A5": "¥",
		"%a6": "¦",
		"%A6": "¦",
		"%a7": "§",
		"%A7": "§",
		"%a8": "¨",
		"%A8": "¨",
		"%a9": "©",
		"%A9": "©",
		"%aa": "ª",
		"%Aa": "ª",
		"%aA": "ª",
		"%AA": "ª",
		"%ab": "«",
		"%Ab": "«",
		"%aB": "«",
		"%AB": "«",
		"%ac": "¬",
		"%Ac": "¬",
		"%aC": "¬",
		"%AC": "¬",
		"%ad": "­",
		"%Ad": "­",
		"%aD": "­",
		"%AD": "­",
		"%ae": "®",
		"%Ae": "®",
		"%aE": "®",
		"%AE": "®",
		"%af": "¯",
		"%Af": "¯",
		"%aF": "¯",
		"%AF": "¯",
		"%b0": "°",
		"%B0": "°",
		"%b1": "±",
		"%B1": "±",
		"%b2": "²",
		"%B2": "²",
		"%b3": "³",
		"%B3": "³",
		"%b4": "´",
		"%B4": "´",
		"%b5": "µ",
		"%B5": "µ",
		"%b6": "¶",
		"%B6": "¶",
		"%b7": "·",
		"%B7": "·",
		"%b8": "¸",
		"%B8": "¸",
		"%b9": "¹",
		"%B9": "¹",
		"%ba": "º",
		"%Ba": "º",
		"%bA": "º",
		"%BA": "º",
		"%bb": "»",
		"%Bb": "»",
		"%bB": "»",
		"%BB": "»",
		"%bc": "¼",
		"%Bc": "¼",
		"%bC": "¼",
		"%BC": "¼",
		"%bd": "½",
		"%Bd": "½",
		"%bD": "½",
		"%BD": "½",
		"%be": "¾",
		"%Be": "¾",
		"%bE": "¾",
		"%BE": "¾",
		"%bf": "¿",
		"%Bf": "¿",
		"%bF": "¿",
		"%BF": "¿",
		"%c0": "À",
		"%C0": "À",
		"%c1": "Á",
		"%C1": "Á",
		"%c2": "Â",
		"%C2": "Â",
		"%c3": "Ã",
		"%C3": "Ã",
		"%c4": "Ä",
		"%C4": "Ä",
		"%c5": "Å",
		"%C5": "Å",
		"%c6": "Æ",
		"%C6": "Æ",
		"%c7": "Ç",
		"%C7": "Ç",
		"%c8": "È",
		"%C8": "È",
		"%c9": "É",
		"%C9": "É",
		"%ca": "Ê",
		"%Ca": "Ê",
		"%cA": "Ê",
		"%CA": "Ê",
		"%cb": "Ë",
		"%Cb": "Ë",
		"%cB": "Ë",
		"%CB": "Ë",
		"%cc": "Ì",
		"%Cc": "Ì",
		"%cC": "Ì",
		"%CC": "Ì",
		"%cd": "Í",
		"%Cd": "Í",
		"%cD": "Í",
		"%CD": "Í",
		"%ce": "Î",
		"%Ce": "Î",
		"%cE": "Î",
		"%CE": "Î",
		"%cf": "Ï",
		"%Cf": "Ï",
		"%cF": "Ï",
		"%CF": "Ï",
		"%d0": "Ð",
		"%D0": "Ð",
		"%d1": "Ñ",
		"%D1": "Ñ",
		"%d2": "Ò",
		"%D2": "Ò",
		"%d3": "Ó",
		"%D3": "Ó",
		"%d4": "Ô",
		"%D4": "Ô",
		"%d5": "Õ",
		"%D5": "Õ",
		"%d6": "Ö",
		"%D6": "Ö",
		"%d7": "×",
		"%D7": "×",
		"%d8": "Ø",
		"%D8": "Ø",
		"%d9": "Ù",
		"%D9": "Ù",
		"%da": "Ú",
		"%Da": "Ú",
		"%dA": "Ú",
		"%DA": "Ú",
		"%db": "Û",
		"%Db": "Û",
		"%dB": "Û",
		"%DB": "Û",
		"%dc": "Ü",
		"%Dc": "Ü",
		"%dC": "Ü",
		"%DC": "Ü",
		"%dd": "Ý",
		"%Dd": "Ý",
		"%dD": "Ý",
		"%DD": "Ý",
		"%de": "Þ",
		"%De": "Þ",
		"%dE": "Þ",
		"%DE": "Þ",
		"%df": "ß",
		"%Df": "ß",
		"%dF": "ß",
		"%DF": "ß",
		"%e0": "à",
		"%E0": "à",
		"%e1": "á",
		"%E1": "á",
		"%e2": "â",
		"%E2": "â",
		"%e3": "ã",
		"%E3": "ã",
		"%e4": "ä",
		"%E4": "ä",
		"%e5": "å",
		"%E5": "å",
		"%e6": "æ",
		"%E6": "æ",
		"%e7": "ç",
		"%E7": "ç",
		"%e8": "è",
		"%E8": "è",
		"%e9": "é",
		"%E9": "é",
		"%ea": "ê",
		"%Ea": "ê",
		"%eA": "ê",
		"%EA": "ê",
		"%eb": "ë",
		"%Eb": "ë",
		"%eB": "ë",
		"%EB": "ë",
		"%ec": "ì",
		"%Ec": "ì",
		"%eC": "ì",
		"%EC": "ì",
		"%ed": "í",
		"%Ed": "í",
		"%eD": "í",
		"%ED": "í",
		"%ee": "î",
		"%Ee": "î",
		"%eE": "î",
		"%EE": "î",
		"%ef": "ï",
		"%Ef": "ï",
		"%eF": "ï",
		"%EF": "ï",
		"%f0": "ð",
		"%F0": "ð",
		"%f1": "ñ",
		"%F1": "ñ",
		"%f2": "ò",
		"%F2": "ò",
		"%f3": "ó",
		"%F3": "ó",
		"%f4": "ô",
		"%F4": "ô",
		"%f5": "õ",
		"%F5": "õ",
		"%f6": "ö",
		"%F6": "ö",
		"%f7": "÷",
		"%F7": "÷",
		"%f8": "ø",
		"%F8": "ø",
		"%f9": "ù",
		"%F9": "ù",
		"%fa": "ú",
		"%Fa": "ú",
		"%fA": "ú",
		"%FA": "ú",
		"%fb": "û",
		"%Fb": "û",
		"%fB": "û",
		"%FB": "û",
		"%fc": "ü",
		"%Fc": "ü",
		"%fC": "ü",
		"%FC": "ü",
		"%fd": "ý",
		"%Fd": "ý",
		"%fD": "ý",
		"%FD": "ý",
		"%fe": "þ",
		"%Fe": "þ",
		"%fE": "þ",
		"%FE": "þ",
		"%ff": "ÿ",
		"%Ff": "ÿ",
		"%fF": "ÿ",
		"%FF": "ÿ"
	};
	function encodedReplacer(match) {
		return EncodedLookup[match];
	}
	const STATE_KEY = 0;
	const STATE_VALUE = 1;
	const STATE_CHARSET = 2;
	const STATE_LANG = 3;
	function parseParams$2(str) {
		const res = [];
		let state = STATE_KEY;
		let charset = "";
		let inquote = false;
		let escaping = false;
		let p$1 = 0;
		let tmp = "";
		const len = str.length;
		for (var i = 0; i < len; ++i) {
			const char = str[i];
			if (char === "\\" && inquote) if (escaping) escaping = false;
			else {
				escaping = true;
				continue;
			}
			else if (char === "\"") if (!escaping) {
				if (inquote) {
					inquote = false;
					state = STATE_KEY;
				} else inquote = true;
				continue;
			} else escaping = false;
			else {
				if (escaping && inquote) tmp += "\\";
				escaping = false;
				if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
					if (state === STATE_CHARSET) {
						state = STATE_LANG;
						charset = tmp.substring(1);
					} else state = STATE_VALUE;
					tmp = "";
					continue;
				} else if (state === STATE_KEY && (char === "*" || char === "=") && res.length) {
					state = char === "*" ? STATE_CHARSET : STATE_VALUE;
					res[p$1] = [tmp, void 0];
					tmp = "";
					continue;
				} else if (!inquote && char === ";") {
					state = STATE_KEY;
					if (charset) {
						if (tmp.length) tmp = decodeText$2(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset);
						charset = "";
					} else if (tmp.length) tmp = decodeText$2(tmp, "binary", "utf8");
					if (res[p$1] === void 0) res[p$1] = tmp;
					else res[p$1][1] = tmp;
					tmp = "";
					++p$1;
					continue;
				} else if (!inquote && (char === " " || char === "	")) continue;
			}
			tmp += char;
		}
		if (charset && tmp.length) tmp = decodeText$2(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset);
		else if (tmp) tmp = decodeText$2(tmp, "binary", "utf8");
		if (res[p$1] === void 0) {
			if (tmp) res[p$1] = tmp;
		} else res[p$1][1] = tmp;
		return res;
	}
	module.exports = parseParams$2;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js"(exports, module) {
	module.exports = function basename$1(path$9) {
		if (typeof path$9 !== "string") return "";
		for (var i = path$9.length - 1; i >= 0; --i) switch (path$9.charCodeAt(i)) {
			case 47:
			case 92:
				path$9 = path$9.slice(i + 1);
				return path$9 === ".." || path$9 === "." ? "" : path$9;
		}
		return path$9 === ".." || path$9 === "." ? "" : path$9;
	};
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js"(exports, module) {
	const { Readable: Readable$5 } = __require("node:stream");
	const { inherits: inherits$1 } = __require("node:util");
	const Dicer$1 = require_Dicer();
	const parseParams$1 = require_parseParams();
	const decodeText$1 = require_decodeText();
	const basename = require_basename();
	const getLimit$1 = require_getLimit();
	const RE_BOUNDARY = /^boundary$/i;
	const RE_FIELD = /^form-data$/i;
	const RE_CHARSET$1 = /^charset$/i;
	const RE_FILENAME = /^filename$/i;
	const RE_NAME = /^name$/i;
	Multipart.detect = /^multipart\/form-data/i;
	function Multipart(boy, cfg) {
		let i;
		let len;
		const self$1 = this;
		let boundary;
		const limits = cfg.limits;
		const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => contentType === "application/octet-stream" || fileName !== void 0);
		const parsedConType = cfg.parsedConType || [];
		const defCharset = cfg.defCharset || "utf8";
		const preservePath = cfg.preservePath;
		const fileOpts = { highWaterMark: cfg.fileHwm };
		for (i = 0, len = parsedConType.length; i < len; ++i) if (Array.isArray(parsedConType[i]) && RE_BOUNDARY.test(parsedConType[i][0])) {
			boundary = parsedConType[i][1];
			break;
		}
		function checkFinished() {
			if (nends === 0 && finished$1 && !boy._done) {
				finished$1 = false;
				self$1.end();
			}
		}
		if (typeof boundary !== "string") throw new Error("Multipart: Boundary not found");
		const fieldSizeLimit = getLimit$1(limits, "fieldSize", 1 * 1024 * 1024);
		const fileSizeLimit = getLimit$1(limits, "fileSize", Infinity);
		const filesLimit = getLimit$1(limits, "files", Infinity);
		const fieldsLimit = getLimit$1(limits, "fields", Infinity);
		const partsLimit = getLimit$1(limits, "parts", Infinity);
		const headerPairsLimit = getLimit$1(limits, "headerPairs", 2e3);
		const headerSizeLimit = getLimit$1(limits, "headerSize", 80 * 1024);
		let nfiles = 0;
		let nfields = 0;
		let nends = 0;
		let curFile;
		let curField;
		let finished$1 = false;
		this._needDrain = false;
		this._pause = false;
		this._cb = void 0;
		this._nparts = 0;
		this._boy = boy;
		const parserCfg = {
			boundary,
			maxHeaderPairs: headerPairsLimit,
			maxHeaderSize: headerSizeLimit,
			partHwm: fileOpts.highWaterMark,
			highWaterMark: cfg.highWaterMark
		};
		this.parser = new Dicer$1(parserCfg);
		this.parser.on("drain", function() {
			self$1._needDrain = false;
			if (self$1._cb && !self$1._pause) {
				const cb = self$1._cb;
				self$1._cb = void 0;
				cb();
			}
		}).on("part", function onPart(part) {
			if (++self$1._nparts > partsLimit) {
				self$1.parser.removeListener("part", onPart);
				self$1.parser.on("part", skipPart);
				boy.hitPartsLimit = true;
				boy.emit("partsLimit");
				return skipPart(part);
			}
			if (curField) {
				const field = curField;
				field.emit("end");
				field.removeAllListeners("end");
			}
			part.on("header", function(header) {
				let contype;
				let fieldname;
				let parsed;
				let charset;
				let encoding;
				let filename;
				let nsize = 0;
				if (header["content-type"]) {
					parsed = parseParams$1(header["content-type"][0]);
					if (parsed[0]) {
						contype = parsed[0].toLowerCase();
						for (i = 0, len = parsed.length; i < len; ++i) if (RE_CHARSET$1.test(parsed[i][0])) {
							charset = parsed[i][1].toLowerCase();
							break;
						}
					}
				}
				if (contype === void 0) contype = "text/plain";
				if (charset === void 0) charset = defCharset;
				if (header["content-disposition"]) {
					parsed = parseParams$1(header["content-disposition"][0]);
					if (!RE_FIELD.test(parsed[0])) return skipPart(part);
					for (i = 0, len = parsed.length; i < len; ++i) if (RE_NAME.test(parsed[i][0])) fieldname = parsed[i][1];
					else if (RE_FILENAME.test(parsed[i][0])) {
						filename = parsed[i][1];
						if (!preservePath) filename = basename(filename);
					}
				} else return skipPart(part);
				if (header["content-transfer-encoding"]) encoding = header["content-transfer-encoding"][0].toLowerCase();
				else encoding = "7bit";
				let onData, onEnd;
				if (isPartAFile(fieldname, contype, filename)) {
					if (nfiles === filesLimit) {
						if (!boy.hitFilesLimit) {
							boy.hitFilesLimit = true;
							boy.emit("filesLimit");
						}
						return skipPart(part);
					}
					++nfiles;
					if (boy.listenerCount("file") === 0) {
						self$1.parser._ignore();
						return;
					}
					++nends;
					const file = new FileStream(fileOpts);
					curFile = file;
					file.on("end", function() {
						--nends;
						self$1._pause = false;
						checkFinished();
						if (self$1._cb && !self$1._needDrain) {
							const cb = self$1._cb;
							self$1._cb = void 0;
							cb();
						}
					});
					file._read = function(n) {
						if (!self$1._pause) return;
						self$1._pause = false;
						if (self$1._cb && !self$1._needDrain) {
							const cb = self$1._cb;
							self$1._cb = void 0;
							cb();
						}
					};
					boy.emit("file", fieldname, file, filename, encoding, contype);
					onData = function(data) {
						if ((nsize += data.length) > fileSizeLimit) {
							const extralen = fileSizeLimit - nsize + data.length;
							if (extralen > 0) file.push(data.slice(0, extralen));
							file.truncated = true;
							file.bytesRead = fileSizeLimit;
							part.removeAllListeners("data");
							file.emit("limit");
							return;
						} else if (!file.push(data)) self$1._pause = true;
						file.bytesRead = nsize;
					};
					onEnd = function() {
						curFile = void 0;
						file.push(null);
					};
				} else {
					if (nfields === fieldsLimit) {
						if (!boy.hitFieldsLimit) {
							boy.hitFieldsLimit = true;
							boy.emit("fieldsLimit");
						}
						return skipPart(part);
					}
					++nfields;
					++nends;
					let buffer = "";
					let truncated = false;
					curField = part;
					onData = function(data) {
						if ((nsize += data.length) > fieldSizeLimit) {
							const extralen = fieldSizeLimit - (nsize - data.length);
							buffer += data.toString("binary", 0, extralen);
							truncated = true;
							part.removeAllListeners("data");
						} else buffer += data.toString("binary");
					};
					onEnd = function() {
						curField = void 0;
						if (buffer.length) buffer = decodeText$1(buffer, "binary", charset);
						boy.emit("field", fieldname, buffer, false, truncated, encoding, contype);
						--nends;
						checkFinished();
					};
				}
				part._readableState.sync = false;
				part.on("data", onData);
				part.on("end", onEnd);
			}).on("error", function(err) {
				if (curFile) curFile.emit("error", err);
			});
		}).on("error", function(err) {
			boy.emit("error", err);
		}).on("finish", function() {
			finished$1 = true;
			checkFinished();
		});
	}
	Multipart.prototype.write = function(chunk, cb) {
		const r$1 = this.parser.write(chunk);
		if (r$1 && !this._pause) cb();
		else {
			this._needDrain = !r$1;
			this._cb = cb;
		}
	};
	Multipart.prototype.end = function() {
		const self$1 = this;
		if (self$1.parser.writable) self$1.parser.end();
		else if (!self$1._boy._done) process.nextTick(function() {
			self$1._boy._done = true;
			self$1._boy.emit("finish");
		});
	};
	function skipPart(part) {
		part.resume();
	}
	function FileStream(opts) {
		Readable$5.call(this, opts);
		this.bytesRead = 0;
		this.truncated = false;
	}
	inherits$1(FileStream, Readable$5);
	FileStream.prototype._read = function(n) {};
	module.exports = Multipart;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js"(exports, module) {
	const RE_PLUS = /\+/g;
	const HEX = [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	];
	function Decoder$1() {
		this.buffer = void 0;
	}
	Decoder$1.prototype.write = function(str) {
		str = str.replace(RE_PLUS, " ");
		let res = "";
		let i = 0;
		let p$1 = 0;
		const len = str.length;
		for (; i < len; ++i) if (this.buffer !== void 0) if (!HEX[str.charCodeAt(i)]) {
			res += "%" + this.buffer;
			this.buffer = void 0;
			--i;
		} else {
			this.buffer += str[i];
			++p$1;
			if (this.buffer.length === 2) {
				res += String.fromCharCode(parseInt(this.buffer, 16));
				this.buffer = void 0;
			}
		}
		else if (str[i] === "%") {
			if (i > p$1) {
				res += str.substring(p$1, i);
				p$1 = i;
			}
			this.buffer = "";
			++p$1;
		}
		if (p$1 < len && this.buffer === void 0) res += str.substring(p$1);
		return res;
	};
	Decoder$1.prototype.reset = function() {
		this.buffer = void 0;
	};
	module.exports = Decoder$1;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js"(exports, module) {
	const Decoder = require_Decoder();
	const decodeText = require_decodeText();
	const getLimit = require_getLimit();
	const RE_CHARSET = /^charset$/i;
	UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
	function UrlEncoded(boy, cfg) {
		const limits = cfg.limits;
		const parsedConType = cfg.parsedConType;
		this.boy = boy;
		this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
		this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
		this.fieldsLimit = getLimit(limits, "fields", Infinity);
		let charset;
		for (var i = 0, len = parsedConType.length; i < len; ++i) if (Array.isArray(parsedConType[i]) && RE_CHARSET.test(parsedConType[i][0])) {
			charset = parsedConType[i][1].toLowerCase();
			break;
		}
		if (charset === void 0) charset = cfg.defCharset || "utf8";
		this.decoder = new Decoder();
		this.charset = charset;
		this._fields = 0;
		this._state = "key";
		this._checkingBytes = true;
		this._bytesKey = 0;
		this._bytesVal = 0;
		this._key = "";
		this._val = "";
		this._keyTrunc = false;
		this._valTrunc = false;
		this._hitLimit = false;
	}
	UrlEncoded.prototype.write = function(data, cb) {
		if (this._fields === this.fieldsLimit) {
			if (!this.boy.hitFieldsLimit) {
				this.boy.hitFieldsLimit = true;
				this.boy.emit("fieldsLimit");
			}
			return cb();
		}
		let idxeq;
		let idxamp;
		let i;
		let p$1 = 0;
		const len = data.length;
		while (p$1 < len) if (this._state === "key") {
			idxeq = idxamp = void 0;
			for (i = p$1; i < len; ++i) {
				if (!this._checkingBytes) ++p$1;
				if (data[i] === 61) {
					idxeq = i;
					break;
				} else if (data[i] === 38) {
					idxamp = i;
					break;
				}
				if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
					this._hitLimit = true;
					break;
				} else if (this._checkingBytes) ++this._bytesKey;
			}
			if (idxeq !== void 0) {
				if (idxeq > p$1) this._key += this.decoder.write(data.toString("binary", p$1, idxeq));
				this._state = "val";
				this._hitLimit = false;
				this._checkingBytes = true;
				this._val = "";
				this._bytesVal = 0;
				this._valTrunc = false;
				this.decoder.reset();
				p$1 = idxeq + 1;
			} else if (idxamp !== void 0) {
				++this._fields;
				let key;
				const keyTrunc = this._keyTrunc;
				if (idxamp > p$1) key = this._key += this.decoder.write(data.toString("binary", p$1, idxamp));
				else key = this._key;
				this._hitLimit = false;
				this._checkingBytes = true;
				this._key = "";
				this._bytesKey = 0;
				this._keyTrunc = false;
				this.decoder.reset();
				if (key.length) this.boy.emit("field", decodeText(key, "binary", this.charset), "", keyTrunc, false);
				p$1 = idxamp + 1;
				if (this._fields === this.fieldsLimit) return cb();
			} else if (this._hitLimit) {
				if (i > p$1) this._key += this.decoder.write(data.toString("binary", p$1, i));
				p$1 = i;
				if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
					this._checkingBytes = false;
					this._keyTrunc = true;
				}
			} else {
				if (p$1 < len) this._key += this.decoder.write(data.toString("binary", p$1));
				p$1 = len;
			}
		} else {
			idxamp = void 0;
			for (i = p$1; i < len; ++i) {
				if (!this._checkingBytes) ++p$1;
				if (data[i] === 38) {
					idxamp = i;
					break;
				}
				if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
					this._hitLimit = true;
					break;
				} else if (this._checkingBytes) ++this._bytesVal;
			}
			if (idxamp !== void 0) {
				++this._fields;
				if (idxamp > p$1) this._val += this.decoder.write(data.toString("binary", p$1, idxamp));
				this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
				this._state = "key";
				this._hitLimit = false;
				this._checkingBytes = true;
				this._key = "";
				this._bytesKey = 0;
				this._keyTrunc = false;
				this.decoder.reset();
				p$1 = idxamp + 1;
				if (this._fields === this.fieldsLimit) return cb();
			} else if (this._hitLimit) {
				if (i > p$1) this._val += this.decoder.write(data.toString("binary", p$1, i));
				p$1 = i;
				if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
					this._checkingBytes = false;
					this._valTrunc = true;
				}
			} else {
				if (p$1 < len) this._val += this.decoder.write(data.toString("binary", p$1));
				p$1 = len;
			}
		}
		cb();
	};
	UrlEncoded.prototype.end = function() {
		if (this.boy._done) return;
		if (this._state === "key" && this._key.length > 0) this.boy.emit("field", decodeText(this._key, "binary", this.charset), "", this._keyTrunc, false);
		else if (this._state === "val") this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
		this.boy._done = true;
		this.boy.emit("finish");
	};
	module.exports = UrlEncoded;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js
var require_main$1 = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js"(exports, module) {
	const WritableStream = __require("node:stream").Writable;
	const { inherits } = __require("node:util");
	const Dicer = require_Dicer();
	const MultipartParser = require_multipart();
	const UrlencodedParser = require_urlencoded();
	const parseParams = require_parseParams();
	function Busboy$1(opts) {
		if (!(this instanceof Busboy$1)) return new Busboy$1(opts);
		if (typeof opts !== "object") throw new TypeError("Busboy expected an options-Object.");
		if (typeof opts.headers !== "object") throw new TypeError("Busboy expected an options-Object with headers-attribute.");
		if (typeof opts.headers["content-type"] !== "string") throw new TypeError("Missing Content-Type-header.");
		const { headers,...streamOptions } = opts;
		this.opts = {
			autoDestroy: false,
			...streamOptions
		};
		WritableStream.call(this, this.opts);
		this._done = false;
		this._parser = this.getParserByHeaders(headers);
		this._finished = false;
	}
	inherits(Busboy$1, WritableStream);
	Busboy$1.prototype.emit = function(ev) {
		if (ev === "finish") {
			if (!this._done) {
				this._parser?.end();
				return;
			} else if (this._finished) return;
			this._finished = true;
		}
		WritableStream.prototype.emit.apply(this, arguments);
	};
	Busboy$1.prototype.getParserByHeaders = function(headers) {
		const parsed = parseParams(headers["content-type"]);
		const cfg = {
			defCharset: this.opts.defCharset,
			fileHwm: this.opts.fileHwm,
			headers,
			highWaterMark: this.opts.highWaterMark,
			isPartAFile: this.opts.isPartAFile,
			limits: this.opts.limits,
			parsedConType: parsed,
			preservePath: this.opts.preservePath
		};
		if (MultipartParser.detect.test(parsed[0])) return new MultipartParser(this, cfg);
		if (UrlencodedParser.detect.test(parsed[0])) return new UrlencodedParser(this, cfg);
		throw new Error("Unsupported Content-Type.");
	};
	Busboy$1.prototype._write = function(chunk, encoding, cb) {
		this._parser.write(chunk, cb);
	};
	module.exports = Busboy$1;
	module.exports.default = Busboy$1;
	module.exports.Busboy = Busboy$1;
	module.exports.Dicer = Dicer;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/constants.js
var require_constants$4 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/constants.js"(exports, module) {
	const { MessageChannel, receiveMessageOnPort } = __require("worker_threads");
	const corsSafeListedMethods = [
		"GET",
		"HEAD",
		"POST"
	];
	const corsSafeListedMethodsSet$1 = new Set(corsSafeListedMethods);
	const nullBodyStatus$2 = [
		101,
		204,
		205,
		304
	];
	const redirectStatus = [
		301,
		302,
		303,
		307,
		308
	];
	const redirectStatusSet$3 = new Set(redirectStatus);
	const badPorts = [
		"1",
		"7",
		"9",
		"11",
		"13",
		"15",
		"17",
		"19",
		"20",
		"21",
		"22",
		"23",
		"25",
		"37",
		"42",
		"43",
		"53",
		"69",
		"77",
		"79",
		"87",
		"95",
		"101",
		"102",
		"103",
		"104",
		"109",
		"110",
		"111",
		"113",
		"115",
		"117",
		"119",
		"123",
		"135",
		"137",
		"139",
		"143",
		"161",
		"179",
		"389",
		"427",
		"465",
		"512",
		"513",
		"514",
		"515",
		"526",
		"530",
		"531",
		"532",
		"540",
		"548",
		"554",
		"556",
		"563",
		"587",
		"601",
		"636",
		"989",
		"990",
		"993",
		"995",
		"1719",
		"1720",
		"1723",
		"2049",
		"3659",
		"4045",
		"5060",
		"5061",
		"6000",
		"6566",
		"6665",
		"6666",
		"6667",
		"6668",
		"6669",
		"6697",
		"10080"
	];
	const badPortsSet$1 = new Set(badPorts);
	const referrerPolicy$1 = [
		"",
		"no-referrer",
		"no-referrer-when-downgrade",
		"same-origin",
		"origin",
		"strict-origin",
		"origin-when-cross-origin",
		"strict-origin-when-cross-origin",
		"unsafe-url"
	];
	const referrerPolicySet = new Set(referrerPolicy$1);
	const requestRedirect$1 = [
		"follow",
		"manual",
		"error"
	];
	const safeMethods = [
		"GET",
		"HEAD",
		"OPTIONS",
		"TRACE"
	];
	const safeMethodsSet$1 = new Set(safeMethods);
	const requestMode$1 = [
		"navigate",
		"same-origin",
		"no-cors",
		"cors"
	];
	const requestCredentials$1 = [
		"omit",
		"same-origin",
		"include"
	];
	const requestCache$1 = [
		"default",
		"no-store",
		"reload",
		"no-cache",
		"force-cache",
		"only-if-cached"
	];
	const requestBodyHeader$1 = [
		"content-encoding",
		"content-language",
		"content-location",
		"content-type",
		"content-length"
	];
	const requestDuplex$1 = ["half"];
	const forbiddenMethods = [
		"CONNECT",
		"TRACE",
		"TRACK"
	];
	const forbiddenMethodsSet$1 = new Set(forbiddenMethods);
	const subresource = [
		"audio",
		"audioworklet",
		"font",
		"image",
		"manifest",
		"paintworklet",
		"script",
		"style",
		"track",
		"video",
		"xslt",
		""
	];
	const subresourceSet$1 = new Set(subresource);
	/** @type {globalThis['DOMException']} */
	const DOMException$6 = globalThis.DOMException ?? (() => {
		try {
			atob("~");
		} catch (err) {
			return Object.getPrototypeOf(err).constructor;
		}
	})();
	let channel;
	/** @type {globalThis['structuredClone']} */
	const structuredClone$1 = globalThis.structuredClone ?? function structuredClone$2(value$1, options = void 0) {
		if (arguments.length === 0) throw new TypeError("missing argument");
		if (!channel) channel = new MessageChannel();
		channel.port1.unref();
		channel.port2.unref();
		channel.port1.postMessage(value$1, options?.transfer);
		return receiveMessageOnPort(channel.port2).message;
	};
	module.exports = {
		DOMException: DOMException$6,
		structuredClone: structuredClone$1,
		subresource,
		forbiddenMethods,
		requestBodyHeader: requestBodyHeader$1,
		referrerPolicy: referrerPolicy$1,
		requestRedirect: requestRedirect$1,
		requestMode: requestMode$1,
		requestCredentials: requestCredentials$1,
		requestCache: requestCache$1,
		redirectStatus,
		corsSafeListedMethods,
		nullBodyStatus: nullBodyStatus$2,
		safeMethods,
		badPorts,
		requestDuplex: requestDuplex$1,
		subresourceSet: subresourceSet$1,
		badPortsSet: badPortsSet$1,
		redirectStatusSet: redirectStatusSet$3,
		corsSafeListedMethodsSet: corsSafeListedMethodsSet$1,
		safeMethodsSet: safeMethodsSet$1,
		forbiddenMethodsSet: forbiddenMethodsSet$1,
		referrerPolicySet
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/global.js
var require_global$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/global.js"(exports, module) {
	const globalOrigin = Symbol.for("undici.globalOrigin.1");
	function getGlobalOrigin$4() {
		return globalThis[globalOrigin];
	}
	function setGlobalOrigin(newOrigin) {
		if (newOrigin === void 0) {
			Object.defineProperty(globalThis, globalOrigin, {
				value: void 0,
				writable: true,
				enumerable: false,
				configurable: false
			});
			return;
		}
		const parsedURL = new URL(newOrigin);
		if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
		Object.defineProperty(globalThis, globalOrigin, {
			value: parsedURL,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	module.exports = {
		getGlobalOrigin: getGlobalOrigin$4,
		setGlobalOrigin
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/util.js
var require_util$5 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/util.js"(exports, module) {
	const { redirectStatusSet: redirectStatusSet$2, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants$4();
	const { getGlobalOrigin: getGlobalOrigin$3 } = require_global$1();
	const { performance: performance$1 } = __require("perf_hooks");
	const { isBlobLike: isBlobLike$6, toUSVString: toUSVString$4, ReadableStreamFrom: ReadableStreamFrom$2 } = require_util$6();
	const assert$18 = __require("assert");
	const { isUint8Array: isUint8Array$1 } = __require("util/types");
	let supportedHashes = [];
	/** @type {import('crypto')|undefined} */
	let crypto$3;
	try {
		crypto$3 = __require("crypto");
		const possibleRelevantHashes = [
			"sha256",
			"sha384",
			"sha512"
		];
		supportedHashes = crypto$3.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
	} catch {}
	function responseURL(response) {
		const urlList = response.urlList;
		const length = urlList.length;
		return length === 0 ? null : urlList[length - 1].toString();
	}
	function responseLocationURL$1(response, requestFragment) {
		if (!redirectStatusSet$2.has(response.status)) return null;
		let location = response.headersList.get("location");
		if (location !== null && isValidHeaderValue$1(location)) location = new URL(location, responseURL(response));
		if (location && !location.hash) location.hash = requestFragment;
		return location;
	}
	/** @returns {URL} */
	function requestCurrentURL$1(request$1) {
		return request$1.urlList[request$1.urlList.length - 1];
	}
	function requestBadPort$1(request$1) {
		const url = requestCurrentURL$1(request$1);
		if (urlIsHttpHttpsScheme$2(url) && badPortsSet.has(url.port)) return "blocked";
		return "allowed";
	}
	function isErrorLike$2(object) {
		return object instanceof Error || object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException";
	}
	function isValidReasonPhrase$1(statusText) {
		for (let i = 0; i < statusText.length; ++i) {
			const c = statusText.charCodeAt(i);
			if (!(c === 9 || c >= 32 && c <= 126 || c >= 128 && c <= 255)) return false;
		}
		return true;
	}
	/**
	* @see https://tools.ietf.org/html/rfc7230#section-3.2.6
	* @param {number} c
	*/
	function isTokenCharCode(c) {
		switch (c) {
			case 34:
			case 40:
			case 41:
			case 44:
			case 47:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 91:
			case 92:
			case 93:
			case 123:
			case 125: return false;
			default: return c >= 33 && c <= 126;
		}
	}
	/**
	* @param {string} characters
	*/
	function isValidHTTPToken$1(characters) {
		if (characters.length === 0) return false;
		for (let i = 0; i < characters.length; ++i) if (!isTokenCharCode(characters.charCodeAt(i))) return false;
		return true;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-name
	* @param {string} potentialValue
	*/
	function isValidHeaderName$2(potentialValue) {
		return isValidHTTPToken$1(potentialValue);
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-value
	* @param {string} potentialValue
	*/
	function isValidHeaderValue$1(potentialValue) {
		if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) return false;
		if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) return false;
		return true;
	}
	function setRequestReferrerPolicyOnRedirect$1(request$1, actualResponse) {
		const { headersList } = actualResponse;
		const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
		let policy = "";
		if (policyHeader.length > 0) for (let i = policyHeader.length; i !== 0; i--) {
			const token = policyHeader[i - 1].trim();
			if (referrerPolicyTokens.has(token)) {
				policy = token;
				break;
			}
		}
		if (policy !== "") request$1.referrerPolicy = policy;
	}
	function crossOriginResourcePolicyCheck$1() {
		return "allowed";
	}
	function corsCheck$1() {
		return "success";
	}
	function TAOCheck$1() {
		return "success";
	}
	function appendFetchMetadata$1(httpRequest) {
		let header = null;
		header = httpRequest.mode;
		httpRequest.headersList.set("sec-fetch-mode", header);
	}
	function appendRequestOriginHeader$1(request$1) {
		let serializedOrigin = request$1.origin;
		if (request$1.responseTainting === "cors" || request$1.mode === "websocket") {
			if (serializedOrigin) request$1.headersList.append("origin", serializedOrigin);
		} else if (request$1.method !== "GET" && request$1.method !== "HEAD") {
			switch (request$1.referrerPolicy) {
				case "no-referrer":
					serializedOrigin = null;
					break;
				case "no-referrer-when-downgrade":
				case "strict-origin":
				case "strict-origin-when-cross-origin":
					if (request$1.origin && urlHasHttpsScheme$1(request$1.origin) && !urlHasHttpsScheme$1(requestCurrentURL$1(request$1))) serializedOrigin = null;
					break;
				case "same-origin":
					if (!sameOrigin$2(request$1, requestCurrentURL$1(request$1))) serializedOrigin = null;
					break;
				default:
			}
			if (serializedOrigin) request$1.headersList.append("origin", serializedOrigin);
		}
	}
	function coarsenedSharedCurrentTime$1(crossOriginIsolatedCapability) {
		return performance$1.now();
	}
	function createOpaqueTimingInfo$1(timingInfo) {
		return {
			startTime: timingInfo.startTime ?? 0,
			redirectStartTime: 0,
			redirectEndTime: 0,
			postRedirectStartTime: timingInfo.startTime ?? 0,
			finalServiceWorkerStartTime: 0,
			finalNetworkResponseStartTime: 0,
			finalNetworkRequestStartTime: 0,
			endTime: 0,
			encodedBodySize: 0,
			decodedBodySize: 0,
			finalConnectionTimingInfo: null
		};
	}
	function makePolicyContainer$2() {
		return { referrerPolicy: "strict-origin-when-cross-origin" };
	}
	function clonePolicyContainer$1(policyContainer) {
		return { referrerPolicy: policyContainer.referrerPolicy };
	}
	function determineRequestsReferrer$1(request$1) {
		const policy = request$1.referrerPolicy;
		assert$18(policy);
		let referrerSource = null;
		if (request$1.referrer === "client") {
			const globalOrigin$1 = getGlobalOrigin$3();
			if (!globalOrigin$1 || globalOrigin$1.origin === "null") return "no-referrer";
			referrerSource = new URL(globalOrigin$1);
		} else if (request$1.referrer instanceof URL) referrerSource = request$1.referrer;
		let referrerURL = stripURLForReferrer(referrerSource);
		const referrerOrigin = stripURLForReferrer(referrerSource, true);
		if (referrerURL.toString().length > 4096) referrerURL = referrerOrigin;
		const areSameOrigin = sameOrigin$2(request$1, referrerURL);
		const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request$1.url);
		switch (policy) {
			case "origin": return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
			case "unsafe-url": return referrerURL;
			case "same-origin": return areSameOrigin ? referrerOrigin : "no-referrer";
			case "origin-when-cross-origin": return areSameOrigin ? referrerURL : referrerOrigin;
			case "strict-origin-when-cross-origin": {
				const currentURL = requestCurrentURL$1(request$1);
				if (sameOrigin$2(referrerURL, currentURL)) return referrerURL;
				if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) return "no-referrer";
				return referrerOrigin;
			}
			case "strict-origin":
			case "no-referrer-when-downgrade":
			default: return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
		}
	}
	/**
	* @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
	* @param {URL} url
	* @param {boolean|undefined} originOnly
	*/
	function stripURLForReferrer(url, originOnly) {
		assert$18(url instanceof URL);
		if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") return "no-referrer";
		url.username = "";
		url.password = "";
		url.hash = "";
		if (originOnly) {
			url.pathname = "";
			url.search = "";
		}
		return url;
	}
	function isURLPotentiallyTrustworthy(url) {
		if (!(url instanceof URL)) return false;
		if (url.href === "about:blank" || url.href === "about:srcdoc") return true;
		if (url.protocol === "data:") return true;
		if (url.protocol === "file:") return true;
		return isOriginPotentiallyTrustworthy(url.origin);
		function isOriginPotentiallyTrustworthy(origin) {
			if (origin == null || origin === "null") return false;
			const originAsURL = new URL(origin);
			if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") return true;
			if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.") || originAsURL.hostname.endsWith(".localhost")) return true;
			return false;
		}
	}
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
	* @param {Uint8Array} bytes
	* @param {string} metadataList
	*/
	function bytesMatch$1(bytes, metadataList) {
		/* istanbul ignore if: only if node is built with --without-ssl */
		if (crypto$3 === void 0) return true;
		const parsedMetadata = parseMetadata(metadataList);
		if (parsedMetadata === "no metadata") return true;
		if (parsedMetadata.length === 0) return true;
		const strongest = getStrongestMetadata(parsedMetadata);
		const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);
		for (const item of metadata) {
			const algorithm = item.algo;
			const expectedValue = item.hash;
			let actualValue = crypto$3.createHash(algorithm).update(bytes).digest("base64");
			if (actualValue[actualValue.length - 1] === "=") if (actualValue[actualValue.length - 2] === "=") actualValue = actualValue.slice(0, -2);
			else actualValue = actualValue.slice(0, -1);
			if (compareBase64Mixed(actualValue, expectedValue)) return true;
		}
		return false;
	}
	const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
	* @param {string} metadata
	*/
	function parseMetadata(metadata) {
		/** @type {{ algo: string, hash: string }[]} */
		const result = [];
		let empty = true;
		for (const token of metadata.split(" ")) {
			empty = false;
			const parsedToken = parseHashWithOptions.exec(token);
			if (parsedToken === null || parsedToken.groups === void 0 || parsedToken.groups.algo === void 0) continue;
			const algorithm = parsedToken.groups.algo.toLowerCase();
			if (supportedHashes.includes(algorithm)) result.push(parsedToken.groups);
		}
		if (empty === true) return "no metadata";
		return result;
	}
	/**
	* @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
	*/
	function getStrongestMetadata(metadataList) {
		let algorithm = metadataList[0].algo;
		if (algorithm[3] === "5") return algorithm;
		for (let i = 1; i < metadataList.length; ++i) {
			const metadata = metadataList[i];
			if (metadata.algo[3] === "5") {
				algorithm = "sha512";
				break;
			} else if (algorithm[3] === "3") continue;
			else if (metadata.algo[3] === "3") algorithm = "sha384";
		}
		return algorithm;
	}
	function filterMetadataListByAlgorithm(metadataList, algorithm) {
		if (metadataList.length === 1) return metadataList;
		let pos = 0;
		for (let i = 0; i < metadataList.length; ++i) if (metadataList[i].algo === algorithm) metadataList[pos++] = metadataList[i];
		metadataList.length = pos;
		return metadataList;
	}
	/**
	* Compares two base64 strings, allowing for base64url
	* in the second string.
	*
	* @param {string} actualValue always base64
	* @param {string} expectedValue base64 or base64url
	* @returns {boolean}
	*/
	function compareBase64Mixed(actualValue, expectedValue) {
		if (actualValue.length !== expectedValue.length) return false;
		for (let i = 0; i < actualValue.length; ++i) if (actualValue[i] !== expectedValue[i]) {
			if (actualValue[i] === "+" && expectedValue[i] === "-" || actualValue[i] === "/" && expectedValue[i] === "_") continue;
			return false;
		}
		return true;
	}
	function tryUpgradeRequestToAPotentiallyTrustworthyURL$1(request$1) {}
	/**
	* @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
	* @param {URL} A
	* @param {URL} B
	*/
	function sameOrigin$2(A$2, B$1) {
		if (A$2.origin === B$1.origin && A$2.origin === "null") return true;
		if (A$2.protocol === B$1.protocol && A$2.hostname === B$1.hostname && A$2.port === B$1.port) return true;
		return false;
	}
	function createDeferredPromise$3() {
		let res;
		let rej;
		const promise = new Promise((resolve$1, reject) => {
			res = resolve$1;
			rej = reject;
		});
		return {
			promise,
			resolve: res,
			reject: rej
		};
	}
	function isAborted$2(fetchParams) {
		return fetchParams.controller.state === "aborted";
	}
	function isCancelled$2(fetchParams) {
		return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
	}
	const normalizeMethodRecord$1 = {
		delete: "DELETE",
		DELETE: "DELETE",
		get: "GET",
		GET: "GET",
		head: "HEAD",
		HEAD: "HEAD",
		options: "OPTIONS",
		OPTIONS: "OPTIONS",
		post: "POST",
		POST: "POST",
		put: "PUT",
		PUT: "PUT"
	};
	Object.setPrototypeOf(normalizeMethodRecord$1, null);
	/**
	* @see https://fetch.spec.whatwg.org/#concept-method-normalize
	* @param {string} method
	*/
	function normalizeMethod$1(method) {
		return normalizeMethodRecord$1[method.toLowerCase()] ?? method;
	}
	function serializeJavascriptValueToJSONString$1(value$1) {
		const result = JSON.stringify(value$1);
		if (result === void 0) throw new TypeError("Value is not JSON serializable");
		assert$18(typeof result === "string");
		return result;
	}
	const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
	/**
	* @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
	* @param {() => unknown[]} iterator
	* @param {string} name name of the instance
	* @param {'key'|'value'|'key+value'} kind
	*/
	function makeIterator$2(iterator, name, kind) {
		const object = {
			index: 0,
			kind,
			target: iterator
		};
		const i = {
			next() {
				if (Object.getPrototypeOf(this) !== i) throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
				const { index, kind: kind$1, target } = object;
				const values = target();
				const len = values.length;
				if (index >= len) return {
					value: void 0,
					done: true
				};
				const pair = values[index];
				object.index = index + 1;
				return iteratorResult(pair, kind$1);
			},
			[Symbol.toStringTag]: `${name} Iterator`
		};
		Object.setPrototypeOf(i, esIteratorPrototype);
		return Object.setPrototypeOf({}, i);
	}
	function iteratorResult(pair, kind) {
		let result;
		switch (kind) {
			case "key": {
				result = pair[0];
				break;
			}
			case "value": {
				result = pair[1];
				break;
			}
			case "key+value": {
				result = pair;
				break;
			}
		}
		return {
			value: result,
			done: false
		};
	}
	/**
	* @see https://fetch.spec.whatwg.org/#body-fully-read
	*/
	async function fullyReadBody$2(body, processBody, processBodyError) {
		const successSteps = processBody;
		const errorSteps = processBodyError;
		let reader;
		try {
			reader = body.stream.getReader();
		} catch (e$1) {
			errorSteps(e$1);
			return;
		}
		try {
			const result = await readAllBytes$1(reader);
			successSteps(result);
		} catch (e$1) {
			errorSteps(e$1);
		}
	}
	/** @type {ReadableStream} */
	let ReadableStream$3 = globalThis.ReadableStream;
	function isReadableStreamLike$1(stream$2) {
		if (!ReadableStream$3) ReadableStream$3 = __require("stream/web").ReadableStream;
		return stream$2 instanceof ReadableStream$3 || stream$2[Symbol.toStringTag] === "ReadableStream" && typeof stream$2.tee === "function";
	}
	const MAXIMUM_ARGUMENT_LENGTH = 65535;
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-decode
	* @param {number[]|Uint8Array} input
	*/
	function isomorphicDecode$1(input) {
		if (input.length < MAXIMUM_ARGUMENT_LENGTH) return String.fromCharCode(...input);
		return input.reduce((previous, current) => previous + String.fromCharCode(current), "");
	}
	/**
	* @param {ReadableStreamController<Uint8Array>} controller
	*/
	function readableStreamClose$2(controller) {
		try {
			controller.close();
		} catch (err) {
			if (!err.message.includes("Controller is already closed")) throw err;
		}
	}
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-encode
	* @param {string} input
	*/
	function isomorphicEncode$2(input) {
		for (let i = 0; i < input.length; i++) assert$18(input.charCodeAt(i) <= 255);
		return input;
	}
	/**
	* @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
	* @see https://streams.spec.whatwg.org/#read-loop
	* @param {ReadableStreamDefaultReader} reader
	*/
	async function readAllBytes$1(reader) {
		const bytes = [];
		let byteLength = 0;
		while (true) {
			const { done, value: chunk } = await reader.read();
			if (done) return Buffer.concat(bytes, byteLength);
			if (!isUint8Array$1(chunk)) throw new TypeError("Received non-Uint8Array chunk");
			bytes.push(chunk);
			byteLength += chunk.length;
		}
	}
	/**
	* @see https://fetch.spec.whatwg.org/#is-local
	* @param {URL} url
	*/
	function urlIsLocal$1(url) {
		assert$18("protocol" in url);
		const protocol = url.protocol;
		return protocol === "about:" || protocol === "blob:" || protocol === "data:";
	}
	/**
	* @param {string|URL} url
	*/
	function urlHasHttpsScheme$1(url) {
		if (typeof url === "string") return url.startsWith("https:");
		return url.protocol === "https:";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-scheme
	* @param {URL} url
	*/
	function urlIsHttpHttpsScheme$2(url) {
		assert$18("protocol" in url);
		const protocol = url.protocol;
		return protocol === "http:" || protocol === "https:";
	}
	/**
	* Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
	*/
	const hasOwn$1 = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
	module.exports = {
		isAborted: isAborted$2,
		isCancelled: isCancelled$2,
		createDeferredPromise: createDeferredPromise$3,
		ReadableStreamFrom: ReadableStreamFrom$2,
		toUSVString: toUSVString$4,
		tryUpgradeRequestToAPotentiallyTrustworthyURL: tryUpgradeRequestToAPotentiallyTrustworthyURL$1,
		coarsenedSharedCurrentTime: coarsenedSharedCurrentTime$1,
		determineRequestsReferrer: determineRequestsReferrer$1,
		makePolicyContainer: makePolicyContainer$2,
		clonePolicyContainer: clonePolicyContainer$1,
		appendFetchMetadata: appendFetchMetadata$1,
		appendRequestOriginHeader: appendRequestOriginHeader$1,
		TAOCheck: TAOCheck$1,
		corsCheck: corsCheck$1,
		crossOriginResourcePolicyCheck: crossOriginResourcePolicyCheck$1,
		createOpaqueTimingInfo: createOpaqueTimingInfo$1,
		setRequestReferrerPolicyOnRedirect: setRequestReferrerPolicyOnRedirect$1,
		isValidHTTPToken: isValidHTTPToken$1,
		requestBadPort: requestBadPort$1,
		requestCurrentURL: requestCurrentURL$1,
		responseURL,
		responseLocationURL: responseLocationURL$1,
		isBlobLike: isBlobLike$6,
		isURLPotentiallyTrustworthy,
		isValidReasonPhrase: isValidReasonPhrase$1,
		sameOrigin: sameOrigin$2,
		normalizeMethod: normalizeMethod$1,
		serializeJavascriptValueToJSONString: serializeJavascriptValueToJSONString$1,
		makeIterator: makeIterator$2,
		isValidHeaderName: isValidHeaderName$2,
		isValidHeaderValue: isValidHeaderValue$1,
		hasOwn: hasOwn$1,
		isErrorLike: isErrorLike$2,
		fullyReadBody: fullyReadBody$2,
		bytesMatch: bytesMatch$1,
		isReadableStreamLike: isReadableStreamLike$1,
		readableStreamClose: readableStreamClose$2,
		isomorphicEncode: isomorphicEncode$2,
		isomorphicDecode: isomorphicDecode$1,
		urlIsLocal: urlIsLocal$1,
		urlHasHttpsScheme: urlHasHttpsScheme$1,
		urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$2,
		readAllBytes: readAllBytes$1,
		normalizeMethodRecord: normalizeMethodRecord$1,
		parseMetadata
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/symbols.js
var require_symbols$3 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/symbols.js"(exports, module) {
	module.exports = {
		kUrl: Symbol("url"),
		kHeaders: Symbol("headers"),
		kSignal: Symbol("signal"),
		kState: Symbol("state"),
		kGuard: Symbol("guard"),
		kRealm: Symbol("realm")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/webidl.js"(exports, module) {
	const { types: types$6 } = __require("util");
	const { hasOwn, toUSVString: toUSVString$3 } = require_util$5();
	/** @type {import('../../types/webidl').Webidl} */
	const webidl$14 = {};
	webidl$14.converters = {};
	webidl$14.util = {};
	webidl$14.errors = {};
	webidl$14.errors.exception = function(message) {
		return new TypeError(`${message.header}: ${message.message}`);
	};
	webidl$14.errors.conversionFailed = function(context) {
		const plural = context.types.length === 1 ? "" : " one of";
		const message = `${context.argument} could not be converted to${plural}: ${context.types.join(", ")}.`;
		return webidl$14.errors.exception({
			header: context.prefix,
			message
		});
	};
	webidl$14.errors.invalidArgument = function(context) {
		return webidl$14.errors.exception({
			header: context.prefix,
			message: `"${context.value}" is an invalid ${context.type}.`
		});
	};
	webidl$14.brandCheck = function(V$2, I$1, opts = void 0) {
		if (opts?.strict !== false && !(V$2 instanceof I$1)) throw new TypeError("Illegal invocation");
		else return V$2?.[Symbol.toStringTag] === I$1.prototype[Symbol.toStringTag];
	};
	webidl$14.argumentLengthCheck = function({ length }, min, ctx) {
		if (length < min) throw webidl$14.errors.exception({
			message: `${min} argument${min !== 1 ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
			...ctx
		});
	};
	webidl$14.illegalConstructor = function() {
		throw webidl$14.errors.exception({
			header: "TypeError",
			message: "Illegal constructor"
		});
	};
	webidl$14.util.Type = function(V$2) {
		switch (typeof V$2) {
			case "undefined": return "Undefined";
			case "boolean": return "Boolean";
			case "string": return "String";
			case "symbol": return "Symbol";
			case "number": return "Number";
			case "bigint": return "BigInt";
			case "function":
			case "object": {
				if (V$2 === null) return "Null";
				return "Object";
			}
		}
	};
	webidl$14.util.ConvertToInt = function(V$2, bitLength, signedness, opts = {}) {
		let upperBound;
		let lowerBound;
		if (bitLength === 64) {
			upperBound = Math.pow(2, 53) - 1;
			if (signedness === "unsigned") lowerBound = 0;
			else lowerBound = Math.pow(-2, 53) + 1;
		} else if (signedness === "unsigned") {
			lowerBound = 0;
			upperBound = Math.pow(2, bitLength) - 1;
		} else {
			lowerBound = Math.pow(-2, bitLength) - 1;
			upperBound = Math.pow(2, bitLength - 1) - 1;
		}
		let x$3 = Number(V$2);
		if (x$3 === 0) x$3 = 0;
		if (opts.enforceRange === true) {
			if (Number.isNaN(x$3) || x$3 === Number.POSITIVE_INFINITY || x$3 === Number.NEGATIVE_INFINITY) throw webidl$14.errors.exception({
				header: "Integer conversion",
				message: `Could not convert ${V$2} to an integer.`
			});
			x$3 = webidl$14.util.IntegerPart(x$3);
			if (x$3 < lowerBound || x$3 > upperBound) throw webidl$14.errors.exception({
				header: "Integer conversion",
				message: `Value must be between ${lowerBound}-${upperBound}, got ${x$3}.`
			});
			return x$3;
		}
		if (!Number.isNaN(x$3) && opts.clamp === true) {
			x$3 = Math.min(Math.max(x$3, lowerBound), upperBound);
			if (Math.floor(x$3) % 2 === 0) x$3 = Math.floor(x$3);
			else x$3 = Math.ceil(x$3);
			return x$3;
		}
		if (Number.isNaN(x$3) || x$3 === 0 && Object.is(0, x$3) || x$3 === Number.POSITIVE_INFINITY || x$3 === Number.NEGATIVE_INFINITY) return 0;
		x$3 = webidl$14.util.IntegerPart(x$3);
		x$3 = x$3 % Math.pow(2, bitLength);
		if (signedness === "signed" && x$3 >= Math.pow(2, bitLength) - 1) return x$3 - Math.pow(2, bitLength);
		return x$3;
	};
	webidl$14.util.IntegerPart = function(n) {
		const r$1 = Math.floor(Math.abs(n));
		if (n < 0) return -1 * r$1;
		return r$1;
	};
	webidl$14.sequenceConverter = function(converter) {
		return (V$2) => {
			if (webidl$14.util.Type(V$2) !== "Object") throw webidl$14.errors.exception({
				header: "Sequence",
				message: `Value of type ${webidl$14.util.Type(V$2)} is not an Object.`
			});
			/** @type {Generator} */
			const method = V$2?.[Symbol.iterator]?.();
			const seq = [];
			if (method === void 0 || typeof method.next !== "function") throw webidl$14.errors.exception({
				header: "Sequence",
				message: "Object is not an iterator."
			});
			while (true) {
				const { done, value: value$1 } = method.next();
				if (done) break;
				seq.push(converter(value$1));
			}
			return seq;
		};
	};
	webidl$14.recordConverter = function(keyConverter, valueConverter) {
		return (O$1) => {
			if (webidl$14.util.Type(O$1) !== "Object") throw webidl$14.errors.exception({
				header: "Record",
				message: `Value of type ${webidl$14.util.Type(O$1)} is not an Object.`
			});
			const result = {};
			if (!types$6.isProxy(O$1)) {
				const keys$1 = Object.keys(O$1);
				for (const key of keys$1) {
					const typedKey = keyConverter(key);
					const typedValue = valueConverter(O$1[key]);
					result[typedKey] = typedValue;
				}
				return result;
			}
			const keys = Reflect.ownKeys(O$1);
			for (const key of keys) {
				const desc = Reflect.getOwnPropertyDescriptor(O$1, key);
				if (desc?.enumerable) {
					const typedKey = keyConverter(key);
					const typedValue = valueConverter(O$1[key]);
					result[typedKey] = typedValue;
				}
			}
			return result;
		};
	};
	webidl$14.interfaceConverter = function(i) {
		return (V$2, opts = {}) => {
			if (opts.strict !== false && !(V$2 instanceof i)) throw webidl$14.errors.exception({
				header: i.name,
				message: `Expected ${V$2} to be an instance of ${i.name}.`
			});
			return V$2;
		};
	};
	webidl$14.dictionaryConverter = function(converters) {
		return (dictionary) => {
			const type$1 = webidl$14.util.Type(dictionary);
			const dict = {};
			if (type$1 === "Null" || type$1 === "Undefined") return dict;
			else if (type$1 !== "Object") throw webidl$14.errors.exception({
				header: "Dictionary",
				message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
			});
			for (const options of converters) {
				const { key, defaultValue, required, converter } = options;
				if (required === true) {
					if (!hasOwn(dictionary, key)) throw webidl$14.errors.exception({
						header: "Dictionary",
						message: `Missing required key "${key}".`
					});
				}
				let value$1 = dictionary[key];
				const hasDefault = hasOwn(options, "defaultValue");
				if (hasDefault && value$1 !== null) value$1 = value$1 ?? defaultValue;
				if (required || hasDefault || value$1 !== void 0) {
					value$1 = converter(value$1);
					if (options.allowedValues && !options.allowedValues.includes(value$1)) throw webidl$14.errors.exception({
						header: "Dictionary",
						message: `${value$1} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
					});
					dict[key] = value$1;
				}
			}
			return dict;
		};
	};
	webidl$14.nullableConverter = function(converter) {
		return (V$2) => {
			if (V$2 === null) return V$2;
			return converter(V$2);
		};
	};
	webidl$14.converters.DOMString = function(V$2, opts = {}) {
		if (V$2 === null && opts.legacyNullToEmptyString) return "";
		if (typeof V$2 === "symbol") throw new TypeError("Could not convert argument of type symbol to string.");
		return String(V$2);
	};
	webidl$14.converters.ByteString = function(V$2) {
		const x$3 = webidl$14.converters.DOMString(V$2);
		for (let index = 0; index < x$3.length; index++) if (x$3.charCodeAt(index) > 255) throw new TypeError(`Cannot convert argument to a ByteString because the character at index ${index} has a value of ${x$3.charCodeAt(index)} which is greater than 255.`);
		return x$3;
	};
	webidl$14.converters.USVString = toUSVString$3;
	webidl$14.converters.boolean = function(V$2) {
		const x$3 = Boolean(V$2);
		return x$3;
	};
	webidl$14.converters.any = function(V$2) {
		return V$2;
	};
	webidl$14.converters["long long"] = function(V$2) {
		const x$3 = webidl$14.util.ConvertToInt(V$2, 64, "signed");
		return x$3;
	};
	webidl$14.converters["unsigned long long"] = function(V$2) {
		const x$3 = webidl$14.util.ConvertToInt(V$2, 64, "unsigned");
		return x$3;
	};
	webidl$14.converters["unsigned long"] = function(V$2) {
		const x$3 = webidl$14.util.ConvertToInt(V$2, 32, "unsigned");
		return x$3;
	};
	webidl$14.converters["unsigned short"] = function(V$2, opts) {
		const x$3 = webidl$14.util.ConvertToInt(V$2, 16, "unsigned", opts);
		return x$3;
	};
	webidl$14.converters.ArrayBuffer = function(V$2, opts = {}) {
		if (webidl$14.util.Type(V$2) !== "Object" || !types$6.isAnyArrayBuffer(V$2)) throw webidl$14.errors.conversionFailed({
			prefix: `${V$2}`,
			argument: `${V$2}`,
			types: ["ArrayBuffer"]
		});
		if (opts.allowShared === false && types$6.isSharedArrayBuffer(V$2)) throw webidl$14.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V$2;
	};
	webidl$14.converters.TypedArray = function(V$2, T$2, opts = {}) {
		if (webidl$14.util.Type(V$2) !== "Object" || !types$6.isTypedArray(V$2) || V$2.constructor.name !== T$2.name) throw webidl$14.errors.conversionFailed({
			prefix: `${T$2.name}`,
			argument: `${V$2}`,
			types: [T$2.name]
		});
		if (opts.allowShared === false && types$6.isSharedArrayBuffer(V$2.buffer)) throw webidl$14.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V$2;
	};
	webidl$14.converters.DataView = function(V$2, opts = {}) {
		if (webidl$14.util.Type(V$2) !== "Object" || !types$6.isDataView(V$2)) throw webidl$14.errors.exception({
			header: "DataView",
			message: "Object is not a DataView."
		});
		if (opts.allowShared === false && types$6.isSharedArrayBuffer(V$2.buffer)) throw webidl$14.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V$2;
	};
	webidl$14.converters.BufferSource = function(V$2, opts = {}) {
		if (types$6.isAnyArrayBuffer(V$2)) return webidl$14.converters.ArrayBuffer(V$2, opts);
		if (types$6.isTypedArray(V$2)) return webidl$14.converters.TypedArray(V$2, V$2.constructor);
		if (types$6.isDataView(V$2)) return webidl$14.converters.DataView(V$2, opts);
		throw new TypeError(`Could not convert ${V$2} to a BufferSource.`);
	};
	webidl$14.converters["sequence<ByteString>"] = webidl$14.sequenceConverter(webidl$14.converters.ByteString);
	webidl$14.converters["sequence<sequence<ByteString>>"] = webidl$14.sequenceConverter(webidl$14.converters["sequence<ByteString>"]);
	webidl$14.converters["record<ByteString, ByteString>"] = webidl$14.recordConverter(webidl$14.converters.ByteString, webidl$14.converters.ByteString);
	module.exports = { webidl: webidl$14 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/dataURL.js"(exports, module) {
	const assert$17 = __require("assert");
	const { atob: atob$1 } = __require("buffer");
	const { isomorphicDecode } = require_util$5();
	const encoder$1 = new TextEncoder();
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-token-code-point
	*/
	const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
	const HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
	*/
	const HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
	/** @param {URL} dataURL */
	function dataURLProcessor$1(dataURL) {
		assert$17(dataURL.protocol === "data:");
		let input = URLSerializer$4(dataURL, true);
		input = input.slice(5);
		const position = { position: 0 };
		let mimeType = collectASequenceOfCodePointsFast$1(",", input, position);
		const mimeTypeLength = mimeType.length;
		mimeType = removeASCIIWhitespace(mimeType, true, true);
		if (position.position >= input.length) return "failure";
		position.position++;
		const encodedBody = input.slice(mimeTypeLength + 1);
		let body = stringPercentDecode(encodedBody);
		if (/;(\u0020){0,}base64$/i.test(mimeType)) {
			const stringBody = isomorphicDecode(body);
			body = forgivingBase64(stringBody);
			if (body === "failure") return "failure";
			mimeType = mimeType.slice(0, -6);
			mimeType = mimeType.replace(/(\u0020)+$/, "");
			mimeType = mimeType.slice(0, -1);
		}
		if (mimeType.startsWith(";")) mimeType = "text/plain" + mimeType;
		let mimeTypeRecord = parseMIMEType$3(mimeType);
		if (mimeTypeRecord === "failure") mimeTypeRecord = parseMIMEType$3("text/plain;charset=US-ASCII");
		return {
			mimeType: mimeTypeRecord,
			body
		};
	}
	/**
	* @param {URL} url
	* @param {boolean} excludeFragment
	*/
	function URLSerializer$4(url, excludeFragment = false) {
		if (!excludeFragment) return url.href;
		const href = url.href;
		const hashLength = url.hash.length;
		return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
	}
	/**
	* @param {(char: string) => boolean} condition
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePoints(condition, input, position) {
		let result = "";
		while (position.position < input.length && condition(input[position.position])) {
			result += input[position.position];
			position.position++;
		}
		return result;
	}
	/**
	* A faster collectASequenceOfCodePoints that only works when comparing a single character.
	* @param {string} char
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePointsFast$1(char, input, position) {
		const idx = input.indexOf(char, position.position);
		const start = position.position;
		if (idx === -1) {
			position.position = input.length;
			return input.slice(start);
		}
		position.position = idx;
		return input.slice(start, position.position);
	}
	/** @param {string} input */
	function stringPercentDecode(input) {
		const bytes = encoder$1.encode(input);
		return percentDecode(bytes);
	}
	/** @param {Uint8Array} input */
	function percentDecode(input) {
		/** @type {number[]} */
		const output = [];
		for (let i = 0; i < input.length; i++) {
			const byte = input[i];
			if (byte !== 37) output.push(byte);
			else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) output.push(37);
			else {
				const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
				const bytePoint = Number.parseInt(nextTwoBytes, 16);
				output.push(bytePoint);
				i += 2;
			}
		}
		return Uint8Array.from(output);
	}
	/** @param {string} input */
	function parseMIMEType$3(input) {
		input = removeHTTPWhitespace(input, true, true);
		const position = { position: 0 };
		const type$1 = collectASequenceOfCodePointsFast$1("/", input, position);
		if (type$1.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type$1)) return "failure";
		if (position.position > input.length) return "failure";
		position.position++;
		let subtype = collectASequenceOfCodePointsFast$1(";", input, position);
		subtype = removeHTTPWhitespace(subtype, false, true);
		if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) return "failure";
		const typeLowercase = type$1.toLowerCase();
		const subtypeLowercase = subtype.toLowerCase();
		const mimeType = {
			type: typeLowercase,
			subtype: subtypeLowercase,
			parameters: new Map(),
			essence: `${typeLowercase}/${subtypeLowercase}`
		};
		while (position.position < input.length) {
			position.position++;
			collectASequenceOfCodePoints(
				// https://fetch.spec.whatwg.org/#http-whitespace
				(char) => HTTP_WHITESPACE_REGEX.test(char),
				input,
				position
);
			let parameterName = collectASequenceOfCodePoints((char) => char !== ";" && char !== "=", input, position);
			parameterName = parameterName.toLowerCase();
			if (position.position < input.length) {
				if (input[position.position] === ";") continue;
				position.position++;
			}
			if (position.position > input.length) break;
			let parameterValue = null;
			if (input[position.position] === "\"") {
				parameterValue = collectAnHTTPQuotedString(input, position, true);
				collectASequenceOfCodePointsFast$1(";", input, position);
			} else {
				parameterValue = collectASequenceOfCodePointsFast$1(";", input, position);
				parameterValue = removeHTTPWhitespace(parameterValue, false, true);
				if (parameterValue.length === 0) continue;
			}
			if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) mimeType.parameters.set(parameterName, parameterValue);
		}
		return mimeType;
	}
	/** @param {string} data */
	function forgivingBase64(data) {
		data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
		if (data.length % 4 === 0) data = data.replace(/=?=$/, "");
		if (data.length % 4 === 1) return "failure";
		if (/[^+/0-9A-Za-z]/.test(data)) return "failure";
		const binary = atob$1(data);
		const bytes = new Uint8Array(binary.length);
		for (let byte = 0; byte < binary.length; byte++) bytes[byte] = binary.charCodeAt(byte);
		return bytes;
	}
	/**
	* @param {string} input
	* @param {{ position: number }} position
	* @param {boolean?} extractValue
	*/
	function collectAnHTTPQuotedString(input, position, extractValue) {
		const positionStart = position.position;
		let value$1 = "";
		assert$17(input[position.position] === "\"");
		position.position++;
		while (true) {
			value$1 += collectASequenceOfCodePoints((char) => char !== "\"" && char !== "\\", input, position);
			if (position.position >= input.length) break;
			const quoteOrBackslash = input[position.position];
			position.position++;
			if (quoteOrBackslash === "\\") {
				if (position.position >= input.length) {
					value$1 += "\\";
					break;
				}
				value$1 += input[position.position];
				position.position++;
			} else {
				assert$17(quoteOrBackslash === "\"");
				break;
			}
		}
		if (extractValue) return value$1;
		return input.slice(positionStart, position.position);
	}
	/**
	* @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
	*/
	function serializeAMimeType$4(mimeType) {
		assert$17(mimeType !== "failure");
		const { parameters, essence } = mimeType;
		let serialization = essence;
		for (let [name, value$1] of parameters.entries()) {
			serialization += ";";
			serialization += name;
			serialization += "=";
			if (!HTTP_TOKEN_CODEPOINTS.test(value$1)) {
				value$1 = value$1.replace(/(\\|")/g, "\\$1");
				value$1 = "\"" + value$1;
				value$1 += "\"";
			}
			serialization += value$1;
		}
		return serialization;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {string} char
	*/
	function isHTTPWhiteSpace(char) {
		return char === "\r" || char === "\n" || char === "	" || char === " ";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {string} str
	*/
	function removeHTTPWhitespace(str, leading = true, trailing = true) {
		let lead = 0;
		let trail = str.length - 1;
		if (leading) for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
		if (trailing) for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
		return str.slice(lead, trail + 1);
	}
	/**
	* @see https://infra.spec.whatwg.org/#ascii-whitespace
	* @param {string} char
	*/
	function isASCIIWhitespace(char) {
		return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
	}
	/**
	* @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
	*/
	function removeASCIIWhitespace(str, leading = true, trailing = true) {
		let lead = 0;
		let trail = str.length - 1;
		if (leading) for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
		if (trailing) for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
		return str.slice(lead, trail + 1);
	}
	module.exports = {
		dataURLProcessor: dataURLProcessor$1,
		URLSerializer: URLSerializer$4,
		collectASequenceOfCodePoints,
		collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast$1,
		stringPercentDecode,
		parseMIMEType: parseMIMEType$3,
		collectAnHTTPQuotedString,
		serializeAMimeType: serializeAMimeType$4
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/file.js
var require_file = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/file.js"(exports, module) {
	const { Blob: Blob$4, File: NativeFile$2 } = __require("buffer");
	const { types: types$5 } = __require("util");
	const { kState: kState$9 } = require_symbols$3();
	const { isBlobLike: isBlobLike$5 } = require_util$5();
	const { webidl: webidl$13 } = require_webidl();
	const { parseMIMEType: parseMIMEType$2, serializeAMimeType: serializeAMimeType$3 } = require_dataURL();
	const { kEnumerableProperty: kEnumerableProperty$8 } = require_util$6();
	const encoder = new TextEncoder();
	var File$3 = class File$3 extends Blob$4 {
		constructor(fileBits, fileName, options = {}) {
			webidl$13.argumentLengthCheck(arguments, 2, { header: "File constructor" });
			fileBits = webidl$13.converters["sequence<BlobPart>"](fileBits);
			fileName = webidl$13.converters.USVString(fileName);
			options = webidl$13.converters.FilePropertyBag(options);
			const n = fileName;
			let t = options.type;
			let d$2;
			substep: {
				if (t) {
					t = parseMIMEType$2(t);
					if (t === "failure") {
						t = "";
						break substep;
					}
					t = serializeAMimeType$3(t).toLowerCase();
				}
				d$2 = options.lastModified;
			}
			super(processBlobParts(fileBits, options), { type: t });
			this[kState$9] = {
				name: n,
				lastModified: d$2,
				type: t
			};
		}
		get name() {
			webidl$13.brandCheck(this, File$3);
			return this[kState$9].name;
		}
		get lastModified() {
			webidl$13.brandCheck(this, File$3);
			return this[kState$9].lastModified;
		}
		get type() {
			webidl$13.brandCheck(this, File$3);
			return this[kState$9].type;
		}
	};
	var FileLike$1 = class FileLike$1 {
		constructor(blobLike, fileName, options = {}) {
			const n = fileName;
			const t = options.type;
			const d$2 = options.lastModified ?? Date.now();
			this[kState$9] = {
				blobLike,
				name: n,
				type: t,
				lastModified: d$2
			};
		}
		stream(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.stream(...args);
		}
		arrayBuffer(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.arrayBuffer(...args);
		}
		slice(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.slice(...args);
		}
		text(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.text(...args);
		}
		get size() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.size;
		}
		get type() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.type;
		}
		get name() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].name;
		}
		get lastModified() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].lastModified;
		}
		get [Symbol.toStringTag]() {
			return "File";
		}
	};
	Object.defineProperties(File$3.prototype, {
		[Symbol.toStringTag]: {
			value: "File",
			configurable: true
		},
		name: kEnumerableProperty$8,
		lastModified: kEnumerableProperty$8
	});
	webidl$13.converters.Blob = webidl$13.interfaceConverter(Blob$4);
	webidl$13.converters.BlobPart = function(V$2, opts) {
		if (webidl$13.util.Type(V$2) === "Object") {
			if (isBlobLike$5(V$2)) return webidl$13.converters.Blob(V$2, { strict: false });
			if (ArrayBuffer.isView(V$2) || types$5.isAnyArrayBuffer(V$2)) return webidl$13.converters.BufferSource(V$2, opts);
		}
		return webidl$13.converters.USVString(V$2, opts);
	};
	webidl$13.converters["sequence<BlobPart>"] = webidl$13.sequenceConverter(webidl$13.converters.BlobPart);
	webidl$13.converters.FilePropertyBag = webidl$13.dictionaryConverter([
		{
			key: "lastModified",
			converter: webidl$13.converters["long long"],
			get defaultValue() {
				return Date.now();
			}
		},
		{
			key: "type",
			converter: webidl$13.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "endings",
			converter: (value$1) => {
				value$1 = webidl$13.converters.DOMString(value$1);
				value$1 = value$1.toLowerCase();
				if (value$1 !== "native") value$1 = "transparent";
				return value$1;
			},
			defaultValue: "transparent"
		}
	]);
	/**
	* @see https://www.w3.org/TR/FileAPI/#process-blob-parts
	* @param {(NodeJS.TypedArray|Blob|string)[]} parts
	* @param {{ type: string, endings: string }} options
	*/
	function processBlobParts(parts, options) {
		/** @type {NodeJS.TypedArray[]} */
		const bytes = [];
		for (const element of parts) if (typeof element === "string") {
			let s = element;
			if (options.endings === "native") s = convertLineEndingsNative(s);
			bytes.push(encoder.encode(s));
		} else if (types$5.isAnyArrayBuffer(element) || types$5.isTypedArray(element)) if (!element.buffer) bytes.push(new Uint8Array(element));
		else bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));
		else if (isBlobLike$5(element)) bytes.push(element);
		return bytes;
	}
	/**
	* @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
	* @param {string} s
	*/
	function convertLineEndingsNative(s) {
		let nativeLineEnding = "\n";
		if (process.platform === "win32") nativeLineEnding = "\r\n";
		return s.replace(/\r?\n/g, nativeLineEnding);
	}
	function isFileLike$1(object) {
		return NativeFile$2 && object instanceof NativeFile$2 || object instanceof File$3 || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
	}
	module.exports = {
		File: File$3,
		FileLike: FileLike$1,
		isFileLike: isFileLike$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/formdata.js"(exports, module) {
	const { isBlobLike: isBlobLike$4, toUSVString: toUSVString$2, makeIterator: makeIterator$1 } = require_util$5();
	const { kState: kState$8 } = require_symbols$3();
	const { File: UndiciFile$1, FileLike, isFileLike } = require_file();
	const { webidl: webidl$12 } = require_webidl();
	const { Blob: Blob$3, File: NativeFile$1 } = __require("buffer");
	/** @type {globalThis['File']} */
	const File$2 = NativeFile$1 ?? UndiciFile$1;
	var FormData$3 = class FormData$3 {
		constructor(form) {
			if (form !== void 0) throw webidl$12.errors.conversionFailed({
				prefix: "FormData constructor",
				argument: "Argument 1",
				types: ["undefined"]
			});
			this[kState$8] = [];
		}
		append(name, value$1, filename = void 0) {
			webidl$12.brandCheck(this, FormData$3);
			webidl$12.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
			if (arguments.length === 3 && !isBlobLike$4(value$1)) throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
			name = webidl$12.converters.USVString(name);
			value$1 = isBlobLike$4(value$1) ? webidl$12.converters.Blob(value$1, { strict: false }) : webidl$12.converters.USVString(value$1);
			filename = arguments.length === 3 ? webidl$12.converters.USVString(filename) : void 0;
			const entry = makeEntry(name, value$1, filename);
			this[kState$8].push(entry);
		}
		delete(name) {
			webidl$12.brandCheck(this, FormData$3);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
			name = webidl$12.converters.USVString(name);
			this[kState$8] = this[kState$8].filter((entry) => entry.name !== name);
		}
		get(name) {
			webidl$12.brandCheck(this, FormData$3);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
			name = webidl$12.converters.USVString(name);
			const idx = this[kState$8].findIndex((entry) => entry.name === name);
			if (idx === -1) return null;
			return this[kState$8][idx].value;
		}
		getAll(name) {
			webidl$12.brandCheck(this, FormData$3);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
			name = webidl$12.converters.USVString(name);
			return this[kState$8].filter((entry) => entry.name === name).map((entry) => entry.value);
		}
		has(name) {
			webidl$12.brandCheck(this, FormData$3);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
			name = webidl$12.converters.USVString(name);
			return this[kState$8].findIndex((entry) => entry.name === name) !== -1;
		}
		set(name, value$1, filename = void 0) {
			webidl$12.brandCheck(this, FormData$3);
			webidl$12.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
			if (arguments.length === 3 && !isBlobLike$4(value$1)) throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
			name = webidl$12.converters.USVString(name);
			value$1 = isBlobLike$4(value$1) ? webidl$12.converters.Blob(value$1, { strict: false }) : webidl$12.converters.USVString(value$1);
			filename = arguments.length === 3 ? toUSVString$2(filename) : void 0;
			const entry = makeEntry(name, value$1, filename);
			const idx = this[kState$8].findIndex((entry$1) => entry$1.name === name);
			if (idx !== -1) this[kState$8] = [
				...this[kState$8].slice(0, idx),
				entry,
				...this[kState$8].slice(idx + 1).filter((entry$1) => entry$1.name !== name)
			];
			else this[kState$8].push(entry);
		}
		entries() {
			webidl$12.brandCheck(this, FormData$3);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "key+value");
		}
		keys() {
			webidl$12.brandCheck(this, FormData$3);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "key");
		}
		values() {
			webidl$12.brandCheck(this, FormData$3);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "value");
		}
		/**
		* @param {(value: string, key: string, self: FormData) => void} callbackFn
		* @param {unknown} thisArg
		*/
		forEach(callbackFn, thisArg = globalThis) {
			webidl$12.brandCheck(this, FormData$3);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
			if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
			for (const [key, value$1] of this) callbackFn.apply(thisArg, [
				value$1,
				key,
				this
			]);
		}
	};
	FormData$3.prototype[Symbol.iterator] = FormData$3.prototype.entries;
	Object.defineProperties(FormData$3.prototype, { [Symbol.toStringTag]: {
		value: "FormData",
		configurable: true
	} });
	/**
	* @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
	* @param {string} name
	* @param {string|Blob} value
	* @param {?string} filename
	* @returns
	*/
	function makeEntry(name, value$1, filename) {
		name = Buffer.from(name).toString("utf8");
		if (typeof value$1 === "string") value$1 = Buffer.from(value$1).toString("utf8");
		else {
			if (!isFileLike(value$1)) value$1 = value$1 instanceof Blob$3 ? new File$2([value$1], "blob", { type: value$1.type }) : new FileLike(value$1, "blob", { type: value$1.type });
			if (filename !== void 0) {
				/** @type {FilePropertyBag} */
				const options = {
					type: value$1.type,
					lastModified: value$1.lastModified
				};
				value$1 = NativeFile$1 && value$1 instanceof NativeFile$1 || value$1 instanceof UndiciFile$1 ? new File$2([value$1], filename, options) : new FileLike(value$1, filename, options);
			}
		}
		return {
			name,
			value: value$1
		};
	}
	module.exports = { FormData: FormData$3 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/body.js
var require_body = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/body.js"(exports, module) {
	const Busboy = require_main$1();
	const util$16 = require_util$6();
	const { ReadableStreamFrom: ReadableStreamFrom$1, isBlobLike: isBlobLike$3, isReadableStreamLike, readableStreamClose: readableStreamClose$1, createDeferredPromise: createDeferredPromise$2, fullyReadBody: fullyReadBody$1 } = require_util$5();
	const { FormData: FormData$2 } = require_formdata();
	const { kState: kState$7 } = require_symbols$3();
	const { webidl: webidl$11 } = require_webidl();
	const { DOMException: DOMException$5, structuredClone } = require_constants$4();
	const { Blob: Blob$2, File: NativeFile } = __require("buffer");
	const { kBodyUsed: kBodyUsed$1 } = require_symbols$4();
	const assert$16 = __require("assert");
	const { isErrored: isErrored$1 } = require_util$6();
	const { isUint8Array, isArrayBuffer } = __require("util/types");
	const { File: UndiciFile } = require_file();
	const { parseMIMEType: parseMIMEType$1, serializeAMimeType: serializeAMimeType$2 } = require_dataURL();
	let random;
	try {
		const crypto$5 = __require("node:crypto");
		random = (max) => crypto$5.randomInt(0, max);
	} catch {
		random = (max) => Math.floor(Math.random(max));
	}
	let ReadableStream$2 = globalThis.ReadableStream;
	/** @type {globalThis['File']} */
	const File$1 = NativeFile ?? UndiciFile;
	const textEncoder$1 = new TextEncoder();
	const textDecoder = new TextDecoder();
	function extractBody$3(object, keepalive = false) {
		if (!ReadableStream$2) ReadableStream$2 = __require("stream/web").ReadableStream;
		let stream$2 = null;
		if (object instanceof ReadableStream$2) stream$2 = object;
		else if (isBlobLike$3(object)) stream$2 = object.stream();
		else stream$2 = new ReadableStream$2({
			async pull(controller) {
				controller.enqueue(typeof source === "string" ? textEncoder$1.encode(source) : source);
				queueMicrotask(() => readableStreamClose$1(controller));
			},
			start() {},
			type: void 0
		});
		assert$16(isReadableStreamLike(stream$2));
		let action = null;
		let source = null;
		let length = null;
		let type$1 = null;
		if (typeof object === "string") {
			source = object;
			type$1 = "text/plain;charset=UTF-8";
		} else if (object instanceof URLSearchParams) {
			source = object.toString();
			type$1 = "application/x-www-form-urlencoded;charset=UTF-8";
		} else if (isArrayBuffer(object)) source = new Uint8Array(object.slice());
		else if (ArrayBuffer.isView(object)) source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
		else if (util$16.isFormDataLike(object)) {
			const boundary = `----formdata-undici-0${`${random(1e11)}`.padStart(11, "0")}`;
			const prefix = `--${boundary}\r\nContent-Disposition: form-data`;
			/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
			const escape$1 = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
			const normalizeLinefeeds = (value$1) => value$1.replace(/\r?\n|\r/g, "\r\n");
			const blobParts = [];
			const rn = new Uint8Array([13, 10]);
			length = 0;
			let hasUnknownSizeValue = false;
			for (const [name, value$1] of object) if (typeof value$1 === "string") {
				const chunk$1 = textEncoder$1.encode(prefix + `; name="${escape$1(normalizeLinefeeds(name))}"\r\n\r\n${normalizeLinefeeds(value$1)}\r\n`);
				blobParts.push(chunk$1);
				length += chunk$1.byteLength;
			} else {
				const chunk$1 = textEncoder$1.encode(`${prefix}; name="${escape$1(normalizeLinefeeds(name))}"` + (value$1.name ? `; filename="${escape$1(value$1.name)}"` : "") + `\r
Content-Type: ${value$1.type || "application/octet-stream"}\r\n\r\n`);
				blobParts.push(chunk$1, value$1, rn);
				if (typeof value$1.size === "number") length += chunk$1.byteLength + value$1.size + rn.byteLength;
				else hasUnknownSizeValue = true;
			}
			const chunk = textEncoder$1.encode(`--${boundary}--`);
			blobParts.push(chunk);
			length += chunk.byteLength;
			if (hasUnknownSizeValue) length = null;
			source = object;
			action = async function* () {
				for (const part of blobParts) if (part.stream) yield* part.stream();
				else yield part;
			};
			type$1 = "multipart/form-data; boundary=" + boundary;
		} else if (isBlobLike$3(object)) {
			source = object;
			length = object.size;
			if (object.type) type$1 = object.type;
		} else if (typeof object[Symbol.asyncIterator] === "function") {
			if (keepalive) throw new TypeError("keepalive");
			if (util$16.isDisturbed(object) || object.locked) throw new TypeError("Response body object should not be disturbed or locked");
			stream$2 = object instanceof ReadableStream$2 ? object : ReadableStreamFrom$1(object);
		}
		if (typeof source === "string" || util$16.isBuffer(source)) length = Buffer.byteLength(source);
		if (action != null) {
			let iterator;
			stream$2 = new ReadableStream$2({
				async start() {
					iterator = action(object)[Symbol.asyncIterator]();
				},
				async pull(controller) {
					const { value: value$1, done } = await iterator.next();
					if (done) queueMicrotask(() => {
						controller.close();
					});
					else if (!isErrored$1(stream$2)) controller.enqueue(new Uint8Array(value$1));
					return controller.desiredSize > 0;
				},
				async cancel(reason) {
					await iterator.return();
				},
				type: void 0
			});
		}
		const body = {
			stream: stream$2,
			source,
			length
		};
		return [body, type$1];
	}
	function safelyExtractBody$1(object, keepalive = false) {
		if (!ReadableStream$2)
 // istanbul ignore next
		ReadableStream$2 = __require("stream/web").ReadableStream;
		if (object instanceof ReadableStream$2) {
			// istanbul ignore next
			assert$16(!util$16.isDisturbed(object), "The body has already been consumed.");
			// istanbul ignore next
			assert$16(!object.locked, "The stream is locked.");
		}
		return extractBody$3(object, keepalive);
	}
	function cloneBody$2(body) {
		const [out1, out2] = body.stream.tee();
		const out2Clone = structuredClone(out2, { transfer: [out2] });
		const [, finalClone] = out2Clone.tee();
		body.stream = out1;
		return {
			stream: finalClone,
			length: body.length,
			source: body.source
		};
	}
	async function* consumeBody(body) {
		if (body) if (isUint8Array(body)) yield body;
		else {
			const stream$2 = body.stream;
			if (util$16.isDisturbed(stream$2)) throw new TypeError("The body has already been consumed.");
			if (stream$2.locked) throw new TypeError("The stream is locked.");
			stream$2[kBodyUsed$1] = true;
			yield* stream$2;
		}
	}
	function throwIfAborted(state) {
		if (state.aborted) throw new DOMException$5("The operation was aborted.", "AbortError");
	}
	function bodyMixinMethods(instance) {
		const methods = {
			blob() {
				return specConsumeBody(this, (bytes) => {
					let mimeType = bodyMimeType(this);
					if (mimeType === "failure") mimeType = "";
					else if (mimeType) mimeType = serializeAMimeType$2(mimeType);
					return new Blob$2([bytes], { type: mimeType });
				}, instance);
			},
			arrayBuffer() {
				return specConsumeBody(this, (bytes) => {
					return new Uint8Array(bytes).buffer;
				}, instance);
			},
			text() {
				return specConsumeBody(this, utf8DecodeBytes, instance);
			},
			json() {
				return specConsumeBody(this, parseJSONFromBytes, instance);
			},
			async formData() {
				webidl$11.brandCheck(this, instance);
				throwIfAborted(this[kState$7]);
				const contentType = this.headers.get("Content-Type");
				if (/multipart\/form-data/.test(contentType)) {
					const headers = {};
					for (const [key, value$1] of this.headers) headers[key.toLowerCase()] = value$1;
					const responseFormData = new FormData$2();
					let busboy;
					try {
						busboy = new Busboy({
							headers,
							preservePath: true
						});
					} catch (err) {
						throw new DOMException$5(`${err}`, "AbortError");
					}
					busboy.on("field", (name, value$1) => {
						responseFormData.append(name, value$1);
					});
					busboy.on("file", (name, value$1, filename, encoding, mimeType) => {
						const chunks = [];
						if (encoding === "base64" || encoding.toLowerCase() === "base64") {
							let base64chunk = "";
							value$1.on("data", (chunk) => {
								base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
								const end = base64chunk.length - base64chunk.length % 4;
								chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
								base64chunk = base64chunk.slice(end);
							});
							value$1.on("end", () => {
								chunks.push(Buffer.from(base64chunk, "base64"));
								responseFormData.append(name, new File$1(chunks, filename, { type: mimeType }));
							});
						} else {
							value$1.on("data", (chunk) => {
								chunks.push(chunk);
							});
							value$1.on("end", () => {
								responseFormData.append(name, new File$1(chunks, filename, { type: mimeType }));
							});
						}
					});
					const busboyResolve = new Promise((resolve$1, reject) => {
						busboy.on("finish", resolve$1);
						busboy.on("error", (err) => reject(new TypeError(err)));
					});
					if (this.body !== null) for await (const chunk of consumeBody(this[kState$7].body)) busboy.write(chunk);
					busboy.end();
					await busboyResolve;
					return responseFormData;
				} else if (/application\/x-www-form-urlencoded/.test(contentType)) {
					let entries;
					try {
						let text = "";
						const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
						for await (const chunk of consumeBody(this[kState$7].body)) {
							if (!isUint8Array(chunk)) throw new TypeError("Expected Uint8Array chunk");
							text += streamingDecoder.decode(chunk, { stream: true });
						}
						text += streamingDecoder.decode();
						entries = new URLSearchParams(text);
					} catch (err) {
						// istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
						throw Object.assign(new TypeError(), { cause: err });
					}
					const formData = new FormData$2();
					for (const [name, value$1] of entries) formData.append(name, value$1);
					return formData;
				} else {
					await Promise.resolve();
					throwIfAborted(this[kState$7]);
					throw webidl$11.errors.exception({
						header: `${instance.name}.formData`,
						message: "Could not parse content as FormData."
					});
				}
			}
		};
		return methods;
	}
	function mixinBody$2(prototype) {
		Object.assign(prototype.prototype, bodyMixinMethods(prototype));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-consume-body
	* @param {Response|Request} object
	* @param {(value: unknown) => unknown} convertBytesToJSValue
	* @param {Response|Request} instance
	*/
	async function specConsumeBody(object, convertBytesToJSValue, instance) {
		webidl$11.brandCheck(object, instance);
		throwIfAborted(object[kState$7]);
		if (bodyUnusable(object[kState$7].body)) throw new TypeError("Body is unusable");
		const promise = createDeferredPromise$2();
		const errorSteps = (error$1) => promise.reject(error$1);
		const successSteps = (data) => {
			try {
				promise.resolve(convertBytesToJSValue(data));
			} catch (e$1) {
				errorSteps(e$1);
			}
		};
		if (object[kState$7].body == null) {
			successSteps(new Uint8Array());
			return promise.promise;
		}
		await fullyReadBody$1(object[kState$7].body, successSteps, errorSteps);
		return promise.promise;
	}
	function bodyUnusable(body) {
		return body != null && (body.stream.locked || util$16.isDisturbed(body.stream));
	}
	/**
	* @see https://encoding.spec.whatwg.org/#utf-8-decode
	* @param {Buffer} buffer
	*/
	function utf8DecodeBytes(buffer) {
		if (buffer.length === 0) return "";
		if (buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) buffer = buffer.subarray(3);
		const output = textDecoder.decode(buffer);
		return output;
	}
	/**
	* @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
	* @param {Uint8Array} bytes
	*/
	function parseJSONFromBytes(bytes) {
		return JSON.parse(utf8DecodeBytes(bytes));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-mime-type
	* @param {import('./response').Response|import('./request').Request} object
	*/
	function bodyMimeType(object) {
		const { headersList } = object[kState$7];
		const contentType = headersList.get("content-type");
		if (contentType === null) return "failure";
		return parseMIMEType$1(contentType);
	}
	module.exports = {
		extractBody: extractBody$3,
		safelyExtractBody: safelyExtractBody$1,
		cloneBody: cloneBody$2,
		mixinBody: mixinBody$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/request.js
var require_request$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/request.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$20, NotSupportedError: NotSupportedError$1 } = require_errors();
	const assert$15 = __require("assert");
	const { kHTTP2BuildRequest: kHTTP2BuildRequest$1, kHTTP2CopyHeaders: kHTTP2CopyHeaders$1, kHTTP1BuildRequest: kHTTP1BuildRequest$1 } = require_symbols$4();
	const util$15 = require_util$6();
	/**
	* Verifies that the given val is a valid HTTP token
	* per the rules defined in RFC 7230
	* See https://tools.ietf.org/html/rfc7230#section-3.2.6
	*/
	const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
	/**
	* Matches if val contains an invalid field-vchar
	*  field-value    = *( field-content / obs-fold )
	*  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	*  field-vchar    = VCHAR / obs-text
	*/
	const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
	const invalidPathRegex = /[^\u0021-\u00ff]/;
	const kHandler = Symbol("handler");
	const channels$3 = {};
	let extractBody$2;
	try {
		const diagnosticsChannel$2 = __require("diagnostics_channel");
		channels$3.create = diagnosticsChannel$2.channel("undici:request:create");
		channels$3.bodySent = diagnosticsChannel$2.channel("undici:request:bodySent");
		channels$3.headers = diagnosticsChannel$2.channel("undici:request:headers");
		channels$3.trailers = diagnosticsChannel$2.channel("undici:request:trailers");
		channels$3.error = diagnosticsChannel$2.channel("undici:request:error");
	} catch {
		channels$3.create = { hasSubscribers: false };
		channels$3.bodySent = { hasSubscribers: false };
		channels$3.headers = { hasSubscribers: false };
		channels$3.trailers = { hasSubscribers: false };
		channels$3.error = { hasSubscribers: false };
	}
	var Request$4 = class Request$4 {
		constructor(origin, { path: path$9, method, body, headers, query, idempotent, blocking, upgrade: upgrade$1, headersTimeout, bodyTimeout, reset, throwOnError, expectContinue }, handler) {
			if (typeof path$9 !== "string") throw new InvalidArgumentError$20("path must be a string");
			else if (path$9[0] !== "/" && !(path$9.startsWith("http://") || path$9.startsWith("https://")) && method !== "CONNECT") throw new InvalidArgumentError$20("path must be an absolute URL or start with a slash");
			else if (invalidPathRegex.exec(path$9) !== null) throw new InvalidArgumentError$20("invalid request path");
			if (typeof method !== "string") throw new InvalidArgumentError$20("method must be a string");
			else if (tokenRegExp.exec(method) === null) throw new InvalidArgumentError$20("invalid request method");
			if (upgrade$1 && typeof upgrade$1 !== "string") throw new InvalidArgumentError$20("upgrade must be a string");
			if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$20("invalid headersTimeout");
			if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$20("invalid bodyTimeout");
			if (reset != null && typeof reset !== "boolean") throw new InvalidArgumentError$20("invalid reset");
			if (expectContinue != null && typeof expectContinue !== "boolean") throw new InvalidArgumentError$20("invalid expectContinue");
			this.headersTimeout = headersTimeout;
			this.bodyTimeout = bodyTimeout;
			this.throwOnError = throwOnError === true;
			this.method = method;
			this.abort = null;
			if (body == null) this.body = null;
			else if (util$15.isStream(body)) {
				this.body = body;
				const rState = this.body._readableState;
				if (!rState || !rState.autoDestroy) {
					this.endHandler = function autoDestroy() {
						util$15.destroy(this);
					};
					this.body.on("end", this.endHandler);
				}
				this.errorHandler = (err) => {
					if (this.abort) this.abort(err);
					else this.error = err;
				};
				this.body.on("error", this.errorHandler);
			} else if (util$15.isBuffer(body)) this.body = body.byteLength ? body : null;
			else if (ArrayBuffer.isView(body)) this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
			else if (body instanceof ArrayBuffer) this.body = body.byteLength ? Buffer.from(body) : null;
			else if (typeof body === "string") this.body = body.length ? Buffer.from(body) : null;
			else if (util$15.isFormDataLike(body) || util$15.isIterable(body) || util$15.isBlobLike(body)) this.body = body;
			else throw new InvalidArgumentError$20("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
			this.completed = false;
			this.aborted = false;
			this.upgrade = upgrade$1 || null;
			this.path = query ? util$15.buildURL(path$9, query) : path$9;
			this.origin = origin;
			this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
			this.blocking = blocking == null ? false : blocking;
			this.reset = reset == null ? null : reset;
			this.host = null;
			this.contentLength = null;
			this.contentType = null;
			this.headers = "";
			this.expectContinue = expectContinue != null ? expectContinue : false;
			if (Array.isArray(headers)) {
				if (headers.length % 2 !== 0) throw new InvalidArgumentError$20("headers array must be even");
				for (let i = 0; i < headers.length; i += 2) processHeader(this, headers[i], headers[i + 1]);
			} else if (headers && typeof headers === "object") {
				const keys = Object.keys(headers);
				for (let i = 0; i < keys.length; i++) {
					const key = keys[i];
					processHeader(this, key, headers[key]);
				}
			} else if (headers != null) throw new InvalidArgumentError$20("headers must be an object or an array");
			if (util$15.isFormDataLike(this.body)) {
				if (util$15.nodeMajor < 16 || util$15.nodeMajor === 16 && util$15.nodeMinor < 8) throw new InvalidArgumentError$20("Form-Data bodies are only supported in node v16.8 and newer.");
				if (!extractBody$2) extractBody$2 = require_body().extractBody;
				const [bodyStream, contentType] = extractBody$2(body);
				if (this.contentType == null) {
					this.contentType = contentType;
					this.headers += `content-type: ${contentType}\r\n`;
				}
				this.body = bodyStream.stream;
				this.contentLength = bodyStream.length;
			} else if (util$15.isBlobLike(body) && this.contentType == null && body.type) {
				this.contentType = body.type;
				this.headers += `content-type: ${body.type}\r\n`;
			}
			util$15.validateHandler(handler, method, upgrade$1);
			this.servername = util$15.getServerName(this.host);
			this[kHandler] = handler;
			if (channels$3.create.hasSubscribers) channels$3.create.publish({ request: this });
		}
		onBodySent(chunk) {
			if (this[kHandler].onBodySent) try {
				return this[kHandler].onBodySent(chunk);
			} catch (err) {
				this.abort(err);
			}
		}
		onRequestSent() {
			if (channels$3.bodySent.hasSubscribers) channels$3.bodySent.publish({ request: this });
			if (this[kHandler].onRequestSent) try {
				return this[kHandler].onRequestSent();
			} catch (err) {
				this.abort(err);
			}
		}
		onConnect(abort$1) {
			assert$15(!this.aborted);
			assert$15(!this.completed);
			if (this.error) abort$1(this.error);
			else {
				this.abort = abort$1;
				return this[kHandler].onConnect(abort$1);
			}
		}
		onHeaders(statusCode, headers, resume$1, statusText) {
			assert$15(!this.aborted);
			assert$15(!this.completed);
			if (channels$3.headers.hasSubscribers) channels$3.headers.publish({
				request: this,
				response: {
					statusCode,
					headers,
					statusText
				}
			});
			try {
				return this[kHandler].onHeaders(statusCode, headers, resume$1, statusText);
			} catch (err) {
				this.abort(err);
			}
		}
		onData(chunk) {
			assert$15(!this.aborted);
			assert$15(!this.completed);
			try {
				return this[kHandler].onData(chunk);
			} catch (err) {
				this.abort(err);
				return false;
			}
		}
		onUpgrade(statusCode, headers, socket) {
			assert$15(!this.aborted);
			assert$15(!this.completed);
			return this[kHandler].onUpgrade(statusCode, headers, socket);
		}
		onComplete(trailers) {
			this.onFinally();
			assert$15(!this.aborted);
			this.completed = true;
			if (channels$3.trailers.hasSubscribers) channels$3.trailers.publish({
				request: this,
				trailers
			});
			try {
				return this[kHandler].onComplete(trailers);
			} catch (err) {
				this.onError(err);
			}
		}
		onError(error$1) {
			this.onFinally();
			if (channels$3.error.hasSubscribers) channels$3.error.publish({
				request: this,
				error: error$1
			});
			if (this.aborted) return;
			this.aborted = true;
			return this[kHandler].onError(error$1);
		}
		onFinally() {
			if (this.errorHandler) {
				this.body.off("error", this.errorHandler);
				this.errorHandler = null;
			}
			if (this.endHandler) {
				this.body.off("end", this.endHandler);
				this.endHandler = null;
			}
		}
		addHeader(key, value$1) {
			processHeader(this, key, value$1);
			return this;
		}
		static [kHTTP1BuildRequest$1](origin, opts, handler) {
			return new Request$4(origin, opts, handler);
		}
		static [kHTTP2BuildRequest$1](origin, opts, handler) {
			const headers = opts.headers;
			opts = {
				...opts,
				headers: null
			};
			const request$1 = new Request$4(origin, opts, handler);
			request$1.headers = {};
			if (Array.isArray(headers)) {
				if (headers.length % 2 !== 0) throw new InvalidArgumentError$20("headers array must be even");
				for (let i = 0; i < headers.length; i += 2) processHeader(request$1, headers[i], headers[i + 1], true);
			} else if (headers && typeof headers === "object") {
				const keys = Object.keys(headers);
				for (let i = 0; i < keys.length; i++) {
					const key = keys[i];
					processHeader(request$1, key, headers[key], true);
				}
			} else if (headers != null) throw new InvalidArgumentError$20("headers must be an object or an array");
			return request$1;
		}
		static [kHTTP2CopyHeaders$1](raw) {
			const rawHeaders = raw.split("\r\n");
			const headers = {};
			for (const header of rawHeaders) {
				const [key, value$1] = header.split(": ");
				if (value$1 == null || value$1.length === 0) continue;
				if (headers[key]) headers[key] += `,${value$1}`;
				else headers[key] = value$1;
			}
			return headers;
		}
	};
	function processHeaderValue(key, val, skipAppend) {
		if (val && typeof val === "object") throw new InvalidArgumentError$20(`invalid ${key} header`);
		val = val != null ? `${val}` : "";
		if (headerCharRegex.exec(val) !== null) throw new InvalidArgumentError$20(`invalid ${key} header`);
		return skipAppend ? val : `${key}: ${val}\r\n`;
	}
	function processHeader(request$1, key, val, skipAppend = false) {
		if (val && typeof val === "object" && !Array.isArray(val)) throw new InvalidArgumentError$20(`invalid ${key} header`);
		else if (val === void 0) return;
		if (request$1.host === null && key.length === 4 && key.toLowerCase() === "host") {
			if (headerCharRegex.exec(val) !== null) throw new InvalidArgumentError$20(`invalid ${key} header`);
			request$1.host = val;
		} else if (request$1.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
			request$1.contentLength = parseInt(val, 10);
			if (!Number.isFinite(request$1.contentLength)) throw new InvalidArgumentError$20("invalid content-length header");
		} else if (request$1.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
			request$1.contentType = val;
			if (skipAppend) request$1.headers[key] = processHeaderValue(key, val, skipAppend);
			else request$1.headers += processHeaderValue(key, val);
		} else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") throw new InvalidArgumentError$20("invalid transfer-encoding header");
		else if (key.length === 10 && key.toLowerCase() === "connection") {
			const value$1 = typeof val === "string" ? val.toLowerCase() : null;
			if (value$1 !== "close" && value$1 !== "keep-alive") throw new InvalidArgumentError$20("invalid connection header");
			else if (value$1 === "close") request$1.reset = true;
		} else if (key.length === 10 && key.toLowerCase() === "keep-alive") throw new InvalidArgumentError$20("invalid keep-alive header");
		else if (key.length === 7 && key.toLowerCase() === "upgrade") throw new InvalidArgumentError$20("invalid upgrade header");
		else if (key.length === 6 && key.toLowerCase() === "expect") throw new NotSupportedError$1("expect header not supported");
		else if (tokenRegExp.exec(key) === null) throw new InvalidArgumentError$20("invalid header key");
		else if (Array.isArray(val)) for (let i = 0; i < val.length; i++) if (skipAppend) if (request$1.headers[key]) request$1.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`;
		else request$1.headers[key] = processHeaderValue(key, val[i], skipAppend);
		else request$1.headers += processHeaderValue(key, val[i]);
		else if (skipAppend) request$1.headers[key] = processHeaderValue(key, val, skipAppend);
		else request$1.headers += processHeaderValue(key, val);
	}
	module.exports = Request$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/dispatcher.js"(exports, module) {
	const EventEmitter$4 = __require("events");
	var Dispatcher$3 = class extends EventEmitter$4 {
		dispatch() {
			throw new Error("not implemented");
		}
		close() {
			throw new Error("not implemented");
		}
		destroy() {
			throw new Error("not implemented");
		}
	};
	module.exports = Dispatcher$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/dispatcher-base.js"(exports, module) {
	const Dispatcher$2 = require_dispatcher();
	const { ClientDestroyedError: ClientDestroyedError$1, ClientClosedError, InvalidArgumentError: InvalidArgumentError$19 } = require_errors();
	const { kDestroy: kDestroy$4, kClose: kClose$6, kDispatch: kDispatch$3, kInterceptors: kInterceptors$5 } = require_symbols$4();
	const kDestroyed = Symbol("destroyed");
	const kClosed = Symbol("closed");
	const kOnDestroyed = Symbol("onDestroyed");
	const kOnClosed = Symbol("onClosed");
	const kInterceptedDispatch = Symbol("Intercepted Dispatch");
	var DispatcherBase$4 = class extends Dispatcher$2 {
		constructor() {
			super();
			this[kDestroyed] = false;
			this[kOnDestroyed] = null;
			this[kClosed] = false;
			this[kOnClosed] = [];
		}
		get destroyed() {
			return this[kDestroyed];
		}
		get closed() {
			return this[kClosed];
		}
		get interceptors() {
			return this[kInterceptors$5];
		}
		set interceptors(newInterceptors) {
			if (newInterceptors) for (let i = newInterceptors.length - 1; i >= 0; i--) {
				const interceptor = this[kInterceptors$5][i];
				if (typeof interceptor !== "function") throw new InvalidArgumentError$19("interceptor must be an function");
			}
			this[kInterceptors$5] = newInterceptors;
		}
		close(callback) {
			if (callback === void 0) return new Promise((resolve$1, reject) => {
				this.close((err, data) => {
					return err ? reject(err) : resolve$1(data);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$19("invalid callback");
			if (this[kDestroyed]) {
				queueMicrotask(() => callback(new ClientDestroyedError$1(), null));
				return;
			}
			if (this[kClosed]) {
				if (this[kOnClosed]) this[kOnClosed].push(callback);
				else queueMicrotask(() => callback(null, null));
				return;
			}
			this[kClosed] = true;
			this[kOnClosed].push(callback);
			const onClosed = () => {
				const callbacks = this[kOnClosed];
				this[kOnClosed] = null;
				for (let i = 0; i < callbacks.length; i++) callbacks[i](null, null);
			};
			this[kClose$6]().then(() => this.destroy()).then(() => {
				queueMicrotask(onClosed);
			});
		}
		destroy(err, callback) {
			if (typeof err === "function") {
				callback = err;
				err = null;
			}
			if (callback === void 0) return new Promise((resolve$1, reject) => {
				this.destroy(err, (err$1, data) => {
					return err$1 ? reject(err$1) : resolve$1(data);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$19("invalid callback");
			if (this[kDestroyed]) {
				if (this[kOnDestroyed]) this[kOnDestroyed].push(callback);
				else queueMicrotask(() => callback(null, null));
				return;
			}
			if (!err) err = new ClientDestroyedError$1();
			this[kDestroyed] = true;
			this[kOnDestroyed] = this[kOnDestroyed] || [];
			this[kOnDestroyed].push(callback);
			const onDestroyed = () => {
				const callbacks = this[kOnDestroyed];
				this[kOnDestroyed] = null;
				for (let i = 0; i < callbacks.length; i++) callbacks[i](null, null);
			};
			this[kDestroy$4](err).then(() => {
				queueMicrotask(onDestroyed);
			});
		}
		[kInterceptedDispatch](opts, handler) {
			if (!this[kInterceptors$5] || this[kInterceptors$5].length === 0) {
				this[kInterceptedDispatch] = this[kDispatch$3];
				return this[kDispatch$3](opts, handler);
			}
			let dispatch = this[kDispatch$3].bind(this);
			for (let i = this[kInterceptors$5].length - 1; i >= 0; i--) dispatch = this[kInterceptors$5][i](dispatch);
			this[kInterceptedDispatch] = dispatch;
			return dispatch(opts, handler);
		}
		dispatch(opts, handler) {
			if (!handler || typeof handler !== "object") throw new InvalidArgumentError$19("handler must be an object");
			try {
				if (!opts || typeof opts !== "object") throw new InvalidArgumentError$19("opts must be an object.");
				if (this[kDestroyed] || this[kOnDestroyed]) throw new ClientDestroyedError$1();
				if (this[kClosed]) throw new ClientClosedError();
				return this[kInterceptedDispatch](opts, handler);
			} catch (err) {
				if (typeof handler.onError !== "function") throw new InvalidArgumentError$19("invalid onError method");
				handler.onError(err);
				return false;
			}
		}
	};
	module.exports = DispatcherBase$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/connect.js
var require_connect = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/connect.js"(exports, module) {
	const net$1 = __require("net");
	const assert$14 = __require("assert");
	const util$14 = require_util$6();
	const { InvalidArgumentError: InvalidArgumentError$18, ConnectTimeoutError } = require_errors();
	let tls;
	let SessionCache;
	if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) SessionCache = class WeakSessionCache {
		constructor(maxCachedSessions) {
			this._maxCachedSessions = maxCachedSessions;
			this._sessionCache = new Map();
			this._sessionRegistry = new global.FinalizationRegistry((key) => {
				if (this._sessionCache.size < this._maxCachedSessions) return;
				const ref = this._sessionCache.get(key);
				if (ref !== void 0 && ref.deref() === void 0) this._sessionCache.delete(key);
			});
		}
		get(sessionKey) {
			const ref = this._sessionCache.get(sessionKey);
			return ref ? ref.deref() : null;
		}
		set(sessionKey, session) {
			if (this._maxCachedSessions === 0) return;
			this._sessionCache.set(sessionKey, new WeakRef(session));
			this._sessionRegistry.register(session, sessionKey);
		}
	};
	else SessionCache = class SimpleSessionCache {
		constructor(maxCachedSessions) {
			this._maxCachedSessions = maxCachedSessions;
			this._sessionCache = new Map();
		}
		get(sessionKey) {
			return this._sessionCache.get(sessionKey);
		}
		set(sessionKey, session) {
			if (this._maxCachedSessions === 0) return;
			if (this._sessionCache.size >= this._maxCachedSessions) {
				const { value: oldestKey } = this._sessionCache.keys().next();
				this._sessionCache.delete(oldestKey);
			}
			this._sessionCache.set(sessionKey, session);
		}
	};
	function buildConnector$4({ allowH2, maxCachedSessions, socketPath, timeout,...opts }) {
		if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) throw new InvalidArgumentError$18("maxCachedSessions must be a positive integer or zero");
		const options = {
			path: socketPath,
			...opts
		};
		const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
		timeout = timeout == null ? 1e4 : timeout;
		allowH2 = allowH2 != null ? allowH2 : false;
		return function connect$2({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
			let socket;
			if (protocol === "https:") {
				if (!tls) tls = __require("tls");
				servername = servername || options.servername || util$14.getServerName(host) || null;
				const sessionKey = servername || hostname;
				const session = sessionCache.get(sessionKey) || null;
				assert$14(sessionKey);
				socket = tls.connect({
					highWaterMark: 16384,
					...options,
					servername,
					session,
					localAddress,
					ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
					socket: httpSocket,
					port: port || 443,
					host: hostname
				});
				socket.on("session", function(session$1) {
					sessionCache.set(sessionKey, session$1);
				});
			} else {
				assert$14(!httpSocket, "httpSocket can only be sent on TLS update");
				socket = net$1.connect({
					highWaterMark: 64 * 1024,
					...options,
					localAddress,
					port: port || 80,
					host: hostname
				});
			}
			if (options.keepAlive == null || options.keepAlive) {
				const keepAliveInitialDelay = options.keepAliveInitialDelay === void 0 ? 6e4 : options.keepAliveInitialDelay;
				socket.setKeepAlive(true, keepAliveInitialDelay);
			}
			const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);
			socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
				cancelTimeout();
				if (callback) {
					const cb = callback;
					callback = null;
					cb(null, this);
				}
			}).on("error", function(err) {
				cancelTimeout();
				if (callback) {
					const cb = callback;
					callback = null;
					cb(err);
				}
			});
			return socket;
		};
	}
	function setupTimeout(onConnectTimeout$1, timeout) {
		if (!timeout) return () => {};
		let s1 = null;
		let s2 = null;
		const timeoutId = setTimeout(() => {
			s1 = setImmediate(() => {
				if (process.platform === "win32") s2 = setImmediate(() => onConnectTimeout$1());
				else onConnectTimeout$1();
			});
		}, timeout);
		return () => {
			clearTimeout(timeoutId);
			clearImmediate(s1);
			clearImmediate(s2);
		};
	}
	function onConnectTimeout(socket) {
		util$14.destroy(socket, new ConnectTimeoutError());
	}
	module.exports = buildConnector$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/utils.js
var require_utils$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.enumToMap = void 0;
	function enumToMap(obj) {
		const res = {};
		Object.keys(obj).forEach((key) => {
			const value$1 = obj[key];
			if (typeof value$1 === "number") res[key] = value$1;
		});
		return res;
	}
	exports.enumToMap = enumToMap;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/constants.js
var require_constants$3 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/constants.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
	const utils_1$1 = require_utils$1();
	var ERROR;
	(function(ERROR$1) {
		ERROR$1[ERROR$1["OK"] = 0] = "OK";
		ERROR$1[ERROR$1["INTERNAL"] = 1] = "INTERNAL";
		ERROR$1[ERROR$1["STRICT"] = 2] = "STRICT";
		ERROR$1[ERROR$1["LF_EXPECTED"] = 3] = "LF_EXPECTED";
		ERROR$1[ERROR$1["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
		ERROR$1[ERROR$1["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
		ERROR$1[ERROR$1["INVALID_METHOD"] = 6] = "INVALID_METHOD";
		ERROR$1[ERROR$1["INVALID_URL"] = 7] = "INVALID_URL";
		ERROR$1[ERROR$1["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
		ERROR$1[ERROR$1["INVALID_VERSION"] = 9] = "INVALID_VERSION";
		ERROR$1[ERROR$1["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
		ERROR$1[ERROR$1["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
		ERROR$1[ERROR$1["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
		ERROR$1[ERROR$1["INVALID_STATUS"] = 13] = "INVALID_STATUS";
		ERROR$1[ERROR$1["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
		ERROR$1[ERROR$1["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
		ERROR$1[ERROR$1["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
		ERROR$1[ERROR$1["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
		ERROR$1[ERROR$1["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
		ERROR$1[ERROR$1["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
		ERROR$1[ERROR$1["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
		ERROR$1[ERROR$1["PAUSED"] = 21] = "PAUSED";
		ERROR$1[ERROR$1["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
		ERROR$1[ERROR$1["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
		ERROR$1[ERROR$1["USER"] = 24] = "USER";
	})(ERROR = exports.ERROR || (exports.ERROR = {}));
	var TYPE;
	(function(TYPE$1) {
		TYPE$1[TYPE$1["BOTH"] = 0] = "BOTH";
		TYPE$1[TYPE$1["REQUEST"] = 1] = "REQUEST";
		TYPE$1[TYPE$1["RESPONSE"] = 2] = "RESPONSE";
	})(TYPE = exports.TYPE || (exports.TYPE = {}));
	var FLAGS;
	(function(FLAGS$1) {
		FLAGS$1[FLAGS$1["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
		FLAGS$1[FLAGS$1["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
		FLAGS$1[FLAGS$1["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
		FLAGS$1[FLAGS$1["CHUNKED"] = 8] = "CHUNKED";
		FLAGS$1[FLAGS$1["UPGRADE"] = 16] = "UPGRADE";
		FLAGS$1[FLAGS$1["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
		FLAGS$1[FLAGS$1["SKIPBODY"] = 64] = "SKIPBODY";
		FLAGS$1[FLAGS$1["TRAILING"] = 128] = "TRAILING";
		FLAGS$1[FLAGS$1["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
	})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
	var LENIENT_FLAGS;
	(function(LENIENT_FLAGS$1) {
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["HEADERS"] = 1] = "HEADERS";
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
	})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
	var METHODS;
	(function(METHODS$1) {
		METHODS$1[METHODS$1["DELETE"] = 0] = "DELETE";
		METHODS$1[METHODS$1["GET"] = 1] = "GET";
		METHODS$1[METHODS$1["HEAD"] = 2] = "HEAD";
		METHODS$1[METHODS$1["POST"] = 3] = "POST";
		METHODS$1[METHODS$1["PUT"] = 4] = "PUT";
		METHODS$1[METHODS$1["CONNECT"] = 5] = "CONNECT";
		METHODS$1[METHODS$1["OPTIONS"] = 6] = "OPTIONS";
		METHODS$1[METHODS$1["TRACE"] = 7] = "TRACE";
		METHODS$1[METHODS$1["COPY"] = 8] = "COPY";
		METHODS$1[METHODS$1["LOCK"] = 9] = "LOCK";
		METHODS$1[METHODS$1["MKCOL"] = 10] = "MKCOL";
		METHODS$1[METHODS$1["MOVE"] = 11] = "MOVE";
		METHODS$1[METHODS$1["PROPFIND"] = 12] = "PROPFIND";
		METHODS$1[METHODS$1["PROPPATCH"] = 13] = "PROPPATCH";
		METHODS$1[METHODS$1["SEARCH"] = 14] = "SEARCH";
		METHODS$1[METHODS$1["UNLOCK"] = 15] = "UNLOCK";
		METHODS$1[METHODS$1["BIND"] = 16] = "BIND";
		METHODS$1[METHODS$1["REBIND"] = 17] = "REBIND";
		METHODS$1[METHODS$1["UNBIND"] = 18] = "UNBIND";
		METHODS$1[METHODS$1["ACL"] = 19] = "ACL";
		METHODS$1[METHODS$1["REPORT"] = 20] = "REPORT";
		METHODS$1[METHODS$1["MKACTIVITY"] = 21] = "MKACTIVITY";
		METHODS$1[METHODS$1["CHECKOUT"] = 22] = "CHECKOUT";
		METHODS$1[METHODS$1["MERGE"] = 23] = "MERGE";
		METHODS$1[METHODS$1["M-SEARCH"] = 24] = "M-SEARCH";
		METHODS$1[METHODS$1["NOTIFY"] = 25] = "NOTIFY";
		METHODS$1[METHODS$1["SUBSCRIBE"] = 26] = "SUBSCRIBE";
		METHODS$1[METHODS$1["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
		METHODS$1[METHODS$1["PATCH"] = 28] = "PATCH";
		METHODS$1[METHODS$1["PURGE"] = 29] = "PURGE";
		METHODS$1[METHODS$1["MKCALENDAR"] = 30] = "MKCALENDAR";
		METHODS$1[METHODS$1["LINK"] = 31] = "LINK";
		METHODS$1[METHODS$1["UNLINK"] = 32] = "UNLINK";
		METHODS$1[METHODS$1["SOURCE"] = 33] = "SOURCE";
		METHODS$1[METHODS$1["PRI"] = 34] = "PRI";
		METHODS$1[METHODS$1["DESCRIBE"] = 35] = "DESCRIBE";
		METHODS$1[METHODS$1["ANNOUNCE"] = 36] = "ANNOUNCE";
		METHODS$1[METHODS$1["SETUP"] = 37] = "SETUP";
		METHODS$1[METHODS$1["PLAY"] = 38] = "PLAY";
		METHODS$1[METHODS$1["PAUSE"] = 39] = "PAUSE";
		METHODS$1[METHODS$1["TEARDOWN"] = 40] = "TEARDOWN";
		METHODS$1[METHODS$1["GET_PARAMETER"] = 41] = "GET_PARAMETER";
		METHODS$1[METHODS$1["SET_PARAMETER"] = 42] = "SET_PARAMETER";
		METHODS$1[METHODS$1["REDIRECT"] = 43] = "REDIRECT";
		METHODS$1[METHODS$1["RECORD"] = 44] = "RECORD";
		METHODS$1[METHODS$1["FLUSH"] = 45] = "FLUSH";
	})(METHODS = exports.METHODS || (exports.METHODS = {}));
	exports.METHODS_HTTP = [
		METHODS.DELETE,
		METHODS.GET,
		METHODS.HEAD,
		METHODS.POST,
		METHODS.PUT,
		METHODS.CONNECT,
		METHODS.OPTIONS,
		METHODS.TRACE,
		METHODS.COPY,
		METHODS.LOCK,
		METHODS.MKCOL,
		METHODS.MOVE,
		METHODS.PROPFIND,
		METHODS.PROPPATCH,
		METHODS.SEARCH,
		METHODS.UNLOCK,
		METHODS.BIND,
		METHODS.REBIND,
		METHODS.UNBIND,
		METHODS.ACL,
		METHODS.REPORT,
		METHODS.MKACTIVITY,
		METHODS.CHECKOUT,
		METHODS.MERGE,
		METHODS["M-SEARCH"],
		METHODS.NOTIFY,
		METHODS.SUBSCRIBE,
		METHODS.UNSUBSCRIBE,
		METHODS.PATCH,
		METHODS.PURGE,
		METHODS.MKCALENDAR,
		METHODS.LINK,
		METHODS.UNLINK,
		METHODS.PRI,
		METHODS.SOURCE
	];
	exports.METHODS_ICE = [METHODS.SOURCE];
	exports.METHODS_RTSP = [
		METHODS.OPTIONS,
		METHODS.DESCRIBE,
		METHODS.ANNOUNCE,
		METHODS.SETUP,
		METHODS.PLAY,
		METHODS.PAUSE,
		METHODS.TEARDOWN,
		METHODS.GET_PARAMETER,
		METHODS.SET_PARAMETER,
		METHODS.REDIRECT,
		METHODS.RECORD,
		METHODS.FLUSH,
		METHODS.GET,
		METHODS.POST
	];
	exports.METHOD_MAP = utils_1$1.enumToMap(METHODS);
	exports.H_METHOD_MAP = {};
	Object.keys(exports.METHOD_MAP).forEach((key) => {
		if (/^H/.test(key)) exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
	});
	var FINISH;
	(function(FINISH$1) {
		FINISH$1[FINISH$1["SAFE"] = 0] = "SAFE";
		FINISH$1[FINISH$1["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
		FINISH$1[FINISH$1["UNSAFE"] = 2] = "UNSAFE";
	})(FINISH = exports.FINISH || (exports.FINISH = {}));
	exports.ALPHA = [];
	for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
		exports.ALPHA.push(String.fromCharCode(i));
		exports.ALPHA.push(String.fromCharCode(i + 32));
	}
	exports.NUM_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9
	};
	exports.HEX_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9,
		A: 10,
		B: 11,
		C: 12,
		D: 13,
		E: 14,
		F: 15,
		a: 10,
		b: 11,
		c: 12,
		d: 13,
		e: 14,
		f: 15
	};
	exports.NUM = [
		"0",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9"
	];
	exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
	exports.MARK = [
		"-",
		"_",
		".",
		"!",
		"~",
		"*",
		"'",
		"(",
		")"
	];
	exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([
		"%",
		";",
		":",
		"&",
		"=",
		"+",
		"$",
		","
	]);
	exports.STRICT_URL_CHAR = [
		"!",
		"\"",
		"$",
		"%",
		"&",
		"'",
		"(",
		")",
		"*",
		"+",
		",",
		"-",
		".",
		"/",
		":",
		";",
		"<",
		"=",
		">",
		"@",
		"[",
		"\\",
		"]",
		"^",
		"_",
		"`",
		"{",
		"|",
		"}",
		"~"
	].concat(exports.ALPHANUM);
	exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(["	", "\f"]);
	for (let i = 128; i <= 255; i++) exports.URL_CHAR.push(i);
	exports.HEX = exports.NUM.concat([
		"a",
		"b",
		"c",
		"d",
		"e",
		"f",
		"A",
		"B",
		"C",
		"D",
		"E",
		"F"
	]);
	exports.STRICT_TOKEN = [
		"!",
		"#",
		"$",
		"%",
		"&",
		"'",
		"*",
		"+",
		"-",
		".",
		"^",
		"_",
		"`",
		"|",
		"~"
	].concat(exports.ALPHANUM);
	exports.TOKEN = exports.STRICT_TOKEN.concat([" "]);
	exports.HEADER_CHARS = ["	"];
	for (let i = 32; i <= 255; i++) if (i !== 127) exports.HEADER_CHARS.push(i);
	exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
	exports.MAJOR = exports.NUM_MAP;
	exports.MINOR = exports.MAJOR;
	var HEADER_STATE;
	(function(HEADER_STATE$1) {
		HEADER_STATE$1[HEADER_STATE$1["GENERAL"] = 0] = "GENERAL";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION"] = 1] = "CONNECTION";
		HEADER_STATE$1[HEADER_STATE$1["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
		HEADER_STATE$1[HEADER_STATE$1["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
		HEADER_STATE$1[HEADER_STATE$1["UPGRADE"] = 4] = "UPGRADE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
		HEADER_STATE$1[HEADER_STATE$1["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
	})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
	exports.SPECIAL_HEADERS = {
		"connection": HEADER_STATE.CONNECTION,
		"content-length": HEADER_STATE.CONTENT_LENGTH,
		"proxy-connection": HEADER_STATE.CONNECTION,
		"transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
		"upgrade": HEADER_STATE.UPGRADE
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/RedirectHandler.js"(exports, module) {
	const util$13 = require_util$6();
	const { kBodyUsed } = require_symbols$4();
	const assert$13 = __require("assert");
	const { InvalidArgumentError: InvalidArgumentError$17 } = require_errors();
	const EE$1 = __require("events");
	const redirectableStatusCodes = [
		300,
		301,
		302,
		303,
		307,
		308
	];
	const kBody$1 = Symbol("body");
	var BodyAsyncIterable = class {
		constructor(body) {
			this[kBody$1] = body;
			this[kBodyUsed] = false;
		}
		async *[Symbol.asyncIterator]() {
			assert$13(!this[kBodyUsed], "disturbed");
			this[kBodyUsed] = true;
			yield* this[kBody$1];
		}
	};
	var RedirectHandler$2 = class {
		constructor(dispatch, maxRedirections, opts, handler) {
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$17("maxRedirections must be a positive number");
			util$13.validateHandler(handler, opts.method, opts.upgrade);
			this.dispatch = dispatch;
			this.location = null;
			this.abort = null;
			this.opts = {
				...opts,
				maxRedirections: 0
			};
			this.maxRedirections = maxRedirections;
			this.handler = handler;
			this.history = [];
			if (util$13.isStream(this.opts.body)) {
				if (util$13.bodyLength(this.opts.body) === 0) this.opts.body.on("data", function() {
					assert$13(false);
				});
				if (typeof this.opts.body.readableDidRead !== "boolean") {
					this.opts.body[kBodyUsed] = false;
					EE$1.prototype.on.call(this.opts.body, "data", function() {
						this[kBodyUsed] = true;
					});
				}
			} else if (this.opts.body && typeof this.opts.body.pipeTo === "function") this.opts.body = new BodyAsyncIterable(this.opts.body);
			else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util$13.isIterable(this.opts.body)) this.opts.body = new BodyAsyncIterable(this.opts.body);
		}
		onConnect(abort$1) {
			this.abort = abort$1;
			this.handler.onConnect(abort$1, { history: this.history });
		}
		onUpgrade(statusCode, headers, socket) {
			this.handler.onUpgrade(statusCode, headers, socket);
		}
		onError(error$1) {
			this.handler.onError(error$1);
		}
		onHeaders(statusCode, headers, resume$1, statusText) {
			this.location = this.history.length >= this.maxRedirections || util$13.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
			if (this.opts.origin) this.history.push(new URL(this.opts.path, this.opts.origin));
			if (!this.location) return this.handler.onHeaders(statusCode, headers, resume$1, statusText);
			const { origin, pathname, search } = util$13.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
			const path$9 = search ? `${pathname}${search}` : pathname;
			this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
			this.opts.path = path$9;
			this.opts.origin = origin;
			this.opts.maxRedirections = 0;
			this.opts.query = null;
			if (statusCode === 303 && this.opts.method !== "HEAD") {
				this.opts.method = "GET";
				this.opts.body = null;
			}
		}
		onData(chunk) {
			if (this.location) {} else return this.handler.onData(chunk);
		}
		onComplete(trailers) {
			if (this.location) {
				this.location = null;
				this.abort = null;
				this.dispatch(this.opts, this);
			} else this.handler.onComplete(trailers);
		}
		onBodySent(chunk) {
			if (this.handler.onBodySent) this.handler.onBodySent(chunk);
		}
	};
	function parseLocation(statusCode, headers) {
		if (redirectableStatusCodes.indexOf(statusCode) === -1) return null;
		for (let i = 0; i < headers.length; i += 2) if (headers[i].toString().toLowerCase() === "location") return headers[i + 1];
	}
	function shouldRemoveHeader(header, removeContent, unknownOrigin) {
		if (header.length === 4) return util$13.headerNameToString(header) === "host";
		if (removeContent && util$13.headerNameToString(header).startsWith("content-")) return true;
		if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
			const name = util$13.headerNameToString(header);
			return name === "authorization" || name === "cookie" || name === "proxy-authorization";
		}
		return false;
	}
	function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
		const ret = [];
		if (Array.isArray(headers)) {
			for (let i = 0; i < headers.length; i += 2) if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) ret.push(headers[i], headers[i + 1]);
		} else if (headers && typeof headers === "object") {
			for (const key of Object.keys(headers)) if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) ret.push(key, headers[key]);
		} else assert$13(headers == null, "headers must be an object or an array");
		return ret;
	}
	module.exports = RedirectHandler$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/interceptor/redirectInterceptor.js"(exports, module) {
	const RedirectHandler$1 = require_RedirectHandler();
	function createRedirectInterceptor$3({ maxRedirections: defaultMaxRedirections }) {
		return (dispatch) => {
			return function Intercept(opts, handler) {
				const { maxRedirections = defaultMaxRedirections } = opts;
				if (!maxRedirections) return dispatch(opts, handler);
				const redirectHandler = new RedirectHandler$1(dispatch, maxRedirections, opts, handler);
				opts = {
					...opts,
					maxRedirections: 0
				};
				return dispatch(opts, redirectHandler);
			};
		};
	}
	module.exports = createRedirectInterceptor$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports, module) {
	module.exports = "";
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports, module) {
	module.exports = "";
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/client.js
var require_client = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/client.js"(exports, module) {
	const assert$12 = __require("assert");
	const net = __require("net");
	const http$2 = __require("http");
	const { pipeline: pipeline$2 } = __require("stream");
	const util$12 = require_util$6();
	const timers = require_timers();
	const Request$3 = require_request$1();
	const DispatcherBase$3 = require_dispatcher_base();
	const { RequestContentLengthMismatchError, ResponseContentLengthMismatchError, InvalidArgumentError: InvalidArgumentError$16, RequestAbortedError: RequestAbortedError$8, HeadersTimeoutError, HeadersOverflowError, SocketError: SocketError$2, InformationalError, BodyTimeoutError, HTTPParserError, ResponseExceededMaxSizeError, ClientDestroyedError } = require_errors();
	const buildConnector$3 = require_connect();
	const { kUrl: kUrl$3, kReset, kServerName, kClient: kClient$1, kBusy: kBusy$1, kParser, kConnect, kBlocking, kResuming, kRunning: kRunning$3, kPending: kPending$2, kSize: kSize$4, kWriting, kQueue: kQueue$1, kConnected: kConnected$5, kConnecting, kNeedDrain: kNeedDrain$3, kNoRef, kKeepAliveDefaultTimeout, kHostHeader, kPendingIdx, kRunningIdx, kError: kError$2, kPipelining, kSocket, kKeepAliveTimeoutValue, kMaxHeadersSize, kKeepAliveMaxTimeout, kKeepAliveTimeoutThreshold, kHeadersTimeout, kBodyTimeout, kStrictContentLength, kConnector, kMaxRedirections: kMaxRedirections$1, kMaxRequests, kCounter, kClose: kClose$5, kDestroy: kDestroy$3, kDispatch: kDispatch$2, kInterceptors: kInterceptors$4, kLocalAddress, kMaxResponseSize, kHTTPConnVersion, kHost, kHTTP2Session, kHTTP2SessionState, kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols$4();
	/** @type {import('http2')} */
	let http2;
	try {
		http2 = __require("http2");
	} catch {
		http2 = { constants: {} };
	}
	const { constants: { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_SCHEME, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_EXPECT, HTTP2_HEADER_STATUS } } = http2;
	let h2ExperimentalWarned = false;
	const FastBuffer = Buffer[Symbol.species];
	const kClosedResolve$1 = Symbol("kClosedResolve");
	const channels$2 = {};
	try {
		const diagnosticsChannel$2 = __require("diagnostics_channel");
		channels$2.sendHeaders = diagnosticsChannel$2.channel("undici:client:sendHeaders");
		channels$2.beforeConnect = diagnosticsChannel$2.channel("undici:client:beforeConnect");
		channels$2.connectError = diagnosticsChannel$2.channel("undici:client:connectError");
		channels$2.connected = diagnosticsChannel$2.channel("undici:client:connected");
	} catch {
		channels$2.sendHeaders = { hasSubscribers: false };
		channels$2.beforeConnect = { hasSubscribers: false };
		channels$2.connectError = { hasSubscribers: false };
		channels$2.connected = { hasSubscribers: false };
	}
	/**
	* @type {import('../types/client').default}
	*/
	var Client$4 = class extends DispatcherBase$3 {
		/**
		*
		* @param {string|URL} url
		* @param {import('../types/client').Client.Options} options
		*/
		constructor(url, { interceptors, maxHeaderSize, headersTimeout, socketTimeout, requestTimeout, connectTimeout, bodyTimeout, idleTimeout, keepAlive, keepAliveTimeout, maxKeepAliveTimeout, keepAliveMaxTimeout, keepAliveTimeoutThreshold, socketPath, pipelining, tls: tls$2, strictContentLength, maxCachedSessions, maxRedirections, connect: connect$2, maxRequestsPerClient, localAddress, maxResponseSize, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2, maxConcurrentStreams } = {}) {
			super();
			if (keepAlive !== void 0) throw new InvalidArgumentError$16("unsupported keepAlive, use pipelining=0 instead");
			if (socketTimeout !== void 0) throw new InvalidArgumentError$16("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
			if (requestTimeout !== void 0) throw new InvalidArgumentError$16("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
			if (idleTimeout !== void 0) throw new InvalidArgumentError$16("unsupported idleTimeout, use keepAliveTimeout instead");
			if (maxKeepAliveTimeout !== void 0) throw new InvalidArgumentError$16("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
			if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) throw new InvalidArgumentError$16("invalid maxHeaderSize");
			if (socketPath != null && typeof socketPath !== "string") throw new InvalidArgumentError$16("invalid socketPath");
			if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) throw new InvalidArgumentError$16("invalid connectTimeout");
			if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) throw new InvalidArgumentError$16("invalid keepAliveTimeout");
			if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) throw new InvalidArgumentError$16("invalid keepAliveMaxTimeout");
			if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) throw new InvalidArgumentError$16("invalid keepAliveTimeoutThreshold");
			if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$16("headersTimeout must be a positive integer or zero");
			if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$16("bodyTimeout must be a positive integer or zero");
			if (connect$2 != null && typeof connect$2 !== "function" && typeof connect$2 !== "object") throw new InvalidArgumentError$16("connect must be a function or an object");
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$16("maxRedirections must be a positive number");
			if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) throw new InvalidArgumentError$16("maxRequestsPerClient must be a positive number");
			if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) throw new InvalidArgumentError$16("localAddress must be valid string IP address");
			if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) throw new InvalidArgumentError$16("maxResponseSize must be a positive number");
			if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) throw new InvalidArgumentError$16("autoSelectFamilyAttemptTimeout must be a positive number");
			if (allowH2 != null && typeof allowH2 !== "boolean") throw new InvalidArgumentError$16("allowH2 must be a valid boolean value");
			if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) throw new InvalidArgumentError$16("maxConcurrentStreams must be a possitive integer, greater than 0");
			if (typeof connect$2 !== "function") connect$2 = buildConnector$3({
				...tls$2,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...util$12.nodeHasAutoSelectFamily && autoSelectFamily ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : void 0,
				...connect$2
			});
			this[kInterceptors$4] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor$2({ maxRedirections })];
			this[kUrl$3] = util$12.parseOrigin(url);
			this[kConnector] = connect$2;
			this[kSocket] = null;
			this[kPipelining] = pipelining != null ? pipelining : 1;
			this[kMaxHeadersSize] = maxHeaderSize || http$2.maxHeaderSize;
			this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
			this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
			this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
			this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
			this[kServerName] = null;
			this[kLocalAddress] = localAddress != null ? localAddress : null;
			this[kResuming] = 0;
			this[kNeedDrain$3] = 0;
			this[kHostHeader] = `host: ${this[kUrl$3].hostname}${this[kUrl$3].port ? `:${this[kUrl$3].port}` : ""}\r\n`;
			this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
			this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
			this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
			this[kMaxRedirections$1] = maxRedirections;
			this[kMaxRequests] = maxRequestsPerClient;
			this[kClosedResolve$1] = null;
			this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
			this[kHTTPConnVersion] = "h1";
			this[kHTTP2Session] = null;
			this[kHTTP2SessionState] = !allowH2 ? null : {
				openStreams: 0,
				maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
			};
			this[kHost] = `${this[kUrl$3].hostname}${this[kUrl$3].port ? `:${this[kUrl$3].port}` : ""}`;
			this[kQueue$1] = [];
			this[kRunningIdx] = 0;
			this[kPendingIdx] = 0;
		}
		get pipelining() {
			return this[kPipelining];
		}
		set pipelining(value$1) {
			this[kPipelining] = value$1;
			resume(this, true);
		}
		get [kPending$2]() {
			return this[kQueue$1].length - this[kPendingIdx];
		}
		get [kRunning$3]() {
			return this[kPendingIdx] - this[kRunningIdx];
		}
		get [kSize$4]() {
			return this[kQueue$1].length - this[kRunningIdx];
		}
		get [kConnected$5]() {
			return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
		}
		get [kBusy$1]() {
			const socket = this[kSocket];
			return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize$4] >= (this[kPipelining] || 1) || this[kPending$2] > 0;
		}
		/* istanbul ignore: only used for test */
		[kConnect](cb) {
			connect$1(this);
			this.once("connect", cb);
		}
		[kDispatch$2](opts, handler) {
			const origin = opts.origin || this[kUrl$3].origin;
			const request$1 = this[kHTTPConnVersion] === "h2" ? Request$3[kHTTP2BuildRequest](origin, opts, handler) : Request$3[kHTTP1BuildRequest](origin, opts, handler);
			this[kQueue$1].push(request$1);
			if (this[kResuming]) {} else if (util$12.bodyLength(request$1.body) == null && util$12.isIterable(request$1.body)) {
				this[kResuming] = 1;
				process.nextTick(resume, this);
			} else resume(this, true);
			if (this[kResuming] && this[kNeedDrain$3] !== 2 && this[kBusy$1]) this[kNeedDrain$3] = 2;
			return this[kNeedDrain$3] < 2;
		}
		async [kClose$5]() {
			return new Promise((resolve$1) => {
				if (!this[kSize$4]) resolve$1(null);
				else this[kClosedResolve$1] = resolve$1;
			});
		}
		async [kDestroy$3](err) {
			return new Promise((resolve$1) => {
				const requests = this[kQueue$1].splice(this[kPendingIdx]);
				for (let i = 0; i < requests.length; i++) {
					const request$1 = requests[i];
					errorRequest(this, request$1, err);
				}
				const callback = () => {
					if (this[kClosedResolve$1]) {
						this[kClosedResolve$1]();
						this[kClosedResolve$1] = null;
					}
					resolve$1();
				};
				if (this[kHTTP2Session] != null) {
					util$12.destroy(this[kHTTP2Session], err);
					this[kHTTP2Session] = null;
					this[kHTTP2SessionState] = null;
				}
				if (!this[kSocket]) queueMicrotask(callback);
				else util$12.destroy(this[kSocket].on("close", callback), err);
				resume(this);
			});
		}
	};
	function onHttp2SessionError(err) {
		assert$12(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		this[kSocket][kError$2] = err;
		onError(this[kClient$1], err);
	}
	function onHttp2FrameError(type$1, code, id) {
		const err = new InformationalError(`HTTP/2: "frameError" received - type ${type$1}, code ${code}`);
		if (id === 0) {
			this[kSocket][kError$2] = err;
			onError(this[kClient$1], err);
		}
	}
	function onHttp2SessionEnd() {
		util$12.destroy(this, new SocketError$2("other side closed"));
		util$12.destroy(this[kSocket], new SocketError$2("other side closed"));
	}
	function onHTTP2GoAway(code) {
		const client = this[kClient$1];
		const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
		client[kSocket] = null;
		client[kHTTP2Session] = null;
		if (client.destroyed) {
			assert$12(this[kPending$2] === 0);
			const requests = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i = 0; i < requests.length; i++) {
				const request$1 = requests[i];
				errorRequest(this, request$1, err);
			}
		} else if (client[kRunning$3] > 0) {
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			client[kQueue$1][client[kRunningIdx]++] = null;
			errorRequest(client, request$1, err);
		}
		client[kPendingIdx] = client[kRunningIdx];
		assert$12(client[kRunning$3] === 0);
		client.emit("disconnect", client[kUrl$3], [client], err);
		resume(client);
	}
	const constants$2 = require_constants$3();
	const createRedirectInterceptor$2 = require_redirectInterceptor();
	const EMPTY_BUF = Buffer.alloc(0);
	async function lazyllhttp() {
		const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;
		let mod;
		try {
			mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
		} catch (e$1) {
			/* istanbul ignore next */
			mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
		}
		return await WebAssembly.instantiate(mod, { env: {
			wasm_on_url: (p$1, at, len) => {
				/* istanbul ignore next */
				return 0;
			},
			wasm_on_status: (p$1, at, len) => {
				assert$12.strictEqual(currentParser.ptr, p$1);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_message_begin: (p$1) => {
				assert$12.strictEqual(currentParser.ptr, p$1);
				return currentParser.onMessageBegin() || 0;
			},
			wasm_on_header_field: (p$1, at, len) => {
				assert$12.strictEqual(currentParser.ptr, p$1);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_header_value: (p$1, at, len) => {
				assert$12.strictEqual(currentParser.ptr, p$1);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_headers_complete: (p$1, statusCode, upgrade$1, shouldKeepAlive) => {
				assert$12.strictEqual(currentParser.ptr, p$1);
				return currentParser.onHeadersComplete(statusCode, Boolean(upgrade$1), Boolean(shouldKeepAlive)) || 0;
			},
			wasm_on_body: (p$1, at, len) => {
				assert$12.strictEqual(currentParser.ptr, p$1);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_message_complete: (p$1) => {
				assert$12.strictEqual(currentParser.ptr, p$1);
				return currentParser.onMessageComplete() || 0;
			}
		} });
	}
	let llhttpInstance = null;
	let llhttpPromise = lazyllhttp();
	llhttpPromise.catch();
	let currentParser = null;
	let currentBufferRef = null;
	let currentBufferSize = 0;
	let currentBufferPtr = null;
	const TIMEOUT_HEADERS = 1;
	const TIMEOUT_BODY = 2;
	const TIMEOUT_IDLE = 3;
	var Parser = class {
		constructor(client, socket, { exports: exports$1 }) {
			assert$12(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
			this.llhttp = exports$1;
			this.ptr = this.llhttp.llhttp_alloc(constants$2.TYPE.RESPONSE);
			this.client = client;
			this.socket = socket;
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.statusCode = null;
			this.statusText = "";
			this.upgrade = false;
			this.headers = [];
			this.headersSize = 0;
			this.headersMaxSize = client[kMaxHeadersSize];
			this.shouldKeepAlive = false;
			this.paused = false;
			this.resume = this.resume.bind(this);
			this.bytesRead = 0;
			this.keepAlive = "";
			this.contentLength = "";
			this.connection = "";
			this.maxResponseSize = client[kMaxResponseSize];
		}
		setTimeout(value$1, type$1) {
			this.timeoutType = type$1;
			if (value$1 !== this.timeoutValue) {
				timers.clearTimeout(this.timeout);
				if (value$1) {
					this.timeout = timers.setTimeout(onParserTimeout, value$1, this);
					// istanbul ignore else: only for jest
					if (this.timeout.unref) this.timeout.unref();
				} else this.timeout = null;
				this.timeoutValue = value$1;
			} else if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
		}
		resume() {
			if (this.socket.destroyed || !this.paused) return;
			assert$12(this.ptr != null);
			assert$12(currentParser == null);
			this.llhttp.llhttp_resume(this.ptr);
			assert$12(this.timeoutType === TIMEOUT_BODY);
			if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			this.paused = false;
			this.execute(this.socket.read() || EMPTY_BUF);
			this.readMore();
		}
		readMore() {
			while (!this.paused && this.ptr) {
				const chunk = this.socket.read();
				if (chunk === null) break;
				this.execute(chunk);
			}
		}
		execute(data) {
			assert$12(this.ptr != null);
			assert$12(currentParser == null);
			assert$12(!this.paused);
			const { socket, llhttp } = this;
			if (data.length > currentBufferSize) {
				if (currentBufferPtr) llhttp.free(currentBufferPtr);
				currentBufferSize = Math.ceil(data.length / 4096) * 4096;
				currentBufferPtr = llhttp.malloc(currentBufferSize);
			}
			new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
			try {
				let ret;
				try {
					currentBufferRef = data;
					currentParser = this;
					ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
				} catch (err) {
					/* istanbul ignore next: difficult to make a test case for */
					throw err;
				} finally {
					currentParser = null;
					currentBufferRef = null;
				}
				const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
				if (ret === constants$2.ERROR.PAUSED_UPGRADE) this.onUpgrade(data.slice(offset));
				else if (ret === constants$2.ERROR.PAUSED) {
					this.paused = true;
					socket.unshift(data.slice(offset));
				} else if (ret !== constants$2.ERROR.OK) {
					const ptr = llhttp.llhttp_get_error_reason(this.ptr);
					let message = "";
					/* istanbul ignore else: difficult to make a test case for */
					if (ptr) {
						const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
						message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
					}
					throw new HTTPParserError(message, constants$2.ERROR[ret], data.slice(offset));
				}
			} catch (err) {
				util$12.destroy(socket, err);
			}
		}
		destroy() {
			assert$12(this.ptr != null);
			assert$12(currentParser == null);
			this.llhttp.llhttp_free(this.ptr);
			this.ptr = null;
			timers.clearTimeout(this.timeout);
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.paused = false;
		}
		onStatus(buf) {
			this.statusText = buf.toString();
		}
		onMessageBegin() {
			const { socket, client } = this;
			/* istanbul ignore next: difficult to make a test case for */
			if (socket.destroyed) return -1;
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			if (!request$1) return -1;
		}
		onHeaderField(buf) {
			const len = this.headers.length;
			if ((len & 1) === 0) this.headers.push(buf);
			else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			this.trackHeader(buf.length);
		}
		onHeaderValue(buf) {
			let len = this.headers.length;
			if ((len & 1) === 1) {
				this.headers.push(buf);
				len += 1;
			} else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			const key = this.headers[len - 2];
			if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") this.keepAlive += buf.toString();
			else if (key.length === 10 && key.toString().toLowerCase() === "connection") this.connection += buf.toString();
			else if (key.length === 14 && key.toString().toLowerCase() === "content-length") this.contentLength += buf.toString();
			this.trackHeader(buf.length);
		}
		trackHeader(len) {
			this.headersSize += len;
			if (this.headersSize >= this.headersMaxSize) util$12.destroy(this.socket, new HeadersOverflowError());
		}
		onUpgrade(head) {
			const { upgrade: upgrade$1, client, socket, headers, statusCode } = this;
			assert$12(upgrade$1);
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			assert$12(request$1);
			assert$12(!socket.destroyed);
			assert$12(socket === client[kSocket]);
			assert$12(!this.paused);
			assert$12(request$1.upgrade || request$1.method === "CONNECT");
			this.statusCode = null;
			this.statusText = "";
			this.shouldKeepAlive = null;
			assert$12(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			socket.unshift(head);
			socket[kParser].destroy();
			socket[kParser] = null;
			socket[kClient$1] = null;
			socket[kError$2] = null;
			socket.removeListener("error", onSocketError$1).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose$1);
			client[kSocket] = null;
			client[kQueue$1][client[kRunningIdx]++] = null;
			client.emit("disconnect", client[kUrl$3], [client], new InformationalError("upgrade"));
			try {
				request$1.onUpgrade(statusCode, headers, socket);
			} catch (err) {
				util$12.destroy(socket, err);
			}
			resume(client);
		}
		onHeadersComplete(statusCode, upgrade$1, shouldKeepAlive) {
			const { client, socket, headers, statusText } = this;
			/* istanbul ignore next: difficult to make a test case for */
			if (socket.destroyed) return -1;
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			/* istanbul ignore next: difficult to make a test case for */
			if (!request$1) return -1;
			assert$12(!this.upgrade);
			assert$12(this.statusCode < 200);
			if (statusCode === 100) {
				util$12.destroy(socket, new SocketError$2("bad response", util$12.getSocketInfo(socket)));
				return -1;
			}
			if (upgrade$1 && !request$1.upgrade) {
				util$12.destroy(socket, new SocketError$2("bad upgrade", util$12.getSocketInfo(socket)));
				return -1;
			}
			assert$12.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
			this.statusCode = statusCode;
			this.shouldKeepAlive = shouldKeepAlive || request$1.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
			if (this.statusCode >= 200) {
				const bodyTimeout = request$1.bodyTimeout != null ? request$1.bodyTimeout : client[kBodyTimeout];
				this.setTimeout(bodyTimeout, TIMEOUT_BODY);
			} else if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			if (request$1.method === "CONNECT") {
				assert$12(client[kRunning$3] === 1);
				this.upgrade = true;
				return 2;
			}
			if (upgrade$1) {
				assert$12(client[kRunning$3] === 1);
				this.upgrade = true;
				return 2;
			}
			assert$12(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			if (this.shouldKeepAlive && client[kPipelining]) {
				const keepAliveTimeout = this.keepAlive ? util$12.parseKeepAliveTimeout(this.keepAlive) : null;
				if (keepAliveTimeout != null) {
					const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
					if (timeout <= 0) socket[kReset] = true;
					else client[kKeepAliveTimeoutValue] = timeout;
				} else client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
			} else socket[kReset] = true;
			const pause = request$1.onHeaders(statusCode, headers, this.resume, statusText) === false;
			if (request$1.aborted) return -1;
			if (request$1.method === "HEAD") return 1;
			if (statusCode < 200) return 1;
			if (socket[kBlocking]) {
				socket[kBlocking] = false;
				resume(client);
			}
			return pause ? constants$2.ERROR.PAUSED : 0;
		}
		onBody(buf) {
			const { client, socket, statusCode, maxResponseSize } = this;
			if (socket.destroyed) return -1;
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			assert$12(request$1);
			assert$12.strictEqual(this.timeoutType, TIMEOUT_BODY);
			if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			assert$12(statusCode >= 200);
			if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
				util$12.destroy(socket, new ResponseExceededMaxSizeError());
				return -1;
			}
			this.bytesRead += buf.length;
			if (request$1.onData(buf) === false) return constants$2.ERROR.PAUSED;
		}
		onMessageComplete() {
			const { client, socket, statusCode, upgrade: upgrade$1, headers, contentLength, bytesRead, shouldKeepAlive } = this;
			if (socket.destroyed && (!statusCode || shouldKeepAlive)) return -1;
			if (upgrade$1) return;
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			assert$12(request$1);
			assert$12(statusCode >= 100);
			this.statusCode = null;
			this.statusText = "";
			this.bytesRead = 0;
			this.contentLength = "";
			this.keepAlive = "";
			this.connection = "";
			assert$12(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			if (statusCode < 200) return;
			/* istanbul ignore next: should be handled by llhttp? */
			if (request$1.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
				util$12.destroy(socket, new ResponseContentLengthMismatchError());
				return -1;
			}
			request$1.onComplete(headers);
			client[kQueue$1][client[kRunningIdx]++] = null;
			if (socket[kWriting]) {
				assert$12.strictEqual(client[kRunning$3], 0);
				util$12.destroy(socket, new InformationalError("reset"));
				return constants$2.ERROR.PAUSED;
			} else if (!shouldKeepAlive) {
				util$12.destroy(socket, new InformationalError("reset"));
				return constants$2.ERROR.PAUSED;
			} else if (socket[kReset] && client[kRunning$3] === 0) {
				util$12.destroy(socket, new InformationalError("reset"));
				return constants$2.ERROR.PAUSED;
			} else if (client[kPipelining] === 1) setImmediate(resume, client);
			else resume(client);
		}
	};
	function onParserTimeout(parser) {
		const { socket, timeoutType, client } = parser;
		/* istanbul ignore else */
		if (timeoutType === TIMEOUT_HEADERS) {
			if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning$3] > 1) {
				assert$12(!parser.paused, "cannot be paused while waiting for headers");
				util$12.destroy(socket, new HeadersTimeoutError());
			}
		} else if (timeoutType === TIMEOUT_BODY) {
			if (!parser.paused) util$12.destroy(socket, new BodyTimeoutError());
		} else if (timeoutType === TIMEOUT_IDLE) {
			assert$12(client[kRunning$3] === 0 && client[kKeepAliveTimeoutValue]);
			util$12.destroy(socket, new InformationalError("socket idle timeout"));
		}
	}
	function onSocketReadable() {
		const { [kParser]: parser } = this;
		if (parser) parser.readMore();
	}
	function onSocketError$1(err) {
		const { [kClient$1]: client, [kParser]: parser } = this;
		assert$12(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		if (client[kHTTPConnVersion] !== "h2") {
			if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
				parser.onMessageComplete();
				return;
			}
		}
		this[kError$2] = err;
		onError(this[kClient$1], err);
	}
	function onError(client, err) {
		if (client[kRunning$3] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
			assert$12(client[kPendingIdx] === client[kRunningIdx]);
			const requests = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i = 0; i < requests.length; i++) {
				const request$1 = requests[i];
				errorRequest(client, request$1, err);
			}
			assert$12(client[kSize$4] === 0);
		}
	}
	function onSocketEnd() {
		const { [kParser]: parser, [kClient$1]: client } = this;
		if (client[kHTTPConnVersion] !== "h2") {
			if (parser.statusCode && !parser.shouldKeepAlive) {
				parser.onMessageComplete();
				return;
			}
		}
		util$12.destroy(this, new SocketError$2("other side closed", util$12.getSocketInfo(this)));
	}
	function onSocketClose$1() {
		const { [kClient$1]: client, [kParser]: parser } = this;
		if (client[kHTTPConnVersion] === "h1" && parser) {
			if (!this[kError$2] && parser.statusCode && !parser.shouldKeepAlive) parser.onMessageComplete();
			this[kParser].destroy();
			this[kParser] = null;
		}
		const err = this[kError$2] || new SocketError$2("closed", util$12.getSocketInfo(this));
		client[kSocket] = null;
		if (client.destroyed) {
			assert$12(client[kPending$2] === 0);
			const requests = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i = 0; i < requests.length; i++) {
				const request$1 = requests[i];
				errorRequest(client, request$1, err);
			}
		} else if (client[kRunning$3] > 0 && err.code !== "UND_ERR_INFO") {
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			client[kQueue$1][client[kRunningIdx]++] = null;
			errorRequest(client, request$1, err);
		}
		client[kPendingIdx] = client[kRunningIdx];
		assert$12(client[kRunning$3] === 0);
		client.emit("disconnect", client[kUrl$3], [client], err);
		resume(client);
	}
	async function connect$1(client) {
		assert$12(!client[kConnecting]);
		assert$12(!client[kSocket]);
		let { host, hostname, protocol, port } = client[kUrl$3];
		if (hostname[0] === "[") {
			const idx = hostname.indexOf("]");
			assert$12(idx !== -1);
			const ip = hostname.substring(1, idx);
			assert$12(net.isIP(ip));
			hostname = ip;
		}
		client[kConnecting] = true;
		if (channels$2.beforeConnect.hasSubscribers) channels$2.beforeConnect.publish({
			connectParams: {
				host,
				hostname,
				protocol,
				port,
				servername: client[kServerName],
				localAddress: client[kLocalAddress]
			},
			connector: client[kConnector]
		});
		try {
			const socket = await new Promise((resolve$1, reject) => {
				client[kConnector]({
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				}, (err, socket$1) => {
					if (err) reject(err);
					else resolve$1(socket$1);
				});
			});
			if (client.destroyed) {
				util$12.destroy(socket.on("error", () => {}), new ClientDestroyedError());
				return;
			}
			client[kConnecting] = false;
			assert$12(socket);
			const isH2 = socket.alpnProtocol === "h2";
			if (isH2) {
				if (!h2ExperimentalWarned) {
					h2ExperimentalWarned = true;
					process.emitWarning("H2 support is experimental, expect them to change at any time.", { code: "UNDICI-H2" });
				}
				const session = http2.connect(client[kUrl$3], {
					createConnection: () => socket,
					peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
				});
				client[kHTTPConnVersion] = "h2";
				session[kClient$1] = client;
				session[kSocket] = socket;
				session.on("error", onHttp2SessionError);
				session.on("frameError", onHttp2FrameError);
				session.on("end", onHttp2SessionEnd);
				session.on("goaway", onHTTP2GoAway);
				session.on("close", onSocketClose$1);
				session.unref();
				client[kHTTP2Session] = session;
				socket[kHTTP2Session] = session;
			} else {
				if (!llhttpInstance) {
					llhttpInstance = await llhttpPromise;
					llhttpPromise = null;
				}
				socket[kNoRef] = false;
				socket[kWriting] = false;
				socket[kReset] = false;
				socket[kBlocking] = false;
				socket[kParser] = new Parser(client, socket, llhttpInstance);
			}
			socket[kCounter] = 0;
			socket[kMaxRequests] = client[kMaxRequests];
			socket[kClient$1] = client;
			socket[kError$2] = null;
			socket.on("error", onSocketError$1).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose$1);
			client[kSocket] = socket;
			if (channels$2.connected.hasSubscribers) channels$2.connected.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				},
				connector: client[kConnector],
				socket
			});
			client.emit("connect", client[kUrl$3], [client]);
		} catch (err) {
			if (client.destroyed) return;
			client[kConnecting] = false;
			if (channels$2.connectError.hasSubscribers) channels$2.connectError.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				},
				connector: client[kConnector],
				error: err
			});
			if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
				assert$12(client[kRunning$3] === 0);
				while (client[kPending$2] > 0 && client[kQueue$1][client[kPendingIdx]].servername === client[kServerName]) {
					const request$1 = client[kQueue$1][client[kPendingIdx]++];
					errorRequest(client, request$1, err);
				}
			} else onError(client, err);
			client.emit("connectionError", client[kUrl$3], [client], err);
		}
		resume(client);
	}
	function emitDrain(client) {
		client[kNeedDrain$3] = 0;
		client.emit("drain", client[kUrl$3], [client]);
	}
	function resume(client, sync) {
		if (client[kResuming] === 2) return;
		client[kResuming] = 2;
		_resume(client, sync);
		client[kResuming] = 0;
		if (client[kRunningIdx] > 256) {
			client[kQueue$1].splice(0, client[kRunningIdx]);
			client[kPendingIdx] -= client[kRunningIdx];
			client[kRunningIdx] = 0;
		}
	}
	function _resume(client, sync) {
		while (true) {
			if (client.destroyed) {
				assert$12(client[kPending$2] === 0);
				return;
			}
			if (client[kClosedResolve$1] && !client[kSize$4]) {
				client[kClosedResolve$1]();
				client[kClosedResolve$1] = null;
				return;
			}
			const socket = client[kSocket];
			if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
				if (client[kSize$4] === 0) {
					if (!socket[kNoRef] && socket.unref) {
						socket.unref();
						socket[kNoRef] = true;
					}
				} else if (socket[kNoRef] && socket.ref) {
					socket.ref();
					socket[kNoRef] = false;
				}
				if (client[kSize$4] === 0) {
					if (socket[kParser].timeoutType !== TIMEOUT_IDLE) socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
				} else if (client[kRunning$3] > 0 && socket[kParser].statusCode < 200) {
					if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
						const request$2 = client[kQueue$1][client[kRunningIdx]];
						const headersTimeout = request$2.headersTimeout != null ? request$2.headersTimeout : client[kHeadersTimeout];
						socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
					}
				}
			}
			if (client[kBusy$1]) client[kNeedDrain$3] = 2;
			else if (client[kNeedDrain$3] === 2) {
				if (sync) {
					client[kNeedDrain$3] = 1;
					process.nextTick(emitDrain, client);
				} else emitDrain(client);
				continue;
			}
			if (client[kPending$2] === 0) return;
			if (client[kRunning$3] >= (client[kPipelining] || 1)) return;
			const request$1 = client[kQueue$1][client[kPendingIdx]];
			if (client[kUrl$3].protocol === "https:" && client[kServerName] !== request$1.servername) {
				if (client[kRunning$3] > 0) return;
				client[kServerName] = request$1.servername;
				if (socket && socket.servername !== request$1.servername) {
					util$12.destroy(socket, new InformationalError("servername changed"));
					return;
				}
			}
			if (client[kConnecting]) return;
			if (!socket && !client[kHTTP2Session]) {
				connect$1(client);
				return;
			}
			if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) return;
			if (client[kRunning$3] > 0 && !request$1.idempotent) return;
			if (client[kRunning$3] > 0 && (request$1.upgrade || request$1.method === "CONNECT")) return;
			if (client[kRunning$3] > 0 && util$12.bodyLength(request$1.body) !== 0 && (util$12.isStream(request$1.body) || util$12.isAsyncIterable(request$1.body))) return;
			if (!request$1.aborted && write(client, request$1)) client[kPendingIdx]++;
			else client[kQueue$1].splice(client[kPendingIdx], 1);
		}
	}
	function shouldSendContentLength(method) {
		return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
	}
	function write(client, request$1) {
		if (client[kHTTPConnVersion] === "h2") {
			writeH2(client, client[kHTTP2Session], request$1);
			return;
		}
		const { body, method, path: path$9, host, upgrade: upgrade$1, headers, blocking, reset } = request$1;
		const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
		if (body && typeof body.read === "function") body.read(0);
		const bodyLength$1 = util$12.bodyLength(body);
		let contentLength = bodyLength$1;
		if (contentLength === null) contentLength = request$1.contentLength;
		if (contentLength === 0 && !expectsPayload) contentLength = null;
		if (shouldSendContentLength(method) && contentLength > 0 && request$1.contentLength !== null && request$1.contentLength !== contentLength) {
			if (client[kStrictContentLength]) {
				errorRequest(client, request$1, new RequestContentLengthMismatchError());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError());
		}
		const socket = client[kSocket];
		try {
			request$1.onConnect((err) => {
				if (request$1.aborted || request$1.completed) return;
				errorRequest(client, request$1, err || new RequestAbortedError$8());
				util$12.destroy(socket, new InformationalError("aborted"));
			});
		} catch (err) {
			errorRequest(client, request$1, err);
		}
		if (request$1.aborted) return false;
		if (method === "HEAD") socket[kReset] = true;
		if (upgrade$1 || method === "CONNECT") socket[kReset] = true;
		if (reset != null) socket[kReset] = reset;
		if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) socket[kReset] = true;
		if (blocking) socket[kBlocking] = true;
		let header = `${method} ${path$9} HTTP/1.1\r\n`;
		if (typeof host === "string") header += `host: ${host}\r\n`;
		else header += client[kHostHeader];
		if (upgrade$1) header += `connection: upgrade\r\nupgrade: ${upgrade$1}\r\n`;
		else if (client[kPipelining] && !socket[kReset]) header += "connection: keep-alive\r\n";
		else header += "connection: close\r\n";
		if (headers) header += headers;
		if (channels$2.sendHeaders.hasSubscribers) channels$2.sendHeaders.publish({
			request: request$1,
			headers: header,
			socket
		});
		/* istanbul ignore else: assertion */
		if (!body || bodyLength$1 === 0) {
			if (contentLength === 0) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
			else {
				assert$12(contentLength === null, "no body must not have content length");
				socket.write(`${header}\r\n`, "latin1");
			}
			request$1.onRequestSent();
		} else if (util$12.isBuffer(body)) {
			assert$12(contentLength === body.byteLength, "buffer body must have content length");
			socket.cork();
			socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			socket.write(body);
			socket.uncork();
			request$1.onBodySent(body);
			request$1.onRequestSent();
			if (!expectsPayload) socket[kReset] = true;
		} else if (util$12.isBlobLike(body)) if (typeof body.stream === "function") writeIterable({
			body: body.stream(),
			client,
			request: request$1,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else writeBlob({
			body,
			client,
			request: request$1,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else if (util$12.isStream(body)) writeStream({
			body,
			client,
			request: request$1,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else if (util$12.isIterable(body)) writeIterable({
			body,
			client,
			request: request$1,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else assert$12(false);
		return true;
	}
	function writeH2(client, session, request$1) {
		const { body, method, path: path$9, host, upgrade: upgrade$1, expectContinue, signal, headers: reqHeaders } = request$1;
		let headers;
		if (typeof reqHeaders === "string") headers = Request$3[kHTTP2CopyHeaders](reqHeaders.trim());
		else headers = reqHeaders;
		if (upgrade$1) {
			errorRequest(client, request$1, new Error("Upgrade not supported for H2"));
			return false;
		}
		try {
			request$1.onConnect((err) => {
				if (request$1.aborted || request$1.completed) return;
				errorRequest(client, request$1, err || new RequestAbortedError$8());
			});
		} catch (err) {
			errorRequest(client, request$1, err);
		}
		if (request$1.aborted) return false;
		/** @type {import('node:http2').ClientHttp2Stream} */
		let stream$2;
		const h2State = client[kHTTP2SessionState];
		headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
		headers[HTTP2_HEADER_METHOD] = method;
		if (method === "CONNECT") {
			session.ref();
			stream$2 = session.request(headers, {
				endStream: false,
				signal
			});
			if (stream$2.id && !stream$2.pending) {
				request$1.onUpgrade(null, null, stream$2);
				++h2State.openStreams;
			} else stream$2.once("ready", () => {
				request$1.onUpgrade(null, null, stream$2);
				++h2State.openStreams;
			});
			stream$2.once("close", () => {
				h2State.openStreams -= 1;
				if (h2State.openStreams === 0) session.unref();
			});
			return true;
		}
		headers[HTTP2_HEADER_PATH] = path$9;
		headers[HTTP2_HEADER_SCHEME] = "https";
		const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
		if (body && typeof body.read === "function") body.read(0);
		let contentLength = util$12.bodyLength(body);
		if (contentLength == null) contentLength = request$1.contentLength;
		if (contentLength === 0 || !expectsPayload) contentLength = null;
		if (shouldSendContentLength(method) && contentLength > 0 && request$1.contentLength != null && request$1.contentLength !== contentLength) {
			if (client[kStrictContentLength]) {
				errorRequest(client, request$1, new RequestContentLengthMismatchError());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError());
		}
		if (contentLength != null) {
			assert$12(body, "no body must not have content length");
			headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
		}
		session.ref();
		const shouldEndStream = method === "GET" || method === "HEAD";
		if (expectContinue) {
			headers[HTTP2_HEADER_EXPECT] = "100-continue";
			stream$2 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			stream$2.once("continue", writeBodyH2);
		} else {
			stream$2 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			writeBodyH2();
		}
		++h2State.openStreams;
		stream$2.once("response", (headers$1) => {
			const { [HTTP2_HEADER_STATUS]: statusCode,...realHeaders } = headers$1;
			if (request$1.onHeaders(Number(statusCode), realHeaders, stream$2.resume.bind(stream$2), "") === false) stream$2.pause();
		});
		stream$2.once("end", () => {
			request$1.onComplete([]);
		});
		stream$2.on("data", (chunk) => {
			if (request$1.onData(chunk) === false) stream$2.pause();
		});
		stream$2.once("close", () => {
			h2State.openStreams -= 1;
			if (h2State.openStreams === 0) session.unref();
		});
		stream$2.once("error", function(err) {
			if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
				h2State.streams -= 1;
				util$12.destroy(stream$2, err);
			}
		});
		stream$2.once("frameError", (type$1, code) => {
			const err = new InformationalError(`HTTP/2: "frameError" received - type ${type$1}, code ${code}`);
			errorRequest(client, request$1, err);
			if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
				h2State.streams -= 1;
				util$12.destroy(stream$2, err);
			}
		});
		return true;
		function writeBodyH2() {
			/* istanbul ignore else: assertion */
			if (!body) request$1.onRequestSent();
			else if (util$12.isBuffer(body)) {
				assert$12(contentLength === body.byteLength, "buffer body must have content length");
				stream$2.cork();
				stream$2.write(body);
				stream$2.uncork();
				stream$2.end();
				request$1.onBodySent(body);
				request$1.onRequestSent();
			} else if (util$12.isBlobLike(body)) if (typeof body.stream === "function") writeIterable({
				client,
				request: request$1,
				contentLength,
				h2stream: stream$2,
				expectsPayload,
				body: body.stream(),
				socket: client[kSocket],
				header: ""
			});
			else writeBlob({
				body,
				client,
				request: request$1,
				contentLength,
				expectsPayload,
				h2stream: stream$2,
				header: "",
				socket: client[kSocket]
			});
			else if (util$12.isStream(body)) writeStream({
				body,
				client,
				request: request$1,
				contentLength,
				expectsPayload,
				socket: client[kSocket],
				h2stream: stream$2,
				header: ""
			});
			else if (util$12.isIterable(body)) writeIterable({
				body,
				client,
				request: request$1,
				contentLength,
				expectsPayload,
				header: "",
				h2stream: stream$2,
				socket: client[kSocket]
			});
			else assert$12(false);
		}
	}
	function writeStream({ h2stream, body, client, request: request$1, socket, contentLength, header, expectsPayload }) {
		assert$12(contentLength !== 0 || client[kRunning$3] === 0, "stream body cannot be pipelined");
		if (client[kHTTPConnVersion] === "h2") {
			const pipe = pipeline$2(body, h2stream, (err) => {
				if (err) {
					util$12.destroy(body, err);
					util$12.destroy(h2stream, err);
				} else request$1.onRequestSent();
			});
			pipe.on("data", onPipeData);
			pipe.once("end", () => {
				pipe.removeListener("data", onPipeData);
				util$12.destroy(pipe);
			});
			function onPipeData(chunk) {
				request$1.onBodySent(chunk);
			}
			return;
		}
		let finished$1 = false;
		const writer = new AsyncWriter({
			socket,
			request: request$1,
			contentLength,
			client,
			expectsPayload,
			header
		});
		const onData = function(chunk) {
			if (finished$1) return;
			try {
				if (!writer.write(chunk) && this.pause) this.pause();
			} catch (err) {
				util$12.destroy(this, err);
			}
		};
		const onDrain = function() {
			if (finished$1) return;
			if (body.resume) body.resume();
		};
		const onAbort = function() {
			if (finished$1) return;
			const err = new RequestAbortedError$8();
			queueMicrotask(() => onFinished(err));
		};
		const onFinished = function(err) {
			if (finished$1) return;
			finished$1 = true;
			assert$12(socket.destroyed || socket[kWriting] && client[kRunning$3] <= 1);
			socket.off("drain", onDrain).off("error", onFinished);
			body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
			if (!err) try {
				writer.end();
			} catch (er) {
				err = er;
			}
			writer.destroy(err);
			if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) util$12.destroy(body, err);
			else util$12.destroy(body);
		};
		body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
		if (body.resume) body.resume();
		socket.on("drain", onDrain).on("error", onFinished);
	}
	async function writeBlob({ h2stream, body, client, request: request$1, socket, contentLength, header, expectsPayload }) {
		assert$12(contentLength === body.size, "blob body must have content length");
		const isH2 = client[kHTTPConnVersion] === "h2";
		try {
			if (contentLength != null && contentLength !== body.size) throw new RequestContentLengthMismatchError();
			const buffer = Buffer.from(await body.arrayBuffer());
			if (isH2) {
				h2stream.cork();
				h2stream.write(buffer);
				h2stream.uncork();
			} else {
				socket.cork();
				socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
				socket.write(buffer);
				socket.uncork();
			}
			request$1.onBodySent(buffer);
			request$1.onRequestSent();
			if (!expectsPayload) socket[kReset] = true;
			resume(client);
		} catch (err) {
			util$12.destroy(isH2 ? h2stream : socket, err);
		}
	}
	async function writeIterable({ h2stream, body, client, request: request$1, socket, contentLength, header, expectsPayload }) {
		assert$12(contentLength !== 0 || client[kRunning$3] === 0, "iterator body cannot be pipelined");
		let callback = null;
		function onDrain() {
			if (callback) {
				const cb = callback;
				callback = null;
				cb();
			}
		}
		const waitForDrain = () => new Promise((resolve$1, reject) => {
			assert$12(callback === null);
			if (socket[kError$2]) reject(socket[kError$2]);
			else callback = resolve$1;
		});
		if (client[kHTTPConnVersion] === "h2") {
			h2stream.on("close", onDrain).on("drain", onDrain);
			try {
				for await (const chunk of body) {
					if (socket[kError$2]) throw socket[kError$2];
					const res = h2stream.write(chunk);
					request$1.onBodySent(chunk);
					if (!res) await waitForDrain();
				}
			} catch (err) {
				h2stream.destroy(err);
			} finally {
				request$1.onRequestSent();
				h2stream.end();
				h2stream.off("close", onDrain).off("drain", onDrain);
			}
			return;
		}
		socket.on("close", onDrain).on("drain", onDrain);
		const writer = new AsyncWriter({
			socket,
			request: request$1,
			contentLength,
			client,
			expectsPayload,
			header
		});
		try {
			for await (const chunk of body) {
				if (socket[kError$2]) throw socket[kError$2];
				if (!writer.write(chunk)) await waitForDrain();
			}
			writer.end();
		} catch (err) {
			writer.destroy(err);
		} finally {
			socket.off("close", onDrain).off("drain", onDrain);
		}
	}
	var AsyncWriter = class {
		constructor({ socket, request: request$1, contentLength, client, expectsPayload, header }) {
			this.socket = socket;
			this.request = request$1;
			this.contentLength = contentLength;
			this.client = client;
			this.bytesWritten = 0;
			this.expectsPayload = expectsPayload;
			this.header = header;
			socket[kWriting] = true;
		}
		write(chunk) {
			const { socket, request: request$1, contentLength, client, bytesWritten, expectsPayload, header } = this;
			if (socket[kError$2]) throw socket[kError$2];
			if (socket.destroyed) return false;
			const len = Buffer.byteLength(chunk);
			if (!len) return true;
			if (contentLength !== null && bytesWritten + len > contentLength) {
				if (client[kStrictContentLength]) throw new RequestContentLengthMismatchError();
				process.emitWarning(new RequestContentLengthMismatchError());
			}
			socket.cork();
			if (bytesWritten === 0) {
				if (!expectsPayload) socket[kReset] = true;
				if (contentLength === null) socket.write(`${header}transfer-encoding: chunked\r\n`, "latin1");
				else socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			}
			if (contentLength === null) socket.write(`\r\n${len.toString(16)}\r\n`, "latin1");
			this.bytesWritten += len;
			const ret = socket.write(chunk);
			socket.uncork();
			request$1.onBodySent(chunk);
			if (!ret) {
				if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
					// istanbul ignore else: only for jest
					if (socket[kParser].timeout.refresh) socket[kParser].timeout.refresh();
				}
			}
			return ret;
		}
		end() {
			const { socket, contentLength, client, bytesWritten, expectsPayload, header, request: request$1 } = this;
			request$1.onRequestSent();
			socket[kWriting] = false;
			if (socket[kError$2]) throw socket[kError$2];
			if (socket.destroyed) return;
			if (bytesWritten === 0) if (expectsPayload) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
			else socket.write(`${header}\r\n`, "latin1");
			else if (contentLength === null) socket.write("\r\n0\r\n\r\n", "latin1");
			if (contentLength !== null && bytesWritten !== contentLength) if (client[kStrictContentLength]) throw new RequestContentLengthMismatchError();
			else process.emitWarning(new RequestContentLengthMismatchError());
			if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
				// istanbul ignore else: only for jest
				if (socket[kParser].timeout.refresh) socket[kParser].timeout.refresh();
			}
			resume(client);
		}
		destroy(err) {
			const { socket, client } = this;
			socket[kWriting] = false;
			if (err) {
				assert$12(client[kRunning$3] <= 1, "pipeline should only contain this request");
				util$12.destroy(socket, err);
			}
		}
	};
	function errorRequest(client, request$1, err) {
		try {
			request$1.onError(err);
			assert$12(request$1.aborted);
		} catch (err$1) {
			client.emit("error", err$1);
		}
	}
	module.exports = Client$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/node/fixed-queue.js"(exports, module) {
	const kSize$3 = 2048;
	const kMask = kSize$3 - 1;
	var FixedCircularBuffer = class {
		constructor() {
			this.bottom = 0;
			this.top = 0;
			this.list = new Array(kSize$3);
			this.next = null;
		}
		isEmpty() {
			return this.top === this.bottom;
		}
		isFull() {
			return (this.top + 1 & kMask) === this.bottom;
		}
		push(data) {
			this.list[this.top] = data;
			this.top = this.top + 1 & kMask;
		}
		shift() {
			const nextItem = this.list[this.bottom];
			if (nextItem === void 0) return null;
			this.list[this.bottom] = void 0;
			this.bottom = this.bottom + 1 & kMask;
			return nextItem;
		}
	};
	module.exports = class FixedQueue$1 {
		constructor() {
			this.head = this.tail = new FixedCircularBuffer();
		}
		isEmpty() {
			return this.head.isEmpty();
		}
		push(data) {
			if (this.head.isFull()) this.head = this.head.next = new FixedCircularBuffer();
			this.head.push(data);
		}
		shift() {
			const tail = this.tail;
			const next = tail.shift();
			if (tail.isEmpty() && tail.next !== null) this.tail = tail.next;
			return next;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool-stats.js"(exports, module) {
	const { kFree: kFree$1, kConnected: kConnected$4, kPending: kPending$1, kQueued: kQueued$1, kRunning: kRunning$2, kSize: kSize$2 } = require_symbols$4();
	const kPool = Symbol("pool");
	var PoolStats$1 = class {
		constructor(pool) {
			this[kPool] = pool;
		}
		get connected() {
			return this[kPool][kConnected$4];
		}
		get free() {
			return this[kPool][kFree$1];
		}
		get pending() {
			return this[kPool][kPending$1];
		}
		get queued() {
			return this[kPool][kQueued$1];
		}
		get running() {
			return this[kPool][kRunning$2];
		}
		get size() {
			return this[kPool][kSize$2];
		}
	};
	module.exports = PoolStats$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool-base.js"(exports, module) {
	const DispatcherBase$2 = require_dispatcher_base();
	const FixedQueue = require_fixed_queue();
	const { kConnected: kConnected$3, kSize: kSize$1, kRunning: kRunning$1, kPending, kQueued, kBusy, kFree, kUrl: kUrl$2, kClose: kClose$4, kDestroy: kDestroy$2, kDispatch: kDispatch$1 } = require_symbols$4();
	const PoolStats = require_pool_stats();
	const kClients$4 = Symbol("clients");
	const kNeedDrain$2 = Symbol("needDrain");
	const kQueue = Symbol("queue");
	const kClosedResolve = Symbol("closed resolve");
	const kOnDrain$1 = Symbol("onDrain");
	const kOnConnect$1 = Symbol("onConnect");
	const kOnDisconnect$1 = Symbol("onDisconnect");
	const kOnConnectionError$1 = Symbol("onConnectionError");
	const kGetDispatcher$2 = Symbol("get dispatcher");
	const kAddClient$2 = Symbol("add client");
	const kRemoveClient$1 = Symbol("remove client");
	const kStats = Symbol("stats");
	var PoolBase$2 = class extends DispatcherBase$2 {
		constructor() {
			super();
			this[kQueue] = new FixedQueue();
			this[kClients$4] = [];
			this[kQueued] = 0;
			const pool = this;
			this[kOnDrain$1] = function onDrain(origin, targets) {
				const queue$1 = pool[kQueue];
				let needDrain = false;
				while (!needDrain) {
					const item = queue$1.shift();
					if (!item) break;
					pool[kQueued]--;
					needDrain = !this.dispatch(item.opts, item.handler);
				}
				this[kNeedDrain$2] = needDrain;
				if (!this[kNeedDrain$2] && pool[kNeedDrain$2]) {
					pool[kNeedDrain$2] = false;
					pool.emit("drain", origin, [pool, ...targets]);
				}
				if (pool[kClosedResolve] && queue$1.isEmpty()) Promise.all(pool[kClients$4].map((c) => c.close())).then(pool[kClosedResolve]);
			};
			this[kOnConnect$1] = (origin, targets) => {
				pool.emit("connect", origin, [pool, ...targets]);
			};
			this[kOnDisconnect$1] = (origin, targets, err) => {
				pool.emit("disconnect", origin, [pool, ...targets], err);
			};
			this[kOnConnectionError$1] = (origin, targets, err) => {
				pool.emit("connectionError", origin, [pool, ...targets], err);
			};
			this[kStats] = new PoolStats(this);
		}
		get [kBusy]() {
			return this[kNeedDrain$2];
		}
		get [kConnected$3]() {
			return this[kClients$4].filter((client) => client[kConnected$3]).length;
		}
		get [kFree]() {
			return this[kClients$4].filter((client) => client[kConnected$3] && !client[kNeedDrain$2]).length;
		}
		get [kPending]() {
			let ret = this[kQueued];
			for (const { [kPending]: pending } of this[kClients$4]) ret += pending;
			return ret;
		}
		get [kRunning$1]() {
			let ret = 0;
			for (const { [kRunning$1]: running } of this[kClients$4]) ret += running;
			return ret;
		}
		get [kSize$1]() {
			let ret = this[kQueued];
			for (const { [kSize$1]: size } of this[kClients$4]) ret += size;
			return ret;
		}
		get stats() {
			return this[kStats];
		}
		async [kClose$4]() {
			if (this[kQueue].isEmpty()) return Promise.all(this[kClients$4].map((c) => c.close()));
			else return new Promise((resolve$1) => {
				this[kClosedResolve] = resolve$1;
			});
		}
		async [kDestroy$2](err) {
			while (true) {
				const item = this[kQueue].shift();
				if (!item) break;
				item.handler.onError(err);
			}
			return Promise.all(this[kClients$4].map((c) => c.destroy(err)));
		}
		[kDispatch$1](opts, handler) {
			const dispatcher = this[kGetDispatcher$2]();
			if (!dispatcher) {
				this[kNeedDrain$2] = true;
				this[kQueue].push({
					opts,
					handler
				});
				this[kQueued]++;
			} else if (!dispatcher.dispatch(opts, handler)) {
				dispatcher[kNeedDrain$2] = true;
				this[kNeedDrain$2] = !this[kGetDispatcher$2]();
			}
			return !this[kNeedDrain$2];
		}
		[kAddClient$2](client) {
			client.on("drain", this[kOnDrain$1]).on("connect", this[kOnConnect$1]).on("disconnect", this[kOnDisconnect$1]).on("connectionError", this[kOnConnectionError$1]);
			this[kClients$4].push(client);
			if (this[kNeedDrain$2]) process.nextTick(() => {
				if (this[kNeedDrain$2]) this[kOnDrain$1](client[kUrl$2], [this, client]);
			});
			return this;
		}
		[kRemoveClient$1](client) {
			client.close(() => {
				const idx = this[kClients$4].indexOf(client);
				if (idx !== -1) this[kClients$4].splice(idx, 1);
			});
			this[kNeedDrain$2] = this[kClients$4].some((dispatcher) => !dispatcher[kNeedDrain$2] && dispatcher.closed !== true && dispatcher.destroyed !== true);
		}
	};
	module.exports = {
		PoolBase: PoolBase$2,
		kClients: kClients$4,
		kNeedDrain: kNeedDrain$2,
		kAddClient: kAddClient$2,
		kRemoveClient: kRemoveClient$1,
		kGetDispatcher: kGetDispatcher$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool.js
var require_pool = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool.js"(exports, module) {
	const { PoolBase: PoolBase$1, kClients: kClients$3, kNeedDrain: kNeedDrain$1, kAddClient: kAddClient$1, kGetDispatcher: kGetDispatcher$1 } = require_pool_base();
	const Client$3 = require_client();
	const { InvalidArgumentError: InvalidArgumentError$15 } = require_errors();
	const util$11 = require_util$6();
	const { kUrl: kUrl$1, kInterceptors: kInterceptors$3 } = require_symbols$4();
	const buildConnector$2 = require_connect();
	const kOptions$3 = Symbol("options");
	const kConnections = Symbol("connections");
	const kFactory$3 = Symbol("factory");
	function defaultFactory$3(origin, opts) {
		return new Client$3(origin, opts);
	}
	var Pool$5 = class extends PoolBase$1 {
		constructor(origin, { connections, factory = defaultFactory$3, connect: connect$2, connectTimeout, tls: tls$2, maxCachedSessions, socketPath, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2,...options } = {}) {
			super();
			if (connections != null && (!Number.isFinite(connections) || connections < 0)) throw new InvalidArgumentError$15("invalid connections");
			if (typeof factory !== "function") throw new InvalidArgumentError$15("factory must be a function.");
			if (connect$2 != null && typeof connect$2 !== "function" && typeof connect$2 !== "object") throw new InvalidArgumentError$15("connect must be a function or an object");
			if (typeof connect$2 !== "function") connect$2 = buildConnector$2({
				...tls$2,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...util$11.nodeHasAutoSelectFamily && autoSelectFamily ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : void 0,
				...connect$2
			});
			this[kInterceptors$3] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
			this[kConnections] = connections || null;
			this[kUrl$1] = util$11.parseOrigin(origin);
			this[kOptions$3] = {
				...util$11.deepClone(options),
				connect: connect$2,
				allowH2
			};
			this[kOptions$3].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
			this[kFactory$3] = factory;
			this.on("connectionError", (origin$1, targets, error$1) => {
				for (const target of targets) {
					const idx = this[kClients$3].indexOf(target);
					if (idx !== -1) this[kClients$3].splice(idx, 1);
				}
			});
		}
		[kGetDispatcher$1]() {
			let dispatcher = this[kClients$3].find((dispatcher$1) => !dispatcher$1[kNeedDrain$1]);
			if (dispatcher) return dispatcher;
			if (!this[kConnections] || this[kClients$3].length < this[kConnections]) {
				dispatcher = this[kFactory$3](this[kUrl$1], this[kOptions$3]);
				this[kAddClient$1](dispatcher);
			}
			return dispatcher;
		}
	};
	module.exports = Pool$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/balanced-pool.js"(exports, module) {
	const { BalancedPoolMissingUpstreamError, InvalidArgumentError: InvalidArgumentError$14 } = require_errors();
	const { PoolBase, kClients: kClients$2, kNeedDrain, kAddClient, kRemoveClient, kGetDispatcher } = require_pool_base();
	const Pool$4 = require_pool();
	const { kUrl, kInterceptors: kInterceptors$2 } = require_symbols$4();
	const { parseOrigin } = require_util$6();
	const kFactory$2 = Symbol("factory");
	const kOptions$2 = Symbol("options");
	const kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
	const kCurrentWeight = Symbol("kCurrentWeight");
	const kIndex = Symbol("kIndex");
	const kWeight = Symbol("kWeight");
	const kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
	const kErrorPenalty = Symbol("kErrorPenalty");
	function getGreatestCommonDivisor(a, b$2) {
		if (b$2 === 0) return a;
		return getGreatestCommonDivisor(b$2, a % b$2);
	}
	function defaultFactory$2(origin, opts) {
		return new Pool$4(origin, opts);
	}
	var BalancedPool$1 = class extends PoolBase {
		constructor(upstreams = [], { factory = defaultFactory$2,...opts } = {}) {
			super();
			this[kOptions$2] = opts;
			this[kIndex] = -1;
			this[kCurrentWeight] = 0;
			this[kMaxWeightPerServer] = this[kOptions$2].maxWeightPerServer || 100;
			this[kErrorPenalty] = this[kOptions$2].errorPenalty || 15;
			if (!Array.isArray(upstreams)) upstreams = [upstreams];
			if (typeof factory !== "function") throw new InvalidArgumentError$14("factory must be a function.");
			this[kInterceptors$2] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
			this[kFactory$2] = factory;
			for (const upstream of upstreams) this.addUpstream(upstream);
			this._updateBalancedPoolStats();
		}
		addUpstream(upstream) {
			const upstreamOrigin = parseOrigin(upstream).origin;
			if (this[kClients$2].find((pool$1) => pool$1[kUrl].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true)) return this;
			const pool = this[kFactory$2](upstreamOrigin, Object.assign({}, this[kOptions$2]));
			this[kAddClient](pool);
			pool.on("connect", () => {
				pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
			});
			pool.on("connectionError", () => {
				pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
				this._updateBalancedPoolStats();
			});
			pool.on("disconnect", (...args) => {
				const err = args[2];
				if (err && err.code === "UND_ERR_SOCKET") {
					pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
					this._updateBalancedPoolStats();
				}
			});
			for (const client of this[kClients$2]) client[kWeight] = this[kMaxWeightPerServer];
			this._updateBalancedPoolStats();
			return this;
		}
		_updateBalancedPoolStats() {
			this[kGreatestCommonDivisor] = this[kClients$2].map((p$1) => p$1[kWeight]).reduce(getGreatestCommonDivisor, 0);
		}
		removeUpstream(upstream) {
			const upstreamOrigin = parseOrigin(upstream).origin;
			const pool = this[kClients$2].find((pool$1) => pool$1[kUrl].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true);
			if (pool) this[kRemoveClient](pool);
			return this;
		}
		get upstreams() {
			return this[kClients$2].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p$1) => p$1[kUrl].origin);
		}
		[kGetDispatcher]() {
			if (this[kClients$2].length === 0) throw new BalancedPoolMissingUpstreamError();
			const dispatcher = this[kClients$2].find((dispatcher$1) => !dispatcher$1[kNeedDrain] && dispatcher$1.closed !== true && dispatcher$1.destroyed !== true);
			if (!dispatcher) return;
			const allClientsBusy = this[kClients$2].map((pool) => pool[kNeedDrain]).reduce((a, b$2) => a && b$2, true);
			if (allClientsBusy) return;
			let counter = 0;
			let maxWeightIndex = this[kClients$2].findIndex((pool) => !pool[kNeedDrain]);
			while (counter++ < this[kClients$2].length) {
				this[kIndex] = (this[kIndex] + 1) % this[kClients$2].length;
				const pool = this[kClients$2][this[kIndex]];
				if (pool[kWeight] > this[kClients$2][maxWeightIndex][kWeight] && !pool[kNeedDrain]) maxWeightIndex = this[kIndex];
				if (this[kIndex] === 0) {
					this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
					if (this[kCurrentWeight] <= 0) this[kCurrentWeight] = this[kMaxWeightPerServer];
				}
				if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) return pool;
			}
			this[kCurrentWeight] = this[kClients$2][maxWeightIndex][kWeight];
			this[kIndex] = maxWeightIndex;
			return this[kClients$2][maxWeightIndex];
		}
	};
	module.exports = BalancedPool$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/compat/dispatcher-weakref.js"(exports, module) {
	/* istanbul ignore file: only for Node 12 */
	const { kConnected: kConnected$2, kSize } = require_symbols$4();
	var CompatWeakRef = class {
		constructor(value$1) {
			this.value = value$1;
		}
		deref() {
			return this.value[kConnected$2] === 0 && this.value[kSize] === 0 ? void 0 : this.value;
		}
	};
	var CompatFinalizer = class {
		constructor(finalizer) {
			this.finalizer = finalizer;
		}
		register(dispatcher, key) {
			if (dispatcher.on) dispatcher.on("disconnect", () => {
				if (dispatcher[kConnected$2] === 0 && dispatcher[kSize] === 0) this.finalizer(key);
			});
		}
	};
	module.exports = function() {
		if (process.env.NODE_V8_COVERAGE) return {
			WeakRef: CompatWeakRef,
			FinalizationRegistry: CompatFinalizer
		};
		return {
			WeakRef: global.WeakRef || CompatWeakRef,
			FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/agent.js
var require_agent = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/agent.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$13 } = require_errors();
	const { kClients: kClients$1, kRunning, kClose: kClose$3, kDestroy: kDestroy$1, kDispatch, kInterceptors: kInterceptors$1 } = require_symbols$4();
	const DispatcherBase$1 = require_dispatcher_base();
	const Pool$3 = require_pool();
	const Client$2 = require_client();
	const util$10 = require_util$6();
	const createRedirectInterceptor$1 = require_redirectInterceptor();
	const { WeakRef: WeakRef$1, FinalizationRegistry: FinalizationRegistry$1 } = require_dispatcher_weakref()();
	const kOnConnect = Symbol("onConnect");
	const kOnDisconnect = Symbol("onDisconnect");
	const kOnConnectionError = Symbol("onConnectionError");
	const kMaxRedirections = Symbol("maxRedirections");
	const kOnDrain = Symbol("onDrain");
	const kFactory$1 = Symbol("factory");
	const kFinalizer = Symbol("finalizer");
	const kOptions$1 = Symbol("options");
	function defaultFactory$1(origin, opts) {
		return opts && opts.connections === 1 ? new Client$2(origin, opts) : new Pool$3(origin, opts);
	}
	var Agent$4 = class extends DispatcherBase$1 {
		constructor({ factory = defaultFactory$1, maxRedirections = 0, connect: connect$2,...options } = {}) {
			super();
			if (typeof factory !== "function") throw new InvalidArgumentError$13("factory must be a function.");
			if (connect$2 != null && typeof connect$2 !== "function" && typeof connect$2 !== "object") throw new InvalidArgumentError$13("connect must be a function or an object");
			if (!Number.isInteger(maxRedirections) || maxRedirections < 0) throw new InvalidArgumentError$13("maxRedirections must be a positive number");
			if (connect$2 && typeof connect$2 !== "function") connect$2 = { ...connect$2 };
			this[kInterceptors$1] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor$1({ maxRedirections })];
			this[kOptions$1] = {
				...util$10.deepClone(options),
				connect: connect$2
			};
			this[kOptions$1].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
			this[kMaxRedirections] = maxRedirections;
			this[kFactory$1] = factory;
			this[kClients$1] = new Map();
			this[kFinalizer] = new FinalizationRegistry$1(
				/* istanbul ignore next: gc is undeterministic */
				(key) => {
					const ref = this[kClients$1].get(key);
					if (ref !== void 0 && ref.deref() === void 0) this[kClients$1].delete(key);
				}
);
			const agent = this;
			this[kOnDrain] = (origin, targets) => {
				agent.emit("drain", origin, [agent, ...targets]);
			};
			this[kOnConnect] = (origin, targets) => {
				agent.emit("connect", origin, [agent, ...targets]);
			};
			this[kOnDisconnect] = (origin, targets, err) => {
				agent.emit("disconnect", origin, [agent, ...targets], err);
			};
			this[kOnConnectionError] = (origin, targets, err) => {
				agent.emit("connectionError", origin, [agent, ...targets], err);
			};
		}
		get [kRunning]() {
			let ret = 0;
			for (const ref of this[kClients$1].values()) {
				const client = ref.deref();
				/* istanbul ignore next: gc is undeterministic */
				if (client) ret += client[kRunning];
			}
			return ret;
		}
		[kDispatch](opts, handler) {
			let key;
			if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) key = String(opts.origin);
			else throw new InvalidArgumentError$13("opts.origin must be a non-empty string or URL.");
			const ref = this[kClients$1].get(key);
			let dispatcher = ref ? ref.deref() : null;
			if (!dispatcher) {
				dispatcher = this[kFactory$1](opts.origin, this[kOptions$1]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
				this[kClients$1].set(key, new WeakRef$1(dispatcher));
				this[kFinalizer].register(dispatcher, key);
			}
			return dispatcher.dispatch(opts, handler);
		}
		async [kClose$3]() {
			const closePromises = [];
			for (const ref of this[kClients$1].values()) {
				const client = ref.deref();
				/* istanbul ignore else: gc is undeterministic */
				if (client) closePromises.push(client.close());
			}
			await Promise.all(closePromises);
		}
		async [kDestroy$1](err) {
			const destroyPromises = [];
			for (const ref of this[kClients$1].values()) {
				const client = ref.deref();
				/* istanbul ignore else: gc is undeterministic */
				if (client) destroyPromises.push(client.destroy(err));
			}
			await Promise.all(destroyPromises);
		}
	};
	module.exports = Agent$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/readable.js
var require_readable = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/readable.js"(exports, module) {
	const assert$11 = __require("assert");
	const { Readable: Readable$4 } = __require("stream");
	const { RequestAbortedError: RequestAbortedError$7, NotSupportedError, InvalidArgumentError: InvalidArgumentError$12 } = require_errors();
	const util$9 = require_util$6();
	const { ReadableStreamFrom, toUSVString: toUSVString$1 } = require_util$6();
	let Blob$1;
	const kConsume = Symbol("kConsume");
	const kReading = Symbol("kReading");
	const kBody = Symbol("kBody");
	const kAbort = Symbol("abort");
	const kContentType = Symbol("kContentType");
	const noop = () => {};
	module.exports = class BodyReadable extends Readable$4 {
		constructor({ resume: resume$1, abort: abort$1, contentType = "", highWaterMark = 64 * 1024 }) {
			super({
				autoDestroy: true,
				read: resume$1,
				highWaterMark
			});
			this._readableState.dataEmitted = false;
			this[kAbort] = abort$1;
			this[kConsume] = null;
			this[kBody] = null;
			this[kContentType] = contentType;
			this[kReading] = false;
		}
		destroy(err) {
			if (this.destroyed) return this;
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$7();
			if (err) this[kAbort]();
			return super.destroy(err);
		}
		emit(ev, ...args) {
			if (ev === "data") this._readableState.dataEmitted = true;
			else if (ev === "error") this._readableState.errorEmitted = true;
			return super.emit(ev, ...args);
		}
		on(ev, ...args) {
			if (ev === "data" || ev === "readable") this[kReading] = true;
			return super.on(ev, ...args);
		}
		addListener(ev, ...args) {
			return this.on(ev, ...args);
		}
		off(ev, ...args) {
			const ret = super.off(ev, ...args);
			if (ev === "data" || ev === "readable") this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
			return ret;
		}
		removeListener(ev, ...args) {
			return this.off(ev, ...args);
		}
		push(chunk) {
			if (this[kConsume] && chunk !== null && this.readableLength === 0) {
				consumePush(this[kConsume], chunk);
				return this[kReading] ? super.push(chunk) : true;
			}
			return super.push(chunk);
		}
		async text() {
			return consume(this, "text");
		}
		async json() {
			return consume(this, "json");
		}
		async blob() {
			return consume(this, "blob");
		}
		async arrayBuffer() {
			return consume(this, "arrayBuffer");
		}
		async formData() {
			throw new NotSupportedError();
		}
		get bodyUsed() {
			return util$9.isDisturbed(this);
		}
		get body() {
			if (!this[kBody]) {
				this[kBody] = ReadableStreamFrom(this);
				if (this[kConsume]) {
					this[kBody].getReader();
					assert$11(this[kBody].locked);
				}
			}
			return this[kBody];
		}
		dump(opts) {
			let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
			const signal = opts && opts.signal;
			if (signal) try {
				if (typeof signal !== "object" || !("aborted" in signal)) throw new InvalidArgumentError$12("signal must be an AbortSignal");
				util$9.throwIfAborted(signal);
			} catch (err) {
				return Promise.reject(err);
			}
			if (this.closed) return Promise.resolve(null);
			return new Promise((resolve$1, reject) => {
				const signalListenerCleanup = signal ? util$9.addAbortListener(signal, () => {
					this.destroy();
				}) : noop;
				this.on("close", function() {
					signalListenerCleanup();
					if (signal && signal.aborted) reject(signal.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" }));
					else resolve$1(null);
				}).on("error", noop).on("data", function(chunk) {
					limit -= chunk.length;
					if (limit <= 0) this.destroy();
				}).resume();
			});
		}
	};
	function isLocked(self$1) {
		return self$1[kBody] && self$1[kBody].locked === true || self$1[kConsume];
	}
	function isUnusable(self$1) {
		return util$9.isDisturbed(self$1) || isLocked(self$1);
	}
	async function consume(stream$2, type$1) {
		if (isUnusable(stream$2)) throw new TypeError("unusable");
		assert$11(!stream$2[kConsume]);
		return new Promise((resolve$1, reject) => {
			stream$2[kConsume] = {
				type: type$1,
				stream: stream$2,
				resolve: resolve$1,
				reject,
				length: 0,
				body: []
			};
			stream$2.on("error", function(err) {
				consumeFinish(this[kConsume], err);
			}).on("close", function() {
				if (this[kConsume].body !== null) consumeFinish(this[kConsume], new RequestAbortedError$7());
			});
			process.nextTick(consumeStart, stream$2[kConsume]);
		});
	}
	function consumeStart(consume$1) {
		if (consume$1.body === null) return;
		const { _readableState: state } = consume$1.stream;
		for (const chunk of state.buffer) consumePush(consume$1, chunk);
		if (state.endEmitted) consumeEnd(this[kConsume]);
		else consume$1.stream.on("end", function() {
			consumeEnd(this[kConsume]);
		});
		consume$1.stream.resume();
		while (consume$1.stream.read() != null);
	}
	function consumeEnd(consume$1) {
		const { type: type$1, body, resolve: resolve$1, stream: stream$2, length } = consume$1;
		try {
			if (type$1 === "text") resolve$1(toUSVString$1(Buffer.concat(body)));
			else if (type$1 === "json") resolve$1(JSON.parse(Buffer.concat(body)));
			else if (type$1 === "arrayBuffer") {
				const dst = new Uint8Array(length);
				let pos = 0;
				for (const buf of body) {
					dst.set(buf, pos);
					pos += buf.byteLength;
				}
				resolve$1(dst.buffer);
			} else if (type$1 === "blob") {
				if (!Blob$1) Blob$1 = __require("buffer").Blob;
				resolve$1(new Blob$1(body, { type: stream$2[kContentType] }));
			}
			consumeFinish(consume$1);
		} catch (err) {
			stream$2.destroy(err);
		}
	}
	function consumePush(consume$1, chunk) {
		consume$1.length += chunk.length;
		consume$1.body.push(chunk);
	}
	function consumeFinish(consume$1, err) {
		if (consume$1.body === null) return;
		if (err) consume$1.reject(err);
		else consume$1.resolve();
		consume$1.type = null;
		consume$1.stream = null;
		consume$1.resolve = null;
		consume$1.reject = null;
		consume$1.length = 0;
		consume$1.body = null;
	}
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/util.js
var require_util$4 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/util.js"(exports, module) {
	const assert$10 = __require("assert");
	const { ResponseStatusCodeError } = require_errors();
	const { toUSVString } = require_util$6();
	async function getResolveErrorBodyCallback$2({ callback, body, contentType, statusCode, statusMessage, headers }) {
		assert$10(body);
		let chunks = [];
		let limit = 0;
		for await (const chunk of body) {
			chunks.push(chunk);
			limit += chunk.length;
			if (limit > 128 * 1024) {
				chunks = null;
				break;
			}
		}
		if (statusCode === 204 || !contentType || !chunks) {
			process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
			return;
		}
		try {
			if (contentType.startsWith("application/json")) {
				const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
				process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
				return;
			}
			if (contentType.startsWith("text/")) {
				const payload = toUSVString(Buffer.concat(chunks));
				process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
				return;
			}
		} catch (err) {}
		process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
	}
	module.exports = { getResolveErrorBodyCallback: getResolveErrorBodyCallback$2 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/abort-signal.js"(exports, module) {
	const { addAbortListener: addAbortListener$1 } = require_util$6();
	const { RequestAbortedError: RequestAbortedError$6 } = require_errors();
	const kListener = Symbol("kListener");
	const kSignal$1 = Symbol("kSignal");
	function abort(self$1) {
		if (self$1.abort) self$1.abort();
		else self$1.onError(new RequestAbortedError$6());
	}
	function addSignal$5(self$1, signal) {
		self$1[kSignal$1] = null;
		self$1[kListener] = null;
		if (!signal) return;
		if (signal.aborted) {
			abort(self$1);
			return;
		}
		self$1[kSignal$1] = signal;
		self$1[kListener] = () => {
			abort(self$1);
		};
		addAbortListener$1(self$1[kSignal$1], self$1[kListener]);
	}
	function removeSignal$5(self$1) {
		if (!self$1[kSignal$1]) return;
		if ("removeEventListener" in self$1[kSignal$1]) self$1[kSignal$1].removeEventListener("abort", self$1[kListener]);
		else self$1[kSignal$1].removeListener("abort", self$1[kListener]);
		self$1[kSignal$1] = null;
		self$1[kListener] = null;
	}
	module.exports = {
		addSignal: addSignal$5,
		removeSignal: removeSignal$5
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-request.js"(exports, module) {
	const Readable$3 = require_readable();
	const { InvalidArgumentError: InvalidArgumentError$11, RequestAbortedError: RequestAbortedError$5 } = require_errors();
	const util$8 = require_util$6();
	const { getResolveErrorBodyCallback: getResolveErrorBodyCallback$1 } = require_util$4();
	const { AsyncResource: AsyncResource$4 } = __require("async_hooks");
	const { addSignal: addSignal$4, removeSignal: removeSignal$4 } = require_abort_signal();
	var RequestHandler = class extends AsyncResource$4 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$11("invalid opts");
			const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$11("invalid callback");
				if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) throw new InvalidArgumentError$11("invalid highWaterMark");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$11("signal must be an EventEmitter or EventTarget");
				if (method === "CONNECT") throw new InvalidArgumentError$11("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$11("invalid onInfo callback");
				super("UNDICI_REQUEST");
			} catch (err) {
				if (util$8.isStream(body)) util$8.destroy(body.on("error", util$8.nop), err);
				throw err;
			}
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.body = body;
			this.trailers = {};
			this.context = null;
			this.onInfo = onInfo || null;
			this.throwOnError = throwOnError;
			this.highWaterMark = highWaterMark;
			if (util$8.isStream(body)) body.on("error", (err) => {
				this.onError(err);
			});
			addSignal$4(this, signal);
		}
		onConnect(abort$1, context) {
			if (!this.callback) throw new RequestAbortedError$5();
			this.abort = abort$1;
			this.context = context;
		}
		onHeaders(statusCode, rawHeaders, resume$1, statusMessage) {
			const { callback, opaque, abort: abort$1, context, responseHeaders, highWaterMark } = this;
			const headers = responseHeaders === "raw" ? util$8.parseRawHeaders(rawHeaders) : util$8.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			const parsedHeaders = responseHeaders === "raw" ? util$8.parseHeaders(rawHeaders) : headers;
			const contentType = parsedHeaders["content-type"];
			const body = new Readable$3({
				resume: resume$1,
				abort: abort$1,
				contentType,
				highWaterMark
			});
			this.callback = null;
			this.res = body;
			if (callback !== null) if (this.throwOnError && statusCode >= 400) this.runInAsyncScope(getResolveErrorBodyCallback$1, null, {
				callback,
				body,
				contentType,
				statusCode,
				statusMessage,
				headers
			});
			else this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				trailers: this.trailers,
				opaque,
				body,
				context
			});
		}
		onData(chunk) {
			const { res } = this;
			return res.push(chunk);
		}
		onComplete(trailers) {
			const { res } = this;
			removeSignal$4(this);
			util$8.parseHeaders(trailers, this.trailers);
			res.push(null);
		}
		onError(err) {
			const { res, callback, body, opaque } = this;
			removeSignal$4(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (res) {
				this.res = null;
				queueMicrotask(() => {
					util$8.destroy(res, err);
				});
			}
			if (body) {
				this.body = null;
				util$8.destroy(body, err);
			}
		}
	};
	function request(opts, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			request.call(this, opts, (err, data) => {
				return err ? reject(err) : resolve$1(data);
			});
		});
		try {
			this.dispatch(opts, new RequestHandler(opts, callback));
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = request;
	module.exports.RequestHandler = RequestHandler;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-stream.js"(exports, module) {
	const { finished, PassThrough: PassThrough$1 } = __require("stream");
	const { InvalidArgumentError: InvalidArgumentError$10, InvalidReturnValueError: InvalidReturnValueError$1, RequestAbortedError: RequestAbortedError$4 } = require_errors();
	const util$7 = require_util$6();
	const { getResolveErrorBodyCallback } = require_util$4();
	const { AsyncResource: AsyncResource$3 } = __require("async_hooks");
	const { addSignal: addSignal$3, removeSignal: removeSignal$3 } = require_abort_signal();
	var StreamHandler = class extends AsyncResource$3 {
		constructor(opts, factory, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$10("invalid opts");
			const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$10("invalid callback");
				if (typeof factory !== "function") throw new InvalidArgumentError$10("invalid factory");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$10("signal must be an EventEmitter or EventTarget");
				if (method === "CONNECT") throw new InvalidArgumentError$10("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$10("invalid onInfo callback");
				super("UNDICI_STREAM");
			} catch (err) {
				if (util$7.isStream(body)) util$7.destroy(body.on("error", util$7.nop), err);
				throw err;
			}
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.factory = factory;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.context = null;
			this.trailers = null;
			this.body = body;
			this.onInfo = onInfo || null;
			this.throwOnError = throwOnError || false;
			if (util$7.isStream(body)) body.on("error", (err) => {
				this.onError(err);
			});
			addSignal$3(this, signal);
		}
		onConnect(abort$1, context) {
			if (!this.callback) throw new RequestAbortedError$4();
			this.abort = abort$1;
			this.context = context;
		}
		onHeaders(statusCode, rawHeaders, resume$1, statusMessage) {
			const { factory, opaque, context, callback, responseHeaders } = this;
			const headers = responseHeaders === "raw" ? util$7.parseRawHeaders(rawHeaders) : util$7.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			this.factory = null;
			let res;
			if (this.throwOnError && statusCode >= 400) {
				const parsedHeaders = responseHeaders === "raw" ? util$7.parseHeaders(rawHeaders) : headers;
				const contentType = parsedHeaders["content-type"];
				res = new PassThrough$1();
				this.callback = null;
				this.runInAsyncScope(getResolveErrorBodyCallback, null, {
					callback,
					body: res,
					contentType,
					statusCode,
					statusMessage,
					headers
				});
			} else {
				if (factory === null) return;
				res = this.runInAsyncScope(factory, null, {
					statusCode,
					headers,
					opaque,
					context
				});
				if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") throw new InvalidReturnValueError$1("expected Writable");
				finished(res, { readable: false }, (err) => {
					const { callback: callback$1, res: res$1, opaque: opaque$1, trailers, abort: abort$1 } = this;
					this.res = null;
					if (err || !res$1.readable) util$7.destroy(res$1, err);
					this.callback = null;
					this.runInAsyncScope(callback$1, null, err || null, {
						opaque: opaque$1,
						trailers
					});
					if (err) abort$1();
				});
			}
			res.on("drain", resume$1);
			this.res = res;
			const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
			return needDrain !== true;
		}
		onData(chunk) {
			const { res } = this;
			return res ? res.write(chunk) : true;
		}
		onComplete(trailers) {
			const { res } = this;
			removeSignal$3(this);
			if (!res) return;
			this.trailers = util$7.parseHeaders(trailers);
			res.end();
		}
		onError(err) {
			const { res, callback, opaque, body } = this;
			removeSignal$3(this);
			this.factory = null;
			if (res) {
				this.res = null;
				util$7.destroy(res, err);
			} else if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (body) {
				this.body = null;
				util$7.destroy(body, err);
			}
		}
	};
	function stream(opts, factory, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			stream.call(this, opts, factory, (err, data) => {
				return err ? reject(err) : resolve$1(data);
			});
		});
		try {
			this.dispatch(opts, new StreamHandler(opts, factory, callback));
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = stream;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-pipeline.js"(exports, module) {
	const { Readable: Readable$2, Duplex, PassThrough } = __require("stream");
	const { InvalidArgumentError: InvalidArgumentError$9, InvalidReturnValueError, RequestAbortedError: RequestAbortedError$3 } = require_errors();
	const util$6 = require_util$6();
	const { AsyncResource: AsyncResource$2 } = __require("async_hooks");
	const { addSignal: addSignal$2, removeSignal: removeSignal$2 } = require_abort_signal();
	const assert$9 = __require("assert");
	const kResume = Symbol("resume");
	var PipelineRequest = class extends Readable$2 {
		constructor() {
			super({ autoDestroy: true });
			this[kResume] = null;
		}
		_read() {
			const { [kResume]: resume$1 } = this;
			if (resume$1) {
				this[kResume] = null;
				resume$1();
			}
		}
		_destroy(err, callback) {
			this._read();
			callback(err);
		}
	};
	var PipelineResponse = class extends Readable$2 {
		constructor(resume$1) {
			super({ autoDestroy: true });
			this[kResume] = resume$1;
		}
		_read() {
			this[kResume]();
		}
		_destroy(err, callback) {
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$3();
			callback(err);
		}
	};
	var PipelineHandler = class extends AsyncResource$2 {
		constructor(opts, handler) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$9("invalid opts");
			if (typeof handler !== "function") throw new InvalidArgumentError$9("invalid handler");
			const { signal, method, opaque, onInfo, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$9("signal must be an EventEmitter or EventTarget");
			if (method === "CONNECT") throw new InvalidArgumentError$9("invalid method");
			if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$9("invalid onInfo callback");
			super("UNDICI_PIPELINE");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.handler = handler;
			this.abort = null;
			this.context = null;
			this.onInfo = onInfo || null;
			this.req = new PipelineRequest().on("error", util$6.nop);
			this.ret = new Duplex({
				readableObjectMode: opts.objectMode,
				autoDestroy: true,
				read: () => {
					const { body } = this;
					if (body && body.resume) body.resume();
				},
				write: (chunk, encoding, callback) => {
					const { req } = this;
					if (req.push(chunk, encoding) || req._readableState.destroyed) callback();
					else req[kResume] = callback;
				},
				destroy: (err, callback) => {
					const { body, req, res, ret, abort: abort$1 } = this;
					if (!err && !ret._readableState.endEmitted) err = new RequestAbortedError$3();
					if (abort$1 && err) abort$1();
					util$6.destroy(body, err);
					util$6.destroy(req, err);
					util$6.destroy(res, err);
					removeSignal$2(this);
					callback(err);
				}
			}).on("prefinish", () => {
				const { req } = this;
				req.push(null);
			});
			this.res = null;
			addSignal$2(this, signal);
		}
		onConnect(abort$1, context) {
			const { ret, res } = this;
			assert$9(!res, "pipeline cannot be retried");
			if (ret.destroyed) throw new RequestAbortedError$3();
			this.abort = abort$1;
			this.context = context;
		}
		onHeaders(statusCode, rawHeaders, resume$1) {
			const { opaque, handler, context } = this;
			if (statusCode < 200) {
				if (this.onInfo) {
					const headers = this.responseHeaders === "raw" ? util$6.parseRawHeaders(rawHeaders) : util$6.parseHeaders(rawHeaders);
					this.onInfo({
						statusCode,
						headers
					});
				}
				return;
			}
			this.res = new PipelineResponse(resume$1);
			let body;
			try {
				this.handler = null;
				const headers = this.responseHeaders === "raw" ? util$6.parseRawHeaders(rawHeaders) : util$6.parseHeaders(rawHeaders);
				body = this.runInAsyncScope(handler, null, {
					statusCode,
					headers,
					opaque,
					body: this.res,
					context
				});
			} catch (err) {
				this.res.on("error", util$6.nop);
				throw err;
			}
			if (!body || typeof body.on !== "function") throw new InvalidReturnValueError("expected Readable");
			body.on("data", (chunk) => {
				const { ret, body: body$1 } = this;
				if (!ret.push(chunk) && body$1.pause) body$1.pause();
			}).on("error", (err) => {
				const { ret } = this;
				util$6.destroy(ret, err);
			}).on("end", () => {
				const { ret } = this;
				ret.push(null);
			}).on("close", () => {
				const { ret } = this;
				if (!ret._readableState.ended) util$6.destroy(ret, new RequestAbortedError$3());
			});
			this.body = body;
		}
		onData(chunk) {
			const { res } = this;
			return res.push(chunk);
		}
		onComplete(trailers) {
			const { res } = this;
			res.push(null);
		}
		onError(err) {
			const { ret } = this;
			this.handler = null;
			util$6.destroy(ret, err);
		}
	};
	function pipeline$1(opts, handler) {
		try {
			const pipelineHandler = new PipelineHandler(opts, handler);
			this.dispatch({
				...opts,
				body: pipelineHandler.req
			}, pipelineHandler);
			return pipelineHandler.ret;
		} catch (err) {
			return new PassThrough().destroy(err);
		}
	}
	module.exports = pipeline$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-upgrade.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$8, RequestAbortedError: RequestAbortedError$2, SocketError: SocketError$1 } = require_errors();
	const { AsyncResource: AsyncResource$1 } = __require("async_hooks");
	const util$5 = require_util$6();
	const { addSignal: addSignal$1, removeSignal: removeSignal$1 } = require_abort_signal();
	const assert$8 = __require("assert");
	var UpgradeHandler = class extends AsyncResource$1 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$8("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$8("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$8("signal must be an EventEmitter or EventTarget");
			super("UNDICI_UPGRADE");
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.abort = null;
			this.context = null;
			addSignal$1(this, signal);
		}
		onConnect(abort$1, context) {
			if (!this.callback) throw new RequestAbortedError$2();
			this.abort = abort$1;
			this.context = null;
		}
		onHeaders() {
			throw new SocketError$1("bad upgrade", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			const { callback, opaque, context } = this;
			assert$8.strictEqual(statusCode, 101);
			removeSignal$1(this);
			this.callback = null;
			const headers = this.responseHeaders === "raw" ? util$5.parseRawHeaders(rawHeaders) : util$5.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				headers,
				socket,
				opaque,
				context
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal$1(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function upgrade(opts, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			upgrade.call(this, opts, (err, data) => {
				return err ? reject(err) : resolve$1(data);
			});
		});
		try {
			const upgradeHandler = new UpgradeHandler(opts, callback);
			this.dispatch({
				...opts,
				method: opts.method || "GET",
				upgrade: opts.protocol || "Websocket"
			}, upgradeHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = upgrade;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-connect.js"(exports, module) {
	const { AsyncResource } = __require("async_hooks");
	const { InvalidArgumentError: InvalidArgumentError$7, RequestAbortedError: RequestAbortedError$1, SocketError } = require_errors();
	const util$4 = require_util$6();
	const { addSignal, removeSignal } = require_abort_signal();
	var ConnectHandler = class extends AsyncResource {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$7("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$7("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$7("signal must be an EventEmitter or EventTarget");
			super("UNDICI_CONNECT");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.callback = callback;
			this.abort = null;
			addSignal(this, signal);
		}
		onConnect(abort$1, context) {
			if (!this.callback) throw new RequestAbortedError$1();
			this.abort = abort$1;
			this.context = context;
		}
		onHeaders() {
			throw new SocketError("bad connect", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			const { callback, opaque, context } = this;
			removeSignal(this);
			this.callback = null;
			let headers = rawHeaders;
			if (headers != null) headers = this.responseHeaders === "raw" ? util$4.parseRawHeaders(rawHeaders) : util$4.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				socket,
				opaque,
				context
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function connect(opts, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			connect.call(this, opts, (err, data) => {
				return err ? reject(err) : resolve$1(data);
			});
		});
		try {
			const connectHandler = new ConnectHandler(opts, callback);
			this.dispatch({
				...opts,
				method: "CONNECT"
			}, connectHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = connect;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/index.js
var require_api = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/index.js"(exports, module) {
	module.exports.request = require_api_request();
	module.exports.stream = require_api_stream();
	module.exports.pipeline = require_api_pipeline();
	module.exports.upgrade = require_api_upgrade();
	module.exports.connect = require_api_connect();
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-errors.js"(exports, module) {
	const { UndiciError: UndiciError$1 } = require_errors();
	var MockNotMatchedError$1 = class MockNotMatchedError$1 extends UndiciError$1 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, MockNotMatchedError$1);
			this.name = "MockNotMatchedError";
			this.message = message || "The request does not match any registered mock dispatches";
			this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
		}
	};
	module.exports = { MockNotMatchedError: MockNotMatchedError$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-symbols.js"(exports, module) {
	module.exports = {
		kAgent: Symbol("agent"),
		kOptions: Symbol("options"),
		kFactory: Symbol("factory"),
		kDispatches: Symbol("dispatches"),
		kDispatchKey: Symbol("dispatch key"),
		kDefaultHeaders: Symbol("default headers"),
		kDefaultTrailers: Symbol("default trailers"),
		kContentLength: Symbol("content length"),
		kMockAgent: Symbol("mock agent"),
		kMockAgentSet: Symbol("mock agent set"),
		kMockAgentGet: Symbol("mock agent get"),
		kMockDispatch: Symbol("mock dispatch"),
		kClose: Symbol("close"),
		kOriginalClose: Symbol("original agent close"),
		kOrigin: Symbol("origin"),
		kIsMockActive: Symbol("is mock active"),
		kNetConnect: Symbol("net connect"),
		kGetNetConnect: Symbol("get net connect"),
		kConnected: Symbol("connected")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-utils.js"(exports, module) {
	const { MockNotMatchedError } = require_mock_errors();
	const { kDispatches: kDispatches$4, kMockAgent: kMockAgent$2, kOriginalDispatch: kOriginalDispatch$2, kOrigin: kOrigin$2, kGetNetConnect: kGetNetConnect$1 } = require_mock_symbols();
	const { buildURL: buildURL$1, nop } = require_util$6();
	const { STATUS_CODES: STATUS_CODES$1 } = __require("http");
	const { types: { isPromise } } = __require("util");
	function matchValue$1(match, value$1) {
		if (typeof match === "string") return match === value$1;
		if (match instanceof RegExp) return match.test(value$1);
		if (typeof match === "function") return match(value$1) === true;
		return false;
	}
	function lowerCaseEntries(headers) {
		return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
			return [headerName.toLocaleLowerCase(), headerValue];
		}));
	}
	/**
	* @param {import('../../index').Headers|string[]|Record<string, string>} headers
	* @param {string} key
	*/
	function getHeaderByName(headers, key) {
		if (Array.isArray(headers)) {
			for (let i = 0; i < headers.length; i += 2) if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) return headers[i + 1];
			return void 0;
		} else if (typeof headers.get === "function") return headers.get(key);
		else return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
	}
	/** @param {string[]} headers */
	function buildHeadersFromArray(headers) {
		const clone = headers.slice();
		const entries = [];
		for (let index = 0; index < clone.length; index += 2) entries.push([clone[index], clone[index + 1]]);
		return Object.fromEntries(entries);
	}
	function matchHeaders(mockDispatch$1, headers) {
		if (typeof mockDispatch$1.headers === "function") {
			if (Array.isArray(headers)) headers = buildHeadersFromArray(headers);
			return mockDispatch$1.headers(headers ? lowerCaseEntries(headers) : {});
		}
		if (typeof mockDispatch$1.headers === "undefined") return true;
		if (typeof headers !== "object" || typeof mockDispatch$1.headers !== "object") return false;
		for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch$1.headers)) {
			const headerValue = getHeaderByName(headers, matchHeaderName);
			if (!matchValue$1(matchHeaderValue, headerValue)) return false;
		}
		return true;
	}
	function safeUrl(path$9) {
		if (typeof path$9 !== "string") return path$9;
		const pathSegments = path$9.split("?");
		if (pathSegments.length !== 2) return path$9;
		const qp = new URLSearchParams(pathSegments.pop());
		qp.sort();
		return [...pathSegments, qp.toString()].join("?");
	}
	function matchKey(mockDispatch$1, { path: path$9, method, body, headers }) {
		const pathMatch = matchValue$1(mockDispatch$1.path, path$9);
		const methodMatch = matchValue$1(mockDispatch$1.method, method);
		const bodyMatch = typeof mockDispatch$1.body !== "undefined" ? matchValue$1(mockDispatch$1.body, body) : true;
		const headersMatch = matchHeaders(mockDispatch$1, headers);
		return pathMatch && methodMatch && bodyMatch && headersMatch;
	}
	function getResponseData$1(data) {
		if (Buffer.isBuffer(data)) return data;
		else if (typeof data === "object") return JSON.stringify(data);
		else return data.toString();
	}
	function getMockDispatch(mockDispatches, key) {
		const basePath = key.query ? buildURL$1(key.path, key.query) : key.path;
		const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
		let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path$9 }) => matchValue$1(safeUrl(path$9), resolvedPath));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue$1(method, key.method));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue$1(body, key.body) : true);
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
		matchedMockDispatches = matchedMockDispatches.filter((mockDispatch$1) => matchHeaders(mockDispatch$1, key.headers));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
		return matchedMockDispatches[0];
	}
	function addMockDispatch$1(mockDispatches, key, data) {
		const baseData = {
			timesInvoked: 0,
			times: 1,
			persist: false,
			consumed: false
		};
		const replyData = typeof data === "function" ? { callback: data } : { ...data };
		const newMockDispatch = {
			...baseData,
			...key,
			pending: true,
			data: {
				error: null,
				...replyData
			}
		};
		mockDispatches.push(newMockDispatch);
		return newMockDispatch;
	}
	function deleteMockDispatch(mockDispatches, key) {
		const index = mockDispatches.findIndex((dispatch) => {
			if (!dispatch.consumed) return false;
			return matchKey(dispatch, key);
		});
		if (index !== -1) mockDispatches.splice(index, 1);
	}
	function buildKey$1(opts) {
		const { path: path$9, method, body, headers, query } = opts;
		return {
			path: path$9,
			method,
			body,
			headers,
			query
		};
	}
	function generateKeyValues(data) {
		return Object.entries(data).reduce((keyValuePairs, [key, value$1]) => [
			...keyValuePairs,
			Buffer.from(`${key}`),
			Array.isArray(value$1) ? value$1.map((x$3) => Buffer.from(`${x$3}`)) : Buffer.from(`${value$1}`)
		], []);
	}
	/**
	* @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
	* @param {number} statusCode
	*/
	function getStatusText(statusCode) {
		return STATUS_CODES$1[statusCode] || "unknown";
	}
	async function getResponse(body) {
		const buffers = [];
		for await (const data of body) buffers.push(data);
		return Buffer.concat(buffers).toString("utf8");
	}
	/**
	* Mock dispatch function used to simulate undici dispatches
	*/
	function mockDispatch(opts, handler) {
		const key = buildKey$1(opts);
		const mockDispatch$1 = getMockDispatch(this[kDispatches$4], key);
		mockDispatch$1.timesInvoked++;
		if (mockDispatch$1.data.callback) mockDispatch$1.data = {
			...mockDispatch$1.data,
			...mockDispatch$1.data.callback(opts)
		};
		const { data: { statusCode, data, headers, trailers, error: error$1 }, delay, persist } = mockDispatch$1;
		const { timesInvoked, times } = mockDispatch$1;
		mockDispatch$1.consumed = !persist && timesInvoked >= times;
		mockDispatch$1.pending = timesInvoked < times;
		if (error$1 !== null) {
			deleteMockDispatch(this[kDispatches$4], key);
			handler.onError(error$1);
			return true;
		}
		if (typeof delay === "number" && delay > 0) setTimeout(() => {
			handleReply(this[kDispatches$4]);
		}, delay);
		else handleReply(this[kDispatches$4]);
		function handleReply(mockDispatches, _data = data) {
			const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
			const body = typeof _data === "function" ? _data({
				...opts,
				headers: optsHeaders
			}) : _data;
			if (isPromise(body)) {
				body.then((newData) => handleReply(mockDispatches, newData));
				return;
			}
			const responseData = getResponseData$1(body);
			const responseHeaders = generateKeyValues(headers);
			const responseTrailers = generateKeyValues(trailers);
			handler.abort = nop;
			handler.onHeaders(statusCode, responseHeaders, resume$1, getStatusText(statusCode));
			handler.onData(Buffer.from(responseData));
			handler.onComplete(responseTrailers);
			deleteMockDispatch(mockDispatches, key);
		}
		function resume$1() {}
		return true;
	}
	function buildMockDispatch$2() {
		const agent = this[kMockAgent$2];
		const origin = this[kOrigin$2];
		const originalDispatch = this[kOriginalDispatch$2];
		return function dispatch(opts, handler) {
			if (agent.isMockActive) try {
				mockDispatch.call(this, opts, handler);
			} catch (error$1) {
				if (error$1 instanceof MockNotMatchedError) {
					const netConnect = agent[kGetNetConnect$1]();
					if (netConnect === false) throw new MockNotMatchedError(`${error$1.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
					if (checkNetConnect(netConnect, origin)) originalDispatch.call(this, opts, handler);
					else throw new MockNotMatchedError(`${error$1.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
				} else throw error$1;
			}
			else originalDispatch.call(this, opts, handler);
		};
	}
	function checkNetConnect(netConnect, origin) {
		const url = new URL(origin);
		if (netConnect === true) return true;
		else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue$1(matcher, url.host))) return true;
		return false;
	}
	function buildMockOptions$1(opts) {
		if (opts) {
			const { agent,...mockOptions } = opts;
			return mockOptions;
		}
	}
	module.exports = {
		getResponseData: getResponseData$1,
		getMockDispatch,
		addMockDispatch: addMockDispatch$1,
		deleteMockDispatch,
		buildKey: buildKey$1,
		generateKeyValues,
		matchValue: matchValue$1,
		getResponse,
		getStatusText,
		mockDispatch,
		buildMockDispatch: buildMockDispatch$2,
		checkNetConnect,
		buildMockOptions: buildMockOptions$1,
		getHeaderByName
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-interceptor.js"(exports, module) {
	const { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
	const { kDispatches: kDispatches$3, kDispatchKey, kDefaultHeaders, kDefaultTrailers, kContentLength, kMockDispatch } = require_mock_symbols();
	const { InvalidArgumentError: InvalidArgumentError$6 } = require_errors();
	const { buildURL } = require_util$6();
	/**
	* Defines the scope API for an interceptor reply
	*/
	var MockScope = class {
		constructor(mockDispatch$1) {
			this[kMockDispatch] = mockDispatch$1;
		}
		/**
		* Delay a reply by a set amount in ms.
		*/
		delay(waitInMs) {
			if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) throw new InvalidArgumentError$6("waitInMs must be a valid integer > 0");
			this[kMockDispatch].delay = waitInMs;
			return this;
		}
		/**
		* For a defined reply, never mark as consumed.
		*/
		persist() {
			this[kMockDispatch].persist = true;
			return this;
		}
		/**
		* Allow one to define a reply for a set amount of matching requests.
		*/
		times(repeatTimes) {
			if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) throw new InvalidArgumentError$6("repeatTimes must be a valid integer > 0");
			this[kMockDispatch].times = repeatTimes;
			return this;
		}
	};
	/**
	* Defines an interceptor for a Mock
	*/
	var MockInterceptor$2 = class {
		constructor(opts, mockDispatches) {
			if (typeof opts !== "object") throw new InvalidArgumentError$6("opts must be an object");
			if (typeof opts.path === "undefined") throw new InvalidArgumentError$6("opts.path must be defined");
			if (typeof opts.method === "undefined") opts.method = "GET";
			if (typeof opts.path === "string") if (opts.query) opts.path = buildURL(opts.path, opts.query);
			else {
				const parsedURL = new URL(opts.path, "data://");
				opts.path = parsedURL.pathname + parsedURL.search;
			}
			if (typeof opts.method === "string") opts.method = opts.method.toUpperCase();
			this[kDispatchKey] = buildKey(opts);
			this[kDispatches$3] = mockDispatches;
			this[kDefaultHeaders] = {};
			this[kDefaultTrailers] = {};
			this[kContentLength] = false;
		}
		createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
			const responseData = getResponseData(data);
			const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
			const headers = {
				...this[kDefaultHeaders],
				...contentLength,
				...responseOptions.headers
			};
			const trailers = {
				...this[kDefaultTrailers],
				...responseOptions.trailers
			};
			return {
				statusCode,
				data,
				headers,
				trailers
			};
		}
		validateReplyParameters(statusCode, data, responseOptions) {
			if (typeof statusCode === "undefined") throw new InvalidArgumentError$6("statusCode must be defined");
			if (typeof data === "undefined") throw new InvalidArgumentError$6("data must be defined");
			if (typeof responseOptions !== "object") throw new InvalidArgumentError$6("responseOptions must be an object");
		}
		/**
		* Mock an undici request with a defined reply.
		*/
		reply(replyData) {
			if (typeof replyData === "function") {
				const wrappedDefaultsCallback = (opts) => {
					const resolvedData = replyData(opts);
					if (typeof resolvedData !== "object") throw new InvalidArgumentError$6("reply options callback must return an object");
					const { statusCode: statusCode$1, data: data$1 = "", responseOptions: responseOptions$1 = {} } = resolvedData;
					this.validateReplyParameters(statusCode$1, data$1, responseOptions$1);
					return { ...this.createMockScopeDispatchData(statusCode$1, data$1, responseOptions$1) };
				};
				const newMockDispatch$1 = addMockDispatch(this[kDispatches$3], this[kDispatchKey], wrappedDefaultsCallback);
				return new MockScope(newMockDispatch$1);
			}
			const [statusCode, data = "", responseOptions = {}] = [...arguments];
			this.validateReplyParameters(statusCode, data, responseOptions);
			const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
			const newMockDispatch = addMockDispatch(this[kDispatches$3], this[kDispatchKey], dispatchData);
			return new MockScope(newMockDispatch);
		}
		/**
		* Mock an undici request with a defined error.
		*/
		replyWithError(error$1) {
			if (typeof error$1 === "undefined") throw new InvalidArgumentError$6("error must be defined");
			const newMockDispatch = addMockDispatch(this[kDispatches$3], this[kDispatchKey], { error: error$1 });
			return new MockScope(newMockDispatch);
		}
		/**
		* Set default reply headers on the interceptor for subsequent replies
		*/
		defaultReplyHeaders(headers) {
			if (typeof headers === "undefined") throw new InvalidArgumentError$6("headers must be defined");
			this[kDefaultHeaders] = headers;
			return this;
		}
		/**
		* Set default reply trailers on the interceptor for subsequent replies
		*/
		defaultReplyTrailers(trailers) {
			if (typeof trailers === "undefined") throw new InvalidArgumentError$6("trailers must be defined");
			this[kDefaultTrailers] = trailers;
			return this;
		}
		/**
		* Set reply content length header for replies on the interceptor
		*/
		replyContentLength() {
			this[kContentLength] = true;
			return this;
		}
	};
	module.exports.MockInterceptor = MockInterceptor$2;
	module.exports.MockScope = MockScope;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-client.js"(exports, module) {
	const { promisify: promisify$2 } = __require("util");
	const Client$1 = require_client();
	const { buildMockDispatch: buildMockDispatch$1 } = require_mock_utils();
	const { kDispatches: kDispatches$2, kMockAgent: kMockAgent$1, kClose: kClose$2, kOriginalClose: kOriginalClose$1, kOrigin: kOrigin$1, kOriginalDispatch: kOriginalDispatch$1, kConnected: kConnected$1 } = require_mock_symbols();
	const { MockInterceptor: MockInterceptor$1 } = require_mock_interceptor();
	const Symbols$1 = require_symbols$4();
	const { InvalidArgumentError: InvalidArgumentError$5 } = require_errors();
	/**
	* MockClient provides an API that extends the Client to influence the mockDispatches.
	*/
	var MockClient$2 = class extends Client$1 {
		constructor(origin, opts) {
			super(origin, opts);
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$5("Argument opts.agent must implement Agent");
			this[kMockAgent$1] = opts.agent;
			this[kOrigin$1] = origin;
			this[kDispatches$2] = [];
			this[kConnected$1] = 1;
			this[kOriginalDispatch$1] = this.dispatch;
			this[kOriginalClose$1] = this.close.bind(this);
			this.dispatch = buildMockDispatch$1.call(this);
			this.close = this[kClose$2];
		}
		get [Symbols$1.kConnected]() {
			return this[kConnected$1];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor$1(opts, this[kDispatches$2]);
		}
		async [kClose$2]() {
			await promisify$2(this[kOriginalClose$1])();
			this[kConnected$1] = 0;
			this[kMockAgent$1][Symbols$1.kClients].delete(this[kOrigin$1]);
		}
	};
	module.exports = MockClient$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-pool.js"(exports, module) {
	const { promisify: promisify$1 } = __require("util");
	const Pool$2 = require_pool();
	const { buildMockDispatch } = require_mock_utils();
	const { kDispatches: kDispatches$1, kMockAgent, kClose: kClose$1, kOriginalClose, kOrigin, kOriginalDispatch, kConnected } = require_mock_symbols();
	const { MockInterceptor } = require_mock_interceptor();
	const Symbols = require_symbols$4();
	const { InvalidArgumentError: InvalidArgumentError$4 } = require_errors();
	/**
	* MockPool provides an API that extends the Pool to influence the mockDispatches.
	*/
	var MockPool$2 = class extends Pool$2 {
		constructor(origin, opts) {
			super(origin, opts);
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$4("Argument opts.agent must implement Agent");
			this[kMockAgent] = opts.agent;
			this[kOrigin] = origin;
			this[kDispatches$1] = [];
			this[kConnected] = 1;
			this[kOriginalDispatch] = this.dispatch;
			this[kOriginalClose] = this.close.bind(this);
			this.dispatch = buildMockDispatch.call(this);
			this.close = this[kClose$1];
		}
		get [Symbols.kConnected]() {
			return this[kConnected];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor(opts, this[kDispatches$1]);
		}
		async [kClose$1]() {
			await promisify$1(this[kOriginalClose])();
			this[kConnected] = 0;
			this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
		}
	};
	module.exports = MockPool$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/pluralizer.js"(exports, module) {
	const singulars = {
		pronoun: "it",
		is: "is",
		was: "was",
		this: "this"
	};
	const plurals = {
		pronoun: "they",
		is: "are",
		was: "were",
		this: "these"
	};
	module.exports = class Pluralizer$1 {
		constructor(singular, plural) {
			this.singular = singular;
			this.plural = plural;
		}
		pluralize(count) {
			const one = count === 1;
			const keys = one ? singulars : plurals;
			const noun = one ? this.singular : this.plural;
			return {
				...keys,
				count,
				noun
			};
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports, module) {
	const { Transform } = __require("stream");
	const { Console } = __require("console");
	/**
	* Gets the output of `console.table(…)` as a string.
	*/
	module.exports = class PendingInterceptorsFormatter$1 {
		constructor({ disableColors } = {}) {
			this.transform = new Transform({ transform(chunk, _enc, cb) {
				cb(null, chunk);
			} });
			this.logger = new Console({
				stdout: this.transform,
				inspectOptions: { colors: !disableColors && !process.env.CI }
			});
		}
		format(pendingInterceptors) {
			const withPrettyHeaders = pendingInterceptors.map(({ method, path: path$9, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
				Method: method,
				Origin: origin,
				Path: path$9,
				"Status code": statusCode,
				Persistent: persist ? "✅" : "❌",
				Invocations: timesInvoked,
				Remaining: persist ? Infinity : times - timesInvoked
			}));
			this.logger.table(withPrettyHeaders);
			return this.transform.read().toString();
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-agent.js"(exports, module) {
	const { kClients } = require_symbols$4();
	const Agent$3 = require_agent();
	const { kAgent: kAgent$1, kMockAgentSet, kMockAgentGet, kDispatches, kIsMockActive, kNetConnect, kGetNetConnect, kOptions, kFactory } = require_mock_symbols();
	const MockClient$1 = require_mock_client();
	const MockPool$1 = require_mock_pool();
	const { matchValue, buildMockOptions } = require_mock_utils();
	const { InvalidArgumentError: InvalidArgumentError$3, UndiciError } = require_errors();
	const Dispatcher$1 = require_dispatcher();
	const Pluralizer = require_pluralizer();
	const PendingInterceptorsFormatter = require_pending_interceptors_formatter();
	var FakeWeakRef = class {
		constructor(value$1) {
			this.value = value$1;
		}
		deref() {
			return this.value;
		}
	};
	var MockAgent$1 = class extends Dispatcher$1 {
		constructor(opts) {
			super(opts);
			this[kNetConnect] = true;
			this[kIsMockActive] = true;
			if (opts && opts.agent && typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$3("Argument opts.agent must implement Agent");
			const agent = opts && opts.agent ? opts.agent : new Agent$3(opts);
			this[kAgent$1] = agent;
			this[kClients] = agent[kClients];
			this[kOptions] = buildMockOptions(opts);
		}
		get(origin) {
			let dispatcher = this[kMockAgentGet](origin);
			if (!dispatcher) {
				dispatcher = this[kFactory](origin);
				this[kMockAgentSet](origin, dispatcher);
			}
			return dispatcher;
		}
		dispatch(opts, handler) {
			this.get(opts.origin);
			return this[kAgent$1].dispatch(opts, handler);
		}
		async close() {
			await this[kAgent$1].close();
			this[kClients].clear();
		}
		deactivate() {
			this[kIsMockActive] = false;
		}
		activate() {
			this[kIsMockActive] = true;
		}
		enableNetConnect(matcher) {
			if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) if (Array.isArray(this[kNetConnect])) this[kNetConnect].push(matcher);
			else this[kNetConnect] = [matcher];
			else if (typeof matcher === "undefined") this[kNetConnect] = true;
			else throw new InvalidArgumentError$3("Unsupported matcher. Must be one of String|Function|RegExp.");
		}
		disableNetConnect() {
			this[kNetConnect] = false;
		}
		get isMockActive() {
			return this[kIsMockActive];
		}
		[kMockAgentSet](origin, dispatcher) {
			this[kClients].set(origin, new FakeWeakRef(dispatcher));
		}
		[kFactory](origin) {
			const mockOptions = Object.assign({ agent: this }, this[kOptions]);
			return this[kOptions] && this[kOptions].connections === 1 ? new MockClient$1(origin, mockOptions) : new MockPool$1(origin, mockOptions);
		}
		[kMockAgentGet](origin) {
			const ref = this[kClients].get(origin);
			if (ref) return ref.deref();
			if (typeof origin !== "string") {
				const dispatcher = this[kFactory]("http://localhost:9999");
				this[kMockAgentSet](origin, dispatcher);
				return dispatcher;
			}
			for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
				const nonExplicitDispatcher = nonExplicitRef.deref();
				if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
					const dispatcher = this[kFactory](origin);
					this[kMockAgentSet](origin, dispatcher);
					dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
					return dispatcher;
				}
			}
		}
		[kGetNetConnect]() {
			return this[kNetConnect];
		}
		pendingInterceptors() {
			const mockAgentClients = this[kClients];
			return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map((dispatch) => ({
				...dispatch,
				origin
			}))).filter(({ pending }) => pending);
		}
		assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
			const pending = this.pendingInterceptors();
			if (pending.length === 0) return;
			const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
			throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
		}
	};
	module.exports = MockAgent$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/proxy-agent.js"(exports, module) {
	const { kProxy, kClose, kDestroy, kInterceptors } = require_symbols$4();
	const { URL: URL$2 } = __require("url");
	const Agent$2 = require_agent();
	const Pool$1 = require_pool();
	const DispatcherBase = require_dispatcher_base();
	const { InvalidArgumentError: InvalidArgumentError$2, RequestAbortedError } = require_errors();
	const buildConnector$1 = require_connect();
	const kAgent = Symbol("proxy agent");
	const kClient = Symbol("proxy client");
	const kProxyHeaders = Symbol("proxy headers");
	const kRequestTls = Symbol("request tls settings");
	const kProxyTls = Symbol("proxy tls settings");
	const kConnectEndpoint = Symbol("connect endpoint function");
	function defaultProtocolPort(protocol) {
		return protocol === "https:" ? 443 : 80;
	}
	function buildProxyOptions(opts) {
		if (typeof opts === "string") opts = { uri: opts };
		if (!opts || !opts.uri) throw new InvalidArgumentError$2("Proxy opts.uri is mandatory");
		return {
			uri: opts.uri,
			protocol: opts.protocol || "https"
		};
	}
	function defaultFactory(origin, opts) {
		return new Pool$1(origin, opts);
	}
	var ProxyAgent$1 = class extends DispatcherBase {
		constructor(opts) {
			super(opts);
			this[kProxy] = buildProxyOptions(opts);
			this[kAgent] = new Agent$2(opts);
			this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
			if (typeof opts === "string") opts = { uri: opts };
			if (!opts || !opts.uri) throw new InvalidArgumentError$2("Proxy opts.uri is mandatory");
			const { clientFactory = defaultFactory } = opts;
			if (typeof clientFactory !== "function") throw new InvalidArgumentError$2("Proxy opts.clientFactory must be a function.");
			this[kRequestTls] = opts.requestTls;
			this[kProxyTls] = opts.proxyTls;
			this[kProxyHeaders] = opts.headers || {};
			const resolvedUrl = new URL$2(opts.uri);
			const { origin, port, host, username, password } = resolvedUrl;
			if (opts.auth && opts.token) throw new InvalidArgumentError$2("opts.auth cannot be used in combination with opts.token");
			else if (opts.auth) this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
			else if (opts.token) this[kProxyHeaders]["proxy-authorization"] = opts.token;
			else if (username && password) this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
			const connect$2 = buildConnector$1({ ...opts.proxyTls });
			this[kConnectEndpoint] = buildConnector$1({ ...opts.requestTls });
			this[kClient] = clientFactory(resolvedUrl, { connect: connect$2 });
			this[kAgent] = new Agent$2({
				...opts,
				connect: async (opts$1, callback) => {
					let requestedHost = opts$1.host;
					if (!opts$1.port) requestedHost += `:${defaultProtocolPort(opts$1.protocol)}`;
					try {
						const { socket, statusCode } = await this[kClient].connect({
							origin,
							port,
							path: requestedHost,
							signal: opts$1.signal,
							headers: {
								...this[kProxyHeaders],
								host
							}
						});
						if (statusCode !== 200) {
							socket.on("error", () => {}).destroy();
							callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
						}
						if (opts$1.protocol !== "https:") {
							callback(null, socket);
							return;
						}
						let servername;
						if (this[kRequestTls]) servername = this[kRequestTls].servername;
						else servername = opts$1.servername;
						this[kConnectEndpoint]({
							...opts$1,
							servername,
							httpSocket: socket
						}, callback);
					} catch (err) {
						callback(err);
					}
				}
			});
		}
		dispatch(opts, handler) {
			const { host } = new URL$2(opts.origin);
			const headers = buildHeaders(opts.headers);
			throwIfProxyAuthIsSent(headers);
			return this[kAgent].dispatch({
				...opts,
				headers: {
					...headers,
					host
				}
			}, handler);
		}
		async [kClose]() {
			await this[kAgent].close();
			await this[kClient].close();
		}
		async [kDestroy]() {
			await this[kAgent].destroy();
			await this[kClient].destroy();
		}
	};
	/**
	* @param {string[] | Record<string, string>} headers
	* @returns {Record<string, string>}
	*/
	function buildHeaders(headers) {
		if (Array.isArray(headers)) {
			/** @type {Record<string, string>} */
			const headersPair = {};
			for (let i = 0; i < headers.length; i += 2) headersPair[headers[i]] = headers[i + 1];
			return headersPair;
		}
		return headers;
	}
	/**
	* @param {Record<string, string>} headers
	*
	* Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
	* Nevertheless, it was changed and to avoid a security vulnerability by end users
	* this check was created.
	* It should be removed in the next major version for performance reasons
	*/
	function throwIfProxyAuthIsSent(headers) {
		const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
		if (existProxyAuth) throw new InvalidArgumentError$2("Proxy-Authorization should be sent in ProxyAgent constructor");
	}
	module.exports = ProxyAgent$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/RetryHandler.js"(exports, module) {
	const assert$7 = __require("assert");
	const { kRetryHandlerDefaultRetry } = require_symbols$4();
	const { RequestRetryError } = require_errors();
	const { isDisturbed: isDisturbed$1, parseHeaders, parseRangeHeader } = require_util$6();
	function calculateRetryAfterHeader(retryAfter) {
		const current = Date.now();
		const diff = new Date(retryAfter).getTime() - current;
		return diff;
	}
	var RetryHandler$1 = class RetryHandler$1 {
		constructor(opts, handlers) {
			const { retryOptions,...dispatchOpts } = opts;
			const { retry: retryFn, maxRetries, maxTimeout, minTimeout, timeoutFactor, methods, errorCodes, retryAfter, statusCodes } = retryOptions ?? {};
			this.dispatch = handlers.dispatch;
			this.handler = handlers.handler;
			this.opts = dispatchOpts;
			this.abort = null;
			this.aborted = false;
			this.retryOpts = {
				retry: retryFn ?? RetryHandler$1[kRetryHandlerDefaultRetry],
				retryAfter: retryAfter ?? true,
				maxTimeout: maxTimeout ?? 30 * 1e3,
				timeout: minTimeout ?? 500,
				timeoutFactor: timeoutFactor ?? 2,
				maxRetries: maxRetries ?? 5,
				methods: methods ?? [
					"GET",
					"HEAD",
					"OPTIONS",
					"PUT",
					"DELETE",
					"TRACE"
				],
				statusCodes: statusCodes ?? [
					500,
					502,
					503,
					504,
					429
				],
				errorCodes: errorCodes ?? [
					"ECONNRESET",
					"ECONNREFUSED",
					"ENOTFOUND",
					"ENETDOWN",
					"ENETUNREACH",
					"EHOSTDOWN",
					"EHOSTUNREACH",
					"EPIPE"
				]
			};
			this.retryCount = 0;
			this.start = 0;
			this.end = null;
			this.etag = null;
			this.resume = null;
			this.handler.onConnect((reason) => {
				this.aborted = true;
				if (this.abort) this.abort(reason);
				else this.reason = reason;
			});
		}
		onRequestSent() {
			if (this.handler.onRequestSent) this.handler.onRequestSent();
		}
		onUpgrade(statusCode, headers, socket) {
			if (this.handler.onUpgrade) this.handler.onUpgrade(statusCode, headers, socket);
		}
		onConnect(abort$1) {
			if (this.aborted) abort$1(this.reason);
			else this.abort = abort$1;
		}
		onBodySent(chunk) {
			if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
		}
		static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {
			const { statusCode, code, headers } = err;
			const { method, retryOptions } = opts;
			const { maxRetries, timeout, maxTimeout, timeoutFactor, statusCodes, errorCodes, methods } = retryOptions;
			let { counter, currentTimeout } = state;
			currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
			if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
				cb(err);
				return;
			}
			if (Array.isArray(methods) && !methods.includes(method)) {
				cb(err);
				return;
			}
			if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
				cb(err);
				return;
			}
			if (counter > maxRetries) {
				cb(err);
				return;
			}
			let retryAfterHeader = headers != null && headers["retry-after"];
			if (retryAfterHeader) {
				retryAfterHeader = Number(retryAfterHeader);
				retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3;
			}
			const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
			state.currentTimeout = retryTimeout;
			setTimeout(() => cb(null), retryTimeout);
		}
		onHeaders(statusCode, rawHeaders, resume$1, statusMessage) {
			const headers = parseHeaders(rawHeaders);
			this.retryCount += 1;
			if (statusCode >= 300) {
				this.abort(new RequestRetryError("Request failed", statusCode, {
					headers,
					count: this.retryCount
				}));
				return false;
			}
			if (this.resume != null) {
				this.resume = null;
				if (statusCode !== 206) return true;
				const contentRange = parseRangeHeader(headers["content-range"]);
				if (!contentRange) {
					this.abort(new RequestRetryError("Content-Range mismatch", statusCode, {
						headers,
						count: this.retryCount
					}));
					return false;
				}
				if (this.etag != null && this.etag !== headers.etag) {
					this.abort(new RequestRetryError("ETag mismatch", statusCode, {
						headers,
						count: this.retryCount
					}));
					return false;
				}
				const { start, size, end = size } = contentRange;
				assert$7(this.start === start, "content-range mismatch");
				assert$7(this.end == null || this.end === end, "content-range mismatch");
				this.resume = resume$1;
				return true;
			}
			if (this.end == null) {
				if (statusCode === 206) {
					const range = parseRangeHeader(headers["content-range"]);
					if (range == null) return this.handler.onHeaders(statusCode, rawHeaders, resume$1, statusMessage);
					const { start, size, end = size } = range;
					assert$7(start != null && Number.isFinite(start) && this.start !== start, "content-range mismatch");
					assert$7(Number.isFinite(start));
					assert$7(end != null && Number.isFinite(end) && this.end !== end, "invalid content-length");
					this.start = start;
					this.end = end;
				}
				if (this.end == null) {
					const contentLength = headers["content-length"];
					this.end = contentLength != null ? Number(contentLength) : null;
				}
				assert$7(Number.isFinite(this.start));
				assert$7(this.end == null || Number.isFinite(this.end), "invalid content-length");
				this.resume = resume$1;
				this.etag = headers.etag != null ? headers.etag : null;
				return this.handler.onHeaders(statusCode, rawHeaders, resume$1, statusMessage);
			}
			const err = new RequestRetryError("Request failed", statusCode, {
				headers,
				count: this.retryCount
			});
			this.abort(err);
			return false;
		}
		onData(chunk) {
			this.start += chunk.length;
			return this.handler.onData(chunk);
		}
		onComplete(rawTrailers) {
			this.retryCount = 0;
			return this.handler.onComplete(rawTrailers);
		}
		onError(err) {
			if (this.aborted || isDisturbed$1(this.opts.body)) return this.handler.onError(err);
			this.retryOpts.retry(err, {
				state: {
					counter: this.retryCount++,
					currentTimeout: this.retryAfter
				},
				opts: {
					retryOptions: this.retryOpts,
					...this.opts
				}
			}, onRetry.bind(this));
			function onRetry(err$1) {
				if (err$1 != null || this.aborted || isDisturbed$1(this.opts.body)) return this.handler.onError(err$1);
				if (this.start !== 0) this.opts = {
					...this.opts,
					headers: {
						...this.opts.headers,
						range: `bytes=${this.start}-${this.end ?? ""}`
					}
				};
				try {
					this.dispatch(this.opts, this);
				} catch (err$2) {
					this.handler.onError(err$2);
				}
			}
		}
	};
	module.exports = RetryHandler$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/global.js
var require_global = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/global.js"(exports, module) {
	const globalDispatcher = Symbol.for("undici.globalDispatcher.1");
	const { InvalidArgumentError: InvalidArgumentError$1 } = require_errors();
	const Agent$1 = require_agent();
	if (getGlobalDispatcher$5() === void 0) setGlobalDispatcher$1(new Agent$1());
	function setGlobalDispatcher$1(agent) {
		if (!agent || typeof agent.dispatch !== "function") throw new InvalidArgumentError$1("Argument agent must implement Agent");
		Object.defineProperty(globalThis, globalDispatcher, {
			value: agent,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	function getGlobalDispatcher$5() {
		return globalThis[globalDispatcher];
	}
	module.exports = {
		setGlobalDispatcher: setGlobalDispatcher$1,
		getGlobalDispatcher: getGlobalDispatcher$5
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/DecoratorHandler.js"(exports, module) {
	module.exports = class DecoratorHandler$1 {
		constructor(handler) {
			this.handler = handler;
		}
		onConnect(...args) {
			return this.handler.onConnect(...args);
		}
		onError(...args) {
			return this.handler.onError(...args);
		}
		onUpgrade(...args) {
			return this.handler.onUpgrade(...args);
		}
		onHeaders(...args) {
			return this.handler.onHeaders(...args);
		}
		onData(...args) {
			return this.handler.onData(...args);
		}
		onComplete(...args) {
			return this.handler.onComplete(...args);
		}
		onBodySent(...args) {
			return this.handler.onBodySent(...args);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/headers.js"(exports, module) {
	const { kHeadersList: kHeadersList$5, kConstruct: kConstruct$4 } = require_symbols$4();
	const { kGuard: kGuard$4 } = require_symbols$3();
	const { kEnumerableProperty: kEnumerableProperty$7 } = require_util$6();
	const { makeIterator, isValidHeaderName: isValidHeaderName$1, isValidHeaderValue } = require_util$5();
	const util$3 = __require("util");
	const { webidl: webidl$10 } = require_webidl();
	const assert$6 = __require("assert");
	const kHeadersMap = Symbol("headers map");
	const kHeadersSortedMap = Symbol("headers map sorted");
	/**
	* @param {number} code
	*/
	function isHTTPWhiteSpaceCharCode(code) {
		return code === 10 || code === 13 || code === 9 || code === 32;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
	* @param {string} potentialValue
	*/
	function headerValueNormalize(potentialValue) {
		let i = 0;
		let j = potentialValue.length;
		while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;
		while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i;
		return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
	}
	function fill$1(headers, object) {
		if (Array.isArray(object)) for (let i = 0; i < object.length; ++i) {
			const header = object[i];
			if (header.length !== 2) throw webidl$10.errors.exception({
				header: "Headers constructor",
				message: `expected name/value pair to be length 2, found ${header.length}.`
			});
			appendHeader(headers, header[0], header[1]);
		}
		else if (typeof object === "object" && object !== null) {
			const keys = Object.keys(object);
			for (let i = 0; i < keys.length; ++i) appendHeader(headers, keys[i], object[keys[i]]);
		} else throw webidl$10.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-headers-append
	*/
	function appendHeader(headers, name, value$1) {
		value$1 = headerValueNormalize(value$1);
		if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
			prefix: "Headers.append",
			value: name,
			type: "header name"
		});
		else if (!isValidHeaderValue(value$1)) throw webidl$10.errors.invalidArgument({
			prefix: "Headers.append",
			value: value$1,
			type: "header value"
		});
		if (headers[kGuard$4] === "immutable") throw new TypeError("immutable");
		else if (headers[kGuard$4] === "request-no-cors") {}
		return headers[kHeadersList$5].append(name, value$1);
	}
	var HeadersList$2 = class HeadersList$2 {
		/** @type {[string, string][]|null} */
		cookies = null;
		constructor(init$1) {
			if (init$1 instanceof HeadersList$2) {
				this[kHeadersMap] = new Map(init$1[kHeadersMap]);
				this[kHeadersSortedMap] = init$1[kHeadersSortedMap];
				this.cookies = init$1.cookies === null ? null : [...init$1.cookies];
			} else {
				this[kHeadersMap] = new Map(init$1);
				this[kHeadersSortedMap] = null;
			}
		}
		contains(name) {
			name = name.toLowerCase();
			return this[kHeadersMap].has(name);
		}
		clear() {
			this[kHeadersMap].clear();
			this[kHeadersSortedMap] = null;
			this.cookies = null;
		}
		append(name, value$1) {
			this[kHeadersSortedMap] = null;
			const lowercaseName = name.toLowerCase();
			const exists$1 = this[kHeadersMap].get(lowercaseName);
			if (exists$1) {
				const delimiter = lowercaseName === "cookie" ? "; " : ", ";
				this[kHeadersMap].set(lowercaseName, {
					name: exists$1.name,
					value: `${exists$1.value}${delimiter}${value$1}`
				});
			} else this[kHeadersMap].set(lowercaseName, {
				name,
				value: value$1
			});
			if (lowercaseName === "set-cookie") {
				this.cookies ??= [];
				this.cookies.push(value$1);
			}
		}
		set(name, value$1) {
			this[kHeadersSortedMap] = null;
			const lowercaseName = name.toLowerCase();
			if (lowercaseName === "set-cookie") this.cookies = [value$1];
			this[kHeadersMap].set(lowercaseName, {
				name,
				value: value$1
			});
		}
		delete(name) {
			this[kHeadersSortedMap] = null;
			name = name.toLowerCase();
			if (name === "set-cookie") this.cookies = null;
			this[kHeadersMap].delete(name);
		}
		get(name) {
			const value$1 = this[kHeadersMap].get(name.toLowerCase());
			return value$1 === void 0 ? null : value$1.value;
		}
		*[Symbol.iterator]() {
			for (const [name, { value: value$1 }] of this[kHeadersMap]) yield [name, value$1];
		}
		get entries() {
			const headers = {};
			if (this[kHeadersMap].size) for (const { name, value: value$1 } of this[kHeadersMap].values()) headers[name] = value$1;
			return headers;
		}
	};
	var Headers$6 = class Headers$6 {
		constructor(init$1 = void 0) {
			if (init$1 === kConstruct$4) return;
			this[kHeadersList$5] = new HeadersList$2();
			this[kGuard$4] = "none";
			if (init$1 !== void 0) {
				init$1 = webidl$10.converters.HeadersInit(init$1);
				fill$1(this, init$1);
			}
		}
		append(name, value$1) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
			name = webidl$10.converters.ByteString(name);
			value$1 = webidl$10.converters.ByteString(value$1);
			return appendHeader(this, name, value$1);
		}
		delete(name) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
			name = webidl$10.converters.ByteString(name);
			if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.delete",
				value: name,
				type: "header name"
			});
			if (this[kGuard$4] === "immutable") throw new TypeError("immutable");
			else if (this[kGuard$4] === "request-no-cors") {}
			if (!this[kHeadersList$5].contains(name)) return;
			this[kHeadersList$5].delete(name);
		}
		get(name) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
			name = webidl$10.converters.ByteString(name);
			if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.get",
				value: name,
				type: "header name"
			});
			return this[kHeadersList$5].get(name);
		}
		has(name) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
			name = webidl$10.converters.ByteString(name);
			if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.has",
				value: name,
				type: "header name"
			});
			return this[kHeadersList$5].contains(name);
		}
		set(name, value$1) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
			name = webidl$10.converters.ByteString(name);
			value$1 = webidl$10.converters.ByteString(value$1);
			value$1 = headerValueNormalize(value$1);
			if (!isValidHeaderName$1(name)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.set",
				value: name,
				type: "header name"
			});
			else if (!isValidHeaderValue(value$1)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.set",
				value: value$1,
				type: "header value"
			});
			if (this[kGuard$4] === "immutable") throw new TypeError("immutable");
			else if (this[kGuard$4] === "request-no-cors") {}
			this[kHeadersList$5].set(name, value$1);
		}
		getSetCookie() {
			webidl$10.brandCheck(this, Headers$6);
			const list = this[kHeadersList$5].cookies;
			if (list) return [...list];
			return [];
		}
		get [kHeadersSortedMap]() {
			if (this[kHeadersList$5][kHeadersSortedMap]) return this[kHeadersList$5][kHeadersSortedMap];
			const headers = [];
			const names = [...this[kHeadersList$5]].sort((a, b$2) => a[0] < b$2[0] ? -1 : 1);
			const cookies = this[kHeadersList$5].cookies;
			for (let i = 0; i < names.length; ++i) {
				const [name, value$1] = names[i];
				if (name === "set-cookie") for (let j = 0; j < cookies.length; ++j) headers.push([name, cookies[j]]);
				else {
					assert$6(value$1 !== null);
					headers.push([name, value$1]);
				}
			}
			this[kHeadersList$5][kHeadersSortedMap] = headers;
			return headers;
		}
		keys() {
			webidl$10.brandCheck(this, Headers$6);
			if (this[kGuard$4] === "immutable") {
				const value$1 = this[kHeadersSortedMap];
				return makeIterator(() => value$1, "Headers", "key");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key");
		}
		values() {
			webidl$10.brandCheck(this, Headers$6);
			if (this[kGuard$4] === "immutable") {
				const value$1 = this[kHeadersSortedMap];
				return makeIterator(() => value$1, "Headers", "value");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "value");
		}
		entries() {
			webidl$10.brandCheck(this, Headers$6);
			if (this[kGuard$4] === "immutable") {
				const value$1 = this[kHeadersSortedMap];
				return makeIterator(() => value$1, "Headers", "key+value");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key+value");
		}
		/**
		* @param {(value: string, key: string, self: Headers) => void} callbackFn
		* @param {unknown} thisArg
		*/
		forEach(callbackFn, thisArg = globalThis) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
			if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
			for (const [key, value$1] of this) callbackFn.apply(thisArg, [
				value$1,
				key,
				this
			]);
		}
		[Symbol.for("nodejs.util.inspect.custom")]() {
			webidl$10.brandCheck(this, Headers$6);
			return this[kHeadersList$5];
		}
	};
	Headers$6.prototype[Symbol.iterator] = Headers$6.prototype.entries;
	Object.defineProperties(Headers$6.prototype, {
		append: kEnumerableProperty$7,
		delete: kEnumerableProperty$7,
		get: kEnumerableProperty$7,
		has: kEnumerableProperty$7,
		set: kEnumerableProperty$7,
		getSetCookie: kEnumerableProperty$7,
		keys: kEnumerableProperty$7,
		values: kEnumerableProperty$7,
		entries: kEnumerableProperty$7,
		forEach: kEnumerableProperty$7,
		[Symbol.iterator]: { enumerable: false },
		[Symbol.toStringTag]: {
			value: "Headers",
			configurable: true
		},
		[util$3.inspect.custom]: { enumerable: false }
	});
	webidl$10.converters.HeadersInit = function(V$2) {
		if (webidl$10.util.Type(V$2) === "Object") {
			if (V$2[Symbol.iterator]) return webidl$10.converters["sequence<sequence<ByteString>>"](V$2);
			return webidl$10.converters["record<ByteString, ByteString>"](V$2);
		}
		throw webidl$10.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	};
	module.exports = {
		fill: fill$1,
		Headers: Headers$6,
		HeadersList: HeadersList$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/response.js
var require_response = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/response.js"(exports, module) {
	const { Headers: Headers$5, HeadersList: HeadersList$1, fill } = require_headers();
	const { extractBody: extractBody$1, cloneBody: cloneBody$1, mixinBody: mixinBody$1 } = require_body();
	const util$2 = require_util$6();
	const { kEnumerableProperty: kEnumerableProperty$6 } = util$2;
	const { isValidReasonPhrase, isCancelled: isCancelled$1, isAborted: isAborted$1, isBlobLike: isBlobLike$2, serializeJavascriptValueToJSONString, isErrorLike: isErrorLike$1, isomorphicEncode: isomorphicEncode$1 } = require_util$5();
	const { redirectStatusSet: redirectStatusSet$1, nullBodyStatus: nullBodyStatus$1, DOMException: DOMException$4 } = require_constants$4();
	const { kState: kState$6, kHeaders: kHeaders$3, kGuard: kGuard$3, kRealm: kRealm$3 } = require_symbols$3();
	const { webidl: webidl$9 } = require_webidl();
	const { FormData: FormData$1 } = require_formdata();
	const { getGlobalOrigin: getGlobalOrigin$2 } = require_global$1();
	const { URLSerializer: URLSerializer$3 } = require_dataURL();
	const { kHeadersList: kHeadersList$4, kConstruct: kConstruct$3 } = require_symbols$4();
	const assert$5 = __require("assert");
	const { types: types$4 } = __require("util");
	const ReadableStream$1 = globalThis.ReadableStream || __require("stream/web").ReadableStream;
	const textEncoder = new TextEncoder("utf-8");
	var Response$2 = class Response$2 {
		static error() {
			const relevantRealm = { settingsObject: {} };
			const responseObject = new Response$2();
			responseObject[kState$6] = makeNetworkError$1();
			responseObject[kRealm$3] = relevantRealm;
			responseObject[kHeaders$3][kHeadersList$4] = responseObject[kState$6].headersList;
			responseObject[kHeaders$3][kGuard$3] = "immutable";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm;
			return responseObject;
		}
		static json(data, init$1 = {}) {
			webidl$9.argumentLengthCheck(arguments, 1, { header: "Response.json" });
			if (init$1 !== null) init$1 = webidl$9.converters.ResponseInit(init$1);
			const bytes = textEncoder.encode(serializeJavascriptValueToJSONString(data));
			const body = extractBody$1(bytes);
			const relevantRealm = { settingsObject: {} };
			const responseObject = new Response$2();
			responseObject[kRealm$3] = relevantRealm;
			responseObject[kHeaders$3][kGuard$3] = "response";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm;
			initializeResponse(responseObject, init$1, {
				body: body[0],
				type: "application/json"
			});
			return responseObject;
		}
		static redirect(url, status = 302) {
			const relevantRealm = { settingsObject: {} };
			webidl$9.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
			url = webidl$9.converters.USVString(url);
			status = webidl$9.converters["unsigned short"](status);
			let parsedURL;
			try {
				parsedURL = new URL(url, getGlobalOrigin$2());
			} catch (err) {
				throw Object.assign(new TypeError("Failed to parse URL from " + url), { cause: err });
			}
			if (!redirectStatusSet$1.has(status)) throw new RangeError("Invalid status code " + status);
			const responseObject = new Response$2();
			responseObject[kRealm$3] = relevantRealm;
			responseObject[kHeaders$3][kGuard$3] = "immutable";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm;
			responseObject[kState$6].status = status;
			const value$1 = isomorphicEncode$1(URLSerializer$3(parsedURL));
			responseObject[kState$6].headersList.append("location", value$1);
			return responseObject;
		}
		constructor(body = null, init$1 = {}) {
			if (body !== null) body = webidl$9.converters.BodyInit(body);
			init$1 = webidl$9.converters.ResponseInit(init$1);
			this[kRealm$3] = { settingsObject: {} };
			this[kState$6] = makeResponse$1({});
			this[kHeaders$3] = new Headers$5(kConstruct$3);
			this[kHeaders$3][kGuard$3] = "response";
			this[kHeaders$3][kHeadersList$4] = this[kState$6].headersList;
			this[kHeaders$3][kRealm$3] = this[kRealm$3];
			let bodyWithType = null;
			if (body != null) {
				const [extractedBody, type$1] = extractBody$1(body);
				bodyWithType = {
					body: extractedBody,
					type: type$1
				};
			}
			initializeResponse(this, init$1, bodyWithType);
		}
		get type() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].type;
		}
		get url() {
			webidl$9.brandCheck(this, Response$2);
			const urlList = this[kState$6].urlList;
			const url = urlList[urlList.length - 1] ?? null;
			if (url === null) return "";
			return URLSerializer$3(url, true);
		}
		get redirected() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].urlList.length > 1;
		}
		get status() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].status;
		}
		get ok() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].status >= 200 && this[kState$6].status <= 299;
		}
		get statusText() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].statusText;
		}
		get headers() {
			webidl$9.brandCheck(this, Response$2);
			return this[kHeaders$3];
		}
		get body() {
			webidl$9.brandCheck(this, Response$2);
			return this[kState$6].body ? this[kState$6].body.stream : null;
		}
		get bodyUsed() {
			webidl$9.brandCheck(this, Response$2);
			return !!this[kState$6].body && util$2.isDisturbed(this[kState$6].body.stream);
		}
		clone() {
			webidl$9.brandCheck(this, Response$2);
			if (this.bodyUsed || this.body && this.body.locked) throw webidl$9.errors.exception({
				header: "Response.clone",
				message: "Body has already been consumed."
			});
			const clonedResponse = cloneResponse$1(this[kState$6]);
			const clonedResponseObject = new Response$2();
			clonedResponseObject[kState$6] = clonedResponse;
			clonedResponseObject[kRealm$3] = this[kRealm$3];
			clonedResponseObject[kHeaders$3][kHeadersList$4] = clonedResponse.headersList;
			clonedResponseObject[kHeaders$3][kGuard$3] = this[kHeaders$3][kGuard$3];
			clonedResponseObject[kHeaders$3][kRealm$3] = this[kHeaders$3][kRealm$3];
			return clonedResponseObject;
		}
	};
	mixinBody$1(Response$2);
	Object.defineProperties(Response$2.prototype, {
		type: kEnumerableProperty$6,
		url: kEnumerableProperty$6,
		status: kEnumerableProperty$6,
		ok: kEnumerableProperty$6,
		redirected: kEnumerableProperty$6,
		statusText: kEnumerableProperty$6,
		headers: kEnumerableProperty$6,
		clone: kEnumerableProperty$6,
		body: kEnumerableProperty$6,
		bodyUsed: kEnumerableProperty$6,
		[Symbol.toStringTag]: {
			value: "Response",
			configurable: true
		}
	});
	Object.defineProperties(Response$2, {
		json: kEnumerableProperty$6,
		redirect: kEnumerableProperty$6,
		error: kEnumerableProperty$6
	});
	function cloneResponse$1(response) {
		if (response.internalResponse) return filterResponse$1(cloneResponse$1(response.internalResponse), response.type);
		const newResponse = makeResponse$1({
			...response,
			body: null
		});
		if (response.body != null) newResponse.body = cloneBody$1(response.body);
		return newResponse;
	}
	function makeResponse$1(init$1) {
		return {
			aborted: false,
			rangeRequested: false,
			timingAllowPassed: false,
			requestIncludesCredentials: false,
			type: "default",
			status: 200,
			timingInfo: null,
			cacheState: "",
			statusText: "",
			...init$1,
			headersList: init$1.headersList ? new HeadersList$1(init$1.headersList) : new HeadersList$1(),
			urlList: init$1.urlList ? [...init$1.urlList] : []
		};
	}
	function makeNetworkError$1(reason) {
		const isError = isErrorLike$1(reason);
		return makeResponse$1({
			type: "error",
			status: 0,
			error: isError ? reason : new Error(reason ? String(reason) : reason),
			aborted: reason && reason.name === "AbortError"
		});
	}
	function makeFilteredResponse(response, state) {
		state = {
			internalResponse: response,
			...state
		};
		return new Proxy(response, {
			get(target, p$1) {
				return p$1 in state ? state[p$1] : target[p$1];
			},
			set(target, p$1, value$1) {
				assert$5(!(p$1 in state));
				target[p$1] = value$1;
				return true;
			}
		});
	}
	function filterResponse$1(response, type$1) {
		if (type$1 === "basic") return makeFilteredResponse(response, {
			type: "basic",
			headersList: response.headersList
		});
		else if (type$1 === "cors") return makeFilteredResponse(response, {
			type: "cors",
			headersList: response.headersList
		});
		else if (type$1 === "opaque") return makeFilteredResponse(response, {
			type: "opaque",
			urlList: Object.freeze([]),
			status: 0,
			statusText: "",
			body: null
		});
		else if (type$1 === "opaqueredirect") return makeFilteredResponse(response, {
			type: "opaqueredirect",
			status: 0,
			statusText: "",
			headersList: [],
			body: null
		});
		else assert$5(false);
	}
	function makeAppropriateNetworkError$1(fetchParams, err = null) {
		assert$5(isCancelled$1(fetchParams));
		return isAborted$1(fetchParams) ? makeNetworkError$1(Object.assign(new DOMException$4("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError$1(Object.assign(new DOMException$4("Request was cancelled."), { cause: err }));
	}
	function initializeResponse(response, init$1, body) {
		if (init$1.status !== null && (init$1.status < 200 || init$1.status > 599)) throw new RangeError("init[\"status\"] must be in the range of 200 to 599, inclusive.");
		if ("statusText" in init$1 && init$1.statusText != null) {
			if (!isValidReasonPhrase(String(init$1.statusText))) throw new TypeError("Invalid statusText");
		}
		if ("status" in init$1 && init$1.status != null) response[kState$6].status = init$1.status;
		if ("statusText" in init$1 && init$1.statusText != null) response[kState$6].statusText = init$1.statusText;
		if ("headers" in init$1 && init$1.headers != null) fill(response[kHeaders$3], init$1.headers);
		if (body) {
			if (nullBodyStatus$1.includes(response.status)) throw webidl$9.errors.exception({
				header: "Response constructor",
				message: "Invalid response status code " + response.status
			});
			response[kState$6].body = body.body;
			if (body.type != null && !response[kState$6].headersList.contains("Content-Type")) response[kState$6].headersList.append("content-type", body.type);
		}
	}
	webidl$9.converters.ReadableStream = webidl$9.interfaceConverter(ReadableStream$1);
	webidl$9.converters.FormData = webidl$9.interfaceConverter(FormData$1);
	webidl$9.converters.URLSearchParams = webidl$9.interfaceConverter(URLSearchParams);
	webidl$9.converters.XMLHttpRequestBodyInit = function(V$2) {
		if (typeof V$2 === "string") return webidl$9.converters.USVString(V$2);
		if (isBlobLike$2(V$2)) return webidl$9.converters.Blob(V$2, { strict: false });
		if (types$4.isArrayBuffer(V$2) || types$4.isTypedArray(V$2) || types$4.isDataView(V$2)) return webidl$9.converters.BufferSource(V$2);
		if (util$2.isFormDataLike(V$2)) return webidl$9.converters.FormData(V$2, { strict: false });
		if (V$2 instanceof URLSearchParams) return webidl$9.converters.URLSearchParams(V$2);
		return webidl$9.converters.DOMString(V$2);
	};
	webidl$9.converters.BodyInit = function(V$2) {
		if (V$2 instanceof ReadableStream$1) return webidl$9.converters.ReadableStream(V$2);
		if (V$2?.[Symbol.asyncIterator]) return V$2;
		return webidl$9.converters.XMLHttpRequestBodyInit(V$2);
	};
	webidl$9.converters.ResponseInit = webidl$9.dictionaryConverter([
		{
			key: "status",
			converter: webidl$9.converters["unsigned short"],
			defaultValue: 200
		},
		{
			key: "statusText",
			converter: webidl$9.converters.ByteString,
			defaultValue: ""
		},
		{
			key: "headers",
			converter: webidl$9.converters.HeadersInit
		}
	]);
	module.exports = {
		makeNetworkError: makeNetworkError$1,
		makeResponse: makeResponse$1,
		makeAppropriateNetworkError: makeAppropriateNetworkError$1,
		filterResponse: filterResponse$1,
		Response: Response$2,
		cloneResponse: cloneResponse$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/request.js
var require_request = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/request.js"(exports, module) {
	const { extractBody, mixinBody, cloneBody } = require_body();
	const { Headers: Headers$4, fill: fillHeaders, HeadersList } = require_headers();
	const { FinalizationRegistry } = require_dispatcher_weakref()();
	const util$1 = require_util$6();
	const { isValidHTTPToken, sameOrigin: sameOrigin$1, normalizeMethod, makePolicyContainer: makePolicyContainer$1, normalizeMethodRecord } = require_util$5();
	const { forbiddenMethodsSet, corsSafeListedMethodsSet, referrerPolicy, requestRedirect, requestMode, requestCredentials, requestCache, requestDuplex } = require_constants$4();
	const { kEnumerableProperty: kEnumerableProperty$5 } = util$1;
	const { kHeaders: kHeaders$2, kSignal, kState: kState$5, kGuard: kGuard$2, kRealm: kRealm$2 } = require_symbols$3();
	const { webidl: webidl$8 } = require_webidl();
	const { getGlobalOrigin: getGlobalOrigin$1 } = require_global$1();
	const { URLSerializer: URLSerializer$2 } = require_dataURL();
	const { kHeadersList: kHeadersList$3, kConstruct: kConstruct$2 } = require_symbols$4();
	const assert$4 = __require("assert");
	const { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __require("events");
	let TransformStream$1 = globalThis.TransformStream;
	const kAbortController = Symbol("abortController");
	const requestFinalizer = new FinalizationRegistry(({ signal, abort: abort$1 }) => {
		signal.removeEventListener("abort", abort$1);
	});
	var Request$2 = class Request$2 {
		constructor(input, init$1 = {}) {
			if (input === kConstruct$2) return;
			webidl$8.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
			input = webidl$8.converters.RequestInfo(input);
			init$1 = webidl$8.converters.RequestInit(init$1);
			this[kRealm$2] = { settingsObject: {
				baseUrl: getGlobalOrigin$1(),
				get origin() {
					return this.baseUrl?.origin;
				},
				policyContainer: makePolicyContainer$1()
			} };
			let request$1 = null;
			let fallbackMode = null;
			const baseUrl = this[kRealm$2].settingsObject.baseUrl;
			let signal = null;
			if (typeof input === "string") {
				let parsedURL;
				try {
					parsedURL = new URL(input, baseUrl);
				} catch (err) {
					throw new TypeError("Failed to parse URL from " + input, { cause: err });
				}
				if (parsedURL.username || parsedURL.password) throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
				request$1 = makeRequest$2({ urlList: [parsedURL] });
				fallbackMode = "cors";
			} else {
				assert$4(input instanceof Request$2);
				request$1 = input[kState$5];
				signal = input[kSignal];
			}
			const origin = this[kRealm$2].settingsObject.origin;
			let window$1 = "client";
			if (request$1.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin$1(request$1.window, origin)) window$1 = request$1.window;
			if (init$1.window != null) throw new TypeError(`'window' option '${window$1}' must be null`);
			if ("window" in init$1) window$1 = "no-window";
			request$1 = makeRequest$2({
				method: request$1.method,
				headersList: request$1.headersList,
				unsafeRequest: request$1.unsafeRequest,
				client: this[kRealm$2].settingsObject,
				window: window$1,
				priority: request$1.priority,
				origin: request$1.origin,
				referrer: request$1.referrer,
				referrerPolicy: request$1.referrerPolicy,
				mode: request$1.mode,
				credentials: request$1.credentials,
				cache: request$1.cache,
				redirect: request$1.redirect,
				integrity: request$1.integrity,
				keepalive: request$1.keepalive,
				reloadNavigation: request$1.reloadNavigation,
				historyNavigation: request$1.historyNavigation,
				urlList: [...request$1.urlList]
			});
			const initHasKey = Object.keys(init$1).length !== 0;
			if (initHasKey) {
				if (request$1.mode === "navigate") request$1.mode = "same-origin";
				request$1.reloadNavigation = false;
				request$1.historyNavigation = false;
				request$1.origin = "client";
				request$1.referrer = "client";
				request$1.referrerPolicy = "";
				request$1.url = request$1.urlList[request$1.urlList.length - 1];
				request$1.urlList = [request$1.url];
			}
			if (init$1.referrer !== void 0) {
				const referrer = init$1.referrer;
				if (referrer === "") request$1.referrer = "no-referrer";
				else {
					let parsedReferrer;
					try {
						parsedReferrer = new URL(referrer, baseUrl);
					} catch (err) {
						throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
					}
					if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin$1(parsedReferrer, this[kRealm$2].settingsObject.baseUrl)) request$1.referrer = "client";
					else request$1.referrer = parsedReferrer;
				}
			}
			if (init$1.referrerPolicy !== void 0) request$1.referrerPolicy = init$1.referrerPolicy;
			let mode;
			if (init$1.mode !== void 0) mode = init$1.mode;
			else mode = fallbackMode;
			if (mode === "navigate") throw webidl$8.errors.exception({
				header: "Request constructor",
				message: "invalid request mode navigate."
			});
			if (mode != null) request$1.mode = mode;
			if (init$1.credentials !== void 0) request$1.credentials = init$1.credentials;
			if (init$1.cache !== void 0) request$1.cache = init$1.cache;
			if (request$1.cache === "only-if-cached" && request$1.mode !== "same-origin") throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
			if (init$1.redirect !== void 0) request$1.redirect = init$1.redirect;
			if (init$1.integrity != null) request$1.integrity = String(init$1.integrity);
			if (init$1.keepalive !== void 0) request$1.keepalive = Boolean(init$1.keepalive);
			if (init$1.method !== void 0) {
				let method = init$1.method;
				if (!isValidHTTPToken(method)) throw new TypeError(`'${method}' is not a valid HTTP method.`);
				if (forbiddenMethodsSet.has(method.toUpperCase())) throw new TypeError(`'${method}' HTTP method is unsupported.`);
				method = normalizeMethodRecord[method] ?? normalizeMethod(method);
				request$1.method = method;
			}
			if (init$1.signal !== void 0) signal = init$1.signal;
			this[kState$5] = request$1;
			const ac = new AbortController();
			this[kSignal] = ac.signal;
			this[kSignal][kRealm$2] = this[kRealm$2];
			if (signal != null) {
				if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
				if (signal.aborted) ac.abort(signal.reason);
				else {
					this[kAbortController] = ac;
					const acRef = new WeakRef(ac);
					const abort$1 = function() {
						const ac$1 = acRef.deref();
						if (ac$1 !== void 0) ac$1.abort(this.reason);
					};
					try {
						if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) setMaxListeners(100, signal);
						else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) setMaxListeners(100, signal);
					} catch {}
					util$1.addAbortListener(signal, abort$1);
					requestFinalizer.register(ac, {
						signal,
						abort: abort$1
					});
				}
			}
			this[kHeaders$2] = new Headers$4(kConstruct$2);
			this[kHeaders$2][kHeadersList$3] = request$1.headersList;
			this[kHeaders$2][kGuard$2] = "request";
			this[kHeaders$2][kRealm$2] = this[kRealm$2];
			if (mode === "no-cors") {
				if (!corsSafeListedMethodsSet.has(request$1.method)) throw new TypeError(`'${request$1.method} is unsupported in no-cors mode.`);
				this[kHeaders$2][kGuard$2] = "request-no-cors";
			}
			if (initHasKey) {
				/** @type {HeadersList} */
				const headersList = this[kHeaders$2][kHeadersList$3];
				const headers = init$1.headers !== void 0 ? init$1.headers : new HeadersList(headersList);
				headersList.clear();
				if (headers instanceof HeadersList) {
					for (const [key, val] of headers) headersList.append(key, val);
					headersList.cookies = headers.cookies;
				} else fillHeaders(this[kHeaders$2], headers);
			}
			const inputBody = input instanceof Request$2 ? input[kState$5].body : null;
			if ((init$1.body != null || inputBody != null) && (request$1.method === "GET" || request$1.method === "HEAD")) throw new TypeError("Request with GET/HEAD method cannot have body.");
			let initBody = null;
			if (init$1.body != null) {
				const [extractedBody, contentType] = extractBody(init$1.body, request$1.keepalive);
				initBody = extractedBody;
				if (contentType && !this[kHeaders$2][kHeadersList$3].contains("content-type")) this[kHeaders$2].append("content-type", contentType);
			}
			const inputOrInitBody = initBody ?? inputBody;
			if (inputOrInitBody != null && inputOrInitBody.source == null) {
				if (initBody != null && init$1.duplex == null) throw new TypeError("RequestInit: duplex option is required when sending a body.");
				if (request$1.mode !== "same-origin" && request$1.mode !== "cors") throw new TypeError("If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"");
				request$1.useCORSPreflightFlag = true;
			}
			let finalBody = inputOrInitBody;
			if (initBody == null && inputBody != null) {
				if (util$1.isDisturbed(inputBody.stream) || inputBody.stream.locked) throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
				if (!TransformStream$1) TransformStream$1 = __require("stream/web").TransformStream;
				const identityTransform = new TransformStream$1();
				inputBody.stream.pipeThrough(identityTransform);
				finalBody = {
					source: inputBody.source,
					length: inputBody.length,
					stream: identityTransform.readable
				};
			}
			this[kState$5].body = finalBody;
		}
		get method() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].method;
		}
		get url() {
			webidl$8.brandCheck(this, Request$2);
			return URLSerializer$2(this[kState$5].url);
		}
		get headers() {
			webidl$8.brandCheck(this, Request$2);
			return this[kHeaders$2];
		}
		get destination() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].destination;
		}
		get referrer() {
			webidl$8.brandCheck(this, Request$2);
			if (this[kState$5].referrer === "no-referrer") return "";
			if (this[kState$5].referrer === "client") return "about:client";
			return this[kState$5].referrer.toString();
		}
		get referrerPolicy() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].referrerPolicy;
		}
		get mode() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].mode;
		}
		get credentials() {
			return this[kState$5].credentials;
		}
		get cache() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].cache;
		}
		get redirect() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].redirect;
		}
		get integrity() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].integrity;
		}
		get keepalive() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].keepalive;
		}
		get isReloadNavigation() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].reloadNavigation;
		}
		get isHistoryNavigation() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].historyNavigation;
		}
		get signal() {
			webidl$8.brandCheck(this, Request$2);
			return this[kSignal];
		}
		get body() {
			webidl$8.brandCheck(this, Request$2);
			return this[kState$5].body ? this[kState$5].body.stream : null;
		}
		get bodyUsed() {
			webidl$8.brandCheck(this, Request$2);
			return !!this[kState$5].body && util$1.isDisturbed(this[kState$5].body.stream);
		}
		get duplex() {
			webidl$8.brandCheck(this, Request$2);
			return "half";
		}
		clone() {
			webidl$8.brandCheck(this, Request$2);
			if (this.bodyUsed || this.body?.locked) throw new TypeError("unusable");
			const clonedRequest = cloneRequest(this[kState$5]);
			const clonedRequestObject = new Request$2(kConstruct$2);
			clonedRequestObject[kState$5] = clonedRequest;
			clonedRequestObject[kRealm$2] = this[kRealm$2];
			clonedRequestObject[kHeaders$2] = new Headers$4(kConstruct$2);
			clonedRequestObject[kHeaders$2][kHeadersList$3] = clonedRequest.headersList;
			clonedRequestObject[kHeaders$2][kGuard$2] = this[kHeaders$2][kGuard$2];
			clonedRequestObject[kHeaders$2][kRealm$2] = this[kHeaders$2][kRealm$2];
			const ac = new AbortController();
			if (this.signal.aborted) ac.abort(this.signal.reason);
			else util$1.addAbortListener(this.signal, () => {
				ac.abort(this.signal.reason);
			});
			clonedRequestObject[kSignal] = ac.signal;
			return clonedRequestObject;
		}
	};
	mixinBody(Request$2);
	function makeRequest$2(init$1) {
		const request$1 = {
			method: "GET",
			localURLsOnly: false,
			unsafeRequest: false,
			body: null,
			client: null,
			reservedClient: null,
			replacesClientId: "",
			window: "client",
			keepalive: false,
			serviceWorkers: "all",
			initiator: "",
			destination: "",
			priority: null,
			origin: "client",
			policyContainer: "client",
			referrer: "client",
			referrerPolicy: "",
			mode: "no-cors",
			useCORSPreflightFlag: false,
			credentials: "same-origin",
			useCredentials: false,
			cache: "default",
			redirect: "follow",
			integrity: "",
			cryptoGraphicsNonceMetadata: "",
			parserMetadata: "",
			reloadNavigation: false,
			historyNavigation: false,
			userActivation: false,
			taintedOrigin: false,
			redirectCount: 0,
			responseTainting: "basic",
			preventNoCacheCacheControlHeaderModification: false,
			done: false,
			timingAllowFailed: false,
			...init$1,
			headersList: init$1.headersList ? new HeadersList(init$1.headersList) : new HeadersList()
		};
		request$1.url = request$1.urlList[0];
		return request$1;
	}
	function cloneRequest(request$1) {
		const newRequest = makeRequest$2({
			...request$1,
			body: null
		});
		if (request$1.body != null) newRequest.body = cloneBody(request$1.body);
		return newRequest;
	}
	Object.defineProperties(Request$2.prototype, {
		method: kEnumerableProperty$5,
		url: kEnumerableProperty$5,
		headers: kEnumerableProperty$5,
		redirect: kEnumerableProperty$5,
		clone: kEnumerableProperty$5,
		signal: kEnumerableProperty$5,
		duplex: kEnumerableProperty$5,
		destination: kEnumerableProperty$5,
		body: kEnumerableProperty$5,
		bodyUsed: kEnumerableProperty$5,
		isHistoryNavigation: kEnumerableProperty$5,
		isReloadNavigation: kEnumerableProperty$5,
		keepalive: kEnumerableProperty$5,
		integrity: kEnumerableProperty$5,
		cache: kEnumerableProperty$5,
		credentials: kEnumerableProperty$5,
		attribute: kEnumerableProperty$5,
		referrerPolicy: kEnumerableProperty$5,
		referrer: kEnumerableProperty$5,
		mode: kEnumerableProperty$5,
		[Symbol.toStringTag]: {
			value: "Request",
			configurable: true
		}
	});
	webidl$8.converters.Request = webidl$8.interfaceConverter(Request$2);
	webidl$8.converters.RequestInfo = function(V$2) {
		if (typeof V$2 === "string") return webidl$8.converters.USVString(V$2);
		if (V$2 instanceof Request$2) return webidl$8.converters.Request(V$2);
		return webidl$8.converters.USVString(V$2);
	};
	webidl$8.converters.AbortSignal = webidl$8.interfaceConverter(AbortSignal);
	webidl$8.converters.RequestInit = webidl$8.dictionaryConverter([
		{
			key: "method",
			converter: webidl$8.converters.ByteString
		},
		{
			key: "headers",
			converter: webidl$8.converters.HeadersInit
		},
		{
			key: "body",
			converter: webidl$8.nullableConverter(webidl$8.converters.BodyInit)
		},
		{
			key: "referrer",
			converter: webidl$8.converters.USVString
		},
		{
			key: "referrerPolicy",
			converter: webidl$8.converters.DOMString,
			allowedValues: referrerPolicy
		},
		{
			key: "mode",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestMode
		},
		{
			key: "credentials",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestCredentials
		},
		{
			key: "cache",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestCache
		},
		{
			key: "redirect",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestRedirect
		},
		{
			key: "integrity",
			converter: webidl$8.converters.DOMString
		},
		{
			key: "keepalive",
			converter: webidl$8.converters.boolean
		},
		{
			key: "signal",
			converter: webidl$8.nullableConverter((signal) => webidl$8.converters.AbortSignal(signal, { strict: false }))
		},
		{
			key: "window",
			converter: webidl$8.converters.any
		},
		{
			key: "duplex",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestDuplex
		}
	]);
	module.exports = {
		Request: Request$2,
		makeRequest: makeRequest$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/index.js
var require_fetch = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/index.js"(exports, module) {
	const { Response: Response$1, makeNetworkError, makeAppropriateNetworkError, filterResponse, makeResponse } = require_response();
	const { Headers: Headers$3 } = require_headers();
	const { Request: Request$1, makeRequest: makeRequest$1 } = require_request();
	const zlib$1 = __require("zlib");
	const { bytesMatch, makePolicyContainer, clonePolicyContainer, requestBadPort, TAOCheck, appendRequestOriginHeader, responseLocationURL, requestCurrentURL, setRequestReferrerPolicyOnRedirect, tryUpgradeRequestToAPotentiallyTrustworthyURL, createOpaqueTimingInfo, appendFetchMetadata, corsCheck, crossOriginResourcePolicyCheck, determineRequestsReferrer, coarsenedSharedCurrentTime, createDeferredPromise: createDeferredPromise$1, isBlobLike: isBlobLike$1, sameOrigin, isCancelled, isAborted, isErrorLike, fullyReadBody, readableStreamClose, isomorphicEncode, urlIsLocal, urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$1, urlHasHttpsScheme } = require_util$5();
	const { kState: kState$4, kHeaders: kHeaders$1, kGuard: kGuard$1, kRealm: kRealm$1 } = require_symbols$3();
	const assert$3 = __require("assert");
	const { safelyExtractBody } = require_body();
	const { redirectStatusSet, nullBodyStatus, safeMethodsSet, requestBodyHeader, subresourceSet, DOMException: DOMException$3 } = require_constants$4();
	const { kHeadersList: kHeadersList$2 } = require_symbols$4();
	const EE = __require("events");
	const { Readable: Readable$1, pipeline } = __require("stream");
	const { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util$6();
	const { dataURLProcessor, serializeAMimeType: serializeAMimeType$1 } = require_dataURL();
	const { TransformStream } = __require("stream/web");
	const { getGlobalDispatcher: getGlobalDispatcher$4 } = require_global();
	const { webidl: webidl$7 } = require_webidl();
	const { STATUS_CODES } = __require("http");
	const GET_OR_HEAD = ["GET", "HEAD"];
	/** @type {import('buffer').resolveObjectURL} */
	let resolveObjectURL;
	let ReadableStream = globalThis.ReadableStream;
	var Fetch = class extends EE {
		constructor(dispatcher) {
			super();
			this.dispatcher = dispatcher;
			this.connection = null;
			this.dump = false;
			this.state = "ongoing";
			this.setMaxListeners(21);
		}
		terminate(reason) {
			if (this.state !== "ongoing") return;
			this.state = "terminated";
			this.connection?.destroy(reason);
			this.emit("terminated", reason);
		}
		abort(error$1) {
			if (this.state !== "ongoing") return;
			this.state = "aborted";
			if (!error$1) error$1 = new DOMException$3("The operation was aborted.", "AbortError");
			this.serializedAbortReason = error$1;
			this.connection?.destroy(error$1);
			this.emit("terminated", error$1);
		}
	};
	function fetch(input, init$1 = {}) {
		webidl$7.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
		const p$1 = createDeferredPromise$1();
		let requestObject;
		try {
			requestObject = new Request$1(input, init$1);
		} catch (e$1) {
			p$1.reject(e$1);
			return p$1.promise;
		}
		const request$1 = requestObject[kState$4];
		if (requestObject.signal.aborted) {
			abortFetch(p$1, request$1, null, requestObject.signal.reason);
			return p$1.promise;
		}
		const globalObject = request$1.client.globalObject;
		if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") request$1.serviceWorkers = "none";
		let responseObject = null;
		const relevantRealm = null;
		let locallyAborted = false;
		let controller = null;
		addAbortListener(requestObject.signal, () => {
			locallyAborted = true;
			assert$3(controller != null);
			controller.abort(requestObject.signal.reason);
			abortFetch(p$1, request$1, responseObject, requestObject.signal.reason);
		});
		const handleFetchDone = (response) => finalizeAndReportTiming(response, "fetch");
		const processResponse = (response) => {
			if (locallyAborted) return Promise.resolve();
			if (response.aborted) {
				abortFetch(p$1, request$1, responseObject, controller.serializedAbortReason);
				return Promise.resolve();
			}
			if (response.type === "error") {
				p$1.reject(Object.assign(new TypeError("fetch failed"), { cause: response.error }));
				return Promise.resolve();
			}
			responseObject = new Response$1();
			responseObject[kState$4] = response;
			responseObject[kRealm$1] = relevantRealm;
			responseObject[kHeaders$1][kHeadersList$2] = response.headersList;
			responseObject[kHeaders$1][kGuard$1] = "immutable";
			responseObject[kHeaders$1][kRealm$1] = relevantRealm;
			p$1.resolve(responseObject);
		};
		controller = fetching$2({
			request: request$1,
			processResponseEndOfBody: handleFetchDone,
			processResponse,
			dispatcher: init$1.dispatcher ?? getGlobalDispatcher$4()
		});
		return p$1.promise;
	}
	function finalizeAndReportTiming(response, initiatorType = "other") {
		if (response.type === "error" && response.aborted) return;
		if (!response.urlList?.length) return;
		const originalURL = response.urlList[0];
		let timingInfo = response.timingInfo;
		let cacheState = response.cacheState;
		if (!urlIsHttpHttpsScheme$1(originalURL)) return;
		if (timingInfo === null) return;
		if (!response.timingAllowPassed) {
			timingInfo = createOpaqueTimingInfo({ startTime: timingInfo.startTime });
			cacheState = "";
		}
		timingInfo.endTime = coarsenedSharedCurrentTime();
		response.timingInfo = timingInfo;
		markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);
	}
	function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis$1, cacheState) {
		if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis$1, cacheState);
	}
	function abortFetch(p$1, request$1, responseObject, error$1) {
		if (!error$1) error$1 = new DOMException$3("The operation was aborted.", "AbortError");
		p$1.reject(error$1);
		if (request$1.body != null && isReadable(request$1.body?.stream)) request$1.body.stream.cancel(error$1).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
		if (responseObject == null) return;
		const response = responseObject[kState$4];
		if (response.body != null && isReadable(response.body?.stream)) response.body.stream.cancel(error$1).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
	}
	function fetching$2({ request: request$1, processRequestBodyChunkLength, processRequestEndOfBody, processResponse, processResponseEndOfBody, processResponseConsumeBody, useParallelQueue = false, dispatcher }) {
		let taskDestination = null;
		let crossOriginIsolatedCapability = false;
		if (request$1.client != null) {
			taskDestination = request$1.client.globalObject;
			crossOriginIsolatedCapability = request$1.client.crossOriginIsolatedCapability;
		}
		const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
		const timingInfo = createOpaqueTimingInfo({ startTime: currenTime });
		const fetchParams = {
			controller: new Fetch(dispatcher),
			request: request$1,
			timingInfo,
			processRequestBodyChunkLength,
			processRequestEndOfBody,
			processResponse,
			processResponseConsumeBody,
			processResponseEndOfBody,
			taskDestination,
			crossOriginIsolatedCapability
		};
		assert$3(!request$1.body || request$1.body.stream);
		if (request$1.window === "client") request$1.window = request$1.client?.globalObject?.constructor?.name === "Window" ? request$1.client : "no-window";
		if (request$1.origin === "client") request$1.origin = request$1.client?.origin;
		if (request$1.policyContainer === "client") if (request$1.client != null) request$1.policyContainer = clonePolicyContainer(request$1.client.policyContainer);
		else request$1.policyContainer = makePolicyContainer();
		if (!request$1.headersList.contains("accept")) {
			const value$1 = "*/*";
			request$1.headersList.append("accept", value$1);
		}
		if (!request$1.headersList.contains("accept-language")) request$1.headersList.append("accept-language", "*");
		if (request$1.priority === null) {}
		if (subresourceSet.has(request$1.destination)) {}
		mainFetch(fetchParams).catch((err) => {
			fetchParams.controller.terminate(err);
		});
		return fetchParams.controller;
	}
	async function mainFetch(fetchParams, recursive = false) {
		const request$1 = fetchParams.request;
		let response = null;
		if (request$1.localURLsOnly && !urlIsLocal(requestCurrentURL(request$1))) response = makeNetworkError("local URLs only");
		tryUpgradeRequestToAPotentiallyTrustworthyURL(request$1);
		if (requestBadPort(request$1) === "blocked") response = makeNetworkError("bad port");
		if (request$1.referrerPolicy === "") request$1.referrerPolicy = request$1.policyContainer.referrerPolicy;
		if (request$1.referrer !== "no-referrer") request$1.referrer = determineRequestsReferrer(request$1);
		if (response === null) response = await (async () => {
			const currentURL = requestCurrentURL(request$1);
			if (sameOrigin(currentURL, request$1.url) && request$1.responseTainting === "basic" || currentURL.protocol === "data:" || request$1.mode === "navigate" || request$1.mode === "websocket") {
				request$1.responseTainting = "basic";
				return await schemeFetch(fetchParams);
			}
			if (request$1.mode === "same-origin") return makeNetworkError("request mode cannot be \"same-origin\"");
			if (request$1.mode === "no-cors") {
				if (request$1.redirect !== "follow") return makeNetworkError("redirect mode cannot be \"follow\" for \"no-cors\" request");
				request$1.responseTainting = "opaque";
				return await schemeFetch(fetchParams);
			}
			if (!urlIsHttpHttpsScheme$1(requestCurrentURL(request$1))) return makeNetworkError("URL scheme must be a HTTP(S) scheme");
			request$1.responseTainting = "cors";
			return await httpFetch(fetchParams);
		})();
		if (recursive) return response;
		if (response.status !== 0 && !response.internalResponse) {
			if (request$1.responseTainting === "cors") {}
			if (request$1.responseTainting === "basic") response = filterResponse(response, "basic");
			else if (request$1.responseTainting === "cors") response = filterResponse(response, "cors");
			else if (request$1.responseTainting === "opaque") response = filterResponse(response, "opaque");
			else assert$3(false);
		}
		let internalResponse = response.status === 0 ? response : response.internalResponse;
		if (internalResponse.urlList.length === 0) internalResponse.urlList.push(...request$1.urlList);
		if (!request$1.timingAllowFailed) response.timingAllowPassed = true;
		if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request$1.headers.contains("range")) response = internalResponse = makeNetworkError();
		if (response.status !== 0 && (request$1.method === "HEAD" || request$1.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
			internalResponse.body = null;
			fetchParams.controller.dump = true;
		}
		if (request$1.integrity) {
			const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
			if (request$1.responseTainting === "opaque" || response.body == null) {
				processBodyError(response.error);
				return;
			}
			const processBody = (bytes) => {
				if (!bytesMatch(bytes, request$1.integrity)) {
					processBodyError("integrity mismatch");
					return;
				}
				response.body = safelyExtractBody(bytes)[0];
				fetchFinale(fetchParams, response);
			};
			await fullyReadBody(response.body, processBody, processBodyError);
		} else fetchFinale(fetchParams, response);
	}
	function schemeFetch(fetchParams) {
		if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) return Promise.resolve(makeAppropriateNetworkError(fetchParams));
		const { request: request$1 } = fetchParams;
		const { protocol: scheme } = requestCurrentURL(request$1);
		switch (scheme) {
			case "about:": return Promise.resolve(makeNetworkError("about scheme is not supported"));
			case "blob:": {
				if (!resolveObjectURL) resolveObjectURL = __require("buffer").resolveObjectURL;
				const blobURLEntry = requestCurrentURL(request$1);
				if (blobURLEntry.search.length !== 0) return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
				const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
				if (request$1.method !== "GET" || !isBlobLike$1(blobURLEntryObject)) return Promise.resolve(makeNetworkError("invalid method"));
				const bodyWithType = safelyExtractBody(blobURLEntryObject);
				const body = bodyWithType[0];
				const length = isomorphicEncode(`${body.length}`);
				const type$1 = bodyWithType[1] ?? "";
				const response = makeResponse({
					statusText: "OK",
					headersList: [["content-length", {
						name: "Content-Length",
						value: length
					}], ["content-type", {
						name: "Content-Type",
						value: type$1
					}]]
				});
				response.body = body;
				return Promise.resolve(response);
			}
			case "data:": {
				const currentURL = requestCurrentURL(request$1);
				const dataURLStruct = dataURLProcessor(currentURL);
				if (dataURLStruct === "failure") return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
				const mimeType = serializeAMimeType$1(dataURLStruct.mimeType);
				return Promise.resolve(makeResponse({
					statusText: "OK",
					headersList: [["content-type", {
						name: "Content-Type",
						value: mimeType
					}]],
					body: safelyExtractBody(dataURLStruct.body)[0]
				}));
			}
			case "file:": return Promise.resolve(makeNetworkError("not implemented... yet..."));
			case "http:":
			case "https:": return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
			default: return Promise.resolve(makeNetworkError("unknown scheme"));
		}
	}
	function finalizeResponse(fetchParams, response) {
		fetchParams.request.done = true;
		if (fetchParams.processResponseDone != null) queueMicrotask(() => fetchParams.processResponseDone(response));
	}
	function fetchFinale(fetchParams, response) {
		if (response.type === "error") {
			response.urlList = [fetchParams.request.urlList[0]];
			response.timingInfo = createOpaqueTimingInfo({ startTime: fetchParams.timingInfo.startTime });
		}
		const processResponseEndOfBody = () => {
			fetchParams.request.done = true;
			if (fetchParams.processResponseEndOfBody != null) queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
		};
		if (fetchParams.processResponse != null) queueMicrotask(() => fetchParams.processResponse(response));
		if (response.body == null) processResponseEndOfBody();
		else {
			const identityTransformAlgorithm = (chunk, controller) => {
				controller.enqueue(chunk);
			};
			const transformStream = new TransformStream({
				start() {},
				transform: identityTransformAlgorithm,
				flush: processResponseEndOfBody
			}, { size() {
				return 1;
			} }, { size() {
				return 1;
			} });
			response.body = { stream: response.body.stream.pipeThrough(transformStream) };
		}
		if (fetchParams.processResponseConsumeBody != null) {
			const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes);
			const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure);
			if (response.body == null) queueMicrotask(() => processBody(null));
			else return fullyReadBody(response.body, processBody, processBodyError);
			return Promise.resolve();
		}
	}
	async function httpFetch(fetchParams) {
		const request$1 = fetchParams.request;
		let response = null;
		let actualResponse = null;
		const timingInfo = fetchParams.timingInfo;
		if (request$1.serviceWorkers === "all") {}
		if (response === null) {
			if (request$1.redirect === "follow") request$1.serviceWorkers = "none";
			actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
			if (request$1.responseTainting === "cors" && corsCheck(request$1, response) === "failure") return makeNetworkError("cors failure");
			if (TAOCheck(request$1, response) === "failure") request$1.timingAllowFailed = true;
		}
		if ((request$1.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(request$1.origin, request$1.client, request$1.destination, actualResponse) === "blocked") return makeNetworkError("blocked");
		if (redirectStatusSet.has(actualResponse.status)) {
			if (request$1.redirect !== "manual") fetchParams.controller.connection.destroy();
			if (request$1.redirect === "error") response = makeNetworkError("unexpected redirect");
			else if (request$1.redirect === "manual") response = actualResponse;
			else if (request$1.redirect === "follow") response = await httpRedirectFetch(fetchParams, response);
			else assert$3(false);
		}
		response.timingInfo = timingInfo;
		return response;
	}
	function httpRedirectFetch(fetchParams, response) {
		const request$1 = fetchParams.request;
		const actualResponse = response.internalResponse ? response.internalResponse : response;
		let locationURL;
		try {
			locationURL = responseLocationURL(actualResponse, requestCurrentURL(request$1).hash);
			if (locationURL == null) return response;
		} catch (err) {
			return Promise.resolve(makeNetworkError(err));
		}
		if (!urlIsHttpHttpsScheme$1(locationURL)) return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
		if (request$1.redirectCount === 20) return Promise.resolve(makeNetworkError("redirect count exceeded"));
		request$1.redirectCount += 1;
		if (request$1.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request$1, locationURL)) return Promise.resolve(makeNetworkError("cross origin not allowed for request mode \"cors\""));
		if (request$1.responseTainting === "cors" && (locationURL.username || locationURL.password)) return Promise.resolve(makeNetworkError("URL cannot contain credentials for request mode \"cors\""));
		if (actualResponse.status !== 303 && request$1.body != null && request$1.body.source == null) return Promise.resolve(makeNetworkError());
		if ([301, 302].includes(actualResponse.status) && request$1.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request$1.method)) {
			request$1.method = "GET";
			request$1.body = null;
			for (const headerName of requestBodyHeader) request$1.headersList.delete(headerName);
		}
		if (!sameOrigin(requestCurrentURL(request$1), locationURL)) {
			request$1.headersList.delete("authorization");
			request$1.headersList.delete("proxy-authorization", true);
			request$1.headersList.delete("cookie");
			request$1.headersList.delete("host");
		}
		if (request$1.body != null) {
			assert$3(request$1.body.source != null);
			request$1.body = safelyExtractBody(request$1.body.source)[0];
		}
		const timingInfo = fetchParams.timingInfo;
		timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
		if (timingInfo.redirectStartTime === 0) timingInfo.redirectStartTime = timingInfo.startTime;
		request$1.urlList.push(locationURL);
		setRequestReferrerPolicyOnRedirect(request$1, actualResponse);
		return mainFetch(fetchParams, true);
	}
	async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
		const request$1 = fetchParams.request;
		let httpFetchParams = null;
		let httpRequest = null;
		let response = null;
		const httpCache = null;
		const revalidatingFlag = false;
		if (request$1.window === "no-window" && request$1.redirect === "error") {
			httpFetchParams = fetchParams;
			httpRequest = request$1;
		} else {
			httpRequest = makeRequest$1(request$1);
			httpFetchParams = { ...fetchParams };
			httpFetchParams.request = httpRequest;
		}
		const includeCredentials = request$1.credentials === "include" || request$1.credentials === "same-origin" && request$1.responseTainting === "basic";
		const contentLength = httpRequest.body ? httpRequest.body.length : null;
		let contentLengthHeaderValue = null;
		if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) contentLengthHeaderValue = "0";
		if (contentLength != null) contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
		if (contentLengthHeaderValue != null) httpRequest.headersList.append("content-length", contentLengthHeaderValue);
		if (contentLength != null && httpRequest.keepalive) {}
		if (httpRequest.referrer instanceof URL) httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
		appendRequestOriginHeader(httpRequest);
		appendFetchMetadata(httpRequest);
		if (!httpRequest.headersList.contains("user-agent")) httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
		if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) httpRequest.cache = "no-store";
		if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "max-age=0");
		if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
			if (!httpRequest.headersList.contains("pragma")) httpRequest.headersList.append("pragma", "no-cache");
			if (!httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "no-cache");
		}
		if (httpRequest.headersList.contains("range")) httpRequest.headersList.append("accept-encoding", "identity");
		if (!httpRequest.headersList.contains("accept-encoding")) if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
		else httpRequest.headersList.append("accept-encoding", "gzip, deflate");
		httpRequest.headersList.delete("host");
		if (includeCredentials) {}
		if (httpCache == null) httpRequest.cache = "no-store";
		if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {}
		if (response == null) {
			if (httpRequest.mode === "only-if-cached") return makeNetworkError("only if cached");
			const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
			if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {}
			if (revalidatingFlag && forwardResponse.status === 304) {}
			if (response == null) response = forwardResponse;
		}
		response.urlList = [...httpRequest.urlList];
		if (httpRequest.headersList.contains("range")) response.rangeRequested = true;
		response.requestIncludesCredentials = includeCredentials;
		if (response.status === 407) {
			if (request$1.window === "no-window") return makeNetworkError();
			if (isCancelled(fetchParams)) return makeAppropriateNetworkError(fetchParams);
			return makeNetworkError("proxy authentication required");
		}
		if (response.status === 421 && !isNewConnectionFetch && (request$1.body == null || request$1.body.source != null)) {
			if (isCancelled(fetchParams)) return makeAppropriateNetworkError(fetchParams);
			fetchParams.controller.connection.destroy();
			response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
		}
		if (isAuthenticationFetch) {}
		return response;
	}
	async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
		assert$3(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
		fetchParams.controller.connection = {
			abort: null,
			destroyed: false,
			destroy(err) {
				if (!this.destroyed) {
					this.destroyed = true;
					this.abort?.(err ?? new DOMException$3("The operation was aborted.", "AbortError"));
				}
			}
		};
		const request$1 = fetchParams.request;
		let response = null;
		const timingInfo = fetchParams.timingInfo;
		const httpCache = null;
		if (httpCache == null) request$1.cache = "no-store";
		const newConnection = forceNewConnection ? "yes" : "no";
		if (request$1.mode === "websocket") {}
		let requestBody = null;
		if (request$1.body == null && fetchParams.processRequestEndOfBody) queueMicrotask(() => fetchParams.processRequestEndOfBody());
		else if (request$1.body != null) {
			const processBodyChunk = async function* (bytes) {
				if (isCancelled(fetchParams)) return;
				yield bytes;
				fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
			};
			const processEndOfBody = () => {
				if (isCancelled(fetchParams)) return;
				if (fetchParams.processRequestEndOfBody) fetchParams.processRequestEndOfBody();
			};
			const processBodyError = (e$1) => {
				if (isCancelled(fetchParams)) return;
				if (e$1.name === "AbortError") fetchParams.controller.abort();
				else fetchParams.controller.terminate(e$1);
			};
			requestBody = async function* () {
				try {
					for await (const bytes of request$1.body.stream) yield* processBodyChunk(bytes);
					processEndOfBody();
				} catch (err) {
					processBodyError(err);
				}
			}();
		}
		try {
			const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
			if (socket) response = makeResponse({
				status,
				statusText,
				headersList,
				socket
			});
			else {
				const iterator = body[Symbol.asyncIterator]();
				fetchParams.controller.next = () => iterator.next();
				response = makeResponse({
					status,
					statusText,
					headersList
				});
			}
		} catch (err) {
			if (err.name === "AbortError") {
				fetchParams.controller.connection.destroy();
				return makeAppropriateNetworkError(fetchParams, err);
			}
			return makeNetworkError(err);
		}
		const pullAlgorithm = () => {
			fetchParams.controller.resume();
		};
		const cancelAlgorithm = (reason) => {
			fetchParams.controller.abort(reason);
		};
		if (!ReadableStream) ReadableStream = __require("stream/web").ReadableStream;
		const stream$2 = new ReadableStream({
			async start(controller) {
				fetchParams.controller.controller = controller;
			},
			async pull(controller) {
				await pullAlgorithm(controller);
			},
			async cancel(reason) {
				await cancelAlgorithm(reason);
			}
		}, {
			highWaterMark: 0,
			size() {
				return 1;
			}
		});
		response.body = { stream: stream$2 };
		fetchParams.controller.on("terminated", onAborted);
		fetchParams.controller.resume = async () => {
			while (true) {
				let bytes;
				let isFailure;
				try {
					const { done, value: value$1 } = await fetchParams.controller.next();
					if (isAborted(fetchParams)) break;
					bytes = done ? void 0 : value$1;
				} catch (err) {
					if (fetchParams.controller.ended && !timingInfo.encodedBodySize) bytes = void 0;
					else {
						bytes = err;
						isFailure = true;
					}
				}
				if (bytes === void 0) {
					readableStreamClose(fetchParams.controller.controller);
					finalizeResponse(fetchParams, response);
					return;
				}
				timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
				if (isFailure) {
					fetchParams.controller.terminate(bytes);
					return;
				}
				fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
				if (isErrored(stream$2)) {
					fetchParams.controller.terminate();
					return;
				}
				if (!fetchParams.controller.controller.desiredSize) return;
			}
		};
		function onAborted(reason) {
			if (isAborted(fetchParams)) {
				response.aborted = true;
				if (isReadable(stream$2)) fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
			} else if (isReadable(stream$2)) fetchParams.controller.controller.error(new TypeError("terminated", { cause: isErrorLike(reason) ? reason : void 0 }));
			fetchParams.controller.connection.destroy();
		}
		return response;
		async function dispatch({ body }) {
			const url = requestCurrentURL(request$1);
			/** @type {import('../..').Agent} */
			const agent = fetchParams.controller.dispatcher;
			return new Promise((resolve$1, reject) => agent.dispatch({
				path: url.pathname + url.search,
				origin: url.origin,
				method: request$1.method,
				body: fetchParams.controller.dispatcher.isMockActive ? request$1.body && (request$1.body.source || request$1.body.stream) : body,
				headers: request$1.headersList.entries,
				maxRedirections: 0,
				upgrade: request$1.mode === "websocket" ? "websocket" : void 0
			}, {
				body: null,
				abort: null,
				onConnect(abort$1) {
					const { connection } = fetchParams.controller;
					if (connection.destroyed) abort$1(new DOMException$3("The operation was aborted.", "AbortError"));
					else {
						fetchParams.controller.on("terminated", abort$1);
						this.abort = connection.abort = abort$1;
					}
				},
				onHeaders(status, headersList, resume$1, statusText) {
					if (status < 200) return;
					let codings = [];
					let location = "";
					const headers = new Headers$3();
					if (Array.isArray(headersList)) for (let n = 0; n < headersList.length; n += 2) {
						const key = headersList[n + 0].toString("latin1");
						const val = headersList[n + 1].toString("latin1");
						if (key.toLowerCase() === "content-encoding") codings = val.toLowerCase().split(",").map((x$3) => x$3.trim());
						else if (key.toLowerCase() === "location") location = val;
						headers[kHeadersList$2].append(key, val);
					}
					else {
						const keys = Object.keys(headersList);
						for (const key of keys) {
							const val = headersList[key];
							if (key.toLowerCase() === "content-encoding") codings = val.toLowerCase().split(",").map((x$3) => x$3.trim()).reverse();
							else if (key.toLowerCase() === "location") location = val;
							headers[kHeadersList$2].append(key, val);
						}
					}
					this.body = new Readable$1({ read: resume$1 });
					const decoders$1 = [];
					const willFollow = request$1.redirect === "follow" && location && redirectStatusSet.has(status);
					if (request$1.method !== "HEAD" && request$1.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) for (const coding of codings) if (coding === "x-gzip" || coding === "gzip") decoders$1.push(zlib$1.createGunzip({
						flush: zlib$1.constants.Z_SYNC_FLUSH,
						finishFlush: zlib$1.constants.Z_SYNC_FLUSH
					}));
					else if (coding === "deflate") decoders$1.push(zlib$1.createInflate());
					else if (coding === "br") decoders$1.push(zlib$1.createBrotliDecompress());
					else {
						decoders$1.length = 0;
						break;
					}
					resolve$1({
						status,
						statusText,
						headersList: headers[kHeadersList$2],
						body: decoders$1.length ? pipeline(this.body, ...decoders$1, () => {}) : this.body.on("error", () => {})
					});
					return true;
				},
				onData(chunk) {
					if (fetchParams.controller.dump) return;
					const bytes = chunk;
					timingInfo.encodedBodySize += bytes.byteLength;
					return this.body.push(bytes);
				},
				onComplete() {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					fetchParams.controller.ended = true;
					this.body.push(null);
				},
				onError(error$1) {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					this.body?.destroy(error$1);
					fetchParams.controller.terminate(error$1);
					reject(error$1);
				},
				onUpgrade(status, headersList, socket) {
					if (status !== 101) return;
					const headers = new Headers$3();
					for (let n = 0; n < headersList.length; n += 2) {
						const key = headersList[n + 0].toString("latin1");
						const val = headersList[n + 1].toString("latin1");
						headers[kHeadersList$2].append(key, val);
					}
					resolve$1({
						status,
						statusText: STATUS_CODES[status],
						headersList: headers[kHeadersList$2],
						socket
					});
					return true;
				}
			}));
		}
	}
	module.exports = {
		fetch,
		Fetch,
		fetching: fetching$2,
		finalizeAndReportTiming
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/symbols.js
var require_symbols$2 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/symbols.js"(exports, module) {
	module.exports = {
		kState: Symbol("FileReader state"),
		kResult: Symbol("FileReader result"),
		kError: Symbol("FileReader error"),
		kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
		kEvents: Symbol("FileReader events"),
		kAborted: Symbol("FileReader aborted")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/progressevent.js"(exports, module) {
	const { webidl: webidl$6 } = require_webidl();
	const kState$3 = Symbol("ProgressEvent state");
	/**
	* @see https://xhr.spec.whatwg.org/#progressevent
	*/
	var ProgressEvent$1 = class ProgressEvent$1 extends Event {
		constructor(type$1, eventInitDict = {}) {
			type$1 = webidl$6.converters.DOMString(type$1);
			eventInitDict = webidl$6.converters.ProgressEventInit(eventInitDict ?? {});
			super(type$1, eventInitDict);
			this[kState$3] = {
				lengthComputable: eventInitDict.lengthComputable,
				loaded: eventInitDict.loaded,
				total: eventInitDict.total
			};
		}
		get lengthComputable() {
			webidl$6.brandCheck(this, ProgressEvent$1);
			return this[kState$3].lengthComputable;
		}
		get loaded() {
			webidl$6.brandCheck(this, ProgressEvent$1);
			return this[kState$3].loaded;
		}
		get total() {
			webidl$6.brandCheck(this, ProgressEvent$1);
			return this[kState$3].total;
		}
	};
	webidl$6.converters.ProgressEventInit = webidl$6.dictionaryConverter([
		{
			key: "lengthComputable",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		},
		{
			key: "loaded",
			converter: webidl$6.converters["unsigned long long"],
			defaultValue: 0
		},
		{
			key: "total",
			converter: webidl$6.converters["unsigned long long"],
			defaultValue: 0
		},
		{
			key: "bubbles",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		},
		{
			key: "cancelable",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		},
		{
			key: "composed",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		}
	]);
	module.exports = { ProgressEvent: ProgressEvent$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/encoding.js"(exports, module) {
	/**
	* @see https://encoding.spec.whatwg.org/#concept-encoding-get
	* @param {string|undefined} label
	*/
	function getEncoding$1(label) {
		if (!label) return "failure";
		switch (label.trim().toLowerCase()) {
			case "unicode-1-1-utf-8":
			case "unicode11utf8":
			case "unicode20utf8":
			case "utf-8":
			case "utf8":
			case "x-unicode20utf8": return "UTF-8";
			case "866":
			case "cp866":
			case "csibm866":
			case "ibm866": return "IBM866";
			case "csisolatin2":
			case "iso-8859-2":
			case "iso-ir-101":
			case "iso8859-2":
			case "iso88592":
			case "iso_8859-2":
			case "iso_8859-2:1987":
			case "l2":
			case "latin2": return "ISO-8859-2";
			case "csisolatin3":
			case "iso-8859-3":
			case "iso-ir-109":
			case "iso8859-3":
			case "iso88593":
			case "iso_8859-3":
			case "iso_8859-3:1988":
			case "l3":
			case "latin3": return "ISO-8859-3";
			case "csisolatin4":
			case "iso-8859-4":
			case "iso-ir-110":
			case "iso8859-4":
			case "iso88594":
			case "iso_8859-4":
			case "iso_8859-4:1988":
			case "l4":
			case "latin4": return "ISO-8859-4";
			case "csisolatincyrillic":
			case "cyrillic":
			case "iso-8859-5":
			case "iso-ir-144":
			case "iso8859-5":
			case "iso88595":
			case "iso_8859-5":
			case "iso_8859-5:1988": return "ISO-8859-5";
			case "arabic":
			case "asmo-708":
			case "csiso88596e":
			case "csiso88596i":
			case "csisolatinarabic":
			case "ecma-114":
			case "iso-8859-6":
			case "iso-8859-6-e":
			case "iso-8859-6-i":
			case "iso-ir-127":
			case "iso8859-6":
			case "iso88596":
			case "iso_8859-6":
			case "iso_8859-6:1987": return "ISO-8859-6";
			case "csisolatingreek":
			case "ecma-118":
			case "elot_928":
			case "greek":
			case "greek8":
			case "iso-8859-7":
			case "iso-ir-126":
			case "iso8859-7":
			case "iso88597":
			case "iso_8859-7":
			case "iso_8859-7:1987":
			case "sun_eu_greek": return "ISO-8859-7";
			case "csiso88598e":
			case "csisolatinhebrew":
			case "hebrew":
			case "iso-8859-8":
			case "iso-8859-8-e":
			case "iso-ir-138":
			case "iso8859-8":
			case "iso88598":
			case "iso_8859-8":
			case "iso_8859-8:1988":
			case "visual": return "ISO-8859-8";
			case "csiso88598i":
			case "iso-8859-8-i":
			case "logical": return "ISO-8859-8-I";
			case "csisolatin6":
			case "iso-8859-10":
			case "iso-ir-157":
			case "iso8859-10":
			case "iso885910":
			case "l6":
			case "latin6": return "ISO-8859-10";
			case "iso-8859-13":
			case "iso8859-13":
			case "iso885913": return "ISO-8859-13";
			case "iso-8859-14":
			case "iso8859-14":
			case "iso885914": return "ISO-8859-14";
			case "csisolatin9":
			case "iso-8859-15":
			case "iso8859-15":
			case "iso885915":
			case "iso_8859-15":
			case "l9": return "ISO-8859-15";
			case "iso-8859-16": return "ISO-8859-16";
			case "cskoi8r":
			case "koi":
			case "koi8":
			case "koi8-r":
			case "koi8_r": return "KOI8-R";
			case "koi8-ru":
			case "koi8-u": return "KOI8-U";
			case "csmacintosh":
			case "mac":
			case "macintosh":
			case "x-mac-roman": return "macintosh";
			case "iso-8859-11":
			case "iso8859-11":
			case "iso885911":
			case "tis-620":
			case "windows-874": return "windows-874";
			case "cp1250":
			case "windows-1250":
			case "x-cp1250": return "windows-1250";
			case "cp1251":
			case "windows-1251":
			case "x-cp1251": return "windows-1251";
			case "ansi_x3.4-1968":
			case "ascii":
			case "cp1252":
			case "cp819":
			case "csisolatin1":
			case "ibm819":
			case "iso-8859-1":
			case "iso-ir-100":
			case "iso8859-1":
			case "iso88591":
			case "iso_8859-1":
			case "iso_8859-1:1987":
			case "l1":
			case "latin1":
			case "us-ascii":
			case "windows-1252":
			case "x-cp1252": return "windows-1252";
			case "cp1253":
			case "windows-1253":
			case "x-cp1253": return "windows-1253";
			case "cp1254":
			case "csisolatin5":
			case "iso-8859-9":
			case "iso-ir-148":
			case "iso8859-9":
			case "iso88599":
			case "iso_8859-9":
			case "iso_8859-9:1989":
			case "l5":
			case "latin5":
			case "windows-1254":
			case "x-cp1254": return "windows-1254";
			case "cp1255":
			case "windows-1255":
			case "x-cp1255": return "windows-1255";
			case "cp1256":
			case "windows-1256":
			case "x-cp1256": return "windows-1256";
			case "cp1257":
			case "windows-1257":
			case "x-cp1257": return "windows-1257";
			case "cp1258":
			case "windows-1258":
			case "x-cp1258": return "windows-1258";
			case "x-mac-cyrillic":
			case "x-mac-ukrainian": return "x-mac-cyrillic";
			case "chinese":
			case "csgb2312":
			case "csiso58gb231280":
			case "gb2312":
			case "gb_2312":
			case "gb_2312-80":
			case "gbk":
			case "iso-ir-58":
			case "x-gbk": return "GBK";
			case "gb18030": return "gb18030";
			case "big5":
			case "big5-hkscs":
			case "cn-big5":
			case "csbig5":
			case "x-x-big5": return "Big5";
			case "cseucpkdfmtjapanese":
			case "euc-jp":
			case "x-euc-jp": return "EUC-JP";
			case "csiso2022jp":
			case "iso-2022-jp": return "ISO-2022-JP";
			case "csshiftjis":
			case "ms932":
			case "ms_kanji":
			case "shift-jis":
			case "shift_jis":
			case "sjis":
			case "windows-31j":
			case "x-sjis": return "Shift_JIS";
			case "cseuckr":
			case "csksc56011987":
			case "euc-kr":
			case "iso-ir-149":
			case "korean":
			case "ks_c_5601-1987":
			case "ks_c_5601-1989":
			case "ksc5601":
			case "ksc_5601":
			case "windows-949": return "EUC-KR";
			case "csiso2022kr":
			case "hz-gb-2312":
			case "iso-2022-cn":
			case "iso-2022-cn-ext":
			case "iso-2022-kr":
			case "replacement": return "replacement";
			case "unicodefffe":
			case "utf-16be": return "UTF-16BE";
			case "csunicode":
			case "iso-10646-ucs-2":
			case "ucs-2":
			case "unicode":
			case "unicodefeff":
			case "utf-16":
			case "utf-16le": return "UTF-16LE";
			case "x-user-defined": return "x-user-defined";
			default: return "failure";
		}
	}
	module.exports = { getEncoding: getEncoding$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/util.js
var require_util$3 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/util.js"(exports, module) {
	const { kState: kState$2, kError: kError$1, kResult: kResult$1, kAborted: kAborted$1, kLastProgressEventFired } = require_symbols$2();
	const { ProgressEvent } = require_progressevent();
	const { getEncoding } = require_encoding();
	const { DOMException: DOMException$2 } = require_constants$4();
	const { serializeAMimeType, parseMIMEType } = require_dataURL();
	const { types: types$3 } = __require("util");
	const { StringDecoder } = __require("string_decoder");
	const { btoa: btoa$1 } = __require("buffer");
	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors$3 = {
		enumerable: true,
		writable: false,
		configurable: false
	};
	/**
	* @see https://w3c.github.io/FileAPI/#readOperation
	* @param {import('./filereader').FileReader} fr
	* @param {import('buffer').Blob} blob
	* @param {string} type
	* @param {string?} encodingName
	*/
	function readOperation$1(fr, blob, type$1, encodingName) {
		if (fr[kState$2] === "loading") throw new DOMException$2("Invalid state", "InvalidStateError");
		fr[kState$2] = "loading";
		fr[kResult$1] = null;
		fr[kError$1] = null;
		/** @type {import('stream/web').ReadableStream} */
		const stream$2 = blob.stream();
		const reader = stream$2.getReader();
		/** @type {Uint8Array[]} */
		const bytes = [];
		let chunkPromise = reader.read();
		let isFirstChunk = true;
		(async () => {
			while (!fr[kAborted$1]) try {
				const { done, value: value$1 } = await chunkPromise;
				if (isFirstChunk && !fr[kAborted$1]) queueMicrotask(() => {
					fireAProgressEvent$1("loadstart", fr);
				});
				isFirstChunk = false;
				if (!done && types$3.isUint8Array(value$1)) {
					bytes.push(value$1);
					if ((fr[kLastProgressEventFired] === void 0 || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted$1]) {
						fr[kLastProgressEventFired] = Date.now();
						queueMicrotask(() => {
							fireAProgressEvent$1("progress", fr);
						});
					}
					chunkPromise = reader.read();
				} else if (done) {
					queueMicrotask(() => {
						fr[kState$2] = "done";
						try {
							const result = packageData(bytes, type$1, blob.type, encodingName);
							if (fr[kAborted$1]) return;
							fr[kResult$1] = result;
							fireAProgressEvent$1("load", fr);
						} catch (error$1) {
							fr[kError$1] = error$1;
							fireAProgressEvent$1("error", fr);
						}
						if (fr[kState$2] !== "loading") fireAProgressEvent$1("loadend", fr);
					});
					break;
				}
			} catch (error$1) {
				if (fr[kAborted$1]) return;
				queueMicrotask(() => {
					fr[kState$2] = "done";
					fr[kError$1] = error$1;
					fireAProgressEvent$1("error", fr);
					if (fr[kState$2] !== "loading") fireAProgressEvent$1("loadend", fr);
				});
				break;
			}
		})();
	}
	/**
	* @see https://w3c.github.io/FileAPI/#fire-a-progress-event
	* @see https://dom.spec.whatwg.org/#concept-event-fire
	* @param {string} e The name of the event
	* @param {import('./filereader').FileReader} reader
	*/
	function fireAProgressEvent$1(e$1, reader) {
		const event = new ProgressEvent(e$1, {
			bubbles: false,
			cancelable: false
		});
		reader.dispatchEvent(event);
	}
	/**
	* @see https://w3c.github.io/FileAPI/#blob-package-data
	* @param {Uint8Array[]} bytes
	* @param {string} type
	* @param {string?} mimeType
	* @param {string?} encodingName
	*/
	function packageData(bytes, type$1, mimeType, encodingName) {
		switch (type$1) {
			case "DataURL": {
				let dataURL = "data:";
				const parsed = parseMIMEType(mimeType || "application/octet-stream");
				if (parsed !== "failure") dataURL += serializeAMimeType(parsed);
				dataURL += ";base64,";
				const decoder = new StringDecoder("latin1");
				for (const chunk of bytes) dataURL += btoa$1(decoder.write(chunk));
				dataURL += btoa$1(decoder.end());
				return dataURL;
			}
			case "Text": {
				let encoding = "failure";
				if (encodingName) encoding = getEncoding(encodingName);
				if (encoding === "failure" && mimeType) {
					const type$2 = parseMIMEType(mimeType);
					if (type$2 !== "failure") encoding = getEncoding(type$2.parameters.get("charset"));
				}
				if (encoding === "failure") encoding = "UTF-8";
				return decode(bytes, encoding);
			}
			case "ArrayBuffer": {
				const sequence = combineByteSequences(bytes);
				return sequence.buffer;
			}
			case "BinaryString": {
				let binaryString = "";
				const decoder = new StringDecoder("latin1");
				for (const chunk of bytes) binaryString += decoder.write(chunk);
				binaryString += decoder.end();
				return binaryString;
			}
		}
	}
	/**
	* @see https://encoding.spec.whatwg.org/#decode
	* @param {Uint8Array[]} ioQueue
	* @param {string} encoding
	*/
	function decode(ioQueue, encoding) {
		const bytes = combineByteSequences(ioQueue);
		const BOMEncoding = BOMSniffing(bytes);
		let slice$1 = 0;
		if (BOMEncoding !== null) {
			encoding = BOMEncoding;
			slice$1 = BOMEncoding === "UTF-8" ? 3 : 2;
		}
		const sliced = bytes.slice(slice$1);
		return new TextDecoder(encoding).decode(sliced);
	}
	/**
	* @see https://encoding.spec.whatwg.org/#bom-sniff
	* @param {Uint8Array} ioQueue
	*/
	function BOMSniffing(ioQueue) {
		const [a, b$2, c] = ioQueue;
		if (a === 239 && b$2 === 187 && c === 191) return "UTF-8";
		else if (a === 254 && b$2 === 255) return "UTF-16BE";
		else if (a === 255 && b$2 === 254) return "UTF-16LE";
		return null;
	}
	/**
	* @param {Uint8Array[]} sequences
	*/
	function combineByteSequences(sequences) {
		const size = sequences.reduce((a, b$2) => {
			return a + b$2.byteLength;
		}, 0);
		let offset = 0;
		return sequences.reduce((a, b$2) => {
			a.set(b$2, offset);
			offset += b$2.byteLength;
			return a;
		}, new Uint8Array(size));
	}
	module.exports = {
		staticPropertyDescriptors: staticPropertyDescriptors$3,
		readOperation: readOperation$1,
		fireAProgressEvent: fireAProgressEvent$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/filereader.js"(exports, module) {
	const { staticPropertyDescriptors: staticPropertyDescriptors$2, readOperation, fireAProgressEvent } = require_util$3();
	const { kState: kState$1, kError, kResult, kEvents, kAborted } = require_symbols$2();
	const { webidl: webidl$5 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$4 } = require_util$6();
	var FileReader = class FileReader extends EventTarget {
		constructor() {
			super();
			this[kState$1] = "empty";
			this[kResult] = null;
			this[kError] = null;
			this[kEvents] = {
				loadend: null,
				error: null,
				abort: null,
				load: null,
				progress: null,
				loadstart: null
			};
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
		* @param {import('buffer').Blob} blob
		*/
		readAsArrayBuffer(blob) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "ArrayBuffer");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#readAsBinaryString
		* @param {import('buffer').Blob} blob
		*/
		readAsBinaryString(blob) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "BinaryString");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#readAsDataText
		* @param {import('buffer').Blob} blob
		* @param {string?} encoding
		*/
		readAsText(blob, encoding = void 0) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			if (encoding !== void 0) encoding = webidl$5.converters.DOMString(encoding);
			readOperation(this, blob, "Text", encoding);
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
		* @param {import('buffer').Blob} blob
		*/
		readAsDataURL(blob) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "DataURL");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-abort
		*/
		abort() {
			if (this[kState$1] === "empty" || this[kState$1] === "done") {
				this[kResult] = null;
				return;
			}
			if (this[kState$1] === "loading") {
				this[kState$1] = "done";
				this[kResult] = null;
			}
			this[kAborted] = true;
			fireAProgressEvent("abort", this);
			if (this[kState$1] !== "loading") fireAProgressEvent("loadend", this);
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
		*/
		get readyState() {
			webidl$5.brandCheck(this, FileReader);
			switch (this[kState$1]) {
				case "empty": return this.EMPTY;
				case "loading": return this.LOADING;
				case "done": return this.DONE;
			}
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-result
		*/
		get result() {
			webidl$5.brandCheck(this, FileReader);
			return this[kResult];
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-error
		*/
		get error() {
			webidl$5.brandCheck(this, FileReader);
			return this[kError];
		}
		get onloadend() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].loadend;
		}
		set onloadend(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].loadend) this.removeEventListener("loadend", this[kEvents].loadend);
			if (typeof fn === "function") {
				this[kEvents].loadend = fn;
				this.addEventListener("loadend", fn);
			} else this[kEvents].loadend = null;
		}
		get onerror() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].error;
		}
		set onerror(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].error) this.removeEventListener("error", this[kEvents].error);
			if (typeof fn === "function") {
				this[kEvents].error = fn;
				this.addEventListener("error", fn);
			} else this[kEvents].error = null;
		}
		get onloadstart() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].loadstart;
		}
		set onloadstart(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].loadstart) this.removeEventListener("loadstart", this[kEvents].loadstart);
			if (typeof fn === "function") {
				this[kEvents].loadstart = fn;
				this.addEventListener("loadstart", fn);
			} else this[kEvents].loadstart = null;
		}
		get onprogress() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].progress;
		}
		set onprogress(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].progress) this.removeEventListener("progress", this[kEvents].progress);
			if (typeof fn === "function") {
				this[kEvents].progress = fn;
				this.addEventListener("progress", fn);
			} else this[kEvents].progress = null;
		}
		get onload() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].load;
		}
		set onload(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].load) this.removeEventListener("load", this[kEvents].load);
			if (typeof fn === "function") {
				this[kEvents].load = fn;
				this.addEventListener("load", fn);
			} else this[kEvents].load = null;
		}
		get onabort() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].abort;
		}
		set onabort(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].abort) this.removeEventListener("abort", this[kEvents].abort);
			if (typeof fn === "function") {
				this[kEvents].abort = fn;
				this.addEventListener("abort", fn);
			} else this[kEvents].abort = null;
		}
	};
	FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
	FileReader.LOADING = FileReader.prototype.LOADING = 1;
	FileReader.DONE = FileReader.prototype.DONE = 2;
	Object.defineProperties(FileReader.prototype, {
		EMPTY: staticPropertyDescriptors$2,
		LOADING: staticPropertyDescriptors$2,
		DONE: staticPropertyDescriptors$2,
		readAsArrayBuffer: kEnumerableProperty$4,
		readAsBinaryString: kEnumerableProperty$4,
		readAsText: kEnumerableProperty$4,
		readAsDataURL: kEnumerableProperty$4,
		abort: kEnumerableProperty$4,
		readyState: kEnumerableProperty$4,
		result: kEnumerableProperty$4,
		error: kEnumerableProperty$4,
		onloadstart: kEnumerableProperty$4,
		onprogress: kEnumerableProperty$4,
		onload: kEnumerableProperty$4,
		onabort: kEnumerableProperty$4,
		onerror: kEnumerableProperty$4,
		onloadend: kEnumerableProperty$4,
		[Symbol.toStringTag]: {
			value: "FileReader",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	Object.defineProperties(FileReader, {
		EMPTY: staticPropertyDescriptors$2,
		LOADING: staticPropertyDescriptors$2,
		DONE: staticPropertyDescriptors$2
	});
	module.exports = { FileReader };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/symbols.js
var require_symbols$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/symbols.js"(exports, module) {
	module.exports = { kConstruct: require_symbols$4().kConstruct };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/util.js
var require_util$2 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/util.js"(exports, module) {
	const assert$2 = __require("assert");
	const { URLSerializer: URLSerializer$1 } = require_dataURL();
	const { isValidHeaderName } = require_util$5();
	/**
	* @see https://url.spec.whatwg.org/#concept-url-equals
	* @param {URL} A
	* @param {URL} B
	* @param {boolean | undefined} excludeFragment
	* @returns {boolean}
	*/
	function urlEquals$1(A$2, B$1, excludeFragment = false) {
		const serializedA = URLSerializer$1(A$2, excludeFragment);
		const serializedB = URLSerializer$1(B$1, excludeFragment);
		return serializedA === serializedB;
	}
	/**
	* @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
	* @param {string} header
	*/
	function fieldValues(header) {
		assert$2(header !== null);
		const values = [];
		for (let value$1 of header.split(",")) {
			value$1 = value$1.trim();
			if (!value$1.length) continue;
			else if (!isValidHeaderName(value$1)) continue;
			values.push(value$1);
		}
		return values;
	}
	module.exports = {
		urlEquals: urlEquals$1,
		fieldValues
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/cache.js
var require_cache = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/cache.js"(exports, module) {
	const { kConstruct: kConstruct$1 } = require_symbols$1();
	const { urlEquals, fieldValues: getFieldValues } = require_util$2();
	const { kEnumerableProperty: kEnumerableProperty$3, isDisturbed } = require_util$6();
	const { kHeadersList: kHeadersList$1 } = require_symbols$4();
	const { webidl: webidl$4 } = require_webidl();
	const { Response, cloneResponse } = require_response();
	const { Request } = require_request();
	const { kState, kHeaders, kGuard, kRealm } = require_symbols$3();
	const { fetching: fetching$1 } = require_fetch();
	const { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util$5();
	const assert$1 = __require("assert");
	const { getGlobalDispatcher: getGlobalDispatcher$3 } = require_global();
	/**
	* @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
	* @typedef {Object} CacheBatchOperation
	* @property {'delete' | 'put'} type
	* @property {any} request
	* @property {any} response
	* @property {import('../../types/cache').CacheQueryOptions} options
	*/
	/**
	* @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
	* @typedef {[any, any][]} requestResponseList
	*/
	var Cache$1 = class Cache$1 {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
		* @type {requestResponseList}
		*/
		#relevantRequestResponseList;
		constructor() {
			if (arguments[0] !== kConstruct$1) webidl$4.illegalConstructor();
			this.#relevantRequestResponseList = arguments[1];
		}
		async match(request$1, options = {}) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
			request$1 = webidl$4.converters.RequestInfo(request$1);
			options = webidl$4.converters.CacheQueryOptions(options);
			const p$1 = await this.matchAll(request$1, options);
			if (p$1.length === 0) return;
			return p$1[0];
		}
		async matchAll(request$1 = void 0, options = {}) {
			webidl$4.brandCheck(this, Cache$1);
			if (request$1 !== void 0) request$1 = webidl$4.converters.RequestInfo(request$1);
			options = webidl$4.converters.CacheQueryOptions(options);
			let r$1 = null;
			if (request$1 !== void 0) {
				if (request$1 instanceof Request) {
					r$1 = request$1[kState];
					if (r$1.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$1 === "string") r$1 = new Request(request$1)[kState];
			}
			const responses = [];
			if (request$1 === void 0) for (const requestResponse of this.#relevantRequestResponseList) responses.push(requestResponse[1]);
			else {
				const requestResponses = this.#queryCache(r$1, options);
				for (const requestResponse of requestResponses) responses.push(requestResponse[1]);
			}
			const responseList = [];
			for (const response of responses) {
				const responseObject = new Response(response.body?.source ?? null);
				const body = responseObject[kState].body;
				responseObject[kState] = response;
				responseObject[kState].body = body;
				responseObject[kHeaders][kHeadersList$1] = response.headersList;
				responseObject[kHeaders][kGuard] = "immutable";
				responseList.push(responseObject);
			}
			return Object.freeze(responseList);
		}
		async add(request$1) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
			request$1 = webidl$4.converters.RequestInfo(request$1);
			const requests = [request$1];
			const responseArrayPromise = this.addAll(requests);
			return await responseArrayPromise;
		}
		async addAll(requests) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
			requests = webidl$4.converters["sequence<RequestInfo>"](requests);
			const responsePromises = [];
			const requestList = [];
			for (const request$1 of requests) {
				if (typeof request$1 === "string") continue;
				const r$1 = request$1[kState];
				if (!urlIsHttpHttpsScheme(r$1.url) || r$1.method !== "GET") throw webidl$4.errors.exception({
					header: "Cache.addAll",
					message: "Expected http/s scheme when method is not GET."
				});
			}
			/** @type {ReturnType<typeof fetching>[]} */
			const fetchControllers = [];
			for (const request$1 of requests) {
				const r$1 = new Request(request$1)[kState];
				if (!urlIsHttpHttpsScheme(r$1.url)) throw webidl$4.errors.exception({
					header: "Cache.addAll",
					message: "Expected http/s scheme."
				});
				r$1.initiator = "fetch";
				r$1.destination = "subresource";
				requestList.push(r$1);
				const responsePromise = createDeferredPromise();
				fetchControllers.push(fetching$1({
					request: r$1,
					dispatcher: getGlobalDispatcher$3(),
					processResponse(response) {
						if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) responsePromise.reject(webidl$4.errors.exception({
							header: "Cache.addAll",
							message: "Received an invalid status code or the request failed."
						}));
						else if (response.headersList.contains("vary")) {
							const fieldValues$1 = getFieldValues(response.headersList.get("vary"));
							for (const fieldValue of fieldValues$1) if (fieldValue === "*") {
								responsePromise.reject(webidl$4.errors.exception({
									header: "Cache.addAll",
									message: "invalid vary field value"
								}));
								for (const controller of fetchControllers) controller.abort();
								return;
							}
						}
					},
					processResponseEndOfBody(response) {
						if (response.aborted) {
							responsePromise.reject(new DOMException("aborted", "AbortError"));
							return;
						}
						responsePromise.resolve(response);
					}
				}));
				responsePromises.push(responsePromise.promise);
			}
			const p$1 = Promise.all(responsePromises);
			const responses = await p$1;
			const operations = [];
			let index = 0;
			for (const response of responses) {
				/** @type {CacheBatchOperation} */
				const operation = {
					type: "put",
					request: requestList[index],
					response
				};
				operations.push(operation);
				index++;
			}
			const cacheJobPromise = createDeferredPromise();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e$1) {
				errorData = e$1;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(void 0);
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async put(request$1, response) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
			request$1 = webidl$4.converters.RequestInfo(request$1);
			response = webidl$4.converters.Response(response);
			let innerRequest = null;
			if (request$1 instanceof Request) innerRequest = request$1[kState];
			else innerRequest = new Request(request$1)[kState];
			if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") throw webidl$4.errors.exception({
				header: "Cache.put",
				message: "Expected an http/s scheme when method is not GET"
			});
			const innerResponse = response[kState];
			if (innerResponse.status === 206) throw webidl$4.errors.exception({
				header: "Cache.put",
				message: "Got 206 status"
			});
			if (innerResponse.headersList.contains("vary")) {
				const fieldValues$1 = getFieldValues(innerResponse.headersList.get("vary"));
				for (const fieldValue of fieldValues$1) if (fieldValue === "*") throw webidl$4.errors.exception({
					header: "Cache.put",
					message: "Got * vary field value"
				});
			}
			if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) throw webidl$4.errors.exception({
				header: "Cache.put",
				message: "Response body is locked or disturbed"
			});
			const clonedResponse = cloneResponse(innerResponse);
			const bodyReadPromise = createDeferredPromise();
			if (innerResponse.body != null) {
				const stream$2 = innerResponse.body.stream;
				const reader = stream$2.getReader();
				readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
			} else bodyReadPromise.resolve(void 0);
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "put",
				request: innerRequest,
				response: clonedResponse
			};
			operations.push(operation);
			const bytes = await bodyReadPromise.promise;
			if (clonedResponse.body != null) clonedResponse.body.source = bytes;
			const cacheJobPromise = createDeferredPromise();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e$1) {
				errorData = e$1;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve();
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async delete(request$1, options = {}) {
			webidl$4.brandCheck(this, Cache$1);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
			request$1 = webidl$4.converters.RequestInfo(request$1);
			options = webidl$4.converters.CacheQueryOptions(options);
			/**
			* @type {Request}
			*/
			let r$1 = null;
			if (request$1 instanceof Request) {
				r$1 = request$1[kState];
				if (r$1.method !== "GET" && !options.ignoreMethod) return false;
			} else {
				assert$1(typeof request$1 === "string");
				r$1 = new Request(request$1)[kState];
			}
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "delete",
				request: r$1,
				options
			};
			operations.push(operation);
			const cacheJobPromise = createDeferredPromise();
			let errorData = null;
			let requestResponses;
			try {
				requestResponses = this.#batchCacheOperations(operations);
			} catch (e$1) {
				errorData = e$1;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(!!requestResponses?.length);
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
		* @param {any} request
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @returns {readonly Request[]}
		*/
		async keys(request$1 = void 0, options = {}) {
			webidl$4.brandCheck(this, Cache$1);
			if (request$1 !== void 0) request$1 = webidl$4.converters.RequestInfo(request$1);
			options = webidl$4.converters.CacheQueryOptions(options);
			let r$1 = null;
			if (request$1 !== void 0) {
				if (request$1 instanceof Request) {
					r$1 = request$1[kState];
					if (r$1.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$1 === "string") r$1 = new Request(request$1)[kState];
			}
			const promise = createDeferredPromise();
			const requests = [];
			if (request$1 === void 0) for (const requestResponse of this.#relevantRequestResponseList) requests.push(requestResponse[0]);
			else {
				const requestResponses = this.#queryCache(r$1, options);
				for (const requestResponse of requestResponses) requests.push(requestResponse[0]);
			}
			queueMicrotask(() => {
				const requestList = [];
				for (const request$2 of requests) {
					const requestObject = new Request("https://a");
					requestObject[kState] = request$2;
					requestObject[kHeaders][kHeadersList$1] = request$2.headersList;
					requestObject[kHeaders][kGuard] = "immutable";
					requestObject[kRealm] = request$2.client;
					requestList.push(requestObject);
				}
				promise.resolve(Object.freeze(requestList));
			});
			return promise.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
		* @param {CacheBatchOperation[]} operations
		* @returns {requestResponseList}
		*/
		#batchCacheOperations(operations) {
			const cache = this.#relevantRequestResponseList;
			const backupCache = [...cache];
			const addedItems = [];
			const resultList = [];
			try {
				for (const operation of operations) {
					if (operation.type !== "delete" && operation.type !== "put") throw webidl$4.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "operation type does not match \"delete\" or \"put\""
					});
					if (operation.type === "delete" && operation.response != null) throw webidl$4.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "delete operation should not have an associated response"
					});
					if (this.#queryCache(operation.request, operation.options, addedItems).length) throw new DOMException("???", "InvalidStateError");
					let requestResponses;
					if (operation.type === "delete") {
						requestResponses = this.#queryCache(operation.request, operation.options);
						if (requestResponses.length === 0) return [];
						for (const requestResponse of requestResponses) {
							const idx = cache.indexOf(requestResponse);
							assert$1(idx !== -1);
							cache.splice(idx, 1);
						}
					} else if (operation.type === "put") {
						if (operation.response == null) throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "put operation should have an associated response"
						});
						const r$1 = operation.request;
						if (!urlIsHttpHttpsScheme(r$1.url)) throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "expected http or https scheme"
						});
						if (r$1.method !== "GET") throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "not get method"
						});
						if (operation.options != null) throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "options must not be defined"
						});
						requestResponses = this.#queryCache(operation.request);
						for (const requestResponse of requestResponses) {
							const idx = cache.indexOf(requestResponse);
							assert$1(idx !== -1);
							cache.splice(idx, 1);
						}
						cache.push([operation.request, operation.response]);
						addedItems.push([operation.request, operation.response]);
					}
					resultList.push([operation.request, operation.response]);
				}
				return resultList;
			} catch (e$1) {
				this.#relevantRequestResponseList.length = 0;
				this.#relevantRequestResponseList = backupCache;
				throw e$1;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#query-cache
		* @param {any} requestQuery
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @param {requestResponseList} targetStorage
		* @returns {requestResponseList}
		*/
		#queryCache(requestQuery, options, targetStorage) {
			/** @type {requestResponseList} */
			const resultList = [];
			const storage = targetStorage ?? this.#relevantRequestResponseList;
			for (const requestResponse of storage) {
				const [cachedRequest, cachedResponse] = requestResponse;
				if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) resultList.push(requestResponse);
			}
			return resultList;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
		* @param {any} requestQuery
		* @param {any} request
		* @param {any | null} response
		* @param {import('../../types/cache').CacheQueryOptions | undefined} options
		* @returns {boolean}
		*/
		#requestMatchesCachedItem(requestQuery, request$1, response = null, options) {
			const queryURL = new URL(requestQuery.url);
			const cachedURL = new URL(request$1.url);
			if (options?.ignoreSearch) {
				cachedURL.search = "";
				queryURL.search = "";
			}
			if (!urlEquals(queryURL, cachedURL, true)) return false;
			if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) return true;
			const fieldValues$1 = getFieldValues(response.headersList.get("vary"));
			for (const fieldValue of fieldValues$1) {
				if (fieldValue === "*") return false;
				const requestValue = request$1.headersList.get(fieldValue);
				const queryValue = requestQuery.headersList.get(fieldValue);
				if (requestValue !== queryValue) return false;
			}
			return true;
		}
	};
	Object.defineProperties(Cache$1.prototype, {
		[Symbol.toStringTag]: {
			value: "Cache",
			configurable: true
		},
		match: kEnumerableProperty$3,
		matchAll: kEnumerableProperty$3,
		add: kEnumerableProperty$3,
		addAll: kEnumerableProperty$3,
		put: kEnumerableProperty$3,
		delete: kEnumerableProperty$3,
		keys: kEnumerableProperty$3
	});
	const cacheQueryOptionConverters = [
		{
			key: "ignoreSearch",
			converter: webidl$4.converters.boolean,
			defaultValue: false
		},
		{
			key: "ignoreMethod",
			converter: webidl$4.converters.boolean,
			defaultValue: false
		},
		{
			key: "ignoreVary",
			converter: webidl$4.converters.boolean,
			defaultValue: false
		}
	];
	webidl$4.converters.CacheQueryOptions = webidl$4.dictionaryConverter(cacheQueryOptionConverters);
	webidl$4.converters.MultiCacheQueryOptions = webidl$4.dictionaryConverter([...cacheQueryOptionConverters, {
		key: "cacheName",
		converter: webidl$4.converters.DOMString
	}]);
	webidl$4.converters.Response = webidl$4.interfaceConverter(Response);
	webidl$4.converters["sequence<RequestInfo>"] = webidl$4.sequenceConverter(webidl$4.converters.RequestInfo);
	module.exports = { Cache: Cache$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/cachestorage.js"(exports, module) {
	const { kConstruct } = require_symbols$1();
	const { Cache } = require_cache();
	const { webidl: webidl$3 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$2 } = require_util$6();
	var CacheStorage = class CacheStorage {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
		* @type {Map<string, import('./cache').requestResponseList}
		*/
		#caches = new Map();
		constructor() {
			if (arguments[0] !== kConstruct) webidl$3.illegalConstructor();
		}
		async match(request$1, options = {}) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
			request$1 = webidl$3.converters.RequestInfo(request$1);
			options = webidl$3.converters.MultiCacheQueryOptions(options);
			if (options.cacheName != null) {
				if (this.#caches.has(options.cacheName)) {
					const cacheList = this.#caches.get(options.cacheName);
					const cache = new Cache(kConstruct, cacheList);
					return await cache.match(request$1, options);
				}
			} else for (const cacheList of this.#caches.values()) {
				const cache = new Cache(kConstruct, cacheList);
				const response = await cache.match(request$1, options);
				if (response !== void 0) return response;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-has
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async has(cacheName) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
			cacheName = webidl$3.converters.DOMString(cacheName);
			return this.#caches.has(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
		* @param {string} cacheName
		* @returns {Promise<Cache>}
		*/
		async open(cacheName) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
			cacheName = webidl$3.converters.DOMString(cacheName);
			if (this.#caches.has(cacheName)) {
				const cache$1 = this.#caches.get(cacheName);
				return new Cache(kConstruct, cache$1);
			}
			const cache = [];
			this.#caches.set(cacheName, cache);
			return new Cache(kConstruct, cache);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async delete(cacheName) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
			cacheName = webidl$3.converters.DOMString(cacheName);
			return this.#caches.delete(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
		* @returns {string[]}
		*/
		async keys() {
			webidl$3.brandCheck(this, CacheStorage);
			const keys = this.#caches.keys();
			return [...keys];
		}
	};
	Object.defineProperties(CacheStorage.prototype, {
		[Symbol.toStringTag]: {
			value: "CacheStorage",
			configurable: true
		},
		match: kEnumerableProperty$2,
		has: kEnumerableProperty$2,
		open: kEnumerableProperty$2,
		delete: kEnumerableProperty$2,
		keys: kEnumerableProperty$2
	});
	module.exports = { CacheStorage };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/constants.js
var require_constants$2 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/constants.js"(exports, module) {
	const maxAttributeValueSize$1 = 1024;
	const maxNameValuePairSize$1 = 4096;
	module.exports = {
		maxAttributeValueSize: maxAttributeValueSize$1,
		maxNameValuePairSize: maxNameValuePairSize$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/util.js
var require_util$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/util.js"(exports, module) {
	/**
	* @param {string} value
	* @returns {boolean}
	*/
	function isCTLExcludingHtab$1(value$1) {
		if (value$1.length === 0) return false;
		for (const char of value$1) {
			const code = char.charCodeAt(0);
			if (code >= 0 || code <= 8 || code >= 10 || code <= 31 || code === 127) return false;
		}
	}
	/**
	CHAR           = <any US-ASCII character (octets 0 - 127)>
	token          = 1*<any CHAR except CTLs or separators>
	separators     = "(" | ")" | "<" | ">" | "@"
	| "," | ";" | ":" | "\" | <">
	| "/" | "[" | "]" | "?" | "="
	| "{" | "}" | SP | HT
	* @param {string} name
	*/
	function validateCookieName(name) {
		for (const char of name) {
			const code = char.charCodeAt(0);
			if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === "\"" || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") throw new Error("Invalid cookie name");
		}
	}
	/**
	cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
	cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
	; US-ASCII characters excluding CTLs,
	; whitespace DQUOTE, comma, semicolon,
	; and backslash
	* @param {string} value
	*/
	function validateCookieValue(value$1) {
		for (const char of value$1) {
			const code = char.charCodeAt(0);
			if (code < 33 || code === 34 || code === 44 || code === 59 || code === 92 || code > 126) throw new Error("Invalid header value");
		}
	}
	/**
	* path-value        = <any CHAR except CTLs or ";">
	* @param {string} path
	*/
	function validateCookiePath(path$9) {
		for (const char of path$9) {
			const code = char.charCodeAt(0);
			if (code < 33 || char === ";") throw new Error("Invalid cookie path");
		}
	}
	/**
	* I have no idea why these values aren't allowed to be honest,
	* but Deno tests these. - Khafra
	* @param {string} domain
	*/
	function validateCookieDomain(domain) {
		if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) throw new Error("Invalid cookie domain");
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
	* @param {number|Date} date
	IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
	; fixed length/zone/capitalization subset of the format
	; see Section 3.3 of [RFC5322]
	
	day-name     = %x4D.6F.6E ; "Mon", case-sensitive
	/ %x54.75.65 ; "Tue", case-sensitive
	/ %x57.65.64 ; "Wed", case-sensitive
	/ %x54.68.75 ; "Thu", case-sensitive
	/ %x46.72.69 ; "Fri", case-sensitive
	/ %x53.61.74 ; "Sat", case-sensitive
	/ %x53.75.6E ; "Sun", case-sensitive
	date1        = day SP month SP year
	; e.g., 02 Jun 1982
	
	day          = 2DIGIT
	month        = %x4A.61.6E ; "Jan", case-sensitive
	/ %x46.65.62 ; "Feb", case-sensitive
	/ %x4D.61.72 ; "Mar", case-sensitive
	/ %x41.70.72 ; "Apr", case-sensitive
	/ %x4D.61.79 ; "May", case-sensitive
	/ %x4A.75.6E ; "Jun", case-sensitive
	/ %x4A.75.6C ; "Jul", case-sensitive
	/ %x41.75.67 ; "Aug", case-sensitive
	/ %x53.65.70 ; "Sep", case-sensitive
	/ %x4F.63.74 ; "Oct", case-sensitive
	/ %x4E.6F.76 ; "Nov", case-sensitive
	/ %x44.65.63 ; "Dec", case-sensitive
	year         = 4DIGIT
	
	GMT          = %x47.4D.54 ; "GMT", case-sensitive
	
	time-of-day  = hour ":" minute ":" second
	; 00:00:00 - 23:59:60 (leap second)
	
	hour         = 2DIGIT
	minute       = 2DIGIT
	second       = 2DIGIT
	*/
	function toIMFDate(date) {
		if (typeof date === "number") date = new Date(date);
		const days = [
			"Sun",
			"Mon",
			"Tue",
			"Wed",
			"Thu",
			"Fri",
			"Sat"
		];
		const months = [
			"Jan",
			"Feb",
			"Mar",
			"Apr",
			"May",
			"Jun",
			"Jul",
			"Aug",
			"Sep",
			"Oct",
			"Nov",
			"Dec"
		];
		const dayName = days[date.getUTCDay()];
		const day = date.getUTCDate().toString().padStart(2, "0");
		const month = months[date.getUTCMonth()];
		const year = date.getUTCFullYear();
		const hour = date.getUTCHours().toString().padStart(2, "0");
		const minute = date.getUTCMinutes().toString().padStart(2, "0");
		const second = date.getUTCSeconds().toString().padStart(2, "0");
		return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
	}
	/**
	max-age-av        = "Max-Age=" non-zero-digit *DIGIT
	; In practice, both expires-av and max-age-av
	; are limited to dates representable by the
	; user agent.
	* @param {number} maxAge
	*/
	function validateCookieMaxAge(maxAge) {
		if (maxAge < 0) throw new Error("Invalid cookie max-age");
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
	* @param {import('./index').Cookie} cookie
	*/
	function stringify$2(cookie) {
		if (cookie.name.length === 0) return null;
		validateCookieName(cookie.name);
		validateCookieValue(cookie.value);
		const out = [`${cookie.name}=${cookie.value}`];
		if (cookie.name.startsWith("__Secure-")) cookie.secure = true;
		if (cookie.name.startsWith("__Host-")) {
			cookie.secure = true;
			cookie.domain = null;
			cookie.path = "/";
		}
		if (cookie.secure) out.push("Secure");
		if (cookie.httpOnly) out.push("HttpOnly");
		if (typeof cookie.maxAge === "number") {
			validateCookieMaxAge(cookie.maxAge);
			out.push(`Max-Age=${cookie.maxAge}`);
		}
		if (cookie.domain) {
			validateCookieDomain(cookie.domain);
			out.push(`Domain=${cookie.domain}`);
		}
		if (cookie.path) {
			validateCookiePath(cookie.path);
			out.push(`Path=${cookie.path}`);
		}
		if (cookie.expires && cookie.expires.toString() !== "Invalid Date") out.push(`Expires=${toIMFDate(cookie.expires)}`);
		if (cookie.sameSite) out.push(`SameSite=${cookie.sameSite}`);
		for (const part of cookie.unparsed) {
			if (!part.includes("=")) throw new Error("Invalid unparsed");
			const [key, ...value$1] = part.split("=");
			out.push(`${key.trim()}=${value$1.join("=")}`);
		}
		return out.join("; ");
	}
	module.exports = {
		isCTLExcludingHtab: isCTLExcludingHtab$1,
		validateCookieName,
		validateCookiePath,
		validateCookieValue,
		toIMFDate,
		stringify: stringify$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/parse.js
var require_parse$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/parse.js"(exports, module) {
	const { maxNameValuePairSize, maxAttributeValueSize } = require_constants$2();
	const { isCTLExcludingHtab } = require_util$1();
	const { collectASequenceOfCodePointsFast } = require_dataURL();
	const assert = __require("assert");
	/**
	* @description Parses the field-value attributes of a set-cookie header string.
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} header
	* @returns if the header is invalid, null will be returned
	*/
	function parseSetCookie$1(header) {
		if (isCTLExcludingHtab(header)) return null;
		let nameValuePair = "";
		let unparsedAttributes = "";
		let name = "";
		let value$1 = "";
		if (header.includes(";")) {
			const position = { position: 0 };
			nameValuePair = collectASequenceOfCodePointsFast(";", header, position);
			unparsedAttributes = header.slice(position.position);
		} else nameValuePair = header;
		if (!nameValuePair.includes("=")) value$1 = nameValuePair;
		else {
			const position = { position: 0 };
			name = collectASequenceOfCodePointsFast("=", nameValuePair, position);
			value$1 = nameValuePair.slice(position.position + 1);
		}
		name = name.trim();
		value$1 = value$1.trim();
		if (name.length + value$1.length > maxNameValuePairSize) return null;
		return {
			name,
			value: value$1,
			...parseUnparsedAttributes(unparsedAttributes)
		};
	}
	/**
	* Parses the remaining attributes of a set-cookie header
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} unparsedAttributes
	* @param {[Object.<string, unknown>]={}} cookieAttributeList
	*/
	function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
		if (unparsedAttributes.length === 0) return cookieAttributeList;
		assert(unparsedAttributes[0] === ";");
		unparsedAttributes = unparsedAttributes.slice(1);
		let cookieAv = "";
		if (unparsedAttributes.includes(";")) {
			cookieAv = collectASequenceOfCodePointsFast(";", unparsedAttributes, { position: 0 });
			unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
		} else {
			cookieAv = unparsedAttributes;
			unparsedAttributes = "";
		}
		let attributeName = "";
		let attributeValue = "";
		if (cookieAv.includes("=")) {
			const position = { position: 0 };
			attributeName = collectASequenceOfCodePointsFast("=", cookieAv, position);
			attributeValue = cookieAv.slice(position.position + 1);
		} else attributeName = cookieAv;
		attributeName = attributeName.trim();
		attributeValue = attributeValue.trim();
		if (attributeValue.length > maxAttributeValueSize) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
		const attributeNameLowercase = attributeName.toLowerCase();
		if (attributeNameLowercase === "expires") {
			const expiryTime = new Date(attributeValue);
			cookieAttributeList.expires = expiryTime;
		} else if (attributeNameLowercase === "max-age") {
			const charCode = attributeValue.charCodeAt(0);
			if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
			if (!/^\d+$/.test(attributeValue)) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
			const deltaSeconds = Number(attributeValue);
			cookieAttributeList.maxAge = deltaSeconds;
		} else if (attributeNameLowercase === "domain") {
			let cookieDomain = attributeValue;
			if (cookieDomain[0] === ".") cookieDomain = cookieDomain.slice(1);
			cookieDomain = cookieDomain.toLowerCase();
			cookieAttributeList.domain = cookieDomain;
		} else if (attributeNameLowercase === "path") {
			let cookiePath = "";
			if (attributeValue.length === 0 || attributeValue[0] !== "/") cookiePath = "/";
			else cookiePath = attributeValue;
			cookieAttributeList.path = cookiePath;
		} else if (attributeNameLowercase === "secure") cookieAttributeList.secure = true;
		else if (attributeNameLowercase === "httponly") cookieAttributeList.httpOnly = true;
		else if (attributeNameLowercase === "samesite") {
			let enforcement = "Default";
			const attributeValueLowercase = attributeValue.toLowerCase();
			if (attributeValueLowercase.includes("none")) enforcement = "None";
			if (attributeValueLowercase.includes("strict")) enforcement = "Strict";
			if (attributeValueLowercase.includes("lax")) enforcement = "Lax";
			cookieAttributeList.sameSite = enforcement;
		} else {
			cookieAttributeList.unparsed ??= [];
			cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
		}
		return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
	}
	module.exports = {
		parseSetCookie: parseSetCookie$1,
		parseUnparsedAttributes
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/index.js"(exports, module) {
	const { parseSetCookie } = require_parse$1();
	const { stringify: stringify$1 } = require_util$1();
	const { webidl: webidl$2 } = require_webidl();
	const { Headers: Headers$2 } = require_headers();
	/**
	* @typedef {Object} Cookie
	* @property {string} name
	* @property {string} value
	* @property {Date|number|undefined} expires
	* @property {number|undefined} maxAge
	* @property {string|undefined} domain
	* @property {string|undefined} path
	* @property {boolean|undefined} secure
	* @property {boolean|undefined} httpOnly
	* @property {'Strict'|'Lax'|'None'} sameSite
	* @property {string[]} unparsed
	*/
	/**
	* @param {Headers} headers
	* @returns {Record<string, string>}
	*/
	function getCookies(headers) {
		webidl$2.argumentLengthCheck(arguments, 1, { header: "getCookies" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		const cookie = headers.get("cookie");
		const out = {};
		if (!cookie) return out;
		for (const piece of cookie.split(";")) {
			const [name, ...value$1] = piece.split("=");
			out[name.trim()] = value$1.join("=");
		}
		return out;
	}
	/**
	* @param {Headers} headers
	* @param {string} name
	* @param {{ path?: string, domain?: string }|undefined} attributes
	* @returns {void}
	*/
	function deleteCookie(headers, name, attributes) {
		webidl$2.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		name = webidl$2.converters.DOMString(name);
		attributes = webidl$2.converters.DeleteCookieAttributes(attributes);
		setCookie(headers, {
			name,
			value: "",
			expires: new Date(0),
			...attributes
		});
	}
	/**
	* @param {Headers} headers
	* @returns {Cookie[]}
	*/
	function getSetCookies(headers) {
		webidl$2.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		const cookies = headers.getSetCookie();
		if (!cookies) return [];
		return cookies.map((pair) => parseSetCookie(pair));
	}
	/**
	* @param {Headers} headers
	* @param {Cookie} cookie
	* @returns {void}
	*/
	function setCookie(headers, cookie) {
		webidl$2.argumentLengthCheck(arguments, 2, { header: "setCookie" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		cookie = webidl$2.converters.Cookie(cookie);
		const str = stringify$1(cookie);
		if (str) headers.append("Set-Cookie", stringify$1(cookie));
	}
	webidl$2.converters.DeleteCookieAttributes = webidl$2.dictionaryConverter([{
		converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
		key: "path",
		defaultValue: null
	}, {
		converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
		key: "domain",
		defaultValue: null
	}]);
	webidl$2.converters.Cookie = webidl$2.dictionaryConverter([
		{
			converter: webidl$2.converters.DOMString,
			key: "name"
		},
		{
			converter: webidl$2.converters.DOMString,
			key: "value"
		},
		{
			converter: webidl$2.nullableConverter((value$1) => {
				if (typeof value$1 === "number") return webidl$2.converters["unsigned long long"](value$1);
				return new Date(value$1);
			}),
			key: "expires",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters["long long"]),
			key: "maxAge",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
			key: "domain",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
			key: "path",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.boolean),
			key: "secure",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.boolean),
			key: "httpOnly",
			defaultValue: null
		},
		{
			converter: webidl$2.converters.USVString,
			key: "sameSite",
			allowedValues: [
				"Strict",
				"Lax",
				"None"
			]
		},
		{
			converter: webidl$2.sequenceConverter(webidl$2.converters.DOMString),
			key: "unparsed",
			defaultValue: []
		}
	]);
	module.exports = {
		getCookies,
		deleteCookie,
		getSetCookies,
		setCookie
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/constants.js
var require_constants$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/constants.js"(exports, module) {
	const uid$1 = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors$1 = {
		enumerable: true,
		writable: false,
		configurable: false
	};
	const states$4 = {
		CONNECTING: 0,
		OPEN: 1,
		CLOSING: 2,
		CLOSED: 3
	};
	const opcodes$3 = {
		CONTINUATION: 0,
		TEXT: 1,
		BINARY: 2,
		CLOSE: 8,
		PING: 9,
		PONG: 10
	};
	const maxUnsigned16Bit$1 = 2 ** 16 - 1;
	const parserStates$1 = {
		INFO: 0,
		PAYLOADLENGTH_16: 2,
		PAYLOADLENGTH_64: 3,
		READ_DATA: 4
	};
	const emptyBuffer$2 = Buffer.allocUnsafe(0);
	module.exports = {
		uid: uid$1,
		staticPropertyDescriptors: staticPropertyDescriptors$1,
		states: states$4,
		opcodes: opcodes$3,
		maxUnsigned16Bit: maxUnsigned16Bit$1,
		parserStates: parserStates$1,
		emptyBuffer: emptyBuffer$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/symbols.js
var require_symbols = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/symbols.js"(exports, module) {
	module.exports = {
		kWebSocketURL: Symbol("url"),
		kReadyState: Symbol("ready state"),
		kController: Symbol("controller"),
		kResponse: Symbol("response"),
		kBinaryType: Symbol("binary type"),
		kSentClose: Symbol("sent close"),
		kReceivedClose: Symbol("received close"),
		kByteParser: Symbol("byte parser")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/events.js
var require_events = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/events.js"(exports, module) {
	const { webidl: webidl$1 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$1 } = require_util$6();
	const { MessagePort } = __require("worker_threads");
	/**
	* @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
	*/
	var MessageEvent$1 = class MessageEvent$1 extends Event {
		#eventInit;
		constructor(type$1, eventInitDict = {}) {
			webidl$1.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
			type$1 = webidl$1.converters.DOMString(type$1);
			eventInitDict = webidl$1.converters.MessageEventInit(eventInitDict);
			super(type$1, eventInitDict);
			this.#eventInit = eventInitDict;
		}
		get data() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.data;
		}
		get origin() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.origin;
		}
		get lastEventId() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.lastEventId;
		}
		get source() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.source;
		}
		get ports() {
			webidl$1.brandCheck(this, MessageEvent$1);
			if (!Object.isFrozen(this.#eventInit.ports)) Object.freeze(this.#eventInit.ports);
			return this.#eventInit.ports;
		}
		initMessageEvent(type$1, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
			webidl$1.brandCheck(this, MessageEvent$1);
			webidl$1.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
			return new MessageEvent$1(type$1, {
				bubbles,
				cancelable,
				data,
				origin,
				lastEventId,
				source,
				ports
			});
		}
	};
	/**
	* @see https://websockets.spec.whatwg.org/#the-closeevent-interface
	*/
	var CloseEvent$1 = class CloseEvent$1 extends Event {
		#eventInit;
		constructor(type$1, eventInitDict = {}) {
			webidl$1.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
			type$1 = webidl$1.converters.DOMString(type$1);
			eventInitDict = webidl$1.converters.CloseEventInit(eventInitDict);
			super(type$1, eventInitDict);
			this.#eventInit = eventInitDict;
		}
		get wasClean() {
			webidl$1.brandCheck(this, CloseEvent$1);
			return this.#eventInit.wasClean;
		}
		get code() {
			webidl$1.brandCheck(this, CloseEvent$1);
			return this.#eventInit.code;
		}
		get reason() {
			webidl$1.brandCheck(this, CloseEvent$1);
			return this.#eventInit.reason;
		}
	};
	var ErrorEvent$1 = class ErrorEvent$1 extends Event {
		#eventInit;
		constructor(type$1, eventInitDict) {
			webidl$1.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
			super(type$1, eventInitDict);
			type$1 = webidl$1.converters.DOMString(type$1);
			eventInitDict = webidl$1.converters.ErrorEventInit(eventInitDict ?? {});
			this.#eventInit = eventInitDict;
		}
		get message() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.message;
		}
		get filename() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.filename;
		}
		get lineno() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.lineno;
		}
		get colno() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.colno;
		}
		get error() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.error;
		}
	};
	Object.defineProperties(MessageEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "MessageEvent",
			configurable: true
		},
		data: kEnumerableProperty$1,
		origin: kEnumerableProperty$1,
		lastEventId: kEnumerableProperty$1,
		source: kEnumerableProperty$1,
		ports: kEnumerableProperty$1,
		initMessageEvent: kEnumerableProperty$1
	});
	Object.defineProperties(CloseEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "CloseEvent",
			configurable: true
		},
		reason: kEnumerableProperty$1,
		code: kEnumerableProperty$1,
		wasClean: kEnumerableProperty$1
	});
	Object.defineProperties(ErrorEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "ErrorEvent",
			configurable: true
		},
		message: kEnumerableProperty$1,
		filename: kEnumerableProperty$1,
		lineno: kEnumerableProperty$1,
		colno: kEnumerableProperty$1,
		error: kEnumerableProperty$1
	});
	webidl$1.converters.MessagePort = webidl$1.interfaceConverter(MessagePort);
	webidl$1.converters["sequence<MessagePort>"] = webidl$1.sequenceConverter(webidl$1.converters.MessagePort);
	const eventInit = [
		{
			key: "bubbles",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		},
		{
			key: "cancelable",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		},
		{
			key: "composed",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		}
	];
	webidl$1.converters.MessageEventInit = webidl$1.dictionaryConverter([
		...eventInit,
		{
			key: "data",
			converter: webidl$1.converters.any,
			defaultValue: null
		},
		{
			key: "origin",
			converter: webidl$1.converters.USVString,
			defaultValue: ""
		},
		{
			key: "lastEventId",
			converter: webidl$1.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "source",
			converter: webidl$1.nullableConverter(webidl$1.converters.MessagePort),
			defaultValue: null
		},
		{
			key: "ports",
			converter: webidl$1.converters["sequence<MessagePort>"],
			get defaultValue() {
				return [];
			}
		}
	]);
	webidl$1.converters.CloseEventInit = webidl$1.dictionaryConverter([
		...eventInit,
		{
			key: "wasClean",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		},
		{
			key: "code",
			converter: webidl$1.converters["unsigned short"],
			defaultValue: 0
		},
		{
			key: "reason",
			converter: webidl$1.converters.USVString,
			defaultValue: ""
		}
	]);
	webidl$1.converters.ErrorEventInit = webidl$1.dictionaryConverter([
		...eventInit,
		{
			key: "message",
			converter: webidl$1.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "filename",
			converter: webidl$1.converters.USVString,
			defaultValue: ""
		},
		{
			key: "lineno",
			converter: webidl$1.converters["unsigned long"],
			defaultValue: 0
		},
		{
			key: "colno",
			converter: webidl$1.converters["unsigned long"],
			defaultValue: 0
		},
		{
			key: "error",
			converter: webidl$1.converters.any
		}
	]);
	module.exports = {
		MessageEvent: MessageEvent$1,
		CloseEvent: CloseEvent$1,
		ErrorEvent: ErrorEvent$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/util.js
var require_util = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/util.js"(exports, module) {
	const { kReadyState: kReadyState$3, kController: kController$1, kResponse: kResponse$2, kBinaryType: kBinaryType$1, kWebSocketURL: kWebSocketURL$1 } = require_symbols();
	const { states: states$3, opcodes: opcodes$2 } = require_constants$1();
	const { MessageEvent, ErrorEvent } = require_events();
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isEstablished$1(ws) {
		return ws[kReadyState$3] === states$3.OPEN;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isClosing$1(ws) {
		return ws[kReadyState$3] === states$3.CLOSING;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isClosed(ws) {
		return ws[kReadyState$3] === states$3.CLOSED;
	}
	/**
	* @see https://dom.spec.whatwg.org/#concept-event-fire
	* @param {string} e
	* @param {EventTarget} target
	* @param {EventInit | undefined} eventInitDict
	*/
	function fireEvent$2(e$1, target, eventConstructor = Event, eventInitDict) {
		const event = new eventConstructor(e$1, eventInitDict);
		target.dispatchEvent(event);
	}
	/**
	* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	* @param {import('./websocket').WebSocket} ws
	* @param {number} type Opcode
	* @param {Buffer} data application data
	*/
	function websocketMessageReceived$1(ws, type$1, data) {
		if (ws[kReadyState$3] !== states$3.OPEN) return;
		let dataForEvent;
		if (type$1 === opcodes$2.TEXT) try {
			dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
		} catch {
			failWebsocketConnection$3(ws, "Received invalid UTF-8 in text frame.");
			return;
		}
		else if (type$1 === opcodes$2.BINARY) if (ws[kBinaryType$1] === "blob") dataForEvent = new Blob([data]);
		else dataForEvent = new Uint8Array(data).buffer;
		fireEvent$2("message", ws, MessageEvent, {
			origin: ws[kWebSocketURL$1].origin,
			data: dataForEvent
		});
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455
	* @see https://datatracker.ietf.org/doc/html/rfc2616
	* @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
	* @param {string} protocol
	*/
	function isValidSubprotocol$1(protocol) {
		if (protocol.length === 0) return false;
		for (const char of protocol) {
			const code = char.charCodeAt(0);
			if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === "\"" || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || code === 9) return false;
		}
		return true;
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
	* @param {number} code
	*/
	function isValidStatusCode$1(code) {
		if (code >= 1e3 && code < 1015) return code !== 1004 && code !== 1005 && code !== 1006;
		return code >= 3e3 && code <= 4999;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	* @param {string|undefined} reason
	*/
	function failWebsocketConnection$3(ws, reason) {
		const { [kController$1]: controller, [kResponse$2]: response } = ws;
		controller.abort();
		if (response?.socket && !response.socket.destroyed) response.socket.destroy();
		if (reason) fireEvent$2("error", ws, ErrorEvent, { error: new Error(reason) });
	}
	module.exports = {
		isEstablished: isEstablished$1,
		isClosing: isClosing$1,
		isClosed,
		fireEvent: fireEvent$2,
		isValidSubprotocol: isValidSubprotocol$1,
		isValidStatusCode: isValidStatusCode$1,
		failWebsocketConnection: failWebsocketConnection$3,
		websocketMessageReceived: websocketMessageReceived$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/connection.js"(exports, module) {
	const diagnosticsChannel$1 = __require("diagnostics_channel");
	const { uid, states: states$2 } = require_constants$1();
	const { kReadyState: kReadyState$2, kSentClose: kSentClose$2, kByteParser: kByteParser$1, kReceivedClose: kReceivedClose$1 } = require_symbols();
	const { fireEvent: fireEvent$1, failWebsocketConnection: failWebsocketConnection$2 } = require_util();
	const { CloseEvent } = require_events();
	const { makeRequest } = require_request();
	const { fetching } = require_fetch();
	const { Headers: Headers$1 } = require_headers();
	const { getGlobalDispatcher: getGlobalDispatcher$2 } = require_global();
	const { kHeadersList } = require_symbols$4();
	const channels$1 = {};
	channels$1.open = diagnosticsChannel$1.channel("undici:websocket:open");
	channels$1.close = diagnosticsChannel$1.channel("undici:websocket:close");
	channels$1.socketError = diagnosticsChannel$1.channel("undici:websocket:socket_error");
	/** @type {import('crypto')} */
	let crypto$2;
	try {
		crypto$2 = __require("crypto");
	} catch {}
	/**
	* @see https://websockets.spec.whatwg.org/#concept-websocket-establish
	* @param {URL} url
	* @param {string|string[]} protocols
	* @param {import('./websocket').WebSocket} ws
	* @param {(response: any) => void} onEstablish
	* @param {Partial<import('../../types/websocket').WebSocketInit>} options
	*/
	function establishWebSocketConnection$1(url, protocols, ws, onEstablish, options) {
		const requestURL = url;
		requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
		const request$1 = makeRequest({
			urlList: [requestURL],
			serviceWorkers: "none",
			referrer: "no-referrer",
			mode: "websocket",
			credentials: "include",
			cache: "no-store",
			redirect: "error"
		});
		if (options.headers) {
			const headersList = new Headers$1(options.headers)[kHeadersList];
			request$1.headersList = headersList;
		}
		const keyValue = crypto$2.randomBytes(16).toString("base64");
		request$1.headersList.append("sec-websocket-key", keyValue);
		request$1.headersList.append("sec-websocket-version", "13");
		for (const protocol of protocols) request$1.headersList.append("sec-websocket-protocol", protocol);
		const permessageDeflate = "";
		const controller = fetching({
			request: request$1,
			useParallelQueue: true,
			dispatcher: options.dispatcher ?? getGlobalDispatcher$2(),
			processResponse(response) {
				if (response.type === "error" || response.status !== 101) {
					failWebsocketConnection$2(ws, "Received network error or non-101 status code.");
					return;
				}
				if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
					failWebsocketConnection$2(ws, "Server did not respond with sent protocols.");
					return;
				}
				if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
					failWebsocketConnection$2(ws, "Server did not set Upgrade header to \"websocket\".");
					return;
				}
				if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
					failWebsocketConnection$2(ws, "Server did not set Connection header to \"upgrade\".");
					return;
				}
				const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
				const digest = crypto$2.createHash("sha1").update(keyValue + uid).digest("base64");
				if (secWSAccept !== digest) {
					failWebsocketConnection$2(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
					return;
				}
				const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
				if (secExtension !== null && secExtension !== permessageDeflate) {
					failWebsocketConnection$2(ws, "Received different permessage-deflate than the one set.");
					return;
				}
				const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
				if (secProtocol !== null && secProtocol !== request$1.headersList.get("Sec-WebSocket-Protocol")) {
					failWebsocketConnection$2(ws, "Protocol was not set in the opening handshake.");
					return;
				}
				response.socket.on("data", onSocketData);
				response.socket.on("close", onSocketClose);
				response.socket.on("error", onSocketError);
				if (channels$1.open.hasSubscribers) channels$1.open.publish({
					address: response.socket.address(),
					protocol: secProtocol,
					extensions: secExtension
				});
				onEstablish(response);
			}
		});
		return controller;
	}
	/**
	* @param {Buffer} chunk
	*/
	function onSocketData(chunk) {
		if (!this.ws[kByteParser$1].write(chunk)) this.pause();
	}
	/**
	* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
	*/
	function onSocketClose() {
		const { ws } = this;
		const wasClean = ws[kSentClose$2] && ws[kReceivedClose$1];
		let code = 1005;
		let reason = "";
		const result = ws[kByteParser$1].closingInfo;
		if (result) {
			code = result.code ?? 1005;
			reason = result.reason;
		} else if (!ws[kSentClose$2]) code = 1006;
		ws[kReadyState$2] = states$2.CLOSED;
		fireEvent$1("close", ws, CloseEvent, {
			wasClean,
			code,
			reason
		});
		if (channels$1.close.hasSubscribers) channels$1.close.publish({
			websocket: ws,
			code,
			reason
		});
	}
	function onSocketError(error$1) {
		const { ws } = this;
		ws[kReadyState$2] = states$2.CLOSING;
		if (channels$1.socketError.hasSubscribers) channels$1.socketError.publish(error$1);
		this.destroy();
	}
	module.exports = { establishWebSocketConnection: establishWebSocketConnection$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/frame.js"(exports, module) {
	const { maxUnsigned16Bit } = require_constants$1();
	/** @type {import('crypto')} */
	let crypto$1;
	try {
		crypto$1 = __require("crypto");
	} catch {}
	var WebsocketFrameSend$2 = class {
		/**
		* @param {Buffer|undefined} data
		*/
		constructor(data) {
			this.frameData = data;
			this.maskKey = crypto$1.randomBytes(4);
		}
		createFrame(opcode) {
			const bodyLength$1 = this.frameData?.byteLength ?? 0;
			/** @type {number} */
			let payloadLength = bodyLength$1;
			let offset = 6;
			if (bodyLength$1 > maxUnsigned16Bit) {
				offset += 8;
				payloadLength = 127;
			} else if (bodyLength$1 > 125) {
				offset += 2;
				payloadLength = 126;
			}
			const buffer = Buffer.allocUnsafe(bodyLength$1 + offset);
			buffer[0] = buffer[1] = 0;
			buffer[0] |= 128;
			buffer[0] = (buffer[0] & 240) + opcode;
			/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
			buffer[offset - 4] = this.maskKey[0];
			buffer[offset - 3] = this.maskKey[1];
			buffer[offset - 2] = this.maskKey[2];
			buffer[offset - 1] = this.maskKey[3];
			buffer[1] = payloadLength;
			if (payloadLength === 126) buffer.writeUInt16BE(bodyLength$1, 2);
			else if (payloadLength === 127) {
				buffer[2] = buffer[3] = 0;
				buffer.writeUIntBE(bodyLength$1, 4, 6);
			}
			buffer[1] |= 128;
			for (let i = 0; i < bodyLength$1; i++) buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
			return buffer;
		}
	};
	module.exports = { WebsocketFrameSend: WebsocketFrameSend$2 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/receiver.js"(exports, module) {
	const { Writable: Writable$1 } = __require("stream");
	const diagnosticsChannel = __require("diagnostics_channel");
	const { parserStates, opcodes: opcodes$1, states: states$1, emptyBuffer: emptyBuffer$1 } = require_constants$1();
	const { kReadyState: kReadyState$1, kSentClose: kSentClose$1, kResponse: kResponse$1, kReceivedClose } = require_symbols();
	const { isValidStatusCode, failWebsocketConnection: failWebsocketConnection$1, websocketMessageReceived } = require_util();
	const { WebsocketFrameSend: WebsocketFrameSend$1 } = require_frame();
	const channels = {};
	channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
	channels.pong = diagnosticsChannel.channel("undici:websocket:pong");
	var ByteParser$1 = class extends Writable$1 {
		#buffers = [];
		#byteOffset = 0;
		#state = parserStates.INFO;
		#info = {};
		#fragments = [];
		constructor(ws) {
			super();
			this.ws = ws;
		}
		/**
		* @param {Buffer} chunk
		* @param {() => void} callback
		*/
		_write(chunk, _$2, callback) {
			this.#buffers.push(chunk);
			this.#byteOffset += chunk.length;
			this.run(callback);
		}
		/**
		* Runs whenever a new chunk is received.
		* Callback is called whenever there are no more chunks buffering,
		* or not enough bytes are buffered to parse.
		*/
		run(callback) {
			while (true) {
				if (this.#state === parserStates.INFO) {
					if (this.#byteOffset < 2) return callback();
					const buffer = this.consume(2);
					this.#info.fin = (buffer[0] & 128) !== 0;
					this.#info.opcode = buffer[0] & 15;
					this.#info.originalOpcode ??= this.#info.opcode;
					this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes$1.CONTINUATION;
					if (this.#info.fragmented && this.#info.opcode !== opcodes$1.BINARY && this.#info.opcode !== opcodes$1.TEXT) {
						failWebsocketConnection$1(this.ws, "Invalid frame type was fragmented.");
						return;
					}
					const payloadLength = buffer[1] & 127;
					if (payloadLength <= 125) {
						this.#info.payloadLength = payloadLength;
						this.#state = parserStates.READ_DATA;
					} else if (payloadLength === 126) this.#state = parserStates.PAYLOADLENGTH_16;
					else if (payloadLength === 127) this.#state = parserStates.PAYLOADLENGTH_64;
					if (this.#info.fragmented && payloadLength > 125) {
						failWebsocketConnection$1(this.ws, "Fragmented frame exceeded 125 bytes.");
						return;
					} else if ((this.#info.opcode === opcodes$1.PING || this.#info.opcode === opcodes$1.PONG || this.#info.opcode === opcodes$1.CLOSE) && payloadLength > 125) {
						failWebsocketConnection$1(this.ws, "Payload length for control frame exceeded 125 bytes.");
						return;
					} else if (this.#info.opcode === opcodes$1.CLOSE) {
						if (payloadLength === 1) {
							failWebsocketConnection$1(this.ws, "Received close frame with a 1-byte body.");
							return;
						}
						const body = this.consume(payloadLength);
						this.#info.closeInfo = this.parseCloseBody(false, body);
						if (!this.ws[kSentClose$1]) {
							const body$1 = Buffer.allocUnsafe(2);
							body$1.writeUInt16BE(this.#info.closeInfo.code, 0);
							const closeFrame = new WebsocketFrameSend$1(body$1);
							this.ws[kResponse$1].socket.write(closeFrame.createFrame(opcodes$1.CLOSE), (err) => {
								if (!err) this.ws[kSentClose$1] = true;
							});
						}
						this.ws[kReadyState$1] = states$1.CLOSING;
						this.ws[kReceivedClose] = true;
						this.end();
						return;
					} else if (this.#info.opcode === opcodes$1.PING) {
						const body = this.consume(payloadLength);
						if (!this.ws[kReceivedClose]) {
							const frame = new WebsocketFrameSend$1(body);
							this.ws[kResponse$1].socket.write(frame.createFrame(opcodes$1.PONG));
							if (channels.ping.hasSubscribers) channels.ping.publish({ payload: body });
						}
						this.#state = parserStates.INFO;
						if (this.#byteOffset > 0) continue;
						else {
							callback();
							return;
						}
					} else if (this.#info.opcode === opcodes$1.PONG) {
						const body = this.consume(payloadLength);
						if (channels.pong.hasSubscribers) channels.pong.publish({ payload: body });
						if (this.#byteOffset > 0) continue;
						else {
							callback();
							return;
						}
					}
				} else if (this.#state === parserStates.PAYLOADLENGTH_16) {
					if (this.#byteOffset < 2) return callback();
					const buffer = this.consume(2);
					this.#info.payloadLength = buffer.readUInt16BE(0);
					this.#state = parserStates.READ_DATA;
				} else if (this.#state === parserStates.PAYLOADLENGTH_64) {
					if (this.#byteOffset < 8) return callback();
					const buffer = this.consume(8);
					const upper = buffer.readUInt32BE(0);
					if (upper > 2 ** 31 - 1) {
						failWebsocketConnection$1(this.ws, "Received payload length > 2^31 bytes.");
						return;
					}
					const lower = buffer.readUInt32BE(4);
					this.#info.payloadLength = (upper << 8) + lower;
					this.#state = parserStates.READ_DATA;
				} else if (this.#state === parserStates.READ_DATA) {
					if (this.#byteOffset < this.#info.payloadLength) return callback();
					else if (this.#byteOffset >= this.#info.payloadLength) {
						const body = this.consume(this.#info.payloadLength);
						this.#fragments.push(body);
						if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes$1.CONTINUATION) {
							const fullMessage = Buffer.concat(this.#fragments);
							websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
							this.#info = {};
							this.#fragments.length = 0;
						}
						this.#state = parserStates.INFO;
					}
				}
				if (this.#byteOffset > 0) continue;
				else {
					callback();
					break;
				}
			}
		}
		/**
		* Take n bytes from the buffered Buffers
		* @param {number} n
		* @returns {Buffer|null}
		*/
		consume(n) {
			if (n > this.#byteOffset) return null;
			else if (n === 0) return emptyBuffer$1;
			if (this.#buffers[0].length === n) {
				this.#byteOffset -= this.#buffers[0].length;
				return this.#buffers.shift();
			}
			const buffer = Buffer.allocUnsafe(n);
			let offset = 0;
			while (offset !== n) {
				const next = this.#buffers[0];
				const { length } = next;
				if (length + offset === n) {
					buffer.set(this.#buffers.shift(), offset);
					break;
				} else if (length + offset > n) {
					buffer.set(next.subarray(0, n - offset), offset);
					this.#buffers[0] = next.subarray(n - offset);
					break;
				} else {
					buffer.set(this.#buffers.shift(), offset);
					offset += next.length;
				}
			}
			this.#byteOffset -= n;
			return buffer;
		}
		parseCloseBody(onlyCode, data) {
			/** @type {number|undefined} */
			let code;
			if (data.length >= 2) code = data.readUInt16BE(0);
			if (onlyCode) {
				if (!isValidStatusCode(code)) return null;
				return { code };
			}
			/** @type {Buffer} */
			let reason = data.subarray(2);
			if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) reason = reason.subarray(3);
			if (code !== void 0 && !isValidStatusCode(code)) return null;
			try {
				reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
			} catch {
				return null;
			}
			return {
				code,
				reason
			};
		}
		get closingInfo() {
			return this.#info.closeInfo;
		}
	};
	module.exports = { ByteParser: ByteParser$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/websocket.js"(exports, module) {
	const { webidl } = require_webidl();
	const { DOMException: DOMException$1 } = require_constants$4();
	const { URLSerializer } = require_dataURL();
	const { getGlobalOrigin } = require_global$1();
	const { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants$1();
	const { kWebSocketURL, kReadyState, kController, kBinaryType, kResponse, kSentClose, kByteParser } = require_symbols();
	const { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util();
	const { establishWebSocketConnection } = require_connection();
	const { WebsocketFrameSend } = require_frame();
	const { ByteParser } = require_receiver();
	const { kEnumerableProperty, isBlobLike } = require_util$6();
	const { getGlobalDispatcher: getGlobalDispatcher$1 } = require_global();
	const { types: types$2 } = __require("util");
	let experimentalWarned = false;
	var WebSocket$1 = class WebSocket$1 extends EventTarget {
		#events = {
			open: null,
			error: null,
			close: null,
			message: null
		};
		#bufferedAmount = 0;
		#protocol = "";
		#extensions = "";
		/**
		* @param {string} url
		* @param {string|string[]} protocols
		*/
		constructor(url, protocols = []) {
			super();
			webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
			if (!experimentalWarned) {
				experimentalWarned = true;
				process.emitWarning("WebSockets are experimental, expect them to change at any time.", { code: "UNDICI-WS" });
			}
			const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
			url = webidl.converters.USVString(url);
			protocols = options.protocols;
			const baseURL = getGlobalOrigin();
			let urlRecord;
			try {
				urlRecord = new URL(url, baseURL);
			} catch (e$1) {
				throw new DOMException$1(e$1, "SyntaxError");
			}
			if (urlRecord.protocol === "http:") urlRecord.protocol = "ws:";
			else if (urlRecord.protocol === "https:") urlRecord.protocol = "wss:";
			if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") throw new DOMException$1(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, "SyntaxError");
			if (urlRecord.hash || urlRecord.href.endsWith("#")) throw new DOMException$1("Got fragment", "SyntaxError");
			if (typeof protocols === "string") protocols = [protocols];
			if (protocols.length !== new Set(protocols.map((p$1) => p$1.toLowerCase())).size) throw new DOMException$1("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			if (protocols.length > 0 && !protocols.every((p$1) => isValidSubprotocol(p$1))) throw new DOMException$1("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			this[kWebSocketURL] = new URL(urlRecord.href);
			this[kController] = establishWebSocketConnection(urlRecord, protocols, this, (response) => this.#onConnectionEstablished(response), options);
			this[kReadyState] = WebSocket$1.CONNECTING;
			this[kBinaryType] = "blob";
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-close
		* @param {number|undefined} code
		* @param {string|undefined} reason
		*/
		close(code = void 0, reason = void 0) {
			webidl.brandCheck(this, WebSocket$1);
			if (code !== void 0) code = webidl.converters["unsigned short"](code, { clamp: true });
			if (reason !== void 0) reason = webidl.converters.USVString(reason);
			if (code !== void 0) {
				if (code !== 1e3 && (code < 3e3 || code > 4999)) throw new DOMException$1("invalid code", "InvalidAccessError");
			}
			let reasonByteLength = 0;
			if (reason !== void 0) {
				reasonByteLength = Buffer.byteLength(reason);
				if (reasonByteLength > 123) throw new DOMException$1(`Reason must be less than 123 bytes; received ${reasonByteLength}`, "SyntaxError");
			}
			if (this[kReadyState] === WebSocket$1.CLOSING || this[kReadyState] === WebSocket$1.CLOSED) {} else if (!isEstablished(this)) {
				failWebsocketConnection(this, "Connection was closed before it was established.");
				this[kReadyState] = WebSocket$1.CLOSING;
			} else if (!isClosing(this)) {
				const frame = new WebsocketFrameSend();
				if (code !== void 0 && reason === void 0) {
					frame.frameData = Buffer.allocUnsafe(2);
					frame.frameData.writeUInt16BE(code, 0);
				} else if (code !== void 0 && reason !== void 0) {
					frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
					frame.frameData.writeUInt16BE(code, 0);
					frame.frameData.write(reason, 2, "utf-8");
				} else frame.frameData = emptyBuffer;
				/** @type {import('stream').Duplex} */
				const socket = this[kResponse].socket;
				socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
					if (!err) this[kSentClose] = true;
				});
				this[kReadyState] = states.CLOSING;
			} else this[kReadyState] = WebSocket$1.CLOSING;
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-send
		* @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
		*/
		send(data) {
			webidl.brandCheck(this, WebSocket$1);
			webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
			data = webidl.converters.WebSocketSendData(data);
			if (this[kReadyState] === WebSocket$1.CONNECTING) throw new DOMException$1("Sent before connected.", "InvalidStateError");
			if (!isEstablished(this) || isClosing(this)) return;
			/** @type {import('stream').Duplex} */
			const socket = this[kResponse].socket;
			if (typeof data === "string") {
				const value$1 = Buffer.from(data);
				const frame = new WebsocketFrameSend(value$1);
				const buffer = frame.createFrame(opcodes.TEXT);
				this.#bufferedAmount += value$1.byteLength;
				socket.write(buffer, () => {
					this.#bufferedAmount -= value$1.byteLength;
				});
			} else if (types$2.isArrayBuffer(data)) {
				const value$1 = Buffer.from(data);
				const frame = new WebsocketFrameSend(value$1);
				const buffer = frame.createFrame(opcodes.BINARY);
				this.#bufferedAmount += value$1.byteLength;
				socket.write(buffer, () => {
					this.#bufferedAmount -= value$1.byteLength;
				});
			} else if (ArrayBuffer.isView(data)) {
				const ab = Buffer.from(data, data.byteOffset, data.byteLength);
				const frame = new WebsocketFrameSend(ab);
				const buffer = frame.createFrame(opcodes.BINARY);
				this.#bufferedAmount += ab.byteLength;
				socket.write(buffer, () => {
					this.#bufferedAmount -= ab.byteLength;
				});
			} else if (isBlobLike(data)) {
				const frame = new WebsocketFrameSend();
				data.arrayBuffer().then((ab) => {
					const value$1 = Buffer.from(ab);
					frame.frameData = value$1;
					const buffer = frame.createFrame(opcodes.BINARY);
					this.#bufferedAmount += value$1.byteLength;
					socket.write(buffer, () => {
						this.#bufferedAmount -= value$1.byteLength;
					});
				});
			}
		}
		get readyState() {
			webidl.brandCheck(this, WebSocket$1);
			return this[kReadyState];
		}
		get bufferedAmount() {
			webidl.brandCheck(this, WebSocket$1);
			return this.#bufferedAmount;
		}
		get url() {
			webidl.brandCheck(this, WebSocket$1);
			return URLSerializer(this[kWebSocketURL]);
		}
		get extensions() {
			webidl.brandCheck(this, WebSocket$1);
			return this.#extensions;
		}
		get protocol() {
			webidl.brandCheck(this, WebSocket$1);
			return this.#protocol;
		}
		get onopen() {
			webidl.brandCheck(this, WebSocket$1);
			return this.#events.open;
		}
		set onopen(fn) {
			webidl.brandCheck(this, WebSocket$1);
			if (this.#events.open) this.removeEventListener("open", this.#events.open);
			if (typeof fn === "function") {
				this.#events.open = fn;
				this.addEventListener("open", fn);
			} else this.#events.open = null;
		}
		get onerror() {
			webidl.brandCheck(this, WebSocket$1);
			return this.#events.error;
		}
		set onerror(fn) {
			webidl.brandCheck(this, WebSocket$1);
			if (this.#events.error) this.removeEventListener("error", this.#events.error);
			if (typeof fn === "function") {
				this.#events.error = fn;
				this.addEventListener("error", fn);
			} else this.#events.error = null;
		}
		get onclose() {
			webidl.brandCheck(this, WebSocket$1);
			return this.#events.close;
		}
		set onclose(fn) {
			webidl.brandCheck(this, WebSocket$1);
			if (this.#events.close) this.removeEventListener("close", this.#events.close);
			if (typeof fn === "function") {
				this.#events.close = fn;
				this.addEventListener("close", fn);
			} else this.#events.close = null;
		}
		get onmessage() {
			webidl.brandCheck(this, WebSocket$1);
			return this.#events.message;
		}
		set onmessage(fn) {
			webidl.brandCheck(this, WebSocket$1);
			if (this.#events.message) this.removeEventListener("message", this.#events.message);
			if (typeof fn === "function") {
				this.#events.message = fn;
				this.addEventListener("message", fn);
			} else this.#events.message = null;
		}
		get binaryType() {
			webidl.brandCheck(this, WebSocket$1);
			return this[kBinaryType];
		}
		set binaryType(type$1) {
			webidl.brandCheck(this, WebSocket$1);
			if (type$1 !== "blob" && type$1 !== "arraybuffer") this[kBinaryType] = "blob";
			else this[kBinaryType] = type$1;
		}
		/**
		* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
		*/
		#onConnectionEstablished(response) {
			this[kResponse] = response;
			const parser = new ByteParser(this);
			parser.on("drain", function onParserDrain() {
				this.ws[kResponse].socket.resume();
			});
			response.socket.ws = this;
			this[kByteParser] = parser;
			this[kReadyState] = states.OPEN;
			const extensions = response.headersList.get("sec-websocket-extensions");
			if (extensions !== null) this.#extensions = extensions;
			const protocol = response.headersList.get("sec-websocket-protocol");
			if (protocol !== null) this.#protocol = protocol;
			fireEvent("open", this);
		}
	};
	WebSocket$1.CONNECTING = WebSocket$1.prototype.CONNECTING = states.CONNECTING;
	WebSocket$1.OPEN = WebSocket$1.prototype.OPEN = states.OPEN;
	WebSocket$1.CLOSING = WebSocket$1.prototype.CLOSING = states.CLOSING;
	WebSocket$1.CLOSED = WebSocket$1.prototype.CLOSED = states.CLOSED;
	Object.defineProperties(WebSocket$1.prototype, {
		CONNECTING: staticPropertyDescriptors,
		OPEN: staticPropertyDescriptors,
		CLOSING: staticPropertyDescriptors,
		CLOSED: staticPropertyDescriptors,
		url: kEnumerableProperty,
		readyState: kEnumerableProperty,
		bufferedAmount: kEnumerableProperty,
		onopen: kEnumerableProperty,
		onerror: kEnumerableProperty,
		onclose: kEnumerableProperty,
		close: kEnumerableProperty,
		onmessage: kEnumerableProperty,
		binaryType: kEnumerableProperty,
		send: kEnumerableProperty,
		extensions: kEnumerableProperty,
		protocol: kEnumerableProperty,
		[Symbol.toStringTag]: {
			value: "WebSocket",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	Object.defineProperties(WebSocket$1, {
		CONNECTING: staticPropertyDescriptors,
		OPEN: staticPropertyDescriptors,
		CLOSING: staticPropertyDescriptors,
		CLOSED: staticPropertyDescriptors
	});
	webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(webidl.converters.DOMString);
	webidl.converters["DOMString or sequence<DOMString>"] = function(V$2) {
		if (webidl.util.Type(V$2) === "Object" && Symbol.iterator in V$2) return webidl.converters["sequence<DOMString>"](V$2);
		return webidl.converters.DOMString(V$2);
	};
	webidl.converters.WebSocketInit = webidl.dictionaryConverter([
		{
			key: "protocols",
			converter: webidl.converters["DOMString or sequence<DOMString>"],
			get defaultValue() {
				return [];
			}
		},
		{
			key: "dispatcher",
			converter: (V$2) => V$2,
			get defaultValue() {
				return getGlobalDispatcher$1();
			}
		},
		{
			key: "headers",
			converter: webidl.nullableConverter(webidl.converters.HeadersInit)
		}
	]);
	webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V$2) {
		if (webidl.util.Type(V$2) === "Object" && !(Symbol.iterator in V$2)) return webidl.converters.WebSocketInit(V$2);
		return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V$2) };
	};
	webidl.converters.WebSocketSendData = function(V$2) {
		if (webidl.util.Type(V$2) === "Object") {
			if (isBlobLike(V$2)) return webidl.converters.Blob(V$2, { strict: false });
			if (ArrayBuffer.isView(V$2) || types$2.isAnyArrayBuffer(V$2)) return webidl.converters.BufferSource(V$2);
		}
		return webidl.converters.USVString(V$2);
	};
	module.exports = { WebSocket: WebSocket$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/index.js
var require_undici = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/index.js"(exports, module) {
	const Client = require_client();
	const Dispatcher = require_dispatcher();
	const errors = require_errors();
	const Pool = require_pool();
	const BalancedPool = require_balanced_pool();
	const Agent = require_agent();
	const util = require_util$6();
	const { InvalidArgumentError } = errors;
	const api = require_api();
	const buildConnector = require_connect();
	const MockClient = require_mock_client();
	const MockAgent = require_mock_agent();
	const MockPool = require_mock_pool();
	const mockErrors = require_mock_errors();
	const ProxyAgent = require_proxy_agent();
	const RetryHandler = require_RetryHandler();
	const { getGlobalDispatcher, setGlobalDispatcher } = require_global();
	const DecoratorHandler = require_DecoratorHandler();
	const RedirectHandler = require_RedirectHandler();
	const createRedirectInterceptor = require_redirectInterceptor();
	let hasCrypto;
	try {
		__require("crypto");
		hasCrypto = true;
	} catch {
		hasCrypto = false;
	}
	Object.assign(Dispatcher.prototype, api);
	module.exports.Dispatcher = Dispatcher;
	module.exports.Client = Client;
	module.exports.Pool = Pool;
	module.exports.BalancedPool = BalancedPool;
	module.exports.Agent = Agent;
	module.exports.ProxyAgent = ProxyAgent;
	module.exports.RetryHandler = RetryHandler;
	module.exports.DecoratorHandler = DecoratorHandler;
	module.exports.RedirectHandler = RedirectHandler;
	module.exports.createRedirectInterceptor = createRedirectInterceptor;
	module.exports.buildConnector = buildConnector;
	module.exports.errors = errors;
	function makeDispatcher(fn) {
		return (url, opts, handler) => {
			if (typeof opts === "function") {
				handler = opts;
				opts = null;
			}
			if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) throw new InvalidArgumentError("invalid url");
			if (opts != null && typeof opts !== "object") throw new InvalidArgumentError("invalid opts");
			if (opts && opts.path != null) {
				if (typeof opts.path !== "string") throw new InvalidArgumentError("invalid opts.path");
				let path$9 = opts.path;
				if (!opts.path.startsWith("/")) path$9 = `/${path$9}`;
				url = new URL(util.parseOrigin(url).origin + path$9);
			} else {
				if (!opts) opts = typeof url === "object" ? url : {};
				url = util.parseURL(url);
			}
			const { agent, dispatcher = getGlobalDispatcher() } = opts;
			if (agent) throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
			return fn.call(dispatcher, {
				...opts,
				origin: url.origin,
				path: url.search ? `${url.pathname}${url.search}` : url.pathname,
				method: opts.method || (opts.body ? "PUT" : "GET")
			}, handler);
		};
	}
	module.exports.setGlobalDispatcher = setGlobalDispatcher;
	module.exports.getGlobalDispatcher = getGlobalDispatcher;
	if (util.nodeMajor > 16 || util.nodeMajor === 16 && util.nodeMinor >= 8) {
		let fetchImpl = null;
		module.exports.fetch = async function fetch$2(resource) {
			if (!fetchImpl) fetchImpl = require_fetch().fetch;
			try {
				return await fetchImpl(...arguments);
			} catch (err) {
				if (typeof err === "object") Error.captureStackTrace(err, this);
				throw err;
			}
		};
		module.exports.Headers = require_headers().Headers;
		module.exports.Response = require_response().Response;
		module.exports.Request = require_request().Request;
		module.exports.FormData = require_formdata().FormData;
		module.exports.File = require_file().File;
		module.exports.FileReader = require_filereader().FileReader;
		const { setGlobalOrigin: setGlobalOrigin$1, getGlobalOrigin: getGlobalOrigin$5 } = require_global$1();
		module.exports.setGlobalOrigin = setGlobalOrigin$1;
		module.exports.getGlobalOrigin = getGlobalOrigin$5;
		const { CacheStorage: CacheStorage$1 } = require_cachestorage();
		const { kConstruct: kConstruct$5 } = require_symbols$1();
		module.exports.caches = new CacheStorage$1(kConstruct$5);
	}
	if (util.nodeMajor >= 16) {
		const { deleteCookie: deleteCookie$1, getCookies: getCookies$1, getSetCookies: getSetCookies$1, setCookie: setCookie$1 } = require_cookies();
		module.exports.deleteCookie = deleteCookie$1;
		module.exports.getCookies = getCookies$1;
		module.exports.getSetCookies = getSetCookies$1;
		module.exports.setCookie = setCookie$1;
		const { parseMIMEType: parseMIMEType$4, serializeAMimeType: serializeAMimeType$5 } = require_dataURL();
		module.exports.parseMIMEType = parseMIMEType$4;
		module.exports.serializeAMimeType = serializeAMimeType$5;
	}
	if (util.nodeMajor >= 18 && hasCrypto) {
		const { WebSocket: WebSocket$2 } = require_websocket();
		module.exports.WebSocket = WebSocket$2;
	}
	module.exports.request = makeDispatcher(api.request);
	module.exports.stream = makeDispatcher(api.stream);
	module.exports.pipeline = makeDispatcher(api.pipeline);
	module.exports.connect = makeDispatcher(api.connect);
	module.exports.upgrade = makeDispatcher(api.upgrade);
	module.exports.MockClient = MockClient;
	module.exports.MockPool = MockPool;
	module.exports.MockAgent = MockAgent;
	module.exports.mockErrors = mockErrors;
} });

//#endregion
//#region node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({ "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js"(exports) {
	var __createBinding$7 = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		var desc = Object.getOwnPropertyDescriptor(m$1, k$2);
		if (!desc || ("get" in desc ? !m$1.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault$7 = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar$7 = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k$2)) __createBinding$7(result, mod, k$2);
		}
		__setModuleDefault$7(result, mod);
		return result;
	};
	var __awaiter$9 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
	const http$1 = __importStar$7(__require("http"));
	const https$2 = __importStar$7(__require("https"));
	const pm = __importStar$7(require_proxy());
	const tunnel = __importStar$7(require_tunnel());
	const undici_1 = require_undici();
	var HttpCodes;
	(function(HttpCodes$1) {
		HttpCodes$1[HttpCodes$1["OK"] = 200] = "OK";
		HttpCodes$1[HttpCodes$1["MultipleChoices"] = 300] = "MultipleChoices";
		HttpCodes$1[HttpCodes$1["MovedPermanently"] = 301] = "MovedPermanently";
		HttpCodes$1[HttpCodes$1["ResourceMoved"] = 302] = "ResourceMoved";
		HttpCodes$1[HttpCodes$1["SeeOther"] = 303] = "SeeOther";
		HttpCodes$1[HttpCodes$1["NotModified"] = 304] = "NotModified";
		HttpCodes$1[HttpCodes$1["UseProxy"] = 305] = "UseProxy";
		HttpCodes$1[HttpCodes$1["SwitchProxy"] = 306] = "SwitchProxy";
		HttpCodes$1[HttpCodes$1["TemporaryRedirect"] = 307] = "TemporaryRedirect";
		HttpCodes$1[HttpCodes$1["PermanentRedirect"] = 308] = "PermanentRedirect";
		HttpCodes$1[HttpCodes$1["BadRequest"] = 400] = "BadRequest";
		HttpCodes$1[HttpCodes$1["Unauthorized"] = 401] = "Unauthorized";
		HttpCodes$1[HttpCodes$1["PaymentRequired"] = 402] = "PaymentRequired";
		HttpCodes$1[HttpCodes$1["Forbidden"] = 403] = "Forbidden";
		HttpCodes$1[HttpCodes$1["NotFound"] = 404] = "NotFound";
		HttpCodes$1[HttpCodes$1["MethodNotAllowed"] = 405] = "MethodNotAllowed";
		HttpCodes$1[HttpCodes$1["NotAcceptable"] = 406] = "NotAcceptable";
		HttpCodes$1[HttpCodes$1["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
		HttpCodes$1[HttpCodes$1["RequestTimeout"] = 408] = "RequestTimeout";
		HttpCodes$1[HttpCodes$1["Conflict"] = 409] = "Conflict";
		HttpCodes$1[HttpCodes$1["Gone"] = 410] = "Gone";
		HttpCodes$1[HttpCodes$1["TooManyRequests"] = 429] = "TooManyRequests";
		HttpCodes$1[HttpCodes$1["InternalServerError"] = 500] = "InternalServerError";
		HttpCodes$1[HttpCodes$1["NotImplemented"] = 501] = "NotImplemented";
		HttpCodes$1[HttpCodes$1["BadGateway"] = 502] = "BadGateway";
		HttpCodes$1[HttpCodes$1["ServiceUnavailable"] = 503] = "ServiceUnavailable";
		HttpCodes$1[HttpCodes$1["GatewayTimeout"] = 504] = "GatewayTimeout";
	})(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
	var Headers;
	(function(Headers$8) {
		Headers$8["Accept"] = "accept";
		Headers$8["ContentType"] = "content-type";
	})(Headers || (exports.Headers = Headers = {}));
	var MediaTypes;
	(function(MediaTypes$1) {
		MediaTypes$1["ApplicationJson"] = "application/json";
	})(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
	/**
	* Returns the proxy URL, depending upon the supplied url and proxy environment variables.
	* @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
	*/
	function getProxyUrl(serverUrl) {
		const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
		return proxyUrl ? proxyUrl.href : "";
	}
	exports.getProxyUrl = getProxyUrl;
	const HttpRedirectCodes = [
		HttpCodes.MovedPermanently,
		HttpCodes.ResourceMoved,
		HttpCodes.SeeOther,
		HttpCodes.TemporaryRedirect,
		HttpCodes.PermanentRedirect
	];
	const HttpResponseRetryCodes = [
		HttpCodes.BadGateway,
		HttpCodes.ServiceUnavailable,
		HttpCodes.GatewayTimeout
	];
	const RetryableHttpVerbs = [
		"OPTIONS",
		"GET",
		"DELETE",
		"HEAD"
	];
	const ExponentialBackoffCeiling = 10;
	const ExponentialBackoffTimeSlice = 5;
	var HttpClientError = class HttpClientError extends Error {
		constructor(message, statusCode) {
			super(message);
			this.name = "HttpClientError";
			this.statusCode = statusCode;
			Object.setPrototypeOf(this, HttpClientError.prototype);
		}
	};
	exports.HttpClientError = HttpClientError;
	var HttpClientResponse = class {
		constructor(message) {
			this.message = message;
		}
		readBody() {
			return __awaiter$9(this, void 0, void 0, function* () {
				return new Promise((resolve$1) => __awaiter$9(this, void 0, void 0, function* () {
					let output = Buffer.alloc(0);
					this.message.on("data", (chunk) => {
						output = Buffer.concat([output, chunk]);
					});
					this.message.on("end", () => {
						resolve$1(output.toString());
					});
				}));
			});
		}
		readBodyBuffer() {
			return __awaiter$9(this, void 0, void 0, function* () {
				return new Promise((resolve$1) => __awaiter$9(this, void 0, void 0, function* () {
					const chunks = [];
					this.message.on("data", (chunk) => {
						chunks.push(chunk);
					});
					this.message.on("end", () => {
						resolve$1(Buffer.concat(chunks));
					});
				}));
			});
		}
	};
	exports.HttpClientResponse = HttpClientResponse;
	function isHttps(requestUrl) {
		const parsedUrl = new URL(requestUrl);
		return parsedUrl.protocol === "https:";
	}
	exports.isHttps = isHttps;
	var HttpClient = class {
		constructor(userAgent, handlers, requestOptions) {
			this._ignoreSslError = false;
			this._allowRedirects = true;
			this._allowRedirectDowngrade = false;
			this._maxRedirects = 50;
			this._allowRetries = false;
			this._maxRetries = 1;
			this._keepAlive = false;
			this._disposed = false;
			this.userAgent = userAgent;
			this.handlers = handlers || [];
			this.requestOptions = requestOptions;
			if (requestOptions) {
				if (requestOptions.ignoreSslError != null) this._ignoreSslError = requestOptions.ignoreSslError;
				this._socketTimeout = requestOptions.socketTimeout;
				if (requestOptions.allowRedirects != null) this._allowRedirects = requestOptions.allowRedirects;
				if (requestOptions.allowRedirectDowngrade != null) this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
				if (requestOptions.maxRedirects != null) this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
				if (requestOptions.keepAlive != null) this._keepAlive = requestOptions.keepAlive;
				if (requestOptions.allowRetries != null) this._allowRetries = requestOptions.allowRetries;
				if (requestOptions.maxRetries != null) this._maxRetries = requestOptions.maxRetries;
			}
		}
		options(requestUrl, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
			});
		}
		get(requestUrl, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("GET", requestUrl, null, additionalHeaders || {});
			});
		}
		del(requestUrl, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("DELETE", requestUrl, null, additionalHeaders || {});
			});
		}
		post(requestUrl, data, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("POST", requestUrl, data, additionalHeaders || {});
			});
		}
		patch(requestUrl, data, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("PATCH", requestUrl, data, additionalHeaders || {});
			});
		}
		put(requestUrl, data, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("PUT", requestUrl, data, additionalHeaders || {});
			});
		}
		head(requestUrl, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("HEAD", requestUrl, null, additionalHeaders || {});
			});
		}
		sendStream(verb, requestUrl, stream$2, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request(verb, requestUrl, stream$2, additionalHeaders);
			});
		}
		/**
		* Gets a typed object from an endpoint
		* Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
		*/
		getJson(requestUrl, additionalHeaders = {}) {
			return __awaiter$9(this, void 0, void 0, function* () {
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				const res = yield this.get(requestUrl, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		postJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$9(this, void 0, void 0, function* () {
				const data = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.post(requestUrl, data, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		putJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$9(this, void 0, void 0, function* () {
				const data = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.put(requestUrl, data, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		patchJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$9(this, void 0, void 0, function* () {
				const data = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.patch(requestUrl, data, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		/**
		* Makes a raw http request.
		* All other methods such as get, post, patch, and request ultimately call this.
		* Prefer get, del, post and patch
		*/
		request(verb, requestUrl, data, headers) {
			return __awaiter$9(this, void 0, void 0, function* () {
				if (this._disposed) throw new Error("Client has already been disposed.");
				const parsedUrl = new URL(requestUrl);
				let info$1 = this._prepareRequest(verb, parsedUrl, headers);
				const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
				let numTries = 0;
				let response;
				do {
					response = yield this.requestRaw(info$1, data);
					if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
						let authenticationHandler;
						for (const handler of this.handlers) if (handler.canHandleAuthentication(response)) {
							authenticationHandler = handler;
							break;
						}
						if (authenticationHandler) return authenticationHandler.handleAuthentication(this, info$1, data);
						else return response;
					}
					let redirectsRemaining = this._maxRedirects;
					while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
						const redirectUrl = response.message.headers["location"];
						if (!redirectUrl) break;
						const parsedRedirectUrl = new URL(redirectUrl);
						if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
						yield response.readBody();
						if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
							for (const header in headers) if (header.toLowerCase() === "authorization") delete headers[header];
						}
						info$1 = this._prepareRequest(verb, parsedRedirectUrl, headers);
						response = yield this.requestRaw(info$1, data);
						redirectsRemaining--;
					}
					if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) return response;
					numTries += 1;
					if (numTries < maxTries) {
						yield response.readBody();
						yield this._performExponentialBackoff(numTries);
					}
				} while (numTries < maxTries);
				return response;
			});
		}
		/**
		* Needs to be called if keepAlive is set to true in request options.
		*/
		dispose() {
			if (this._agent) this._agent.destroy();
			this._disposed = true;
		}
		/**
		* Raw request.
		* @param info
		* @param data
		*/
		requestRaw(info$1, data) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return new Promise((resolve$1, reject) => {
					function callbackForResult(err, res) {
						if (err) reject(err);
						else if (!res) reject(new Error("Unknown error"));
						else resolve$1(res);
					}
					this.requestRawWithCallback(info$1, data, callbackForResult);
				});
			});
		}
		/**
		* Raw request with callback.
		* @param info
		* @param data
		* @param onResult
		*/
		requestRawWithCallback(info$1, data, onResult) {
			if (typeof data === "string") {
				if (!info$1.options.headers) info$1.options.headers = {};
				info$1.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
			}
			let callbackCalled = false;
			function handleResult(err, res) {
				if (!callbackCalled) {
					callbackCalled = true;
					onResult(err, res);
				}
			}
			const req = info$1.httpModule.request(info$1.options, (msg) => {
				const res = new HttpClientResponse(msg);
				handleResult(void 0, res);
			});
			let socket;
			req.on("socket", (sock) => {
				socket = sock;
			});
			req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
				if (socket) socket.end();
				handleResult(new Error(`Request timeout: ${info$1.options.path}`));
			});
			req.on("error", function(err) {
				handleResult(err);
			});
			if (data && typeof data === "string") req.write(data, "utf8");
			if (data && typeof data !== "string") {
				data.on("close", function() {
					req.end();
				});
				data.pipe(req);
			} else req.end();
		}
		/**
		* Gets an http agent. This function is useful when you need an http agent that handles
		* routing through a proxy server - depending upon the url and proxy environment variables.
		* @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
		*/
		getAgent(serverUrl) {
			const parsedUrl = new URL(serverUrl);
			return this._getAgent(parsedUrl);
		}
		getAgentDispatcher(serverUrl) {
			const parsedUrl = new URL(serverUrl);
			const proxyUrl = pm.getProxyUrl(parsedUrl);
			const useProxy = proxyUrl && proxyUrl.hostname;
			if (!useProxy) return;
			return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
		}
		_prepareRequest(method, requestUrl, headers) {
			const info$1 = {};
			info$1.parsedUrl = requestUrl;
			const usingSsl = info$1.parsedUrl.protocol === "https:";
			info$1.httpModule = usingSsl ? https$2 : http$1;
			const defaultPort = usingSsl ? 443 : 80;
			info$1.options = {};
			info$1.options.host = info$1.parsedUrl.hostname;
			info$1.options.port = info$1.parsedUrl.port ? parseInt(info$1.parsedUrl.port) : defaultPort;
			info$1.options.path = (info$1.parsedUrl.pathname || "") + (info$1.parsedUrl.search || "");
			info$1.options.method = method;
			info$1.options.headers = this._mergeHeaders(headers);
			if (this.userAgent != null) info$1.options.headers["user-agent"] = this.userAgent;
			info$1.options.agent = this._getAgent(info$1.parsedUrl);
			if (this.handlers) for (const handler of this.handlers) handler.prepareRequest(info$1.options);
			return info$1;
		}
		_mergeHeaders(headers) {
			if (this.requestOptions && this.requestOptions.headers) return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
			return lowercaseKeys(headers || {});
		}
		_getExistingOrDefaultHeader(additionalHeaders, header, _default) {
			let clientHeader;
			if (this.requestOptions && this.requestOptions.headers) clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
			return additionalHeaders[header] || clientHeader || _default;
		}
		_getAgent(parsedUrl) {
			let agent;
			const proxyUrl = pm.getProxyUrl(parsedUrl);
			const useProxy = proxyUrl && proxyUrl.hostname;
			if (this._keepAlive && useProxy) agent = this._proxyAgent;
			if (!useProxy) agent = this._agent;
			if (agent) return agent;
			const usingSsl = parsedUrl.protocol === "https:";
			let maxSockets = 100;
			if (this.requestOptions) maxSockets = this.requestOptions.maxSockets || http$1.globalAgent.maxSockets;
			if (proxyUrl && proxyUrl.hostname) {
				const agentOptions = {
					maxSockets,
					keepAlive: this._keepAlive,
					proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && { proxyAuth: `${proxyUrl.username}:${proxyUrl.password}` }), {
						host: proxyUrl.hostname,
						port: proxyUrl.port
					})
				};
				let tunnelAgent;
				const overHttps = proxyUrl.protocol === "https:";
				if (usingSsl) tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
				else tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
				agent = tunnelAgent(agentOptions);
				this._proxyAgent = agent;
			}
			if (!agent) {
				const options = {
					keepAlive: this._keepAlive,
					maxSockets
				};
				agent = usingSsl ? new https$2.Agent(options) : new http$1.Agent(options);
				this._agent = agent;
			}
			if (usingSsl && this._ignoreSslError) agent.options = Object.assign(agent.options || {}, { rejectUnauthorized: false });
			return agent;
		}
		_getProxyAgentDispatcher(parsedUrl, proxyUrl) {
			let proxyAgent;
			if (this._keepAlive) proxyAgent = this._proxyAgentDispatcher;
			if (proxyAgent) return proxyAgent;
			const usingSsl = parsedUrl.protocol === "https:";
			proxyAgent = new undici_1.ProxyAgent(Object.assign({
				uri: proxyUrl.href,
				pipelining: !this._keepAlive ? 0 : 1
			}, (proxyUrl.username || proxyUrl.password) && { token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}` }));
			this._proxyAgentDispatcher = proxyAgent;
			if (usingSsl && this._ignoreSslError) proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, { rejectUnauthorized: false });
			return proxyAgent;
		}
		_performExponentialBackoff(retryNumber) {
			return __awaiter$9(this, void 0, void 0, function* () {
				retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
				const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
				return new Promise((resolve$1) => setTimeout(() => resolve$1(), ms));
			});
		}
		_processResponse(res, options) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return new Promise((resolve$1, reject) => __awaiter$9(this, void 0, void 0, function* () {
					const statusCode = res.message.statusCode || 0;
					const response = {
						statusCode,
						result: null,
						headers: {}
					};
					if (statusCode === HttpCodes.NotFound) resolve$1(response);
					function dateTimeDeserializer(key, value$1) {
						if (typeof value$1 === "string") {
							const a = new Date(value$1);
							if (!isNaN(a.valueOf())) return a;
						}
						return value$1;
					}
					let obj;
					let contents;
					try {
						contents = yield res.readBody();
						if (contents && contents.length > 0) {
							if (options && options.deserializeDates) obj = JSON.parse(contents, dateTimeDeserializer);
							else obj = JSON.parse(contents);
							response.result = obj;
						}
						response.headers = res.message.headers;
					} catch (err) {}
					if (statusCode > 299) {
						let msg;
						if (obj && obj.message) msg = obj.message;
						else if (contents && contents.length > 0) msg = contents;
						else msg = `Failed request: (${statusCode})`;
						const err = new HttpClientError(msg, statusCode);
						err.result = response.result;
						reject(err);
					} else resolve$1(response);
				}));
			});
		}
	};
	exports.HttpClient = HttpClient;
	const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k$2) => (c[k$2.toLowerCase()] = obj[k$2], c), {});
} });

//#endregion
//#region node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({ "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js"(exports) {
	var __awaiter$8 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
	var BasicCredentialHandler = class {
		constructor(username, password) {
			this.username = username;
			this.password = password;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$8(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.BasicCredentialHandler = BasicCredentialHandler;
	var BearerCredentialHandler = class {
		constructor(token) {
			this.token = token;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Bearer ${this.token}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$8(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.BearerCredentialHandler = BearerCredentialHandler;
	var PersonalAccessTokenCredentialHandler = class {
		constructor(token) {
			this.token = token;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$8(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/oidc-utils.js"(exports) {
	var __awaiter$7 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.OidcClient = void 0;
	const http_client_1 = require_lib();
	const auth_1 = require_auth();
	const core_1 = require_core();
	var OidcClient = class OidcClient {
		static createHttpClient(allowRetry = true, maxRetry = 10) {
			const requestOptions = {
				allowRetries: allowRetry,
				maxRetries: maxRetry
			};
			return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
		}
		static getRequestToken() {
			const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
			if (!token) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
			return token;
		}
		static getIDTokenUrl() {
			const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
			if (!runtimeUrl) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
			return runtimeUrl;
		}
		static getCall(id_token_url) {
			var _a$1;
			return __awaiter$7(this, void 0, void 0, function* () {
				const httpclient = OidcClient.createHttpClient();
				const res = yield httpclient.getJson(id_token_url).catch((error$1) => {
					throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error$1.statusCode}\n 
        Error Message: ${error$1.message}`);
				});
				const id_token = (_a$1 = res.result) === null || _a$1 === void 0 ? void 0 : _a$1.value;
				if (!id_token) throw new Error("Response json body do not have ID Token field");
				return id_token;
			});
		}
		static getIDToken(audience) {
			return __awaiter$7(this, void 0, void 0, function* () {
				try {
					let id_token_url = OidcClient.getIDTokenUrl();
					if (audience) {
						const encodedAudience = encodeURIComponent(audience);
						id_token_url = `${id_token_url}&audience=${encodedAudience}`;
					}
					(0, core_1.debug)(`ID token url is ${id_token_url}`);
					const id_token = yield OidcClient.getCall(id_token_url);
					(0, core_1.setSecret)(id_token);
					return id_token;
				} catch (error$1) {
					throw new Error(`Error message: ${error$1.message}`);
				}
			});
		}
	};
	exports.OidcClient = OidcClient;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/summary.js"(exports) {
	var __awaiter$6 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
	const os_1$1 = __require("os");
	const fs_1 = __require("fs");
	const { access: access$1, appendFile, writeFile: writeFile$1 } = fs_1.promises;
	exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
	exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
	var Summary = class {
		constructor() {
			this._buffer = "";
		}
		/**
		* Finds the summary file path from the environment, rejects if env var is not found or file does not exist
		* Also checks r/w permissions.
		*
		* @returns step summary file path
		*/
		filePath() {
			return __awaiter$6(this, void 0, void 0, function* () {
				if (this._filePath) return this._filePath;
				const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
				if (!pathFromEnv) throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
				try {
					yield access$1(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
				} catch (_a$1) {
					throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
				}
				this._filePath = pathFromEnv;
				return this._filePath;
			});
		}
		/**
		* Wraps content in an HTML tag, adding any HTML attributes
		*
		* @param {string} tag HTML tag to wrap
		* @param {string | null} content content within the tag
		* @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
		*
		* @returns {string} content wrapped in HTML element
		*/
		wrap(tag, content, attrs = {}) {
			const htmlAttrs = Object.entries(attrs).map(([key, value$1]) => ` ${key}="${value$1}"`).join("");
			if (!content) return `<${tag}${htmlAttrs}>`;
			return `<${tag}${htmlAttrs}>${content}</${tag}>`;
		}
		/**
		* Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
		*
		* @param {SummaryWriteOptions} [options] (optional) options for write operation
		*
		* @returns {Promise<Summary>} summary instance
		*/
		write(options) {
			return __awaiter$6(this, void 0, void 0, function* () {
				const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
				const filePath = yield this.filePath();
				const writeFunc = overwrite ? writeFile$1 : appendFile;
				yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
				return this.emptyBuffer();
			});
		}
		/**
		* Clears the summary buffer and wipes the summary file
		*
		* @returns {Summary} summary instance
		*/
		clear() {
			return __awaiter$6(this, void 0, void 0, function* () {
				return this.emptyBuffer().write({ overwrite: true });
			});
		}
		/**
		* Returns the current summary buffer as a string
		*
		* @returns {string} string of summary buffer
		*/
		stringify() {
			return this._buffer;
		}
		/**
		* If the summary buffer is empty
		*
		* @returns {boolen} true if the buffer is empty
		*/
		isEmptyBuffer() {
			return this._buffer.length === 0;
		}
		/**
		* Resets the summary buffer without writing to summary file
		*
		* @returns {Summary} summary instance
		*/
		emptyBuffer() {
			this._buffer = "";
			return this;
		}
		/**
		* Adds raw text to the summary buffer
		*
		* @param {string} text content to add
		* @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
		*
		* @returns {Summary} summary instance
		*/
		addRaw(text, addEOL = false) {
			this._buffer += text;
			return addEOL ? this.addEOL() : this;
		}
		/**
		* Adds the operating system-specific end-of-line marker to the buffer
		*
		* @returns {Summary} summary instance
		*/
		addEOL() {
			return this.addRaw(os_1$1.EOL);
		}
		/**
		* Adds an HTML codeblock to the summary buffer
		*
		* @param {string} code content to render within fenced code block
		* @param {string} lang (optional) language to syntax highlight code
		*
		* @returns {Summary} summary instance
		*/
		addCodeBlock(code, lang) {
			const attrs = Object.assign({}, lang && { lang });
			const element = this.wrap("pre", this.wrap("code", code), attrs);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML list to the summary buffer
		*
		* @param {string[]} items list of items to render
		* @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
		*
		* @returns {Summary} summary instance
		*/
		addList(items, ordered = false) {
			const tag = ordered ? "ol" : "ul";
			const listItems = items.map((item) => this.wrap("li", item)).join("");
			const element = this.wrap(tag, listItems);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML table to the summary buffer
		*
		* @param {SummaryTableCell[]} rows table rows
		*
		* @returns {Summary} summary instance
		*/
		addTable(rows) {
			const tableBody = rows.map((row) => {
				const cells = row.map((cell) => {
					if (typeof cell === "string") return this.wrap("td", cell);
					const { header, data, colspan, rowspan } = cell;
					const tag = header ? "th" : "td";
					const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
					return this.wrap(tag, data, attrs);
				}).join("");
				return this.wrap("tr", cells);
			}).join("");
			const element = this.wrap("table", tableBody);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds a collapsable HTML details element to the summary buffer
		*
		* @param {string} label text for the closed state
		* @param {string} content collapsable content
		*
		* @returns {Summary} summary instance
		*/
		addDetails(label, content) {
			const element = this.wrap("details", this.wrap("summary", label) + content);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML image tag to the summary buffer
		*
		* @param {string} src path to the image you to embed
		* @param {string} alt text description of the image
		* @param {SummaryImageOptions} options (optional) addition image attributes
		*
		* @returns {Summary} summary instance
		*/
		addImage(src, alt, options) {
			const { width, height } = options || {};
			const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
			const element = this.wrap("img", null, Object.assign({
				src,
				alt
			}, attrs));
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML section heading element
		*
		* @param {string} text heading text
		* @param {number | string} [level=1] (optional) the heading level, default: 1
		*
		* @returns {Summary} summary instance
		*/
		addHeading(text, level) {
			const tag = `h${level}`;
			const allowedTag = [
				"h1",
				"h2",
				"h3",
				"h4",
				"h5",
				"h6"
			].includes(tag) ? tag : "h1";
			const element = this.wrap(allowedTag, text);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML thematic break (<hr>) to the summary buffer
		*
		* @returns {Summary} summary instance
		*/
		addSeparator() {
			const element = this.wrap("hr", null);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML line break (<br>) to the summary buffer
		*
		* @returns {Summary} summary instance
		*/
		addBreak() {
			const element = this.wrap("br", null);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML blockquote to the summary buffer
		*
		* @param {string} text quote text
		* @param {string} cite (optional) citation url
		*
		* @returns {Summary} summary instance
		*/
		addQuote(text, cite) {
			const attrs = Object.assign({}, cite && { cite });
			const element = this.wrap("blockquote", text, attrs);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML anchor tag to the summary buffer
		*
		* @param {string} text link text/content
		* @param {string} href hyperlink
		*
		* @returns {Summary} summary instance
		*/
		addLink(text, href) {
			const element = this.wrap("a", text, { href });
			return this.addRaw(element).addEOL();
		}
	};
	const _summary = new Summary();
	/**
	* @deprecated use `core.summary`
	*/
	exports.markdownSummary = _summary;
	exports.summary = _summary;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/path-utils.js"(exports) {
	var __createBinding$6 = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		var desc = Object.getOwnPropertyDescriptor(m$1, k$2);
		if (!desc || ("get" in desc ? !m$1.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault$6 = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar$6 = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k$2)) __createBinding$6(result, mod, k$2);
		}
		__setModuleDefault$6(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
	const path$8 = __importStar$6(__require("path"));
	/**
	* toPosixPath converts the given path to the posix form. On Windows, \\ will be
	* replaced with /.
	*
	* @param pth. Path to transform.
	* @return string Posix path.
	*/
	function toPosixPath(pth) {
		return pth.replace(/[\\]/g, "/");
	}
	exports.toPosixPath = toPosixPath;
	/**
	* toWin32Path converts the given path to the win32 form. On Linux, / will be
	* replaced with \\.
	*
	* @param pth. Path to transform.
	* @return string Win32 path.
	*/
	function toWin32Path(pth) {
		return pth.replace(/[/]/g, "\\");
	}
	exports.toWin32Path = toWin32Path;
	/**
	* toPlatformPath converts the given path to a platform-specific path. It does
	* this by replacing instances of / and \ with the platform-specific path
	* separator.
	*
	* @param pth The path to platformize.
	* @return string The platform-specific path.
	*/
	function toPlatformPath(pth) {
		return pth.replace(/[/\\]/g, path$8.sep);
	}
	exports.toPlatformPath = toPlatformPath;
} });

//#endregion
//#region node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js
var require_io_util = __commonJS({ "node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js"(exports) {
	var __createBinding$5 = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		Object.defineProperty(o$1, k2, {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		});
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault$5 = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar$5 = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.hasOwnProperty.call(mod, k$2)) __createBinding$5(result, mod, k$2);
		}
		__setModuleDefault$5(result, mod);
		return result;
	};
	var __awaiter$5 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var _a;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
	const fs$1 = __importStar$5(__require("fs"));
	const path$7 = __importStar$5(__require("path"));
	_a = fs$1.promises, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.open = _a.open, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rm = _a.rm, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;
	exports.IS_WINDOWS = process.platform === "win32";
	exports.UV_FS_O_EXLOCK = 268435456;
	exports.READONLY = fs$1.constants.O_RDONLY;
	function exists(fsPath) {
		return __awaiter$5(this, void 0, void 0, function* () {
			try {
				yield exports.stat(fsPath);
			} catch (err) {
				if (err.code === "ENOENT") return false;
				throw err;
			}
			return true;
		});
	}
	exports.exists = exists;
	function isDirectory(fsPath, useStat = false) {
		return __awaiter$5(this, void 0, void 0, function* () {
			const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
			return stats.isDirectory();
		});
	}
	exports.isDirectory = isDirectory;
	/**
	* On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:
	* \, \hello, \\hello\share, C:, and C:\hello (and corresponding alternate separator cases).
	*/
	function isRooted(p$1) {
		p$1 = normalizeSeparators(p$1);
		if (!p$1) throw new Error("isRooted() parameter \"p\" cannot be empty");
		if (exports.IS_WINDOWS) return p$1.startsWith("\\") || /^[A-Z]:/i.test(p$1);
		return p$1.startsWith("/");
	}
	exports.isRooted = isRooted;
	/**
	* Best effort attempt to determine whether a file exists and is executable.
	* @param filePath    file path to check
	* @param extensions  additional file extensions to try
	* @return if file exists and is executable, returns the file path. otherwise empty string.
	*/
	function tryGetExecutablePath(filePath, extensions) {
		return __awaiter$5(this, void 0, void 0, function* () {
			let stats = void 0;
			try {
				stats = yield exports.stat(filePath);
			} catch (err) {
				if (err.code !== "ENOENT") console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
			}
			if (stats && stats.isFile()) {
				if (exports.IS_WINDOWS) {
					const upperExt = path$7.extname(filePath).toUpperCase();
					if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) return filePath;
				} else if (isUnixExecutable(stats)) return filePath;
			}
			const originalFilePath = filePath;
			for (const extension of extensions) {
				filePath = originalFilePath + extension;
				stats = void 0;
				try {
					stats = yield exports.stat(filePath);
				} catch (err) {
					if (err.code !== "ENOENT") console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
				}
				if (stats && stats.isFile()) {
					if (exports.IS_WINDOWS) {
						try {
							const directory = path$7.dirname(filePath);
							const upperName = path$7.basename(filePath).toUpperCase();
							for (const actualName of yield exports.readdir(directory)) if (upperName === actualName.toUpperCase()) {
								filePath = path$7.join(directory, actualName);
								break;
							}
						} catch (err) {
							console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
						}
						return filePath;
					} else if (isUnixExecutable(stats)) return filePath;
				}
			}
			return "";
		});
	}
	exports.tryGetExecutablePath = tryGetExecutablePath;
	function normalizeSeparators(p$1) {
		p$1 = p$1 || "";
		if (exports.IS_WINDOWS) {
			p$1 = p$1.replace(/\//g, "\\");
			return p$1.replace(/\\\\+/g, "\\");
		}
		return p$1.replace(/\/\/+/g, "/");
	}
	function isUnixExecutable(stats) {
		return (stats.mode & 1) > 0 || (stats.mode & 8) > 0 && stats.gid === process.getgid() || (stats.mode & 64) > 0 && stats.uid === process.getuid();
	}
	function getCmdPath() {
		var _a$1;
		return (_a$1 = process.env["COMSPEC"]) !== null && _a$1 !== void 0 ? _a$1 : `cmd.exe`;
	}
	exports.getCmdPath = getCmdPath;
} });

//#endregion
//#region node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js
var require_io = __commonJS({ "node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js"(exports) {
	var __createBinding$4 = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		Object.defineProperty(o$1, k2, {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		});
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault$4 = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar$4 = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.hasOwnProperty.call(mod, k$2)) __createBinding$4(result, mod, k$2);
		}
		__setModuleDefault$4(result, mod);
		return result;
	};
	var __awaiter$4 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
	const assert_1 = __require("assert");
	const path$6 = __importStar$4(__require("path"));
	const ioUtil$1 = __importStar$4(require_io_util());
	/**
	* Copies a file or folder.
	* Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js
	*
	* @param     source    source path
	* @param     dest      destination path
	* @param     options   optional. See CopyOptions.
	*/
	function cp(source, dest, options = {}) {
		return __awaiter$4(this, void 0, void 0, function* () {
			const { force, recursive, copySourceDirectory } = readCopyOptions(options);
			const destStat = (yield ioUtil$1.exists(dest)) ? yield ioUtil$1.stat(dest) : null;
			if (destStat && destStat.isFile() && !force) return;
			const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path$6.join(dest, path$6.basename(source)) : dest;
			if (!(yield ioUtil$1.exists(source))) throw new Error(`no such file or directory: ${source}`);
			const sourceStat = yield ioUtil$1.stat(source);
			if (sourceStat.isDirectory()) if (!recursive) throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
			else yield cpDirRecursive(source, newDest, 0, force);
			else {
				if (path$6.relative(source, newDest) === "") throw new Error(`'${newDest}' and '${source}' are the same file`);
				yield copyFile(source, newDest, force);
			}
		});
	}
	exports.cp = cp;
	/**
	* Moves a path.
	*
	* @param     source    source path
	* @param     dest      destination path
	* @param     options   optional. See MoveOptions.
	*/
	function mv(source, dest, options = {}) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (yield ioUtil$1.exists(dest)) {
				let destExists = true;
				if (yield ioUtil$1.isDirectory(dest)) {
					dest = path$6.join(dest, path$6.basename(source));
					destExists = yield ioUtil$1.exists(dest);
				}
				if (destExists) if (options.force == null || options.force) yield rmRF(dest);
				else throw new Error("Destination already exists");
			}
			yield mkdirP(path$6.dirname(dest));
			yield ioUtil$1.rename(source, dest);
		});
	}
	exports.mv = mv;
	/**
	* Remove a path recursively with force
	*
	* @param inputPath path to remove
	*/
	function rmRF(inputPath) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (ioUtil$1.IS_WINDOWS) {
				if (/[*"<>|]/.test(inputPath)) throw new Error("File path must not contain `*`, `\"`, `<`, `>` or `|` on Windows");
			}
			try {
				yield ioUtil$1.rm(inputPath, {
					force: true,
					maxRetries: 3,
					recursive: true,
					retryDelay: 300
				});
			} catch (err) {
				throw new Error(`File was unable to be removed ${err}`);
			}
		});
	}
	exports.rmRF = rmRF;
	/**
	* Make a directory.  Creates the full path with folders in between
	* Will throw if it fails
	*
	* @param   fsPath        path to create
	* @returns Promise<void>
	*/
	function mkdirP(fsPath) {
		return __awaiter$4(this, void 0, void 0, function* () {
			assert_1.ok(fsPath, "a path argument must be provided");
			yield ioUtil$1.mkdir(fsPath, { recursive: true });
		});
	}
	exports.mkdirP = mkdirP;
	/**
	* Returns path of a tool had the tool actually been invoked.  Resolves via paths.
	* If you check and the tool does not exist, it will throw.
	*
	* @param     tool              name of the tool
	* @param     check             whether to check if tool exists
	* @returns   Promise<string>   path to tool
	*/
	function which(tool, check) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (!tool) throw new Error("parameter 'tool' is required");
			if (check) {
				const result = yield which(tool, false);
				if (!result) if (ioUtil$1.IS_WINDOWS) throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
				else throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
				return result;
			}
			const matches = yield findInPath(tool);
			if (matches && matches.length > 0) return matches[0];
			return "";
		});
	}
	exports.which = which;
	/**
	* Returns a list of all occurrences of the given tool on the system path.
	*
	* @returns   Promise<string[]>  the paths of the tool
	*/
	function findInPath(tool) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (!tool) throw new Error("parameter 'tool' is required");
			const extensions = [];
			if (ioUtil$1.IS_WINDOWS && process.env["PATHEXT"]) {
				for (const extension of process.env["PATHEXT"].split(path$6.delimiter)) if (extension) extensions.push(extension);
			}
			if (ioUtil$1.isRooted(tool)) {
				const filePath = yield ioUtil$1.tryGetExecutablePath(tool, extensions);
				if (filePath) return [filePath];
				return [];
			}
			if (tool.includes(path$6.sep)) return [];
			const directories = [];
			if (process.env.PATH) {
				for (const p$1 of process.env.PATH.split(path$6.delimiter)) if (p$1) directories.push(p$1);
			}
			const matches = [];
			for (const directory of directories) {
				const filePath = yield ioUtil$1.tryGetExecutablePath(path$6.join(directory, tool), extensions);
				if (filePath) matches.push(filePath);
			}
			return matches;
		});
	}
	exports.findInPath = findInPath;
	function readCopyOptions(options) {
		const force = options.force == null ? true : options.force;
		const recursive = Boolean(options.recursive);
		const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
		return {
			force,
			recursive,
			copySourceDirectory
		};
	}
	function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (currentDepth >= 255) return;
			currentDepth++;
			yield mkdirP(destDir);
			const files = yield ioUtil$1.readdir(sourceDir);
			for (const fileName of files) {
				const srcFile = `${sourceDir}/${fileName}`;
				const destFile = `${destDir}/${fileName}`;
				const srcFileStat = yield ioUtil$1.lstat(srcFile);
				if (srcFileStat.isDirectory()) yield cpDirRecursive(srcFile, destFile, currentDepth, force);
				else yield copyFile(srcFile, destFile, force);
			}
			yield ioUtil$1.chmod(destDir, (yield ioUtil$1.stat(sourceDir)).mode);
		});
	}
	function copyFile(srcFile, destFile, force) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if ((yield ioUtil$1.lstat(srcFile)).isSymbolicLink()) {
				try {
					yield ioUtil$1.lstat(destFile);
					yield ioUtil$1.unlink(destFile);
				} catch (e$1) {
					if (e$1.code === "EPERM") {
						yield ioUtil$1.chmod(destFile, "0666");
						yield ioUtil$1.unlink(destFile);
					}
				}
				const symlinkFull = yield ioUtil$1.readlink(srcFile);
				yield ioUtil$1.symlink(symlinkFull, destFile, ioUtil$1.IS_WINDOWS ? "junction" : null);
			} else if (!(yield ioUtil$1.exists(destFile)) || force) yield ioUtil$1.copyFile(srcFile, destFile);
		});
	}
} });

//#endregion
//#region node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js
var require_toolrunner = __commonJS({ "node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js"(exports) {
	var __createBinding$3 = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		Object.defineProperty(o$1, k2, {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		});
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault$3 = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar$3 = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.hasOwnProperty.call(mod, k$2)) __createBinding$3(result, mod, k$2);
		}
		__setModuleDefault$3(result, mod);
		return result;
	};
	var __awaiter$3 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.argStringToArray = exports.ToolRunner = void 0;
	const os$2 = __importStar$3(__require("os"));
	const events = __importStar$3(__require("events"));
	const child = __importStar$3(__require("child_process"));
	const path$5 = __importStar$3(__require("path"));
	const io = __importStar$3(require_io());
	const ioUtil = __importStar$3(require_io_util());
	const timers_1 = __require("timers");
	const IS_WINDOWS = process.platform === "win32";
	var ToolRunner = class extends events.EventEmitter {
		constructor(toolPath, args, options) {
			super();
			if (!toolPath) throw new Error("Parameter 'toolPath' cannot be null or empty.");
			this.toolPath = toolPath;
			this.args = args || [];
			this.options = options || {};
		}
		_debug(message) {
			if (this.options.listeners && this.options.listeners.debug) this.options.listeners.debug(message);
		}
		_getCommandString(options, noPrefix) {
			const toolPath = this._getSpawnFileName();
			const args = this._getSpawnArgs(options);
			let cmd = noPrefix ? "" : "[command]";
			if (IS_WINDOWS) if (this._isCmdFile()) {
				cmd += toolPath;
				for (const a of args) cmd += ` ${a}`;
			} else if (options.windowsVerbatimArguments) {
				cmd += `"${toolPath}"`;
				for (const a of args) cmd += ` ${a}`;
			} else {
				cmd += this._windowsQuoteCmdArg(toolPath);
				for (const a of args) cmd += ` ${this._windowsQuoteCmdArg(a)}`;
			}
			else {
				cmd += toolPath;
				for (const a of args) cmd += ` ${a}`;
			}
			return cmd;
		}
		_processLineBuffer(data, strBuffer, onLine) {
			try {
				let s = strBuffer + data.toString();
				let n = s.indexOf(os$2.EOL);
				while (n > -1) {
					const line = s.substring(0, n);
					onLine(line);
					s = s.substring(n + os$2.EOL.length);
					n = s.indexOf(os$2.EOL);
				}
				return s;
			} catch (err) {
				this._debug(`error processing line. Failed with error ${err}`);
				return "";
			}
		}
		_getSpawnFileName() {
			if (IS_WINDOWS) {
				if (this._isCmdFile()) return process.env["COMSPEC"] || "cmd.exe";
			}
			return this.toolPath;
		}
		_getSpawnArgs(options) {
			if (IS_WINDOWS) {
				if (this._isCmdFile()) {
					let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
					for (const a of this.args) {
						argline += " ";
						argline += options.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
					}
					argline += "\"";
					return [argline];
				}
			}
			return this.args;
		}
		_endsWith(str, end) {
			return str.endsWith(end);
		}
		_isCmdFile() {
			const upperToolPath = this.toolPath.toUpperCase();
			return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
		}
		_windowsQuoteCmdArg(arg) {
			if (!this._isCmdFile()) return this._uvQuoteCmdArg(arg);
			if (!arg) return "\"\"";
			const cmdSpecialChars = [
				" ",
				"	",
				"&",
				"(",
				")",
				"[",
				"]",
				"{",
				"}",
				"^",
				"=",
				";",
				"!",
				"'",
				"+",
				",",
				"`",
				"~",
				"|",
				"<",
				">",
				"\""
			];
			let needsQuotes = false;
			for (const char of arg) if (cmdSpecialChars.some((x$3) => x$3 === char)) {
				needsQuotes = true;
				break;
			}
			if (!needsQuotes) return arg;
			let reverse = "\"";
			let quoteHit = true;
			for (let i = arg.length; i > 0; i--) {
				reverse += arg[i - 1];
				if (quoteHit && arg[i - 1] === "\\") reverse += "\\";
				else if (arg[i - 1] === "\"") {
					quoteHit = true;
					reverse += "\"";
				} else quoteHit = false;
			}
			reverse += "\"";
			return reverse.split("").reverse().join("");
		}
		_uvQuoteCmdArg(arg) {
			if (!arg) return "\"\"";
			if (!arg.includes(" ") && !arg.includes("	") && !arg.includes("\"")) return arg;
			if (!arg.includes("\"") && !arg.includes("\\")) return `"${arg}"`;
			let reverse = "\"";
			let quoteHit = true;
			for (let i = arg.length; i > 0; i--) {
				reverse += arg[i - 1];
				if (quoteHit && arg[i - 1] === "\\") reverse += "\\";
				else if (arg[i - 1] === "\"") {
					quoteHit = true;
					reverse += "\\";
				} else quoteHit = false;
			}
			reverse += "\"";
			return reverse.split("").reverse().join("");
		}
		_cloneExecOptions(options) {
			options = options || {};
			const result = {
				cwd: options.cwd || process.cwd(),
				env: options.env || process.env,
				silent: options.silent || false,
				windowsVerbatimArguments: options.windowsVerbatimArguments || false,
				failOnStdErr: options.failOnStdErr || false,
				ignoreReturnCode: options.ignoreReturnCode || false,
				delay: options.delay || 1e4
			};
			result.outStream = options.outStream || process.stdout;
			result.errStream = options.errStream || process.stderr;
			return result;
		}
		_getSpawnOptions(options, toolPath) {
			options = options || {};
			const result = {};
			result.cwd = options.cwd;
			result.env = options.env;
			result["windowsVerbatimArguments"] = options.windowsVerbatimArguments || this._isCmdFile();
			if (options.windowsVerbatimArguments) result.argv0 = `"${toolPath}"`;
			return result;
		}
		/**
		* Exec a tool.
		* Output will be streamed to the live console.
		* Returns promise with return code
		*
		* @param     tool     path to tool to exec
		* @param     options  optional exec options.  See ExecOptions
		* @returns   number
		*/
		exec() {
			return __awaiter$3(this, void 0, void 0, function* () {
				if (!ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\"))) this.toolPath = path$5.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
				this.toolPath = yield io.which(this.toolPath, true);
				return new Promise((resolve$1, reject) => __awaiter$3(this, void 0, void 0, function* () {
					this._debug(`exec tool: ${this.toolPath}`);
					this._debug("arguments:");
					for (const arg of this.args) this._debug(`   ${arg}`);
					const optionsNonNull = this._cloneExecOptions(this.options);
					if (!optionsNonNull.silent && optionsNonNull.outStream) optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os$2.EOL);
					const state = new ExecState(optionsNonNull, this.toolPath);
					state.on("debug", (message) => {
						this._debug(message);
					});
					if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
					const fileName = this._getSpawnFileName();
					const cp$1 = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
					let stdbuffer = "";
					if (cp$1.stdout) cp$1.stdout.on("data", (data) => {
						if (this.options.listeners && this.options.listeners.stdout) this.options.listeners.stdout(data);
						if (!optionsNonNull.silent && optionsNonNull.outStream) optionsNonNull.outStream.write(data);
						stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
							if (this.options.listeners && this.options.listeners.stdline) this.options.listeners.stdline(line);
						});
					});
					let errbuffer = "";
					if (cp$1.stderr) cp$1.stderr.on("data", (data) => {
						state.processStderr = true;
						if (this.options.listeners && this.options.listeners.stderr) this.options.listeners.stderr(data);
						if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
							const s = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
							s.write(data);
						}
						errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
							if (this.options.listeners && this.options.listeners.errline) this.options.listeners.errline(line);
						});
					});
					cp$1.on("error", (err) => {
						state.processError = err.message;
						state.processExited = true;
						state.processClosed = true;
						state.CheckComplete();
					});
					cp$1.on("exit", (code) => {
						state.processExitCode = code;
						state.processExited = true;
						this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
						state.CheckComplete();
					});
					cp$1.on("close", (code) => {
						state.processExitCode = code;
						state.processExited = true;
						state.processClosed = true;
						this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
						state.CheckComplete();
					});
					state.on("done", (error$1, exitCode) => {
						if (stdbuffer.length > 0) this.emit("stdline", stdbuffer);
						if (errbuffer.length > 0) this.emit("errline", errbuffer);
						cp$1.removeAllListeners();
						if (error$1) reject(error$1);
						else resolve$1(exitCode);
					});
					if (this.options.input) {
						if (!cp$1.stdin) throw new Error("child process missing stdin");
						cp$1.stdin.end(this.options.input);
					}
				}));
			});
		}
	};
	exports.ToolRunner = ToolRunner;
	/**
	* Convert an arg string to an array of args. Handles escaping
	*
	* @param    argString   string of arguments
	* @returns  string[]    array of arguments
	*/
	function argStringToArray(argString) {
		const args = [];
		let inQuotes = false;
		let escaped = false;
		let arg = "";
		function append(c) {
			if (escaped && c !== "\"") arg += "\\";
			arg += c;
			escaped = false;
		}
		for (let i = 0; i < argString.length; i++) {
			const c = argString.charAt(i);
			if (c === "\"") {
				if (!escaped) inQuotes = !inQuotes;
				else append(c);
				continue;
			}
			if (c === "\\" && escaped) {
				append(c);
				continue;
			}
			if (c === "\\" && inQuotes) {
				escaped = true;
				continue;
			}
			if (c === " " && !inQuotes) {
				if (arg.length > 0) {
					args.push(arg);
					arg = "";
				}
				continue;
			}
			append(c);
		}
		if (arg.length > 0) args.push(arg.trim());
		return args;
	}
	exports.argStringToArray = argStringToArray;
	var ExecState = class ExecState extends events.EventEmitter {
		constructor(options, toolPath) {
			super();
			this.processClosed = false;
			this.processError = "";
			this.processExitCode = 0;
			this.processExited = false;
			this.processStderr = false;
			this.delay = 1e4;
			this.done = false;
			this.timeout = null;
			if (!toolPath) throw new Error("toolPath must not be empty");
			this.options = options;
			this.toolPath = toolPath;
			if (options.delay) this.delay = options.delay;
		}
		CheckComplete() {
			if (this.done) return;
			if (this.processClosed) this._setResult();
			else if (this.processExited) this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
		}
		_debug(message) {
			this.emit("debug", message);
		}
		_setResult() {
			let error$1;
			if (this.processExited) {
				if (this.processError) error$1 = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
				else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) error$1 = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
				else if (this.processStderr && this.options.failOnStdErr) error$1 = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
			}
			if (this.timeout) {
				clearTimeout(this.timeout);
				this.timeout = null;
			}
			this.done = true;
			this.emit("done", error$1, this.processExitCode);
		}
		static HandleTimeout(state) {
			if (state.done) return;
			if (!state.processClosed && state.processExited) {
				const message = `The STDIO streams did not close within ${state.delay / 1e3} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
				state._debug(message);
			}
			state._setResult();
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js
var require_exec = __commonJS({ "node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js"(exports) {
	var __createBinding$2 = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		Object.defineProperty(o$1, k2, {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		});
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault$2 = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar$2 = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.hasOwnProperty.call(mod, k$2)) __createBinding$2(result, mod, k$2);
		}
		__setModuleDefault$2(result, mod);
		return result;
	};
	var __awaiter$2 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getExecOutput = exports.exec = void 0;
	const string_decoder_1 = __require("string_decoder");
	const tr = __importStar$2(require_toolrunner());
	/**
	* Exec a command.
	* Output will be streamed to the live console.
	* Returns promise with return code
	*
	* @param     commandLine        command to execute (can include additional args). Must be correctly escaped.
	* @param     args               optional arguments for tool. Escaping is handled by the lib.
	* @param     options            optional exec options.  See ExecOptions
	* @returns   Promise<number>    exit code
	*/
	function exec$1(commandLine, args, options) {
		return __awaiter$2(this, void 0, void 0, function* () {
			const commandArgs = tr.argStringToArray(commandLine);
			if (commandArgs.length === 0) throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
			const toolPath = commandArgs[0];
			args = commandArgs.slice(1).concat(args || []);
			const runner = new tr.ToolRunner(toolPath, args, options);
			return runner.exec();
		});
	}
	exports.exec = exec$1;
	/**
	* Exec a command and get the output.
	* Output will be streamed to the live console.
	* Returns promise with the exit code and collected stdout and stderr
	*
	* @param     commandLine           command to execute (can include additional args). Must be correctly escaped.
	* @param     args                  optional arguments for tool. Escaping is handled by the lib.
	* @param     options               optional exec options.  See ExecOptions
	* @returns   Promise<ExecOutput>   exit code, stdout, and stderr
	*/
	function getExecOutput(commandLine, args, options) {
		var _a$1, _b;
		return __awaiter$2(this, void 0, void 0, function* () {
			let stdout$1 = "";
			let stderr = "";
			const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
			const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
			const originalStdoutListener = (_a$1 = options === null || options === void 0 ? void 0 : options.listeners) === null || _a$1 === void 0 ? void 0 : _a$1.stdout;
			const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
			const stdErrListener = (data) => {
				stderr += stderrDecoder.write(data);
				if (originalStdErrListener) originalStdErrListener(data);
			};
			const stdOutListener = (data) => {
				stdout$1 += stdoutDecoder.write(data);
				if (originalStdoutListener) originalStdoutListener(data);
			};
			const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), {
				stdout: stdOutListener,
				stderr: stdErrListener
			});
			const exitCode = yield exec$1(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
			stdout$1 += stdoutDecoder.end();
			stderr += stderrDecoder.end();
			return {
				exitCode,
				stdout: stdout$1,
				stderr
			};
		});
	}
	exports.getExecOutput = getExecOutput;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/platform.js
var require_platform = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/platform.js"(exports) {
	var __createBinding$1 = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		var desc = Object.getOwnPropertyDescriptor(m$1, k$2);
		if (!desc || ("get" in desc ? !m$1.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault$1 = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar$1 = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k$2)) __createBinding$1(result, mod, k$2);
		}
		__setModuleDefault$1(result, mod);
		return result;
	};
	var __awaiter$1 = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __importDefault = void 0 && (void 0).__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = void 0;
	const os_1 = __importDefault(__require("os"));
	const exec = __importStar$1(require_exec());
	const getWindowsInfo = () => __awaiter$1(void 0, void 0, void 0, function* () {
		const { stdout: version$1 } = yield exec.getExecOutput("powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Version\"", void 0, { silent: true });
		const { stdout: name } = yield exec.getExecOutput("powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Caption\"", void 0, { silent: true });
		return {
			name: name.trim(),
			version: version$1.trim()
		};
	});
	const getMacOsInfo = () => __awaiter$1(void 0, void 0, void 0, function* () {
		var _a$1, _b, _c, _d;
		const { stdout: stdout$1 } = yield exec.getExecOutput("sw_vers", void 0, { silent: true });
		const version$1 = (_b = (_a$1 = stdout$1.match(/ProductVersion:\s*(.+)/)) === null || _a$1 === void 0 ? void 0 : _a$1[1]) !== null && _b !== void 0 ? _b : "";
		const name = (_d = (_c = stdout$1.match(/ProductName:\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : "";
		return {
			name,
			version: version$1
		};
	});
	const getLinuxInfo = () => __awaiter$1(void 0, void 0, void 0, function* () {
		const { stdout: stdout$1 } = yield exec.getExecOutput("lsb_release", [
			"-i",
			"-r",
			"-s"
		], { silent: true });
		const [name, version$1] = stdout$1.trim().split("\n");
		return {
			name,
			version: version$1
		};
	});
	exports.platform = os_1.default.platform();
	exports.arch = os_1.default.arch();
	exports.isWindows = exports.platform === "win32";
	exports.isMacOS = exports.platform === "darwin";
	exports.isLinux = exports.platform === "linux";
	function getDetails() {
		return __awaiter$1(this, void 0, void 0, function* () {
			return Object.assign(Object.assign({}, yield exports.isWindows ? getWindowsInfo() : exports.isMacOS ? getMacOsInfo() : getLinuxInfo()), {
				platform: exports.platform,
				arch: exports.arch,
				isWindows: exports.isWindows,
				isMacOS: exports.isMacOS,
				isLinux: exports.isLinux
			});
		});
	}
	exports.getDetails = getDetails;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/core.js
var require_core = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/core.js"(exports) {
	var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		var desc = Object.getOwnPropertyDescriptor(m$1, k$2);
		if (!desc || ("get" in desc ? !m$1.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m$1[k$2];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m$1, k$2, k2) {
		if (k2 === void 0) k2 = k$2;
		o$1[k2] = m$1[k$2];
	});
	var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function(o$1, v$1) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o$1, v$1) {
		o$1["default"] = v$1;
	});
	var __importStar = void 0 && (void 0).__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k$2 in mod) if (k$2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k$2)) __createBinding(result, mod, k$2);
		}
		__setModuleDefault(result, mod);
		return result;
	};
	var __awaiter = void 0 && (void 0).__awaiter || function(thisArg, _arguments, P$2, generator) {
		function adopt(value$1) {
			return value$1 instanceof P$2 ? value$1 : new P$2(function(resolve$1) {
				resolve$1(value$1);
			});
		}
		return new (P$2 || (P$2 = Promise))(function(resolve$1, reject) {
			function fulfilled(value$1) {
				try {
					step(generator.next(value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function rejected(value$1) {
				try {
					step(generator["throw"](value$1));
				} catch (e$1) {
					reject(e$1);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
	const command_1 = require_command();
	const file_command_1 = require_file_command();
	const utils_1 = require_utils$2();
	const os$1 = __importStar(__require("os"));
	const path$4 = __importStar(__require("path"));
	const oidc_utils_1 = require_oidc_utils();
	/**
	* The code to exit an action
	*/
	var ExitCode;
	(function(ExitCode$1) {
		/**
		* A code indicating that the action was successful
		*/
		ExitCode$1[ExitCode$1["Success"] = 0] = "Success";
		/**
		* A code indicating that the action was a failure
		*/
		ExitCode$1[ExitCode$1["Failure"] = 1] = "Failure";
	})(ExitCode || (exports.ExitCode = ExitCode = {}));
	/**
	* Sets env variable for this action and future actions in the job
	* @param name the name of the variable to set
	* @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
	*/
	function exportVariable(name, val) {
		const convertedVal = (0, utils_1.toCommandValue)(val);
		process.env[name] = convertedVal;
		const filePath = process.env["GITHUB_ENV"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("ENV", (0, file_command_1.prepareKeyValueMessage)(name, val));
		(0, command_1.issueCommand)("set-env", { name }, convertedVal);
	}
	exports.exportVariable = exportVariable;
	/**
	* Registers a secret which will get masked from logs
	* @param secret value of the secret
	*/
	function setSecret(secret) {
		(0, command_1.issueCommand)("add-mask", {}, secret);
	}
	exports.setSecret = setSecret;
	/**
	* Prepends inputPath to the PATH (for this action and future actions)
	* @param inputPath
	*/
	function addPath(inputPath) {
		const filePath = process.env["GITHUB_PATH"] || "";
		if (filePath) (0, file_command_1.issueFileCommand)("PATH", inputPath);
		else (0, command_1.issueCommand)("add-path", {}, inputPath);
		process.env["PATH"] = `${inputPath}${path$4.delimiter}${process.env["PATH"]}`;
	}
	exports.addPath = addPath;
	/**
	* Gets the value of an input.
	* Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
	* Returns an empty string if the value is not defined.
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   string
	*/
	function getInput(name, options) {
		const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
		if (options && options.required && !val) throw new Error(`Input required and not supplied: ${name}`);
		if (options && options.trimWhitespace === false) return val;
		return val.trim();
	}
	exports.getInput = getInput;
	/**
	* Gets the values of an multiline input.  Each value is also trimmed.
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   string[]
	*
	*/
	function getMultilineInput(name, options) {
		const inputs = getInput(name, options).split("\n").filter((x$3) => x$3 !== "");
		if (options && options.trimWhitespace === false) return inputs;
		return inputs.map((input) => input.trim());
	}
	exports.getMultilineInput = getMultilineInput;
	/**
	* Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
	* Support boolean input list: `true | True | TRUE | false | False | FALSE` .
	* The return value is also in boolean type.
	* ref: https://yaml.org/spec/1.2/spec.html#id2804923
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   boolean
	*/
	function getBooleanInput(name, options) {
		const trueValue = [
			"true",
			"True",
			"TRUE"
		];
		const falseValue = [
			"false",
			"False",
			"FALSE"
		];
		const val = getInput(name, options);
		if (trueValue.includes(val)) return true;
		if (falseValue.includes(val)) return false;
		throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\nSupport boolean input list: \`true | True | TRUE | false | False | FALSE\``);
	}
	exports.getBooleanInput = getBooleanInput;
	/**
	* Sets the value of an output.
	*
	* @param     name     name of the output to set
	* @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
	*/
	function setOutput(name, value$1) {
		const filePath = process.env["GITHUB_OUTPUT"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("OUTPUT", (0, file_command_1.prepareKeyValueMessage)(name, value$1));
		process.stdout.write(os$1.EOL);
		(0, command_1.issueCommand)("set-output", { name }, (0, utils_1.toCommandValue)(value$1));
	}
	exports.setOutput = setOutput;
	/**
	* Enables or disables the echoing of commands into stdout for the rest of the step.
	* Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
	*
	*/
	function setCommandEcho(enabled) {
		(0, command_1.issue)("echo", enabled ? "on" : "off");
	}
	exports.setCommandEcho = setCommandEcho;
	/**
	* Sets the action status to failed.
	* When the action exits it will be with an exit code of 1
	* @param message add error issue message
	*/
	function setFailed(message) {
		process.exitCode = ExitCode.Failure;
		error(message);
	}
	exports.setFailed = setFailed;
	/**
	* Gets whether Actions Step Debug is on or not
	*/
	function isDebug() {
		return process.env["RUNNER_DEBUG"] === "1";
	}
	exports.isDebug = isDebug;
	/**
	* Writes debug message to user log
	* @param message debug message
	*/
	function debug$3(message) {
		(0, command_1.issueCommand)("debug", {}, message);
	}
	exports.debug = debug$3;
	/**
	* Adds an error issue
	* @param message error issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function error(message, properties = {}) {
		(0, command_1.issueCommand)("error", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.error = error;
	/**
	* Adds a warning issue
	* @param message warning issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function warning(message, properties = {}) {
		(0, command_1.issueCommand)("warning", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.warning = warning;
	/**
	* Adds a notice issue
	* @param message notice issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function notice(message, properties = {}) {
		(0, command_1.issueCommand)("notice", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.notice = notice;
	/**
	* Writes info to log with console.log.
	* @param message info message
	*/
	function info(message) {
		process.stdout.write(message + os$1.EOL);
	}
	exports.info = info;
	/**
	* Begin an output group.
	*
	* Output until the next `groupEnd` will be foldable in this group
	*
	* @param name The name of the output group
	*/
	function startGroup(name) {
		(0, command_1.issue)("group", name);
	}
	exports.startGroup = startGroup;
	/**
	* End an output group.
	*/
	function endGroup() {
		(0, command_1.issue)("endgroup");
	}
	exports.endGroup = endGroup;
	/**
	* Wrap an asynchronous function call in a group.
	*
	* Returns the same type as the function itself.
	*
	* @param name The name of the group
	* @param fn The function to wrap in the group
	*/
	function group(name, fn) {
		return __awaiter(this, void 0, void 0, function* () {
			startGroup(name);
			let result;
			try {
				result = yield fn();
			} finally {
				endGroup();
			}
			return result;
		});
	}
	exports.group = group;
	/**
	* Saves state for current action, the state can only be retrieved by this action's post job execution.
	*
	* @param     name     name of the state to store
	* @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
	*/
	function saveState(name, value$1) {
		const filePath = process.env["GITHUB_STATE"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("STATE", (0, file_command_1.prepareKeyValueMessage)(name, value$1));
		(0, command_1.issueCommand)("save-state", { name }, (0, utils_1.toCommandValue)(value$1));
	}
	exports.saveState = saveState;
	/**
	* Gets the value of an state set by this action's main execution.
	*
	* @param     name     name of the state to get
	* @returns   string
	*/
	function getState(name) {
		return process.env[`STATE_${name}`] || "";
	}
	exports.getState = getState;
	function getIDToken(aud) {
		return __awaiter(this, void 0, void 0, function* () {
			return yield oidc_utils_1.OidcClient.getIDToken(aud);
		});
	}
	exports.getIDToken = getIDToken;
	/**
	* Summary exports
	*/
	var summary_1 = require_summary();
	Object.defineProperty(exports, "summary", {
		enumerable: true,
		get: function() {
			return summary_1.summary;
		}
	});
	/**
	* @deprecated use core.summary
	*/
	var summary_2 = require_summary();
	Object.defineProperty(exports, "markdownSummary", {
		enumerable: true,
		get: function() {
			return summary_2.markdownSummary;
		}
	});
	/**
	* Path exports
	*/
	var path_utils_1 = require_path_utils();
	Object.defineProperty(exports, "toPosixPath", {
		enumerable: true,
		get: function() {
			return path_utils_1.toPosixPath;
		}
	});
	Object.defineProperty(exports, "toWin32Path", {
		enumerable: true,
		get: function() {
			return path_utils_1.toWin32Path;
		}
	});
	Object.defineProperty(exports, "toPlatformPath", {
		enumerable: true,
		get: function() {
			return path_utils_1.toPlatformPath;
		}
	});
	/**
	* Platform utilities exports
	*/
	exports.platform = __importStar(require_platform());
} });

//#endregion
//#region node_modules/.pnpm/pathe@2.0.3/node_modules/pathe/dist/shared/pathe.M-eThtNZ.mjs
const _DRIVE_LETTER_START_RE = /^[A-Za-z]:\//;
function normalizeWindowsPath(input = "") {
	if (!input) return input;
	return input.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE, (r$1) => r$1.toUpperCase());
}
const _EXTNAME_RE = /.(\.[^./]+|\.)$/;
const extname = function(p$1) {
	if (p$1 === "..") return "";
	const match = _EXTNAME_RE.exec(normalizeWindowsPath(p$1));
	return match && match[1] || "";
};

//#endregion
//#region node_modules/.pnpm/unstorage@1.15.0/node_modules/unstorage/dist/shared/unstorage.mNKHTF5Y.mjs
function wrapToPromise(value$1) {
	if (!value$1 || typeof value$1.then !== "function") return Promise.resolve(value$1);
	return value$1;
}
function asyncCall(function_, ...arguments_) {
	try {
		return wrapToPromise(function_(...arguments_));
	} catch (error$1) {
		return Promise.reject(error$1);
	}
}
function isPrimitive(value$1) {
	const type$1 = typeof value$1;
	return value$1 === null || type$1 !== "object" && type$1 !== "function";
}
function isPureObject(value$1) {
	const proto = Object.getPrototypeOf(value$1);
	return !proto || proto.isPrototypeOf(Object);
}
function stringify(value$1) {
	if (isPrimitive(value$1)) return String(value$1);
	if (isPureObject(value$1) || Array.isArray(value$1)) return JSON.stringify(value$1);
	if (typeof value$1.toJSON === "function") return stringify(value$1.toJSON());
	throw new Error("[unstorage] Cannot stringify value!");
}
const BASE64_PREFIX = "base64:";
function serializeRaw(value$1) {
	if (typeof value$1 === "string") return value$1;
	return BASE64_PREFIX + base64Encode(value$1);
}
function deserializeRaw(value$1) {
	if (typeof value$1 !== "string") return value$1;
	if (!value$1.startsWith(BASE64_PREFIX)) return value$1;
	return base64Decode(value$1.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
	if (globalThis.Buffer) return Buffer.from(input, "base64");
	return Uint8Array.from(globalThis.atob(input), (c) => c.codePointAt(0));
}
function base64Encode(input) {
	if (globalThis.Buffer) return Buffer.from(input).toString("base64");
	return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key) {
	if (!key) return "";
	return key.split("?")[0]?.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "") || "";
}
function joinKeys(...keys) {
	return normalizeKey(keys.join(":"));
}
function normalizeBaseKey(base) {
	base = normalizeKey(base);
	return base ? base + ":" : "";
}
function filterKeyByDepth(key, depth$1) {
	if (depth$1 === void 0) return true;
	let substrCount = 0;
	let index = key.indexOf(":");
	while (index > -1) {
		substrCount++;
		index = key.indexOf(":", index + 1);
	}
	return substrCount <= depth$1;
}
function filterKeyByBase(key, base) {
	if (base) return key.startsWith(base) && key[key.length - 1] !== "$";
	return key[key.length - 1] !== "$";
}

//#endregion
//#region node_modules/.pnpm/unstorage@1.15.0/node_modules/unstorage/dist/index.mjs
function defineDriver$1(factory) {
	return factory;
}
const DRIVER_NAME$1 = "memory";
const memory = defineDriver$1(() => {
	const data = /* @__PURE__ */ new Map();
	return {
		name: DRIVER_NAME$1,
		getInstance: () => data,
		hasItem(key) {
			return data.has(key);
		},
		getItem(key) {
			return data.get(key) ?? null;
		},
		getItemRaw(key) {
			return data.get(key) ?? null;
		},
		setItem(key, value$1) {
			data.set(key, value$1);
		},
		setItemRaw(key, value$1) {
			data.set(key, value$1);
		},
		removeItem(key) {
			data.delete(key);
		},
		getKeys() {
			return [...data.keys()];
		},
		clear() {
			data.clear();
		},
		dispose() {
			data.clear();
		}
	};
});
function createStorage(options = {}) {
	const context = {
		mounts: { "": options.driver || memory() },
		mountpoints: [""],
		watching: false,
		watchListeners: [],
		unwatch: {}
	};
	const getMount = (key) => {
		for (const base of context.mountpoints) if (key.startsWith(base)) return {
			base,
			relativeKey: key.slice(base.length),
			driver: context.mounts[base]
		};
		return {
			base: "",
			relativeKey: key,
			driver: context.mounts[""]
		};
	};
	const getMounts = (base, includeParent) => {
		return context.mountpoints.filter((mountpoint) => mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)).map((mountpoint) => ({
			relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,
			mountpoint,
			driver: context.mounts[mountpoint]
		}));
	};
	const onChange = (event, key) => {
		if (!context.watching) return;
		key = normalizeKey(key);
		for (const listener of context.watchListeners) listener(event, key);
	};
	const startWatch = async () => {
		if (context.watching) return;
		context.watching = true;
		for (const mountpoint in context.mounts) context.unwatch[mountpoint] = await watch$2(context.mounts[mountpoint], onChange, mountpoint);
	};
	const stopWatch = async () => {
		if (!context.watching) return;
		for (const mountpoint in context.unwatch) await context.unwatch[mountpoint]();
		context.unwatch = {};
		context.watching = false;
	};
	const runBatch = (items, commonOptions, cb) => {
		const batches = /* @__PURE__ */ new Map();
		const getBatch = (mount) => {
			let batch = batches.get(mount.base);
			if (!batch) {
				batch = {
					driver: mount.driver,
					base: mount.base,
					items: []
				};
				batches.set(mount.base, batch);
			}
			return batch;
		};
		for (const item of items) {
			const isStringItem = typeof item === "string";
			const key = normalizeKey(isStringItem ? item : item.key);
			const value$1 = isStringItem ? void 0 : item.value;
			const options2 = isStringItem || !item.options ? commonOptions : {
				...commonOptions,
				...item.options
			};
			const mount = getMount(key);
			getBatch(mount).items.push({
				key,
				value: value$1,
				relativeKey: mount.relativeKey,
				options: options2
			});
		}
		return Promise.all([...batches.values()].map((batch) => cb(batch))).then((r$1) => r$1.flat());
	};
	const storage = {
		hasItem(key, opts = {}) {
			key = normalizeKey(key);
			const { relativeKey, driver } = getMount(key);
			return asyncCall(driver.hasItem, relativeKey, opts);
		},
		getItem(key, opts = {}) {
			key = normalizeKey(key);
			const { relativeKey, driver } = getMount(key);
			return asyncCall(driver.getItem, relativeKey, opts).then((value$1) => destr(value$1));
		},
		getItems(items, commonOptions = {}) {
			return runBatch(items, commonOptions, (batch) => {
				if (batch.driver.getItems) return asyncCall(batch.driver.getItems, batch.items.map((item) => ({
					key: item.relativeKey,
					options: item.options
				})), commonOptions).then((r$1) => r$1.map((item) => ({
					key: joinKeys(batch.base, item.key),
					value: destr(item.value)
				})));
				return Promise.all(batch.items.map((item) => {
					return asyncCall(batch.driver.getItem, item.relativeKey, item.options).then((value$1) => ({
						key: item.key,
						value: destr(value$1)
					}));
				}));
			});
		},
		getItemRaw(key, opts = {}) {
			key = normalizeKey(key);
			const { relativeKey, driver } = getMount(key);
			if (driver.getItemRaw) return asyncCall(driver.getItemRaw, relativeKey, opts);
			return asyncCall(driver.getItem, relativeKey, opts).then((value$1) => deserializeRaw(value$1));
		},
		async setItem(key, value$1, opts = {}) {
			if (value$1 === void 0) return storage.removeItem(key);
			key = normalizeKey(key);
			const { relativeKey, driver } = getMount(key);
			if (!driver.setItem) return;
			await asyncCall(driver.setItem, relativeKey, stringify(value$1), opts);
			if (!driver.watch) onChange("update", key);
		},
		async setItems(items, commonOptions) {
			await runBatch(items, commonOptions, async (batch) => {
				if (batch.driver.setItems) return asyncCall(batch.driver.setItems, batch.items.map((item) => ({
					key: item.relativeKey,
					value: stringify(item.value),
					options: item.options
				})), commonOptions);
				if (!batch.driver.setItem) return;
				await Promise.all(batch.items.map((item) => {
					return asyncCall(batch.driver.setItem, item.relativeKey, stringify(item.value), item.options);
				}));
			});
		},
		async setItemRaw(key, value$1, opts = {}) {
			if (value$1 === void 0) return storage.removeItem(key, opts);
			key = normalizeKey(key);
			const { relativeKey, driver } = getMount(key);
			if (driver.setItemRaw) await asyncCall(driver.setItemRaw, relativeKey, value$1, opts);
			else if (driver.setItem) await asyncCall(driver.setItem, relativeKey, serializeRaw(value$1), opts);
			else return;
			if (!driver.watch) onChange("update", key);
		},
		async removeItem(key, opts = {}) {
			if (typeof opts === "boolean") opts = { removeMeta: opts };
			key = normalizeKey(key);
			const { relativeKey, driver } = getMount(key);
			if (!driver.removeItem) return;
			await asyncCall(driver.removeItem, relativeKey, opts);
			if (opts.removeMeta || opts.removeMata) await asyncCall(driver.removeItem, relativeKey + "$", opts);
			if (!driver.watch) onChange("remove", key);
		},
		async getMeta(key, opts = {}) {
			if (typeof opts === "boolean") opts = { nativeOnly: opts };
			key = normalizeKey(key);
			const { relativeKey, driver } = getMount(key);
			const meta = /* @__PURE__ */ Object.create(null);
			if (driver.getMeta) Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
			if (!opts.nativeOnly) {
				const value$1 = await asyncCall(driver.getItem, relativeKey + "$", opts).then((value_) => destr(value_));
				if (value$1 && typeof value$1 === "object") {
					if (typeof value$1.atime === "string") value$1.atime = new Date(value$1.atime);
					if (typeof value$1.mtime === "string") value$1.mtime = new Date(value$1.mtime);
					Object.assign(meta, value$1);
				}
			}
			return meta;
		},
		setMeta(key, value$1, opts = {}) {
			return this.setItem(key + "$", value$1, opts);
		},
		removeMeta(key, opts = {}) {
			return this.removeItem(key + "$", opts);
		},
		async getKeys(base, opts = {}) {
			base = normalizeBaseKey(base);
			const mounts = getMounts(base, true);
			let maskedMounts = [];
			const allKeys = [];
			let allMountsSupportMaxDepth = true;
			for (const mount of mounts) {
				if (!mount.driver.flags?.maxDepth) allMountsSupportMaxDepth = false;
				const rawKeys = await asyncCall(mount.driver.getKeys, mount.relativeBase, opts);
				for (const key of rawKeys) {
					const fullKey = mount.mountpoint + normalizeKey(key);
					if (!maskedMounts.some((p$1) => fullKey.startsWith(p$1))) allKeys.push(fullKey);
				}
				maskedMounts = [mount.mountpoint, ...maskedMounts.filter((p$1) => !p$1.startsWith(mount.mountpoint))];
			}
			const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;
			return allKeys.filter((key) => (!shouldFilterByDepth || filterKeyByDepth(key, opts.maxDepth)) && filterKeyByBase(key, base));
		},
		async clear(base, opts = {}) {
			base = normalizeBaseKey(base);
			await Promise.all(getMounts(base, false).map(async (m$1) => {
				if (m$1.driver.clear) return asyncCall(m$1.driver.clear, m$1.relativeBase, opts);
				if (m$1.driver.removeItem) {
					const keys = await m$1.driver.getKeys(m$1.relativeBase || "", opts);
					return Promise.all(keys.map((key) => m$1.driver.removeItem(key, opts)));
				}
			}));
		},
		async dispose() {
			await Promise.all(Object.values(context.mounts).map((driver) => dispose(driver)));
		},
		async watch(callback) {
			await startWatch();
			context.watchListeners.push(callback);
			return async () => {
				context.watchListeners = context.watchListeners.filter((listener) => listener !== callback);
				if (context.watchListeners.length === 0) await stopWatch();
			};
		},
		async unwatch() {
			context.watchListeners = [];
			await stopWatch();
		},
		mount(base, driver) {
			base = normalizeBaseKey(base);
			if (base && context.mounts[base]) throw new Error(`already mounted at ${base}`);
			if (base) {
				context.mountpoints.push(base);
				context.mountpoints.sort((a, b$2) => b$2.length - a.length);
			}
			context.mounts[base] = driver;
			if (context.watching) Promise.resolve(watch$2(driver, onChange, base)).then((unwatcher) => {
				context.unwatch[base] = unwatcher;
			}).catch(console.error);
			return storage;
		},
		async unmount(base, _dispose = true) {
			base = normalizeBaseKey(base);
			if (!base || !context.mounts[base]) return;
			if (context.watching && base in context.unwatch) {
				context.unwatch[base]?.();
				delete context.unwatch[base];
			}
			if (_dispose) await dispose(context.mounts[base]);
			context.mountpoints = context.mountpoints.filter((key) => key !== base);
			delete context.mounts[base];
		},
		getMount(key = "") {
			key = normalizeKey(key) + ":";
			const m$1 = getMount(key);
			return {
				driver: m$1.driver,
				base: m$1.base
			};
		},
		getMounts(base = "", opts = {}) {
			base = normalizeKey(base);
			const mounts = getMounts(base, opts.parents);
			return mounts.map((m$1) => ({
				driver: m$1.driver,
				base: m$1.mountpoint
			}));
		},
		keys: (base, opts = {}) => storage.getKeys(base, opts),
		get: (key, opts = {}) => storage.getItem(key, opts),
		set: (key, value$1, opts = {}) => storage.setItem(key, value$1, opts),
		has: (key, opts = {}) => storage.hasItem(key, opts),
		del: (key, opts = {}) => storage.removeItem(key, opts),
		remove: (key, opts = {}) => storage.removeItem(key, opts)
	};
	return storage;
}
function watch$2(driver, onChange, base) {
	return driver.watch ? driver.watch((event, key) => onChange(event, base + key)) : () => {};
}
async function dispose(driver) {
	if (typeof driver.dispose === "function") await asyncCall(driver.dispose);
}

//#endregion
//#region node_modules/.pnpm/readdirp@4.1.2/node_modules/readdirp/esm/index.js
const EntryTypes = {
	FILE_TYPE: "files",
	DIR_TYPE: "directories",
	FILE_DIR_TYPE: "files_directories",
	EVERYTHING_TYPE: "all"
};
const defaultOptions = {
	root: ".",
	fileFilter: (_entryInfo) => true,
	directoryFilter: (_entryInfo) => true,
	type: EntryTypes.FILE_TYPE,
	lstat: false,
	depth: 2147483648,
	alwaysStat: false,
	highWaterMark: 4096
};
Object.freeze(defaultOptions);
const RECURSIVE_ERROR_CODE = "READDIRP_RECURSIVE_ERROR";
const NORMAL_FLOW_ERRORS = new Set([
	"ENOENT",
	"EPERM",
	"EACCES",
	"ELOOP",
	RECURSIVE_ERROR_CODE
]);
const ALL_TYPES = [
	EntryTypes.DIR_TYPE,
	EntryTypes.EVERYTHING_TYPE,
	EntryTypes.FILE_DIR_TYPE,
	EntryTypes.FILE_TYPE
];
const DIR_TYPES = new Set([
	EntryTypes.DIR_TYPE,
	EntryTypes.EVERYTHING_TYPE,
	EntryTypes.FILE_DIR_TYPE
]);
const FILE_TYPES = new Set([
	EntryTypes.EVERYTHING_TYPE,
	EntryTypes.FILE_DIR_TYPE,
	EntryTypes.FILE_TYPE
]);
const isNormalFlowError = (error$1) => NORMAL_FLOW_ERRORS.has(error$1.code);
const wantBigintFsStats = process.platform === "win32";
const emptyFn = (_entryInfo) => true;
const normalizeFilter = (filter) => {
	if (filter === void 0) return emptyFn;
	if (typeof filter === "function") return filter;
	if (typeof filter === "string") {
		const fl = filter.trim();
		return (entry) => entry.basename === fl;
	}
	if (Array.isArray(filter)) {
		const trItems = filter.map((item) => item.trim());
		return (entry) => trItems.some((f) => entry.basename === f);
	}
	return emptyFn;
};
/** Readable readdir stream, emitting new files as they're being listed. */
var ReaddirpStream = class extends Readable {
	constructor(options = {}) {
		super({
			objectMode: true,
			autoDestroy: true,
			highWaterMark: options.highWaterMark
		});
		const opts = {
			...defaultOptions,
			...options
		};
		const { root, type: type$1 } = opts;
		this._fileFilter = normalizeFilter(opts.fileFilter);
		this._directoryFilter = normalizeFilter(opts.directoryFilter);
		const statMethod = opts.lstat ? lstat : stat$1;
		if (wantBigintFsStats) this._stat = (path$9) => statMethod(path$9, { bigint: true });
		else this._stat = statMethod;
		this._maxDepth = opts.depth ?? defaultOptions.depth;
		this._wantsDir = type$1 ? DIR_TYPES.has(type$1) : false;
		this._wantsFile = type$1 ? FILE_TYPES.has(type$1) : false;
		this._wantsEverything = type$1 === EntryTypes.EVERYTHING_TYPE;
		this._root = resolve(root);
		this._isDirent = !opts.alwaysStat;
		this._statsProp = this._isDirent ? "dirent" : "stats";
		this._rdOptions = {
			encoding: "utf8",
			withFileTypes: this._isDirent
		};
		this.parents = [this._exploreDir(root, 1)];
		this.reading = false;
		this.parent = void 0;
	}
	async _read(batch) {
		if (this.reading) return;
		this.reading = true;
		try {
			while (!this.destroyed && batch > 0) {
				const par = this.parent;
				const fil = par && par.files;
				if (fil && fil.length > 0) {
					const { path: path$9, depth: depth$1 } = par;
					const slice$1 = fil.splice(0, batch).map((dirent) => this._formatEntry(dirent, path$9));
					const awaited = await Promise.all(slice$1);
					for (const entry of awaited) {
						if (!entry) continue;
						if (this.destroyed) return;
						const entryType = await this._getEntryType(entry);
						if (entryType === "directory" && this._directoryFilter(entry)) {
							if (depth$1 <= this._maxDepth) this.parents.push(this._exploreDir(entry.fullPath, depth$1 + 1));
							if (this._wantsDir) {
								this.push(entry);
								batch--;
							}
						} else if ((entryType === "file" || this._includeAsFile(entry)) && this._fileFilter(entry)) {
							if (this._wantsFile) {
								this.push(entry);
								batch--;
							}
						}
					}
				} else {
					const parent = this.parents.pop();
					if (!parent) {
						this.push(null);
						break;
					}
					this.parent = await parent;
					if (this.destroyed) return;
				}
			}
		} catch (error$1) {
			this.destroy(error$1);
		} finally {
			this.reading = false;
		}
	}
	async _exploreDir(path$9, depth$1) {
		let files;
		try {
			files = await readdir(path$9, this._rdOptions);
		} catch (error$1) {
			this._onError(error$1);
		}
		return {
			files,
			depth: depth$1,
			path: path$9
		};
	}
	async _formatEntry(dirent, path$9) {
		let entry;
		const basename$1 = this._isDirent ? dirent.name : dirent;
		try {
			const fullPath = resolve(join(path$9, basename$1));
			entry = {
				path: relative(this._root, fullPath),
				fullPath,
				basename: basename$1
			};
			entry[this._statsProp] = this._isDirent ? dirent : await this._stat(fullPath);
		} catch (err) {
			this._onError(err);
			return;
		}
		return entry;
	}
	_onError(err) {
		if (isNormalFlowError(err) && !this.destroyed) this.emit("warn", err);
		else this.destroy(err);
	}
	async _getEntryType(entry) {
		if (!entry && this._statsProp in entry) return "";
		const stats = entry[this._statsProp];
		if (stats.isFile()) return "file";
		if (stats.isDirectory()) return "directory";
		if (stats && stats.isSymbolicLink()) {
			const full = entry.fullPath;
			try {
				const entryRealPath = await realpath(full);
				const entryRealPathStats = await lstat(entryRealPath);
				if (entryRealPathStats.isFile()) return "file";
				if (entryRealPathStats.isDirectory()) {
					const len = entryRealPath.length;
					if (full.startsWith(entryRealPath) && full.substr(len, 1) === sep) {
						const recursiveError = new Error(`Circular symlink detected: "${full}" points to "${entryRealPath}"`);
						recursiveError.code = RECURSIVE_ERROR_CODE;
						return this._onError(recursiveError);
					}
					return "directory";
				}
			} catch (error$1) {
				this._onError(error$1);
				return "";
			}
		}
	}
	_includeAsFile(entry) {
		const stats = entry && entry[this._statsProp];
		return stats && this._wantsEverything && !stats.isDirectory();
	}
};
/**
* Streaming version: Reads all files and directories in given root recursively.
* Consumes ~constant small amount of RAM.
* @param root Root directory
* @param options Options to specify root (start directory), filters and recursion depth
*/
function readdirp(root, options = {}) {
	let type$1 = options.entryType || options.type;
	if (type$1 === "both") type$1 = EntryTypes.FILE_DIR_TYPE;
	if (type$1) options.type = type$1;
	if (!root) throw new Error("readdirp: root argument is required. Usage: readdirp(root, options)");
	else if (typeof root !== "string") throw new TypeError("readdirp: root argument must be a string. Usage: readdirp(root, options)");
	else if (type$1 && !ALL_TYPES.includes(type$1)) throw new Error(`readdirp: Invalid type passed. Use one of ${ALL_TYPES.join(", ")}`);
	options.root = root;
	return new ReaddirpStream(options);
}

//#endregion
//#region node_modules/.pnpm/chokidar@4.0.3/node_modules/chokidar/esm/handler.js
const STR_DATA = "data";
const STR_END = "end";
const STR_CLOSE = "close";
const EMPTY_FN = () => {};
const pl = process.platform;
const isWindows$1 = pl === "win32";
const isMacos = pl === "darwin";
const isLinux = pl === "linux";
const isFreeBSD = pl === "freebsd";
const isIBMi = type() === "OS400";
const EVENTS = {
	ALL: "all",
	READY: "ready",
	ADD: "add",
	CHANGE: "change",
	ADD_DIR: "addDir",
	UNLINK: "unlink",
	UNLINK_DIR: "unlinkDir",
	RAW: "raw",
	ERROR: "error"
};
const EV = EVENTS;
const THROTTLE_MODE_WATCH = "watch";
const statMethods = {
	lstat: lstat$1,
	stat: stat$2
};
const KEY_LISTENERS = "listeners";
const KEY_ERR = "errHandlers";
const KEY_RAW = "rawEmitters";
const HANDLER_KEYS = [
	KEY_LISTENERS,
	KEY_ERR,
	KEY_RAW
];
const binaryExtensions = new Set([
	"3dm",
	"3ds",
	"3g2",
	"3gp",
	"7z",
	"a",
	"aac",
	"adp",
	"afdesign",
	"afphoto",
	"afpub",
	"ai",
	"aif",
	"aiff",
	"alz",
	"ape",
	"apk",
	"appimage",
	"ar",
	"arj",
	"asf",
	"au",
	"avi",
	"bak",
	"baml",
	"bh",
	"bin",
	"bk",
	"bmp",
	"btif",
	"bz2",
	"bzip2",
	"cab",
	"caf",
	"cgm",
	"class",
	"cmx",
	"cpio",
	"cr2",
	"cur",
	"dat",
	"dcm",
	"deb",
	"dex",
	"djvu",
	"dll",
	"dmg",
	"dng",
	"doc",
	"docm",
	"docx",
	"dot",
	"dotm",
	"dra",
	"DS_Store",
	"dsk",
	"dts",
	"dtshd",
	"dvb",
	"dwg",
	"dxf",
	"ecelp4800",
	"ecelp7470",
	"ecelp9600",
	"egg",
	"eol",
	"eot",
	"epub",
	"exe",
	"f4v",
	"fbs",
	"fh",
	"fla",
	"flac",
	"flatpak",
	"fli",
	"flv",
	"fpx",
	"fst",
	"fvt",
	"g3",
	"gh",
	"gif",
	"graffle",
	"gz",
	"gzip",
	"h261",
	"h263",
	"h264",
	"icns",
	"ico",
	"ief",
	"img",
	"ipa",
	"iso",
	"jar",
	"jpeg",
	"jpg",
	"jpgv",
	"jpm",
	"jxr",
	"key",
	"ktx",
	"lha",
	"lib",
	"lvp",
	"lz",
	"lzh",
	"lzma",
	"lzo",
	"m3u",
	"m4a",
	"m4v",
	"mar",
	"mdi",
	"mht",
	"mid",
	"midi",
	"mj2",
	"mka",
	"mkv",
	"mmr",
	"mng",
	"mobi",
	"mov",
	"movie",
	"mp3",
	"mp4",
	"mp4a",
	"mpeg",
	"mpg",
	"mpga",
	"mxu",
	"nef",
	"npx",
	"numbers",
	"nupkg",
	"o",
	"odp",
	"ods",
	"odt",
	"oga",
	"ogg",
	"ogv",
	"otf",
	"ott",
	"pages",
	"pbm",
	"pcx",
	"pdb",
	"pdf",
	"pea",
	"pgm",
	"pic",
	"png",
	"pnm",
	"pot",
	"potm",
	"potx",
	"ppa",
	"ppam",
	"ppm",
	"pps",
	"ppsm",
	"ppsx",
	"ppt",
	"pptm",
	"pptx",
	"psd",
	"pya",
	"pyc",
	"pyo",
	"pyv",
	"qt",
	"rar",
	"ras",
	"raw",
	"resources",
	"rgb",
	"rip",
	"rlc",
	"rmf",
	"rmvb",
	"rpm",
	"rtf",
	"rz",
	"s3m",
	"s7z",
	"scpt",
	"sgi",
	"shar",
	"snap",
	"sil",
	"sketch",
	"slk",
	"smv",
	"snk",
	"so",
	"stl",
	"suo",
	"sub",
	"swf",
	"tar",
	"tbz",
	"tbz2",
	"tga",
	"tgz",
	"thmx",
	"tif",
	"tiff",
	"tlz",
	"ttc",
	"ttf",
	"txz",
	"udf",
	"uvh",
	"uvi",
	"uvm",
	"uvp",
	"uvs",
	"uvu",
	"viv",
	"vob",
	"war",
	"wav",
	"wax",
	"wbmp",
	"wdp",
	"weba",
	"webm",
	"webp",
	"whl",
	"wim",
	"wm",
	"wma",
	"wmv",
	"wmx",
	"woff",
	"woff2",
	"wrm",
	"wvx",
	"xbm",
	"xif",
	"xla",
	"xlam",
	"xls",
	"xlsb",
	"xlsm",
	"xlsx",
	"xlt",
	"xltm",
	"xltx",
	"xm",
	"xmind",
	"xpi",
	"xpm",
	"xwd",
	"xz",
	"z",
	"zip",
	"zipx"
]);
const isBinaryPath = (filePath) => binaryExtensions.has(sysPath$1.extname(filePath).slice(1).toLowerCase());
const foreach = (val, fn) => {
	if (val instanceof Set) val.forEach(fn);
	else fn(val);
};
const addAndConvert = (main, prop, item) => {
	let container = main[prop];
	if (!(container instanceof Set)) main[prop] = container = new Set([container]);
	container.add(item);
};
const clearItem = (cont) => (key) => {
	const set = cont[key];
	if (set instanceof Set) set.clear();
	else delete cont[key];
};
const delFromSet = (main, prop, item) => {
	const container = main[prop];
	if (container instanceof Set) container.delete(item);
	else if (container === item) delete main[prop];
};
const isEmptySet = (val) => val instanceof Set ? val.size === 0 : !val;
const FsWatchInstances = new Map();
/**
* Instantiates the fs_watch interface
* @param path to be watched
* @param options to be passed to fs_watch
* @param listener main event handler
* @param errHandler emits info about errors
* @param emitRaw emits raw event data
* @returns {NativeFsWatcher}
*/
function createFsWatchInstance(path$9, options, listener, errHandler, emitRaw) {
	const handleEvent = (rawEvent, evPath) => {
		listener(path$9);
		emitRaw(rawEvent, evPath, { watchedPath: path$9 });
		if (evPath && path$9 !== evPath) fsWatchBroadcast(sysPath$1.resolve(path$9, evPath), KEY_LISTENERS, sysPath$1.join(path$9, evPath));
	};
	try {
		return watch(path$9, { persistent: options.persistent }, handleEvent);
	} catch (error$1) {
		errHandler(error$1);
		return void 0;
	}
}
/**
* Helper for passing fs_watch event data to a collection of listeners
* @param fullPath absolute path bound to fs_watch instance
*/
const fsWatchBroadcast = (fullPath, listenerType, val1, val2, val3) => {
	const cont = FsWatchInstances.get(fullPath);
	if (!cont) return;
	foreach(cont[listenerType], (listener) => {
		listener(val1, val2, val3);
	});
};
/**
* Instantiates the fs_watch interface or binds listeners
* to an existing one covering the same file system entry
* @param path
* @param fullPath absolute path
* @param options to be passed to fs_watch
* @param handlers container for event listener functions
*/
const setFsWatchListener = (path$9, fullPath, options, handlers) => {
	const { listener, errHandler, rawEmitter } = handlers;
	let cont = FsWatchInstances.get(fullPath);
	let watcher;
	if (!options.persistent) {
		watcher = createFsWatchInstance(path$9, options, listener, errHandler, rawEmitter);
		if (!watcher) return;
		return watcher.close.bind(watcher);
	}
	if (cont) {
		addAndConvert(cont, KEY_LISTENERS, listener);
		addAndConvert(cont, KEY_ERR, errHandler);
		addAndConvert(cont, KEY_RAW, rawEmitter);
	} else {
		watcher = createFsWatchInstance(path$9, options, fsWatchBroadcast.bind(null, fullPath, KEY_LISTENERS), errHandler, fsWatchBroadcast.bind(null, fullPath, KEY_RAW));
		if (!watcher) return;
		watcher.on(EV.ERROR, async (error$1) => {
			const broadcastErr = fsWatchBroadcast.bind(null, fullPath, KEY_ERR);
			if (cont) cont.watcherUnusable = true;
			if (isWindows$1 && error$1.code === "EPERM") try {
				const fd = await open(path$9, "r");
				await fd.close();
				broadcastErr(error$1);
			} catch (err) {}
			else broadcastErr(error$1);
		});
		cont = {
			listeners: listener,
			errHandlers: errHandler,
			rawEmitters: rawEmitter,
			watcher
		};
		FsWatchInstances.set(fullPath, cont);
	}
	return () => {
		delFromSet(cont, KEY_LISTENERS, listener);
		delFromSet(cont, KEY_ERR, errHandler);
		delFromSet(cont, KEY_RAW, rawEmitter);
		if (isEmptySet(cont.listeners)) {
			cont.watcher.close();
			FsWatchInstances.delete(fullPath);
			HANDLER_KEYS.forEach(clearItem(cont));
			cont.watcher = void 0;
			Object.freeze(cont);
		}
	};
};
const FsWatchFileInstances = new Map();
/**
* Instantiates the fs_watchFile interface or binds listeners
* to an existing one covering the same file system entry
* @param path to be watched
* @param fullPath absolute path
* @param options options to be passed to fs_watchFile
* @param handlers container for event listener functions
* @returns closer
*/
const setFsWatchFileListener = (path$9, fullPath, options, handlers) => {
	const { listener, rawEmitter } = handlers;
	let cont = FsWatchFileInstances.get(fullPath);
	const copts = cont && cont.options;
	if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {
		unwatchFile(fullPath);
		cont = void 0;
	}
	if (cont) {
		addAndConvert(cont, KEY_LISTENERS, listener);
		addAndConvert(cont, KEY_RAW, rawEmitter);
	} else {
		cont = {
			listeners: listener,
			rawEmitters: rawEmitter,
			options,
			watcher: watchFile(fullPath, options, (curr, prev) => {
				foreach(cont.rawEmitters, (rawEmitter$1) => {
					rawEmitter$1(EV.CHANGE, fullPath, {
						curr,
						prev
					});
				});
				const currmtime = curr.mtimeMs;
				if (curr.size !== prev.size || currmtime > prev.mtimeMs || currmtime === 0) foreach(cont.listeners, (listener$1) => listener$1(path$9, curr));
			})
		};
		FsWatchFileInstances.set(fullPath, cont);
	}
	return () => {
		delFromSet(cont, KEY_LISTENERS, listener);
		delFromSet(cont, KEY_RAW, rawEmitter);
		if (isEmptySet(cont.listeners)) {
			FsWatchFileInstances.delete(fullPath);
			unwatchFile(fullPath);
			cont.options = cont.watcher = void 0;
			Object.freeze(cont);
		}
	};
};
/**
* @mixin
*/
var NodeFsHandler = class {
	constructor(fsW) {
		this.fsw = fsW;
		this._boundHandleError = (error$1) => fsW._handleError(error$1);
	}
	/**
	* Watch file for changes with fs_watchFile or fs_watch.
	* @param path to file or dir
	* @param listener on fs change
	* @returns closer for the watcher instance
	*/
	_watchWithNodeFs(path$9, listener) {
		const opts = this.fsw.options;
		const directory = sysPath$1.dirname(path$9);
		const basename$1 = sysPath$1.basename(path$9);
		const parent = this.fsw._getWatchedDir(directory);
		parent.add(basename$1);
		const absolutePath = sysPath$1.resolve(path$9);
		const options = { persistent: opts.persistent };
		if (!listener) listener = EMPTY_FN;
		let closer;
		if (opts.usePolling) {
			const enableBin = opts.interval !== opts.binaryInterval;
			options.interval = enableBin && isBinaryPath(basename$1) ? opts.binaryInterval : opts.interval;
			closer = setFsWatchFileListener(path$9, absolutePath, options, {
				listener,
				rawEmitter: this.fsw._emitRaw
			});
		} else closer = setFsWatchListener(path$9, absolutePath, options, {
			listener,
			errHandler: this._boundHandleError,
			rawEmitter: this.fsw._emitRaw
		});
		return closer;
	}
	/**
	* Watch a file and emit add event if warranted.
	* @returns closer for the watcher instance
	*/
	_handleFile(file, stats, initialAdd) {
		if (this.fsw.closed) return;
		const dirname$1 = sysPath$1.dirname(file);
		const basename$1 = sysPath$1.basename(file);
		const parent = this.fsw._getWatchedDir(dirname$1);
		let prevStats = stats;
		if (parent.has(basename$1)) return;
		const listener = async (path$9, newStats) => {
			if (!this.fsw._throttle(THROTTLE_MODE_WATCH, file, 5)) return;
			if (!newStats || newStats.mtimeMs === 0) try {
				const newStats$1 = await stat$2(file);
				if (this.fsw.closed) return;
				const at = newStats$1.atimeMs;
				const mt = newStats$1.mtimeMs;
				if (!at || at <= mt || mt !== prevStats.mtimeMs) this.fsw._emit(EV.CHANGE, file, newStats$1);
				if ((isMacos || isLinux || isFreeBSD) && prevStats.ino !== newStats$1.ino) {
					this.fsw._closeFile(path$9);
					prevStats = newStats$1;
					const closer$1 = this._watchWithNodeFs(file, listener);
					if (closer$1) this.fsw._addPathCloser(path$9, closer$1);
				} else prevStats = newStats$1;
			} catch (error$1) {
				this.fsw._remove(dirname$1, basename$1);
			}
			else if (parent.has(basename$1)) {
				const at = newStats.atimeMs;
				const mt = newStats.mtimeMs;
				if (!at || at <= mt || mt !== prevStats.mtimeMs) this.fsw._emit(EV.CHANGE, file, newStats);
				prevStats = newStats;
			}
		};
		const closer = this._watchWithNodeFs(file, listener);
		if (!(initialAdd && this.fsw.options.ignoreInitial) && this.fsw._isntIgnored(file)) {
			if (!this.fsw._throttle(EV.ADD, file, 0)) return;
			this.fsw._emit(EV.ADD, file, stats);
		}
		return closer;
	}
	/**
	* Handle symlinks encountered while reading a dir.
	* @param entry returned by readdirp
	* @param directory path of dir being read
	* @param path of this item
	* @param item basename of this item
	* @returns true if no more processing is needed for this entry.
	*/
	async _handleSymlink(entry, directory, path$9, item) {
		if (this.fsw.closed) return;
		const full = entry.fullPath;
		const dir = this.fsw._getWatchedDir(directory);
		if (!this.fsw.options.followSymlinks) {
			this.fsw._incrReadyCount();
			let linkPath;
			try {
				linkPath = await realpath$1(path$9);
			} catch (e$1) {
				this.fsw._emitReady();
				return true;
			}
			if (this.fsw.closed) return;
			if (dir.has(item)) {
				if (this.fsw._symlinkPaths.get(full) !== linkPath) {
					this.fsw._symlinkPaths.set(full, linkPath);
					this.fsw._emit(EV.CHANGE, path$9, entry.stats);
				}
			} else {
				dir.add(item);
				this.fsw._symlinkPaths.set(full, linkPath);
				this.fsw._emit(EV.ADD, path$9, entry.stats);
			}
			this.fsw._emitReady();
			return true;
		}
		if (this.fsw._symlinkPaths.has(full)) return true;
		this.fsw._symlinkPaths.set(full, true);
	}
	_handleRead(directory, initialAdd, wh, target, dir, depth$1, throttler) {
		directory = sysPath$1.join(directory, "");
		throttler = this.fsw._throttle("readdir", directory, 1e3);
		if (!throttler) return;
		const previous = this.fsw._getWatchedDir(wh.path);
		const current = new Set();
		let stream$2 = this.fsw._readdirp(directory, {
			fileFilter: (entry) => wh.filterPath(entry),
			directoryFilter: (entry) => wh.filterDir(entry)
		});
		if (!stream$2) return;
		stream$2.on(STR_DATA, async (entry) => {
			if (this.fsw.closed) {
				stream$2 = void 0;
				return;
			}
			const item = entry.path;
			let path$9 = sysPath$1.join(directory, item);
			current.add(item);
			if (entry.stats.isSymbolicLink() && await this._handleSymlink(entry, directory, path$9, item)) return;
			if (this.fsw.closed) {
				stream$2 = void 0;
				return;
			}
			if (item === target || !target && !previous.has(item)) {
				this.fsw._incrReadyCount();
				path$9 = sysPath$1.join(dir, sysPath$1.relative(dir, path$9));
				this._addToNodeFs(path$9, initialAdd, wh, depth$1 + 1);
			}
		}).on(EV.ERROR, this._boundHandleError);
		return new Promise((resolve$1, reject) => {
			if (!stream$2) return reject();
			stream$2.once(STR_END, () => {
				if (this.fsw.closed) {
					stream$2 = void 0;
					return;
				}
				const wasThrottled = throttler ? throttler.clear() : false;
				resolve$1(void 0);
				previous.getChildren().filter((item) => {
					return item !== directory && !current.has(item);
				}).forEach((item) => {
					this.fsw._remove(directory, item);
				});
				stream$2 = void 0;
				if (wasThrottled) this._handleRead(directory, false, wh, target, dir, depth$1, throttler);
			});
		});
	}
	/**
	* Read directory to add / remove files from `@watched` list and re-read it on change.
	* @param dir fs path
	* @param stats
	* @param initialAdd
	* @param depth relative to user-supplied path
	* @param target child path targeted for watch
	* @param wh Common watch helpers for this path
	* @param realpath
	* @returns closer for the watcher instance.
	*/
	async _handleDir(dir, stats, initialAdd, depth$1, target, wh, realpath$2) {
		const parentDir = this.fsw._getWatchedDir(sysPath$1.dirname(dir));
		const tracked = parentDir.has(sysPath$1.basename(dir));
		if (!(initialAdd && this.fsw.options.ignoreInitial) && !target && !tracked) this.fsw._emit(EV.ADD_DIR, dir, stats);
		parentDir.add(sysPath$1.basename(dir));
		this.fsw._getWatchedDir(dir);
		let throttler;
		let closer;
		const oDepth = this.fsw.options.depth;
		if ((oDepth == null || depth$1 <= oDepth) && !this.fsw._symlinkPaths.has(realpath$2)) {
			if (!target) {
				await this._handleRead(dir, initialAdd, wh, target, dir, depth$1, throttler);
				if (this.fsw.closed) return;
			}
			closer = this._watchWithNodeFs(dir, (dirPath, stats$1) => {
				if (stats$1 && stats$1.mtimeMs === 0) return;
				this._handleRead(dirPath, false, wh, target, dir, depth$1, throttler);
			});
		}
		return closer;
	}
	/**
	* Handle added file, directory, or glob pattern.
	* Delegates call to _handleFile / _handleDir after checks.
	* @param path to file or ir
	* @param initialAdd was the file added at watch instantiation?
	* @param priorWh depth relative to user-supplied path
	* @param depth Child path actually targeted for watch
	* @param target Child path actually targeted for watch
	*/
	async _addToNodeFs(path$9, initialAdd, priorWh, depth$1, target) {
		const ready = this.fsw._emitReady;
		if (this.fsw._isIgnored(path$9) || this.fsw.closed) {
			ready();
			return false;
		}
		const wh = this.fsw._getWatchHelpers(path$9);
		if (priorWh) {
			wh.filterPath = (entry) => priorWh.filterPath(entry);
			wh.filterDir = (entry) => priorWh.filterDir(entry);
		}
		try {
			const stats = await statMethods[wh.statMethod](wh.watchPath);
			if (this.fsw.closed) return;
			if (this.fsw._isIgnored(wh.watchPath, stats)) {
				ready();
				return false;
			}
			const follow = this.fsw.options.followSymlinks;
			let closer;
			if (stats.isDirectory()) {
				const absPath = sysPath$1.resolve(path$9);
				const targetPath = follow ? await realpath$1(path$9) : path$9;
				if (this.fsw.closed) return;
				closer = await this._handleDir(wh.watchPath, stats, initialAdd, depth$1, target, wh, targetPath);
				if (this.fsw.closed) return;
				if (absPath !== targetPath && targetPath !== void 0) this.fsw._symlinkPaths.set(absPath, targetPath);
			} else if (stats.isSymbolicLink()) {
				const targetPath = follow ? await realpath$1(path$9) : path$9;
				if (this.fsw.closed) return;
				const parent = sysPath$1.dirname(wh.watchPath);
				this.fsw._getWatchedDir(parent).add(wh.watchPath);
				this.fsw._emit(EV.ADD, wh.watchPath, stats);
				closer = await this._handleDir(parent, stats, initialAdd, depth$1, path$9, wh, targetPath);
				if (this.fsw.closed) return;
				if (targetPath !== void 0) this.fsw._symlinkPaths.set(sysPath$1.resolve(path$9), targetPath);
			} else closer = this._handleFile(wh.watchPath, stats, initialAdd);
			ready();
			if (closer) this.fsw._addPathCloser(path$9, closer);
			return false;
		} catch (error$1) {
			if (this.fsw._handleError(error$1)) {
				ready();
				return path$9;
			}
		}
	}
};

//#endregion
//#region node_modules/.pnpm/chokidar@4.0.3/node_modules/chokidar/esm/index.js
const SLASH = "/";
const SLASH_SLASH = "//";
const ONE_DOT = ".";
const TWO_DOTS = "..";
const STRING_TYPE = "string";
const BACK_SLASH_RE = /\\/g;
const DOUBLE_SLASH_RE = /\/\//;
const DOT_RE = /\..*\.(sw[px])$|~$|\.subl.*\.tmp/;
const REPLACER_RE = /^\.[/\\]/;
function arrify$1(item) {
	return Array.isArray(item) ? item : [item];
}
const isMatcherObject = (matcher) => typeof matcher === "object" && matcher !== null && !(matcher instanceof RegExp);
function createPattern$1(matcher) {
	if (typeof matcher === "function") return matcher;
	if (typeof matcher === "string") return (string) => matcher === string;
	if (matcher instanceof RegExp) return (string) => matcher.test(string);
	if (typeof matcher === "object" && matcher !== null) return (string) => {
		if (matcher.path === string) return true;
		if (matcher.recursive) {
			const relative$1 = sysPath.relative(matcher.path, string);
			if (!relative$1) return false;
			return !relative$1.startsWith("..") && !sysPath.isAbsolute(relative$1);
		}
		return false;
	};
	return () => false;
}
function normalizePath$1(path$9) {
	if (typeof path$9 !== "string") throw new Error("string expected");
	path$9 = sysPath.normalize(path$9);
	path$9 = path$9.replace(/\\/g, "/");
	let prepend = false;
	if (path$9.startsWith("//")) prepend = true;
	const DOUBLE_SLASH_RE$1 = /\/\//;
	while (path$9.match(DOUBLE_SLASH_RE$1)) path$9 = path$9.replace(DOUBLE_SLASH_RE$1, "/");
	if (prepend) path$9 = "/" + path$9;
	return path$9;
}
function matchPatterns$1(patterns, testString, stats) {
	const path$9 = normalizePath$1(testString);
	for (let index = 0; index < patterns.length; index++) {
		const pattern = patterns[index];
		if (pattern(path$9, stats)) return true;
	}
	return false;
}
function anymatch$2(matchers, testString) {
	if (matchers == null) throw new TypeError("anymatch: specify first argument");
	const matchersArray = arrify$1(matchers);
	const patterns = matchersArray.map((matcher) => createPattern$1(matcher));
	if (testString == null) return (testString$1, stats) => {
		return matchPatterns$1(patterns, testString$1, stats);
	};
	return matchPatterns$1(patterns, testString);
}
const unifyPaths = (paths_) => {
	const paths = arrify$1(paths_).flat();
	if (!paths.every((p$1) => typeof p$1 === STRING_TYPE)) throw new TypeError(`Non-string provided as watch path: ${paths}`);
	return paths.map(normalizePathToUnix);
};
const toUnix = (string) => {
	let str = string.replace(BACK_SLASH_RE, SLASH);
	let prepend = false;
	if (str.startsWith(SLASH_SLASH)) prepend = true;
	while (str.match(DOUBLE_SLASH_RE)) str = str.replace(DOUBLE_SLASH_RE, SLASH);
	if (prepend) str = SLASH + str;
	return str;
};
const normalizePathToUnix = (path$9) => toUnix(sysPath.normalize(toUnix(path$9)));
const normalizeIgnored = (cwd = "") => (path$9) => {
	if (typeof path$9 === "string") return normalizePathToUnix(sysPath.isAbsolute(path$9) ? path$9 : sysPath.join(cwd, path$9));
	else return path$9;
};
const getAbsolutePath = (path$9, cwd) => {
	if (sysPath.isAbsolute(path$9)) return path$9;
	return sysPath.join(cwd, path$9);
};
const EMPTY_SET = Object.freeze(new Set());
/**
* Directory entry.
*/
var DirEntry = class {
	constructor(dir, removeWatcher) {
		this.path = dir;
		this._removeWatcher = removeWatcher;
		this.items = new Set();
	}
	add(item) {
		const { items } = this;
		if (!items) return;
		if (item !== ONE_DOT && item !== TWO_DOTS) items.add(item);
	}
	async remove(item) {
		const { items } = this;
		if (!items) return;
		items.delete(item);
		if (items.size > 0) return;
		const dir = this.path;
		try {
			await readdir$1(dir);
		} catch (err) {
			if (this._removeWatcher) this._removeWatcher(sysPath.dirname(dir), sysPath.basename(dir));
		}
	}
	has(item) {
		const { items } = this;
		if (!items) return;
		return items.has(item);
	}
	getChildren() {
		const { items } = this;
		if (!items) return [];
		return [...items.values()];
	}
	dispose() {
		this.items.clear();
		this.path = "";
		this._removeWatcher = EMPTY_FN;
		this.items = EMPTY_SET;
		Object.freeze(this);
	}
};
const STAT_METHOD_F = "stat";
const STAT_METHOD_L = "lstat";
var WatchHelper = class {
	constructor(path$9, follow, fsw) {
		this.fsw = fsw;
		const watchPath = path$9;
		this.path = path$9 = path$9.replace(REPLACER_RE, "");
		this.watchPath = watchPath;
		this.fullWatchPath = sysPath.resolve(watchPath);
		this.dirParts = [];
		this.dirParts.forEach((parts) => {
			if (parts.length > 1) parts.pop();
		});
		this.followSymlinks = follow;
		this.statMethod = follow ? STAT_METHOD_F : STAT_METHOD_L;
	}
	entryPath(entry) {
		return sysPath.join(this.watchPath, sysPath.relative(this.watchPath, entry.fullPath));
	}
	filterPath(entry) {
		const { stats } = entry;
		if (stats && stats.isSymbolicLink()) return this.filterDir(entry);
		const resolvedPath = this.entryPath(entry);
		return this.fsw._isntIgnored(resolvedPath, stats) && this.fsw._hasReadPermissions(stats);
	}
	filterDir(entry) {
		return this.fsw._isntIgnored(this.entryPath(entry), entry.stats);
	}
};
/**
* Watches files & directories for changes. Emitted events:
* `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`
*
*     new FSWatcher()
*       .add(directories)
*       .on('add', path => log('File', path, 'was added'))
*/
var FSWatcher = class extends EventEmitter {
	constructor(_opts = {}) {
		super();
		this.closed = false;
		this._closers = new Map();
		this._ignoredPaths = new Set();
		this._throttled = new Map();
		this._streams = new Set();
		this._symlinkPaths = new Map();
		this._watched = new Map();
		this._pendingWrites = new Map();
		this._pendingUnlinks = new Map();
		this._readyCount = 0;
		this._readyEmitted = false;
		const awf = _opts.awaitWriteFinish;
		const DEF_AWF = {
			stabilityThreshold: 2e3,
			pollInterval: 100
		};
		const opts = {
			persistent: true,
			ignoreInitial: false,
			ignorePermissionErrors: false,
			interval: 100,
			binaryInterval: 300,
			followSymlinks: true,
			usePolling: false,
			atomic: true,
			..._opts,
			ignored: _opts.ignored ? arrify$1(_opts.ignored) : arrify$1([]),
			awaitWriteFinish: awf === true ? DEF_AWF : typeof awf === "object" ? {
				...DEF_AWF,
				...awf
			} : false
		};
		if (isIBMi) opts.usePolling = true;
		if (opts.atomic === void 0) opts.atomic = !opts.usePolling;
		const envPoll = process.env.CHOKIDAR_USEPOLLING;
		if (envPoll !== void 0) {
			const envLower = envPoll.toLowerCase();
			if (envLower === "false" || envLower === "0") opts.usePolling = false;
			else if (envLower === "true" || envLower === "1") opts.usePolling = true;
			else opts.usePolling = !!envLower;
		}
		const envInterval = process.env.CHOKIDAR_INTERVAL;
		if (envInterval) opts.interval = Number.parseInt(envInterval, 10);
		let readyCalls = 0;
		this._emitReady = () => {
			readyCalls++;
			if (readyCalls >= this._readyCount) {
				this._emitReady = EMPTY_FN;
				this._readyEmitted = true;
				process.nextTick(() => this.emit(EVENTS.READY));
			}
		};
		this._emitRaw = (...args) => this.emit(EVENTS.RAW, ...args);
		this._boundRemove = this._remove.bind(this);
		this.options = opts;
		this._nodeFsHandler = new NodeFsHandler(this);
		Object.freeze(opts);
	}
	_addIgnoredPath(matcher) {
		if (isMatcherObject(matcher)) {
			for (const ignored of this._ignoredPaths) if (isMatcherObject(ignored) && ignored.path === matcher.path && ignored.recursive === matcher.recursive) return;
		}
		this._ignoredPaths.add(matcher);
	}
	_removeIgnoredPath(matcher) {
		this._ignoredPaths.delete(matcher);
		if (typeof matcher === "string") {
			for (const ignored of this._ignoredPaths) if (isMatcherObject(ignored) && ignored.path === matcher) this._ignoredPaths.delete(ignored);
		}
	}
	/**
	* Adds paths to be watched on an existing FSWatcher instance.
	* @param paths_ file or file list. Other arguments are unused
	*/
	add(paths_, _origAdd, _internal) {
		const { cwd } = this.options;
		this.closed = false;
		this._closePromise = void 0;
		let paths = unifyPaths(paths_);
		if (cwd) paths = paths.map((path$9) => {
			const absPath = getAbsolutePath(path$9, cwd);
			return absPath;
		});
		paths.forEach((path$9) => {
			this._removeIgnoredPath(path$9);
		});
		this._userIgnored = void 0;
		if (!this._readyCount) this._readyCount = 0;
		this._readyCount += paths.length;
		Promise.all(paths.map(async (path$9) => {
			const res = await this._nodeFsHandler._addToNodeFs(path$9, !_internal, void 0, 0, _origAdd);
			if (res) this._emitReady();
			return res;
		})).then((results) => {
			if (this.closed) return;
			results.forEach((item) => {
				if (item) this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));
			});
		});
		return this;
	}
	/**
	* Close watchers or start ignoring events from specified paths.
	*/
	unwatch(paths_) {
		if (this.closed) return this;
		const paths = unifyPaths(paths_);
		const { cwd } = this.options;
		paths.forEach((path$9) => {
			if (!sysPath.isAbsolute(path$9) && !this._closers.has(path$9)) {
				if (cwd) path$9 = sysPath.join(cwd, path$9);
				path$9 = sysPath.resolve(path$9);
			}
			this._closePath(path$9);
			this._addIgnoredPath(path$9);
			if (this._watched.has(path$9)) this._addIgnoredPath({
				path: path$9,
				recursive: true
			});
			this._userIgnored = void 0;
		});
		return this;
	}
	/**
	* Close watchers and remove all listeners from watched paths.
	*/
	close() {
		if (this._closePromise) return this._closePromise;
		this.closed = true;
		this.removeAllListeners();
		const closers = [];
		this._closers.forEach((closerList) => closerList.forEach((closer) => {
			const promise = closer();
			if (promise instanceof Promise) closers.push(promise);
		}));
		this._streams.forEach((stream$2) => stream$2.destroy());
		this._userIgnored = void 0;
		this._readyCount = 0;
		this._readyEmitted = false;
		this._watched.forEach((dirent) => dirent.dispose());
		this._closers.clear();
		this._watched.clear();
		this._streams.clear();
		this._symlinkPaths.clear();
		this._throttled.clear();
		this._closePromise = closers.length ? Promise.all(closers).then(() => void 0) : Promise.resolve();
		return this._closePromise;
	}
	/**
	* Expose list of watched paths
	* @returns for chaining
	*/
	getWatched() {
		const watchList = {};
		this._watched.forEach((entry, dir) => {
			const key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;
			const index = key || ONE_DOT;
			watchList[index] = entry.getChildren().sort();
		});
		return watchList;
	}
	emitWithAll(event, args) {
		this.emit(event, ...args);
		if (event !== EVENTS.ERROR) this.emit(EVENTS.ALL, event, ...args);
	}
	/**
	* Normalize and emit events.
	* Calling _emit DOES NOT MEAN emit() would be called!
	* @param event Type of event
	* @param path File or directory path
	* @param stats arguments to be passed with event
	* @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag
	*/
	async _emit(event, path$9, stats) {
		if (this.closed) return;
		const opts = this.options;
		if (isWindows$1) path$9 = sysPath.normalize(path$9);
		if (opts.cwd) path$9 = sysPath.relative(opts.cwd, path$9);
		const args = [path$9];
		if (stats != null) args.push(stats);
		const awf = opts.awaitWriteFinish;
		let pw;
		if (awf && (pw = this._pendingWrites.get(path$9))) {
			pw.lastChange = new Date();
			return this;
		}
		if (opts.atomic) {
			if (event === EVENTS.UNLINK) {
				this._pendingUnlinks.set(path$9, [event, ...args]);
				setTimeout(() => {
					this._pendingUnlinks.forEach((entry, path$10) => {
						this.emit(...entry);
						this.emit(EVENTS.ALL, ...entry);
						this._pendingUnlinks.delete(path$10);
					});
				}, typeof opts.atomic === "number" ? opts.atomic : 100);
				return this;
			}
			if (event === EVENTS.ADD && this._pendingUnlinks.has(path$9)) {
				event = EVENTS.CHANGE;
				this._pendingUnlinks.delete(path$9);
			}
		}
		if (awf && (event === EVENTS.ADD || event === EVENTS.CHANGE) && this._readyEmitted) {
			const awfEmit = (err, stats$1) => {
				if (err) {
					event = EVENTS.ERROR;
					args[0] = err;
					this.emitWithAll(event, args);
				} else if (stats$1) {
					if (args.length > 1) args[1] = stats$1;
					else args.push(stats$1);
					this.emitWithAll(event, args);
				}
			};
			this._awaitWriteFinish(path$9, awf.stabilityThreshold, event, awfEmit);
			return this;
		}
		if (event === EVENTS.CHANGE) {
			const isThrottled = !this._throttle(EVENTS.CHANGE, path$9, 50);
			if (isThrottled) return this;
		}
		if (opts.alwaysStat && stats === void 0 && (event === EVENTS.ADD || event === EVENTS.ADD_DIR || event === EVENTS.CHANGE)) {
			const fullPath = opts.cwd ? sysPath.join(opts.cwd, path$9) : path$9;
			let stats$1;
			try {
				stats$1 = await stat$2(fullPath);
			} catch (err) {}
			if (!stats$1 || this.closed) return;
			args.push(stats$1);
		}
		this.emitWithAll(event, args);
		return this;
	}
	/**
	* Common handler for errors
	* @returns The error if defined, otherwise the value of the FSWatcher instance's `closed` flag
	*/
	_handleError(error$1) {
		const code = error$1 && error$1.code;
		if (error$1 && code !== "ENOENT" && code !== "ENOTDIR" && (!this.options.ignorePermissionErrors || code !== "EPERM" && code !== "EACCES")) this.emit(EVENTS.ERROR, error$1);
		return error$1 || this.closed;
	}
	/**
	* Helper utility for throttling
	* @param actionType type being throttled
	* @param path being acted upon
	* @param timeout duration of time to suppress duplicate actions
	* @returns tracking object or false if action should be suppressed
	*/
	_throttle(actionType, path$9, timeout) {
		if (!this._throttled.has(actionType)) this._throttled.set(actionType, new Map());
		const action = this._throttled.get(actionType);
		if (!action) throw new Error("invalid throttle");
		const actionPath = action.get(path$9);
		if (actionPath) {
			actionPath.count++;
			return false;
		}
		let timeoutObject;
		const clear = () => {
			const item = action.get(path$9);
			const count = item ? item.count : 0;
			action.delete(path$9);
			clearTimeout(timeoutObject);
			if (item) clearTimeout(item.timeoutObject);
			return count;
		};
		timeoutObject = setTimeout(clear, timeout);
		const thr = {
			timeoutObject,
			clear,
			count: 0
		};
		action.set(path$9, thr);
		return thr;
	}
	_incrReadyCount() {
		return this._readyCount++;
	}
	/**
	* Awaits write operation to finish.
	* Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.
	* @param path being acted upon
	* @param threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished
	* @param event
	* @param awfEmit Callback to be called when ready for event to be emitted.
	*/
	_awaitWriteFinish(path$9, threshold, event, awfEmit) {
		const awf = this.options.awaitWriteFinish;
		if (typeof awf !== "object") return;
		const pollInterval = awf.pollInterval;
		let timeoutHandler;
		let fullPath = path$9;
		if (this.options.cwd && !sysPath.isAbsolute(path$9)) fullPath = sysPath.join(this.options.cwd, path$9);
		const now = new Date();
		const writes = this._pendingWrites;
		function awaitWriteFinishFn(prevStat) {
			stat(fullPath, (err, curStat) => {
				if (err || !writes.has(path$9)) {
					if (err && err.code !== "ENOENT") awfEmit(err);
					return;
				}
				const now$1 = Number(new Date());
				if (prevStat && curStat.size !== prevStat.size) writes.get(path$9).lastChange = now$1;
				const pw = writes.get(path$9);
				const df = now$1 - pw.lastChange;
				if (df >= threshold) {
					writes.delete(path$9);
					awfEmit(void 0, curStat);
				} else timeoutHandler = setTimeout(awaitWriteFinishFn, pollInterval, curStat);
			});
		}
		if (!writes.has(path$9)) {
			writes.set(path$9, {
				lastChange: now,
				cancelWait: () => {
					writes.delete(path$9);
					clearTimeout(timeoutHandler);
					return event;
				}
			});
			timeoutHandler = setTimeout(awaitWriteFinishFn, pollInterval);
		}
	}
	/**
	* Determines whether user has asked to ignore this path.
	*/
	_isIgnored(path$9, stats) {
		if (this.options.atomic && DOT_RE.test(path$9)) return true;
		if (!this._userIgnored) {
			const { cwd } = this.options;
			const ign = this.options.ignored;
			const ignored = (ign || []).map(normalizeIgnored(cwd));
			const ignoredPaths = [...this._ignoredPaths];
			const list = [...ignoredPaths.map(normalizeIgnored(cwd)), ...ignored];
			this._userIgnored = anymatch$2(list, void 0);
		}
		return this._userIgnored(path$9, stats);
	}
	_isntIgnored(path$9, stat$3) {
		return !this._isIgnored(path$9, stat$3);
	}
	/**
	* Provides a set of common helpers and properties relating to symlink handling.
	* @param path file or directory pattern being watched
	*/
	_getWatchHelpers(path$9) {
		return new WatchHelper(path$9, this.options.followSymlinks, this);
	}
	/**
	* Provides directory tracking objects
	* @param directory path of the directory
	*/
	_getWatchedDir(directory) {
		const dir = sysPath.resolve(directory);
		if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));
		return this._watched.get(dir);
	}
	/**
	* Check for read permissions: https://stackoverflow.com/a/11781404/1358405
	*/
	_hasReadPermissions(stats) {
		if (this.options.ignorePermissionErrors) return true;
		return Boolean(Number(stats.mode) & 256);
	}
	/**
	* Handles emitting unlink events for
	* files and directories, and via recursion, for
	* files and directories within directories that are unlinked
	* @param directory within which the following item is located
	* @param item      base path of item/directory
	*/
	_remove(directory, item, isDirectory$1) {
		const path$9 = sysPath.join(directory, item);
		const fullPath = sysPath.resolve(path$9);
		isDirectory$1 = isDirectory$1 != null ? isDirectory$1 : this._watched.has(path$9) || this._watched.has(fullPath);
		if (!this._throttle("remove", path$9, 100)) return;
		if (!isDirectory$1 && this._watched.size === 1) this.add(directory, item, true);
		const wp = this._getWatchedDir(path$9);
		const nestedDirectoryChildren = wp.getChildren();
		nestedDirectoryChildren.forEach((nested) => this._remove(path$9, nested));
		const parent = this._getWatchedDir(directory);
		const wasTracked = parent.has(item);
		parent.remove(item);
		if (this._symlinkPaths.has(fullPath)) this._symlinkPaths.delete(fullPath);
		let relPath = path$9;
		if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path$9);
		if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {
			const event = this._pendingWrites.get(relPath).cancelWait();
			if (event === EVENTS.ADD) return;
		}
		this._watched.delete(path$9);
		this._watched.delete(fullPath);
		const eventName = isDirectory$1 ? EVENTS.UNLINK_DIR : EVENTS.UNLINK;
		if (wasTracked && !this._isIgnored(path$9)) this._emit(eventName, path$9);
		this._closePath(path$9);
	}
	/**
	* Closes all watchers for a path
	*/
	_closePath(path$9) {
		this._closeFile(path$9);
		const dir = sysPath.dirname(path$9);
		this._getWatchedDir(dir).remove(sysPath.basename(path$9));
	}
	/**
	* Closes only file-specific watchers
	*/
	_closeFile(path$9) {
		const closers = this._closers.get(path$9);
		if (!closers) return;
		closers.forEach((closer) => closer());
		this._closers.delete(path$9);
	}
	_addPathCloser(path$9, closer) {
		if (!closer) return;
		let list = this._closers.get(path$9);
		if (!list) {
			list = [];
			this._closers.set(path$9, list);
		}
		list.push(closer);
	}
	_readdirp(root, opts) {
		if (this.closed) return;
		const options = {
			type: EVENTS.ALL,
			alwaysStat: true,
			lstat: true,
			...opts,
			depth: 0
		};
		let stream$2 = readdirp(root, options);
		this._streams.add(stream$2);
		stream$2.once(STR_CLOSE, () => {
			stream$2 = void 0;
		});
		stream$2.once(STR_END, () => {
			if (stream$2) {
				this._streams.delete(stream$2);
				stream$2 = void 0;
			}
		});
		return stream$2;
	}
};
/**
* Instantiates watcher with paths to be tracked.
* @param paths file / directory paths
* @param options opts, such as `atomic`, `awaitWriteFinish`, `ignored`, and others
* @returns an instance of FSWatcher for chaining.
* @example
* const watcher = watch('.').on('all', (event, path) => { console.log(event, path); });
* watch('.', { atomic: true, awaitWriteFinish: true, ignored: (f, stats) => stats?.isFile() && !f.endsWith('.js') })
*/
function watch$1(paths, options = {}) {
	const watcher = new FSWatcher(options);
	watcher.add(paths);
	return watcher;
}

//#endregion
//#region node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js
var require_constants = __commonJS({ "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js"(exports, module) {
	const path$3 = __require("path");
	const WIN_SLASH = "\\\\/";
	const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
	/**
	* Posix glob regex
	*/
	const DOT_LITERAL = "\\.";
	const PLUS_LITERAL = "\\+";
	const QMARK_LITERAL = "\\?";
	const SLASH_LITERAL = "\\/";
	const ONE_CHAR = "(?=.)";
	const QMARK = "[^/]";
	const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
	const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
	const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
	const NO_DOT = `(?!${DOT_LITERAL})`;
	const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
	const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
	const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
	const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
	const STAR = `${QMARK}*?`;
	const POSIX_CHARS = {
		DOT_LITERAL,
		PLUS_LITERAL,
		QMARK_LITERAL,
		SLASH_LITERAL,
		ONE_CHAR,
		QMARK,
		END_ANCHOR,
		DOTS_SLASH,
		NO_DOT,
		NO_DOTS,
		NO_DOT_SLASH,
		NO_DOTS_SLASH,
		QMARK_NO_DOT,
		STAR,
		START_ANCHOR
	};
	/**
	* Windows glob regex
	*/
	const WINDOWS_CHARS = {
		...POSIX_CHARS,
		SLASH_LITERAL: `[${WIN_SLASH}]`,
		QMARK: WIN_NO_SLASH,
		STAR: `${WIN_NO_SLASH}*?`,
		DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
		NO_DOT: `(?!${DOT_LITERAL})`,
		NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
		NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
		NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
		QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
		START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
		END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
	};
	/**
	* POSIX Bracket Regex
	*/
	const POSIX_REGEX_SOURCE$1 = {
		alnum: "a-zA-Z0-9",
		alpha: "a-zA-Z",
		ascii: "\\x00-\\x7F",
		blank: " \\t",
		cntrl: "\\x00-\\x1F\\x7F",
		digit: "0-9",
		graph: "\\x21-\\x7E",
		lower: "a-z",
		print: "\\x20-\\x7E ",
		punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
		space: " \\t\\r\\n\\v\\f",
		upper: "A-Z",
		word: "A-Za-z0-9_",
		xdigit: "A-Fa-f0-9"
	};
	module.exports = {
		MAX_LENGTH: 1024 * 64,
		POSIX_REGEX_SOURCE: POSIX_REGEX_SOURCE$1,
		REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
		REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
		REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
		REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
		REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
		REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
		REPLACEMENTS: {
			"***": "*",
			"**/**": "**",
			"**/**/**": "**"
		},
		CHAR_0: 48,
		CHAR_9: 57,
		CHAR_UPPERCASE_A: 65,
		CHAR_LOWERCASE_A: 97,
		CHAR_UPPERCASE_Z: 90,
		CHAR_LOWERCASE_Z: 122,
		CHAR_LEFT_PARENTHESES: 40,
		CHAR_RIGHT_PARENTHESES: 41,
		CHAR_ASTERISK: 42,
		CHAR_AMPERSAND: 38,
		CHAR_AT: 64,
		CHAR_BACKWARD_SLASH: 92,
		CHAR_CARRIAGE_RETURN: 13,
		CHAR_CIRCUMFLEX_ACCENT: 94,
		CHAR_COLON: 58,
		CHAR_COMMA: 44,
		CHAR_DOT: 46,
		CHAR_DOUBLE_QUOTE: 34,
		CHAR_EQUAL: 61,
		CHAR_EXCLAMATION_MARK: 33,
		CHAR_FORM_FEED: 12,
		CHAR_FORWARD_SLASH: 47,
		CHAR_GRAVE_ACCENT: 96,
		CHAR_HASH: 35,
		CHAR_HYPHEN_MINUS: 45,
		CHAR_LEFT_ANGLE_BRACKET: 60,
		CHAR_LEFT_CURLY_BRACE: 123,
		CHAR_LEFT_SQUARE_BRACKET: 91,
		CHAR_LINE_FEED: 10,
		CHAR_NO_BREAK_SPACE: 160,
		CHAR_PERCENT: 37,
		CHAR_PLUS: 43,
		CHAR_QUESTION_MARK: 63,
		CHAR_RIGHT_ANGLE_BRACKET: 62,
		CHAR_RIGHT_CURLY_BRACE: 125,
		CHAR_RIGHT_SQUARE_BRACKET: 93,
		CHAR_SEMICOLON: 59,
		CHAR_SINGLE_QUOTE: 39,
		CHAR_SPACE: 32,
		CHAR_TAB: 9,
		CHAR_UNDERSCORE: 95,
		CHAR_VERTICAL_LINE: 124,
		CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
		SEP: path$3.sep,
		extglobChars(chars) {
			return {
				"!": {
					type: "negate",
					open: "(?:(?!(?:",
					close: `))${chars.STAR})`
				},
				"?": {
					type: "qmark",
					open: "(?:",
					close: ")?"
				},
				"+": {
					type: "plus",
					open: "(?:",
					close: ")+"
				},
				"*": {
					type: "star",
					open: "(?:",
					close: ")*"
				},
				"@": {
					type: "at",
					open: "(?:",
					close: ")"
				}
			};
		},
		globChars(win32$1) {
			return win32$1 === true ? WINDOWS_CHARS : POSIX_CHARS;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js
var require_utils = __commonJS({ "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js"(exports) {
	const path$2 = __require("path");
	const win32 = process.platform === "win32";
	const { REGEX_BACKSLASH, REGEX_REMOVE_BACKSLASH, REGEX_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_GLOBAL } = require_constants();
	exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
	exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
	exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
	exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
	exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
	exports.removeBackslashes = (str) => {
		return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
			return match === "\\" ? "" : match;
		});
	};
	exports.supportsLookbehinds = () => {
		const segs = process.version.slice(1).split(".").map(Number);
		if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) return true;
		return false;
	};
	exports.isWindows = (options) => {
		if (options && typeof options.windows === "boolean") return options.windows;
		return win32 === true || path$2.sep === "\\";
	};
	exports.escapeLast = (input, char, lastIdx) => {
		const idx = input.lastIndexOf(char, lastIdx);
		if (idx === -1) return input;
		if (input[idx - 1] === "\\") return exports.escapeLast(input, char, idx - 1);
		return `${input.slice(0, idx)}\\${input.slice(idx)}`;
	};
	exports.removePrefix = (input, state = {}) => {
		let output = input;
		if (output.startsWith("./")) {
			output = output.slice(2);
			state.prefix = "./";
		}
		return output;
	};
	exports.wrapOutput = (input, state = {}, options = {}) => {
		const prepend = options.contains ? "" : "^";
		const append = options.contains ? "" : "$";
		let output = `${prepend}(?:${input})${append}`;
		if (state.negated === true) output = `(?:^(?!${output}).*$)`;
		return output;
	};
} });

//#endregion
//#region node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js
var require_scan = __commonJS({ "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js"(exports, module) {
	const utils$2 = require_utils();
	const { CHAR_ASTERISK, CHAR_AT, CHAR_BACKWARD_SLASH, CHAR_COMMA, CHAR_DOT, CHAR_EXCLAMATION_MARK, CHAR_FORWARD_SLASH, CHAR_LEFT_CURLY_BRACE, CHAR_LEFT_PARENTHESES, CHAR_LEFT_SQUARE_BRACKET, CHAR_PLUS, CHAR_QUESTION_MARK, CHAR_RIGHT_CURLY_BRACE, CHAR_RIGHT_PARENTHESES, CHAR_RIGHT_SQUARE_BRACKET } = require_constants();
	const isPathSeparator = (code) => {
		return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
	};
	const depth = (token) => {
		if (token.isPrefix !== true) token.depth = token.isGlobstar ? Infinity : 1;
	};
	/**
	* Quickly scans a glob pattern and returns an object with a handful of
	* useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
	* `glob` (the actual pattern), `negated` (true if the path starts with `!` but not
	* with `!(`) and `negatedExtglob` (true if the path starts with `!(`).
	*
	* ```js
	* const pm = require('picomatch');
	* console.log(pm.scan('foo/bar/*.js'));
	* { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
	* ```
	* @param {String} `str`
	* @param {Object} `options`
	* @return {Object} Returns an object with tokens and regex source string.
	* @api public
	*/
	const scan$1 = (input, options) => {
		const opts = options || {};
		const length = input.length - 1;
		const scanToEnd = opts.parts === true || opts.scanToEnd === true;
		const slashes = [];
		const tokens = [];
		const parts = [];
		let str = input;
		let index = -1;
		let start = 0;
		let lastIndex = 0;
		let isBrace = false;
		let isBracket = false;
		let isGlob = false;
		let isExtglob = false;
		let isGlobstar = false;
		let braceEscaped = false;
		let backslashes = false;
		let negated = false;
		let negatedExtglob = false;
		let finished$1 = false;
		let braces = 0;
		let prev;
		let code;
		let token = {
			value: "",
			depth: 0,
			isGlob: false
		};
		const eos = () => index >= length;
		const peek = () => str.charCodeAt(index + 1);
		const advance = () => {
			prev = code;
			return str.charCodeAt(++index);
		};
		while (index < length) {
			code = advance();
			let next;
			if (code === CHAR_BACKWARD_SLASH) {
				backslashes = token.backslashes = true;
				code = advance();
				if (code === CHAR_LEFT_CURLY_BRACE) braceEscaped = true;
				continue;
			}
			if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
				braces++;
				while (eos() !== true && (code = advance())) {
					if (code === CHAR_BACKWARD_SLASH) {
						backslashes = token.backslashes = true;
						advance();
						continue;
					}
					if (code === CHAR_LEFT_CURLY_BRACE) {
						braces++;
						continue;
					}
					if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
						isBrace = token.isBrace = true;
						isGlob = token.isGlob = true;
						finished$1 = true;
						if (scanToEnd === true) continue;
						break;
					}
					if (braceEscaped !== true && code === CHAR_COMMA) {
						isBrace = token.isBrace = true;
						isGlob = token.isGlob = true;
						finished$1 = true;
						if (scanToEnd === true) continue;
						break;
					}
					if (code === CHAR_RIGHT_CURLY_BRACE) {
						braces--;
						if (braces === 0) {
							braceEscaped = false;
							isBrace = token.isBrace = true;
							finished$1 = true;
							break;
						}
					}
				}
				if (scanToEnd === true) continue;
				break;
			}
			if (code === CHAR_FORWARD_SLASH) {
				slashes.push(index);
				tokens.push(token);
				token = {
					value: "",
					depth: 0,
					isGlob: false
				};
				if (finished$1 === true) continue;
				if (prev === CHAR_DOT && index === start + 1) {
					start += 2;
					continue;
				}
				lastIndex = index + 1;
				continue;
			}
			if (opts.noext !== true) {
				const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
				if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
					isGlob = token.isGlob = true;
					isExtglob = token.isExtglob = true;
					finished$1 = true;
					if (code === CHAR_EXCLAMATION_MARK && index === start) negatedExtglob = true;
					if (scanToEnd === true) {
						while (eos() !== true && (code = advance())) {
							if (code === CHAR_BACKWARD_SLASH) {
								backslashes = token.backslashes = true;
								code = advance();
								continue;
							}
							if (code === CHAR_RIGHT_PARENTHESES) {
								isGlob = token.isGlob = true;
								finished$1 = true;
								break;
							}
						}
						continue;
					}
					break;
				}
			}
			if (code === CHAR_ASTERISK) {
				if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
				isGlob = token.isGlob = true;
				finished$1 = true;
				if (scanToEnd === true) continue;
				break;
			}
			if (code === CHAR_QUESTION_MARK) {
				isGlob = token.isGlob = true;
				finished$1 = true;
				if (scanToEnd === true) continue;
				break;
			}
			if (code === CHAR_LEFT_SQUARE_BRACKET) {
				while (eos() !== true && (next = advance())) {
					if (next === CHAR_BACKWARD_SLASH) {
						backslashes = token.backslashes = true;
						advance();
						continue;
					}
					if (next === CHAR_RIGHT_SQUARE_BRACKET) {
						isBracket = token.isBracket = true;
						isGlob = token.isGlob = true;
						finished$1 = true;
						break;
					}
				}
				if (scanToEnd === true) continue;
				break;
			}
			if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
				negated = token.negated = true;
				start++;
				continue;
			}
			if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
				isGlob = token.isGlob = true;
				if (scanToEnd === true) {
					while (eos() !== true && (code = advance())) {
						if (code === CHAR_LEFT_PARENTHESES) {
							backslashes = token.backslashes = true;
							code = advance();
							continue;
						}
						if (code === CHAR_RIGHT_PARENTHESES) {
							finished$1 = true;
							break;
						}
					}
					continue;
				}
				break;
			}
			if (isGlob === true) {
				finished$1 = true;
				if (scanToEnd === true) continue;
				break;
			}
		}
		if (opts.noext === true) {
			isExtglob = false;
			isGlob = false;
		}
		let base = str;
		let prefix = "";
		let glob = "";
		if (start > 0) {
			prefix = str.slice(0, start);
			str = str.slice(start);
			lastIndex -= start;
		}
		if (base && isGlob === true && lastIndex > 0) {
			base = str.slice(0, lastIndex);
			glob = str.slice(lastIndex);
		} else if (isGlob === true) {
			base = "";
			glob = str;
		} else base = str;
		if (base && base !== "" && base !== "/" && base !== str) {
			if (isPathSeparator(base.charCodeAt(base.length - 1))) base = base.slice(0, -1);
		}
		if (opts.unescape === true) {
			if (glob) glob = utils$2.removeBackslashes(glob);
			if (base && backslashes === true) base = utils$2.removeBackslashes(base);
		}
		const state = {
			prefix,
			input,
			start,
			base,
			glob,
			isBrace,
			isBracket,
			isGlob,
			isExtglob,
			isGlobstar,
			negated,
			negatedExtglob
		};
		if (opts.tokens === true) {
			state.maxDepth = 0;
			if (!isPathSeparator(code)) tokens.push(token);
			state.tokens = tokens;
		}
		if (opts.parts === true || opts.tokens === true) {
			let prevIndex;
			for (let idx = 0; idx < slashes.length; idx++) {
				const n = prevIndex ? prevIndex + 1 : start;
				const i = slashes[idx];
				const value$1 = input.slice(n, i);
				if (opts.tokens) {
					if (idx === 0 && start !== 0) {
						tokens[idx].isPrefix = true;
						tokens[idx].value = prefix;
					} else tokens[idx].value = value$1;
					depth(tokens[idx]);
					state.maxDepth += tokens[idx].depth;
				}
				if (idx !== 0 || value$1 !== "") parts.push(value$1);
				prevIndex = i;
			}
			if (prevIndex && prevIndex + 1 < input.length) {
				const value$1 = input.slice(prevIndex + 1);
				parts.push(value$1);
				if (opts.tokens) {
					tokens[tokens.length - 1].value = value$1;
					depth(tokens[tokens.length - 1]);
					state.maxDepth += tokens[tokens.length - 1].depth;
				}
			}
			state.slashes = slashes;
			state.parts = parts;
		}
		return state;
	};
	module.exports = scan$1;
} });

//#endregion
//#region node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js
var require_parse = __commonJS({ "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js"(exports, module) {
	const constants$1 = require_constants();
	const utils$1 = require_utils();
	/**
	* Constants
	*/
	const { MAX_LENGTH, POSIX_REGEX_SOURCE, REGEX_NON_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_BACKREF, REPLACEMENTS } = constants$1;
	/**
	* Helpers
	*/
	const expandRange = (args, options) => {
		if (typeof options.expandRange === "function") return options.expandRange(...args, options);
		args.sort();
		const value$1 = `[${args.join("-")}]`;
		try {
			new RegExp(value$1);
		} catch (ex) {
			return args.map((v$1) => utils$1.escapeRegex(v$1)).join("..");
		}
		return value$1;
	};
	/**
	* Create the message for a syntax error
	*/
	const syntaxError = (type$1, char) => {
		return `Missing ${type$1}: "${char}" - use "\\\\${char}" to match literal characters`;
	};
	/**
	* Parse the given input string.
	* @param {String} input
	* @param {Object} options
	* @return {Object}
	*/
	const parse$3 = (input, options) => {
		if (typeof input !== "string") throw new TypeError("Expected a string");
		input = REPLACEMENTS[input] || input;
		const opts = { ...options };
		const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
		let len = input.length;
		if (len > max) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
		const bos = {
			type: "bos",
			value: "",
			output: opts.prepend || ""
		};
		const tokens = [bos];
		const capture = opts.capture ? "" : "?:";
		const win32$1 = utils$1.isWindows(options);
		const PLATFORM_CHARS = constants$1.globChars(win32$1);
		const EXTGLOB_CHARS = constants$1.extglobChars(PLATFORM_CHARS);
		const { DOT_LITERAL: DOT_LITERAL$1, PLUS_LITERAL: PLUS_LITERAL$1, SLASH_LITERAL: SLASH_LITERAL$1, ONE_CHAR: ONE_CHAR$1, DOTS_SLASH: DOTS_SLASH$1, NO_DOT: NO_DOT$1, NO_DOT_SLASH: NO_DOT_SLASH$1, NO_DOTS_SLASH: NO_DOTS_SLASH$1, QMARK: QMARK$1, QMARK_NO_DOT: QMARK_NO_DOT$1, STAR: STAR$1, START_ANCHOR: START_ANCHOR$1 } = PLATFORM_CHARS;
		const globstar = (opts$1) => {
			return `(${capture}(?:(?!${START_ANCHOR$1}${opts$1.dot ? DOTS_SLASH$1 : DOT_LITERAL$1}).)*?)`;
		};
		const nodot = opts.dot ? "" : NO_DOT$1;
		const qmarkNoDot = opts.dot ? QMARK$1 : QMARK_NO_DOT$1;
		let star = opts.bash === true ? globstar(opts) : STAR$1;
		if (opts.capture) star = `(${star})`;
		if (typeof opts.noext === "boolean") opts.noextglob = opts.noext;
		const state = {
			input,
			index: -1,
			start: 0,
			dot: opts.dot === true,
			consumed: "",
			output: "",
			prefix: "",
			backtrack: false,
			negated: false,
			brackets: 0,
			braces: 0,
			parens: 0,
			quotes: 0,
			globstar: false,
			tokens
		};
		input = utils$1.removePrefix(input, state);
		len = input.length;
		const extglobs = [];
		const braces = [];
		const stack = [];
		let prev = bos;
		let value$1;
		/**
		* Tokenizing helpers
		*/
		const eos = () => state.index === len - 1;
		const peek = state.peek = (n = 1) => input[state.index + n];
		const advance = state.advance = () => input[++state.index] || "";
		const remaining = () => input.slice(state.index + 1);
		const consume$1 = (value$2 = "", num = 0) => {
			state.consumed += value$2;
			state.index += num;
		};
		const append = (token) => {
			state.output += token.output != null ? token.output : token.value;
			consume$1(token.value);
		};
		const negate = () => {
			let count = 1;
			while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
				advance();
				state.start++;
				count++;
			}
			if (count % 2 === 0) return false;
			state.negated = true;
			state.start++;
			return true;
		};
		const increment = (type$1) => {
			state[type$1]++;
			stack.push(type$1);
		};
		const decrement = (type$1) => {
			state[type$1]--;
			stack.pop();
		};
		/**
		* Push tokens onto the tokens array. This helper speeds up
		* tokenizing by 1) helping us avoid backtracking as much as possible,
		* and 2) helping us avoid creating extra tokens when consecutive
		* characters are plain text. This improves performance and simplifies
		* lookbehinds.
		*/
		const push = (tok) => {
			if (prev.type === "globstar") {
				const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
				const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
				if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
					state.output = state.output.slice(0, -prev.output.length);
					prev.type = "star";
					prev.value = "*";
					prev.output = star;
					state.output += prev.output;
				}
			}
			if (extglobs.length && tok.type !== "paren") extglobs[extglobs.length - 1].inner += tok.value;
			if (tok.value || tok.output) append(tok);
			if (prev && prev.type === "text" && tok.type === "text") {
				prev.value += tok.value;
				prev.output = (prev.output || "") + tok.value;
				return;
			}
			tok.prev = prev;
			tokens.push(tok);
			prev = tok;
		};
		const extglobOpen = (type$1, value$2) => {
			const token = {
				...EXTGLOB_CHARS[value$2],
				conditions: 1,
				inner: ""
			};
			token.prev = prev;
			token.parens = state.parens;
			token.output = state.output;
			const output = (opts.capture ? "(" : "") + token.open;
			increment("parens");
			push({
				type: type$1,
				value: value$2,
				output: state.output ? "" : ONE_CHAR$1
			});
			push({
				type: "paren",
				extglob: true,
				value: advance(),
				output
			});
			extglobs.push(token);
		};
		const extglobClose = (token) => {
			let output = token.close + (opts.capture ? ")" : "");
			let rest;
			if (token.type === "negate") {
				let extglobStar = star;
				if (token.inner && token.inner.length > 1 && token.inner.includes("/")) extglobStar = globstar(opts);
				if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) output = token.close = `)$))${extglobStar}`;
				if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
					const expression = parse$3(rest, {
						...options,
						fastpaths: false
					}).output;
					output = token.close = `)${expression})${extglobStar})`;
				}
				if (token.prev.type === "bos") state.negatedExtglob = true;
			}
			push({
				type: "paren",
				extglob: true,
				value: value$1,
				output
			});
			decrement("parens");
		};
		/**
		* Fast paths
		*/
		if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
			let backslashes = false;
			let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m$1, esc, chars, first, rest, index) => {
				if (first === "\\") {
					backslashes = true;
					return m$1;
				}
				if (first === "?") {
					if (esc) return esc + first + (rest ? QMARK$1.repeat(rest.length) : "");
					if (index === 0) return qmarkNoDot + (rest ? QMARK$1.repeat(rest.length) : "");
					return QMARK$1.repeat(chars.length);
				}
				if (first === ".") return DOT_LITERAL$1.repeat(chars.length);
				if (first === "*") {
					if (esc) return esc + first + (rest ? star : "");
					return star;
				}
				return esc ? m$1 : `\\${m$1}`;
			});
			if (backslashes === true) if (opts.unescape === true) output = output.replace(/\\/g, "");
			else output = output.replace(/\\+/g, (m$1) => {
				return m$1.length % 2 === 0 ? "\\\\" : m$1 ? "\\" : "";
			});
			if (output === input && opts.contains === true) {
				state.output = input;
				return state;
			}
			state.output = utils$1.wrapOutput(output, state, options);
			return state;
		}
		/**
		* Tokenize input until we reach end-of-string
		*/
		while (!eos()) {
			value$1 = advance();
			if (value$1 === "\0") continue;
			/**
			* Escaped characters
			*/
			if (value$1 === "\\") {
				const next = peek();
				if (next === "/" && opts.bash !== true) continue;
				if (next === "." || next === ";") continue;
				if (!next) {
					value$1 += "\\";
					push({
						type: "text",
						value: value$1
					});
					continue;
				}
				const match = /^\\+/.exec(remaining());
				let slashes = 0;
				if (match && match[0].length > 2) {
					slashes = match[0].length;
					state.index += slashes;
					if (slashes % 2 !== 0) value$1 += "\\";
				}
				if (opts.unescape === true) value$1 = advance();
				else value$1 += advance();
				if (state.brackets === 0) {
					push({
						type: "text",
						value: value$1
					});
					continue;
				}
			}
			/**
			* If we're inside a regex character class, continue
			* until we reach the closing bracket.
			*/
			if (state.brackets > 0 && (value$1 !== "]" || prev.value === "[" || prev.value === "[^")) {
				if (opts.posix !== false && value$1 === ":") {
					const inner = prev.value.slice(1);
					if (inner.includes("[")) {
						prev.posix = true;
						if (inner.includes(":")) {
							const idx = prev.value.lastIndexOf("[");
							const pre = prev.value.slice(0, idx);
							const rest$1 = prev.value.slice(idx + 2);
							const posix = POSIX_REGEX_SOURCE[rest$1];
							if (posix) {
								prev.value = pre + posix;
								state.backtrack = true;
								advance();
								if (!bos.output && tokens.indexOf(prev) === 1) bos.output = ONE_CHAR$1;
								continue;
							}
						}
					}
				}
				if (value$1 === "[" && peek() !== ":" || value$1 === "-" && peek() === "]") value$1 = `\\${value$1}`;
				if (value$1 === "]" && (prev.value === "[" || prev.value === "[^")) value$1 = `\\${value$1}`;
				if (opts.posix === true && value$1 === "!" && prev.value === "[") value$1 = "^";
				prev.value += value$1;
				append({ value: value$1 });
				continue;
			}
			/**
			* If we're inside a quoted string, continue
			* until we reach the closing double quote.
			*/
			if (state.quotes === 1 && value$1 !== "\"") {
				value$1 = utils$1.escapeRegex(value$1);
				prev.value += value$1;
				append({ value: value$1 });
				continue;
			}
			/**
			* Double quotes
			*/
			if (value$1 === "\"") {
				state.quotes = state.quotes === 1 ? 0 : 1;
				if (opts.keepQuotes === true) push({
					type: "text",
					value: value$1
				});
				continue;
			}
			/**
			* Parentheses
			*/
			if (value$1 === "(") {
				increment("parens");
				push({
					type: "paren",
					value: value$1
				});
				continue;
			}
			if (value$1 === ")") {
				if (state.parens === 0 && opts.strictBrackets === true) throw new SyntaxError(syntaxError("opening", "("));
				const extglob = extglobs[extglobs.length - 1];
				if (extglob && state.parens === extglob.parens + 1) {
					extglobClose(extglobs.pop());
					continue;
				}
				push({
					type: "paren",
					value: value$1,
					output: state.parens ? ")" : "\\)"
				});
				decrement("parens");
				continue;
			}
			/**
			* Square brackets
			*/
			if (value$1 === "[") {
				if (opts.nobracket === true || !remaining().includes("]")) {
					if (opts.nobracket !== true && opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
					value$1 = `\\${value$1}`;
				} else increment("brackets");
				push({
					type: "bracket",
					value: value$1
				});
				continue;
			}
			if (value$1 === "]") {
				if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
					push({
						type: "text",
						value: value$1,
						output: `\\${value$1}`
					});
					continue;
				}
				if (state.brackets === 0) {
					if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("opening", "["));
					push({
						type: "text",
						value: value$1,
						output: `\\${value$1}`
					});
					continue;
				}
				decrement("brackets");
				const prevValue = prev.value.slice(1);
				if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) value$1 = `/${value$1}`;
				prev.value += value$1;
				append({ value: value$1 });
				if (opts.literalBrackets === false || utils$1.hasRegexChars(prevValue)) continue;
				const escaped = utils$1.escapeRegex(prev.value);
				state.output = state.output.slice(0, -prev.value.length);
				if (opts.literalBrackets === true) {
					state.output += escaped;
					prev.value = escaped;
					continue;
				}
				prev.value = `(${capture}${escaped}|${prev.value})`;
				state.output += prev.value;
				continue;
			}
			/**
			* Braces
			*/
			if (value$1 === "{" && opts.nobrace !== true) {
				increment("braces");
				const open$1 = {
					type: "brace",
					value: value$1,
					output: "(",
					outputIndex: state.output.length,
					tokensIndex: state.tokens.length
				};
				braces.push(open$1);
				push(open$1);
				continue;
			}
			if (value$1 === "}") {
				const brace = braces[braces.length - 1];
				if (opts.nobrace === true || !brace) {
					push({
						type: "text",
						value: value$1,
						output: value$1
					});
					continue;
				}
				let output = ")";
				if (brace.dots === true) {
					const arr = tokens.slice();
					const range = [];
					for (let i = arr.length - 1; i >= 0; i--) {
						tokens.pop();
						if (arr[i].type === "brace") break;
						if (arr[i].type !== "dots") range.unshift(arr[i].value);
					}
					output = expandRange(range, opts);
					state.backtrack = true;
				}
				if (brace.comma !== true && brace.dots !== true) {
					const out = state.output.slice(0, brace.outputIndex);
					const toks = state.tokens.slice(brace.tokensIndex);
					brace.value = brace.output = "\\{";
					value$1 = output = "\\}";
					state.output = out;
					for (const t of toks) state.output += t.output || t.value;
				}
				push({
					type: "brace",
					value: value$1,
					output
				});
				decrement("braces");
				braces.pop();
				continue;
			}
			/**
			* Pipes
			*/
			if (value$1 === "|") {
				if (extglobs.length > 0) extglobs[extglobs.length - 1].conditions++;
				push({
					type: "text",
					value: value$1
				});
				continue;
			}
			/**
			* Commas
			*/
			if (value$1 === ",") {
				let output = value$1;
				const brace = braces[braces.length - 1];
				if (brace && stack[stack.length - 1] === "braces") {
					brace.comma = true;
					output = "|";
				}
				push({
					type: "comma",
					value: value$1,
					output
				});
				continue;
			}
			/**
			* Slashes
			*/
			if (value$1 === "/") {
				if (prev.type === "dot" && state.index === state.start + 1) {
					state.start = state.index + 1;
					state.consumed = "";
					state.output = "";
					tokens.pop();
					prev = bos;
					continue;
				}
				push({
					type: "slash",
					value: value$1,
					output: SLASH_LITERAL$1
				});
				continue;
			}
			/**
			* Dots
			*/
			if (value$1 === ".") {
				if (state.braces > 0 && prev.type === "dot") {
					if (prev.value === ".") prev.output = DOT_LITERAL$1;
					const brace = braces[braces.length - 1];
					prev.type = "dots";
					prev.output += value$1;
					prev.value += value$1;
					brace.dots = true;
					continue;
				}
				if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
					push({
						type: "text",
						value: value$1,
						output: DOT_LITERAL$1
					});
					continue;
				}
				push({
					type: "dot",
					value: value$1,
					output: DOT_LITERAL$1
				});
				continue;
			}
			/**
			* Question marks
			*/
			if (value$1 === "?") {
				const isGroup = prev && prev.value === "(";
				if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
					extglobOpen("qmark", value$1);
					continue;
				}
				if (prev && prev.type === "paren") {
					const next = peek();
					let output = value$1;
					if (next === "<" && !utils$1.supportsLookbehinds()) throw new Error("Node.js v10 or higher is required for regex lookbehinds");
					if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) output = `\\${value$1}`;
					push({
						type: "text",
						value: value$1,
						output
					});
					continue;
				}
				if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
					push({
						type: "qmark",
						value: value$1,
						output: QMARK_NO_DOT$1
					});
					continue;
				}
				push({
					type: "qmark",
					value: value$1,
					output: QMARK$1
				});
				continue;
			}
			/**
			* Exclamation
			*/
			if (value$1 === "!") {
				if (opts.noextglob !== true && peek() === "(") {
					if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
						extglobOpen("negate", value$1);
						continue;
					}
				}
				if (opts.nonegate !== true && state.index === 0) {
					negate();
					continue;
				}
			}
			/**
			* Plus
			*/
			if (value$1 === "+") {
				if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
					extglobOpen("plus", value$1);
					continue;
				}
				if (prev && prev.value === "(" || opts.regex === false) {
					push({
						type: "plus",
						value: value$1,
						output: PLUS_LITERAL$1
					});
					continue;
				}
				if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
					push({
						type: "plus",
						value: value$1
					});
					continue;
				}
				push({
					type: "plus",
					value: PLUS_LITERAL$1
				});
				continue;
			}
			/**
			* Plain text
			*/
			if (value$1 === "@") {
				if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
					push({
						type: "at",
						extglob: true,
						value: value$1,
						output: ""
					});
					continue;
				}
				push({
					type: "text",
					value: value$1
				});
				continue;
			}
			/**
			* Plain text
			*/
			if (value$1 !== "*") {
				if (value$1 === "$" || value$1 === "^") value$1 = `\\${value$1}`;
				const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
				if (match) {
					value$1 += match[0];
					state.index += match[0].length;
				}
				push({
					type: "text",
					value: value$1
				});
				continue;
			}
			/**
			* Stars
			*/
			if (prev && (prev.type === "globstar" || prev.star === true)) {
				prev.type = "star";
				prev.star = true;
				prev.value += value$1;
				prev.output = star;
				state.backtrack = true;
				state.globstar = true;
				consume$1(value$1);
				continue;
			}
			let rest = remaining();
			if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
				extglobOpen("star", value$1);
				continue;
			}
			if (prev.type === "star") {
				if (opts.noglobstar === true) {
					consume$1(value$1);
					continue;
				}
				const prior = prev.prev;
				const before = prior.prev;
				const isStart = prior.type === "slash" || prior.type === "bos";
				const afterStar = before && (before.type === "star" || before.type === "globstar");
				if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
					push({
						type: "star",
						value: value$1,
						output: ""
					});
					continue;
				}
				const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
				const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
				if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
					push({
						type: "star",
						value: value$1,
						output: ""
					});
					continue;
				}
				while (rest.slice(0, 3) === "/**") {
					const after = input[state.index + 4];
					if (after && after !== "/") break;
					rest = rest.slice(3);
					consume$1("/**", 3);
				}
				if (prior.type === "bos" && eos()) {
					prev.type = "globstar";
					prev.value += value$1;
					prev.output = globstar(opts);
					state.output = prev.output;
					state.globstar = true;
					consume$1(value$1);
					continue;
				}
				if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
					state.output = state.output.slice(0, -(prior.output + prev.output).length);
					prior.output = `(?:${prior.output}`;
					prev.type = "globstar";
					prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
					prev.value += value$1;
					state.globstar = true;
					state.output += prior.output + prev.output;
					consume$1(value$1);
					continue;
				}
				if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
					const end = rest[1] !== void 0 ? "|$" : "";
					state.output = state.output.slice(0, -(prior.output + prev.output).length);
					prior.output = `(?:${prior.output}`;
					prev.type = "globstar";
					prev.output = `${globstar(opts)}${SLASH_LITERAL$1}|${SLASH_LITERAL$1}${end})`;
					prev.value += value$1;
					state.output += prior.output + prev.output;
					state.globstar = true;
					consume$1(value$1 + advance());
					push({
						type: "slash",
						value: "/",
						output: ""
					});
					continue;
				}
				if (prior.type === "bos" && rest[0] === "/") {
					prev.type = "globstar";
					prev.value += value$1;
					prev.output = `(?:^|${SLASH_LITERAL$1}|${globstar(opts)}${SLASH_LITERAL$1})`;
					state.output = prev.output;
					state.globstar = true;
					consume$1(value$1 + advance());
					push({
						type: "slash",
						value: "/",
						output: ""
					});
					continue;
				}
				state.output = state.output.slice(0, -prev.output.length);
				prev.type = "globstar";
				prev.output = globstar(opts);
				prev.value += value$1;
				state.output += prev.output;
				state.globstar = true;
				consume$1(value$1);
				continue;
			}
			const token = {
				type: "star",
				value: value$1,
				output: star
			};
			if (opts.bash === true) {
				token.output = ".*?";
				if (prev.type === "bos" || prev.type === "slash") token.output = nodot + token.output;
				push(token);
				continue;
			}
			if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
				token.output = value$1;
				push(token);
				continue;
			}
			if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
				if (prev.type === "dot") {
					state.output += NO_DOT_SLASH$1;
					prev.output += NO_DOT_SLASH$1;
				} else if (opts.dot === true) {
					state.output += NO_DOTS_SLASH$1;
					prev.output += NO_DOTS_SLASH$1;
				} else {
					state.output += nodot;
					prev.output += nodot;
				}
				if (peek() !== "*") {
					state.output += ONE_CHAR$1;
					prev.output += ONE_CHAR$1;
				}
			}
			push(token);
		}
		while (state.brackets > 0) {
			if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
			state.output = utils$1.escapeLast(state.output, "[");
			decrement("brackets");
		}
		while (state.parens > 0) {
			if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
			state.output = utils$1.escapeLast(state.output, "(");
			decrement("parens");
		}
		while (state.braces > 0) {
			if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
			state.output = utils$1.escapeLast(state.output, "{");
			decrement("braces");
		}
		if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) push({
			type: "maybe_slash",
			value: "",
			output: `${SLASH_LITERAL$1}?`
		});
		if (state.backtrack === true) {
			state.output = "";
			for (const token of state.tokens) {
				state.output += token.output != null ? token.output : token.value;
				if (token.suffix) state.output += token.suffix;
			}
		}
		return state;
	};
	/**
	* Fast paths for creating regular expressions for common glob patterns.
	* This can significantly speed up processing and has very little downside
	* impact when none of the fast paths match.
	*/
	parse$3.fastpaths = (input, options) => {
		const opts = { ...options };
		const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
		const len = input.length;
		if (len > max) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
		input = REPLACEMENTS[input] || input;
		const win32$1 = utils$1.isWindows(options);
		const { DOT_LITERAL: DOT_LITERAL$1, SLASH_LITERAL: SLASH_LITERAL$1, ONE_CHAR: ONE_CHAR$1, DOTS_SLASH: DOTS_SLASH$1, NO_DOT: NO_DOT$1, NO_DOTS: NO_DOTS$1, NO_DOTS_SLASH: NO_DOTS_SLASH$1, STAR: STAR$1, START_ANCHOR: START_ANCHOR$1 } = constants$1.globChars(win32$1);
		const nodot = opts.dot ? NO_DOTS$1 : NO_DOT$1;
		const slashDot = opts.dot ? NO_DOTS_SLASH$1 : NO_DOT$1;
		const capture = opts.capture ? "" : "?:";
		const state = {
			negated: false,
			prefix: ""
		};
		let star = opts.bash === true ? ".*?" : STAR$1;
		if (opts.capture) star = `(${star})`;
		const globstar = (opts$1) => {
			if (opts$1.noglobstar === true) return star;
			return `(${capture}(?:(?!${START_ANCHOR$1}${opts$1.dot ? DOTS_SLASH$1 : DOT_LITERAL$1}).)*?)`;
		};
		const create$1 = (str) => {
			switch (str) {
				case "*": return `${nodot}${ONE_CHAR$1}${star}`;
				case ".*": return `${DOT_LITERAL$1}${ONE_CHAR$1}${star}`;
				case "*.*": return `${nodot}${star}${DOT_LITERAL$1}${ONE_CHAR$1}${star}`;
				case "*/*": return `${nodot}${star}${SLASH_LITERAL$1}${ONE_CHAR$1}${slashDot}${star}`;
				case "**": return nodot + globstar(opts);
				case "**/*": return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL$1})?${slashDot}${ONE_CHAR$1}${star}`;
				case "**/*.*": return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL$1})?${slashDot}${star}${DOT_LITERAL$1}${ONE_CHAR$1}${star}`;
				case "**/.*": return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL$1})?${DOT_LITERAL$1}${ONE_CHAR$1}${star}`;
				default: {
					const match = /^(.*?)\.(\w+)$/.exec(str);
					if (!match) return;
					const source$1 = create$1(match[1]);
					if (!source$1) return;
					return source$1 + DOT_LITERAL$1 + match[2];
				}
			}
		};
		const output = utils$1.removePrefix(input, state);
		let source = create$1(output);
		if (source && opts.strictSlashes !== true) source += `${SLASH_LITERAL$1}?`;
		return source;
	};
	module.exports = parse$3;
} });

//#endregion
//#region node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js
var require_picomatch$1 = __commonJS({ "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js"(exports, module) {
	const path$1 = __require("path");
	const scan = require_scan();
	const parse$2 = require_parse();
	const utils = require_utils();
	const constants = require_constants();
	const isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
	/**
	* Creates a matcher function from one or more glob patterns. The
	* returned function takes a string to match as its first argument,
	* and returns true if the string is a match. The returned matcher
	* function also takes a boolean as the second argument that, when true,
	* returns an object with additional information.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch(glob[, options]);
	*
	* const isMatch = picomatch('*.!(*a)');
	* console.log(isMatch('a.a')); //=> false
	* console.log(isMatch('a.b')); //=> true
	* ```
	* @name picomatch
	* @param {String|Array} `globs` One or more glob patterns.
	* @param {Object=} `options`
	* @return {Function=} Returns a matcher function.
	* @api public
	*/
	const picomatch$1 = (glob, options, returnState = false) => {
		if (Array.isArray(glob)) {
			const fns = glob.map((input) => picomatch$1(input, options, returnState));
			const arrayMatcher = (str) => {
				for (const isMatch of fns) {
					const state$1 = isMatch(str);
					if (state$1) return state$1;
				}
				return false;
			};
			return arrayMatcher;
		}
		const isState = isObject(glob) && glob.tokens && glob.input;
		if (glob === "" || typeof glob !== "string" && !isState) throw new TypeError("Expected pattern to be a non-empty string");
		const opts = options || {};
		const posix = utils.isWindows(options);
		const regex = isState ? picomatch$1.compileRe(glob, options) : picomatch$1.makeRe(glob, options, false, true);
		const state = regex.state;
		delete regex.state;
		let isIgnored = () => false;
		if (opts.ignore) {
			const ignoreOpts = {
				...options,
				ignore: null,
				onMatch: null,
				onResult: null
			};
			isIgnored = picomatch$1(opts.ignore, ignoreOpts, returnState);
		}
		const matcher = (input, returnObject = false) => {
			const { isMatch, match, output } = picomatch$1.test(input, regex, options, {
				glob,
				posix
			});
			const result = {
				glob,
				state,
				regex,
				posix,
				input,
				output,
				match,
				isMatch
			};
			if (typeof opts.onResult === "function") opts.onResult(result);
			if (isMatch === false) {
				result.isMatch = false;
				return returnObject ? result : false;
			}
			if (isIgnored(input)) {
				if (typeof opts.onIgnore === "function") opts.onIgnore(result);
				result.isMatch = false;
				return returnObject ? result : false;
			}
			if (typeof opts.onMatch === "function") opts.onMatch(result);
			return returnObject ? result : true;
		};
		if (returnState) matcher.state = state;
		return matcher;
	};
	/**
	* Test `input` with the given `regex`. This is used by the main
	* `picomatch()` function to test the input string.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.test(input, regex[, options]);
	*
	* console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
	* // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
	* ```
	* @param {String} `input` String to test.
	* @param {RegExp} `regex`
	* @return {Object} Returns an object with matching info.
	* @api public
	*/
	picomatch$1.test = (input, regex, options, { glob, posix } = {}) => {
		if (typeof input !== "string") throw new TypeError("Expected input to be a string");
		if (input === "") return {
			isMatch: false,
			output: ""
		};
		const opts = options || {};
		const format = opts.format || (posix ? utils.toPosixSlashes : null);
		let match = input === glob;
		let output = match && format ? format(input) : input;
		if (match === false) {
			output = format ? format(input) : input;
			match = output === glob;
		}
		if (match === false || opts.capture === true) if (opts.matchBase === true || opts.basename === true) match = picomatch$1.matchBase(input, regex, options, posix);
		else match = regex.exec(output);
		return {
			isMatch: Boolean(match),
			match,
			output
		};
	};
	/**
	* Match the basename of a filepath.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.matchBase(input, glob[, options]);
	* console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
	* ```
	* @param {String} `input` String to test.
	* @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
	* @return {Boolean}
	* @api public
	*/
	picomatch$1.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
		const regex = glob instanceof RegExp ? glob : picomatch$1.makeRe(glob, options);
		return regex.test(path$1.basename(input));
	};
	/**
	* Returns true if **any** of the given glob `patterns` match the specified `string`.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.isMatch(string, patterns[, options]);
	*
	* console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
	* console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
	* ```
	* @param {String|Array} str The string to test.
	* @param {String|Array} patterns One or more glob patterns to use for matching.
	* @param {Object} [options] See available [options](#options).
	* @return {Boolean} Returns true if any patterns match `str`
	* @api public
	*/
	picomatch$1.isMatch = (str, patterns, options) => picomatch$1(patterns, options)(str);
	/**
	* Parse a glob pattern to create the source string for a regular
	* expression.
	*
	* ```js
	* const picomatch = require('picomatch');
	* const result = picomatch.parse(pattern[, options]);
	* ```
	* @param {String} `pattern`
	* @param {Object} `options`
	* @return {Object} Returns an object with useful properties and output to be used as a regex source string.
	* @api public
	*/
	picomatch$1.parse = (pattern, options) => {
		if (Array.isArray(pattern)) return pattern.map((p$1) => picomatch$1.parse(p$1, options));
		return parse$2(pattern, {
			...options,
			fastpaths: false
		});
	};
	/**
	* Scan a glob pattern to separate the pattern into segments.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.scan(input[, options]);
	*
	* const result = picomatch.scan('!./foo/*.js');
	* console.log(result);
	* { prefix: '!./',
	*   input: '!./foo/*.js',
	*   start: 3,
	*   base: 'foo',
	*   glob: '*.js',
	*   isBrace: false,
	*   isBracket: false,
	*   isGlob: true,
	*   isExtglob: false,
	*   isGlobstar: false,
	*   negated: true }
	* ```
	* @param {String} `input` Glob pattern to scan.
	* @param {Object} `options`
	* @return {Object} Returns an object with
	* @api public
	*/
	picomatch$1.scan = (input, options) => scan(input, options);
	/**
	* Compile a regular expression from the `state` object returned by the
	* [parse()](#parse) method.
	*
	* @param {Object} `state`
	* @param {Object} `options`
	* @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
	* @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
	* @return {RegExp}
	* @api public
	*/
	picomatch$1.compileRe = (state, options, returnOutput = false, returnState = false) => {
		if (returnOutput === true) return state.output;
		const opts = options || {};
		const prepend = opts.contains ? "" : "^";
		const append = opts.contains ? "" : "$";
		let source = `${prepend}(?:${state.output})${append}`;
		if (state && state.negated === true) source = `^(?!${source}).*$`;
		const regex = picomatch$1.toRegex(source, options);
		if (returnState === true) regex.state = state;
		return regex;
	};
	/**
	* Create a regular expression from a parsed glob pattern.
	*
	* ```js
	* const picomatch = require('picomatch');
	* const state = picomatch.parse('*.js');
	* // picomatch.compileRe(state[, options]);
	*
	* console.log(picomatch.compileRe(state));
	* //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	* ```
	* @param {String} `state` The object returned from the `.parse` method.
	* @param {Object} `options`
	* @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
	* @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
	* @return {RegExp} Returns a regex created from the given pattern.
	* @api public
	*/
	picomatch$1.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
		if (!input || typeof input !== "string") throw new TypeError("Expected a non-empty string");
		let parsed = {
			negated: false,
			fastpaths: true
		};
		if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) parsed.output = parse$2.fastpaths(input, options);
		if (!parsed.output) parsed = parse$2(input, options);
		return picomatch$1.compileRe(parsed, options, returnOutput, returnState);
	};
	/**
	* Create a regular expression from the given regex source string.
	*
	* ```js
	* const picomatch = require('picomatch');
	* // picomatch.toRegex(source[, options]);
	*
	* const { output } = picomatch.parse('*.js');
	* console.log(picomatch.toRegex(output));
	* //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	* ```
	* @param {String} `source` Regular expression source string.
	* @param {Object} `options`
	* @return {RegExp}
	* @api public
	*/
	picomatch$1.toRegex = (source, options) => {
		try {
			const opts = options || {};
			return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
		} catch (err) {
			if (options && options.debug === true) throw err;
			return /$^/;
		}
	};
	/**
	* Picomatch constants.
	* @return {Object}
	*/
	picomatch$1.constants = constants;
	/**
	* Expose "picomatch"
	*/
	module.exports = picomatch$1;
} });

//#endregion
//#region node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js
var require_picomatch = __commonJS({ "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js"(exports, module) {
	module.exports = require_picomatch$1();
} });

//#endregion
//#region node_modules/.pnpm/normalize-path@3.0.0/node_modules/normalize-path/index.js
var require_normalize_path = __commonJS({ "node_modules/.pnpm/normalize-path@3.0.0/node_modules/normalize-path/index.js"(exports, module) {
	/*!
	* normalize-path <https://github.com/jonschlinkert/normalize-path>
	*
	* Copyright (c) 2014-2018, Jon Schlinkert.
	* Released under the MIT License.
	*/
	module.exports = function(path$9, stripTrailing) {
		if (typeof path$9 !== "string") throw new TypeError("expected path to be a string");
		if (path$9 === "\\" || path$9 === "/") return "/";
		var len = path$9.length;
		if (len <= 1) return path$9;
		var prefix = "";
		if (len > 4 && path$9[3] === "\\") {
			var ch = path$9[2];
			if ((ch === "?" || ch === ".") && path$9.slice(0, 2) === "\\\\") {
				path$9 = path$9.slice(2);
				prefix = "//";
			}
		}
		var segs = path$9.split(/[/\\]+/);
		if (stripTrailing !== false && segs[segs.length - 1] === "") segs.pop();
		return prefix + segs.join("/");
	};
} });

//#endregion
//#region node_modules/.pnpm/anymatch@3.1.3/node_modules/anymatch/index.js
var require_anymatch = __commonJS({ "node_modules/.pnpm/anymatch@3.1.3/node_modules/anymatch/index.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const picomatch = require_picomatch();
	const normalizePath = require_normalize_path();
	/**
	* @typedef {(testString: string) => boolean} AnymatchFn
	* @typedef {string|RegExp|AnymatchFn} AnymatchPattern
	* @typedef {AnymatchPattern|AnymatchPattern[]} AnymatchMatcher
	*/
	const BANG = "!";
	const DEFAULT_OPTIONS = { returnIndex: false };
	const arrify = (item) => Array.isArray(item) ? item : [item];
	/**
	* @param {AnymatchPattern} matcher
	* @param {object} options
	* @returns {AnymatchFn}
	*/
	const createPattern = (matcher, options) => {
		if (typeof matcher === "function") return matcher;
		if (typeof matcher === "string") {
			const glob = picomatch(matcher, options);
			return (string) => matcher === string || glob(string);
		}
		if (matcher instanceof RegExp) return (string) => matcher.test(string);
		return (string) => false;
	};
	/**
	* @param {Array<Function>} patterns
	* @param {Array<Function>} negPatterns
	* @param {String|Array} args
	* @param {Boolean} returnIndex
	* @returns {boolean|number}
	*/
	const matchPatterns = (patterns, negPatterns, args, returnIndex) => {
		const isList = Array.isArray(args);
		const _path = isList ? args[0] : args;
		if (!isList && typeof _path !== "string") throw new TypeError("anymatch: second argument must be a string: got " + Object.prototype.toString.call(_path));
		const path$9 = normalizePath(_path, false);
		for (let index = 0; index < negPatterns.length; index++) {
			const nglob = negPatterns[index];
			if (nglob(path$9)) return returnIndex ? -1 : false;
		}
		const applied = isList && [path$9].concat(args.slice(1));
		for (let index = 0; index < patterns.length; index++) {
			const pattern = patterns[index];
			if (isList ? pattern(...applied) : pattern(path$9)) return returnIndex ? index : true;
		}
		return returnIndex ? -1 : false;
	};
	/**
	* @param {AnymatchMatcher} matchers
	* @param {Array|string} testString
	* @param {object} options
	* @returns {boolean|number|Function}
	*/
	const anymatch$1 = (matchers, testString, options = DEFAULT_OPTIONS) => {
		if (matchers == null) throw new TypeError("anymatch: specify first argument");
		const opts = typeof options === "boolean" ? { returnIndex: options } : options;
		const returnIndex = opts.returnIndex || false;
		const mtchers = arrify(matchers);
		const negatedGlobs = mtchers.filter((item) => typeof item === "string" && item.charAt(0) === BANG).map((item) => item.slice(1)).map((item) => picomatch(item, opts));
		const patterns = mtchers.filter((item) => typeof item !== "string" || typeof item === "string" && item.charAt(0) !== BANG).map((matcher) => createPattern(matcher, opts));
		if (testString == null) return (testString$1, ri = false) => {
			const returnIndex$1 = typeof ri === "boolean" ? ri : false;
			return matchPatterns(patterns, negatedGlobs, testString$1, returnIndex$1);
		};
		return matchPatterns(patterns, negatedGlobs, testString, returnIndex);
	};
	anymatch$1.default = anymatch$1;
	module.exports = anymatch$1;
} });

//#endregion
//#region node_modules/.pnpm/unstorage@1.15.0/node_modules/unstorage/drivers/utils/index.mjs
function defineDriver(factory) {
	return factory;
}
function createError(driver, message, opts) {
	const err = new Error(`[unstorage] [${driver}] ${message}`, opts);
	if (Error.captureStackTrace) Error.captureStackTrace(err, createError);
	return err;
}
function createRequiredError(driver, name) {
	if (Array.isArray(name)) return createError(driver, `Missing some of the required options ${name.map((n) => "`" + n + "`").join(", ")}`);
	return createError(driver, `Missing required option \`${name}\`.`);
}

//#endregion
//#region node_modules/.pnpm/unstorage@1.15.0/node_modules/unstorage/drivers/utils/node-fs.mjs
function ignoreNotfound(err) {
	return err.code === "ENOENT" || err.code === "EISDIR" ? null : err;
}
function ignoreExists(err) {
	return err.code === "EEXIST" ? null : err;
}
async function writeFile(path$9, data, encoding) {
	await ensuredir(dirname(path$9));
	return promises.writeFile(path$9, data, encoding);
}
function readFile(path$9, encoding) {
	return promises.readFile(path$9, encoding).catch(ignoreNotfound);
}
function unlink(path$9) {
	return promises.unlink(path$9).catch(ignoreNotfound);
}
function readdir$2(dir) {
	return promises.readdir(dir, { withFileTypes: true }).catch(ignoreNotfound).then((r$1) => r$1 || []);
}
async function ensuredir(dir) {
	if (existsSync(dir)) return;
	await ensuredir(dirname(dir)).catch(ignoreExists);
	await promises.mkdir(dir).catch(ignoreExists);
}
async function readdirRecursive(dir, ignore, maxDepth) {
	if (ignore && ignore(dir)) return [];
	const entries = await readdir$2(dir);
	const files = [];
	await Promise.all(entries.map(async (entry) => {
		const entryPath = resolve(dir, entry.name);
		if (entry.isDirectory()) {
			if (maxDepth === void 0 || maxDepth > 0) {
				const dirFiles = await readdirRecursive(entryPath, ignore, maxDepth === void 0 ? void 0 : maxDepth - 1);
				files.push(...dirFiles.map((f) => entry.name + "/" + f));
			}
		} else if (!(ignore && ignore(entry.name))) files.push(entry.name);
	}));
	return files;
}
async function rmRecursive(dir) {
	const entries = await readdir$2(dir);
	await Promise.all(entries.map((entry) => {
		const entryPath = resolve(dir, entry.name);
		if (entry.isDirectory()) return rmRecursive(entryPath).then(() => promises.rmdir(entryPath));
		else return promises.unlink(entryPath);
	}));
}

//#endregion
//#region node_modules/.pnpm/unstorage@1.15.0/node_modules/unstorage/drivers/fs.mjs
var import_anymatch = __toESM(require_anymatch(), 1);
const PATH_TRAVERSE_RE = /\.\.:|\.\.$/;
const DRIVER_NAME = "fs";
var fs_default = defineDriver((userOptions = {}) => {
	if (!userOptions.base) throw createRequiredError(DRIVER_NAME, "base");
	const base = resolve(userOptions.base);
	const ignore = (0, import_anymatch.default)(userOptions.ignore || ["**/node_modules/**", "**/.git/**"]);
	const r$1 = (key) => {
		if (PATH_TRAVERSE_RE.test(key)) throw createError(DRIVER_NAME, `Invalid key: ${JSON.stringify(key)}. It should not contain .. segments`);
		const resolved = join(base, key.replace(/:/g, "/"));
		return resolved;
	};
	let _watcher;
	const _unwatch = async () => {
		if (_watcher) {
			await _watcher.close();
			_watcher = void 0;
		}
	};
	return {
		name: DRIVER_NAME,
		options: userOptions,
		flags: { maxDepth: true },
		hasItem(key) {
			return existsSync(r$1(key));
		},
		getItem(key) {
			return readFile(r$1(key), "utf8");
		},
		getItemRaw(key) {
			return readFile(r$1(key));
		},
		async getMeta(key) {
			const { atime, mtime, size, birthtime, ctime } = await promises.stat(r$1(key)).catch(() => ({}));
			return {
				atime,
				mtime,
				size,
				birthtime,
				ctime
			};
		},
		setItem(key, value$1) {
			if (userOptions.readOnly) return;
			return writeFile(r$1(key), value$1, "utf8");
		},
		setItemRaw(key, value$1) {
			if (userOptions.readOnly) return;
			return writeFile(r$1(key), value$1);
		},
		removeItem(key) {
			if (userOptions.readOnly) return;
			return unlink(r$1(key));
		},
		getKeys(_base, topts) {
			return readdirRecursive(r$1("."), ignore, topts?.maxDepth);
		},
		async clear() {
			if (userOptions.readOnly || userOptions.noClear) return;
			await rmRecursive(r$1("."));
		},
		async dispose() {
			if (_watcher) await _watcher.close();
		},
		async watch(callback) {
			if (_watcher) return _unwatch;
			await new Promise((resolve2, reject) => {
				const watchOptions = {
					ignoreInitial: true,
					...userOptions.watchOptions
				};
				if (!watchOptions.ignored) watchOptions.ignored = [];
				else if (Array.isArray(watchOptions.ignored)) watchOptions.ignored = [...watchOptions.ignored];
				else watchOptions.ignored = [watchOptions.ignored];
				watchOptions.ignored.push(ignore);
				_watcher = watch$1(base, watchOptions).on("ready", () => {
					resolve2();
				}).on("error", reject).on("all", (eventName, path$9) => {
					path$9 = relative(base, path$9);
					if (eventName === "change" || eventName === "add") callback("update", path$9);
					else if (eventName === "unlink") callback("remove", path$9);
				});
			});
			return _unwatch;
		}
	};
});

//#endregion
//#region node_modules/.pnpm/mime@4.0.7/node_modules/mime/dist/types/other.js
const types$1 = {
	"application/prs.cww": ["cww"],
	"application/prs.xsf+xml": ["xsf"],
	"application/vnd.1000minds.decision-model+xml": ["1km"],
	"application/vnd.3gpp.pic-bw-large": ["plb"],
	"application/vnd.3gpp.pic-bw-small": ["psb"],
	"application/vnd.3gpp.pic-bw-var": ["pvb"],
	"application/vnd.3gpp2.tcap": ["tcap"],
	"application/vnd.3m.post-it-notes": ["pwn"],
	"application/vnd.accpac.simply.aso": ["aso"],
	"application/vnd.accpac.simply.imp": ["imp"],
	"application/vnd.acucobol": ["acu"],
	"application/vnd.acucorp": ["atc", "acutc"],
	"application/vnd.adobe.air-application-installer-package+zip": ["air"],
	"application/vnd.adobe.formscentral.fcdt": ["fcdt"],
	"application/vnd.adobe.fxp": ["fxp", "fxpl"],
	"application/vnd.adobe.xdp+xml": ["xdp"],
	"application/vnd.adobe.xfdf": ["*xfdf"],
	"application/vnd.age": ["age"],
	"application/vnd.ahead.space": ["ahead"],
	"application/vnd.airzip.filesecure.azf": ["azf"],
	"application/vnd.airzip.filesecure.azs": ["azs"],
	"application/vnd.amazon.ebook": ["azw"],
	"application/vnd.americandynamics.acc": ["acc"],
	"application/vnd.amiga.ami": ["ami"],
	"application/vnd.android.package-archive": ["apk"],
	"application/vnd.anser-web-certificate-issue-initiation": ["cii"],
	"application/vnd.anser-web-funds-transfer-initiation": ["fti"],
	"application/vnd.antix.game-component": ["atx"],
	"application/vnd.apple.installer+xml": ["mpkg"],
	"application/vnd.apple.keynote": ["key"],
	"application/vnd.apple.mpegurl": ["m3u8"],
	"application/vnd.apple.numbers": ["numbers"],
	"application/vnd.apple.pages": ["pages"],
	"application/vnd.apple.pkpass": ["pkpass"],
	"application/vnd.aristanetworks.swi": ["swi"],
	"application/vnd.astraea-software.iota": ["iota"],
	"application/vnd.audiograph": ["aep"],
	"application/vnd.autodesk.fbx": ["fbx"],
	"application/vnd.balsamiq.bmml+xml": ["bmml"],
	"application/vnd.blueice.multipass": ["mpm"],
	"application/vnd.bmi": ["bmi"],
	"application/vnd.businessobjects": ["rep"],
	"application/vnd.chemdraw+xml": ["cdxml"],
	"application/vnd.chipnuts.karaoke-mmd": ["mmd"],
	"application/vnd.cinderella": ["cdy"],
	"application/vnd.citationstyles.style+xml": ["csl"],
	"application/vnd.claymore": ["cla"],
	"application/vnd.cloanto.rp9": ["rp9"],
	"application/vnd.clonk.c4group": [
		"c4g",
		"c4d",
		"c4f",
		"c4p",
		"c4u"
	],
	"application/vnd.cluetrust.cartomobile-config": ["c11amc"],
	"application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"],
	"application/vnd.commonspace": ["csp"],
	"application/vnd.contact.cmsg": ["cdbcmsg"],
	"application/vnd.cosmocaller": ["cmc"],
	"application/vnd.crick.clicker": ["clkx"],
	"application/vnd.crick.clicker.keyboard": ["clkk"],
	"application/vnd.crick.clicker.palette": ["clkp"],
	"application/vnd.crick.clicker.template": ["clkt"],
	"application/vnd.crick.clicker.wordbank": ["clkw"],
	"application/vnd.criticaltools.wbs+xml": ["wbs"],
	"application/vnd.ctc-posml": ["pml"],
	"application/vnd.cups-ppd": ["ppd"],
	"application/vnd.curl.car": ["car"],
	"application/vnd.curl.pcurl": ["pcurl"],
	"application/vnd.dart": ["dart"],
	"application/vnd.data-vision.rdz": ["rdz"],
	"application/vnd.dbf": ["dbf"],
	"application/vnd.dcmp+xml": ["dcmp"],
	"application/vnd.dece.data": [
		"uvf",
		"uvvf",
		"uvd",
		"uvvd"
	],
	"application/vnd.dece.ttml+xml": ["uvt", "uvvt"],
	"application/vnd.dece.unspecified": ["uvx", "uvvx"],
	"application/vnd.dece.zip": ["uvz", "uvvz"],
	"application/vnd.denovo.fcselayout-link": ["fe_launch"],
	"application/vnd.dna": ["dna"],
	"application/vnd.dolby.mlp": ["mlp"],
	"application/vnd.dpgraph": ["dpg"],
	"application/vnd.dreamfactory": ["dfac"],
	"application/vnd.ds-keypoint": ["kpxx"],
	"application/vnd.dvb.ait": ["ait"],
	"application/vnd.dvb.service": ["svc"],
	"application/vnd.dynageo": ["geo"],
	"application/vnd.ecowin.chart": ["mag"],
	"application/vnd.enliven": ["nml"],
	"application/vnd.epson.esf": ["esf"],
	"application/vnd.epson.msf": ["msf"],
	"application/vnd.epson.quickanime": ["qam"],
	"application/vnd.epson.salt": ["slt"],
	"application/vnd.epson.ssf": ["ssf"],
	"application/vnd.eszigno3+xml": ["es3", "et3"],
	"application/vnd.ezpix-album": ["ez2"],
	"application/vnd.ezpix-package": ["ez3"],
	"application/vnd.fdf": ["*fdf"],
	"application/vnd.fdsn.mseed": ["mseed"],
	"application/vnd.fdsn.seed": ["seed", "dataless"],
	"application/vnd.flographit": ["gph"],
	"application/vnd.fluxtime.clip": ["ftc"],
	"application/vnd.framemaker": [
		"fm",
		"frame",
		"maker",
		"book"
	],
	"application/vnd.frogans.fnc": ["fnc"],
	"application/vnd.frogans.ltf": ["ltf"],
	"application/vnd.fsc.weblaunch": ["fsc"],
	"application/vnd.fujitsu.oasys": ["oas"],
	"application/vnd.fujitsu.oasys2": ["oa2"],
	"application/vnd.fujitsu.oasys3": ["oa3"],
	"application/vnd.fujitsu.oasysgp": ["fg5"],
	"application/vnd.fujitsu.oasysprs": ["bh2"],
	"application/vnd.fujixerox.ddd": ["ddd"],
	"application/vnd.fujixerox.docuworks": ["xdw"],
	"application/vnd.fujixerox.docuworks.binder": ["xbd"],
	"application/vnd.fuzzysheet": ["fzs"],
	"application/vnd.genomatix.tuxedo": ["txd"],
	"application/vnd.geogebra.file": ["ggb"],
	"application/vnd.geogebra.slides": ["ggs"],
	"application/vnd.geogebra.tool": ["ggt"],
	"application/vnd.geometry-explorer": ["gex", "gre"],
	"application/vnd.geonext": ["gxt"],
	"application/vnd.geoplan": ["g2w"],
	"application/vnd.geospace": ["g3w"],
	"application/vnd.gmx": ["gmx"],
	"application/vnd.google-apps.document": ["gdoc"],
	"application/vnd.google-apps.drawing": ["gdraw"],
	"application/vnd.google-apps.form": ["gform"],
	"application/vnd.google-apps.jam": ["gjam"],
	"application/vnd.google-apps.map": ["gmap"],
	"application/vnd.google-apps.presentation": ["gslides"],
	"application/vnd.google-apps.script": ["gscript"],
	"application/vnd.google-apps.site": ["gsite"],
	"application/vnd.google-apps.spreadsheet": ["gsheet"],
	"application/vnd.google-earth.kml+xml": ["kml"],
	"application/vnd.google-earth.kmz": ["kmz"],
	"application/vnd.gov.sk.xmldatacontainer+xml": ["xdcf"],
	"application/vnd.grafeq": ["gqf", "gqs"],
	"application/vnd.groove-account": ["gac"],
	"application/vnd.groove-help": ["ghf"],
	"application/vnd.groove-identity-message": ["gim"],
	"application/vnd.groove-injector": ["grv"],
	"application/vnd.groove-tool-message": ["gtm"],
	"application/vnd.groove-tool-template": ["tpl"],
	"application/vnd.groove-vcard": ["vcg"],
	"application/vnd.hal+xml": ["hal"],
	"application/vnd.handheld-entertainment+xml": ["zmm"],
	"application/vnd.hbci": ["hbci"],
	"application/vnd.hhe.lesson-player": ["les"],
	"application/vnd.hp-hpgl": ["hpgl"],
	"application/vnd.hp-hpid": ["hpid"],
	"application/vnd.hp-hps": ["hps"],
	"application/vnd.hp-jlyt": ["jlt"],
	"application/vnd.hp-pcl": ["pcl"],
	"application/vnd.hp-pclxl": ["pclxl"],
	"application/vnd.hydrostatix.sof-data": ["sfd-hdstx"],
	"application/vnd.ibm.minipay": ["mpy"],
	"application/vnd.ibm.modcap": [
		"afp",
		"listafp",
		"list3820"
	],
	"application/vnd.ibm.rights-management": ["irm"],
	"application/vnd.ibm.secure-container": ["sc"],
	"application/vnd.iccprofile": ["icc", "icm"],
	"application/vnd.igloader": ["igl"],
	"application/vnd.immervision-ivp": ["ivp"],
	"application/vnd.immervision-ivu": ["ivu"],
	"application/vnd.insors.igm": ["igm"],
	"application/vnd.intercon.formnet": ["xpw", "xpx"],
	"application/vnd.intergeo": ["i2g"],
	"application/vnd.intu.qbo": ["qbo"],
	"application/vnd.intu.qfx": ["qfx"],
	"application/vnd.ipunplugged.rcprofile": ["rcprofile"],
	"application/vnd.irepository.package+xml": ["irp"],
	"application/vnd.is-xpr": ["xpr"],
	"application/vnd.isac.fcs": ["fcs"],
	"application/vnd.jam": ["jam"],
	"application/vnd.jcp.javame.midlet-rms": ["rms"],
	"application/vnd.jisp": ["jisp"],
	"application/vnd.joost.joda-archive": ["joda"],
	"application/vnd.kahootz": ["ktz", "ktr"],
	"application/vnd.kde.karbon": ["karbon"],
	"application/vnd.kde.kchart": ["chrt"],
	"application/vnd.kde.kformula": ["kfo"],
	"application/vnd.kde.kivio": ["flw"],
	"application/vnd.kde.kontour": ["kon"],
	"application/vnd.kde.kpresenter": ["kpr", "kpt"],
	"application/vnd.kde.kspread": ["ksp"],
	"application/vnd.kde.kword": ["kwd", "kwt"],
	"application/vnd.kenameaapp": ["htke"],
	"application/vnd.kidspiration": ["kia"],
	"application/vnd.kinar": ["kne", "knp"],
	"application/vnd.koan": [
		"skp",
		"skd",
		"skt",
		"skm"
	],
	"application/vnd.kodak-descriptor": ["sse"],
	"application/vnd.las.las+xml": ["lasxml"],
	"application/vnd.llamagraphics.life-balance.desktop": ["lbd"],
	"application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"],
	"application/vnd.lotus-1-2-3": ["123"],
	"application/vnd.lotus-approach": ["apr"],
	"application/vnd.lotus-freelance": ["pre"],
	"application/vnd.lotus-notes": ["nsf"],
	"application/vnd.lotus-organizer": ["org"],
	"application/vnd.lotus-screencam": ["scm"],
	"application/vnd.lotus-wordpro": ["lwp"],
	"application/vnd.macports.portpkg": ["portpkg"],
	"application/vnd.mapbox-vector-tile": ["mvt"],
	"application/vnd.mcd": ["mcd"],
	"application/vnd.medcalcdata": ["mc1"],
	"application/vnd.mediastation.cdkey": ["cdkey"],
	"application/vnd.mfer": ["mwf"],
	"application/vnd.mfmp": ["mfm"],
	"application/vnd.micrografx.flo": ["flo"],
	"application/vnd.micrografx.igx": ["igx"],
	"application/vnd.mif": ["mif"],
	"application/vnd.mobius.daf": ["daf"],
	"application/vnd.mobius.dis": ["dis"],
	"application/vnd.mobius.mbk": ["mbk"],
	"application/vnd.mobius.mqy": ["mqy"],
	"application/vnd.mobius.msl": ["msl"],
	"application/vnd.mobius.plc": ["plc"],
	"application/vnd.mobius.txf": ["txf"],
	"application/vnd.mophun.application": ["mpn"],
	"application/vnd.mophun.certificate": ["mpc"],
	"application/vnd.mozilla.xul+xml": ["xul"],
	"application/vnd.ms-artgalry": ["cil"],
	"application/vnd.ms-cab-compressed": ["cab"],
	"application/vnd.ms-excel": [
		"xls",
		"xlm",
		"xla",
		"xlc",
		"xlt",
		"xlw"
	],
	"application/vnd.ms-excel.addin.macroenabled.12": ["xlam"],
	"application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"],
	"application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"],
	"application/vnd.ms-excel.template.macroenabled.12": ["xltm"],
	"application/vnd.ms-fontobject": ["eot"],
	"application/vnd.ms-htmlhelp": ["chm"],
	"application/vnd.ms-ims": ["ims"],
	"application/vnd.ms-lrm": ["lrm"],
	"application/vnd.ms-officetheme": ["thmx"],
	"application/vnd.ms-outlook": ["msg"],
	"application/vnd.ms-pki.seccat": ["cat"],
	"application/vnd.ms-pki.stl": ["*stl"],
	"application/vnd.ms-powerpoint": [
		"ppt",
		"pps",
		"pot"
	],
	"application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"],
	"application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"],
	"application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"],
	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"],
	"application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"],
	"application/vnd.ms-project": ["*mpp", "mpt"],
	"application/vnd.ms-visio.viewer": ["vdx"],
	"application/vnd.ms-word.document.macroenabled.12": ["docm"],
	"application/vnd.ms-word.template.macroenabled.12": ["dotm"],
	"application/vnd.ms-works": [
		"wps",
		"wks",
		"wcm",
		"wdb"
	],
	"application/vnd.ms-wpl": ["wpl"],
	"application/vnd.ms-xpsdocument": ["xps"],
	"application/vnd.mseq": ["mseq"],
	"application/vnd.musician": ["mus"],
	"application/vnd.muvee.style": ["msty"],
	"application/vnd.mynfc": ["taglet"],
	"application/vnd.nato.bindingdataobject+xml": ["bdo"],
	"application/vnd.neurolanguage.nlu": ["nlu"],
	"application/vnd.nitf": ["ntf", "nitf"],
	"application/vnd.noblenet-directory": ["nnd"],
	"application/vnd.noblenet-sealer": ["nns"],
	"application/vnd.noblenet-web": ["nnw"],
	"application/vnd.nokia.n-gage.ac+xml": ["*ac"],
	"application/vnd.nokia.n-gage.data": ["ngdat"],
	"application/vnd.nokia.n-gage.symbian.install": ["n-gage"],
	"application/vnd.nokia.radio-preset": ["rpst"],
	"application/vnd.nokia.radio-presets": ["rpss"],
	"application/vnd.novadigm.edm": ["edm"],
	"application/vnd.novadigm.edx": ["edx"],
	"application/vnd.novadigm.ext": ["ext"],
	"application/vnd.oasis.opendocument.chart": ["odc"],
	"application/vnd.oasis.opendocument.chart-template": ["otc"],
	"application/vnd.oasis.opendocument.database": ["odb"],
	"application/vnd.oasis.opendocument.formula": ["odf"],
	"application/vnd.oasis.opendocument.formula-template": ["odft"],
	"application/vnd.oasis.opendocument.graphics": ["odg"],
	"application/vnd.oasis.opendocument.graphics-template": ["otg"],
	"application/vnd.oasis.opendocument.image": ["odi"],
	"application/vnd.oasis.opendocument.image-template": ["oti"],
	"application/vnd.oasis.opendocument.presentation": ["odp"],
	"application/vnd.oasis.opendocument.presentation-template": ["otp"],
	"application/vnd.oasis.opendocument.spreadsheet": ["ods"],
	"application/vnd.oasis.opendocument.spreadsheet-template": ["ots"],
	"application/vnd.oasis.opendocument.text": ["odt"],
	"application/vnd.oasis.opendocument.text-master": ["odm"],
	"application/vnd.oasis.opendocument.text-template": ["ott"],
	"application/vnd.oasis.opendocument.text-web": ["oth"],
	"application/vnd.olpc-sugar": ["xo"],
	"application/vnd.oma.dd2+xml": ["dd2"],
	"application/vnd.openblox.game+xml": ["obgx"],
	"application/vnd.openofficeorg.extension": ["oxt"],
	"application/vnd.openstreetmap.data+xml": ["osm"],
	"application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"],
	"application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"],
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"],
	"application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"],
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"],
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"],
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"],
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"],
	"application/vnd.osgeo.mapguide.package": ["mgp"],
	"application/vnd.osgi.dp": ["dp"],
	"application/vnd.osgi.subsystem": ["esa"],
	"application/vnd.palm": [
		"pdb",
		"pqa",
		"oprc"
	],
	"application/vnd.pawaafile": ["paw"],
	"application/vnd.pg.format": ["str"],
	"application/vnd.pg.osasli": ["ei6"],
	"application/vnd.picsel": ["efif"],
	"application/vnd.pmi.widget": ["wg"],
	"application/vnd.pocketlearn": ["plf"],
	"application/vnd.powerbuilder6": ["pbd"],
	"application/vnd.previewsystems.box": ["box"],
	"application/vnd.procrate.brushset": ["brushset"],
	"application/vnd.procreate.brush": ["brush"],
	"application/vnd.procreate.dream": ["drm"],
	"application/vnd.proteus.magazine": ["mgz"],
	"application/vnd.publishare-delta-tree": ["qps"],
	"application/vnd.pvi.ptid1": ["ptid"],
	"application/vnd.pwg-xhtml-print+xml": ["xhtm"],
	"application/vnd.quark.quarkxpress": [
		"qxd",
		"qxt",
		"qwd",
		"qwt",
		"qxl",
		"qxb"
	],
	"application/vnd.rar": ["rar"],
	"application/vnd.realvnc.bed": ["bed"],
	"application/vnd.recordare.musicxml": ["mxl"],
	"application/vnd.recordare.musicxml+xml": ["musicxml"],
	"application/vnd.rig.cryptonote": ["cryptonote"],
	"application/vnd.rim.cod": ["cod"],
	"application/vnd.rn-realmedia": ["rm"],
	"application/vnd.rn-realmedia-vbr": ["rmvb"],
	"application/vnd.route66.link66+xml": ["link66"],
	"application/vnd.sailingtracker.track": ["st"],
	"application/vnd.seemail": ["see"],
	"application/vnd.sema": ["sema"],
	"application/vnd.semd": ["semd"],
	"application/vnd.semf": ["semf"],
	"application/vnd.shana.informed.formdata": ["ifm"],
	"application/vnd.shana.informed.formtemplate": ["itp"],
	"application/vnd.shana.informed.interchange": ["iif"],
	"application/vnd.shana.informed.package": ["ipk"],
	"application/vnd.simtech-mindmapper": ["twd", "twds"],
	"application/vnd.smaf": ["mmf"],
	"application/vnd.smart.teacher": ["teacher"],
	"application/vnd.software602.filler.form+xml": ["fo"],
	"application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"],
	"application/vnd.spotfire.dxp": ["dxp"],
	"application/vnd.spotfire.sfs": ["sfs"],
	"application/vnd.stardivision.calc": ["sdc"],
	"application/vnd.stardivision.draw": ["sda"],
	"application/vnd.stardivision.impress": ["sdd"],
	"application/vnd.stardivision.math": ["smf"],
	"application/vnd.stardivision.writer": ["sdw", "vor"],
	"application/vnd.stardivision.writer-global": ["sgl"],
	"application/vnd.stepmania.package": ["smzip"],
	"application/vnd.stepmania.stepchart": ["sm"],
	"application/vnd.sun.wadl+xml": ["wadl"],
	"application/vnd.sun.xml.calc": ["sxc"],
	"application/vnd.sun.xml.calc.template": ["stc"],
	"application/vnd.sun.xml.draw": ["sxd"],
	"application/vnd.sun.xml.draw.template": ["std"],
	"application/vnd.sun.xml.impress": ["sxi"],
	"application/vnd.sun.xml.impress.template": ["sti"],
	"application/vnd.sun.xml.math": ["sxm"],
	"application/vnd.sun.xml.writer": ["sxw"],
	"application/vnd.sun.xml.writer.global": ["sxg"],
	"application/vnd.sun.xml.writer.template": ["stw"],
	"application/vnd.sus-calendar": ["sus", "susp"],
	"application/vnd.svd": ["svd"],
	"application/vnd.symbian.install": ["sis", "sisx"],
	"application/vnd.syncml+xml": ["xsm"],
	"application/vnd.syncml.dm+wbxml": ["bdm"],
	"application/vnd.syncml.dm+xml": ["xdm"],
	"application/vnd.syncml.dmddf+xml": ["ddf"],
	"application/vnd.tao.intent-module-archive": ["tao"],
	"application/vnd.tcpdump.pcap": [
		"pcap",
		"cap",
		"dmp"
	],
	"application/vnd.tmobile-livetv": ["tmo"],
	"application/vnd.trid.tpt": ["tpt"],
	"application/vnd.triscape.mxs": ["mxs"],
	"application/vnd.trueapp": ["tra"],
	"application/vnd.ufdl": ["ufd", "ufdl"],
	"application/vnd.uiq.theme": ["utz"],
	"application/vnd.umajin": ["umj"],
	"application/vnd.unity": ["unityweb"],
	"application/vnd.uoml+xml": ["uoml", "uo"],
	"application/vnd.vcx": ["vcx"],
	"application/vnd.visio": [
		"vsd",
		"vst",
		"vss",
		"vsw",
		"vsdx",
		"vtx"
	],
	"application/vnd.visionary": ["vis"],
	"application/vnd.vsf": ["vsf"],
	"application/vnd.wap.wbxml": ["wbxml"],
	"application/vnd.wap.wmlc": ["wmlc"],
	"application/vnd.wap.wmlscriptc": ["wmlsc"],
	"application/vnd.webturbo": ["wtb"],
	"application/vnd.wolfram.player": ["nbp"],
	"application/vnd.wordperfect": ["wpd"],
	"application/vnd.wqd": ["wqd"],
	"application/vnd.wt.stf": ["stf"],
	"application/vnd.xara": ["xar"],
	"application/vnd.xfdl": ["xfdl"],
	"application/vnd.yamaha.hv-dic": ["hvd"],
	"application/vnd.yamaha.hv-script": ["hvs"],
	"application/vnd.yamaha.hv-voice": ["hvp"],
	"application/vnd.yamaha.openscoreformat": ["osf"],
	"application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"],
	"application/vnd.yamaha.smaf-audio": ["saf"],
	"application/vnd.yamaha.smaf-phrase": ["spf"],
	"application/vnd.yellowriver-custom-menu": ["cmp"],
	"application/vnd.zul": ["zir", "zirz"],
	"application/vnd.zzazz.deck+xml": ["zaz"],
	"application/x-7z-compressed": ["7z"],
	"application/x-abiword": ["abw"],
	"application/x-ace-compressed": ["ace"],
	"application/x-apple-diskimage": ["*dmg"],
	"application/x-arj": ["arj"],
	"application/x-authorware-bin": [
		"aab",
		"x32",
		"u32",
		"vox"
	],
	"application/x-authorware-map": ["aam"],
	"application/x-authorware-seg": ["aas"],
	"application/x-bcpio": ["bcpio"],
	"application/x-bdoc": ["*bdoc"],
	"application/x-bittorrent": ["torrent"],
	"application/x-blender": ["blend"],
	"application/x-blorb": ["blb", "blorb"],
	"application/x-bzip": ["bz"],
	"application/x-bzip2": ["bz2", "boz"],
	"application/x-cbr": [
		"cbr",
		"cba",
		"cbt",
		"cbz",
		"cb7"
	],
	"application/x-cdlink": ["vcd"],
	"application/x-cfs-compressed": ["cfs"],
	"application/x-chat": ["chat"],
	"application/x-chess-pgn": ["pgn"],
	"application/x-chrome-extension": ["crx"],
	"application/x-cocoa": ["cco"],
	"application/x-compressed": ["*rar"],
	"application/x-conference": ["nsc"],
	"application/x-cpio": ["cpio"],
	"application/x-csh": ["csh"],
	"application/x-debian-package": ["*deb", "udeb"],
	"application/x-dgc-compressed": ["dgc"],
	"application/x-director": [
		"dir",
		"dcr",
		"dxr",
		"cst",
		"cct",
		"cxt",
		"w3d",
		"fgd",
		"swa"
	],
	"application/x-doom": ["wad"],
	"application/x-dtbncx+xml": ["ncx"],
	"application/x-dtbook+xml": ["dtb"],
	"application/x-dtbresource+xml": ["res"],
	"application/x-dvi": ["dvi"],
	"application/x-envoy": ["evy"],
	"application/x-eva": ["eva"],
	"application/x-font-bdf": ["bdf"],
	"application/x-font-ghostscript": ["gsf"],
	"application/x-font-linux-psf": ["psf"],
	"application/x-font-pcf": ["pcf"],
	"application/x-font-snf": ["snf"],
	"application/x-font-type1": [
		"pfa",
		"pfb",
		"pfm",
		"afm"
	],
	"application/x-freearc": ["arc"],
	"application/x-futuresplash": ["spl"],
	"application/x-gca-compressed": ["gca"],
	"application/x-glulx": ["ulx"],
	"application/x-gnumeric": ["gnumeric"],
	"application/x-gramps-xml": ["gramps"],
	"application/x-gtar": ["gtar"],
	"application/x-hdf": ["hdf"],
	"application/x-httpd-php": ["php"],
	"application/x-install-instructions": ["install"],
	"application/x-ipynb+json": ["ipynb"],
	"application/x-iso9660-image": ["*iso"],
	"application/x-iwork-keynote-sffkey": ["*key"],
	"application/x-iwork-numbers-sffnumbers": ["*numbers"],
	"application/x-iwork-pages-sffpages": ["*pages"],
	"application/x-java-archive-diff": ["jardiff"],
	"application/x-java-jnlp-file": ["jnlp"],
	"application/x-keepass2": ["kdbx"],
	"application/x-latex": ["latex"],
	"application/x-lua-bytecode": ["luac"],
	"application/x-lzh-compressed": ["lzh", "lha"],
	"application/x-makeself": ["run"],
	"application/x-mie": ["mie"],
	"application/x-mobipocket-ebook": ["*prc", "mobi"],
	"application/x-ms-application": ["application"],
	"application/x-ms-shortcut": ["lnk"],
	"application/x-ms-wmd": ["wmd"],
	"application/x-ms-wmz": ["wmz"],
	"application/x-ms-xbap": ["xbap"],
	"application/x-msaccess": ["mdb"],
	"application/x-msbinder": ["obd"],
	"application/x-mscardfile": ["crd"],
	"application/x-msclip": ["clp"],
	"application/x-msdos-program": ["*exe"],
	"application/x-msdownload": [
		"*exe",
		"*dll",
		"com",
		"bat",
		"*msi"
	],
	"application/x-msmediaview": [
		"mvb",
		"m13",
		"m14"
	],
	"application/x-msmetafile": [
		"*wmf",
		"*wmz",
		"*emf",
		"emz"
	],
	"application/x-msmoney": ["mny"],
	"application/x-mspublisher": ["pub"],
	"application/x-msschedule": ["scd"],
	"application/x-msterminal": ["trm"],
	"application/x-mswrite": ["wri"],
	"application/x-netcdf": ["nc", "cdf"],
	"application/x-ns-proxy-autoconfig": ["pac"],
	"application/x-nzb": ["nzb"],
	"application/x-perl": ["pl", "pm"],
	"application/x-pilot": ["*prc", "*pdb"],
	"application/x-pkcs12": ["p12", "pfx"],
	"application/x-pkcs7-certificates": ["p7b", "spc"],
	"application/x-pkcs7-certreqresp": ["p7r"],
	"application/x-rar-compressed": ["*rar"],
	"application/x-redhat-package-manager": ["rpm"],
	"application/x-research-info-systems": ["ris"],
	"application/x-sea": ["sea"],
	"application/x-sh": ["sh"],
	"application/x-shar": ["shar"],
	"application/x-shockwave-flash": ["swf"],
	"application/x-silverlight-app": ["xap"],
	"application/x-sql": ["*sql"],
	"application/x-stuffit": ["sit"],
	"application/x-stuffitx": ["sitx"],
	"application/x-subrip": ["srt"],
	"application/x-sv4cpio": ["sv4cpio"],
	"application/x-sv4crc": ["sv4crc"],
	"application/x-t3vm-image": ["t3"],
	"application/x-tads": ["gam"],
	"application/x-tar": ["tar"],
	"application/x-tcl": ["tcl", "tk"],
	"application/x-tex": ["tex"],
	"application/x-tex-tfm": ["tfm"],
	"application/x-texinfo": ["texinfo", "texi"],
	"application/x-tgif": ["*obj"],
	"application/x-ustar": ["ustar"],
	"application/x-virtualbox-hdd": ["hdd"],
	"application/x-virtualbox-ova": ["ova"],
	"application/x-virtualbox-ovf": ["ovf"],
	"application/x-virtualbox-vbox": ["vbox"],
	"application/x-virtualbox-vbox-extpack": ["vbox-extpack"],
	"application/x-virtualbox-vdi": ["vdi"],
	"application/x-virtualbox-vhd": ["vhd"],
	"application/x-virtualbox-vmdk": ["vmdk"],
	"application/x-wais-source": ["src"],
	"application/x-web-app-manifest+json": ["webapp"],
	"application/x-x509-ca-cert": [
		"der",
		"crt",
		"pem"
	],
	"application/x-xfig": ["fig"],
	"application/x-xliff+xml": ["*xlf"],
	"application/x-xpinstall": ["xpi"],
	"application/x-xz": ["xz"],
	"application/x-zip-compressed": ["*zip"],
	"application/x-zmachine": [
		"z1",
		"z2",
		"z3",
		"z4",
		"z5",
		"z6",
		"z7",
		"z8"
	],
	"audio/vnd.dece.audio": ["uva", "uvva"],
	"audio/vnd.digital-winds": ["eol"],
	"audio/vnd.dra": ["dra"],
	"audio/vnd.dts": ["dts"],
	"audio/vnd.dts.hd": ["dtshd"],
	"audio/vnd.lucent.voice": ["lvp"],
	"audio/vnd.ms-playready.media.pya": ["pya"],
	"audio/vnd.nuera.ecelp4800": ["ecelp4800"],
	"audio/vnd.nuera.ecelp7470": ["ecelp7470"],
	"audio/vnd.nuera.ecelp9600": ["ecelp9600"],
	"audio/vnd.rip": ["rip"],
	"audio/x-aac": ["*aac"],
	"audio/x-aiff": [
		"aif",
		"aiff",
		"aifc"
	],
	"audio/x-caf": ["caf"],
	"audio/x-flac": ["flac"],
	"audio/x-m4a": ["*m4a"],
	"audio/x-matroska": ["mka"],
	"audio/x-mpegurl": ["m3u"],
	"audio/x-ms-wax": ["wax"],
	"audio/x-ms-wma": ["wma"],
	"audio/x-pn-realaudio": ["ram", "ra"],
	"audio/x-pn-realaudio-plugin": ["rmp"],
	"audio/x-realaudio": ["*ra"],
	"audio/x-wav": ["*wav"],
	"chemical/x-cdx": ["cdx"],
	"chemical/x-cif": ["cif"],
	"chemical/x-cmdf": ["cmdf"],
	"chemical/x-cml": ["cml"],
	"chemical/x-csml": ["csml"],
	"chemical/x-xyz": ["xyz"],
	"image/prs.btif": ["btif", "btf"],
	"image/prs.pti": ["pti"],
	"image/vnd.adobe.photoshop": ["psd"],
	"image/vnd.airzip.accelerator.azv": ["azv"],
	"image/vnd.dece.graphic": [
		"uvi",
		"uvvi",
		"uvg",
		"uvvg"
	],
	"image/vnd.djvu": ["djvu", "djv"],
	"image/vnd.dvb.subtitle": ["*sub"],
	"image/vnd.dwg": ["dwg"],
	"image/vnd.dxf": ["dxf"],
	"image/vnd.fastbidsheet": ["fbs"],
	"image/vnd.fpx": ["fpx"],
	"image/vnd.fst": ["fst"],
	"image/vnd.fujixerox.edmics-mmr": ["mmr"],
	"image/vnd.fujixerox.edmics-rlc": ["rlc"],
	"image/vnd.microsoft.icon": ["ico"],
	"image/vnd.ms-dds": ["dds"],
	"image/vnd.ms-modi": ["mdi"],
	"image/vnd.ms-photo": ["wdp"],
	"image/vnd.net-fpx": ["npx"],
	"image/vnd.pco.b16": ["b16"],
	"image/vnd.tencent.tap": ["tap"],
	"image/vnd.valve.source.texture": ["vtf"],
	"image/vnd.wap.wbmp": ["wbmp"],
	"image/vnd.xiff": ["xif"],
	"image/vnd.zbrush.pcx": ["pcx"],
	"image/x-3ds": ["3ds"],
	"image/x-adobe-dng": ["dng"],
	"image/x-cmu-raster": ["ras"],
	"image/x-cmx": ["cmx"],
	"image/x-freehand": [
		"fh",
		"fhc",
		"fh4",
		"fh5",
		"fh7"
	],
	"image/x-icon": ["*ico"],
	"image/x-jng": ["jng"],
	"image/x-mrsid-image": ["sid"],
	"image/x-ms-bmp": ["*bmp"],
	"image/x-pcx": ["*pcx"],
	"image/x-pict": ["pic", "pct"],
	"image/x-portable-anymap": ["pnm"],
	"image/x-portable-bitmap": ["pbm"],
	"image/x-portable-graymap": ["pgm"],
	"image/x-portable-pixmap": ["ppm"],
	"image/x-rgb": ["rgb"],
	"image/x-tga": ["tga"],
	"image/x-xbitmap": ["xbm"],
	"image/x-xpixmap": ["xpm"],
	"image/x-xwindowdump": ["xwd"],
	"message/vnd.wfa.wsc": ["wsc"],
	"model/vnd.bary": ["bary"],
	"model/vnd.cld": ["cld"],
	"model/vnd.collada+xml": ["dae"],
	"model/vnd.dwf": ["dwf"],
	"model/vnd.gdl": ["gdl"],
	"model/vnd.gtw": ["gtw"],
	"model/vnd.mts": ["*mts"],
	"model/vnd.opengex": ["ogex"],
	"model/vnd.parasolid.transmit.binary": ["x_b"],
	"model/vnd.parasolid.transmit.text": ["x_t"],
	"model/vnd.pytha.pyox": ["pyo", "pyox"],
	"model/vnd.sap.vds": ["vds"],
	"model/vnd.usda": ["usda"],
	"model/vnd.usdz+zip": ["usdz"],
	"model/vnd.valve.source.compiled-map": ["bsp"],
	"model/vnd.vtu": ["vtu"],
	"text/prs.lines.tag": ["dsc"],
	"text/vnd.curl": ["curl"],
	"text/vnd.curl.dcurl": ["dcurl"],
	"text/vnd.curl.mcurl": ["mcurl"],
	"text/vnd.curl.scurl": ["scurl"],
	"text/vnd.dvb.subtitle": ["sub"],
	"text/vnd.familysearch.gedcom": ["ged"],
	"text/vnd.fly": ["fly"],
	"text/vnd.fmi.flexstor": ["flx"],
	"text/vnd.graphviz": ["gv"],
	"text/vnd.in3d.3dml": ["3dml"],
	"text/vnd.in3d.spot": ["spot"],
	"text/vnd.sun.j2me.app-descriptor": ["jad"],
	"text/vnd.wap.wml": ["wml"],
	"text/vnd.wap.wmlscript": ["wmls"],
	"text/x-asm": ["s", "asm"],
	"text/x-c": [
		"c",
		"cc",
		"cxx",
		"cpp",
		"h",
		"hh",
		"dic"
	],
	"text/x-component": ["htc"],
	"text/x-fortran": [
		"f",
		"for",
		"f77",
		"f90"
	],
	"text/x-handlebars-template": ["hbs"],
	"text/x-java-source": ["java"],
	"text/x-lua": ["lua"],
	"text/x-markdown": ["mkd"],
	"text/x-nfo": ["nfo"],
	"text/x-opml": ["opml"],
	"text/x-org": ["*org"],
	"text/x-pascal": ["p", "pas"],
	"text/x-processing": ["pde"],
	"text/x-sass": ["sass"],
	"text/x-scss": ["scss"],
	"text/x-setext": ["etx"],
	"text/x-sfv": ["sfv"],
	"text/x-suse-ymp": ["ymp"],
	"text/x-uuencode": ["uu"],
	"text/x-vcalendar": ["vcs"],
	"text/x-vcard": ["vcf"],
	"video/vnd.dece.hd": ["uvh", "uvvh"],
	"video/vnd.dece.mobile": ["uvm", "uvvm"],
	"video/vnd.dece.pd": ["uvp", "uvvp"],
	"video/vnd.dece.sd": ["uvs", "uvvs"],
	"video/vnd.dece.video": ["uvv", "uvvv"],
	"video/vnd.dvb.file": ["dvb"],
	"video/vnd.fvt": ["fvt"],
	"video/vnd.mpegurl": ["mxu", "m4u"],
	"video/vnd.ms-playready.media.pyv": ["pyv"],
	"video/vnd.uvvu.mp4": ["uvu", "uvvu"],
	"video/vnd.vivo": ["viv"],
	"video/x-f4v": ["f4v"],
	"video/x-fli": ["fli"],
	"video/x-flv": ["flv"],
	"video/x-m4v": ["m4v"],
	"video/x-matroska": [
		"mkv",
		"mk3d",
		"mks"
	],
	"video/x-mng": ["mng"],
	"video/x-ms-asf": ["asf", "asx"],
	"video/x-ms-vob": ["vob"],
	"video/x-ms-wm": ["wm"],
	"video/x-ms-wmv": ["wmv"],
	"video/x-ms-wmx": ["wmx"],
	"video/x-ms-wvx": ["wvx"],
	"video/x-msvideo": ["avi"],
	"video/x-sgi-movie": ["movie"],
	"video/x-smv": ["smv"],
	"x-conference/x-cooltalk": ["ice"]
};
Object.freeze(types$1);
var other_default = types$1;

//#endregion
//#region node_modules/.pnpm/mime@4.0.7/node_modules/mime/dist/types/standard.js
const types = {
	"application/andrew-inset": ["ez"],
	"application/appinstaller": ["appinstaller"],
	"application/applixware": ["aw"],
	"application/appx": ["appx"],
	"application/appxbundle": ["appxbundle"],
	"application/atom+xml": ["atom"],
	"application/atomcat+xml": ["atomcat"],
	"application/atomdeleted+xml": ["atomdeleted"],
	"application/atomsvc+xml": ["atomsvc"],
	"application/atsc-dwd+xml": ["dwd"],
	"application/atsc-held+xml": ["held"],
	"application/atsc-rsat+xml": ["rsat"],
	"application/automationml-aml+xml": ["aml"],
	"application/automationml-amlx+zip": ["amlx"],
	"application/bdoc": ["bdoc"],
	"application/calendar+xml": ["xcs"],
	"application/ccxml+xml": ["ccxml"],
	"application/cdfx+xml": ["cdfx"],
	"application/cdmi-capability": ["cdmia"],
	"application/cdmi-container": ["cdmic"],
	"application/cdmi-domain": ["cdmid"],
	"application/cdmi-object": ["cdmio"],
	"application/cdmi-queue": ["cdmiq"],
	"application/cpl+xml": ["cpl"],
	"application/cu-seeme": ["cu"],
	"application/cwl": ["cwl"],
	"application/dash+xml": ["mpd"],
	"application/dash-patch+xml": ["mpp"],
	"application/davmount+xml": ["davmount"],
	"application/dicom": ["dcm"],
	"application/docbook+xml": ["dbk"],
	"application/dssc+der": ["dssc"],
	"application/dssc+xml": ["xdssc"],
	"application/ecmascript": ["ecma"],
	"application/emma+xml": ["emma"],
	"application/emotionml+xml": ["emotionml"],
	"application/epub+zip": ["epub"],
	"application/exi": ["exi"],
	"application/express": ["exp"],
	"application/fdf": ["fdf"],
	"application/fdt+xml": ["fdt"],
	"application/font-tdpfr": ["pfr"],
	"application/geo+json": ["geojson"],
	"application/gml+xml": ["gml"],
	"application/gpx+xml": ["gpx"],
	"application/gxf": ["gxf"],
	"application/gzip": ["gz"],
	"application/hjson": ["hjson"],
	"application/hyperstudio": ["stk"],
	"application/inkml+xml": ["ink", "inkml"],
	"application/ipfix": ["ipfix"],
	"application/its+xml": ["its"],
	"application/java-archive": [
		"jar",
		"war",
		"ear"
	],
	"application/java-serialized-object": ["ser"],
	"application/java-vm": ["class"],
	"application/javascript": ["*js"],
	"application/json": ["json", "map"],
	"application/json5": ["json5"],
	"application/jsonml+json": ["jsonml"],
	"application/ld+json": ["jsonld"],
	"application/lgr+xml": ["lgr"],
	"application/lost+xml": ["lostxml"],
	"application/mac-binhex40": ["hqx"],
	"application/mac-compactpro": ["cpt"],
	"application/mads+xml": ["mads"],
	"application/manifest+json": ["webmanifest"],
	"application/marc": ["mrc"],
	"application/marcxml+xml": ["mrcx"],
	"application/mathematica": [
		"ma",
		"nb",
		"mb"
	],
	"application/mathml+xml": ["mathml"],
	"application/mbox": ["mbox"],
	"application/media-policy-dataset+xml": ["mpf"],
	"application/mediaservercontrol+xml": ["mscml"],
	"application/metalink+xml": ["metalink"],
	"application/metalink4+xml": ["meta4"],
	"application/mets+xml": ["mets"],
	"application/mmt-aei+xml": ["maei"],
	"application/mmt-usd+xml": ["musd"],
	"application/mods+xml": ["mods"],
	"application/mp21": ["m21", "mp21"],
	"application/mp4": [
		"*mp4",
		"*mpg4",
		"mp4s",
		"m4p"
	],
	"application/msix": ["msix"],
	"application/msixbundle": ["msixbundle"],
	"application/msword": ["doc", "dot"],
	"application/mxf": ["mxf"],
	"application/n-quads": ["nq"],
	"application/n-triples": ["nt"],
	"application/node": ["cjs"],
	"application/octet-stream": [
		"bin",
		"dms",
		"lrf",
		"mar",
		"so",
		"dist",
		"distz",
		"pkg",
		"bpk",
		"dump",
		"elc",
		"deploy",
		"exe",
		"dll",
		"deb",
		"dmg",
		"iso",
		"img",
		"msi",
		"msp",
		"msm",
		"buffer"
	],
	"application/oda": ["oda"],
	"application/oebps-package+xml": ["opf"],
	"application/ogg": ["ogx"],
	"application/omdoc+xml": ["omdoc"],
	"application/onenote": [
		"onetoc",
		"onetoc2",
		"onetmp",
		"onepkg",
		"one",
		"onea"
	],
	"application/oxps": ["oxps"],
	"application/p2p-overlay+xml": ["relo"],
	"application/patch-ops-error+xml": ["xer"],
	"application/pdf": ["pdf"],
	"application/pgp-encrypted": ["pgp"],
	"application/pgp-keys": ["asc"],
	"application/pgp-signature": ["sig", "*asc"],
	"application/pics-rules": ["prf"],
	"application/pkcs10": ["p10"],
	"application/pkcs7-mime": ["p7m", "p7c"],
	"application/pkcs7-signature": ["p7s"],
	"application/pkcs8": ["p8"],
	"application/pkix-attr-cert": ["ac"],
	"application/pkix-cert": ["cer"],
	"application/pkix-crl": ["crl"],
	"application/pkix-pkipath": ["pkipath"],
	"application/pkixcmp": ["pki"],
	"application/pls+xml": ["pls"],
	"application/postscript": [
		"ai",
		"eps",
		"ps"
	],
	"application/provenance+xml": ["provx"],
	"application/pskc+xml": ["pskcxml"],
	"application/raml+yaml": ["raml"],
	"application/rdf+xml": ["rdf", "owl"],
	"application/reginfo+xml": ["rif"],
	"application/relax-ng-compact-syntax": ["rnc"],
	"application/resource-lists+xml": ["rl"],
	"application/resource-lists-diff+xml": ["rld"],
	"application/rls-services+xml": ["rs"],
	"application/route-apd+xml": ["rapd"],
	"application/route-s-tsid+xml": ["sls"],
	"application/route-usd+xml": ["rusd"],
	"application/rpki-ghostbusters": ["gbr"],
	"application/rpki-manifest": ["mft"],
	"application/rpki-roa": ["roa"],
	"application/rsd+xml": ["rsd"],
	"application/rss+xml": ["rss"],
	"application/rtf": ["rtf"],
	"application/sbml+xml": ["sbml"],
	"application/scvp-cv-request": ["scq"],
	"application/scvp-cv-response": ["scs"],
	"application/scvp-vp-request": ["spq"],
	"application/scvp-vp-response": ["spp"],
	"application/sdp": ["sdp"],
	"application/senml+xml": ["senmlx"],
	"application/sensml+xml": ["sensmlx"],
	"application/set-payment-initiation": ["setpay"],
	"application/set-registration-initiation": ["setreg"],
	"application/shf+xml": ["shf"],
	"application/sieve": ["siv", "sieve"],
	"application/smil+xml": ["smi", "smil"],
	"application/sparql-query": ["rq"],
	"application/sparql-results+xml": ["srx"],
	"application/sql": ["sql"],
	"application/srgs": ["gram"],
	"application/srgs+xml": ["grxml"],
	"application/sru+xml": ["sru"],
	"application/ssdl+xml": ["ssdl"],
	"application/ssml+xml": ["ssml"],
	"application/swid+xml": ["swidtag"],
	"application/tei+xml": ["tei", "teicorpus"],
	"application/thraud+xml": ["tfi"],
	"application/timestamped-data": ["tsd"],
	"application/toml": ["toml"],
	"application/trig": ["trig"],
	"application/ttml+xml": ["ttml"],
	"application/ubjson": ["ubj"],
	"application/urc-ressheet+xml": ["rsheet"],
	"application/urc-targetdesc+xml": ["td"],
	"application/voicexml+xml": ["vxml"],
	"application/wasm": ["wasm"],
	"application/watcherinfo+xml": ["wif"],
	"application/widget": ["wgt"],
	"application/winhlp": ["hlp"],
	"application/wsdl+xml": ["wsdl"],
	"application/wspolicy+xml": ["wspolicy"],
	"application/xaml+xml": ["xaml"],
	"application/xcap-att+xml": ["xav"],
	"application/xcap-caps+xml": ["xca"],
	"application/xcap-diff+xml": ["xdf"],
	"application/xcap-el+xml": ["xel"],
	"application/xcap-ns+xml": ["xns"],
	"application/xenc+xml": ["xenc"],
	"application/xfdf": ["xfdf"],
	"application/xhtml+xml": ["xhtml", "xht"],
	"application/xliff+xml": ["xlf"],
	"application/xml": [
		"xml",
		"xsl",
		"xsd",
		"rng"
	],
	"application/xml-dtd": ["dtd"],
	"application/xop+xml": ["xop"],
	"application/xproc+xml": ["xpl"],
	"application/xslt+xml": ["*xsl", "xslt"],
	"application/xspf+xml": ["xspf"],
	"application/xv+xml": [
		"mxml",
		"xhvml",
		"xvml",
		"xvm"
	],
	"application/yang": ["yang"],
	"application/yin+xml": ["yin"],
	"application/zip": ["zip"],
	"application/zip+dotlottie": ["lottie"],
	"audio/3gpp": ["*3gpp"],
	"audio/aac": ["adts", "aac"],
	"audio/adpcm": ["adp"],
	"audio/amr": ["amr"],
	"audio/basic": ["au", "snd"],
	"audio/midi": [
		"mid",
		"midi",
		"kar",
		"rmi"
	],
	"audio/mobile-xmf": ["mxmf"],
	"audio/mp3": ["*mp3"],
	"audio/mp4": [
		"m4a",
		"mp4a",
		"m4b"
	],
	"audio/mpeg": [
		"mpga",
		"mp2",
		"mp2a",
		"mp3",
		"m2a",
		"m3a"
	],
	"audio/ogg": [
		"oga",
		"ogg",
		"spx",
		"opus"
	],
	"audio/s3m": ["s3m"],
	"audio/silk": ["sil"],
	"audio/wav": ["wav"],
	"audio/wave": ["*wav"],
	"audio/webm": ["weba"],
	"audio/xm": ["xm"],
	"font/collection": ["ttc"],
	"font/otf": ["otf"],
	"font/ttf": ["ttf"],
	"font/woff": ["woff"],
	"font/woff2": ["woff2"],
	"image/aces": ["exr"],
	"image/apng": ["apng"],
	"image/avci": ["avci"],
	"image/avcs": ["avcs"],
	"image/avif": ["avif"],
	"image/bmp": ["bmp", "dib"],
	"image/cgm": ["cgm"],
	"image/dicom-rle": ["drle"],
	"image/dpx": ["dpx"],
	"image/emf": ["emf"],
	"image/fits": ["fits"],
	"image/g3fax": ["g3"],
	"image/gif": ["gif"],
	"image/heic": ["heic"],
	"image/heic-sequence": ["heics"],
	"image/heif": ["heif"],
	"image/heif-sequence": ["heifs"],
	"image/hej2k": ["hej2"],
	"image/ief": ["ief"],
	"image/jaii": ["jaii"],
	"image/jais": ["jais"],
	"image/jls": ["jls"],
	"image/jp2": ["jp2", "jpg2"],
	"image/jpeg": [
		"jpg",
		"jpeg",
		"jpe"
	],
	"image/jph": ["jph"],
	"image/jphc": ["jhc"],
	"image/jpm": ["jpm", "jpgm"],
	"image/jpx": ["jpx", "jpf"],
	"image/jxl": ["jxl"],
	"image/jxr": ["jxr"],
	"image/jxra": ["jxra"],
	"image/jxrs": ["jxrs"],
	"image/jxs": ["jxs"],
	"image/jxsc": ["jxsc"],
	"image/jxsi": ["jxsi"],
	"image/jxss": ["jxss"],
	"image/ktx": ["ktx"],
	"image/ktx2": ["ktx2"],
	"image/pjpeg": ["jfif"],
	"image/png": ["png"],
	"image/sgi": ["sgi"],
	"image/svg+xml": ["svg", "svgz"],
	"image/t38": ["t38"],
	"image/tiff": ["tif", "tiff"],
	"image/tiff-fx": ["tfx"],
	"image/webp": ["webp"],
	"image/wmf": ["wmf"],
	"message/disposition-notification": ["disposition-notification"],
	"message/global": ["u8msg"],
	"message/global-delivery-status": ["u8dsn"],
	"message/global-disposition-notification": ["u8mdn"],
	"message/global-headers": ["u8hdr"],
	"message/rfc822": [
		"eml",
		"mime",
		"mht",
		"mhtml"
	],
	"model/3mf": ["3mf"],
	"model/gltf+json": ["gltf"],
	"model/gltf-binary": ["glb"],
	"model/iges": ["igs", "iges"],
	"model/jt": ["jt"],
	"model/mesh": [
		"msh",
		"mesh",
		"silo"
	],
	"model/mtl": ["mtl"],
	"model/obj": ["obj"],
	"model/prc": ["prc"],
	"model/step": [
		"step",
		"stp",
		"stpnc",
		"p21",
		"210"
	],
	"model/step+xml": ["stpx"],
	"model/step+zip": ["stpz"],
	"model/step-xml+zip": ["stpxz"],
	"model/stl": ["stl"],
	"model/u3d": ["u3d"],
	"model/vrml": ["wrl", "vrml"],
	"model/x3d+binary": ["*x3db", "x3dbz"],
	"model/x3d+fastinfoset": ["x3db"],
	"model/x3d+vrml": ["*x3dv", "x3dvz"],
	"model/x3d+xml": ["x3d", "x3dz"],
	"model/x3d-vrml": ["x3dv"],
	"text/cache-manifest": ["appcache", "manifest"],
	"text/calendar": ["ics", "ifb"],
	"text/coffeescript": ["coffee", "litcoffee"],
	"text/css": ["css"],
	"text/csv": ["csv"],
	"text/html": [
		"html",
		"htm",
		"shtml"
	],
	"text/jade": ["jade"],
	"text/javascript": ["js", "mjs"],
	"text/jsx": ["jsx"],
	"text/less": ["less"],
	"text/markdown": ["md", "markdown"],
	"text/mathml": ["mml"],
	"text/mdx": ["mdx"],
	"text/n3": ["n3"],
	"text/plain": [
		"txt",
		"text",
		"conf",
		"def",
		"list",
		"log",
		"in",
		"ini"
	],
	"text/richtext": ["rtx"],
	"text/rtf": ["*rtf"],
	"text/sgml": ["sgml", "sgm"],
	"text/shex": ["shex"],
	"text/slim": ["slim", "slm"],
	"text/spdx": ["spdx"],
	"text/stylus": ["stylus", "styl"],
	"text/tab-separated-values": ["tsv"],
	"text/troff": [
		"t",
		"tr",
		"roff",
		"man",
		"me",
		"ms"
	],
	"text/turtle": ["ttl"],
	"text/uri-list": [
		"uri",
		"uris",
		"urls"
	],
	"text/vcard": ["vcard"],
	"text/vtt": ["vtt"],
	"text/wgsl": ["wgsl"],
	"text/xml": ["*xml"],
	"text/yaml": ["yaml", "yml"],
	"video/3gpp": ["3gp", "3gpp"],
	"video/3gpp2": ["3g2"],
	"video/h261": ["h261"],
	"video/h263": ["h263"],
	"video/h264": ["h264"],
	"video/iso.segment": ["m4s"],
	"video/jpeg": ["jpgv"],
	"video/jpm": ["*jpm", "*jpgm"],
	"video/mj2": ["mj2", "mjp2"],
	"video/mp2t": [
		"ts",
		"m2t",
		"m2ts",
		"mts"
	],
	"video/mp4": [
		"mp4",
		"mp4v",
		"mpg4"
	],
	"video/mpeg": [
		"mpeg",
		"mpg",
		"mpe",
		"m1v",
		"m2v"
	],
	"video/ogg": ["ogv"],
	"video/quicktime": ["qt", "mov"],
	"video/webm": ["webm"]
};
Object.freeze(types);
var standard_default = types;

//#endregion
//#region node_modules/.pnpm/mime@4.0.7/node_modules/mime/dist/src/Mime.js
var __classPrivateFieldGet = void 0 && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {
	if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Mime_extensionToType, _Mime_typeToExtension, _Mime_typeToExtensions;
var Mime = class {
	constructor(...args) {
		_Mime_extensionToType.set(this, new Map());
		_Mime_typeToExtension.set(this, new Map());
		_Mime_typeToExtensions.set(this, new Map());
		for (const arg of args) this.define(arg);
	}
	define(typeMap, force = false) {
		for (let [type$1, extensions] of Object.entries(typeMap)) {
			type$1 = type$1.toLowerCase();
			extensions = extensions.map((ext) => ext.toLowerCase());
			if (!__classPrivateFieldGet(this, _Mime_typeToExtensions, "f").has(type$1)) __classPrivateFieldGet(this, _Mime_typeToExtensions, "f").set(type$1, new Set());
			const allExtensions = __classPrivateFieldGet(this, _Mime_typeToExtensions, "f").get(type$1);
			let first = true;
			for (let extension of extensions) {
				const starred = extension.startsWith("*");
				extension = starred ? extension.slice(1) : extension;
				allExtensions?.add(extension);
				if (first) __classPrivateFieldGet(this, _Mime_typeToExtension, "f").set(type$1, extension);
				first = false;
				if (starred) continue;
				const currentType = __classPrivateFieldGet(this, _Mime_extensionToType, "f").get(extension);
				if (currentType && currentType != type$1 && !force) throw new Error(`"${type$1} -> ${extension}" conflicts with "${currentType} -> ${extension}". Pass \`force=true\` to override this definition.`);
				__classPrivateFieldGet(this, _Mime_extensionToType, "f").set(extension, type$1);
			}
		}
		return this;
	}
	getType(path$9) {
		if (typeof path$9 !== "string") return null;
		const last = path$9.replace(/^.*[/\\]/s, "").toLowerCase();
		const ext = last.replace(/^.*\./s, "").toLowerCase();
		const hasPath = last.length < path$9.length;
		const hasDot = ext.length < last.length - 1;
		if (!hasDot && hasPath) return null;
		return __classPrivateFieldGet(this, _Mime_extensionToType, "f").get(ext) ?? null;
	}
	getExtension(type$1) {
		if (typeof type$1 !== "string") return null;
		type$1 = type$1?.split?.(";")[0];
		return (type$1 && __classPrivateFieldGet(this, _Mime_typeToExtension, "f").get(type$1.trim().toLowerCase())) ?? null;
	}
	getAllExtensions(type$1) {
		if (typeof type$1 !== "string") return null;
		return __classPrivateFieldGet(this, _Mime_typeToExtensions, "f").get(type$1.toLowerCase()) ?? null;
	}
	_freeze() {
		this.define = () => {
			throw new Error("define() not allowed for built-in Mime objects. See https://github.com/broofa/mime/blob/main/README.md#custom-mime-instances");
		};
		Object.freeze(this);
		for (const extensions of __classPrivateFieldGet(this, _Mime_typeToExtensions, "f").values()) Object.freeze(extensions);
		return this;
	}
	_getTestState() {
		return {
			types: __classPrivateFieldGet(this, _Mime_extensionToType, "f"),
			extensions: __classPrivateFieldGet(this, _Mime_typeToExtension, "f")
		};
	}
};
_Mime_extensionToType = new WeakMap(), _Mime_typeToExtension = new WeakMap(), _Mime_typeToExtensions = new WeakMap();
var Mime_default = Mime;

//#endregion
//#region node_modules/.pnpm/mime@4.0.7/node_modules/mime/dist/src/index.js
var src_default = new Mime_default(standard_default, other_default)._freeze();

//#endregion
//#region node_modules/.pnpm/ci-info@4.2.0/node_modules/ci-info/vendors.json
var require_vendors = __commonJS({ "node_modules/.pnpm/ci-info@4.2.0/node_modules/ci-info/vendors.json"(exports, module) {
	module.exports = [
		{
			"name": "Agola CI",
			"constant": "AGOLA",
			"env": "AGOLA_GIT_REF",
			"pr": "AGOLA_PULL_REQUEST_ID"
		},
		{
			"name": "Appcircle",
			"constant": "APPCIRCLE",
			"env": "AC_APPCIRCLE",
			"pr": {
				"env": "AC_GIT_PR",
				"ne": "false"
			}
		},
		{
			"name": "AppVeyor",
			"constant": "APPVEYOR",
			"env": "APPVEYOR",
			"pr": "APPVEYOR_PULL_REQUEST_NUMBER"
		},
		{
			"name": "AWS CodeBuild",
			"constant": "CODEBUILD",
			"env": "CODEBUILD_BUILD_ARN",
			"pr": {
				"env": "CODEBUILD_WEBHOOK_EVENT",
				"any": [
					"PULL_REQUEST_CREATED",
					"PULL_REQUEST_UPDATED",
					"PULL_REQUEST_REOPENED"
				]
			}
		},
		{
			"name": "Azure Pipelines",
			"constant": "AZURE_PIPELINES",
			"env": "TF_BUILD",
			"pr": { "BUILD_REASON": "PullRequest" }
		},
		{
			"name": "Bamboo",
			"constant": "BAMBOO",
			"env": "bamboo_planKey"
		},
		{
			"name": "Bitbucket Pipelines",
			"constant": "BITBUCKET",
			"env": "BITBUCKET_COMMIT",
			"pr": "BITBUCKET_PR_ID"
		},
		{
			"name": "Bitrise",
			"constant": "BITRISE",
			"env": "BITRISE_IO",
			"pr": "BITRISE_PULL_REQUEST"
		},
		{
			"name": "Buddy",
			"constant": "BUDDY",
			"env": "BUDDY_WORKSPACE_ID",
			"pr": "BUDDY_EXECUTION_PULL_REQUEST_ID"
		},
		{
			"name": "Buildkite",
			"constant": "BUILDKITE",
			"env": "BUILDKITE",
			"pr": {
				"env": "BUILDKITE_PULL_REQUEST",
				"ne": "false"
			}
		},
		{
			"name": "CircleCI",
			"constant": "CIRCLE",
			"env": "CIRCLECI",
			"pr": "CIRCLE_PULL_REQUEST"
		},
		{
			"name": "Cirrus CI",
			"constant": "CIRRUS",
			"env": "CIRRUS_CI",
			"pr": "CIRRUS_PR"
		},
		{
			"name": "Cloudflare Pages",
			"constant": "CLOUDFLARE_PAGES",
			"env": "CF_PAGES"
		},
		{
			"name": "Codefresh",
			"constant": "CODEFRESH",
			"env": "CF_BUILD_ID",
			"pr": { "any": ["CF_PULL_REQUEST_NUMBER", "CF_PULL_REQUEST_ID"] }
		},
		{
			"name": "Codemagic",
			"constant": "CODEMAGIC",
			"env": "CM_BUILD_ID",
			"pr": "CM_PULL_REQUEST"
		},
		{
			"name": "Codeship",
			"constant": "CODESHIP",
			"env": { "CI_NAME": "codeship" }
		},
		{
			"name": "Drone",
			"constant": "DRONE",
			"env": "DRONE",
			"pr": { "DRONE_BUILD_EVENT": "pull_request" }
		},
		{
			"name": "dsari",
			"constant": "DSARI",
			"env": "DSARI"
		},
		{
			"name": "Earthly",
			"constant": "EARTHLY",
			"env": "EARTHLY_CI"
		},
		{
			"name": "Expo Application Services",
			"constant": "EAS",
			"env": "EAS_BUILD"
		},
		{
			"name": "Gerrit",
			"constant": "GERRIT",
			"env": "GERRIT_PROJECT"
		},
		{
			"name": "Gitea Actions",
			"constant": "GITEA_ACTIONS",
			"env": "GITEA_ACTIONS"
		},
		{
			"name": "GitHub Actions",
			"constant": "GITHUB_ACTIONS",
			"env": "GITHUB_ACTIONS",
			"pr": { "GITHUB_EVENT_NAME": "pull_request" }
		},
		{
			"name": "GitLab CI",
			"constant": "GITLAB",
			"env": "GITLAB_CI",
			"pr": "CI_MERGE_REQUEST_ID"
		},
		{
			"name": "GoCD",
			"constant": "GOCD",
			"env": "GO_PIPELINE_LABEL"
		},
		{
			"name": "Google Cloud Build",
			"constant": "GOOGLE_CLOUD_BUILD",
			"env": "BUILDER_OUTPUT"
		},
		{
			"name": "Harness CI",
			"constant": "HARNESS",
			"env": "HARNESS_BUILD_ID"
		},
		{
			"name": "Heroku",
			"constant": "HEROKU",
			"env": {
				"env": "NODE",
				"includes": "/app/.heroku/node/bin/node"
			}
		},
		{
			"name": "Hudson",
			"constant": "HUDSON",
			"env": "HUDSON_URL"
		},
		{
			"name": "Jenkins",
			"constant": "JENKINS",
			"env": ["JENKINS_URL", "BUILD_ID"],
			"pr": { "any": ["ghprbPullId", "CHANGE_ID"] }
		},
		{
			"name": "LayerCI",
			"constant": "LAYERCI",
			"env": "LAYERCI",
			"pr": "LAYERCI_PULL_REQUEST"
		},
		{
			"name": "Magnum CI",
			"constant": "MAGNUM",
			"env": "MAGNUM"
		},
		{
			"name": "Netlify CI",
			"constant": "NETLIFY",
			"env": "NETLIFY",
			"pr": {
				"env": "PULL_REQUEST",
				"ne": "false"
			}
		},
		{
			"name": "Nevercode",
			"constant": "NEVERCODE",
			"env": "NEVERCODE",
			"pr": {
				"env": "NEVERCODE_PULL_REQUEST",
				"ne": "false"
			}
		},
		{
			"name": "Prow",
			"constant": "PROW",
			"env": "PROW_JOB_ID"
		},
		{
			"name": "ReleaseHub",
			"constant": "RELEASEHUB",
			"env": "RELEASE_BUILD_ID"
		},
		{
			"name": "Render",
			"constant": "RENDER",
			"env": "RENDER",
			"pr": { "IS_PULL_REQUEST": "true" }
		},
		{
			"name": "Sail CI",
			"constant": "SAIL",
			"env": "SAILCI",
			"pr": "SAIL_PULL_REQUEST_NUMBER"
		},
		{
			"name": "Screwdriver",
			"constant": "SCREWDRIVER",
			"env": "SCREWDRIVER",
			"pr": {
				"env": "SD_PULL_REQUEST",
				"ne": "false"
			}
		},
		{
			"name": "Semaphore",
			"constant": "SEMAPHORE",
			"env": "SEMAPHORE",
			"pr": "PULL_REQUEST_NUMBER"
		},
		{
			"name": "Sourcehut",
			"constant": "SOURCEHUT",
			"env": { "CI_NAME": "sourcehut" }
		},
		{
			"name": "Strider CD",
			"constant": "STRIDER",
			"env": "STRIDER"
		},
		{
			"name": "TaskCluster",
			"constant": "TASKCLUSTER",
			"env": ["TASK_ID", "RUN_ID"]
		},
		{
			"name": "TeamCity",
			"constant": "TEAMCITY",
			"env": "TEAMCITY_VERSION"
		},
		{
			"name": "Travis CI",
			"constant": "TRAVIS",
			"env": "TRAVIS",
			"pr": {
				"env": "TRAVIS_PULL_REQUEST",
				"ne": "false"
			}
		},
		{
			"name": "Vela",
			"constant": "VELA",
			"env": "VELA",
			"pr": { "VELA_PULL_REQUEST": "1" }
		},
		{
			"name": "Vercel",
			"constant": "VERCEL",
			"env": { "any": ["NOW_BUILDER", "VERCEL"] },
			"pr": "VERCEL_GIT_PULL_REQUEST_ID"
		},
		{
			"name": "Visual Studio App Center",
			"constant": "APPCENTER",
			"env": "APPCENTER_BUILD_ID"
		},
		{
			"name": "Woodpecker",
			"constant": "WOODPECKER",
			"env": { "CI": "woodpecker" },
			"pr": { "CI_BUILD_EVENT": "pull_request" }
		},
		{
			"name": "Xcode Cloud",
			"constant": "XCODE_CLOUD",
			"env": "CI_XCODE_PROJECT",
			"pr": "CI_PULL_REQUEST_NUMBER"
		},
		{
			"name": "Xcode Server",
			"constant": "XCODE_SERVER",
			"env": "XCS"
		}
	];
} });

//#endregion
//#region node_modules/.pnpm/ci-info@4.2.0/node_modules/ci-info/index.js
var require_ci_info = __commonJS({ "node_modules/.pnpm/ci-info@4.2.0/node_modules/ci-info/index.js"(exports) {
	const vendors = require_vendors();
	const env$1 = process.env;
	Object.defineProperty(exports, "_vendors", { value: vendors.map(function(v$1) {
		return v$1.constant;
	}) });
	exports.name = null;
	exports.isPR = null;
	exports.id = null;
	vendors.forEach(function(vendor) {
		const envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
		const isCI$1 = envs.every(function(obj) {
			return checkEnv(obj);
		});
		exports[vendor.constant] = isCI$1;
		if (!isCI$1) return;
		exports.name = vendor.name;
		exports.isPR = checkPR(vendor);
		exports.id = vendor.constant;
	});
	exports.isCI = !!(env$1.CI !== "false" && (env$1.BUILD_ID || env$1.BUILD_NUMBER || env$1.CI || env$1.CI_APP_ID || env$1.CI_BUILD_ID || env$1.CI_BUILD_NUMBER || env$1.CI_NAME || env$1.CONTINUOUS_INTEGRATION || env$1.RUN_ID || exports.name || false));
	function checkEnv(obj) {
		if (typeof obj === "string") return !!env$1[obj];
		if ("env" in obj) return env$1[obj.env] && env$1[obj.env].includes(obj.includes);
		if ("any" in obj) return obj.any.some(function(k$2) {
			return !!env$1[k$2];
		});
		return Object.keys(obj).every(function(k$2) {
			return env$1[k$2] === obj[k$2];
		});
	}
	function checkPR(vendor) {
		switch (typeof vendor.pr) {
			case "string": return !!env$1[vendor.pr];
			case "object": if ("env" in vendor.pr) if ("any" in vendor.pr) return vendor.pr.any.some(function(key) {
				return env$1[vendor.pr.env] === key;
			});
			else return vendor.pr.env in env$1 && env$1[vendor.pr.env] !== vendor.pr.ne;
			else if ("any" in vendor.pr) return vendor.pr.any.some(function(key) {
				return !!env$1[key];
			});
			else return checkEnv(vendor.pr);
			default: return null;
		}
	}
} });

//#endregion
//#region node_modules/.pnpm/defu@6.1.4/node_modules/defu/dist/defu.mjs
function isPlainObject$2(value$1) {
	if (value$1 === null || typeof value$1 !== "object") return false;
	const prototype = Object.getPrototypeOf(value$1);
	if (prototype !== null && prototype !== Object.prototype && Object.getPrototypeOf(prototype) !== null) return false;
	if (Symbol.iterator in value$1) return false;
	if (Symbol.toStringTag in value$1) return Object.prototype.toString.call(value$1) === "[object Module]";
	return true;
}
function _defu$1(baseObject, defaults$1, namespace = ".", merger) {
	if (!isPlainObject$2(defaults$1)) return _defu$1(baseObject, {}, namespace, merger);
	const object = Object.assign({}, defaults$1);
	for (const key in baseObject) {
		if (key === "__proto__" || key === "constructor") continue;
		const value$1 = baseObject[key];
		if (value$1 === null || value$1 === void 0) continue;
		if (merger && merger(object, key, value$1, namespace)) continue;
		if (Array.isArray(value$1) && Array.isArray(object[key])) object[key] = [...value$1, ...object[key]];
		else if (isPlainObject$2(value$1) && isPlainObject$2(object[key])) object[key] = _defu$1(value$1, object[key], (namespace ? `${namespace}.` : "") + key.toString(), merger);
		else object[key] = value$1;
	}
	return object;
}
function createDefu$1(merger) {
	return (...arguments_) => arguments_.reduce((p$1, c) => _defu$1(p$1, c, "", merger), {});
}
const defu$1 = createDefu$1();
const defuFn = createDefu$1((object, key, currentValue) => {
	if (object[key] !== void 0 && typeof currentValue === "function") {
		object[key] = currentValue(object[key]);
		return true;
	}
});
const defuArrayFn = createDefu$1((object, key, currentValue) => {
	if (Array.isArray(object[key]) && typeof currentValue === "function") {
		object[key] = currentValue(object[key]);
		return true;
	}
});

//#endregion
//#region node_modules/.pnpm/rc9@2.1.2/node_modules/rc9/dist/index.mjs
function isBuffer(obj) {
	return obj && obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
function keyIdentity(key) {
	return key;
}
function flatten(target, opts) {
	opts = opts || {};
	const delimiter = opts.delimiter || ".";
	const maxDepth = opts.maxDepth;
	const transformKey = opts.transformKey || keyIdentity;
	const output = {};
	function step(object, prev, currentDepth) {
		currentDepth = currentDepth || 1;
		Object.keys(object).forEach(function(key) {
			const value$1 = object[key];
			const isarray = opts.safe && Array.isArray(value$1);
			const type$1 = Object.prototype.toString.call(value$1);
			const isbuffer = isBuffer(value$1);
			const isobject = type$1 === "[object Object]" || type$1 === "[object Array]";
			const newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);
			if (!isarray && !isbuffer && isobject && Object.keys(value$1).length && (!opts.maxDepth || currentDepth < maxDepth)) return step(value$1, newKey, currentDepth + 1);
			output[newKey] = value$1;
		});
	}
	step(target);
	return output;
}
function unflatten(target, opts) {
	opts = opts || {};
	const delimiter = opts.delimiter || ".";
	const overwrite = opts.overwrite || false;
	const transformKey = opts.transformKey || keyIdentity;
	const result = {};
	const isbuffer = isBuffer(target);
	if (isbuffer || Object.prototype.toString.call(target) !== "[object Object]") return target;
	function getkey(key) {
		const parsedKey = Number(key);
		return isNaN(parsedKey) || key.indexOf(".") !== -1 || opts.object ? key : parsedKey;
	}
	function addKeys(keyPrefix, recipient, target$1) {
		return Object.keys(target$1).reduce(function(result$1, key) {
			result$1[keyPrefix + delimiter + key] = target$1[key];
			return result$1;
		}, recipient);
	}
	function isEmpty(val) {
		const type$1 = Object.prototype.toString.call(val);
		const isArray = type$1 === "[object Array]";
		const isObject$1 = type$1 === "[object Object]";
		if (!val) return true;
		else if (isArray) return !val.length;
		else if (isObject$1) return !Object.keys(val).length;
	}
	target = Object.keys(target).reduce(function(result$1, key) {
		const type$1 = Object.prototype.toString.call(target[key]);
		const isObject$1 = type$1 === "[object Object]" || type$1 === "[object Array]";
		if (!isObject$1 || isEmpty(target[key])) {
			result$1[key] = target[key];
			return result$1;
		} else return addKeys(key, result$1, flatten(target[key], opts));
	}, {});
	Object.keys(target).forEach(function(key) {
		const split = key.split(delimiter).map(transformKey);
		let key1 = getkey(split.shift());
		let key2 = getkey(split[0]);
		let recipient = result;
		while (key2 !== void 0) {
			if (key1 === "__proto__") return;
			const type$1 = Object.prototype.toString.call(recipient[key1]);
			const isobject = type$1 === "[object Object]" || type$1 === "[object Array]";
			if (!overwrite && !isobject && typeof recipient[key1] !== "undefined") return;
			if (overwrite && !isobject || !overwrite && recipient[key1] == null) recipient[key1] = typeof key2 === "number" && !opts.object ? [] : {};
			recipient = recipient[key1];
			if (split.length > 0) {
				key1 = getkey(split.shift());
				key2 = getkey(split[0]);
			}
		}
		recipient[key1] = unflatten(target[key], opts);
	});
	return result;
}
const RE_KEY_VAL = /^\s*([^\s=]+)\s*=\s*(.*)?\s*$/;
const RE_LINES = /\n|\r|\r\n/;
const defaults = {
	name: ".conf",
	dir: process.cwd(),
	flat: false
};
function withDefaults(options) {
	if (typeof options === "string") options = { name: options };
	return {
		...defaults,
		...options
	};
}
function parse$1(contents, options = {}) {
	const config$2 = {};
	const lines = contents.split(RE_LINES);
	for (const line of lines) {
		const match = line.match(RE_KEY_VAL);
		if (!match) continue;
		const key = match[1];
		if (!key || key === "__proto__" || key === "constructor") continue;
		const value$1 = destr(
			(match[2] || "").trim()
			/* val */
);
		if (key.endsWith("[]")) {
			const nkey = key.slice(0, Math.max(0, key.length - 2));
			config$2[nkey] = (config$2[nkey] || []).concat(value$1);
			continue;
		}
		config$2[key] = value$1;
	}
	return options.flat ? config$2 : unflatten(config$2, { overwrite: true });
}
function parseFile(path$9, options) {
	if (!existsSync(path$9)) return {};
	return parse$1(readFileSync(path$9, "utf8"), options);
}
function read(options) {
	options = withDefaults(options);
	return parseFile(resolve(options.dir, options.name), options);
}
function readUser(options) {
	options = withDefaults(options);
	options.dir = process.env.XDG_CONFIG_HOME || homedir$1();
	return read(options);
}

//#endregion
//#region node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/package.json
var require_package = __commonJS({ "node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/package.json"(exports, module) {
	module.exports = {
		"name": "dotenv",
		"version": "16.5.0",
		"description": "Loads environment variables from .env file",
		"main": "lib/main.js",
		"types": "lib/main.d.ts",
		"exports": {
			".": {
				"types": "./lib/main.d.ts",
				"require": "./lib/main.js",
				"default": "./lib/main.js"
			},
			"./config": "./config.js",
			"./config.js": "./config.js",
			"./lib/env-options": "./lib/env-options.js",
			"./lib/env-options.js": "./lib/env-options.js",
			"./lib/cli-options": "./lib/cli-options.js",
			"./lib/cli-options.js": "./lib/cli-options.js",
			"./package.json": "./package.json"
		},
		"scripts": {
			"dts-check": "tsc --project tests/types/tsconfig.json",
			"lint": "standard",
			"pretest": "npm run lint && npm run dts-check",
			"test": "tap run --allow-empty-coverage --disable-coverage --timeout=60000",
			"test:coverage": "tap run --show-full-coverage --timeout=60000 --coverage-report=lcov",
			"prerelease": "npm test",
			"release": "standard-version"
		},
		"repository": {
			"type": "git",
			"url": "git://github.com/motdotla/dotenv.git"
		},
		"homepage": "https://github.com/motdotla/dotenv#readme",
		"funding": "https://dotenvx.com",
		"keywords": [
			"dotenv",
			"env",
			".env",
			"environment",
			"variables",
			"config",
			"settings"
		],
		"readmeFilename": "README.md",
		"license": "BSD-2-Clause",
		"devDependencies": {
			"@types/node": "^18.11.3",
			"decache": "^4.6.2",
			"sinon": "^14.0.1",
			"standard": "^17.0.0",
			"standard-version": "^9.5.0",
			"tap": "^19.2.0",
			"typescript": "^4.8.4"
		},
		"engines": { "node": ">=12" },
		"browser": { "fs": false }
	};
} });

//#endregion
//#region node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/lib/main.js
var require_main = __commonJS({ "node_modules/.pnpm/dotenv@16.5.0/node_modules/dotenv/lib/main.js"(exports, module) {
	const fs = __require("fs");
	const path = __require("path");
	const os = __require("os");
	const crypto = __require("crypto");
	const packageJson = require_package();
	const version = packageJson.version;
	const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;
	function parse(src) {
		const obj = {};
		let lines = src.toString();
		lines = lines.replace(/\r\n?/gm, "\n");
		let match;
		while ((match = LINE.exec(lines)) != null) {
			const key = match[1];
			let value$1 = match[2] || "";
			value$1 = value$1.trim();
			const maybeQuote = value$1[0];
			value$1 = value$1.replace(/^(['"`])([\s\S]*)\1$/gm, "$2");
			if (maybeQuote === "\"") {
				value$1 = value$1.replace(/\\n/g, "\n");
				value$1 = value$1.replace(/\\r/g, "\r");
			}
			obj[key] = value$1;
		}
		return obj;
	}
	function _parseVault(options) {
		const vaultPath = _vaultPath(options);
		const result = DotenvModule.configDotenv({ path: vaultPath });
		if (!result.parsed) {
			const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
			err.code = "MISSING_DATA";
			throw err;
		}
		const keys = _dotenvKey(options).split(",");
		const length = keys.length;
		let decrypted;
		for (let i = 0; i < length; i++) try {
			const key = keys[i].trim();
			const attrs = _instructions(result, key);
			decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
			break;
		} catch (error$1) {
			if (i + 1 >= length) throw error$1;
		}
		return DotenvModule.parse(decrypted);
	}
	function _warn(message) {
		console.log(`[dotenv@${version}][WARN] ${message}`);
	}
	function _debug(message) {
		console.log(`[dotenv@${version}][DEBUG] ${message}`);
	}
	function _dotenvKey(options) {
		if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) return options.DOTENV_KEY;
		if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) return process.env.DOTENV_KEY;
		return "";
	}
	function _instructions(result, dotenvKey) {
		let uri;
		try {
			uri = new URL(dotenvKey);
		} catch (error$1) {
			if (error$1.code === "ERR_INVALID_URL") {
				const err = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
				err.code = "INVALID_DOTENV_KEY";
				throw err;
			}
			throw error$1;
		}
		const key = uri.password;
		if (!key) {
			const err = new Error("INVALID_DOTENV_KEY: Missing key part");
			err.code = "INVALID_DOTENV_KEY";
			throw err;
		}
		const environment = uri.searchParams.get("environment");
		if (!environment) {
			const err = new Error("INVALID_DOTENV_KEY: Missing environment part");
			err.code = "INVALID_DOTENV_KEY";
			throw err;
		}
		const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
		const ciphertext = result.parsed[environmentKey];
		if (!ciphertext) {
			const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
			err.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
			throw err;
		}
		return {
			ciphertext,
			key
		};
	}
	function _vaultPath(options) {
		let possibleVaultPath = null;
		if (options && options.path && options.path.length > 0) if (Array.isArray(options.path)) {
			for (const filepath of options.path) if (fs.existsSync(filepath)) possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
		} else possibleVaultPath = options.path.endsWith(".vault") ? options.path : `${options.path}.vault`;
		else possibleVaultPath = path.resolve(process.cwd(), ".env.vault");
		if (fs.existsSync(possibleVaultPath)) return possibleVaultPath;
		return null;
	}
	function _resolveHome(envPath) {
		return envPath[0] === "~" ? path.join(os.homedir(), envPath.slice(1)) : envPath;
	}
	function _configVault(options) {
		const debug$5 = Boolean(options && options.debug);
		if (debug$5) _debug("Loading env from encrypted .env.vault");
		const parsed = DotenvModule._parseVault(options);
		let processEnv = process.env;
		if (options && options.processEnv != null) processEnv = options.processEnv;
		DotenvModule.populate(processEnv, parsed, options);
		return { parsed };
	}
	function configDotenv(options) {
		const dotenvPath = path.resolve(process.cwd(), ".env");
		let encoding = "utf8";
		const debug$5 = Boolean(options && options.debug);
		if (options && options.encoding) encoding = options.encoding;
		else if (debug$5) _debug("No encoding is specified. UTF-8 is used by default");
		let optionPaths = [dotenvPath];
		if (options && options.path) if (!Array.isArray(options.path)) optionPaths = [_resolveHome(options.path)];
		else {
			optionPaths = [];
			for (const filepath of options.path) optionPaths.push(_resolveHome(filepath));
		}
		let lastError;
		const parsedAll = {};
		for (const path$9 of optionPaths) try {
			const parsed = DotenvModule.parse(fs.readFileSync(path$9, { encoding }));
			DotenvModule.populate(parsedAll, parsed, options);
		} catch (e$1) {
			if (debug$5) _debug(`Failed to load ${path$9} ${e$1.message}`);
			lastError = e$1;
		}
		let processEnv = process.env;
		if (options && options.processEnv != null) processEnv = options.processEnv;
		DotenvModule.populate(processEnv, parsedAll, options);
		if (lastError) return {
			parsed: parsedAll,
			error: lastError
		};
		else return { parsed: parsedAll };
	}
	function config$1(options) {
		if (_dotenvKey(options).length === 0) return DotenvModule.configDotenv(options);
		const vaultPath = _vaultPath(options);
		if (!vaultPath) {
			_warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
			return DotenvModule.configDotenv(options);
		}
		return DotenvModule._configVault(options);
	}
	function decrypt(encrypted, keyStr) {
		const key = Buffer.from(keyStr.slice(-64), "hex");
		let ciphertext = Buffer.from(encrypted, "base64");
		const nonce = ciphertext.subarray(0, 12);
		const authTag = ciphertext.subarray(-16);
		ciphertext = ciphertext.subarray(12, -16);
		try {
			const aesgcm = crypto.createDecipheriv("aes-256-gcm", key, nonce);
			aesgcm.setAuthTag(authTag);
			return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
		} catch (error$1) {
			const isRange = error$1 instanceof RangeError;
			const invalidKeyLength = error$1.message === "Invalid key length";
			const decryptionFailed = error$1.message === "Unsupported state or unable to authenticate data";
			if (isRange || invalidKeyLength) {
				const err = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
				err.code = "INVALID_DOTENV_KEY";
				throw err;
			} else if (decryptionFailed) {
				const err = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
				err.code = "DECRYPTION_FAILED";
				throw err;
			} else throw error$1;
		}
	}
	function populate(processEnv, parsed, options = {}) {
		const debug$5 = Boolean(options && options.debug);
		const override = Boolean(options && options.override);
		if (typeof parsed !== "object") {
			const err = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
			err.code = "OBJECT_REQUIRED";
			throw err;
		}
		for (const key of Object.keys(parsed)) if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
			if (override === true) processEnv[key] = parsed[key];
			if (debug$5) if (override === true) _debug(`"${key}" is already defined and WAS overwritten`);
			else _debug(`"${key}" is already defined and was NOT overwritten`);
		} else processEnv[key] = parsed[key];
	}
	const DotenvModule = {
		configDotenv,
		_configVault,
		_parseVault,
		config: config$1,
		decrypt,
		parse,
		populate
	};
	module.exports.configDotenv = DotenvModule.configDotenv;
	module.exports._configVault = DotenvModule._configVault;
	module.exports._parseVault = DotenvModule._parseVault;
	module.exports.config = DotenvModule.config;
	module.exports.decrypt = DotenvModule.decrypt;
	module.exports.parse = DotenvModule.parse;
	module.exports.populate = DotenvModule.populate;
	module.exports = DotenvModule;
} });

//#endregion
//#region node_modules/.pnpm/jiti@2.4.2/node_modules/jiti/dist/jiti.cjs
var require_jiti = __commonJS({ "node_modules/.pnpm/jiti@2.4.2/node_modules/jiti/dist/jiti.cjs"(exports, module) {
	(() => {
		var __webpack_modules__ = { "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive": (module$1) => {
			function webpackEmptyAsyncContext(req) {
				return Promise.resolve().then(() => {
					var e$1 = new Error("Cannot find module '" + req + "'");
					throw e$1.code = "MODULE_NOT_FOUND", e$1;
				});
			}
			webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive", module$1.exports = webpackEmptyAsyncContext;
		} }, __webpack_module_cache__ = {};
		function __webpack_require__(moduleId) {
			var cachedModule = __webpack_module_cache__[moduleId];
			if (void 0 !== cachedModule) return cachedModule.exports;
			var module$1 = __webpack_module_cache__[moduleId] = { exports: {} };
			return __webpack_modules__[moduleId](module$1, module$1.exports, __webpack_require__), module$1.exports;
		}
		__webpack_require__.n = (module$1) => {
			var getter = module$1 && module$1.__esModule ? () => module$1.default : () => module$1;
			return __webpack_require__.d(getter, { a: getter }), getter;
		}, __webpack_require__.d = (exports$1, definition) => {
			for (var key in definition) __webpack_require__.o(definition, key) && !__webpack_require__.o(exports$1, key) && Object.defineProperty(exports$1, key, {
				enumerable: !0,
				get: definition[key]
			});
		}, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
		var __webpack_exports__ = {};
		(() => {
			"use strict";
			__webpack_require__.d(__webpack_exports__, { default: () => createJiti });
			const external_node_os_namespaceObject = __require("node:os");
			var astralIdentifierCodes = [
				509,
				0,
				227,
				0,
				150,
				4,
				294,
				9,
				1368,
				2,
				2,
				1,
				6,
				3,
				41,
				2,
				5,
				0,
				166,
				1,
				574,
				3,
				9,
				9,
				7,
				9,
				32,
				4,
				318,
				1,
				80,
				3,
				71,
				10,
				50,
				3,
				123,
				2,
				54,
				14,
				32,
				10,
				3,
				1,
				11,
				3,
				46,
				10,
				8,
				0,
				46,
				9,
				7,
				2,
				37,
				13,
				2,
				9,
				6,
				1,
				45,
				0,
				13,
				2,
				49,
				13,
				9,
				3,
				2,
				11,
				83,
				11,
				7,
				0,
				3,
				0,
				158,
				11,
				6,
				9,
				7,
				3,
				56,
				1,
				2,
				6,
				3,
				1,
				3,
				2,
				10,
				0,
				11,
				1,
				3,
				6,
				4,
				4,
				68,
				8,
				2,
				0,
				3,
				0,
				2,
				3,
				2,
				4,
				2,
				0,
				15,
				1,
				83,
				17,
				10,
				9,
				5,
				0,
				82,
				19,
				13,
				9,
				214,
				6,
				3,
				8,
				28,
				1,
				83,
				16,
				16,
				9,
				82,
				12,
				9,
				9,
				7,
				19,
				58,
				14,
				5,
				9,
				243,
				14,
				166,
				9,
				71,
				5,
				2,
				1,
				3,
				3,
				2,
				0,
				2,
				1,
				13,
				9,
				120,
				6,
				3,
				6,
				4,
				0,
				29,
				9,
				41,
				6,
				2,
				3,
				9,
				0,
				10,
				10,
				47,
				15,
				343,
				9,
				54,
				7,
				2,
				7,
				17,
				9,
				57,
				21,
				2,
				13,
				123,
				5,
				4,
				0,
				2,
				1,
				2,
				6,
				2,
				0,
				9,
				9,
				49,
				4,
				2,
				1,
				2,
				4,
				9,
				9,
				330,
				3,
				10,
				1,
				2,
				0,
				49,
				6,
				4,
				4,
				14,
				10,
				5350,
				0,
				7,
				14,
				11465,
				27,
				2343,
				9,
				87,
				9,
				39,
				4,
				60,
				6,
				26,
				9,
				535,
				9,
				470,
				0,
				2,
				54,
				8,
				3,
				82,
				0,
				12,
				1,
				19628,
				1,
				4178,
				9,
				519,
				45,
				3,
				22,
				543,
				4,
				4,
				5,
				9,
				7,
				3,
				6,
				31,
				3,
				149,
				2,
				1418,
				49,
				513,
				54,
				5,
				49,
				9,
				0,
				15,
				0,
				23,
				4,
				2,
				14,
				1361,
				6,
				2,
				16,
				3,
				6,
				2,
				1,
				2,
				4,
				101,
				0,
				161,
				6,
				10,
				9,
				357,
				0,
				62,
				13,
				499,
				13,
				245,
				1,
				2,
				9,
				726,
				6,
				110,
				6,
				6,
				9,
				4759,
				9,
				787719,
				239
			], astralIdentifierStartCodes = [
				0,
				11,
				2,
				25,
				2,
				18,
				2,
				1,
				2,
				14,
				3,
				13,
				35,
				122,
				70,
				52,
				268,
				28,
				4,
				48,
				48,
				31,
				14,
				29,
				6,
				37,
				11,
				29,
				3,
				35,
				5,
				7,
				2,
				4,
				43,
				157,
				19,
				35,
				5,
				35,
				5,
				39,
				9,
				51,
				13,
				10,
				2,
				14,
				2,
				6,
				2,
				1,
				2,
				10,
				2,
				14,
				2,
				6,
				2,
				1,
				4,
				51,
				13,
				310,
				10,
				21,
				11,
				7,
				25,
				5,
				2,
				41,
				2,
				8,
				70,
				5,
				3,
				0,
				2,
				43,
				2,
				1,
				4,
				0,
				3,
				22,
				11,
				22,
				10,
				30,
				66,
				18,
				2,
				1,
				11,
				21,
				11,
				25,
				71,
				55,
				7,
				1,
				65,
				0,
				16,
				3,
				2,
				2,
				2,
				28,
				43,
				28,
				4,
				28,
				36,
				7,
				2,
				27,
				28,
				53,
				11,
				21,
				11,
				18,
				14,
				17,
				111,
				72,
				56,
				50,
				14,
				50,
				14,
				35,
				39,
				27,
				10,
				22,
				251,
				41,
				7,
				1,
				17,
				2,
				60,
				28,
				11,
				0,
				9,
				21,
				43,
				17,
				47,
				20,
				28,
				22,
				13,
				52,
				58,
				1,
				3,
				0,
				14,
				44,
				33,
				24,
				27,
				35,
				30,
				0,
				3,
				0,
				9,
				34,
				4,
				0,
				13,
				47,
				15,
				3,
				22,
				0,
				2,
				0,
				36,
				17,
				2,
				24,
				20,
				1,
				64,
				6,
				2,
				0,
				2,
				3,
				2,
				14,
				2,
				9,
				8,
				46,
				39,
				7,
				3,
				1,
				3,
				21,
				2,
				6,
				2,
				1,
				2,
				4,
				4,
				0,
				19,
				0,
				13,
				4,
				31,
				9,
				2,
				0,
				3,
				0,
				2,
				37,
				2,
				0,
				26,
				0,
				2,
				0,
				45,
				52,
				19,
				3,
				21,
				2,
				31,
				47,
				21,
				1,
				2,
				0,
				185,
				46,
				42,
				3,
				37,
				47,
				21,
				0,
				60,
				42,
				14,
				0,
				72,
				26,
				38,
				6,
				186,
				43,
				117,
				63,
				32,
				7,
				3,
				0,
				3,
				7,
				2,
				1,
				2,
				23,
				16,
				0,
				2,
				0,
				95,
				7,
				3,
				38,
				17,
				0,
				2,
				0,
				29,
				0,
				11,
				39,
				8,
				0,
				22,
				0,
				12,
				45,
				20,
				0,
				19,
				72,
				200,
				32,
				32,
				8,
				2,
				36,
				18,
				0,
				50,
				29,
				113,
				6,
				2,
				1,
				2,
				37,
				22,
				0,
				26,
				5,
				2,
				1,
				2,
				31,
				15,
				0,
				328,
				18,
				16,
				0,
				2,
				12,
				2,
				33,
				125,
				0,
				80,
				921,
				103,
				110,
				18,
				195,
				2637,
				96,
				16,
				1071,
				18,
				5,
				26,
				3994,
				6,
				582,
				6842,
				29,
				1763,
				568,
				8,
				30,
				18,
				78,
				18,
				29,
				19,
				47,
				17,
				3,
				32,
				20,
				6,
				18,
				433,
				44,
				212,
				63,
				129,
				74,
				6,
				0,
				67,
				12,
				65,
				1,
				2,
				0,
				29,
				6135,
				9,
				1237,
				42,
				9,
				8936,
				3,
				2,
				6,
				2,
				1,
				2,
				290,
				16,
				0,
				30,
				2,
				3,
				0,
				15,
				3,
				9,
				395,
				2309,
				106,
				6,
				12,
				4,
				8,
				8,
				9,
				5991,
				84,
				2,
				70,
				2,
				1,
				3,
				0,
				3,
				1,
				3,
				3,
				2,
				11,
				2,
				0,
				2,
				6,
				2,
				64,
				2,
				3,
				3,
				7,
				2,
				6,
				2,
				27,
				2,
				3,
				2,
				4,
				2,
				0,
				4,
				6,
				2,
				339,
				3,
				24,
				2,
				24,
				2,
				30,
				2,
				24,
				2,
				30,
				2,
				24,
				2,
				30,
				2,
				24,
				2,
				30,
				2,
				24,
				2,
				7,
				1845,
				30,
				7,
				5,
				262,
				61,
				147,
				44,
				11,
				6,
				17,
				0,
				322,
				29,
				19,
				43,
				485,
				27,
				229,
				29,
				3,
				0,
				496,
				6,
				2,
				3,
				2,
				1,
				2,
				14,
				2,
				196,
				60,
				67,
				8,
				0,
				1205,
				3,
				2,
				26,
				2,
				1,
				2,
				0,
				3,
				0,
				2,
				9,
				2,
				3,
				2,
				0,
				2,
				0,
				7,
				0,
				5,
				0,
				2,
				0,
				2,
				0,
				2,
				2,
				2,
				1,
				2,
				0,
				3,
				0,
				2,
				0,
				2,
				0,
				2,
				0,
				2,
				0,
				2,
				1,
				2,
				0,
				3,
				3,
				2,
				6,
				2,
				3,
				2,
				3,
				2,
				0,
				2,
				9,
				2,
				16,
				6,
				2,
				2,
				4,
				2,
				16,
				4421,
				42719,
				33,
				4153,
				7,
				221,
				3,
				5761,
				15,
				7472,
				16,
				621,
				2467,
				541,
				1507,
				4938,
				6,
				4191
			], nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", reservedWords = {
				3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
				5: "class enum extends super const export import",
				6: "enum",
				strict: "implements interface let package private protected public static yield",
				strictBind: "eval arguments"
			}, ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$1 = {
				5: ecma5AndLessKeywords,
				"5module": ecma5AndLessKeywords + " export import",
				6: ecma5AndLessKeywords + " const class extends export import super"
			}, keywordRelationalOperator = /^in(stanceof)?$/, nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･]");
			function isInAstralSet(code, set) {
				for (var pos = 65536, i$1 = 0; i$1 < set.length; i$1 += 2) {
					if ((pos += set[i$1]) > code) return !1;
					if ((pos += set[i$1 + 1]) >= code) return !0;
				}
				return !1;
			}
			function isIdentifierStart(code, astral) {
				return code < 65 ? 36 === code : code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : !1 !== astral && isInAstralSet(code, astralIdentifierStartCodes)));
			}
			function isIdentifierChar(code, astral) {
				return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : !1 !== astral && (isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)))));
			}
			var TokenType = function(label, conf) {
				void 0 === conf && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
			};
			function binop(name, prec) {
				return new TokenType(name, {
					beforeExpr: !0,
					binop: prec
				});
			}
			var beforeExpr = { beforeExpr: !0 }, startsExpr = { startsExpr: !0 }, keywords = {};
			function kw(name, options) {
				return void 0 === options && (options = {}), options.keyword = name, keywords[name] = new TokenType(name, options);
			}
			var types$1$1 = {
				num: new TokenType("num", startsExpr),
				regexp: new TokenType("regexp", startsExpr),
				string: new TokenType("string", startsExpr),
				name: new TokenType("name", startsExpr),
				privateId: new TokenType("privateId", startsExpr),
				eof: new TokenType("eof"),
				bracketL: new TokenType("[", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				bracketR: new TokenType("]"),
				braceL: new TokenType("{", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				braceR: new TokenType("}"),
				parenL: new TokenType("(", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				parenR: new TokenType(")"),
				comma: new TokenType(",", beforeExpr),
				semi: new TokenType(";", beforeExpr),
				colon: new TokenType(":", beforeExpr),
				dot: new TokenType("."),
				question: new TokenType("?", beforeExpr),
				questionDot: new TokenType("?."),
				arrow: new TokenType("=>", beforeExpr),
				template: new TokenType("template"),
				invalidTemplate: new TokenType("invalidTemplate"),
				ellipsis: new TokenType("...", beforeExpr),
				backQuote: new TokenType("`", startsExpr),
				dollarBraceL: new TokenType("${", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				eq: new TokenType("=", {
					beforeExpr: !0,
					isAssign: !0
				}),
				assign: new TokenType("_=", {
					beforeExpr: !0,
					isAssign: !0
				}),
				incDec: new TokenType("++/--", {
					prefix: !0,
					postfix: !0,
					startsExpr: !0
				}),
				prefix: new TokenType("!/~", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				}),
				logicalOR: binop("||", 1),
				logicalAND: binop("&&", 2),
				bitwiseOR: binop("|", 3),
				bitwiseXOR: binop("^", 4),
				bitwiseAND: binop("&", 5),
				equality: binop("==/!=/===/!==", 6),
				relational: binop("</>/<=/>=", 7),
				bitShift: binop("<</>>/>>>", 8),
				plusMin: new TokenType("+/-", {
					beforeExpr: !0,
					binop: 9,
					prefix: !0,
					startsExpr: !0
				}),
				modulo: binop("%", 10),
				star: binop("*", 10),
				slash: binop("/", 10),
				starstar: new TokenType("**", { beforeExpr: !0 }),
				coalesce: binop("??", 1),
				_break: kw("break"),
				_case: kw("case", beforeExpr),
				_catch: kw("catch"),
				_continue: kw("continue"),
				_debugger: kw("debugger"),
				_default: kw("default", beforeExpr),
				_do: kw("do", {
					isLoop: !0,
					beforeExpr: !0
				}),
				_else: kw("else", beforeExpr),
				_finally: kw("finally"),
				_for: kw("for", { isLoop: !0 }),
				_function: kw("function", startsExpr),
				_if: kw("if"),
				_return: kw("return", beforeExpr),
				_switch: kw("switch"),
				_throw: kw("throw", beforeExpr),
				_try: kw("try"),
				_var: kw("var"),
				_const: kw("const"),
				_while: kw("while", { isLoop: !0 }),
				_with: kw("with"),
				_new: kw("new", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				_this: kw("this", startsExpr),
				_super: kw("super", startsExpr),
				_class: kw("class", startsExpr),
				_extends: kw("extends", beforeExpr),
				_export: kw("export"),
				_import: kw("import", startsExpr),
				_null: kw("null", startsExpr),
				_true: kw("true", startsExpr),
				_false: kw("false", startsExpr),
				_in: kw("in", {
					beforeExpr: !0,
					binop: 7
				}),
				_instanceof: kw("instanceof", {
					beforeExpr: !0,
					binop: 7
				}),
				_typeof: kw("typeof", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				}),
				_void: kw("void", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				}),
				_delete: kw("delete", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				})
			}, lineBreak = /\r\n?|\n|\u2028|\u2029/, lineBreakG = new RegExp(lineBreak.source, "g");
			function isNewLine(code) {
				return 10 === code || 13 === code || 8232 === code || 8233 === code;
			}
			function nextLineBreak(code, from, end) {
				void 0 === end && (end = code.length);
				for (var i$1 = from; i$1 < end; i$1++) {
					var next = code.charCodeAt(i$1);
					if (isNewLine(next)) return i$1 < end - 1 && 13 === next && 10 === code.charCodeAt(i$1 + 1) ? i$1 + 2 : i$1 + 1;
				}
				return -1;
			}
			var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref = Object.prototype, acorn_hasOwnProperty = ref.hasOwnProperty, acorn_toString = ref.toString, hasOwn$2 = Object.hasOwn || function(obj, propName) {
				return acorn_hasOwnProperty.call(obj, propName);
			}, isArray = Array.isArray || function(obj) {
				return "[object Array]" === acorn_toString.call(obj);
			}, regexpCache = Object.create(null);
			function wordsRegexp(words) {
				return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
			}
			function codePointToString(code) {
				return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
			}
			var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position = function(line, col) {
				this.line = line, this.column = col;
			};
			Position.prototype.offset = function(n) {
				return new Position(this.line, this.column + n);
			};
			var SourceLocation = function(p$1, start, end) {
				this.start = start, this.end = end, null !== p$1.sourceFile && (this.source = p$1.sourceFile);
			};
			function getLineInfo(input, offset) {
				for (var line = 1, cur = 0;;) {
					var nextBreak = nextLineBreak(input, cur, offset);
					if (nextBreak < 0) return new Position(line, offset - cur);
					++line, cur = nextBreak;
				}
			}
			var defaultOptions$1 = {
				ecmaVersion: null,
				sourceType: "script",
				onInsertedSemicolon: null,
				onTrailingComma: null,
				allowReserved: null,
				allowReturnOutsideFunction: !1,
				allowImportExportEverywhere: !1,
				allowAwaitOutsideFunction: null,
				allowSuperOutsideMethod: null,
				allowHashBang: !1,
				checkPrivateFields: !0,
				locations: !1,
				onToken: null,
				onComment: null,
				ranges: !1,
				program: null,
				sourceFile: null,
				directSourceFile: null,
				preserveParens: !1
			}, warnedAboutEcmaVersion = !1;
			function getOptions$1(opts) {
				var options = {};
				for (var opt in defaultOptions$1) options[opt] = opts && hasOwn$2(opts, opt) ? opts[opt] : defaultOptions$1[opt];
				if ("latest" === options.ecmaVersion ? options.ecmaVersion = 1e8 : null == options.ecmaVersion ? (!warnedAboutEcmaVersion && "object" == typeof console && console.warn && (warnedAboutEcmaVersion = !0, console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), options.allowReserved ??= options.ecmaVersion < 5, opts && null != opts.allowHashBang || (options.allowHashBang = options.ecmaVersion >= 14), isArray(options.onToken)) {
					var tokens = options.onToken;
					options.onToken = function(token) {
						return tokens.push(token);
					};
				}
				return isArray(options.onComment) && (options.onComment = function(options$1, array) {
					return function(block, text, start, end, startLoc, endLoc) {
						var comment = {
							type: block ? "Block" : "Line",
							value: text,
							start,
							end
						};
						options$1.locations && (comment.loc = new SourceLocation(this, startLoc, endLoc)), options$1.ranges && (comment.range = [start, end]), array.push(comment);
					};
				}(options, options.onComment)), options;
			}
			function functionFlags(async, generator) {
				return 2 | (async ? 4 : 0) | (generator ? 8 : 0);
			}
			var Parser$1 = function(options, input, startPos) {
				this.options = options = getOptions$1(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : "module" === options.sourceType ? "5module" : 5]);
				var reserved = "";
				!0 !== options.allowReserved && (reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : 5 === options.ecmaVersion ? 5 : 3], "module" === options.sourceType && (reserved += " await")), this.reservedWords = wordsRegexp(reserved);
				var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
				this.reservedWordsStrict = wordsRegexp(reservedStrict), this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind), this.input = String(input), this.containsEsc = !1, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$1$1.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = !0, this.inModule = "module" === options.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = !1, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = Object.create(null), 0 === this.pos && options.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
			}, prototypeAccessors = {
				inFunction: { configurable: !0 },
				inGenerator: { configurable: !0 },
				inAsync: { configurable: !0 },
				canAwait: { configurable: !0 },
				allowSuper: { configurable: !0 },
				allowDirectSuper: { configurable: !0 },
				treatFunctionsAsVar: { configurable: !0 },
				allowNewDotTarget: { configurable: !0 },
				inClassStaticBlock: { configurable: !0 }
			};
			Parser$1.prototype.parse = function() {
				var node = this.options.program || this.startNode();
				return this.nextToken(), this.parseTopLevel(node);
			}, prototypeAccessors.inFunction.get = function() {
				return (2 & this.currentVarScope().flags) > 0;
			}, prototypeAccessors.inGenerator.get = function() {
				return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
			}, prototypeAccessors.inAsync.get = function() {
				return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
			}, prototypeAccessors.canAwait.get = function() {
				for (var i$1 = this.scopeStack.length - 1; i$1 >= 0; i$1--) {
					var scope = this.scopeStack[i$1];
					if (scope.inClassFieldInit || 256 & scope.flags) return !1;
					if (2 & scope.flags) return (4 & scope.flags) > 0;
				}
				return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
			}, prototypeAccessors.allowSuper.get = function() {
				var ref$1 = this.currentThisScope(), flags = ref$1.flags, inClassFieldInit = ref$1.inClassFieldInit;
				return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
			}, prototypeAccessors.allowDirectSuper.get = function() {
				return (128 & this.currentThisScope().flags) > 0;
			}, prototypeAccessors.treatFunctionsAsVar.get = function() {
				return this.treatFunctionsAsVarInScope(this.currentScope());
			}, prototypeAccessors.allowNewDotTarget.get = function() {
				var ref$1 = this.currentThisScope(), flags = ref$1.flags, inClassFieldInit = ref$1.inClassFieldInit;
				return (258 & flags) > 0 || inClassFieldInit;
			}, prototypeAccessors.inClassStaticBlock.get = function() {
				return (256 & this.currentVarScope().flags) > 0;
			}, Parser$1.extend = function() {
				for (var plugins = [], len = arguments.length; len--;) plugins[len] = arguments[len];
				for (var cls = this, i$1 = 0; i$1 < plugins.length; i$1++) cls = plugins[i$1](cls);
				return cls;
			}, Parser$1.parse = function(input, options) {
				return new this(options, input).parse();
			}, Parser$1.parseExpressionAt = function(input, pos, options) {
				var parser = new this(options, input, pos);
				return parser.nextToken(), parser.parseExpression();
			}, Parser$1.tokenizer = function(input, options) {
				return new this(options, input);
			}, Object.defineProperties(Parser$1.prototype, prototypeAccessors);
			var pp$9 = Parser$1.prototype, literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
			pp$9.strictDirective = function(start) {
				if (this.options.ecmaVersion < 5) return !1;
				for (;;) {
					skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length;
					var match = literal.exec(this.input.slice(start));
					if (!match) return !1;
					if ("use strict" === (match[1] || match[2])) {
						skipWhiteSpace.lastIndex = start + match[0].length;
						var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
						return ";" === next || "}" === next || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || "!" === next && "=" === this.input.charAt(end + 1));
					}
					start += match[0].length, skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length, ";" === this.input[start] && start++;
				}
			}, pp$9.eat = function(type$1) {
				return this.type === type$1 && (this.next(), !0);
			}, pp$9.isContextual = function(name) {
				return this.type === types$1$1.name && this.value === name && !this.containsEsc;
			}, pp$9.eatContextual = function(name) {
				return !!this.isContextual(name) && (this.next(), !0);
			}, pp$9.expectContextual = function(name) {
				this.eatContextual(name) || this.unexpected();
			}, pp$9.canInsertSemicolon = function() {
				return this.type === types$1$1.eof || this.type === types$1$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
			}, pp$9.insertSemicolon = function() {
				if (this.canInsertSemicolon()) return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), !0;
			}, pp$9.semicolon = function() {
				this.eat(types$1$1.semi) || this.insertSemicolon() || this.unexpected();
			}, pp$9.afterTrailingComma = function(tokType, notNext) {
				if (this.type === tokType) return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), !0;
			}, pp$9.expect = function(type$1) {
				this.eat(type$1) || this.unexpected();
			}, pp$9.unexpected = function(pos) {
				this.raise(null != pos ? pos : this.start, "Unexpected token");
			};
			var DestructuringErrors = function() {
				this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
			};
			pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
				if (refDestructuringErrors) {
					refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
					var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
					parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
				}
			}, pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
				if (!refDestructuringErrors) return !1;
				var shorthandAssign = refDestructuringErrors.shorthandAssign, doubleProto = refDestructuringErrors.doubleProto;
				if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;
				shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
			}, pp$9.checkYieldAwaitInDefaultParams = function() {
				this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
			}, pp$9.isSimpleAssignTarget = function(expr) {
				return "ParenthesizedExpression" === expr.type ? this.isSimpleAssignTarget(expr.expression) : "Identifier" === expr.type || "MemberExpression" === expr.type;
			};
			var pp$8 = Parser$1.prototype;
			pp$8.parseTopLevel = function(node) {
				var exports$1 = Object.create(null);
				for (node.body || (node.body = []); this.type !== types$1$1.eof;) {
					var stmt = this.parseStatement(null, !0, exports$1);
					node.body.push(stmt);
				}
				if (this.inModule) for (var i$1 = 0, list$1 = Object.keys(this.undefinedExports); i$1 < list$1.length; i$1 += 1) {
					var name = list$1[i$1];
					this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
				}
				return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
			};
			var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
			pp$8.isLet = function(context) {
				if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return !1;
				skipWhiteSpace.lastIndex = this.pos;
				var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
				if (91 === nextCh || 92 === nextCh) return !0;
				if (context) return !1;
				if (123 === nextCh || nextCh > 55295 && nextCh < 56320) return !0;
				if (isIdentifierStart(nextCh, !0)) {
					for (var pos = next + 1; isIdentifierChar(nextCh = this.input.charCodeAt(pos), !0);) ++pos;
					if (92 === nextCh || nextCh > 55295 && nextCh < 56320) return !0;
					var ident = this.input.slice(next, pos);
					if (!keywordRelationalOperator.test(ident)) return !0;
				}
				return !1;
			}, pp$8.isAsyncFunction = function() {
				if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return !1;
				skipWhiteSpace.lastIndex = this.pos;
				var after, skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length;
				return !(lineBreak.test(this.input.slice(this.pos, next)) || "function" !== this.input.slice(next, next + 8) || next + 8 !== this.input.length && (isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
			}, pp$8.parseStatement = function(context, topLevel, exports$1) {
				var kind, starttype = this.type, node = this.startNode();
				switch (this.isLet(context) && (starttype = types$1$1._var, kind = "let"), starttype) {
					case types$1$1._break:
					case types$1$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword);
					case types$1$1._debugger: return this.parseDebuggerStatement(node);
					case types$1$1._do: return this.parseDoStatement(node);
					case types$1$1._for: return this.parseForStatement(node);
					case types$1$1._function: return context && (this.strict || "if" !== context && "label" !== context) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, !1, !context);
					case types$1$1._class: return context && this.unexpected(), this.parseClass(node, !0);
					case types$1$1._if: return this.parseIfStatement(node);
					case types$1$1._return: return this.parseReturnStatement(node);
					case types$1$1._switch: return this.parseSwitchStatement(node);
					case types$1$1._throw: return this.parseThrowStatement(node);
					case types$1$1._try: return this.parseTryStatement(node);
					case types$1$1._const:
					case types$1$1._var: return kind = kind || this.value, context && "var" !== kind && this.unexpected(), this.parseVarStatement(node, kind);
					case types$1$1._while: return this.parseWhileStatement(node);
					case types$1$1._with: return this.parseWithStatement(node);
					case types$1$1.braceL: return this.parseBlock(!0, node);
					case types$1$1.semi: return this.parseEmptyStatement(node);
					case types$1$1._export:
					case types$1$1._import:
						if (this.options.ecmaVersion > 10 && starttype === types$1$1._import) {
							skipWhiteSpace.lastIndex = this.pos;
							var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
							if (40 === nextCh || 46 === nextCh) return this.parseExpressionStatement(node, this.parseExpression());
						}
						return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$1$1._import ? this.parseImport(node) : this.parseExport(node, exports$1);
					default:
						if (this.isAsyncFunction()) return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, !0, !context);
						var maybeName = this.value, expr = this.parseExpression();
						return starttype === types$1$1.name && "Identifier" === expr.type && this.eat(types$1$1.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
				}
			}, pp$8.parseBreakContinueStatement = function(node, keyword) {
				var isBreak = "break" === keyword;
				this.next(), this.eat(types$1$1.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$1$1.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
				for (var i$1 = 0; i$1 < this.labels.length; ++i$1) {
					var lab = this.labels[i$1];
					if (null == node.label || lab.name === node.label.name) {
						if (null != lab.kind && (isBreak || "loop" === lab.kind)) break;
						if (node.label && isBreak) break;
					}
				}
				return i$1 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
			}, pp$8.parseDebuggerStatement = function(node) {
				return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
			}, pp$8.parseDoStatement = function(node) {
				return this.next(), this.labels.push(loopLabel), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$1$1._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$1$1.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
			}, pp$8.parseForStatement = function(node) {
				this.next();
				var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
				if (this.labels.push(loopLabel), this.enterScope(0), this.expect(types$1$1.parenL), this.type === types$1$1.semi) return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
				var isLet = this.isLet();
				if (this.type === types$1$1._var || this.type === types$1$1._const || isLet) {
					var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
					return this.next(), this.parseVar(init$1, !0, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$1$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === init$1.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === types$1$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
				}
				var startsWithLet = this.isContextual("let"), isForOf = !1, containsEsc = this.containsEsc, refDestructuringErrors = new DestructuringErrors(), initPos = this.start, init$2 = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(!0, refDestructuringErrors);
				return this.type === types$1$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (awaitAt > -1 ? (this.type === types$1$1._in && this.unexpected(awaitAt), node.await = !0) : isForOf && this.options.ecmaVersion >= 8 && (init$2.start !== initPos || containsEsc || "Identifier" !== init$2.type || "async" !== init$2.name ? this.options.ecmaVersion >= 9 && (node.await = !1) : this.unexpected()), startsWithLet && isForOf && this.raise(init$2.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init$2, !1, refDestructuringErrors), this.checkLValPattern(init$2), this.parseForIn(node, init$2)) : (this.checkExpressionErrors(refDestructuringErrors, !0), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$2));
			}, pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
				return this.next(), this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), !1, isAsync);
			}, pp$8.parseIfStatement = function(node) {
				return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$1$1._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
			}, pp$8.parseReturnStatement = function(node) {
				return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$1$1.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
			}, pp$8.parseSwitchStatement = function(node) {
				var cur;
				this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$1$1.braceL), this.labels.push(switchLabel), this.enterScope(0);
				for (var sawDefault = !1; this.type !== types$1$1.braceR;) if (this.type === types$1$1._case || this.type === types$1$1._default) {
					var isCase = this.type === types$1$1._case;
					cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = !0, cur.test = null), this.expect(types$1$1.colon);
				} else cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
				return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
			}, pp$8.parseThrowStatement = function(node) {
				return this.next(), lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
			};
			var empty$1 = [];
			pp$8.parseCatchClauseParam = function() {
				var param = this.parseBindingAtom(), simple = "Identifier" === param.type;
				return this.enterScope(simple ? 32 : 0), this.checkLValPattern(param, simple ? 4 : 2), this.expect(types$1$1.parenR), param;
			}, pp$8.parseTryStatement = function(node) {
				if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$1$1._catch) {
					var clause = this.startNode();
					this.next(), this.eat(types$1$1.parenL) ? clause.param = this.parseCatchClauseParam() : (this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0)), clause.body = this.parseBlock(!1), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
				}
				return node.finalizer = this.eat(types$1$1._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
			}, pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
				return this.next(), this.parseVar(node, !1, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
			}, pp$8.parseWhileStatement = function(node) {
				return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
			}, pp$8.parseWithStatement = function(node) {
				return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
			}, pp$8.parseEmptyStatement = function(node) {
				return this.next(), this.finishNode(node, "EmptyStatement");
			}, pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
				for (var i$1 = 0, list$1 = this.labels; i$1 < list$1.length; i$1 += 1) list$1[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
				for (var kind = this.type.isLoop ? "loop" : this.type === types$1$1._switch ? "switch" : null, i$2 = this.labels.length - 1; i$2 >= 0; i$2--) {
					var label$1 = this.labels[i$2];
					if (label$1.statementStart !== node.start) break;
					label$1.statementStart = this.start, label$1.kind = kind;
				}
				return this.labels.push({
					name: maybeName,
					kind,
					statementStart: this.start
				}), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
			}, pp$8.parseExpressionStatement = function(node, expr) {
				return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
			}, pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
				for (void 0 === createNewLexicalScope && (createNewLexicalScope = !0), void 0 === node && (node = this.startNode()), node.body = [], this.expect(types$1$1.braceL), createNewLexicalScope && this.enterScope(0); this.type !== types$1$1.braceR;) {
					var stmt = this.parseStatement(null);
					node.body.push(stmt);
				}
				return exitStrict && (this.strict = !1), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
			}, pp$8.parseFor = function(node, init$1) {
				return node.init = init$1, this.expect(types$1$1.semi), node.test = this.type === types$1$1.semi ? null : this.parseExpression(), this.expect(types$1$1.semi), node.update = this.type === types$1$1.parenR ? null : this.parseExpression(), this.expect(types$1$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
			}, pp$8.parseForIn = function(node, init$1) {
				var isForIn = this.type === types$1$1._in;
				return this.next(), "VariableDeclaration" === init$1.type && null != init$1.declarations[0].init && (!isForIn || this.options.ecmaVersion < 8 || this.strict || "var" !== init$1.kind || "Identifier" !== init$1.declarations[0].id.type) && this.raise(init$1.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init$1, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$1$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
			}, pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
				for (node.declarations = [], node.kind = kind;;) {
					var decl = this.startNode();
					if (this.parseVarId(decl, kind), this.eat(types$1$1.eq) ? decl.init = this.parseMaybeAssign(isFor) : allowMissingInitializer || "const" !== kind || this.type === types$1$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? allowMissingInitializer || "Identifier" === decl.id.type || isFor && (this.type === types$1$1._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$1$1.comma)) break;
				}
				return node;
			}, pp$8.parseVarId = function(decl, kind) {
				decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, "var" === kind ? 1 : 2, !1);
			};
			var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2;
			function isPrivateNameConflicted(privateNameMap, element) {
				var name = element.key.name, curr = privateNameMap[name], next = "true";
				return "MethodDefinition" !== element.type || "get" !== element.kind && "set" !== element.kind || (next = (element.static ? "s" : "i") + element.kind), "iget" === curr && "iset" === next || "iset" === curr && "iget" === next || "sget" === curr && "sset" === next || "sset" === curr && "sget" === next ? (privateNameMap[name] = "true", !1) : !!curr || (privateNameMap[name] = next, !1);
			}
			function checkKeyName(node, name) {
				var computed = node.computed, key = node.key;
				return !computed && ("Identifier" === key.type && key.name === name || "Literal" === key.type && key.value === name);
			}
			pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
				this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$1$1.star && statement & FUNC_HANGING_STATEMENT && this.unexpected(), node.generator = this.eat(types$1$1.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT && (node.id = 4 & statement && this.type !== types$1$1.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
				var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
				return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags(node.async, node.generator)), statement & FUNC_STATEMENT || (node.id = this.type === types$1$1.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, !1, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
			}, pp$8.parseFunctionParams = function(node) {
				this.expect(types$1$1.parenL), node.params = this.parseBindingList(types$1$1.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
			}, pp$8.parseClass = function(node, isStatement) {
				this.next();
				var oldStrict = this.strict;
				this.strict = !0, this.parseClassId(node, isStatement), this.parseClassSuper(node);
				var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = !1;
				for (classBody.body = [], this.expect(types$1$1.braceL); this.type !== types$1$1.braceR;) {
					var element = this.parseClassElement(null !== node.superClass);
					element && (classBody.body.push(element), "MethodDefinition" === element.type && "constructor" === element.kind ? (hadConstructor && this.raiseRecoverable(element.start, "Duplicate constructor in the same class"), hadConstructor = !0) : element.key && "PrivateIdentifier" === element.key.type && isPrivateNameConflicted(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
				}
				return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
			}, pp$8.parseClassElement = function(constructorAllowsSuper) {
				if (this.eat(types$1$1.semi)) return null;
				var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator = !1, isAsync = !1, kind = "method", isStatic = !1;
				if (this.eatContextual("static")) {
					if (ecmaVersion >= 13 && this.eat(types$1$1.braceL)) return this.parseClassStaticBlock(node), node;
					this.isClassElementNameStart() || this.type === types$1$1.star ? isStatic = !0 : keyName = "static";
				}
				if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$1$1.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = !0), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1$1.star) && (isGenerator = !0), !keyName && !isAsync && !isGenerator) {
					var lastValue = this.value;
					(this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
				}
				if (keyName ? (node.computed = !1, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$1$1.parenL || "method" !== kind || isGenerator || isAsync) {
					var isConstructor = !node.static && checkKeyName(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
					isConstructor && "method" !== kind && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
				} else this.parseClassField(node);
				return node;
			}, pp$8.isClassElementNameStart = function() {
				return this.type === types$1$1.name || this.type === types$1$1.privateId || this.type === types$1$1.num || this.type === types$1$1.string || this.type === types$1$1.bracketL || this.type.keyword;
			}, pp$8.parseClassElementName = function(element) {
				this.type === types$1$1.privateId ? ("constructor" === this.value && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = !1, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
			}, pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
				var key = method.key;
				"constructor" === method.kind ? (isGenerator && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
				var value$1 = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
				return "get" === method.kind && 0 !== value$1.params.length && this.raiseRecoverable(value$1.start, "getter should have no params"), "set" === method.kind && 1 !== value$1.params.length && this.raiseRecoverable(value$1.start, "setter should have exactly one param"), "set" === method.kind && "RestElement" === value$1.params[0].type && this.raiseRecoverable(value$1.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
			}, pp$8.parseClassField = function(field) {
				if (checkKeyName(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$1$1.eq)) {
					var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
					scope.inClassFieldInit = !0, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
				} else field.value = null;
				return this.semicolon(), this.finishNode(field, "PropertyDefinition");
			}, pp$8.parseClassStaticBlock = function(node) {
				node.body = [];
				var oldLabels = this.labels;
				for (this.labels = [], this.enterScope(320); this.type !== types$1$1.braceR;) {
					var stmt = this.parseStatement(null);
					node.body.push(stmt);
				}
				return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
			}, pp$8.parseClassId = function(node, isStatement) {
				this.type === types$1$1.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, !1)) : (!0 === isStatement && this.unexpected(), node.id = null);
			}, pp$8.parseClassSuper = function(node) {
				node.superClass = this.eat(types$1$1._extends) ? this.parseExprSubscripts(null, !1) : null;
			}, pp$8.enterClassBody = function() {
				var element = {
					declared: Object.create(null),
					used: []
				};
				return this.privateNameStack.push(element), element.declared;
			}, pp$8.exitClassBody = function() {
				var ref$1 = this.privateNameStack.pop(), declared = ref$1.declared, used = ref$1.used;
				if (this.options.checkPrivateFields) for (var len = this.privateNameStack.length, parent = 0 === len ? null : this.privateNameStack[len - 1], i$1 = 0; i$1 < used.length; ++i$1) {
					var id = used[i$1];
					hasOwn$2(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
				}
			}, pp$8.parseExportAllDeclaration = function(node, exports$1) {
				return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports$1, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$1$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
			}, pp$8.parseExport = function(node, exports$1) {
				if (this.next(), this.eat(types$1$1.star)) return this.parseExportAllDeclaration(node, exports$1);
				if (this.eat(types$1$1._default)) return this.checkExport(exports$1, "default", this.lastTokStart), node.declaration = this.parseExportDefaultDeclaration(), this.finishNode(node, "ExportDefaultDeclaration");
				if (this.shouldParseExportStatement()) node.declaration = this.parseExportDeclaration(node), "VariableDeclaration" === node.declaration.type ? this.checkVariableExport(exports$1, node.declaration.declarations) : this.checkExport(exports$1, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
				else {
					if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports$1), this.eatContextual("from")) this.type !== types$1$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause());
					else {
						for (var i$1 = 0, list$1 = node.specifiers; i$1 < list$1.length; i$1 += 1) {
							var spec = list$1[i$1];
							this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), "Literal" === spec.local.type && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
						}
						node.source = null;
					}
					this.semicolon();
				}
				return this.finishNode(node, "ExportNamedDeclaration");
			}, pp$8.parseExportDeclaration = function(node) {
				return this.parseStatement(null);
			}, pp$8.parseExportDefaultDeclaration = function() {
				var isAsync;
				if (this.type === types$1$1._function || (isAsync = this.isAsyncFunction())) {
					var fNode = this.startNode();
					return this.next(), isAsync && this.next(), this.parseFunction(fNode, 4 | FUNC_STATEMENT, !1, isAsync);
				}
				if (this.type === types$1$1._class) {
					var cNode = this.startNode();
					return this.parseClass(cNode, "nullableID");
				}
				var declaration = this.parseMaybeAssign();
				return this.semicolon(), declaration;
			}, pp$8.checkExport = function(exports$1, name, pos) {
				exports$1 && ("string" != typeof name && (name = "Identifier" === name.type ? name.name : name.value), hasOwn$2(exports$1, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports$1[name] = !0);
			}, pp$8.checkPatternExport = function(exports$1, pat) {
				var type$1 = pat.type;
				if ("Identifier" === type$1) this.checkExport(exports$1, pat, pat.start);
				else if ("ObjectPattern" === type$1) for (var i$1 = 0, list$1 = pat.properties; i$1 < list$1.length; i$1 += 1) {
					var prop = list$1[i$1];
					this.checkPatternExport(exports$1, prop);
				}
				else if ("ArrayPattern" === type$1) for (var i$1$1 = 0, list$1$1 = pat.elements; i$1$1 < list$1$1.length; i$1$1 += 1) {
					var elt = list$1$1[i$1$1];
					elt && this.checkPatternExport(exports$1, elt);
				}
				else "Property" === type$1 ? this.checkPatternExport(exports$1, pat.value) : "AssignmentPattern" === type$1 ? this.checkPatternExport(exports$1, pat.left) : "RestElement" === type$1 && this.checkPatternExport(exports$1, pat.argument);
			}, pp$8.checkVariableExport = function(exports$1, decls) {
				if (exports$1) for (var i$1 = 0, list$1 = decls; i$1 < list$1.length; i$1 += 1) {
					var decl = list$1[i$1];
					this.checkPatternExport(exports$1, decl.id);
				}
			}, pp$8.shouldParseExportStatement = function() {
				return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
			}, pp$8.parseExportSpecifier = function(exports$1) {
				var node = this.startNode();
				return node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports$1, node.exported, node.exported.start), this.finishNode(node, "ExportSpecifier");
			}, pp$8.parseExportSpecifiers = function(exports$1) {
				var nodes = [], first = !0;
				for (this.expect(types$1$1.braceL); !this.eat(types$1$1.braceR);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.braceR)) break;
					nodes.push(this.parseExportSpecifier(exports$1));
				}
				return nodes;
			}, pp$8.parseImport = function(node) {
				return this.next(), this.type === types$1$1.string ? (node.specifiers = empty$1, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$1$1.string ? this.parseExprAtom() : this.unexpected()), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
			}, pp$8.parseImportSpecifier = function() {
				var node = this.startNode();
				return node.imported = this.parseModuleExportName(), this.eatContextual("as") ? node.local = this.parseIdent() : (this.checkUnreserved(node.imported), node.local = node.imported), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportSpecifier");
			}, pp$8.parseImportDefaultSpecifier = function() {
				var node = this.startNode();
				return node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportDefaultSpecifier");
			}, pp$8.parseImportNamespaceSpecifier = function() {
				var node = this.startNode();
				return this.next(), this.expectContextual("as"), node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportNamespaceSpecifier");
			}, pp$8.parseImportSpecifiers = function() {
				var nodes = [], first = !0;
				if (this.type === types$1$1.name && (nodes.push(this.parseImportDefaultSpecifier()), !this.eat(types$1$1.comma))) return nodes;
				if (this.type === types$1$1.star) return nodes.push(this.parseImportNamespaceSpecifier()), nodes;
				for (this.expect(types$1$1.braceL); !this.eat(types$1$1.braceR);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.braceR)) break;
					nodes.push(this.parseImportSpecifier());
				}
				return nodes;
			}, pp$8.parseWithClause = function() {
				var nodes = [];
				if (!this.eat(types$1$1._with)) return nodes;
				this.expect(types$1$1.braceL);
				for (var attributeKeys = {}, first = !0; !this.eat(types$1$1.braceR);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.braceR)) break;
					var attr = this.parseImportAttribute(), keyName = "Identifier" === attr.key.type ? attr.key.name : attr.key.value;
					hasOwn$2(attributeKeys, keyName) && this.raiseRecoverable(attr.key.start, "Duplicate attribute key '" + keyName + "'"), attributeKeys[keyName] = !0, nodes.push(attr);
				}
				return nodes;
			}, pp$8.parseImportAttribute = function() {
				var node = this.startNode();
				return node.key = this.type === types$1$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved), this.expect(types$1$1.colon), this.type !== types$1$1.string && this.unexpected(), node.value = this.parseExprAtom(), this.finishNode(node, "ImportAttribute");
			}, pp$8.parseModuleExportName = function() {
				if (this.options.ecmaVersion >= 13 && this.type === types$1$1.string) {
					var stringLiteral = this.parseLiteral(this.value);
					return loneSurrogate.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
				}
				return this.parseIdent(!0);
			}, pp$8.adaptDirectivePrologue = function(statements) {
				for (var i$1 = 0; i$1 < statements.length && this.isDirectiveCandidate(statements[i$1]); ++i$1) statements[i$1].directive = statements[i$1].expression.raw.slice(1, -1);
			}, pp$8.isDirectiveCandidate = function(statement) {
				return this.options.ecmaVersion >= 5 && "ExpressionStatement" === statement.type && "Literal" === statement.expression.type && "string" == typeof statement.expression.value && ("\"" === this.input[statement.start] || "'" === this.input[statement.start]);
			};
			var pp$7 = Parser$1.prototype;
			pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
				if (this.options.ecmaVersion >= 6 && node) switch (node.type) {
					case "Identifier":
						this.inAsync && "await" === node.name && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
						break;
					case "ObjectPattern":
					case "ArrayPattern":
					case "AssignmentPattern":
					case "RestElement": break;
					case "ObjectExpression":
						node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, !0);
						for (var i$1 = 0, list$1 = node.properties; i$1 < list$1.length; i$1 += 1) {
							var prop = list$1[i$1];
							this.toAssignable(prop, isBinding), "RestElement" !== prop.type || "ArrayPattern" !== prop.argument.type && "ObjectPattern" !== prop.argument.type || this.raise(prop.argument.start, "Unexpected token");
						}
						break;
					case "Property":
						"init" !== node.kind && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
						break;
					case "ArrayExpression":
						node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, !0), this.toAssignableList(node.elements, isBinding);
						break;
					case "SpreadElement":
						node.type = "RestElement", this.toAssignable(node.argument, isBinding), "AssignmentPattern" === node.argument.type && this.raise(node.argument.start, "Rest elements cannot have a default value");
						break;
					case "AssignmentExpression":
						"=" !== node.operator && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
						break;
					case "ParenthesizedExpression":
						this.toAssignable(node.expression, isBinding, refDestructuringErrors);
						break;
					case "ChainExpression":
						this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
						break;
					case "MemberExpression": if (!isBinding) break;
					default: this.raise(node.start, "Assigning to rvalue");
				}
				else refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, !0);
				return node;
			}, pp$7.toAssignableList = function(exprList, isBinding) {
				for (var end = exprList.length, i$1 = 0; i$1 < end; i$1++) {
					var elt = exprList[i$1];
					elt && this.toAssignable(elt, isBinding);
				}
				if (end) {
					var last = exprList[end - 1];
					6 === this.options.ecmaVersion && isBinding && last && "RestElement" === last.type && "Identifier" !== last.argument.type && this.unexpected(last.argument.start);
				}
				return exprList;
			}, pp$7.parseSpread = function(refDestructuringErrors) {
				var node = this.startNode();
				return this.next(), node.argument = this.parseMaybeAssign(!1, refDestructuringErrors), this.finishNode(node, "SpreadElement");
			}, pp$7.parseRestBinding = function() {
				var node = this.startNode();
				return this.next(), 6 === this.options.ecmaVersion && this.type !== types$1$1.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
			}, pp$7.parseBindingAtom = function() {
				if (this.options.ecmaVersion >= 6) switch (this.type) {
					case types$1$1.bracketL:
						var node = this.startNode();
						return this.next(), node.elements = this.parseBindingList(types$1$1.bracketR, !0, !0), this.finishNode(node, "ArrayPattern");
					case types$1$1.braceL: return this.parseObj(!0);
				}
				return this.parseIdent();
			}, pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
				for (var elts = [], first = !0; !this.eat(close);) if (first ? first = !1 : this.expect(types$1$1.comma), allowEmpty && this.type === types$1$1.comma) elts.push(null);
				else {
					if (allowTrailingComma && this.afterTrailingComma(close)) break;
					if (this.type === types$1$1.ellipsis) {
						var rest = this.parseRestBinding();
						this.parseBindingListItem(rest), elts.push(rest), this.type === types$1$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.expect(close);
						break;
					}
					elts.push(this.parseAssignableListItem(allowModifiers));
				}
				return elts;
			}, pp$7.parseAssignableListItem = function(allowModifiers) {
				var elem = this.parseMaybeDefault(this.start, this.startLoc);
				return this.parseBindingListItem(elem), elem;
			}, pp$7.parseBindingListItem = function(param) {
				return param;
			}, pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
				if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$1$1.eq)) return left;
				var node = this.startNodeAt(startPos, startLoc);
				return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
			}, pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
				void 0 === bindingType && (bindingType = 0);
				var isBind = 0 !== bindingType;
				switch (expr.type) {
					case "Identifier":
						this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (2 === bindingType && "let" === expr.name && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn$2(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = !0), 5 !== bindingType && this.declareName(expr.name, bindingType, expr.start));
						break;
					case "ChainExpression":
						this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
						break;
					case "MemberExpression":
						isBind && this.raiseRecoverable(expr.start, "Binding member expression");
						break;
					case "ParenthesizedExpression": return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
					default: this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
				}
			}, pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
				switch (void 0 === bindingType && (bindingType = 0), expr.type) {
					case "ObjectPattern":
						for (var i$1 = 0, list$1 = expr.properties; i$1 < list$1.length; i$1 += 1) {
							var prop = list$1[i$1];
							this.checkLValInnerPattern(prop, bindingType, checkClashes);
						}
						break;
					case "ArrayPattern":
						for (var i$1$1 = 0, list$1$1 = expr.elements; i$1$1 < list$1$1.length; i$1$1 += 1) {
							var elem = list$1$1[i$1$1];
							elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
						}
						break;
					default: this.checkLValSimple(expr, bindingType, checkClashes);
				}
			}, pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
				switch (void 0 === bindingType && (bindingType = 0), expr.type) {
					case "Property":
						this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
						break;
					case "AssignmentPattern":
						this.checkLValPattern(expr.left, bindingType, checkClashes);
						break;
					case "RestElement":
						this.checkLValPattern(expr.argument, bindingType, checkClashes);
						break;
					default: this.checkLValPattern(expr, bindingType, checkClashes);
				}
			};
			var TokContext = function(token, isExpr, preserveSpace, override, generator) {
				this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator;
			}, types$7 = {
				b_stat: new TokContext("{", !1),
				b_expr: new TokContext("{", !0),
				b_tmpl: new TokContext("${", !1),
				p_stat: new TokContext("(", !1),
				p_expr: new TokContext("(", !0),
				q_tmpl: new TokContext("`", !0, !0, function(p$1) {
					return p$1.tryReadTemplateToken();
				}),
				f_stat: new TokContext("function", !1),
				f_expr: new TokContext("function", !0),
				f_expr_gen: new TokContext("function", !0, !1, null, !0),
				f_gen: new TokContext("function", !1, !1, null, !0)
			}, pp$6 = Parser$1.prototype;
			pp$6.initialContext = function() {
				return [types$7.b_stat];
			}, pp$6.curContext = function() {
				return this.context[this.context.length - 1];
			}, pp$6.braceIsBlock = function(prevType) {
				var parent = this.curContext();
				return parent === types$7.f_expr || parent === types$7.f_stat || (prevType !== types$1$1.colon || parent !== types$7.b_stat && parent !== types$7.b_expr ? prevType === types$1$1._return || prevType === types$1$1.name && this.exprAllowed ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$1$1._else || prevType === types$1$1.semi || prevType === types$1$1.eof || prevType === types$1$1.parenR || prevType === types$1$1.arrow || (prevType === types$1$1.braceL ? parent === types$7.b_stat : prevType !== types$1$1._var && prevType !== types$1$1._const && prevType !== types$1$1.name && !this.exprAllowed) : !parent.isExpr);
			}, pp$6.inGeneratorContext = function() {
				for (var i$1 = this.context.length - 1; i$1 >= 1; i$1--) {
					var context = this.context[i$1];
					if ("function" === context.token) return context.generator;
				}
				return !1;
			}, pp$6.updateContext = function(prevType) {
				var update, type$1 = this.type;
				type$1.keyword && prevType === types$1$1.dot ? this.exprAllowed = !1 : (update = type$1.updateContext) ? update.call(this, prevType) : this.exprAllowed = type$1.beforeExpr;
			}, pp$6.overrideContext = function(tokenCtx) {
				this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
			}, types$1$1.parenR.updateContext = types$1$1.braceR.updateContext = function() {
				if (1 !== this.context.length) {
					var out = this.context.pop();
					out === types$7.b_stat && "function" === this.curContext().token && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
				} else this.exprAllowed = !0;
			}, types$1$1.braceL.updateContext = function(prevType) {
				this.context.push(this.braceIsBlock(prevType) ? types$7.b_stat : types$7.b_expr), this.exprAllowed = !0;
			}, types$1$1.dollarBraceL.updateContext = function() {
				this.context.push(types$7.b_tmpl), this.exprAllowed = !0;
			}, types$1$1.parenL.updateContext = function(prevType) {
				var statementParens = prevType === types$1$1._if || prevType === types$1$1._for || prevType === types$1$1._with || prevType === types$1$1._while;
				this.context.push(statementParens ? types$7.p_stat : types$7.p_expr), this.exprAllowed = !0;
			}, types$1$1.incDec.updateContext = function() {}, types$1$1._function.updateContext = types$1$1._class.updateContext = function(prevType) {
				!prevType.beforeExpr || prevType === types$1$1._else || prevType === types$1$1.semi && this.curContext() !== types$7.p_stat || prevType === types$1$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$1$1.colon || prevType === types$1$1.braceL) && this.curContext() === types$7.b_stat ? this.context.push(types$7.f_stat) : this.context.push(types$7.f_expr), this.exprAllowed = !1;
			}, types$1$1.colon.updateContext = function() {
				"function" === this.curContext().token && this.context.pop(), this.exprAllowed = !0;
			}, types$1$1.backQuote.updateContext = function() {
				this.curContext() === types$7.q_tmpl ? this.context.pop() : this.context.push(types$7.q_tmpl), this.exprAllowed = !1;
			}, types$1$1.star.updateContext = function(prevType) {
				if (prevType === types$1$1._function) {
					var index = this.context.length - 1;
					this.context[index] === types$7.f_expr ? this.context[index] = types$7.f_expr_gen : this.context[index] = types$7.f_gen;
				}
				this.exprAllowed = !0;
			}, types$1$1.name.updateContext = function(prevType) {
				var allowed = !1;
				this.options.ecmaVersion >= 6 && prevType !== types$1$1.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (allowed = !0), this.exprAllowed = allowed;
			};
			var pp$5 = Parser$1.prototype;
			function isLocalVariableAccess(node) {
				return "Identifier" === node.type || "ParenthesizedExpression" === node.type && isLocalVariableAccess(node.expression);
			}
			function isPrivateFieldAccess(node) {
				return "MemberExpression" === node.type && "PrivateIdentifier" === node.property.type || "ChainExpression" === node.type && isPrivateFieldAccess(node.expression) || "ParenthesizedExpression" === node.type && isPrivateFieldAccess(node.expression);
			}
			pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
				if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === prop.type || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
					var name, key = prop.key;
					switch (key.type) {
						case "Identifier":
							name = key.name;
							break;
						case "Literal":
							name = String(key.value);
							break;
						default: return;
					}
					var kind = prop.kind;
					if (this.options.ecmaVersion >= 6) "__proto__" === name && "init" === kind && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = !0);
					else {
						var other = propHash[name = "$" + name];
						if (other) ("init" === kind ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
						else other = propHash[name] = {
							init: !1,
							get: !1,
							set: !1
						};
						other[kind] = !0;
					}
				}
			}, pp$5.parseExpression = function(forInit, refDestructuringErrors) {
				var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
				if (this.type === types$1$1.comma) {
					var node = this.startNodeAt(startPos, startLoc);
					for (node.expressions = [expr]; this.eat(types$1$1.comma);) node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
					return this.finishNode(node, "SequenceExpression");
				}
				return expr;
			}, pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
				if (this.isContextual("yield")) {
					if (this.inGenerator) return this.parseYield(forInit);
					this.exprAllowed = !1;
				}
				var ownDestructuringErrors = !1, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
				refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors(), ownDestructuringErrors = !0);
				var startPos = this.start, startLoc = this.startLoc;
				this.type !== types$1$1.parenL && this.type !== types$1$1.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = "await" === forInit);
				var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
				if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
					var node = this.startNodeAt(startPos, startLoc);
					return node.operator = this.value, this.type === types$1$1.eq && (left = this.toAssignable(left, !1, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$1$1.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
				}
				return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, !0), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
			}, pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
				var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
				if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
				if (this.eat(types$1$1.question)) {
					var node = this.startNodeAt(startPos, startLoc);
					return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$1$1.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
				}
				return expr;
			}, pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
				var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, !1, !1, forInit);
				return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && "ArrowFunctionExpression" === expr.type ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
			}, pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
				var prec = this.type.binop;
				if (null != prec && (!forInit || this.type !== types$1$1._in) && prec > minPrec) {
					var logical = this.type === types$1$1.logicalOR || this.type === types$1$1.logicalAND, coalesce = this.type === types$1$1.coalesce;
					coalesce && (prec = types$1$1.logicalAND.binop);
					var op = this.value;
					this.next();
					var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, !1, !1, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
					return (logical && this.type === types$1$1.coalesce || coalesce && (this.type === types$1$1.logicalOR || this.type === types$1$1.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
				}
				return left;
			}, pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
				"PrivateIdentifier" === right.type && this.raise(right.start, "Private identifier can only be left side of binary expression");
				var node = this.startNodeAt(startPos, startLoc);
				return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
			}, pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
				var expr, startPos = this.start, startLoc = this.startLoc;
				if (this.isContextual("await") && this.canAwait) expr = this.parseAwait(forInit), sawUnary = !0;
				else if (this.type.prefix) {
					var node = this.startNode(), update = this.type === types$1$1.incDec;
					node.operator = this.value, node.prefix = !0, this.next(), node.argument = this.parseMaybeUnary(null, !0, update, forInit), this.checkExpressionErrors(refDestructuringErrors, !0), update ? this.checkLValSimple(node.argument) : this.strict && "delete" === node.operator && isLocalVariableAccess(node.argument) ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : "delete" === node.operator && isPrivateFieldAccess(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = !0, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
				} else if (sawUnary || this.type !== types$1$1.privateId) {
					if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors)) return expr;
					for (; this.type.postfix && !this.canInsertSemicolon();) {
						var node$1 = this.startNodeAt(startPos, startLoc);
						node$1.operator = this.value, node$1.prefix = !1, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
					}
				} else (forInit || 0 === this.privateNameStack.length) && this.options.checkPrivateFields && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$1$1._in && this.unexpected();
				return incDec || !this.eat(types$1$1.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, !1, !1, forInit), "**", !1);
			}, pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
				var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
				if ("ArrowFunctionExpression" === expr.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd)) return expr;
				var result = this.parseSubscripts(expr, startPos, startLoc, !1, forInit);
				return refDestructuringErrors && "MemberExpression" === result.type && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
			}, pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
				for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && "Identifier" === base.type && "async" === base.name && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = !1;;) {
					var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
					if (element.optional && (optionalChained = !0), element === base || "ArrowFunctionExpression" === element.type) {
						if (optionalChained) {
							var chainNode = this.startNodeAt(startPos, startLoc);
							chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
						}
						return element;
					}
					base = element;
				}
			}, pp$5.shouldParseAsyncArrow = function() {
				return !this.canInsertSemicolon() && this.eat(types$1$1.arrow);
			}, pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
				return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, !0, forInit);
			}, pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
				var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$1$1.questionDot);
				noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
				var computed = this.eat(types$1$1.bracketL);
				if (computed || optional && this.type !== types$1$1.parenL && this.type !== types$1$1.backQuote || this.eat(types$1$1.dot)) {
					var node = this.startNodeAt(startPos, startLoc);
					node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$1$1.bracketR)) : this.type === types$1$1.privateId && "Super" !== base.type ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent("never" !== this.options.allowReserved), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
				} else if (!noCalls && this.eat(types$1$1.parenL)) {
					var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
					this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
					var exprList = this.parseExprList(types$1$1.parenR, this.options.ecmaVersion >= 8, !1, refDestructuringErrors);
					if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) return this.checkPatternErrors(refDestructuringErrors, !1), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
					this.checkExpressionErrors(refDestructuringErrors, !0), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
					var node$1 = this.startNodeAt(startPos, startLoc);
					node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
				} else if (this.type === types$1$1.backQuote) {
					(optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
					var node$2 = this.startNodeAt(startPos, startLoc);
					node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: !0 }), base = this.finishNode(node$2, "TaggedTemplateExpression");
				}
				return base;
			}, pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
				this.type === types$1$1.slash && this.readRegexp();
				var node, canBeArrow = this.potentialArrowAt === this.start;
				switch (this.type) {
					case types$1$1._super: return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$1$1.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$1$1.dot && this.type !== types$1$1.bracketL && this.type !== types$1$1.parenL && this.unexpected(), this.finishNode(node, "Super");
					case types$1$1._this: return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
					case types$1$1.name:
						var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(!1);
						if (this.options.ecmaVersion >= 8 && !containsEsc && "async" === id.name && !this.canInsertSemicolon() && this.eat(types$1$1._function)) return this.overrideContext(types$7.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, !1, !0, forInit);
						if (canBeArrow && !this.canInsertSemicolon()) {
							if (this.eat(types$1$1.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], !1, forInit);
							if (this.options.ecmaVersion >= 8 && "async" === id.name && this.type === types$1$1.name && !containsEsc && (!this.potentialArrowInForAwait || "of" !== this.value || this.containsEsc)) return id = this.parseIdent(!1), !this.canInsertSemicolon() && this.eat(types$1$1.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], !0, forInit);
						}
						return id;
					case types$1$1.regexp:
						var value$1 = this.value;
						return (node = this.parseLiteral(value$1.value)).regex = {
							pattern: value$1.pattern,
							flags: value$1.flags
						}, node;
					case types$1$1.num:
					case types$1$1.string: return this.parseLiteral(this.value);
					case types$1$1._null:
					case types$1$1._true:
					case types$1$1._false: return (node = this.startNode()).value = this.type === types$1$1._null ? null : this.type === types$1$1._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
					case types$1$1.parenL:
						var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
						return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
					case types$1$1.bracketL: return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$1$1.bracketR, !0, !0, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
					case types$1$1.braceL: return this.overrideContext(types$7.b_expr), this.parseObj(!1, refDestructuringErrors);
					case types$1$1._function: return node = this.startNode(), this.next(), this.parseFunction(node, 0);
					case types$1$1._class: return this.parseClass(this.startNode(), !1);
					case types$1$1._new: return this.parseNew();
					case types$1$1.backQuote: return this.parseTemplate();
					case types$1$1._import: return this.options.ecmaVersion >= 11 ? this.parseExprImport(forNew) : this.unexpected();
					default: return this.parseExprAtomDefault();
				}
			}, pp$5.parseExprAtomDefault = function() {
				this.unexpected();
			}, pp$5.parseExprImport = function(forNew) {
				var node = this.startNode();
				if (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import"), this.next(), this.type === types$1$1.parenL && !forNew) return this.parseDynamicImport(node);
				if (this.type === types$1$1.dot) {
					var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
					return meta.name = "import", node.meta = this.finishNode(meta, "Identifier"), this.parseImportMeta(node);
				}
				this.unexpected();
			}, pp$5.parseDynamicImport = function(node) {
				if (this.next(), node.source = this.parseMaybeAssign(), this.options.ecmaVersion >= 16) this.eat(types$1$1.parenR) ? node.options = null : (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.parenR) ? node.options = null : (node.options = this.parseMaybeAssign(), this.eat(types$1$1.parenR) || (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.parenR) || this.unexpected())));
				else if (!this.eat(types$1$1.parenR)) {
					var errorPos = this.start;
					this.eat(types$1$1.comma) && this.eat(types$1$1.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
				}
				return this.finishNode(node, "ImportExpression");
			}, pp$5.parseImportMeta = function(node) {
				this.next();
				var containsEsc = this.containsEsc;
				return node.property = this.parseIdent(!0), "meta" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), "module" === this.options.sourceType || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
			}, pp$5.parseLiteral = function(value$1) {
				var node = this.startNode();
				return node.value = value$1, node.raw = this.input.slice(this.start, this.end), 110 === node.raw.charCodeAt(node.raw.length - 1) && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
			}, pp$5.parseParenExpression = function() {
				this.expect(types$1$1.parenL);
				var val = this.parseExpression();
				return this.expect(types$1$1.parenR), val;
			}, pp$5.shouldParseArrow = function(exprList) {
				return !this.canInsertSemicolon();
			}, pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
				var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
				if (this.options.ecmaVersion >= 6) {
					this.next();
					var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = !0, lastIsComma = !1, refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
					for (this.yieldPos = 0, this.awaitPos = 0; this.type !== types$1$1.parenR;) {
						if (first ? first = !1 : this.expect(types$1$1.comma), allowTrailingComma && this.afterTrailingComma(types$1$1.parenR, !0)) {
							lastIsComma = !0;
							break;
						}
						if (this.type === types$1$1.ellipsis) {
							spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$1$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
							break;
						}
						exprList.push(this.parseMaybeAssign(!1, refDestructuringErrors, this.parseParenItem));
					}
					var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
					if (this.expect(types$1$1.parenR), canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1$1.arrow)) return this.checkPatternErrors(refDestructuringErrors, !1), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
					exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, !0), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
				} else val = this.parseParenExpression();
				if (this.options.preserveParens) {
					var par = this.startNodeAt(startPos, startLoc);
					return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
				}
				return val;
			}, pp$5.parseParenItem = function(item) {
				return item;
			}, pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
				return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, !1, forInit);
			};
			var empty = [];
			pp$5.parseNew = function() {
				this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
				var node = this.startNode();
				if (this.next(), this.options.ecmaVersion >= 6 && this.type === types$1$1.dot) {
					var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
					meta.name = "new", node.meta = this.finishNode(meta, "Identifier"), this.next();
					var containsEsc = this.containsEsc;
					return node.property = this.parseIdent(!0), "target" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
				}
				var startPos = this.start, startLoc = this.startLoc;
				return node.callee = this.parseSubscripts(this.parseExprAtom(null, !1, !0), startPos, startLoc, !0, !1), this.eat(types$1$1.parenL) ? node.arguments = this.parseExprList(types$1$1.parenR, this.options.ecmaVersion >= 8, !1) : node.arguments = empty, this.finishNode(node, "NewExpression");
			}, pp$5.parseTemplateElement = function(ref$1) {
				var isTagged = ref$1.isTagged, elem = this.startNode();
				return this.type === types$1$1.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = {
					raw: this.value.replace(/\r\n?/g, "\n"),
					cooked: null
				}) : elem.value = {
					raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
					cooked: this.value
				}, this.next(), elem.tail = this.type === types$1$1.backQuote, this.finishNode(elem, "TemplateElement");
			}, pp$5.parseTemplate = function(ref$1) {
				void 0 === ref$1 && (ref$1 = {});
				var isTagged = ref$1.isTagged;
				void 0 === isTagged && (isTagged = !1);
				var node = this.startNode();
				this.next(), node.expressions = [];
				var curElt = this.parseTemplateElement({ isTagged });
				for (node.quasis = [curElt]; !curElt.tail;) this.type === types$1$1.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$1$1.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$1$1.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
				return this.next(), this.finishNode(node, "TemplateLiteral");
			}, pp$5.isAsyncProp = function(prop) {
				return !prop.computed && "Identifier" === prop.key.type && "async" === prop.key.name && (this.type === types$1$1.name || this.type === types$1$1.num || this.type === types$1$1.string || this.type === types$1$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
			}, pp$5.parseObj = function(isPattern, refDestructuringErrors) {
				var node = this.startNode(), first = !0, propHash = {};
				for (node.properties = [], this.next(); !this.eat(types$1$1.braceR);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1$1.braceR)) break;
					var prop = this.parseProperty(isPattern, refDestructuringErrors);
					isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
				}
				return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
			}, pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
				var isGenerator, isAsync, startPos, startLoc, prop = this.startNode();
				if (this.options.ecmaVersion >= 9 && this.eat(types$1$1.ellipsis)) return isPattern ? (prop.argument = this.parseIdent(!1), this.type === types$1$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(!1, refDestructuringErrors), this.type === types$1$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
				this.options.ecmaVersion >= 6 && (prop.method = !1, prop.shorthand = !1, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator = this.eat(types$1$1.star)));
				var containsEsc = this.containsEsc;
				return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop) ? (isAsync = !0, isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1$1.star), this.parsePropertyName(prop)) : isAsync = !1, this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
			}, pp$5.parseGetterSetter = function(prop) {
				prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(!1);
				var paramCount = "get" === prop.kind ? 0 : 1;
				if (prop.value.params.length !== paramCount) {
					var start = prop.value.start;
					"get" === prop.kind ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
				} else "set" === prop.kind && "RestElement" === prop.value.params[0].type && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
			}, pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
				(isGenerator || isAsync) && this.type === types$1$1.colon && this.unexpected(), this.eat(types$1$1.colon) ? (prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(!1, refDestructuringErrors), prop.kind = "init") : this.options.ecmaVersion >= 6 && this.type === types$1$1.parenL ? (isPattern && this.unexpected(), prop.kind = "init", prop.method = !0, prop.value = this.parseMethod(isGenerator, isAsync)) : isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || "Identifier" !== prop.key.type || "get" !== prop.key.name && "set" !== prop.key.name || this.type === types$1$1.comma || this.type === types$1$1.braceR || this.type === types$1$1.eq ? this.options.ecmaVersion >= 6 && !prop.computed && "Identifier" === prop.key.type ? ((isGenerator || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), "await" !== prop.key.name || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$1$1.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = !0) : this.unexpected() : ((isGenerator || isAsync) && this.unexpected(), this.parseGetterSetter(prop));
			}, pp$5.parsePropertyName = function(prop) {
				if (this.options.ecmaVersion >= 6) {
					if (this.eat(types$1$1.bracketL)) return prop.computed = !0, prop.key = this.parseMaybeAssign(), this.expect(types$1$1.bracketR), prop.key;
					prop.computed = !1;
				}
				return prop.key = this.type === types$1$1.num || this.type === types$1$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
			}, pp$5.initFunction = function(node) {
				node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = !1), this.options.ecmaVersion >= 8 && (node.async = !1);
			}, pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
				var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
				return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$1$1.parenL), node.params = this.parseBindingList(types$1$1.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, !1, !0, !1), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
			}, pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
				var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
				return this.enterScope(16 | functionFlags(isAsync, !1)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, !0), this.parseFunctionBody(node, !0, !1, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
			}, pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
				var isExpression = isArrowFunction && this.type !== types$1$1.braceL, oldStrict = this.strict, useStrict = !1;
				if (isExpression) node.body = this.parseMaybeAssign(forInit), node.expression = !0, this.checkParams(node, !1);
				else {
					var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
					oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
					var oldLabels = this.labels;
					this.labels = [], useStrict && (this.strict = !0), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(!1, void 0, useStrict && !oldStrict), node.expression = !1, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
				}
				this.exitScope();
			}, pp$5.isSimpleParamList = function(params) {
				for (var i$1 = 0, list$1 = params; i$1 < list$1.length; i$1 += 1) if ("Identifier" !== list$1[i$1].type) return !1;
				return !0;
			}, pp$5.checkParams = function(node, allowDuplicates) {
				for (var nameHash = Object.create(null), i$1 = 0, list$1 = node.params; i$1 < list$1.length; i$1 += 1) {
					var param = list$1[i$1];
					this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
				}
			}, pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
				for (var elts = [], first = !0; !this.eat(close);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), allowTrailingComma && this.afterTrailingComma(close)) break;
					var elt = void 0;
					allowEmpty && this.type === types$1$1.comma ? elt = null : this.type === types$1$1.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$1$1.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(!1, refDestructuringErrors), elts.push(elt);
				}
				return elts;
			}, pp$5.checkUnreserved = function(ref$1) {
				var start = ref$1.start, end = ref$1.end, name = ref$1.name;
				(this.inGenerator && "yield" === name && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === name && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && "arguments" === name && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || "arguments" !== name && "await" !== name || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(start, end).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || "await" !== name || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
			}, pp$5.parseIdent = function(liberal) {
				var node = this.parseIdentNode();
				return this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), "await" !== node.name || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
			}, pp$5.parseIdentNode = function() {
				var node = this.startNode();
				return this.type === types$1$1.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, "class" !== node.name && "function" !== node.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop(), this.type = types$1$1.name) : this.unexpected(), node;
			}, pp$5.parsePrivateIdent = function() {
				var node = this.startNode();
				return this.type === types$1$1.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), this.options.checkPrivateFields && (0 === this.privateNameStack.length ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node)), node;
			}, pp$5.parseYield = function(forInit) {
				this.yieldPos || (this.yieldPos = this.start);
				var node = this.startNode();
				return this.next(), this.type === types$1$1.semi || this.canInsertSemicolon() || this.type !== types$1$1.star && !this.type.startsExpr ? (node.delegate = !1, node.argument = null) : (node.delegate = this.eat(types$1$1.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
			}, pp$5.parseAwait = function(forInit) {
				this.awaitPos || (this.awaitPos = this.start);
				var node = this.startNode();
				return this.next(), node.argument = this.parseMaybeUnary(null, !0, !1, forInit), this.finishNode(node, "AwaitExpression");
			};
			var pp$4 = Parser$1.prototype;
			pp$4.raise = function(pos, message) {
				var loc = getLineInfo(this.input, pos);
				message += " (" + loc.line + ":" + loc.column + ")";
				var err = new SyntaxError(message);
				throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
			}, pp$4.raiseRecoverable = pp$4.raise, pp$4.curPosition = function() {
				if (this.options.locations) return new Position(this.curLine, this.pos - this.lineStart);
			};
			var pp$3 = Parser$1.prototype, Scope = function(flags) {
				this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = !1;
			};
			pp$3.enterScope = function(flags) {
				this.scopeStack.push(new Scope(flags));
			}, pp$3.exitScope = function() {
				this.scopeStack.pop();
			}, pp$3.treatFunctionsAsVarInScope = function(scope) {
				return 2 & scope.flags || !this.inModule && 1 & scope.flags;
			}, pp$3.declareName = function(name, bindingType, pos) {
				var redeclared = !1;
				if (2 === bindingType) {
					var scope = this.currentScope();
					redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
				} else if (4 === bindingType) this.currentScope().lexical.push(name);
				else if (3 === bindingType) {
					var scope$2 = this.currentScope();
					redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
				} else for (var i$1 = this.scopeStack.length - 1; i$1 >= 0; --i$1) {
					var scope$3 = this.scopeStack[i$1];
					if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
						redeclared = !0;
						break;
					}
					if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], 259 & scope$3.flags) break;
				}
				redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
			}, pp$3.checkLocalExport = function(id) {
				-1 === this.scopeStack[0].lexical.indexOf(id.name) && -1 === this.scopeStack[0].var.indexOf(id.name) && (this.undefinedExports[id.name] = id);
			}, pp$3.currentScope = function() {
				return this.scopeStack[this.scopeStack.length - 1];
			}, pp$3.currentVarScope = function() {
				for (var i$1 = this.scopeStack.length - 1;; i$1--) {
					var scope = this.scopeStack[i$1];
					if (259 & scope.flags) return scope;
				}
			}, pp$3.currentThisScope = function() {
				for (var i$1 = this.scopeStack.length - 1;; i$1--) {
					var scope = this.scopeStack[i$1];
					if (259 & scope.flags && !(16 & scope.flags)) return scope;
				}
			};
			var Node = function(parser, pos, loc) {
				this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
			}, pp$2 = Parser$1.prototype;
			function finishNodeAt(node, type$1, pos, loc) {
				return node.type = type$1, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
			}
			pp$2.startNode = function() {
				return new Node(this, this.start, this.startLoc);
			}, pp$2.startNodeAt = function(pos, loc) {
				return new Node(this, pos, loc);
			}, pp$2.finishNode = function(node, type$1) {
				return finishNodeAt.call(this, node, type$1, this.lastTokEnd, this.lastTokEndLoc);
			}, pp$2.finishNodeAt = function(node, type$1, pos, loc) {
				return finishNodeAt.call(this, node, type$1, pos, loc);
			}, pp$2.copyNode = function(node) {
				var newNode = new Node(this, node.start, this.startLoc);
				for (var prop in node) newNode[prop] = node[prop];
				return newNode;
			};
			var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic", ecma12BinaryProperties = ecma10BinaryProperties + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties = {
				9: ecma9BinaryProperties,
				10: ecma10BinaryProperties,
				11: ecma10BinaryProperties,
				12: ecma12BinaryProperties,
				13: ecma12BinaryProperties,
				14: ecma12BinaryProperties
			}, unicodeBinaryPropertiesOfStrings = {
				9: "",
				10: "",
				11: "",
				12: "",
				13: "",
				14: "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji"
			}, unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith", unicodeScriptValues = {
				9: ecma9ScriptValues,
				10: ecma10ScriptValues,
				11: ecma11ScriptValues,
				12: ecma12ScriptValues,
				13: ecma13ScriptValues,
				14: ecma13ScriptValues + " Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz"
			}, data = {};
			function buildUnicodeData(ecmaVersion) {
				var d$2 = data[ecmaVersion] = {
					binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
					binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),
					nonBinary: {
						General_Category: wordsRegexp(unicodeGeneralCategoryValues),
						Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
					}
				};
				d$2.nonBinary.Script_Extensions = d$2.nonBinary.Script, d$2.nonBinary.gc = d$2.nonBinary.General_Category, d$2.nonBinary.sc = d$2.nonBinary.Script, d$2.nonBinary.scx = d$2.nonBinary.Script_Extensions;
			}
			for (var i = 0, list = [
				9,
				10,
				11,
				12,
				13,
				14
			]; i < list.length; i += 1) buildUnicodeData(list[i]);
			var pp$1 = Parser$1.prototype, BranchID = function(parent, base) {
				this.parent = parent, this.base = base || this;
			};
			BranchID.prototype.separatedFrom = function(alt) {
				for (var self$1 = this; self$1; self$1 = self$1.parent) for (var other = alt; other; other = other.parent) if (self$1.base === other.base && self$1 !== other) return !0;
				return !1;
			}, BranchID.prototype.sibling = function() {
				return new BranchID(this.parent, this.base);
			};
			var RegExpValidationState = function(parser) {
				this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : ""), this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = !1, this.switchV = !1, this.switchN = !1, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = !1, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = Object.create(null), this.backReferenceNames = [], this.branchID = null;
			};
			function isRegularExpressionModifier(ch) {
				return 105 === ch || 109 === ch || 115 === ch;
			}
			function isSyntaxCharacter(ch) {
				return 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
			}
			function isControlLetter(ch) {
				return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
			}
			RegExpValidationState.prototype.reset = function(start, pattern, flags) {
				var unicodeSets = -1 !== flags.indexOf("v"), unicode = -1 !== flags.indexOf("u");
				this.start = 0 | start, this.source = pattern + "", this.flags = flags, unicodeSets && this.parser.options.ecmaVersion >= 15 ? (this.switchU = !0, this.switchV = !0, this.switchN = !0) : (this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchV = !1, this.switchN = unicode && this.parser.options.ecmaVersion >= 9);
			}, RegExpValidationState.prototype.raise = function(message) {
				this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
			}, RegExpValidationState.prototype.at = function(i$1, forceU) {
				void 0 === forceU && (forceU = !1);
				var s = this.source, l$2 = s.length;
				if (i$1 >= l$2) return -1;
				var c = s.charCodeAt(i$1);
				if (!forceU && !this.switchU || c <= 55295 || c >= 57344 || i$1 + 1 >= l$2) return c;
				var next = s.charCodeAt(i$1 + 1);
				return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
			}, RegExpValidationState.prototype.nextIndex = function(i$1, forceU) {
				void 0 === forceU && (forceU = !1);
				var s = this.source, l$2 = s.length;
				if (i$1 >= l$2) return l$2;
				var next, c = s.charCodeAt(i$1);
				return !forceU && !this.switchU || c <= 55295 || c >= 57344 || i$1 + 1 >= l$2 || (next = s.charCodeAt(i$1 + 1)) < 56320 || next > 57343 ? i$1 + 1 : i$1 + 2;
			}, RegExpValidationState.prototype.current = function(forceU) {
				return void 0 === forceU && (forceU = !1), this.at(this.pos, forceU);
			}, RegExpValidationState.prototype.lookahead = function(forceU) {
				return void 0 === forceU && (forceU = !1), this.at(this.nextIndex(this.pos, forceU), forceU);
			}, RegExpValidationState.prototype.advance = function(forceU) {
				void 0 === forceU && (forceU = !1), this.pos = this.nextIndex(this.pos, forceU);
			}, RegExpValidationState.prototype.eat = function(ch, forceU) {
				return void 0 === forceU && (forceU = !1), this.current(forceU) === ch && (this.advance(forceU), !0);
			}, RegExpValidationState.prototype.eatChars = function(chs, forceU) {
				void 0 === forceU && (forceU = !1);
				for (var pos = this.pos, i$1 = 0, list$1 = chs; i$1 < list$1.length; i$1 += 1) {
					var ch = list$1[i$1], current = this.at(pos, forceU);
					if (-1 === current || current !== ch) return !1;
					pos = this.nextIndex(pos, forceU);
				}
				return this.pos = pos, !0;
			}, pp$1.validateRegExpFlags = function(state) {
				for (var validFlags = state.validFlags, flags = state.flags, u$1 = !1, v$1 = !1, i$1 = 0; i$1 < flags.length; i$1++) {
					var flag = flags.charAt(i$1);
					-1 === validFlags.indexOf(flag) && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i$1 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag"), "u" === flag && (u$1 = !0), "v" === flag && (v$1 = !0);
				}
				this.options.ecmaVersion >= 15 && u$1 && v$1 && this.raise(state.start, "Invalid regular expression flag");
			}, pp$1.validateRegExpPattern = function(state) {
				this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && function(obj) {
					for (var _$3 in obj) return !0;
					return !1;
				}(state.groupNames) && (state.switchN = !0, this.regexp_pattern(state));
			}, pp$1.regexp_pattern = function(state) {
				state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = !1, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames = Object.create(null), state.backReferenceNames.length = 0, state.branchID = null, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
				for (var i$1 = 0, list$1 = state.backReferenceNames; i$1 < list$1.length; i$1 += 1) {
					var name = list$1[i$1];
					state.groupNames[name] || state.raise("Invalid named capture referenced");
				}
			}, pp$1.regexp_disjunction = function(state) {
				var trackDisjunction = this.options.ecmaVersion >= 16;
				for (trackDisjunction && (state.branchID = new BranchID(state.branchID, null)), this.regexp_alternative(state); state.eat(124);) trackDisjunction && (state.branchID = state.branchID.sibling()), this.regexp_alternative(state);
				trackDisjunction && (state.branchID = state.branchID.parent), this.regexp_eatQuantifier(state, !0) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
			}, pp$1.regexp_alternative = function(state) {
				for (; state.pos < state.source.length && this.regexp_eatTerm(state););
			}, pp$1.regexp_eatTerm = function(state) {
				return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), !0) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), !0);
			}, pp$1.regexp_eatAssertion = function(state) {
				var start = state.pos;
				if (state.lastAssertionIsQuantifiable = !1, state.eat(94) || state.eat(36)) return !0;
				if (state.eat(92)) {
					if (state.eat(66) || state.eat(98)) return !0;
					state.pos = start;
				}
				if (state.eat(40) && state.eat(63)) {
					var lookbehind = !1;
					if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33)) return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, !0;
				}
				return state.pos = start, !1;
			}, pp$1.regexp_eatQuantifier = function(state, noError) {
				return void 0 === noError && (noError = !1), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), !0);
			}, pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
				return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
			}, pp$1.regexp_eatBracedQuantifier = function(state, noError) {
				var start = state.pos;
				if (state.eat(123)) {
					var min = 0, max = -1;
					if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125))) return -1 !== max && max < min && !noError && state.raise("numbers out of order in {} quantifier"), !0;
					state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatAtom = function(state) {
				return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
			}, pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
				var start = state.pos;
				if (state.eat(92)) {
					if (this.regexp_eatAtomEscape(state)) return !0;
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatUncapturingGroup = function(state) {
				var start = state.pos;
				if (state.eat(40)) {
					if (state.eat(63)) {
						if (this.options.ecmaVersion >= 16) {
							var addModifiers = this.regexp_eatModifiers(state), hasHyphen = state.eat(45);
							if (addModifiers || hasHyphen) {
								for (var i$1 = 0; i$1 < addModifiers.length; i$1++) {
									var modifier = addModifiers.charAt(i$1);
									addModifiers.indexOf(modifier, i$1 + 1) > -1 && state.raise("Duplicate regular expression modifiers");
								}
								if (hasHyphen) {
									var removeModifiers = this.regexp_eatModifiers(state);
									addModifiers || removeModifiers || 58 !== state.current() || state.raise("Invalid regular expression modifiers");
									for (var i$1$1 = 0; i$1$1 < removeModifiers.length; i$1$1++) {
										var modifier$1 = removeModifiers.charAt(i$1$1);
										(removeModifiers.indexOf(modifier$1, i$1$1 + 1) > -1 || addModifiers.indexOf(modifier$1) > -1) && state.raise("Duplicate regular expression modifiers");
									}
								}
							}
						}
						if (state.eat(58)) {
							if (this.regexp_disjunction(state), state.eat(41)) return !0;
							state.raise("Unterminated group");
						}
					}
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatCapturingGroup = function(state) {
				if (state.eat(40)) {
					if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : 63 === state.current() && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41)) return state.numCapturingParens += 1, !0;
					state.raise("Unterminated group");
				}
				return !1;
			}, pp$1.regexp_eatModifiers = function(state) {
				for (var modifiers = "", ch = 0; -1 !== (ch = state.current()) && isRegularExpressionModifier(ch);) modifiers += codePointToString(ch), state.advance();
				return modifiers;
			}, pp$1.regexp_eatExtendedAtom = function(state) {
				return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
			}, pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
				return this.regexp_eatBracedQuantifier(state, !0) && state.raise("Nothing to repeat"), !1;
			}, pp$1.regexp_eatSyntaxCharacter = function(state) {
				var ch = state.current();
				return !!isSyntaxCharacter(ch) && (state.lastIntValue = ch, state.advance(), !0);
			}, pp$1.regexp_eatPatternCharacters = function(state) {
				for (var start = state.pos, ch = 0; -1 !== (ch = state.current()) && !isSyntaxCharacter(ch);) state.advance();
				return state.pos !== start;
			}, pp$1.regexp_eatExtendedPatternCharacter = function(state) {
				var ch = state.current();
				return !(-1 === ch || 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || 91 === ch || 94 === ch || 124 === ch) && (state.advance(), !0);
			}, pp$1.regexp_groupSpecifier = function(state) {
				if (state.eat(63)) {
					this.regexp_eatGroupName(state) || state.raise("Invalid group");
					var trackDisjunction = this.options.ecmaVersion >= 16, known = state.groupNames[state.lastStringValue];
					if (known) if (trackDisjunction) for (var i$1 = 0, list$1 = known; i$1 < list$1.length; i$1 += 1) list$1[i$1].separatedFrom(state.branchID) || state.raise("Duplicate capture group name");
					else state.raise("Duplicate capture group name");
					trackDisjunction ? (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID) : state.groupNames[state.lastStringValue] = !0;
				}
			}, pp$1.regexp_eatGroupName = function(state) {
				if (state.lastStringValue = "", state.eat(60)) {
					if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) return !0;
					state.raise("Invalid capture group name");
				}
				return !1;
			}, pp$1.regexp_eatRegExpIdentifierName = function(state) {
				if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
					for (state.lastStringValue += codePointToString(state.lastIntValue); this.regexp_eatRegExpIdentifierPart(state);) state.lastStringValue += codePointToString(state.lastIntValue);
					return !0;
				}
				return !1;
			}, pp$1.regexp_eatRegExpIdentifierStart = function(state) {
				var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
				return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch$1) {
					return isIdentifierStart(ch$1, !0) || 36 === ch$1 || 95 === ch$1;
				}(ch) ? (state.lastIntValue = ch, !0) : (state.pos = start, !1);
			}, pp$1.regexp_eatRegExpIdentifierPart = function(state) {
				var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
				return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch$1) {
					return isIdentifierChar(ch$1, !0) || 36 === ch$1 || 95 === ch$1 || 8204 === ch$1 || 8205 === ch$1;
				}(ch) ? (state.lastIntValue = ch, !0) : (state.pos = start, !1);
			}, pp$1.regexp_eatAtomEscape = function(state) {
				return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (99 === state.current() && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), !1);
			}, pp$1.regexp_eatBackReference = function(state) {
				var start = state.pos;
				if (this.regexp_eatDecimalEscape(state)) {
					var n = state.lastIntValue;
					if (state.switchU) return n > state.maxBackReference && (state.maxBackReference = n), !0;
					if (n <= state.numCapturingParens) return !0;
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatKGroupName = function(state) {
				if (state.eat(107)) {
					if (this.regexp_eatGroupName(state)) return state.backReferenceNames.push(state.lastStringValue), !0;
					state.raise("Invalid named reference");
				}
				return !1;
			}, pp$1.regexp_eatCharacterEscape = function(state) {
				return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, !1) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
			}, pp$1.regexp_eatCControlLetter = function(state) {
				var start = state.pos;
				if (state.eat(99)) {
					if (this.regexp_eatControlLetter(state)) return !0;
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatZero = function(state) {
				return 48 === state.current() && !isDecimalDigit(state.lookahead()) && (state.lastIntValue = 0, state.advance(), !0);
			}, pp$1.regexp_eatControlEscape = function(state) {
				var ch = state.current();
				return 116 === ch ? (state.lastIntValue = 9, state.advance(), !0) : 110 === ch ? (state.lastIntValue = 10, state.advance(), !0) : 118 === ch ? (state.lastIntValue = 11, state.advance(), !0) : 102 === ch ? (state.lastIntValue = 12, state.advance(), !0) : 114 === ch && (state.lastIntValue = 13, state.advance(), !0);
			}, pp$1.regexp_eatControlLetter = function(state) {
				var ch = state.current();
				return !!isControlLetter(ch) && (state.lastIntValue = ch % 32, state.advance(), !0);
			}, pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
				void 0 === forceU && (forceU = !1);
				var ch, start = state.pos, switchU = forceU || state.switchU;
				if (state.eat(117)) {
					if (this.regexp_eatFixedHexDigits(state, 4)) {
						var lead = state.lastIntValue;
						if (switchU && lead >= 55296 && lead <= 56319) {
							var leadSurrogateEnd = state.pos;
							if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
								var trail = state.lastIntValue;
								if (trail >= 56320 && trail <= 57343) return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, !0;
							}
							state.pos = leadSurrogateEnd, state.lastIntValue = lead;
						}
						return !0;
					}
					if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && (ch = state.lastIntValue) >= 0 && ch <= 1114111) return !0;
					switchU && state.raise("Invalid unicode escape"), state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatIdentityEscape = function(state) {
				if (state.switchU) return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, !0);
				var ch = state.current();
				return !(99 === ch || state.switchN && 107 === ch) && (state.lastIntValue = ch, state.advance(), !0);
			}, pp$1.regexp_eatDecimalEscape = function(state) {
				state.lastIntValue = 0;
				var ch = state.current();
				if (ch >= 49 && ch <= 57) {
					do
						state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
					while ((ch = state.current()) >= 48 && ch <= 57);
					return !0;
				}
				return !1;
			};
			function isUnicodePropertyNameCharacter(ch) {
				return isControlLetter(ch) || 95 === ch;
			}
			function isUnicodePropertyValueCharacter(ch) {
				return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
			}
			function isDecimalDigit(ch) {
				return ch >= 48 && ch <= 57;
			}
			function isHexDigit(ch) {
				return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
			}
			function hexToInt(ch) {
				return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
			}
			function isOctalDigit(ch) {
				return ch >= 48 && ch <= 55;
			}
			pp$1.regexp_eatCharacterClassEscape = function(state) {
				var ch = state.current();
				if (function(ch$1) {
					return 100 === ch$1 || 68 === ch$1 || 115 === ch$1 || 83 === ch$1 || 119 === ch$1 || 87 === ch$1;
				}(ch)) return state.lastIntValue = -1, state.advance(), 1;
				var negate = !1;
				if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = 80 === ch) || 112 === ch)) {
					var result;
					if (state.lastIntValue = -1, state.advance(), state.eat(123) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(125)) return negate && 2 === result && state.raise("Invalid property name"), result;
					state.raise("Invalid property name");
				}
				return 0;
			}, pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
				var start = state.pos;
				if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
					var name = state.lastStringValue;
					if (this.regexp_eatUnicodePropertyValue(state)) {
						var value$1 = state.lastStringValue;
						return this.regexp_validateUnicodePropertyNameAndValue(state, name, value$1), 1;
					}
				}
				if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
					var nameOrValue = state.lastStringValue;
					return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
				}
				return 0;
			}, pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value$1) {
				hasOwn$2(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value$1) || state.raise("Invalid property value");
			}, pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
				return state.unicodeProperties.binary.test(nameOrValue) ? 1 : state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue) ? 2 : void state.raise("Invalid property name");
			}, pp$1.regexp_eatUnicodePropertyName = function(state) {
				var ch = 0;
				for (state.lastStringValue = ""; isUnicodePropertyNameCharacter(ch = state.current());) state.lastStringValue += codePointToString(ch), state.advance();
				return "" !== state.lastStringValue;
			}, pp$1.regexp_eatUnicodePropertyValue = function(state) {
				var ch = 0;
				for (state.lastStringValue = ""; isUnicodePropertyValueCharacter(ch = state.current());) state.lastStringValue += codePointToString(ch), state.advance();
				return "" !== state.lastStringValue;
			}, pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
				return this.regexp_eatUnicodePropertyValue(state);
			}, pp$1.regexp_eatCharacterClass = function(state) {
				if (state.eat(91)) {
					var negate = state.eat(94), result = this.regexp_classContents(state);
					return state.eat(93) || state.raise("Unterminated character class"), negate && 2 === result && state.raise("Negated character class may contain strings"), !0;
				}
				return !1;
			}, pp$1.regexp_classContents = function(state) {
				return 93 === state.current() ? 1 : state.switchV ? this.regexp_classSetExpression(state) : (this.regexp_nonEmptyClassRanges(state), 1);
			}, pp$1.regexp_nonEmptyClassRanges = function(state) {
				for (; this.regexp_eatClassAtom(state);) {
					var left = state.lastIntValue;
					if (state.eat(45) && this.regexp_eatClassAtom(state)) {
						var right = state.lastIntValue;
						!state.switchU || -1 !== left && -1 !== right || state.raise("Invalid character class"), -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class");
					}
				}
			}, pp$1.regexp_eatClassAtom = function(state) {
				var start = state.pos;
				if (state.eat(92)) {
					if (this.regexp_eatClassEscape(state)) return !0;
					if (state.switchU) {
						var ch$1 = state.current();
						(99 === ch$1 || isOctalDigit(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
					}
					state.pos = start;
				}
				var ch = state.current();
				return 93 !== ch && (state.lastIntValue = ch, state.advance(), !0);
			}, pp$1.regexp_eatClassEscape = function(state) {
				var start = state.pos;
				if (state.eat(98)) return state.lastIntValue = 8, !0;
				if (state.switchU && state.eat(45)) return state.lastIntValue = 45, !0;
				if (!state.switchU && state.eat(99)) {
					if (this.regexp_eatClassControlLetter(state)) return !0;
					state.pos = start;
				}
				return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
			}, pp$1.regexp_classSetExpression = function(state) {
				var subResult, result = 1;
				if (this.regexp_eatClassSetRange(state));
				else if (subResult = this.regexp_eatClassSetOperand(state)) {
					2 === subResult && (result = 2);
					for (var start = state.pos; state.eatChars([38, 38]);) 38 !== state.current() && (subResult = this.regexp_eatClassSetOperand(state)) ? 2 !== subResult && (result = 1) : state.raise("Invalid character in character class");
					if (start !== state.pos) return result;
					for (; state.eatChars([45, 45]);) this.regexp_eatClassSetOperand(state) || state.raise("Invalid character in character class");
					if (start !== state.pos) return result;
				} else state.raise("Invalid character in character class");
				for (;;) if (!this.regexp_eatClassSetRange(state)) {
					if (!(subResult = this.regexp_eatClassSetOperand(state))) return result;
					2 === subResult && (result = 2);
				}
			}, pp$1.regexp_eatClassSetRange = function(state) {
				var start = state.pos;
				if (this.regexp_eatClassSetCharacter(state)) {
					var left = state.lastIntValue;
					if (state.eat(45) && this.regexp_eatClassSetCharacter(state)) {
						var right = state.lastIntValue;
						return -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class"), !0;
					}
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatClassSetOperand = function(state) {
				return this.regexp_eatClassSetCharacter(state) ? 1 : this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
			}, pp$1.regexp_eatNestedClass = function(state) {
				var start = state.pos;
				if (state.eat(91)) {
					var negate = state.eat(94), result = this.regexp_classContents(state);
					if (state.eat(93)) return negate && 2 === result && state.raise("Negated character class may contain strings"), result;
					state.pos = start;
				}
				if (state.eat(92)) {
					var result$1 = this.regexp_eatCharacterClassEscape(state);
					if (result$1) return result$1;
					state.pos = start;
				}
				return null;
			}, pp$1.regexp_eatClassStringDisjunction = function(state) {
				var start = state.pos;
				if (state.eatChars([92, 113])) {
					if (state.eat(123)) {
						var result = this.regexp_classStringDisjunctionContents(state);
						if (state.eat(125)) return result;
					} else state.raise("Invalid escape");
					state.pos = start;
				}
				return null;
			}, pp$1.regexp_classStringDisjunctionContents = function(state) {
				for (var result = this.regexp_classString(state); state.eat(124);) 2 === this.regexp_classString(state) && (result = 2);
				return result;
			}, pp$1.regexp_classString = function(state) {
				for (var count = 0; this.regexp_eatClassSetCharacter(state);) count++;
				return 1 === count ? 1 : 2;
			}, pp$1.regexp_eatClassSetCharacter = function(state) {
				var start = state.pos;
				if (state.eat(92)) return !(!this.regexp_eatCharacterEscape(state) && !this.regexp_eatClassSetReservedPunctuator(state)) || (state.eat(98) ? (state.lastIntValue = 8, !0) : (state.pos = start, !1));
				var ch = state.current();
				return !(ch < 0 || ch === state.lookahead() && function(ch$1) {
					return 33 === ch$1 || ch$1 >= 35 && ch$1 <= 38 || ch$1 >= 42 && ch$1 <= 44 || 46 === ch$1 || ch$1 >= 58 && ch$1 <= 64 || 94 === ch$1 || 96 === ch$1 || 126 === ch$1;
				}(ch)) && !function(ch$1) {
					return 40 === ch$1 || 41 === ch$1 || 45 === ch$1 || 47 === ch$1 || ch$1 >= 91 && ch$1 <= 93 || ch$1 >= 123 && ch$1 <= 125;
				}(ch) && (state.advance(), state.lastIntValue = ch, !0);
			}, pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
				var ch = state.current();
				return !!function(ch$1) {
					return 33 === ch$1 || 35 === ch$1 || 37 === ch$1 || 38 === ch$1 || 44 === ch$1 || 45 === ch$1 || ch$1 >= 58 && ch$1 <= 62 || 64 === ch$1 || 96 === ch$1 || 126 === ch$1;
				}(ch) && (state.lastIntValue = ch, state.advance(), !0);
			}, pp$1.regexp_eatClassControlLetter = function(state) {
				var ch = state.current();
				return !(!isDecimalDigit(ch) && 95 !== ch) && (state.lastIntValue = ch % 32, state.advance(), !0);
			}, pp$1.regexp_eatHexEscapeSequence = function(state) {
				var start = state.pos;
				if (state.eat(120)) {
					if (this.regexp_eatFixedHexDigits(state, 2)) return !0;
					state.switchU && state.raise("Invalid escape"), state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatDecimalDigits = function(state) {
				var start = state.pos, ch = 0;
				for (state.lastIntValue = 0; isDecimalDigit(ch = state.current());) state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
				return state.pos !== start;
			}, pp$1.regexp_eatHexDigits = function(state) {
				var start = state.pos, ch = 0;
				for (state.lastIntValue = 0; isHexDigit(ch = state.current());) state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
				return state.pos !== start;
			}, pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
				if (this.regexp_eatOctalDigit(state)) {
					var n1 = state.lastIntValue;
					if (this.regexp_eatOctalDigit(state)) {
						var n2 = state.lastIntValue;
						n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
					} else state.lastIntValue = n1;
					return !0;
				}
				return !1;
			}, pp$1.regexp_eatOctalDigit = function(state) {
				var ch = state.current();
				return isOctalDigit(ch) ? (state.lastIntValue = ch - 48, state.advance(), !0) : (state.lastIntValue = 0, !1);
			}, pp$1.regexp_eatFixedHexDigits = function(state, length) {
				var start = state.pos;
				state.lastIntValue = 0;
				for (var i$1 = 0; i$1 < length; ++i$1) {
					var ch = state.current();
					if (!isHexDigit(ch)) return state.pos = start, !1;
					state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
				}
				return !0;
			};
			var Token = function(p$1) {
				this.type = p$1.type, this.value = p$1.value, this.start = p$1.start, this.end = p$1.end, p$1.options.locations && (this.loc = new SourceLocation(p$1, p$1.startLoc, p$1.endLoc)), p$1.options.ranges && (this.range = [p$1.start, p$1.end]);
			}, pp = Parser$1.prototype;
			function stringToBigInt(str) {
				return "function" != typeof BigInt ? null : BigInt(str.replace(/_/g, ""));
			}
			pp.next = function(ignoreEscapeSequenceInKeyword) {
				!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
			}, pp.getToken = function() {
				return this.next(), new Token(this);
			}, "undefined" != typeof Symbol && (pp[Symbol.iterator] = function() {
				var this$1$1 = this;
				return { next: function() {
					var token = this$1$1.getToken();
					return {
						done: token.type === types$1$1.eof,
						value: token
					};
				} };
			}), pp.nextToken = function() {
				var curContext = this.curContext();
				return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$1$1.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
			}, pp.readToken = function(code) {
				return isIdentifierStart(code, this.options.ecmaVersion >= 6) || 92 === code ? this.readWord() : this.getTokenFromCode(code);
			}, pp.fullCharCodeAtPos = function() {
				var code = this.input.charCodeAt(this.pos);
				if (code <= 55295 || code >= 56320) return code;
				var next = this.input.charCodeAt(this.pos + 1);
				return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
			}, pp.skipBlockComment = function() {
				var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
				if (-1 === end && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations) for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) ++this.curLine, pos = this.lineStart = nextBreak;
				this.options.onComment && this.options.onComment(!0, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
			}, pp.skipLineComment = function(startSkip) {
				for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip); this.pos < this.input.length && !isNewLine(ch);) ch = this.input.charCodeAt(++this.pos);
				this.options.onComment && this.options.onComment(!1, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
			}, pp.skipSpace = function() {
				loop: for (; this.pos < this.input.length;) {
					var ch = this.input.charCodeAt(this.pos);
					switch (ch) {
						case 32:
						case 160:
							++this.pos;
							break;
						case 13: 10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
						case 10:
						case 8232:
						case 8233:
							++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
							break;
						case 47:
							switch (this.input.charCodeAt(this.pos + 1)) {
								case 42:
									this.skipBlockComment();
									break;
								case 47:
									this.skipLineComment(2);
									break;
								default: break loop;
							}
							break;
						default:
							if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch)))) break loop;
							++this.pos;
					}
				}
			}, pp.finishToken = function(type$1, val) {
				this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
				var prevType = this.type;
				this.type = type$1, this.value = val, this.updateContext(prevType);
			}, pp.readToken_dot = function() {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next >= 48 && next <= 57) return this.readNumber(!0);
				var next2 = this.input.charCodeAt(this.pos + 2);
				return this.options.ecmaVersion >= 6 && 46 === next && 46 === next2 ? (this.pos += 3, this.finishToken(types$1$1.ellipsis)) : (++this.pos, this.finishToken(types$1$1.dot));
			}, pp.readToken_slash = function() {
				var next = this.input.charCodeAt(this.pos + 1);
				return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === next ? this.finishOp(types$1$1.assign, 2) : this.finishOp(types$1$1.slash, 1);
			}, pp.readToken_mult_modulo_exp = function(code) {
				var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = 42 === code ? types$1$1.star : types$1$1.modulo;
				return this.options.ecmaVersion >= 7 && 42 === code && 42 === next && (++size, tokentype = types$1$1.starstar, next = this.input.charCodeAt(this.pos + 2)), 61 === next ? this.finishOp(types$1$1.assign, size + 1) : this.finishOp(tokentype, size);
			}, pp.readToken_pipe_amp = function(code) {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === code) {
					if (this.options.ecmaVersion >= 12) {
						if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1$1.assign, 3);
					}
					return this.finishOp(124 === code ? types$1$1.logicalOR : types$1$1.logicalAND, 2);
				}
				return 61 === next ? this.finishOp(types$1$1.assign, 2) : this.finishOp(124 === code ? types$1$1.bitwiseOR : types$1$1.bitwiseAND, 1);
			}, pp.readToken_caret = function() {
				return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(types$1$1.assign, 2) : this.finishOp(types$1$1.bitwiseXOR, 1);
			}, pp.readToken_plus_min = function(code) {
				var next = this.input.charCodeAt(this.pos + 1);
				return next === code ? 45 !== next || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$1$1.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === next ? this.finishOp(types$1$1.assign, 2) : this.finishOp(types$1$1.plusMin, 1);
			}, pp.readToken_lt_gt = function(code) {
				var next = this.input.charCodeAt(this.pos + 1), size = 1;
				return next === code ? (size = 62 === code && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + size) ? this.finishOp(types$1$1.assign, size + 1) : this.finishOp(types$1$1.bitShift, size)) : 33 !== next || 60 !== code || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === next && (size = 2), this.finishOp(types$1$1.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
			}, pp.readToken_eq_excl = function(code) {
				var next = this.input.charCodeAt(this.pos + 1);
				return 61 === next ? this.finishOp(types$1$1.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === code && 62 === next && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$1$1.arrow)) : this.finishOp(61 === code ? types$1$1.eq : types$1$1.prefix, 1);
			}, pp.readToken_question = function() {
				var ecmaVersion = this.options.ecmaVersion;
				if (ecmaVersion >= 11) {
					var next = this.input.charCodeAt(this.pos + 1);
					if (46 === next) {
						var next2 = this.input.charCodeAt(this.pos + 2);
						if (next2 < 48 || next2 > 57) return this.finishOp(types$1$1.questionDot, 2);
					}
					if (63 === next) {
						if (ecmaVersion >= 12) {
							if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1$1.assign, 3);
						}
						return this.finishOp(types$1$1.coalesce, 2);
					}
				}
				return this.finishOp(types$1$1.question, 1);
			}, pp.readToken_numberSign = function() {
				var code = 35;
				if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart(code = this.fullCharCodeAtPos(), !0) || 92 === code)) return this.finishToken(types$1$1.privateId, this.readWord1());
				this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
			}, pp.getTokenFromCode = function(code) {
				switch (code) {
					case 46: return this.readToken_dot();
					case 40: return ++this.pos, this.finishToken(types$1$1.parenL);
					case 41: return ++this.pos, this.finishToken(types$1$1.parenR);
					case 59: return ++this.pos, this.finishToken(types$1$1.semi);
					case 44: return ++this.pos, this.finishToken(types$1$1.comma);
					case 91: return ++this.pos, this.finishToken(types$1$1.bracketL);
					case 93: return ++this.pos, this.finishToken(types$1$1.bracketR);
					case 123: return ++this.pos, this.finishToken(types$1$1.braceL);
					case 125: return ++this.pos, this.finishToken(types$1$1.braceR);
					case 58: return ++this.pos, this.finishToken(types$1$1.colon);
					case 96:
						if (this.options.ecmaVersion < 6) break;
						return ++this.pos, this.finishToken(types$1$1.backQuote);
					case 48:
						var next = this.input.charCodeAt(this.pos + 1);
						if (120 === next || 88 === next) return this.readRadixNumber(16);
						if (this.options.ecmaVersion >= 6) {
							if (111 === next || 79 === next) return this.readRadixNumber(8);
							if (98 === next || 66 === next) return this.readRadixNumber(2);
						}
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57: return this.readNumber(!1);
					case 34:
					case 39: return this.readString(code);
					case 47: return this.readToken_slash();
					case 37:
					case 42: return this.readToken_mult_modulo_exp(code);
					case 124:
					case 38: return this.readToken_pipe_amp(code);
					case 94: return this.readToken_caret();
					case 43:
					case 45: return this.readToken_plus_min(code);
					case 60:
					case 62: return this.readToken_lt_gt(code);
					case 61:
					case 33: return this.readToken_eq_excl(code);
					case 63: return this.readToken_question();
					case 126: return this.finishOp(types$1$1.prefix, 1);
					case 35: return this.readToken_numberSign();
				}
				this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
			}, pp.finishOp = function(type$1, size) {
				var str = this.input.slice(this.pos, this.pos + size);
				return this.pos += size, this.finishToken(type$1, str);
			}, pp.readRegexp = function() {
				for (var escaped, inClass, start = this.pos;;) {
					this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
					var ch = this.input.charAt(this.pos);
					if (lineBreak.test(ch) && this.raise(start, "Unterminated regular expression"), escaped) escaped = !1;
					else {
						if ("[" === ch) inClass = !0;
						else if ("]" === ch && inClass) inClass = !1;
						else if ("/" === ch && !inClass) break;
						escaped = "\\" === ch;
					}
					++this.pos;
				}
				var pattern = this.input.slice(start, this.pos);
				++this.pos;
				var flagsStart = this.pos, flags = this.readWord1();
				this.containsEsc && this.unexpected(flagsStart);
				var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
				state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
				var value$1 = null;
				try {
					value$1 = new RegExp(pattern, flags);
				} catch (e$1) {}
				return this.finishToken(types$1$1.regexp, {
					pattern,
					flags,
					value: value$1
				});
			}, pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
				for (var allowSeparators = this.options.ecmaVersion >= 12 && void 0 === len, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && 48 === this.input.charCodeAt(this.pos), start = this.pos, total = 0, lastCode = 0, i$1 = 0, e$1 = null == len ? Infinity : len; i$1 < e$1; ++i$1, ++this.pos) {
					var code = this.input.charCodeAt(this.pos), val = void 0;
					if (allowSeparators && 95 === code) isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), 95 === lastCode && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), 0 === i$1 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
					else {
						if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : Infinity) >= radix) break;
						lastCode = code, total = total * radix + val;
					}
				}
				return allowSeparators && 95 === lastCode && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || null != len && this.pos - start !== len ? null : total;
			}, pp.readRadixNumber = function(radix) {
				var start = this.pos;
				this.pos += 2;
				var val = this.readInt(radix);
				return val ?? this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (val = stringToBigInt(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1$1.num, val);
			}, pp.readNumber = function(startsWithDot) {
				var start = this.pos;
				startsWithDot || null !== this.readInt(10, void 0, !0) || this.raise(start, "Invalid number");
				var octal = this.pos - start >= 2 && 48 === this.input.charCodeAt(start);
				octal && this.strict && this.raise(start, "Invalid number");
				var next = this.input.charCodeAt(this.pos);
				if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && 110 === next) {
					var val$1 = stringToBigInt(this.input.slice(start, this.pos));
					return ++this.pos, isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1$1.num, val$1);
				}
				octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = !1), 46 !== next || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), 69 !== next && 101 !== next || octal || (43 !== (next = this.input.charCodeAt(++this.pos)) && 45 !== next || ++this.pos, null === this.readInt(10) && this.raise(start, "Invalid number")), isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
				var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
				return this.finishToken(types$1$1.num, val);
			}, pp.readCodePoint = function() {
				var code;
				if (123 === this.input.charCodeAt(this.pos)) {
					this.options.ecmaVersion < 6 && this.unexpected();
					var codePos = ++this.pos;
					code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
				} else code = this.readHexChar(4);
				return code;
			}, pp.readString = function(quote) {
				for (var out = "", chunkStart = ++this.pos;;) {
					this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
					var ch = this.input.charCodeAt(this.pos);
					if (ch === quote) break;
					92 === ch ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(!1), chunkStart = this.pos) : 8232 === ch || 8233 === ch ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
				}
				return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$1$1.string, out);
			};
			var INVALID_TEMPLATE_ESCAPE_ERROR = {};
			pp.tryReadTemplateToken = function() {
				this.inTemplateElement = !0;
				try {
					this.readTmplToken();
				} catch (err) {
					if (err !== INVALID_TEMPLATE_ESCAPE_ERROR) throw err;
					this.readInvalidTemplateToken();
				}
				this.inTemplateElement = !1;
			}, pp.invalidStringToken = function(position, message) {
				if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw INVALID_TEMPLATE_ESCAPE_ERROR;
				this.raise(position, message);
			}, pp.readTmplToken = function() {
				for (var out = "", chunkStart = this.pos;;) {
					this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
					var ch = this.input.charCodeAt(this.pos);
					if (96 === ch || 36 === ch && 123 === this.input.charCodeAt(this.pos + 1)) return this.pos !== this.start || this.type !== types$1$1.template && this.type !== types$1$1.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$1$1.template, out)) : 36 === ch ? (this.pos += 2, this.finishToken(types$1$1.dollarBraceL)) : (++this.pos, this.finishToken(types$1$1.backQuote));
					if (92 === ch) out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(!0), chunkStart = this.pos;
					else if (isNewLine(ch)) {
						switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
							case 13: 10 === this.input.charCodeAt(this.pos) && ++this.pos;
							case 10:
								out += "\n";
								break;
							default: out += String.fromCharCode(ch);
						}
						this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
					} else ++this.pos;
				}
			}, pp.readInvalidTemplateToken = function() {
				for (; this.pos < this.input.length; this.pos++) switch (this.input[this.pos]) {
					case "\\":
						++this.pos;
						break;
					case "$": if ("{" !== this.input[this.pos + 1]) break;
					case "`": return this.finishToken(types$1$1.invalidTemplate, this.input.slice(this.start, this.pos));
					case "\r": "\n" === this.input[this.pos + 1] && ++this.pos;
					case "\n":
					case "\u2028":
					case "\u2029": ++this.curLine, this.lineStart = this.pos + 1;
				}
				this.raise(this.start, "Unterminated template");
			}, pp.readEscapedChar = function(inTemplate) {
				var ch = this.input.charCodeAt(++this.pos);
				switch (++this.pos, ch) {
					case 110: return "\n";
					case 114: return "\r";
					case 120: return String.fromCharCode(this.readHexChar(2));
					case 117: return codePointToString(this.readCodePoint());
					case 116: return "	";
					case 98: return "\b";
					case 118: return "\v";
					case 102: return "\f";
					case 13: 10 === this.input.charCodeAt(this.pos) && ++this.pos;
					case 10: return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
					case 56:
					case 57: if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
						var codePos = this.pos - 1;
						this.invalidStringToken(codePos, "Invalid escape sequence in template string");
					}
					default:
						if (ch >= 48 && ch <= 55) {
							var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
							return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), "0" === octalStr && 56 !== ch && 57 !== ch || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
						}
						return isNewLine(ch) ? (this.options.locations && (this.lineStart = this.pos, ++this.curLine), "") : String.fromCharCode(ch);
				}
			}, pp.readHexChar = function(len) {
				var codePos = this.pos, n = this.readInt(16, len);
				return null === n && this.invalidStringToken(codePos, "Bad character escape sequence"), n;
			}, pp.readWord1 = function() {
				this.containsEsc = !1;
				for (var word = "", first = !0, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6; this.pos < this.input.length;) {
					var ch = this.fullCharCodeAtPos();
					if (isIdentifierChar(ch, astral)) this.pos += ch <= 65535 ? 1 : 2;
					else {
						if (92 !== ch) break;
						this.containsEsc = !0, word += this.input.slice(chunkStart, this.pos);
						var escStart = this.pos;
						117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
						var esc = this.readCodePoint();
						(first ? isIdentifierStart : isIdentifierChar)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString(esc), chunkStart = this.pos;
					}
					first = !1;
				}
				return word + this.input.slice(chunkStart, this.pos);
			}, pp.readWord = function() {
				var word = this.readWord1(), type$1 = types$1$1.name;
				return this.keywords.test(word) && (type$1 = keywords[word]), this.finishToken(type$1, word);
			};
			Parser$1.acorn = {
				Parser: Parser$1,
				version: "8.14.0",
				defaultOptions: defaultOptions$1,
				Position,
				SourceLocation,
				getLineInfo,
				Node,
				TokenType,
				tokTypes: types$1$1,
				keywordTypes: keywords,
				TokContext,
				tokContexts: types$7,
				isIdentifierChar,
				isIdentifierStart,
				Token,
				isNewLine,
				lineBreak,
				lineBreakG,
				nonASCIIwhitespace
			};
			const external_node_module_namespaceObject = __require("node:module"), external_node_fs_namespaceObject = __require("node:fs");
			Math.floor, String.fromCharCode;
			const TRAILING_SLASH_RE$1 = /\/$|\/\?|\/#/, JOIN_LEADING_SLASH_RE$1 = /^\.?\//;
			function hasTrailingSlash$1(input = "", respectQueryAndFragment) {
				return respectQueryAndFragment ? TRAILING_SLASH_RE$1.test(input) : input.endsWith("/");
			}
			function withTrailingSlash$1(input = "", respectQueryAndFragment) {
				if (!respectQueryAndFragment) return input.endsWith("/") ? input : input + "/";
				if (hasTrailingSlash$1(input, !0)) return input || "/";
				let path$9 = input, fragment = "";
				const fragmentIndex = input.indexOf("#");
				if (fragmentIndex >= 0 && (path$9 = input.slice(0, fragmentIndex), fragment = input.slice(fragmentIndex), !path$9)) return fragment;
				const [s0, ...s] = path$9.split("?");
				return s0 + "/" + (s.length > 0 ? `?${s.join("?")}` : "") + fragment;
			}
			function isNonEmptyURL$1(url) {
				return url && "/" !== url;
			}
			function dist_joinURL(base, ...input) {
				let url = base || "";
				for (const segment of input.filter((url2) => isNonEmptyURL$1(url2))) if (url) {
					const _segment = segment.replace(JOIN_LEADING_SLASH_RE$1, "");
					url = withTrailingSlash$1(url) + _segment;
				} else url = segment;
				return url;
			}
			Symbol.for("ufo:protocolRelative");
			Object.defineProperty;
			const _DRIVE_LETTER_START_RE$1 = /^[A-Za-z]:\//;
			function normalizeWindowsPath$1(input = "") {
				return input ? input.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE$1, (r$1) => r$1.toUpperCase()) : input;
			}
			const _UNC_REGEX = /^[/\\]{2}/, _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/, pathe_ff20891b_normalize = function(path$9) {
				if (0 === path$9.length) return ".";
				const isUNCPath = (path$9 = normalizeWindowsPath$1(path$9)).match(_UNC_REGEX), isPathAbsolute = isAbsolute(path$9), trailingSeparator = "/" === path$9[path$9.length - 1];
				return 0 === (path$9 = normalizeString(path$9, !isPathAbsolute)).length ? isPathAbsolute ? "/" : trailingSeparator ? "./" : "." : (trailingSeparator && (path$9 += "/"), _DRIVE_LETTER_RE.test(path$9) && (path$9 += "/"), isUNCPath ? isPathAbsolute ? `//${path$9}` : `//./${path$9}` : isPathAbsolute && !isAbsolute(path$9) ? `/${path$9}` : path$9);
			}, join$1 = function(...arguments_) {
				if (0 === arguments_.length) return ".";
				let joined;
				for (const argument of arguments_) argument && argument.length > 0 && (void 0 === joined ? joined = argument : joined += `/${argument}`);
				return void 0 === joined ? "." : pathe_ff20891b_normalize(joined.replace(/\/\/+/g, "/"));
			};
			const resolve$1 = function(...arguments_) {
				let resolvedPath = "", resolvedAbsolute = !1;
				for (let index = (arguments_ = arguments_.map((argument) => normalizeWindowsPath$1(argument))).length - 1; index >= -1 && !resolvedAbsolute; index--) {
					const path$9 = index >= 0 ? arguments_[index] : "undefined" != typeof process && "function" == typeof process.cwd ? process.cwd().replace(/\\/g, "/") : "/";
					path$9 && 0 !== path$9.length && (resolvedPath = `${path$9}/${resolvedPath}`, resolvedAbsolute = isAbsolute(path$9));
				}
				return resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute), resolvedAbsolute && !isAbsolute(resolvedPath) ? `/${resolvedPath}` : resolvedPath.length > 0 ? resolvedPath : ".";
			};
			function normalizeString(path$9, allowAboveRoot) {
				let res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, char = null;
				for (let index = 0; index <= path$9.length; ++index) {
					if (index < path$9.length) char = path$9[index];
					else {
						if ("/" === char) break;
						char = "/";
					}
					if ("/" === char) {
						if (lastSlash === index - 1 || 1 === dots);
						else if (2 === dots) {
							if (res.length < 2 || 2 !== lastSegmentLength || "." !== res[res.length - 1] || "." !== res[res.length - 2]) {
								if (res.length > 2) {
									const lastSlashIndex = res.lastIndexOf("/");
									-1 === lastSlashIndex ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = index, dots = 0;
									continue;
								}
								if (res.length > 0) {
									res = "", lastSegmentLength = 0, lastSlash = index, dots = 0;
									continue;
								}
							}
							allowAboveRoot && (res += res.length > 0 ? "/.." : "..", lastSegmentLength = 2);
						} else res.length > 0 ? res += `/${path$9.slice(lastSlash + 1, index)}` : res = path$9.slice(lastSlash + 1, index), lastSegmentLength = index - lastSlash - 1;
						lastSlash = index, dots = 0;
					} else "." === char && -1 !== dots ? ++dots : dots = -1;
				}
				return res;
			}
			const isAbsolute = function(p$1) {
				return _IS_ABSOLUTE_RE.test(p$1);
			}, _EXTNAME_RE$1 = /.(\.[^./]+)$/, extname$1 = function(p$1) {
				const match = _EXTNAME_RE$1.exec(normalizeWindowsPath$1(p$1));
				return match && match[1] || "";
			}, pathe_ff20891b_dirname = function(p$1) {
				const segments = normalizeWindowsPath$1(p$1).replace(/\/$/, "").split("/").slice(0, -1);
				return 1 === segments.length && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (isAbsolute(p$1) ? "/" : ".");
			}, basename$1 = function(p$1, extension) {
				const lastSegment = normalizeWindowsPath$1(p$1).split("/").pop();
				return extension && lastSegment.endsWith(extension) ? lastSegment.slice(0, -extension.length) : lastSegment;
			}, external_node_url_namespaceObject = __require("node:url"), external_node_assert_namespaceObject = __require("node:assert"), external_node_process_namespaceObject = __require("node:process"), external_node_path_namespaceObject = __require("node:path"), external_node_v8_namespaceObject = __require("node:v8"), external_node_util_namespaceObject = __require("node:util"), BUILTIN_MODULES = new Set(external_node_module_namespaceObject.builtinModules);
			function normalizeSlash(path$9) {
				return path$9.replace(/\\/g, "/");
			}
			const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = new Set([
				"string",
				"function",
				"number",
				"object",
				"Function",
				"Object",
				"boolean",
				"bigint",
				"symbol"
			]), codes = {};
			function formatList(array, type$1 = "and") {
				return array.length < 3 ? array.join(` ${type$1} `) : `${array.slice(0, -1).join(", ")}, ${type$1} ${array[array.length - 1]}`;
			}
			const messages = new Map();
			let userStackTraceLimit;
			function createError$1(sym, value$1, constructor) {
				return messages.set(sym, value$1), function(Base, key) {
					return NodeError;
					function NodeError(...parameters) {
						const limit = Error.stackTraceLimit;
						isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
						const error$1 = new Base();
						isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
						const message = function(key$1, parameters$1, self$1) {
							const message$1 = messages.get(key$1);
							if (external_node_assert_namespaceObject(void 0 !== message$1, "expected `message` to be found"), "function" == typeof message$1) return external_node_assert_namespaceObject(message$1.length <= parameters$1.length, `Code: ${key$1}; The provided arguments length (${parameters$1.length}) does not match the required ones (${message$1.length}).`), Reflect.apply(message$1, self$1, parameters$1);
							const regex = /%[dfijoOs]/g;
							let expectedLength = 0;
							for (; null !== regex.exec(message$1);) expectedLength++;
							return external_node_assert_namespaceObject(expectedLength === parameters$1.length, `Code: ${key$1}; The provided arguments length (${parameters$1.length}) does not match the required ones (${expectedLength}).`), 0 === parameters$1.length ? message$1 : (parameters$1.unshift(message$1), Reflect.apply(external_node_util_namespaceObject.format, null, parameters$1));
						}(key, parameters, error$1);
						return Object.defineProperties(error$1, {
							message: {
								value: message,
								enumerable: !1,
								writable: !0,
								configurable: !0
							},
							toString: {
								value() {
									return `${this.name} [${key}]: ${this.message}`;
								},
								enumerable: !1,
								writable: !0,
								configurable: !0
							}
						}), captureLargerStackTrace(error$1), error$1.code = key, error$1;
					}
				}(constructor, sym);
			}
			function isErrorStackTraceLimitWritable() {
				try {
					if (external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot()) return !1;
				} catch {}
				const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
				return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
			}
			codes.ERR_INVALID_ARG_TYPE = createError$1("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
				external_node_assert_namespaceObject("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
				let message = "The ";
				if (name.endsWith(" argument")) message += `${name} `;
				else {
					const type$1 = name.includes(".") ? "property" : "argument";
					message += `"${name}" ${type$1} `;
				}
				message += "must be ";
				const types$8 = [], instances = [], other = [];
				for (const value$1 of expected) external_node_assert_namespaceObject("string" == typeof value$1, "All expected entries have to be of type string"), kTypes.has(value$1) ? types$8.push(value$1.toLowerCase()) : null === classRegExp.exec(value$1) ? (external_node_assert_namespaceObject("object" !== value$1, "The value \"object\" should be written as \"Object\""), other.push(value$1)) : instances.push(value$1);
				if (instances.length > 0) {
					const pos = types$8.indexOf("object");
					-1 !== pos && (types$8.slice(pos, 1), instances.push("Object"));
				}
				return types$8.length > 0 && (message += `${types$8.length > 1 ? "one of type" : "of type"} ${formatList(types$8, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value$1) {
					if (null == value$1) return String(value$1);
					if ("function" == typeof value$1 && value$1.name) return `function ${value$1.name}`;
					if ("object" == typeof value$1) return value$1.constructor && value$1.constructor.name ? `an instance of ${value$1.constructor.name}` : `${(0, external_node_util_namespaceObject.inspect)(value$1, { depth: -1 })}`;
					let inspected = (0, external_node_util_namespaceObject.inspect)(value$1, { colors: !1 });
					inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
					return `type ${typeof value$1} (${inspected})`;
				}(actual)}`, message;
			}, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError$1("ERR_INVALID_MODULE_SPECIFIER", (request$1, reason, base = void 0) => `Invalid module "${request$1}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError$1("ERR_INVALID_PACKAGE_CONFIG", (path$9, base, message) => `Invalid package config ${path$9}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError$1("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = !1, base = void 0) => {
				const relatedError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
				return "." === key ? (external_node_assert_namespaceObject(!1 === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? "; targets must start with \"./\"" : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? "; targets must start with \"./\"" : ""}`;
			}, Error), codes.ERR_MODULE_NOT_FOUND = createError$1("ERR_MODULE_NOT_FOUND", (path$9, base, exactUrl = !1) => `Cannot find ${exactUrl ? "module" : "package"} '${path$9}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError$1("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError$1("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError$1("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError$1("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError$1("ERR_UNSUPPORTED_RESOLVE_REQUEST", "Failed to resolve module specifier \"%s\" from \"%s\": Invalid relative URL or base scheme is not hierarchical.", TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError$1("ERR_UNKNOWN_FILE_EXTENSION", (extension, path$9) => `Unknown file extension "${extension}" for ${path$9}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError$1("ERR_INVALID_ARG_VALUE", (name, value$1, reason = "is invalid") => {
				let inspected = (0, external_node_util_namespaceObject.inspect)(value$1);
				inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
				return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
			}, TypeError);
			const captureLargerStackTrace = function(wrappedFunction) {
				const hidden = "__node_internal_" + wrappedFunction.name;
				return Object.defineProperty(wrappedFunction, "name", { value: hidden }), wrappedFunction;
			}(function(error$1) {
				const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
				return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error$1), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error$1;
			});
			const hasOwnProperty$1 = {}.hasOwnProperty, { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, cache = new Map();
			function read$1(jsonPath, { base, specifier }) {
				const existing = cache.get(jsonPath);
				if (existing) return existing;
				let string;
				try {
					string = external_node_fs_namespaceObject.readFileSync(external_node_path_namespaceObject.toNamespacedPath(jsonPath), "utf8");
				} catch (error$1) {
					const exception = error$1;
					if ("ENOENT" !== exception.code) throw exception;
				}
				const result = {
					exists: !1,
					pjsonPath: jsonPath,
					main: void 0,
					name: void 0,
					type: "none",
					exports: void 0,
					imports: void 0
				};
				if (void 0 !== string) {
					let parsed;
					try {
						parsed = JSON.parse(string);
					} catch (error_) {
						const cause = error_, error$1 = new ERR_INVALID_PACKAGE_CONFIG$1(jsonPath, (base ? `"${specifier}" from ` : "") + (0, external_node_url_namespaceObject.fileURLToPath)(base || specifier), cause.message);
						throw error$1.cause = cause, error$1;
					}
					result.exists = !0, hasOwnProperty$1.call(parsed, "name") && "string" == typeof parsed.name && (result.name = parsed.name), hasOwnProperty$1.call(parsed, "main") && "string" == typeof parsed.main && (result.main = parsed.main), hasOwnProperty$1.call(parsed, "exports") && (result.exports = parsed.exports), hasOwnProperty$1.call(parsed, "imports") && (result.imports = parsed.imports), !hasOwnProperty$1.call(parsed, "type") || "commonjs" !== parsed.type && "module" !== parsed.type || (result.type = parsed.type);
				}
				return cache.set(jsonPath, result), result;
			}
			function getPackageScopeConfig(resolved) {
				let packageJSONUrl = new URL("package.json", resolved);
				for (;;) {
					if (packageJSONUrl.pathname.endsWith("node_modules/package.json")) break;
					const packageConfig = read$1((0, external_node_url_namespaceObject.fileURLToPath)(packageJSONUrl), { specifier: resolved });
					if (packageConfig.exists) return packageConfig;
					const lastPackageJSONUrl = packageJSONUrl;
					if (packageJSONUrl = new URL("../package.json", packageJSONUrl), packageJSONUrl.pathname === lastPackageJSONUrl.pathname) break;
				}
				return {
					pjsonPath: (0, external_node_url_namespaceObject.fileURLToPath)(packageJSONUrl),
					exists: !1,
					type: "none"
				};
			}
			function getPackageType(url) {
				return getPackageScopeConfig(url).type;
			}
			const { ERR_UNKNOWN_FILE_EXTENSION } = codes, dist_hasOwnProperty = {}.hasOwnProperty, extensionFormatMap = {
				__proto__: null,
				".cjs": "commonjs",
				".js": "module",
				".json": "json",
				".mjs": "module"
			};
			const protocolHandlers = {
				__proto__: null,
				"data:": function(parsed) {
					const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [
						null,
						null,
						null
					];
					return function(mime$1) {
						return mime$1 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime$1) ? "module" : "application/json" === mime$1 ? "json" : null;
					}(mime);
				},
				"file:": function(url, _context, ignoreErrors) {
					const value$1 = function(url$1) {
						const pathname = url$1.pathname;
						let index = pathname.length;
						for (; index--;) {
							const code = pathname.codePointAt(index);
							if (47 === code) return "";
							if (46 === code) return 47 === pathname.codePointAt(index - 1) ? "" : pathname.slice(index);
						}
						return "";
					}(url);
					if (".js" === value$1) {
						const packageType = getPackageType(url);
						return "none" !== packageType ? packageType : "commonjs";
					}
					if ("" === value$1) {
						const packageType = getPackageType(url);
						return "none" === packageType || "commonjs" === packageType ? "commonjs" : "module";
					}
					const format = extensionFormatMap[value$1];
					if (format) return format;
					if (ignoreErrors) return;
					const filepath = (0, external_node_url_namespaceObject.fileURLToPath)(url);
					throw new ERR_UNKNOWN_FILE_EXTENSION(value$1, filepath);
				},
				"http:": getHttpProtocolModuleFormat,
				"https:": getHttpProtocolModuleFormat,
				"node:": () => "builtin"
			};
			function getHttpProtocolModuleFormat() {}
			const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSeparatorRegEx = /%2f|%5c/i, emittedPackageWarnings = new Set(), doubleSlashRegEx = /[/\\]{2}/;
			function emitInvalidSegmentDeprecation(target, request$1, match, packageJsonUrl, internal, base, isTarget) {
				if (external_node_process_namespaceObject.noDeprecation) return;
				const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), double = null !== doubleSlashRegEx.exec(isTarget ? target : request$1);
				external_node_process_namespaceObject.emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request$1}" ${request$1 === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
			}
			function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
				if (external_node_process_namespaceObject.noDeprecation) return;
				const format = function(url$1, context) {
					const protocol = url$1.protocol;
					return dist_hasOwnProperty.call(protocolHandlers, protocol) && protocolHandlers[protocol](url$1, context, !0) || null;
				}(url, { parentURL: base.href });
				if ("module" !== format) return;
				const urlPath = (0, external_node_url_namespaceObject.fileURLToPath)(url.href), packagePath = (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), basePath = (0, external_node_url_namespaceObject.fileURLToPath)(base);
				main ? external_node_path_namespaceObject.resolve(packagePath, main) !== urlPath && external_node_process_namespaceObject.emitWarning(`Package ${packagePath} has a "main" field set to "${main}", excluding the full filename and extension to the resolved file at "${urlPath.slice(packagePath.length)}", imported from ${basePath}.\n Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : external_node_process_namespaceObject.emitWarning(`No "main" or "exports" field defined in the package.json for ${packagePath} resolving the main entry point "${urlPath.slice(packagePath.length)}", imported from ${basePath}.\nDefault "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
			}
			function tryStatSync(path$9) {
				try {
					return (0, external_node_fs_namespaceObject.statSync)(path$9);
				} catch {}
			}
			function fileExists(url) {
				const stats = (0, external_node_fs_namespaceObject.statSync)(url, { throwIfNoEntry: !1 }), isFile = stats ? stats.isFile() : void 0;
				return null != isFile && isFile;
			}
			function legacyMainResolve(packageJsonUrl, packageConfig, base) {
				let guess;
				if (void 0 !== packageConfig.main) {
					if (guess = new external_node_url_namespaceObject.URL(packageConfig.main, packageJsonUrl), fileExists(guess)) return guess;
					const tries$1 = [
						`./${packageConfig.main}.js`,
						`./${packageConfig.main}.json`,
						`./${packageConfig.main}.node`,
						`./${packageConfig.main}/index.js`,
						`./${packageConfig.main}/index.json`,
						`./${packageConfig.main}/index.node`
					];
					let i$2 = -1;
					for (; ++i$2 < tries$1.length && (guess = new external_node_url_namespaceObject.URL(tries$1[i$2], packageJsonUrl), !fileExists(guess));) guess = void 0;
					if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
				}
				const tries = [
					"./index.js",
					"./index.json",
					"./index.node"
				];
				let i$1 = -1;
				for (; ++i$1 < tries.length && (guess = new external_node_url_namespaceObject.URL(tries[i$1], packageJsonUrl), !fileExists(guess));) guess = void 0;
				if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
				throw new ERR_MODULE_NOT_FOUND((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), (0, external_node_url_namespaceObject.fileURLToPath)(base));
			}
			function exportsNotFound(subpath, packageJsonUrl, base) {
				return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
			}
			function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
				return target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, target, internal, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
			}
			function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
				if ("" !== subpath && !pattern && "/" !== target[target.length - 1]) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
				if (!target.startsWith("./")) {
					if (internal && !target.startsWith("../") && !target.startsWith("/")) {
						let isURL = !1;
						try {
							new external_node_url_namespaceObject.URL(target), isURL = !0;
						} catch {}
						if (!isURL) return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
					}
					throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
				}
				if (null !== invalidSegmentRegEx.exec(target.slice(2))) {
					if (null !== deprecatedInvalidSegmentRegEx.exec(target.slice(2))) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
					if (!isPathMap) {
						const request$1 = pattern ? match.replace("*", () => subpath) : match + subpath;
						emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request$1, match, packageJsonUrl, internal, base, !0);
					}
				}
				const resolved = new external_node_url_namespaceObject.URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new external_node_url_namespaceObject.URL(".", packageJsonUrl).pathname;
				if (!resolvedPath.startsWith(packagePath)) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
				if ("" === subpath) return resolved;
				if (null !== invalidSegmentRegEx.exec(subpath)) {
					const request$1 = pattern ? match.replace("*", () => subpath) : match + subpath;
					if (null === deprecatedInvalidSegmentRegEx.exec(subpath)) {
						if (!isPathMap) emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request$1, match, packageJsonUrl, internal, base, !1);
					} else (function(request$2, match$1, packageJsonUrl$1, internal$1, base$1) {
						const reason = `request is not a valid match in pattern "${match$1}" for the "${internal$1 ? "imports" : "exports"}" resolution of ${(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl$1)}`;
						throw new ERR_INVALID_MODULE_SPECIFIER(request$2, reason, base$1 && (0, external_node_url_namespaceObject.fileURLToPath)(base$1));
					})(request$1, match, packageJsonUrl, internal, base);
				}
				return pattern ? new external_node_url_namespaceObject.URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new external_node_url_namespaceObject.URL(subpath, resolved);
			}
			function isArrayIndex(key) {
				const keyNumber = Number(key);
				return `${keyNumber}` === key && keyNumber >= 0 && keyNumber < 4294967295;
			}
			function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
				if ("string" == typeof target) return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
				if (Array.isArray(target)) {
					const targetList = target;
					if (0 === targetList.length) return null;
					let lastException, i$1 = -1;
					for (; ++i$1 < targetList.length;) {
						const targetItem = targetList[i$1];
						let resolveResult;
						try {
							resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
						} catch (error$1) {
							if (lastException = error$1, "ERR_INVALID_PACKAGE_TARGET" === error$1.code) continue;
							throw error$1;
						}
						if (void 0 !== resolveResult) {
							if (null !== resolveResult) return resolveResult;
							lastException = null;
						}
					}
					if (null == lastException) return null;
					throw lastException;
				}
				if ("object" == typeof target && null !== target) {
					const keys = Object.getOwnPropertyNames(target);
					let i$1 = -1;
					for (; ++i$1 < keys.length;) if (isArrayIndex(keys[i$1])) throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), base, "\"exports\" cannot contain numeric property keys.");
					for (i$1 = -1; ++i$1 < keys.length;) {
						const key = keys[i$1];
						if ("default" === key || conditions && conditions.has(key)) {
							const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
							if (void 0 === resolveResult) continue;
							return resolveResult;
						}
					}
					return null;
				}
				if (null === target) return null;
				throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
			}
			function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
				if (external_node_process_namespaceObject.noDeprecation) return;
				const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(pjsonUrl);
				emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), external_node_process_namespaceObject.emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
			}
			function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
				let exports$1 = packageConfig.exports;
				if (function(exports$2, packageJsonUrl$1, base$1) {
					if ("string" == typeof exports$2 || Array.isArray(exports$2)) return !0;
					if ("object" != typeof exports$2 || null === exports$2) return !1;
					const keys$1 = Object.getOwnPropertyNames(exports$2);
					let isConditionalSugar = !1, i$2 = 0, keyIndex = -1;
					for (; ++keyIndex < keys$1.length;) {
						const key = keys$1[keyIndex], currentIsConditionalSugar = "" === key || "." !== key[0];
						if (0 == i$2++) isConditionalSugar = currentIsConditionalSugar;
						else if (isConditionalSugar !== currentIsConditionalSugar) throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl$1), base$1, "\"exports\" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.");
					}
					return isConditionalSugar;
				}(exports$1, packageJsonUrl, base) && (exports$1 = { ".": exports$1 }), own.call(exports$1, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
					const resolveResult = resolvePackageTarget(packageJsonUrl, exports$1[packageSubpath], "", packageSubpath, base, !1, !1, !1, conditions);
					if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
					return resolveResult;
				}
				let bestMatch = "", bestMatchSubpath = "";
				const keys = Object.getOwnPropertyNames(exports$1);
				let i$1 = -1;
				for (; ++i$1 < keys.length;) {
					const key = keys[i$1], patternIndex = key.indexOf("*");
					if (-1 !== patternIndex && packageSubpath.startsWith(key.slice(0, patternIndex))) {
						packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
						const patternTrailer = key.slice(patternIndex + 1);
						packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
					}
				}
				if (bestMatch) {
					const resolveResult = resolvePackageTarget(packageJsonUrl, exports$1[bestMatch], bestMatchSubpath, bestMatch, base, !0, !1, packageSubpath.endsWith("/"), conditions);
					if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
					return resolveResult;
				}
				throw exportsNotFound(packageSubpath, packageJsonUrl, base);
			}
			function patternKeyCompare(a$1, b$2) {
				const aPatternIndex = a$1.indexOf("*"), bPatternIndex = b$2.indexOf("*"), baseLengthA = -1 === aPatternIndex ? a$1.length : aPatternIndex + 1, baseLengthB = -1 === bPatternIndex ? b$2.length : bPatternIndex + 1;
				return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || -1 === aPatternIndex ? 1 : -1 === bPatternIndex || a$1.length > b$2.length ? -1 : b$2.length > a$1.length ? 1 : 0;
			}
			function packageImportsResolve(name, base, conditions) {
				if ("#" === name || name.startsWith("#/") || name.endsWith("/")) throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, external_node_url_namespaceObject.fileURLToPath)(base));
				let packageJsonUrl;
				const packageConfig = getPackageScopeConfig(base);
				if (packageConfig.exists) {
					packageJsonUrl = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
					const imports = packageConfig.imports;
					if (imports) if (own.call(imports, name) && !name.includes("*")) {
						const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, !1, !0, !1, conditions);
						if (null != resolveResult) return resolveResult;
					} else {
						let bestMatch = "", bestMatchSubpath = "";
						const keys = Object.getOwnPropertyNames(imports);
						let i$1 = -1;
						for (; ++i$1 < keys.length;) {
							const key = keys[i$1], patternIndex = key.indexOf("*");
							if (-1 !== patternIndex && name.startsWith(key.slice(0, -1))) {
								const patternTrailer = key.slice(patternIndex + 1);
								name.length >= key.length && name.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
							}
						}
						if (bestMatch) {
							const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, !0, !0, !1, conditions);
							if (null != resolveResult) return resolveResult;
						}
					}
				}
				throw function(specifier, packageJsonUrl$1, base$1) {
					return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl$1 && (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl$1)), (0, external_node_url_namespaceObject.fileURLToPath)(base$1));
				}(name, packageJsonUrl, base);
			}
			function packageResolve(specifier, base, conditions) {
				if (external_node_module_namespaceObject.builtinModules.includes(specifier)) return new external_node_url_namespaceObject.URL("node:" + specifier);
				const { packageName, packageSubpath, isScoped } = function(specifier$1, base$1) {
					let separatorIndex = specifier$1.indexOf("/"), validPackageName = !0, isScoped$1 = !1;
					"@" === specifier$1[0] && (isScoped$1 = !0, -1 === separatorIndex || 0 === specifier$1.length ? validPackageName = !1 : separatorIndex = specifier$1.indexOf("/", separatorIndex + 1));
					const packageName$1 = -1 === separatorIndex ? specifier$1 : specifier$1.slice(0, separatorIndex);
					if (null !== invalidPackageNameRegEx.exec(packageName$1) && (validPackageName = !1), !validPackageName) throw new ERR_INVALID_MODULE_SPECIFIER(specifier$1, "is not a valid package name", (0, external_node_url_namespaceObject.fileURLToPath)(base$1));
					return {
						packageName: packageName$1,
						packageSubpath: "." + (-1 === separatorIndex ? "" : specifier$1.slice(separatorIndex)),
						isScoped: isScoped$1
					};
				}(specifier, base), packageConfig = getPackageScopeConfig(base);
				if (packageConfig.exists) {
					const packageJsonUrl$1 = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
					if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports) return packageExportsResolve(packageJsonUrl$1, packageSubpath, packageConfig, base, conditions);
				}
				let lastPath, packageJsonUrl = new external_node_url_namespaceObject.URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
				do {
					const stat$3 = tryStatSync(packageJsonPath.slice(0, -13));
					if (!stat$3 || !stat$3.isDirectory()) {
						lastPath = packageJsonPath, packageJsonUrl = new external_node_url_namespaceObject.URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
						continue;
					}
					const packageConfig$1 = read$1(packageJsonPath, {
						base,
						specifier
					});
					return void 0 !== packageConfig$1.exports && null !== packageConfig$1.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig$1, base, conditions) : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig$1, base) : new external_node_url_namespaceObject.URL(packageSubpath, packageJsonUrl);
				} while (packageJsonPath.length !== lastPath.length);
				throw new ERR_MODULE_NOT_FOUND(packageName, (0, external_node_url_namespaceObject.fileURLToPath)(base), !1);
			}
			function moduleResolve(specifier, base, conditions, preserveSymlinks) {
				const protocol = base.protocol, isRemote = "data:" === protocol || "http:" === protocol || "https:" === protocol;
				let resolved;
				if (function(specifier$1) {
					return "" !== specifier$1 && ("/" === specifier$1[0] || function(specifier$2) {
						if ("." === specifier$2[0]) {
							if (1 === specifier$2.length || "/" === specifier$2[1]) return !0;
							if ("." === specifier$2[1] && (2 === specifier$2.length || "/" === specifier$2[2])) return !0;
						}
						return !1;
					}(specifier$1));
				}(specifier)) try {
					resolved = new external_node_url_namespaceObject.URL(specifier, base);
				} catch (error_) {
					const error$1 = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
					throw error$1.cause = error_, error$1;
				}
				else if ("file:" === protocol && "#" === specifier[0]) resolved = packageImportsResolve(specifier, base, conditions);
				else try {
					resolved = new external_node_url_namespaceObject.URL(specifier);
				} catch (error_) {
					if (isRemote && !external_node_module_namespaceObject.builtinModules.includes(specifier)) {
						const error$1 = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
						throw error$1.cause = error_, error$1;
					}
					resolved = packageResolve(specifier, base, conditions);
				}
				return external_node_assert_namespaceObject(void 0 !== resolved, "expected to be defined"), "file:" !== resolved.protocol ? resolved : function(resolved$1, base$1, preserveSymlinks$1) {
					if (null !== encodedSeparatorRegEx.exec(resolved$1.pathname)) throw new ERR_INVALID_MODULE_SPECIFIER(resolved$1.pathname, "must not include encoded \"/\" or \"\\\" characters", (0, external_node_url_namespaceObject.fileURLToPath)(base$1));
					let filePath;
					try {
						filePath = (0, external_node_url_namespaceObject.fileURLToPath)(resolved$1);
					} catch (error$1) {
						const cause = error$1;
						throw Object.defineProperty(cause, "input", { value: String(resolved$1) }), Object.defineProperty(cause, "module", { value: String(base$1) }), cause;
					}
					const stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
					if (stats && stats.isDirectory()) {
						const error$1 = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, external_node_url_namespaceObject.fileURLToPath)(base$1));
						throw error$1.url = String(resolved$1), error$1;
					}
					if (!stats || !stats.isFile()) {
						const error$1 = new ERR_MODULE_NOT_FOUND(filePath || resolved$1.pathname, base$1 && (0, external_node_url_namespaceObject.fileURLToPath)(base$1), !0);
						throw error$1.url = String(resolved$1), error$1;
					}
					if (!preserveSymlinks$1) {
						const real = (0, external_node_fs_namespaceObject.realpathSync)(filePath), { search, hash } = resolved$1;
						(resolved$1 = (0, external_node_url_namespaceObject.pathToFileURL)(real + (filePath.endsWith(external_node_path_namespaceObject.sep) ? "/" : ""))).search = search, resolved$1.hash = hash;
					}
					return resolved$1;
				}(resolved, base, preserveSymlinks);
			}
			function fileURLToPath(id) {
				return "string" != typeof id || id.startsWith("file://") ? normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash(id);
			}
			function pathToFileURL(id) {
				return (0, external_node_url_namespaceObject.pathToFileURL)(fileURLToPath(id)).toString();
			}
			const DEFAULT_CONDITIONS_SET = new Set(["node", "import"]), DEFAULT_EXTENSIONS = [
				".mjs",
				".cjs",
				".js",
				".json"
			], NOT_FOUND_ERRORS = new Set([
				"ERR_MODULE_NOT_FOUND",
				"ERR_UNSUPPORTED_DIR_IMPORT",
				"MODULE_NOT_FOUND",
				"ERR_PACKAGE_PATH_NOT_EXPORTED"
			]);
			function _tryModuleResolve(id, url, conditions) {
				try {
					return moduleResolve(id, url, conditions);
				} catch (error$1) {
					if (!NOT_FOUND_ERRORS.has(error$1?.code)) throw error$1;
				}
			}
			function _resolve(id, options = {}) {
				if ("string" != typeof id) {
					if (!(id instanceof URL)) throw new TypeError("input must be a `string` or `URL`");
					id = fileURLToPath(id);
				}
				if (/(node|data|http|https):/.test(id)) return id;
				if (BUILTIN_MODULES.has(id)) return "node:" + id;
				if (id.startsWith("file://") && (id = fileURLToPath(id)), isAbsolute(id)) try {
					if ((0, external_node_fs_namespaceObject.statSync)(id).isFile()) return pathToFileURL(id);
				} catch (error$1) {
					if ("ENOENT" !== error$1?.code) throw error$1;
				}
				const conditionsSet = options.conditions ? new Set(options.conditions) : DEFAULT_CONDITIONS_SET, _urls = (Array.isArray(options.url) ? options.url : [options.url]).filter(Boolean).map((url) => new URL(function(id$1) {
					return "string" != typeof id$1 && (id$1 = id$1.toString()), /(node|data|http|https|file):/.test(id$1) ? id$1 : BUILTIN_MODULES.has(id$1) ? "node:" + id$1 : "file://" + encodeURI(normalizeSlash(id$1));
				}(url.toString())));
				0 === _urls.length && _urls.push(new URL(pathToFileURL(process.cwd())));
				const urls = [..._urls];
				for (const url of _urls) "file:" === url.protocol && urls.push(new URL("./", url), new URL(dist_joinURL(url.pathname, "_index.js"), url), new URL("node_modules", url));
				let resolved;
				for (const url of urls) {
					if (resolved = _tryModuleResolve(id, url, conditionsSet), resolved) break;
					for (const prefix of ["", "/index"]) {
						for (const extension of options.extensions || DEFAULT_EXTENSIONS) if (resolved = _tryModuleResolve(dist_joinURL(id, prefix) + extension, url, conditionsSet), resolved) break;
						if (resolved) break;
					}
					if (resolved) break;
				}
				if (!resolved) {
					const error$1 = new Error(`Cannot find module ${id} imported from ${urls.join(", ")}`);
					throw error$1.code = "ERR_MODULE_NOT_FOUND", error$1;
				}
				return pathToFileURL(resolved);
			}
			function resolveSync(id, options) {
				return _resolve(id, options);
			}
			function resolvePathSync(id, options) {
				return fileURLToPath(resolveSync(id, options));
			}
			const ESM_RE = /([\s;]|^)(import[\s\w*,{}]*from|import\s*["'*{]|export\b\s*(?:[*{]|default|class|type|function|const|var|let|async function)|import\.meta\b)/m, COMMENT_RE = /\/\*.+?\*\/|\/\/.*(?=[nr])/g;
			function hasESMSyntax(code, opts = {}) {
				return opts.stripComments && (code = code.replace(COMMENT_RE, "")), ESM_RE.test(code);
			}
			function escapeStringRegexp(string) {
				if ("string" != typeof string) throw new TypeError("Expected a string");
				return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
			}
			const pathSeparators = new Set([
				"/",
				"\\",
				void 0
			]), normalizedAliasSymbol = Symbol.for("pathe:normalizedAlias");
			function normalizeAliases(_aliases) {
				if (_aliases[normalizedAliasSymbol]) return _aliases;
				const aliases = Object.fromEntries(Object.entries(_aliases).sort(([a$1], [b$2]) => function(a$2, b$3) {
					return b$3.split("/").length - a$2.split("/").length;
				}(a$1, b$2)));
				for (const key in aliases) for (const alias in aliases) alias === key || key.startsWith(alias) || aliases[key].startsWith(alias) && pathSeparators.has(aliases[key][alias.length]) && (aliases[key] = aliases[alias] + aliases[key].slice(alias.length));
				return Object.defineProperty(aliases, normalizedAliasSymbol, {
					value: !0,
					enumerable: !1
				}), aliases;
			}
			const FILENAME_RE = /(^|[/\\])([^/\\]+?)(?=(\.[^.]+)?$)/;
			function utils_hasTrailingSlash(path$9 = "/") {
				const lastChar = path$9[path$9.length - 1];
				return "/" === lastChar || "\\" === lastChar;
			}
			const package_namespaceObject = { rE: "2.4.2" }, external_node_crypto_namespaceObject = __require("node:crypto"), dist_r = Object.create(null), dist_i = (e$1) => globalThis.process?.env || globalThis.Deno?.env.toObject() || globalThis.__env__ || (e$1 ? dist_r : globalThis), dist_s = new Proxy(dist_r, {
				get: (e$1, o$1) => dist_i()[o$1] ?? dist_r[o$1],
				has: (e$1, o$1) => o$1 in dist_i() || o$1 in dist_r,
				set: (e$1, o$1, E) => (dist_i(!0)[o$1] = E, !0),
				deleteProperty(e$1, o$1) {
					if (!o$1) return !1;
					return delete dist_i(!0)[o$1], !0;
				},
				ownKeys() {
					const e$1 = dist_i(!0);
					return Object.keys(e$1);
				}
			}), dist_t = typeof process < "u" && process.env && "development" || "", B$1 = [
				["APPVEYOR"],
				[
					"AWS_AMPLIFY",
					"AWS_APP_ID",
					{ ci: !0 }
				],
				["AZURE_PIPELINES", "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI"],
				["AZURE_STATIC", "INPUT_AZURE_STATIC_WEB_APPS_API_TOKEN"],
				["APPCIRCLE", "AC_APPCIRCLE"],
				["BAMBOO", "bamboo_planKey"],
				["BITBUCKET", "BITBUCKET_COMMIT"],
				["BITRISE", "BITRISE_IO"],
				["BUDDY", "BUDDY_WORKSPACE_ID"],
				["BUILDKITE"],
				["CIRCLE", "CIRCLECI"],
				["CIRRUS", "CIRRUS_CI"],
				[
					"CLOUDFLARE_PAGES",
					"CF_PAGES",
					{ ci: !0 }
				],
				["CODEBUILD", "CODEBUILD_BUILD_ARN"],
				["CODEFRESH", "CF_BUILD_ID"],
				["DRONE"],
				["DRONE", "DRONE_BUILD_EVENT"],
				["DSARI"],
				["GITHUB_ACTIONS"],
				["GITLAB", "GITLAB_CI"],
				["GITLAB", "CI_MERGE_REQUEST_ID"],
				["GOCD", "GO_PIPELINE_LABEL"],
				["LAYERCI"],
				["HUDSON", "HUDSON_URL"],
				["JENKINS", "JENKINS_URL"],
				["MAGNUM"],
				["NETLIFY"],
				[
					"NETLIFY",
					"NETLIFY_LOCAL",
					{ ci: !1 }
				],
				["NEVERCODE"],
				["RENDER"],
				["SAIL", "SAILCI"],
				["SEMAPHORE"],
				["SCREWDRIVER"],
				["SHIPPABLE"],
				["SOLANO", "TDDIUM"],
				["STRIDER"],
				["TEAMCITY", "TEAMCITY_VERSION"],
				["TRAVIS"],
				["VERCEL", "NOW_BUILDER"],
				[
					"VERCEL",
					"VERCEL",
					{ ci: !1 }
				],
				[
					"VERCEL",
					"VERCEL_ENV",
					{ ci: !1 }
				],
				["APPCENTER", "APPCENTER_BUILD_ID"],
				[
					"CODESANDBOX",
					"CODESANDBOX_SSE",
					{ ci: !1 }
				],
				["STACKBLITZ"],
				["STORMKIT"],
				["CLEAVR"],
				["ZEABUR"],
				[
					"CODESPHERE",
					"CODESPHERE_APP_ID",
					{ ci: !0 }
				],
				["RAILWAY", "RAILWAY_PROJECT_ID"],
				["RAILWAY", "RAILWAY_SERVICE_ID"],
				["DENO-DEPLOY", "DENO_DEPLOYMENT_ID"],
				[
					"FIREBASE_APP_HOSTING",
					"FIREBASE_APP_HOSTING",
					{ ci: !0 }
				]
			];
			const l$1 = function() {
				if (globalThis.process?.env) for (const e$1 of B$1) {
					const o$1 = e$1[1] || e$1[0];
					if (globalThis.process?.env[o$1]) return {
						name: e$1[0].toLowerCase(),
						...e$1[2]
					};
				}
				return "/bin/jsh" === globalThis.process?.env?.SHELL && globalThis.process?.versions?.webcontainer ? {
					name: "stackblitz",
					ci: !1
				} : {
					name: "",
					ci: !1
				};
			}();
			l$1.name;
			function dist_n(e$1) {
				return !!e$1 && "false" !== e$1;
			}
			const I$1 = globalThis.process?.platform || "", T$2 = dist_n(dist_s.CI) || !1 !== l$1.ci, R$1 = dist_n(globalThis.process?.stdout && globalThis.process?.stdout.isTTY), A$2 = (dist_n(dist_s.DEBUG), "test" === dist_t || dist_n(dist_s.TEST)), _$2 = (dist_n(dist_s.MINIMAL), /^win/i.test(I$1)), C$2 = (/^linux/i.test(I$1), /^darwin/i.test(I$1), !dist_n(dist_s.NO_COLOR) && (dist_n(dist_s.FORCE_COLOR) || (R$1 || _$2) && dist_s.TERM), (globalThis.process?.versions?.node || "").replace(/^v/, "") || null), y$2 = (Number(C$2?.split(".")[0]), globalThis.process || Object.create(null)), dist_c = { versions: {} }, L$2 = (new Proxy(y$2, { get: (e$1, o$1) => "env" === o$1 ? dist_s : o$1 in e$1 ? e$1[o$1] : o$1 in dist_c ? dist_c[o$1] : void 0 }), "node" === globalThis.process?.release?.name), a = !!globalThis.Bun || !!globalThis.process?.versions?.bun, D$1 = !!globalThis.Deno, O$1 = !!globalThis.fastly, F$1 = [
				[!!globalThis.Netlify, "netlify"],
				[!!globalThis.EdgeRuntime, "edge-light"],
				["Cloudflare-Workers" === globalThis.navigator?.userAgent, "workerd"],
				[O$1, "fastly"],
				[D$1, "deno"],
				[a, "bun"],
				[L$2, "node"]
			];
			(function() {
				const e$1 = F$1.find((o$1) => o$1[0]);
				if (e$1) e$1[1];
			})();
			const external_node_tty_namespaceObject = __require("node:tty"), hasColors = external_node_tty_namespaceObject?.WriteStream?.prototype?.hasColors?.() ?? !1, base_format = (open$1, close) => {
				if (!hasColors) return (input) => input;
				const openCode = `[${open$1}m`, closeCode = `[${close}m`;
				return (input) => {
					const string = input + "";
					let index = string.indexOf(closeCode);
					if (-1 === index) return openCode + string + closeCode;
					let result = openCode, lastIndex = 0;
					for (; -1 !== index;) result += string.slice(lastIndex, index) + openCode, lastIndex = index + closeCode.length, index = string.indexOf(closeCode, lastIndex);
					return result += string.slice(lastIndex) + closeCode, result;
				};
			}, red = (base_format(0, 0), base_format(1, 22), base_format(2, 22), base_format(3, 23), base_format(4, 24), base_format(53, 55), base_format(7, 27), base_format(8, 28), base_format(9, 29), base_format(30, 39), base_format(31, 39)), green = base_format(32, 39), yellow = base_format(33, 39), blue = base_format(34, 39), cyan = (base_format(35, 39), base_format(36, 39)), gray = (base_format(37, 39), base_format(90, 39));
			base_format(40, 49), base_format(41, 49), base_format(42, 49), base_format(43, 49), base_format(44, 49), base_format(45, 49), base_format(46, 49), base_format(47, 49), base_format(100, 49), base_format(91, 39), base_format(92, 39), base_format(93, 39), base_format(94, 39), base_format(95, 39), base_format(96, 39), base_format(97, 39), base_format(101, 49), base_format(102, 49), base_format(103, 49), base_format(104, 49), base_format(105, 49), base_format(106, 49), base_format(107, 49);
			function isDir(filename) {
				if ("string" != typeof filename || filename.startsWith("file://")) return !1;
				try {
					return (0, external_node_fs_namespaceObject.lstatSync)(filename).isDirectory();
				} catch {
					return !1;
				}
			}
			function md5(content, len = 8) {
				return (0, external_node_crypto_namespaceObject.createHash)("md5").update(content).digest("hex").slice(0, len);
			}
			const debugMap = {
				true: green("true"),
				false: yellow("false"),
				"[esm]": blue("[esm]"),
				"[cjs]": green("[cjs]"),
				"[import]": blue("[import]"),
				"[require]": green("[require]"),
				"[native]": cyan("[native]"),
				"[transpile]": yellow("[transpile]"),
				"[fallback]": red("[fallback]"),
				"[unknown]": red("[unknown]"),
				"[hit]": green("[hit]"),
				"[miss]": yellow("[miss]"),
				"[json]": green("[json]"),
				"[data]": green("[data]")
			};
			function debug$5(ctx, ...args) {
				if (!ctx.opts.debug) return;
				const cwd = process.cwd();
				console.log(gray(["[jiti]", ...args.map((arg) => arg in debugMap ? debugMap[arg] : "string" != typeof arg ? JSON.stringify(arg) : arg.replace(cwd, "."))].join(" ")));
			}
			function jitiInteropDefault(ctx, mod) {
				return ctx.opts.interopDefault ? function(mod$1) {
					const modType = typeof mod$1;
					if (null === mod$1 || "object" !== modType && "function" !== modType) return mod$1;
					const def = mod$1.default, defType = typeof def;
					if (null == def) return mod$1;
					const defIsObj = "object" === defType || "function" === defType;
					return new Proxy(mod$1, {
						get(target, prop, receiver) {
							if ("__esModule" === prop) return !0;
							if ("default" === prop) return def;
							if (Reflect.has(target, prop)) return Reflect.get(target, prop, receiver);
							if (defIsObj) {
								let fallback = Reflect.get(def, prop, receiver);
								return "function" == typeof fallback && (fallback = fallback.bind(def)), fallback;
							}
						},
						apply: (target, thisArg, args) => "function" == typeof target ? Reflect.apply(target, thisArg, args) : "function" === defType ? Reflect.apply(def, thisArg, args) : void 0
					});
				}(mod) : mod;
			}
			function _booleanEnv(name, defaultValue) {
				const val = _jsonEnv(name, defaultValue);
				return Boolean(val);
			}
			function _jsonEnv(name, defaultValue) {
				const envValue = process.env[name];
				if (!(name in process.env)) return defaultValue;
				try {
					return JSON.parse(envValue);
				} catch {
					return defaultValue;
				}
			}
			const JS_EXT_RE = /\.(c|m)?j(sx?)$/, TS_EXT_RE = /\.(c|m)?t(sx?)$/;
			function jitiResolve(ctx, id, options) {
				let resolved, lastError;
				if (ctx.isNativeRe.test(id)) return id;
				ctx.alias && (id = function(path$9, aliases) {
					const _path = normalizeWindowsPath$1(path$9);
					aliases = normalizeAliases(aliases);
					for (const [alias, to] of Object.entries(aliases)) {
						if (!_path.startsWith(alias)) continue;
						const _alias = utils_hasTrailingSlash(alias) ? alias.slice(0, -1) : alias;
						if (utils_hasTrailingSlash(_path[_alias.length])) return join$1(to, _path.slice(alias.length));
					}
					return _path;
				}(id, ctx.alias));
				let parentURL = options?.parentURL || ctx.url;
				isDir(parentURL) && (parentURL = join$1(parentURL, "_index.js"));
				const conditionSets = (options?.async ? [
					options?.conditions,
					["node", "import"],
					["node", "require"]
				] : [
					options?.conditions,
					["node", "require"],
					["node", "import"]
				]).filter(Boolean);
				for (const conditions of conditionSets) {
					try {
						resolved = resolvePathSync(id, {
							url: parentURL,
							conditions,
							extensions: ctx.opts.extensions
						});
					} catch (error$1) {
						lastError = error$1;
					}
					if (resolved) return resolved;
				}
				try {
					return ctx.nativeRequire.resolve(id, { paths: options.paths });
				} catch (error$1) {
					lastError = error$1;
				}
				for (const ext of ctx.additionalExts) {
					if (resolved = tryNativeRequireResolve(ctx, id + ext, parentURL, options) || tryNativeRequireResolve(ctx, id + "/index" + ext, parentURL, options), resolved) return resolved;
					if ((TS_EXT_RE.test(ctx.filename) || TS_EXT_RE.test(ctx.parentModule?.filename || "") || JS_EXT_RE.test(id)) && (resolved = tryNativeRequireResolve(ctx, id.replace(JS_EXT_RE, ".$1t$2"), parentURL, options), resolved)) return resolved;
				}
				if (!options?.try) throw lastError;
			}
			function tryNativeRequireResolve(ctx, id, parentURL, options) {
				try {
					return ctx.nativeRequire.resolve(id, {
						...options,
						paths: [pathe_ff20891b_dirname(fileURLToPath(parentURL)), ...options?.paths || []]
					});
				} catch {}
			}
			const external_node_perf_hooks_namespaceObject = __require("node:perf_hooks"), external_node_vm_namespaceObject = __require("node:vm");
			var external_node_vm_default = __webpack_require__.n(external_node_vm_namespaceObject);
			function jitiRequire(ctx, id, opts) {
				const cache$1 = ctx.parentCache || {};
				if (id.startsWith("node:")) id = id.slice(5);
				else if (id.startsWith("file:")) id = (0, external_node_url_namespaceObject.fileURLToPath)(id);
				else if (id.startsWith("data:")) {
					if (!opts.async) throw new Error("`data:` URLs are only supported in ESM context. Use `import` or `jiti.import` instead.");
					return debug$5(ctx, "[native]", "[data]", "[import]", id), nativeImportOrRequire(ctx, id, !0);
				}
				if (external_node_module_namespaceObject.builtinModules.includes(id) || ".pnp.js" === id) return nativeImportOrRequire(ctx, id, opts.async);
				if (ctx.opts.tryNative && !ctx.opts.transformOptions) try {
					if (!(id = jitiResolve(ctx, id, opts)) && opts.try) return;
					if (debug$5(ctx, "[try-native]", opts.async && ctx.nativeImport ? "[import]" : "[require]", id), opts.async && ctx.nativeImport) return ctx.nativeImport(id).then((m$1) => (!1 === ctx.opts.moduleCache && delete ctx.nativeRequire.cache[id], jitiInteropDefault(ctx, m$1)));
					{
						const _mod = ctx.nativeRequire(id);
						return !1 === ctx.opts.moduleCache && delete ctx.nativeRequire.cache[id], jitiInteropDefault(ctx, _mod);
					}
				} catch (error$1) {
					debug$5(ctx, `[try-native] Using fallback for ${id} because of an error:`, error$1);
				}
				const filename = jitiResolve(ctx, id, opts);
				if (!filename && opts.try) return;
				const ext = extname$1(filename);
				if (".json" === ext) {
					debug$5(ctx, "[json]", filename);
					const jsonModule = ctx.nativeRequire(filename);
					return jsonModule && !("default" in jsonModule) && Object.defineProperty(jsonModule, "default", {
						value: jsonModule,
						enumerable: !1
					}), jsonModule;
				}
				if (ext && !ctx.opts.extensions.includes(ext)) return debug$5(ctx, "[native]", "[unknown]", opts.async ? "[import]" : "[require]", filename), nativeImportOrRequire(ctx, filename, opts.async);
				if (ctx.isNativeRe.test(filename)) return debug$5(ctx, "[native]", opts.async ? "[import]" : "[require]", filename), nativeImportOrRequire(ctx, filename, opts.async);
				if (cache$1[filename]) return jitiInteropDefault(ctx, cache$1[filename]?.exports);
				if (ctx.opts.moduleCache) {
					const cacheEntry = ctx.nativeRequire.cache[filename];
					if (cacheEntry?.loaded) return jitiInteropDefault(ctx, cacheEntry.exports);
				}
				const source = (0, external_node_fs_namespaceObject.readFileSync)(filename, "utf8");
				return eval_evalModule(ctx, source, {
					id,
					filename,
					ext,
					cache: cache$1,
					async: opts.async
				});
			}
			function nativeImportOrRequire(ctx, id, async) {
				return async && ctx.nativeImport ? ctx.nativeImport(function(id$1) {
					return _$2 && isAbsolute(id$1) ? pathToFileURL(id$1) : id$1;
				}(id)).then((m$1) => jitiInteropDefault(ctx, m$1)) : jitiInteropDefault(ctx, ctx.nativeRequire(id));
			}
			const CACHE_VERSION = "9";
			function getCache(ctx, topts, get$1) {
				if (!ctx.opts.fsCache || !topts.filename) return get$1();
				const sourceHash = ` /* v${CACHE_VERSION}-${md5(topts.source, 16)} */\n`;
				let cacheName = `${basename$1(pathe_ff20891b_dirname(topts.filename))}-${function(path$9) {
					return path$9.match(FILENAME_RE)?.[2];
				}(topts.filename)}` + (ctx.opts.sourceMaps ? "+map" : "") + (topts.interopDefault ? ".i" : "") + `.${md5(topts.filename)}` + (topts.async ? ".mjs" : ".cjs");
				topts.jsx && topts.filename.endsWith("x") && (cacheName += "x");
				const cacheDir = ctx.opts.fsCache, cacheFilePath = join$1(cacheDir, cacheName);
				if ((0, external_node_fs_namespaceObject.existsSync)(cacheFilePath)) {
					const cacheSource = (0, external_node_fs_namespaceObject.readFileSync)(cacheFilePath, "utf8");
					if (cacheSource.endsWith(sourceHash)) return debug$5(ctx, "[cache]", "[hit]", topts.filename, "~>", cacheFilePath), cacheSource;
				}
				debug$5(ctx, "[cache]", "[miss]", topts.filename);
				const result = get$1();
				return result.includes("__JITI_ERROR__") || ((0, external_node_fs_namespaceObject.writeFileSync)(cacheFilePath, result + sourceHash, "utf8"), debug$5(ctx, "[cache]", "[store]", topts.filename, "~>", cacheFilePath)), result;
			}
			function prepareCacheDir(ctx) {
				if (!0 === ctx.opts.fsCache && (ctx.opts.fsCache = function(ctx$1) {
					const nmDir = ctx$1.filename && resolve$1(ctx$1.filename, "../node_modules");
					if (nmDir && (0, external_node_fs_namespaceObject.existsSync)(nmDir)) return join$1(nmDir, ".cache/jiti");
					let _tmpDir = (0, external_node_os_namespaceObject.tmpdir)();
					if (process.env.TMPDIR && _tmpDir === process.cwd() && !process.env.JITI_RESPECT_TMPDIR_ENV) {
						const _env = process.env.TMPDIR;
						delete process.env.TMPDIR, _tmpDir = (0, external_node_os_namespaceObject.tmpdir)(), process.env.TMPDIR = _env;
					}
					return join$1(_tmpDir, "jiti");
				}(ctx)), ctx.opts.fsCache) try {
					if ((0, external_node_fs_namespaceObject.mkdirSync)(ctx.opts.fsCache, { recursive: !0 }), !function(filename) {
						try {
							return (0, external_node_fs_namespaceObject.accessSync)(filename, external_node_fs_namespaceObject.constants.W_OK), !0;
						} catch {
							return !1;
						}
					}(ctx.opts.fsCache)) throw new Error("directory is not writable!");
				} catch (error$1) {
					debug$5(ctx, "Error creating cache directory at ", ctx.opts.fsCache, error$1), ctx.opts.fsCache = !1;
				}
			}
			function transform$1(ctx, topts) {
				let code = getCache(ctx, topts, () => {
					const res = ctx.opts.transform({
						...ctx.opts.transformOptions,
						babel: {
							...ctx.opts.sourceMaps ? {
								sourceFileName: topts.filename,
								sourceMaps: "inline"
							} : {},
							...ctx.opts.transformOptions?.babel
						},
						interopDefault: ctx.opts.interopDefault,
						...topts
					});
					return res.error && ctx.opts.debug && debug$5(ctx, res.error), res.code;
				});
				return code.startsWith("#!") && (code = "// " + code), code;
			}
			function eval_evalModule(ctx, source, evalOptions = {}) {
				const id = evalOptions.id || (evalOptions.filename ? basename$1(evalOptions.filename) : `_jitiEval.${evalOptions.ext || (evalOptions.async ? "mjs" : "js")}`), filename = evalOptions.filename || jitiResolve(ctx, id, { async: evalOptions.async }), ext = evalOptions.ext || extname$1(filename), cache$1 = evalOptions.cache || ctx.parentCache || {}, isTypescript = /\.[cm]?tsx?$/.test(ext), isESM = ".mjs" === ext || ".js" === ext && "module" === function(path$9) {
					for (; path$9 && "." !== path$9 && "/" !== path$9;) {
						path$9 = join$1(path$9, "..");
						try {
							const pkg = (0, external_node_fs_namespaceObject.readFileSync)(join$1(path$9, "package.json"), "utf8");
							try {
								return JSON.parse(pkg);
							} catch {}
							break;
						} catch {}
					}
				}(filename)?.type, isCommonJS = ".cjs" === ext, needsTranspile = evalOptions.forceTranspile ?? (!isCommonJS && !(isESM && evalOptions.async) && (isTypescript || isESM || ctx.isTransformRe.test(filename) || hasESMSyntax(source))), start = external_node_perf_hooks_namespaceObject.performance.now();
				if (needsTranspile) {
					source = transform$1(ctx, {
						filename,
						source,
						ts: isTypescript,
						async: evalOptions.async ?? !1,
						jsx: ctx.opts.jsx
					});
					const time = Math.round(1e3 * (external_node_perf_hooks_namespaceObject.performance.now() - start)) / 1e3;
					debug$5(ctx, "[transpile]", evalOptions.async ? "[esm]" : "[cjs]", filename, `(${time}ms)`);
				} else {
					if (debug$5(ctx, "[native]", evalOptions.async ? "[import]" : "[require]", filename), evalOptions.async) return Promise.resolve(nativeImportOrRequire(ctx, filename, evalOptions.async)).catch((error$1) => (debug$5(ctx, "Native import error:", error$1), debug$5(ctx, "[fallback]", filename), eval_evalModule(ctx, source, {
						...evalOptions,
						forceTranspile: !0
					})));
					try {
						return nativeImportOrRequire(ctx, filename, evalOptions.async);
					} catch (error$1) {
						debug$5(ctx, "Native require error:", error$1), debug$5(ctx, "[fallback]", filename), source = transform$1(ctx, {
							filename,
							source,
							ts: isTypescript,
							async: evalOptions.async ?? !1,
							jsx: ctx.opts.jsx
						});
					}
				}
				const mod = new external_node_module_namespaceObject.Module(filename);
				mod.filename = filename, ctx.parentModule && (mod.parent = ctx.parentModule, Array.isArray(ctx.parentModule.children) && !ctx.parentModule.children.includes(mod) && ctx.parentModule.children.push(mod));
				const _jiti = createJiti(filename, ctx.opts, {
					parentModule: mod,
					parentCache: cache$1,
					nativeImport: ctx.nativeImport,
					onError: ctx.onError,
					createRequire: ctx.createRequire
				}, !0);
				let compiled;
				mod.require = _jiti, mod.path = pathe_ff20891b_dirname(filename), mod.paths = external_node_module_namespaceObject.Module._nodeModulePaths(mod.path), cache$1[filename] = mod, ctx.opts.moduleCache && (ctx.nativeRequire.cache[filename] = mod);
				const wrapped = function(source$1, opts) {
					return `(${opts?.async ? "async " : ""}function (exports, require, module, __filename, __dirname, jitiImport, jitiESMResolve) { ${source$1}\n});`;
				}(source, { async: evalOptions.async });
				try {
					compiled = external_node_vm_default().runInThisContext(wrapped, {
						filename,
						lineOffset: 0,
						displayErrors: !1
					});
				} catch (error$1) {
					"SyntaxError" === error$1.name && evalOptions.async && ctx.nativeImport ? (debug$5(ctx, "[esm]", "[import]", "[fallback]", filename), compiled = function(code, nativeImport) {
						const uri = `data:text/javascript;base64,${Buffer.from(`export default ${code}`).toString("base64")}`;
						return (...args) => nativeImport(uri).then((mod$1) => mod$1.default(...args));
					}(wrapped, ctx.nativeImport)) : (ctx.opts.moduleCache && delete ctx.nativeRequire.cache[filename], ctx.onError(error$1));
				}
				let evalResult;
				try {
					evalResult = compiled(mod.exports, mod.require, mod, mod.filename, pathe_ff20891b_dirname(mod.filename), _jiti.import, _jiti.esmResolve);
				} catch (error$1) {
					ctx.opts.moduleCache && delete ctx.nativeRequire.cache[filename], ctx.onError(error$1);
				}
				function next() {
					if (mod.exports && mod.exports.__JITI_ERROR__) {
						const { filename: filename$1, line, column, code, message } = mod.exports.__JITI_ERROR__, err = new Error(`${code}: ${message} \n ${`${filename$1}:${line}:${column}`}`);
						Error.captureStackTrace(err, jitiRequire), ctx.onError(err);
					}
					mod.loaded = !0;
					return jitiInteropDefault(ctx, mod.exports);
				}
				return evalOptions.async ? Promise.resolve(evalResult).then(next) : next();
			}
			const isWindows$2 = "win32" === (0, external_node_os_namespaceObject.platform)();
			function createJiti(filename, userOptions = {}, parentContext, isNested = !1) {
				const opts = isNested ? userOptions : function(userOptions$1) {
					const jitiDefaults = {
						fsCache: _booleanEnv("JITI_FS_CACHE", _booleanEnv("JITI_CACHE", !0)),
						moduleCache: _booleanEnv("JITI_MODULE_CACHE", _booleanEnv("JITI_REQUIRE_CACHE", !0)),
						debug: _booleanEnv("JITI_DEBUG", !1),
						sourceMaps: _booleanEnv("JITI_SOURCE_MAPS", !1),
						interopDefault: _booleanEnv("JITI_INTEROP_DEFAULT", !0),
						extensions: _jsonEnv("JITI_EXTENSIONS", [
							".js",
							".mjs",
							".cjs",
							".ts",
							".tsx",
							".mts",
							".cts",
							".mtsx",
							".ctsx"
						]),
						alias: _jsonEnv("JITI_ALIAS", {}),
						nativeModules: _jsonEnv("JITI_NATIVE_MODULES", []),
						transformModules: _jsonEnv("JITI_TRANSFORM_MODULES", []),
						tryNative: _jsonEnv("JITI_TRY_NATIVE", "Bun" in globalThis),
						jsx: _booleanEnv("JITI_JSX", !1)
					};
					jitiDefaults.jsx && jitiDefaults.extensions.push(".jsx", ".tsx");
					const deprecatOverrides = {};
					return void 0 !== userOptions$1.cache && (deprecatOverrides.fsCache = userOptions$1.cache), void 0 !== userOptions$1.requireCache && (deprecatOverrides.moduleCache = userOptions$1.requireCache), {
						...jitiDefaults,
						...deprecatOverrides,
						...userOptions$1
					};
				}(userOptions), alias = opts.alias && Object.keys(opts.alias).length > 0 ? normalizeAliases(opts.alias || {}) : void 0, nativeModules = [
					"typescript",
					"jiti",
					...opts.nativeModules || []
				], isNativeRe = new RegExp(`node_modules/(${nativeModules.map((m$1) => escapeStringRegexp(m$1)).join("|")})/`), transformModules = [...opts.transformModules || []], isTransformRe = new RegExp(`node_modules/(${transformModules.map((m$1) => escapeStringRegexp(m$1)).join("|")})/`);
				filename || (filename = process.cwd()), !isNested && isDir(filename) && (filename = join$1(filename, "_index.js"));
				const url = pathToFileURL(filename), additionalExts = [...opts.extensions].filter((ext) => ".js" !== ext), nativeRequire = parentContext.createRequire(isWindows$2 ? filename.replace(/\//g, "\\") : filename), ctx = {
					filename,
					url,
					opts,
					alias,
					nativeModules,
					transformModules,
					isNativeRe,
					isTransformRe,
					additionalExts,
					nativeRequire,
					onError: parentContext.onError,
					parentModule: parentContext.parentModule,
					parentCache: parentContext.parentCache,
					nativeImport: parentContext.nativeImport,
					createRequire: parentContext.createRequire
				};
				isNested || debug$5(ctx, "[init]", ...[
					["version:", package_namespaceObject.rE],
					["module-cache:", opts.moduleCache],
					["fs-cache:", opts.fsCache],
					["interop-defaults:", opts.interopDefault]
				].flat()), isNested || prepareCacheDir(ctx);
				const jiti = Object.assign(function(id) {
					return jitiRequire(ctx, id, { async: !1 });
				}, {
					cache: opts.moduleCache ? nativeRequire.cache : Object.create(null),
					extensions: nativeRequire.extensions,
					main: nativeRequire.main,
					options: opts,
					resolve: Object.assign(function(path$9) {
						return jitiResolve(ctx, path$9, { async: !1 });
					}, { paths: nativeRequire.resolve.paths }),
					transform: (opts$1) => transform$1(ctx, opts$1),
					evalModule: (source, options) => eval_evalModule(ctx, source, options),
					async import(id, opts$1) {
						const mod = await jitiRequire(ctx, id, {
							...opts$1,
							async: !0
						});
						return opts$1?.default ? mod?.default ?? mod : mod;
					},
					esmResolve(id, opts$1) {
						"string" == typeof opts$1 && (opts$1 = { parentURL: opts$1 });
						const resolved = jitiResolve(ctx, id, {
							parentURL: url,
							...opts$1,
							async: !0
						});
						return !resolved || "string" != typeof resolved || resolved.startsWith("file://") ? resolved : pathToFileURL(resolved);
					}
				});
				return jiti;
			}
		})(), module.exports = __webpack_exports__.default;
	})();
} });

//#endregion
//#region node_modules/.pnpm/jiti@2.4.2/node_modules/jiti/dist/babel.cjs
var require_babel = __commonJS({ "node_modules/.pnpm/jiti@2.4.2/node_modules/jiti/dist/babel.cjs"(exports, module) {
	(() => {
		var __webpack_modules__ = {
			"./node_modules/.pnpm/@ampproject+remapping@2.3.0/node_modules/@ampproject/remapping/dist/remapping.umd.js": function(module$1, __unused_webpack_exports, __webpack_require__$1) {
				module$1.exports = function(traceMapping, genMapping) {
					"use strict";
					const SOURCELESS_MAPPING = SegmentObject("", -1, -1, "", null, !1), EMPTY_SOURCES = [];
					function SegmentObject(source, line, column, name, content, ignore) {
						return {
							source,
							line,
							column,
							name,
							content,
							ignore
						};
					}
					function Source(map, sources, source, content, ignore) {
						return {
							map,
							sources,
							source,
							content,
							ignore
						};
					}
					function MapSource(map, sources) {
						return Source(map, sources, "", null, !1);
					}
					function OriginalSource(source, content, ignore) {
						return Source(null, EMPTY_SOURCES, source, content, ignore);
					}
					function traceMappings(tree) {
						const gen = new genMapping.GenMapping({ file: tree.map.file }), { sources: rootSources, map } = tree, rootNames = map.names, rootMappings = traceMapping.decodedMappings(map);
						for (let i = 0; i < rootMappings.length; i++) {
							const segments = rootMappings[i];
							for (let j = 0; j < segments.length; j++) {
								const segment = segments[j], genCol = segment[0];
								let traced = SOURCELESS_MAPPING;
								if (1 !== segment.length && (traced = originalPositionFor(rootSources[segment[1]], segment[2], segment[3], 5 === segment.length ? rootNames[segment[4]] : ""), null == traced)) continue;
								const { column, line, name, content, source, ignore } = traced;
								genMapping.maybeAddSegment(gen, i, genCol, source, line, column, name), source && null != content && genMapping.setSourceContent(gen, source, content), ignore && genMapping.setIgnore(gen, source, !0);
							}
						}
						return gen;
					}
					function originalPositionFor(source, line, column, name) {
						if (!source.map) return SegmentObject(source.source, line, column, name, source.content, source.ignore);
						const segment = traceMapping.traceSegment(source.map, line, column);
						return null == segment ? null : 1 === segment.length ? SOURCELESS_MAPPING : originalPositionFor(source.sources[segment[1]], segment[2], segment[3], 5 === segment.length ? source.map.names[segment[4]] : name);
					}
					function asArray(value$1) {
						return Array.isArray(value$1) ? value$1 : [value$1];
					}
					function buildSourceMapTree(input, loader) {
						const maps = asArray(input).map((m$1) => new traceMapping.TraceMap(m$1, "")), map = maps.pop();
						for (let i = 0; i < maps.length; i++) if (maps[i].sources.length > 1) throw new Error(`Transformation map ${i} must have exactly one source file.\nDid you specify these with the most recent transformation maps first?`);
						let tree = build(map, loader, "", 0);
						for (let i = maps.length - 1; i >= 0; i--) tree = MapSource(maps[i], [tree]);
						return tree;
					}
					function build(map, loader, importer, importerDepth) {
						const { resolvedSources, sourcesContent, ignoreList } = map, depth$1 = importerDepth + 1;
						return MapSource(map, resolvedSources.map((sourceFile, i) => {
							const ctx = {
								importer,
								depth: depth$1,
								source: sourceFile || "",
								content: void 0,
								ignore: void 0
							}, sourceMap = loader(ctx.source, ctx), { source, content, ignore } = ctx;
							return sourceMap ? build(new traceMapping.TraceMap(sourceMap, source), loader, source, depth$1) : OriginalSource(source, void 0 !== content ? content : sourcesContent ? sourcesContent[i] : null, void 0 !== ignore ? ignore : !!ignoreList && ignoreList.includes(i));
						}));
					}
					class SourceMap {
						constructor(map, options) {
							const out = options.decodedMappings ? genMapping.toDecodedMap(map) : genMapping.toEncodedMap(map);
							this.version = out.version, this.file = out.file, this.mappings = out.mappings, this.names = out.names, this.ignoreList = out.ignoreList, this.sourceRoot = out.sourceRoot, this.sources = out.sources, options.excludeContent || (this.sourcesContent = out.sourcesContent);
						}
						toString() {
							return JSON.stringify(this);
						}
					}
					function remapping(input, loader, options) {
						const opts = "object" == typeof options ? options : {
							excludeContent: !!options,
							decodedMappings: !1
						}, tree = buildSourceMapTree(input, loader);
						return new SourceMap(traceMappings(tree), opts);
					}
					return remapping;
				}(__webpack_require__$1("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"), __webpack_require__$1("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"));
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive": (module$1) => {
				function webpackEmptyAsyncContext(req) {
					return Promise.resolve().then(() => {
						var e$1 = new Error("Cannot find module '" + req + "'");
						throw e$1.code = "MODULE_NOT_FOUND", e$1;
					});
				}
				webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive", module$1.exports = webpackEmptyAsyncContext;
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive": (module$1) => {
				function webpackEmptyContext(req) {
					var e$1 = new Error("Cannot find module '" + req + "'");
					throw e$1.code = "MODULE_NOT_FOUND", e$1;
				}
				webpackEmptyContext.keys = () => [], webpackEmptyContext.resolve = webpackEmptyContext, webpackEmptyContext.id = "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive", module$1.exports = webpackEmptyContext;
			},
			"./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-class-properties/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				exports$1.A = void 0;
				var _default = (0, __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api$1) => (api$1.assertVersion(7), {
					name: "syntax-class-properties",
					manipulateOptions(opts, parserOpts) {
						parserOpts.plugins.push("classProperties", "classPrivateProperties", "classPrivateMethods");
					}
				}));
				exports$1.A = _default;
			},
			"./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js": function(__unused_webpack_module, exports$1, __webpack_require__$1) {
				(function(exports$2, setArray, sourcemapCodec, traceMapping) {
					"use strict";
					const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, NO_NAME = -1;
					class GenMapping {
						constructor({ file, sourceRoot } = {}) {
							this._names = new setArray.SetArray(), this._sources = new setArray.SetArray(), this._sourcesContent = [], this._mappings = [], this.file = file, this.sourceRoot = sourceRoot, this._ignoreList = new setArray.SetArray();
						}
					}
					function cast(map) {
						return map;
					}
					function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
						return addSegmentInternal(!1, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
					}
					function addMapping(map, mapping) {
						return addMappingInternal(!1, map, mapping);
					}
					const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(!0, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), maybeAddMapping = (map, mapping) => addMappingInternal(!0, map, mapping);
					function setSourceContent(map, source, content) {
						const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);
						sourcesContent[setArray.put(sources, source)] = content;
					}
					function setIgnore(map, source, ignore = !0) {
						const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map), index = setArray.put(sources, source);
						index === sourcesContent.length && (sourcesContent[index] = null), ignore ? setArray.put(ignoreList, index) : setArray.remove(ignoreList, index);
					}
					function toDecodedMap(map) {
						const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map);
						return removeEmptyFinalLines(mappings), {
							version: 3,
							file: map.file || void 0,
							names: names.array,
							sourceRoot: map.sourceRoot || void 0,
							sources: sources.array,
							sourcesContent,
							mappings,
							ignoreList: ignoreList.array
						};
					}
					function toEncodedMap(map) {
						const decoded = toDecodedMap(map);
						return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
					}
					function fromMap(input) {
						const map = new traceMapping.TraceMap(input), gen = new GenMapping({
							file: map.file,
							sourceRoot: map.sourceRoot
						});
						return putAll(cast(gen)._names, map.names), putAll(cast(gen)._sources, map.sources), cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null), cast(gen)._mappings = traceMapping.decodedMappings(map), map.ignoreList && putAll(cast(gen)._ignoreList, map.ignoreList), gen;
					}
					function allMappings(map) {
						const out = [], { _mappings: mappings, _sources: sources, _names: names } = cast(map);
						for (let i = 0; i < mappings.length; i++) {
							const line = mappings[i];
							for (let j = 0; j < line.length; j++) {
								const seg = line[j], generated = {
									line: i + 1,
									column: seg[COLUMN]
								};
								let source, original, name;
								1 !== seg.length && (source = sources.array[seg[SOURCES_INDEX]], original = {
									line: seg[SOURCE_LINE] + 1,
									column: seg[SOURCE_COLUMN]
								}, 5 === seg.length && (name = names.array[seg[NAMES_INDEX]])), out.push({
									generated,
									source,
									original,
									name
								});
							}
						}
						return out;
					}
					function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
						const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map), line = getLine(mappings, genLine), index = getColumnIndex(line, genColumn);
						if (!source) {
							if (skipable && skipSourceless(line, index)) return;
							return insert(line, index, [genColumn]);
						}
						const sourcesIndex = setArray.put(sources, source), namesIndex = name ? setArray.put(names, name) : NO_NAME;
						if (sourcesIndex === sourcesContent.length && (sourcesContent[sourcesIndex] = null != content ? content : null), !skipable || !skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) return insert(line, index, name ? [
							genColumn,
							sourcesIndex,
							sourceLine,
							sourceColumn,
							namesIndex
						] : [
							genColumn,
							sourcesIndex,
							sourceLine,
							sourceColumn
						]);
					}
					function getLine(mappings, index) {
						for (let i = mappings.length; i <= index; i++) mappings[i] = [];
						return mappings[index];
					}
					function getColumnIndex(line, genColumn) {
						let index = line.length;
						for (let i = index - 1; i >= 0 && !(genColumn >= line[i][COLUMN]); index = i--);
						return index;
					}
					function insert(array, index, value$1) {
						for (let i = array.length; i > index; i--) array[i] = array[i - 1];
						array[index] = value$1;
					}
					function removeEmptyFinalLines(mappings) {
						const { length } = mappings;
						let len = length;
						for (let i = len - 1; i >= 0 && !(mappings[i].length > 0); len = i, i--);
						len < length && (mappings.length = len);
					}
					function putAll(setarr, array) {
						for (let i = 0; i < array.length; i++) setArray.put(setarr, array[i]);
					}
					function skipSourceless(line, index) {
						return 0 === index || 1 === line[index - 1].length;
					}
					function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
						if (0 === index) return !1;
						const prev = line[index - 1];
						return 1 !== prev.length && sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (5 === prev.length ? prev[NAMES_INDEX] : NO_NAME);
					}
					function addMappingInternal(skipable, map, mapping) {
						const { generated, source, original, name, content } = mapping;
						return source ? addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content) : addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
					}
					exports$2.GenMapping = GenMapping, exports$2.addMapping = addMapping, exports$2.addSegment = addSegment, exports$2.allMappings = allMappings, exports$2.fromMap = fromMap, exports$2.maybeAddMapping = maybeAddMapping, exports$2.maybeAddSegment = maybeAddSegment, exports$2.setIgnore = setIgnore, exports$2.setSourceContent = setSourceContent, exports$2.toDecodedMap = toDecodedMap, exports$2.toEncodedMap = toEncodedMap, Object.defineProperty(exports$2, "__esModule", { value: !0 });
				})(exports$1, __webpack_require__$1("./node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js"), __webpack_require__$1("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__$1("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"));
			},
			"./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js": function(module$1) {
				module$1.exports = function() {
					"use strict";
					const schemeRegex = /^[\w+.-]+:\/\//, urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/, fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
					function isAbsoluteUrl(input) {
						return schemeRegex.test(input);
					}
					function isSchemeRelativeUrl(input) {
						return input.startsWith("//");
					}
					function isAbsolutePath(input) {
						return input.startsWith("/");
					}
					function isFileUrl(input) {
						return input.startsWith("file:");
					}
					function isRelative(input) {
						return /^[.?#]/.test(input);
					}
					function parseAbsoluteUrl(input) {
						const match = urlRegex.exec(input);
						return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
					}
					function parseFileUrl(input) {
						const match = fileRegex.exec(input), path$9 = match[2];
						return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path$9) ? path$9 : "/" + path$9, match[3] || "", match[4] || "");
					}
					function makeUrl(scheme, user, host, port, path$9, query, hash) {
						return {
							scheme,
							user,
							host,
							port,
							path: path$9,
							query,
							hash,
							type: 7
						};
					}
					function parseUrl(input) {
						if (isSchemeRelativeUrl(input)) {
							const url$1 = parseAbsoluteUrl("http:" + input);
							return url$1.scheme = "", url$1.type = 6, url$1;
						}
						if (isAbsolutePath(input)) {
							const url$1 = parseAbsoluteUrl("http://foo.com" + input);
							return url$1.scheme = "", url$1.host = "", url$1.type = 5, url$1;
						}
						if (isFileUrl(input)) return parseFileUrl(input);
						if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);
						const url = parseAbsoluteUrl("http://foo.com/" + input);
						return url.scheme = "", url.host = "", url.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1, url;
					}
					function stripPathFilename(path$9) {
						if (path$9.endsWith("/..")) return path$9;
						const index = path$9.lastIndexOf("/");
						return path$9.slice(0, index + 1);
					}
					function mergePaths(url, base) {
						normalizePath$2(base, base.type), "/" === url.path ? url.path = base.path : url.path = stripPathFilename(base.path) + url.path;
					}
					function normalizePath$2(url, type$1) {
						const rel = type$1 <= 4, pieces = url.path.split("/");
						let pointer = 1, positive = 0, addTrailingSlash = !1;
						for (let i = 1; i < pieces.length; i++) {
							const piece = pieces[i];
							piece ? (addTrailingSlash = !1, "." !== piece && (".." !== piece ? (pieces[pointer++] = piece, positive++) : positive ? (addTrailingSlash = !0, positive--, pointer--) : rel && (pieces[pointer++] = piece))) : addTrailingSlash = !0;
						}
						let path$9 = "";
						for (let i = 1; i < pointer; i++) path$9 += "/" + pieces[i];
						(!path$9 || addTrailingSlash && !path$9.endsWith("/..")) && (path$9 += "/"), url.path = path$9;
					}
					function resolve$1(input, base) {
						if (!input && !base) return "";
						const url = parseUrl(input);
						let inputType = url.type;
						if (base && 7 !== inputType) {
							const baseUrl = parseUrl(base), baseType = baseUrl.type;
							switch (inputType) {
								case 1: url.hash = baseUrl.hash;
								case 2: url.query = baseUrl.query;
								case 3:
								case 4: mergePaths(url, baseUrl);
								case 5: url.user = baseUrl.user, url.host = baseUrl.host, url.port = baseUrl.port;
								case 6: url.scheme = baseUrl.scheme;
							}
							baseType > inputType && (inputType = baseType);
						}
						normalizePath$2(url, inputType);
						const queryHash = url.query + url.hash;
						switch (inputType) {
							case 2:
							case 3: return queryHash;
							case 4: {
								const path$9 = url.path.slice(1);
								return path$9 ? isRelative(base || input) && !isRelative(path$9) ? "./" + path$9 + queryHash : path$9 + queryHash : queryHash || ".";
							}
							case 5: return url.path + queryHash;
							default: return url.scheme + "//" + url.user + url.host + url.port + url.path + queryHash;
						}
					}
					return resolve$1;
				}();
			},
			"./node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js": function(__unused_webpack_module, exports$1) {
				(function(exports$2) {
					"use strict";
					class SetArray {
						constructor() {
							this._indexes = { __proto__: null }, this.array = [];
						}
					}
					function cast(set) {
						return set;
					}
					function get$1(setarr, key) {
						return cast(setarr)._indexes[key];
					}
					function put(setarr, key) {
						const index = get$1(setarr, key);
						if (void 0 !== index) return index;
						const { array, _indexes: indexes } = cast(setarr), length = array.push(key);
						return indexes[key] = length - 1;
					}
					function pop(setarr) {
						const { array, _indexes: indexes } = cast(setarr);
						0 !== array.length && (indexes[array.pop()] = void 0);
					}
					function remove(setarr, key) {
						const index = get$1(setarr, key);
						if (void 0 === index) return;
						const { array, _indexes: indexes } = cast(setarr);
						for (let i = index + 1; i < array.length; i++) {
							const k$2 = array[i];
							array[i - 1] = k$2, indexes[k$2]--;
						}
						indexes[key] = void 0, array.pop();
					}
					exports$2.SetArray = SetArray, exports$2.get = get$1, exports$2.pop = pop, exports$2.put = put, exports$2.remove = remove, Object.defineProperty(exports$2, "__esModule", { value: !0 });
				})(exports$1);
			},
			"./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js": function(__unused_webpack_module, exports$1) {
				(function(exports$2) {
					"use strict";
					const comma = ",".charCodeAt(0), semicolon = ";".charCodeAt(0), chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);
					for (let i = 0; i < chars.length; i++) {
						const c = chars.charCodeAt(i);
						intToChar[i] = c, charToInt[c] = i;
					}
					function decodeInteger(reader, relative$1) {
						let value$1 = 0, shift = 0, integer = 0;
						do {
							const c = reader.next();
							integer = charToInt[c], value$1 |= (31 & integer) << shift, shift += 5;
						} while (32 & integer);
						const shouldNegate = 1 & value$1;
						return value$1 >>>= 1, shouldNegate && (value$1 = -2147483648 | -value$1), relative$1 + value$1;
					}
					function encodeInteger(builder, num, relative$1) {
						let delta = num - relative$1;
						delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
						do {
							let clamped = 31 & delta;
							delta >>>= 5, delta > 0 && (clamped |= 32), builder.write(intToChar[clamped]);
						} while (delta > 0);
						return num;
					}
					function hasMoreVlq(reader, max) {
						return !(reader.pos >= max) && reader.peek() !== comma;
					}
					const bufLength = 16384, td = "undefined" != typeof TextDecoder ? new TextDecoder() : "undefined" != typeof Buffer ? { decode: (buf) => Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength).toString() } : { decode(buf) {
						let out = "";
						for (let i = 0; i < buf.length; i++) out += String.fromCharCode(buf[i]);
						return out;
					} };
					class StringWriter {
						constructor() {
							this.pos = 0, this.out = "", this.buffer = new Uint8Array(bufLength);
						}
						write(v$1) {
							const { buffer } = this;
							buffer[this.pos++] = v$1, this.pos === bufLength && (this.out += td.decode(buffer), this.pos = 0);
						}
						flush() {
							const { buffer, out, pos } = this;
							return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;
						}
					}
					class StringReader {
						constructor(buffer) {
							this.pos = 0, this.buffer = buffer;
						}
						next() {
							return this.buffer.charCodeAt(this.pos++);
						}
						peek() {
							return this.buffer.charCodeAt(this.pos);
						}
						indexOf(char) {
							const { buffer, pos } = this, idx = buffer.indexOf(char, pos);
							return -1 === idx ? buffer.length : idx;
						}
					}
					const EMPTY = [];
					function decodeOriginalScopes(input) {
						const { length } = input, reader = new StringReader(input), scopes = [], stack = [];
						let line = 0;
						for (; reader.pos < length; reader.pos++) {
							line = decodeInteger(reader, line);
							const column = decodeInteger(reader, 0);
							if (!hasMoreVlq(reader, length)) {
								const last = stack.pop();
								last[2] = line, last[3] = column;
								continue;
							}
							const kind = decodeInteger(reader, 0), scope = 1 & decodeInteger(reader, 0) ? [
								line,
								column,
								0,
								0,
								kind,
								decodeInteger(reader, 0)
							] : [
								line,
								column,
								0,
								0,
								kind
							];
							let vars = EMPTY;
							if (hasMoreVlq(reader, length)) {
								vars = [];
								do {
									const varsIndex = decodeInteger(reader, 0);
									vars.push(varsIndex);
								} while (hasMoreVlq(reader, length));
							}
							scope.vars = vars, scopes.push(scope), stack.push(scope);
						}
						return scopes;
					}
					function encodeOriginalScopes(scopes) {
						const writer = new StringWriter();
						for (let i = 0; i < scopes.length;) i = _encodeOriginalScopes(scopes, i, writer, [0]);
						return writer.flush();
					}
					function _encodeOriginalScopes(scopes, index, writer, state) {
						const scope = scopes[index], { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, 4: kind, vars } = scope;
						index > 0 && writer.write(comma), state[0] = encodeInteger(writer, startLine, state[0]), encodeInteger(writer, startColumn, 0), encodeInteger(writer, kind, 0), encodeInteger(writer, 6 === scope.length ? 1 : 0, 0), 6 === scope.length && encodeInteger(writer, scope[5], 0);
						for (const v$1 of vars) encodeInteger(writer, v$1, 0);
						for (index++; index < scopes.length;) {
							const next = scopes[index], { 0: l$1, 1: c } = next;
							if (l$1 > endLine || l$1 === endLine && c >= endColumn) break;
							index = _encodeOriginalScopes(scopes, index, writer, state);
						}
						return writer.write(comma), state[0] = encodeInteger(writer, endLine, state[0]), encodeInteger(writer, endColumn, 0), index;
					}
					function decodeGeneratedRanges(input) {
						const { length } = input, reader = new StringReader(input), ranges = [], stack = [];
						let genLine = 0, definitionSourcesIndex = 0, definitionScopeIndex = 0, callsiteSourcesIndex = 0, callsiteLine = 0, callsiteColumn = 0, bindingLine = 0, bindingColumn = 0;
						do {
							const semi = reader.indexOf(";");
							let genColumn = 0;
							for (; reader.pos < semi; reader.pos++) {
								if (genColumn = decodeInteger(reader, genColumn), !hasMoreVlq(reader, semi)) {
									const last = stack.pop();
									last[2] = genLine, last[3] = genColumn;
									continue;
								}
								const fields = decodeInteger(reader, 0), hasCallsite = 2 & fields, hasScope = 4 & fields;
								let range, callsite = null, bindings = EMPTY;
								if (1 & fields) {
									const defSourcesIndex = decodeInteger(reader, definitionSourcesIndex);
									definitionScopeIndex = decodeInteger(reader, definitionSourcesIndex === defSourcesIndex ? definitionScopeIndex : 0), definitionSourcesIndex = defSourcesIndex, range = [
										genLine,
										genColumn,
										0,
										0,
										defSourcesIndex,
										definitionScopeIndex
									];
								} else range = [
									genLine,
									genColumn,
									0,
									0
								];
								if (range.isScope = !!hasScope, hasCallsite) {
									const prevCsi = callsiteSourcesIndex, prevLine = callsiteLine;
									callsiteSourcesIndex = decodeInteger(reader, callsiteSourcesIndex);
									const sameSource = prevCsi === callsiteSourcesIndex;
									callsiteLine = decodeInteger(reader, sameSource ? callsiteLine : 0), callsiteColumn = decodeInteger(reader, sameSource && prevLine === callsiteLine ? callsiteColumn : 0), callsite = [
										callsiteSourcesIndex,
										callsiteLine,
										callsiteColumn
									];
								}
								if (range.callsite = callsite, hasMoreVlq(reader, semi)) {
									bindings = [];
									do {
										bindingLine = genLine, bindingColumn = genColumn;
										const expressionsCount = decodeInteger(reader, 0);
										let expressionRanges;
										if (expressionsCount < -1) {
											expressionRanges = [[decodeInteger(reader, 0)]];
											for (let i = -1; i > expressionsCount; i--) {
												const prevBl = bindingLine;
												bindingLine = decodeInteger(reader, bindingLine), bindingColumn = decodeInteger(reader, bindingLine === prevBl ? bindingColumn : 0);
												const expression = decodeInteger(reader, 0);
												expressionRanges.push([
													expression,
													bindingLine,
													bindingColumn
												]);
											}
										} else expressionRanges = [[expressionsCount]];
										bindings.push(expressionRanges);
									} while (hasMoreVlq(reader, semi));
								}
								range.bindings = bindings, ranges.push(range), stack.push(range);
							}
							genLine++, reader.pos = semi + 1;
						} while (reader.pos < length);
						return ranges;
					}
					function encodeGeneratedRanges(ranges) {
						if (0 === ranges.length) return "";
						const writer = new StringWriter();
						for (let i = 0; i < ranges.length;) i = _encodeGeneratedRanges(ranges, i, writer, [
							0,
							0,
							0,
							0,
							0,
							0,
							0
						]);
						return writer.flush();
					}
					function _encodeGeneratedRanges(ranges, index, writer, state) {
						const range = ranges[index], { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, isScope, callsite, bindings } = range;
						if (state[0] < startLine ? (catchupLine(writer, state[0], startLine), state[0] = startLine, state[1] = 0) : index > 0 && writer.write(comma), state[1] = encodeInteger(writer, range[1], state[1]), encodeInteger(writer, (6 === range.length ? 1 : 0) | (callsite ? 2 : 0) | (isScope ? 4 : 0), 0), 6 === range.length) {
							const { 4: sourcesIndex, 5: scopesIndex } = range;
							sourcesIndex !== state[2] && (state[3] = 0), state[2] = encodeInteger(writer, sourcesIndex, state[2]), state[3] = encodeInteger(writer, scopesIndex, state[3]);
						}
						if (callsite) {
							const { 0: sourcesIndex, 1: callLine, 2: callColumn } = range.callsite;
							sourcesIndex !== state[4] ? (state[5] = 0, state[6] = 0) : callLine !== state[5] && (state[6] = 0), state[4] = encodeInteger(writer, sourcesIndex, state[4]), state[5] = encodeInteger(writer, callLine, state[5]), state[6] = encodeInteger(writer, callColumn, state[6]);
						}
						if (bindings) for (const binding of bindings) {
							binding.length > 1 && encodeInteger(writer, -binding.length, 0), encodeInteger(writer, binding[0][0], 0);
							let bindingStartLine = startLine, bindingStartColumn = startColumn;
							for (let i = 1; i < binding.length; i++) {
								const expRange = binding[i];
								bindingStartLine = encodeInteger(writer, expRange[1], bindingStartLine), bindingStartColumn = encodeInteger(writer, expRange[2], bindingStartColumn), encodeInteger(writer, expRange[0], 0);
							}
						}
						for (index++; index < ranges.length;) {
							const next = ranges[index], { 0: l$1, 1: c } = next;
							if (l$1 > endLine || l$1 === endLine && c >= endColumn) break;
							index = _encodeGeneratedRanges(ranges, index, writer, state);
						}
						return state[0] < endLine ? (catchupLine(writer, state[0], endLine), state[0] = endLine, state[1] = 0) : writer.write(comma), state[1] = encodeInteger(writer, endColumn, state[1]), index;
					}
					function catchupLine(writer, lastLine, line) {
						do
							writer.write(semicolon);
						while (++lastLine < line);
					}
					function decode$2(mappings) {
						const { length } = mappings, reader = new StringReader(mappings), decoded = [];
						let genColumn = 0, sourcesIndex = 0, sourceLine = 0, sourceColumn = 0, namesIndex = 0;
						do {
							const semi = reader.indexOf(";"), line = [];
							let sorted = !0, lastCol = 0;
							for (genColumn = 0; reader.pos < semi;) {
								let seg;
								genColumn = decodeInteger(reader, genColumn), genColumn < lastCol && (sorted = !1), lastCol = genColumn, hasMoreVlq(reader, semi) ? (sourcesIndex = decodeInteger(reader, sourcesIndex), sourceLine = decodeInteger(reader, sourceLine), sourceColumn = decodeInteger(reader, sourceColumn), hasMoreVlq(reader, semi) ? (namesIndex = decodeInteger(reader, namesIndex), seg = [
									genColumn,
									sourcesIndex,
									sourceLine,
									sourceColumn,
									namesIndex
								]) : seg = [
									genColumn,
									sourcesIndex,
									sourceLine,
									sourceColumn
								]) : seg = [genColumn], line.push(seg), reader.pos++;
							}
							sorted || sort(line), decoded.push(line), reader.pos = semi + 1;
						} while (reader.pos <= length);
						return decoded;
					}
					function sort(line) {
						line.sort(sortComparator);
					}
					function sortComparator(a, b$2) {
						return a[0] - b$2[0];
					}
					function encode$1(decoded) {
						const writer = new StringWriter();
						let sourcesIndex = 0, sourceLine = 0, sourceColumn = 0, namesIndex = 0;
						for (let i = 0; i < decoded.length; i++) {
							const line = decoded[i];
							if (i > 0 && writer.write(semicolon), 0 === line.length) continue;
							let genColumn = 0;
							for (let j = 0; j < line.length; j++) {
								const segment = line[j];
								j > 0 && writer.write(comma), genColumn = encodeInteger(writer, segment[0], genColumn), 1 !== segment.length && (sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex), sourceLine = encodeInteger(writer, segment[2], sourceLine), sourceColumn = encodeInteger(writer, segment[3], sourceColumn), 4 !== segment.length && (namesIndex = encodeInteger(writer, segment[4], namesIndex)));
							}
						}
						return writer.flush();
					}
					exports$2.decode = decode$2, exports$2.decodeGeneratedRanges = decodeGeneratedRanges, exports$2.decodeOriginalScopes = decodeOriginalScopes, exports$2.encode = encode$1, exports$2.encodeGeneratedRanges = encodeGeneratedRanges, exports$2.encodeOriginalScopes = encodeOriginalScopes, Object.defineProperty(exports$2, "__esModule", { value: !0 });
				})(exports$1);
			},
			"./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js": function(__unused_webpack_module, exports$1, __webpack_require__$1) {
				(function(exports$2, sourcemapCodec, resolveUri) {
					"use strict";
					function resolve$1(input, base) {
						return base && !base.endsWith("/") && (base += "/"), resolveUri(input, base);
					}
					function stripFilename(path$9) {
						if (!path$9) return "";
						const index = path$9.lastIndexOf("/");
						return path$9.slice(0, index + 1);
					}
					const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, REV_GENERATED_LINE = 1, REV_GENERATED_COLUMN = 2;
					function maybeSort(mappings, owned) {
						const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
						if (unsortedIndex === mappings.length) return mappings;
						owned || (mappings = mappings.slice());
						for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) mappings[i] = sortSegments(mappings[i], owned);
						return mappings;
					}
					function nextUnsortedSegmentLine(mappings, start) {
						for (let i = start; i < mappings.length; i++) if (!isSorted(mappings[i])) return i;
						return mappings.length;
					}
					function isSorted(line) {
						for (let j = 1; j < line.length; j++) if (line[j][COLUMN] < line[j - 1][COLUMN]) return !1;
						return !0;
					}
					function sortSegments(line, owned) {
						return owned || (line = line.slice()), line.sort(sortComparator);
					}
					function sortComparator(a, b$2) {
						return a[COLUMN] - b$2[COLUMN];
					}
					let found = !1;
					function binarySearch(haystack, needle, low, high) {
						for (; low <= high;) {
							const mid = low + (high - low >> 1), cmp = haystack[mid][COLUMN] - needle;
							if (0 === cmp) return found = !0, mid;
							cmp < 0 ? low = mid + 1 : high = mid - 1;
						}
						return found = !1, low - 1;
					}
					function upperBound(haystack, needle, index) {
						for (let i = index + 1; i < haystack.length && haystack[i][COLUMN] === needle; index = i++);
						return index;
					}
					function lowerBound(haystack, needle, index) {
						for (let i = index - 1; i >= 0 && haystack[i][COLUMN] === needle; index = i--);
						return index;
					}
					function memoizedState() {
						return {
							lastKey: -1,
							lastNeedle: -1,
							lastIndex: -1
						};
					}
					function memoizedBinarySearch(haystack, needle, state, key) {
						const { lastKey, lastNeedle, lastIndex } = state;
						let low = 0, high = haystack.length - 1;
						if (key === lastKey) {
							if (needle === lastNeedle) return found = -1 !== lastIndex && haystack[lastIndex][COLUMN] === needle, lastIndex;
							needle >= lastNeedle ? low = -1 === lastIndex ? 0 : lastIndex : high = lastIndex;
						}
						return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);
					}
					function buildBySources(decoded, memos) {
						const sources = memos.map(buildNullArray);
						for (let i = 0; i < decoded.length; i++) {
							const line = decoded[i];
							for (let j = 0; j < line.length; j++) {
								const seg = line[j];
								if (1 === seg.length) continue;
								const sourceIndex$1 = seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN], originalSource = sources[sourceIndex$1], originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []), memo = memos[sourceIndex$1];
								let index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
								memo.lastIndex = ++index, insert(originalLine, index, [
									sourceColumn,
									i,
									seg[COLUMN]
								]);
							}
						}
						return sources;
					}
					function insert(array, index, value$1) {
						for (let i = array.length; i > index; i--) array[i] = array[i - 1];
						array[index] = value$1;
					}
					function buildNullArray() {
						return { __proto__: null };
					}
					const AnyMap = function(map, mapUrl) {
						const parsed = parse$4(map);
						if (!("sections" in parsed)) return new TraceMap(parsed, mapUrl);
						const mappings = [], sources = [], sourcesContent = [], names = [], ignoreList = [];
						return recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, ignoreList, 0, 0, Infinity, Infinity), presortedDecodedMap({
							version: 3,
							file: parsed.file,
							names,
							sources,
							sourcesContent,
							mappings,
							ignoreList
						});
					};
					function parse$4(map) {
						return "string" == typeof map ? JSON.parse(map) : map;
					}
					function recurse(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
						const { sections } = input;
						for (let i = 0; i < sections.length; i++) {
							const { map, offset } = sections[i];
							let sl = stopLine, sc = stopColumn;
							if (i + 1 < sections.length) {
								const nextOffset = sections[i + 1].offset;
								sl = Math.min(stopLine, lineOffset + nextOffset.line), sl === stopLine ? sc = Math.min(stopColumn, columnOffset + nextOffset.column) : sl < stopLine && (sc = columnOffset + nextOffset.column);
							}
							addSection(map, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
						}
					}
					function addSection(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
						const parsed = parse$4(input);
						if ("sections" in parsed) return recurse(...arguments);
						const map = new TraceMap(parsed, mapUrl), sourcesOffset = sources.length, namesOffset = names.length, decoded = decodedMappings(map), { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
						if (append(sources, resolvedSources), append(names, map.names), contents) append(sourcesContent, contents);
						else for (let i = 0; i < resolvedSources.length; i++) sourcesContent.push(null);
						if (ignores) for (let i = 0; i < ignores.length; i++) ignoreList.push(ignores[i] + sourcesOffset);
						for (let i = 0; i < decoded.length; i++) {
							const lineI = lineOffset + i;
							if (lineI > stopLine) return;
							const out = getLine(mappings, lineI), cOffset = 0 === i ? columnOffset : 0, line = decoded[i];
							for (let j = 0; j < line.length; j++) {
								const seg = line[j], column = cOffset + seg[COLUMN];
								if (lineI === stopLine && column >= stopColumn) return;
								if (1 === seg.length) {
									out.push([column]);
									continue;
								}
								const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN];
								out.push(4 === seg.length ? [
									column,
									sourcesIndex,
									sourceLine,
									sourceColumn
								] : [
									column,
									sourcesIndex,
									sourceLine,
									sourceColumn,
									namesOffset + seg[NAMES_INDEX]
								]);
							}
						}
					}
					function append(arr, other) {
						for (let i = 0; i < other.length; i++) arr.push(other[i]);
					}
					function getLine(arr, index) {
						for (let i = arr.length; i <= index; i++) arr[i] = [];
						return arr[index];
					}
					const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)", COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;
					class TraceMap {
						constructor(map, mapUrl) {
							const isString = "string" == typeof map;
							if (!isString && map._decodedMemo) return map;
							const parsed = isString ? JSON.parse(map) : map, { version: version$1, file, names, sourceRoot, sources, sourcesContent } = parsed;
							this.version = version$1, this.file = file, this.names = names || [], this.sourceRoot = sourceRoot, this.sources = sources, this.sourcesContent = sourcesContent, this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || void 0;
							const from = resolve$1(sourceRoot || "", stripFilename(mapUrl));
							this.resolvedSources = sources.map((s) => resolve$1(s || "", from));
							const { mappings } = parsed;
							"string" == typeof mappings ? (this._encoded = mappings, this._decoded = void 0) : (this._encoded = void 0, this._decoded = maybeSort(mappings, isString)), this._decodedMemo = memoizedState(), this._bySources = void 0, this._bySourceMemos = void 0;
						}
					}
					function cast(map) {
						return map;
					}
					function encodedMappings(map) {
						var _a$1, _b;
						return null !== (_a$1 = (_b = cast(map))._encoded) && void 0 !== _a$1 ? _a$1 : _b._encoded = sourcemapCodec.encode(cast(map)._decoded);
					}
					function decodedMappings(map) {
						var _a$1;
						return (_a$1 = cast(map))._decoded || (_a$1._decoded = sourcemapCodec.decode(cast(map)._encoded));
					}
					function traceSegment(map, line, column) {
						const decoded = decodedMappings(map);
						if (line >= decoded.length) return null;
						const segments = decoded[line], index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, GREATEST_LOWER_BOUND);
						return -1 === index ? null : segments[index];
					}
					function originalPositionFor(map, needle) {
						let { line, column, bias } = needle;
						if (line--, line < 0) throw new Error(LINE_GTR_ZERO);
						if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
						const decoded = decodedMappings(map);
						if (line >= decoded.length) return OMapping(null, null, null, null);
						const segments = decoded[line], index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
						if (-1 === index) return OMapping(null, null, null, null);
						const segment = segments[index];
						if (1 === segment.length) return OMapping(null, null, null, null);
						const { names, resolvedSources } = map;
						return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], 5 === segment.length ? names[segment[NAMES_INDEX]] : null);
					}
					function generatedPositionFor(map, needle) {
						const { source, line, column, bias } = needle;
						return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, !1);
					}
					function allGeneratedPositionsFor(map, needle) {
						const { source, line, column, bias } = needle;
						return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, !0);
					}
					function eachMapping(map, cb) {
						const decoded = decodedMappings(map), { names, resolvedSources } = map;
						for (let i = 0; i < decoded.length; i++) {
							const line = decoded[i];
							for (let j = 0; j < line.length; j++) {
								const seg = line[j], generatedLine = i + 1, generatedColumn = seg[0];
								let source = null, originalLine = null, originalColumn = null, name = null;
								1 !== seg.length && (source = resolvedSources[seg[1]], originalLine = seg[2] + 1, originalColumn = seg[3]), 5 === seg.length && (name = names[seg[4]]), cb({
									generatedLine,
									generatedColumn,
									source,
									originalLine,
									originalColumn,
									name
								});
							}
						}
					}
					function sourceIndex(map, source) {
						const { sources, resolvedSources } = map;
						let index = sources.indexOf(source);
						return -1 === index && (index = resolvedSources.indexOf(source)), index;
					}
					function sourceContentFor(map, source) {
						const { sourcesContent } = map;
						if (null == sourcesContent) return null;
						const index = sourceIndex(map, source);
						return -1 === index ? null : sourcesContent[index];
					}
					function isIgnored(map, source) {
						const { ignoreList } = map;
						if (null == ignoreList) return !1;
						const index = sourceIndex(map, source);
						return -1 !== index && ignoreList.includes(index);
					}
					function presortedDecodedMap(map, mapUrl) {
						const tracer = new TraceMap(clone(map, []), mapUrl);
						return cast(tracer)._decoded = map.mappings, tracer;
					}
					function decodedMap(map) {
						return clone(map, decodedMappings(map));
					}
					function encodedMap(map) {
						return clone(map, encodedMappings(map));
					}
					function clone(map, mappings) {
						return {
							version: map.version,
							file: map.file,
							names: map.names,
							sourceRoot: map.sourceRoot,
							sources: map.sources,
							sourcesContent: map.sourcesContent,
							mappings,
							ignoreList: map.ignoreList || map.x_google_ignoreList
						};
					}
					function OMapping(source, line, column, name) {
						return {
							source,
							line,
							column,
							name
						};
					}
					function GMapping(line, column) {
						return {
							line,
							column
						};
					}
					function traceSegmentInternal(segments, memo, line, column, bias) {
						let index = memoizedBinarySearch(segments, column, memo, line);
						return found ? index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index) : bias === LEAST_UPPER_BOUND && index++, -1 === index || index === segments.length ? -1 : index;
					}
					function sliceGeneratedPositions(segments, memo, line, column, bias) {
						let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
						if (found || bias !== LEAST_UPPER_BOUND || min++, -1 === min || min === segments.length) return [];
						const matchedColumn = found ? column : segments[min][COLUMN];
						found || (min = lowerBound(segments, matchedColumn, min));
						const max = upperBound(segments, matchedColumn, min), result = [];
						for (; min <= max; min++) {
							const segment = segments[min];
							result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
						}
						return result;
					}
					function generatedPosition(map, source, line, column, bias, all) {
						var _a$1;
						if (--line < 0) throw new Error(LINE_GTR_ZERO);
						if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
						const { sources, resolvedSources } = map;
						let sourceIndex$1 = sources.indexOf(source);
						if (-1 === sourceIndex$1 && (sourceIndex$1 = resolvedSources.indexOf(source)), -1 === sourceIndex$1) return all ? [] : GMapping(null, null);
						const segments = ((_a$1 = cast(map))._bySources || (_a$1._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState))))[sourceIndex$1][line];
						if (null == segments) return all ? [] : GMapping(null, null);
						const memo = cast(map)._bySourceMemos[sourceIndex$1];
						if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);
						const index = traceSegmentInternal(segments, memo, line, column, bias);
						if (-1 === index) return GMapping(null, null);
						const segment = segments[index];
						return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
					}
					exports$2.AnyMap = AnyMap, exports$2.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND, exports$2.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND, exports$2.TraceMap = TraceMap, exports$2.allGeneratedPositionsFor = allGeneratedPositionsFor, exports$2.decodedMap = decodedMap, exports$2.decodedMappings = decodedMappings, exports$2.eachMapping = eachMapping, exports$2.encodedMap = encodedMap, exports$2.encodedMappings = encodedMappings, exports$2.generatedPositionFor = generatedPositionFor, exports$2.isIgnored = isIgnored, exports$2.originalPositionFor = originalPositionFor, exports$2.presortedDecodedMap = presortedDecodedMap, exports$2.sourceContentFor = sourceContentFor, exports$2.traceSegment = traceSegment;
				})(exports$1, __webpack_require__$1("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__$1("./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"));
			},
			"./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js": (module$1, __unused_webpack_exports, __webpack_require__$1) => {
				"use strict";
				var _path = __webpack_require__$1("path");
				function isInType(path$9) {
					switch (path$9.parent.type) {
						case "TSTypeReference":
						case "TSQualifiedName":
						case "TSExpressionWithTypeArguments":
						case "TSTypeQuery": return !0;
						default: return !1;
					}
				}
				module$1.exports = function(_ref) {
					var types$7 = _ref.types, decoratorExpressionForConstructor = function(decorator, param) {
						return function(className) {
							var resultantDecorator = types$7.callExpression(decorator.expression, [
								types$7.Identifier(className),
								types$7.Identifier("undefined"),
								types$7.NumericLiteral(param.key)
							]), resultantDecoratorWithFallback = types$7.logicalExpression("||", resultantDecorator, types$7.Identifier(className)), assignment = types$7.assignmentExpression("=", types$7.Identifier(className), resultantDecoratorWithFallback);
							return types$7.expressionStatement(assignment);
						};
					}, decoratorExpressionForMethod = function(decorator, param) {
						return function(className, functionName) {
							var resultantDecorator = types$7.callExpression(decorator.expression, [
								types$7.Identifier("".concat(className, ".prototype")),
								types$7.StringLiteral(functionName),
								types$7.NumericLiteral(param.key)
							]);
							return types$7.expressionStatement(resultantDecorator);
						};
					};
					return { visitor: {
						Program: function(path$9, state) {
							var extension = (0, _path.extname)(state.file.opts.filename);
							".ts" !== extension && ".tsx" !== extension || function() {
								var decorators = Object.create(null);
								path$9.node.body.filter(function(it) {
									var type$1 = it.type, declaration = it.declaration;
									switch (type$1) {
										case "ClassDeclaration": return !0;
										case "ExportNamedDeclaration":
										case "ExportDefaultDeclaration": return declaration && "ClassDeclaration" === declaration.type;
										default: return !1;
									}
								}).map(function(it) {
									return "ClassDeclaration" === it.type ? it : it.declaration;
								}).forEach(function(clazz) {
									clazz.body.body.forEach(function(body) {
										(body.params || []).forEach(function(param) {
											(param.decorators || []).forEach(function(decorator) {
												decorator.expression.callee ? decorators[decorator.expression.callee.name] = decorator : decorators[decorator.expression.name] = decorator;
											});
										});
									});
								});
								var _iteratorNormalCompletion = !0, _didIteratorError = !1, _iteratorError = void 0;
								try {
									for (var _step, _iterator = path$9.get("body")[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
										var stmt = _step.value;
										if ("ImportDeclaration" === stmt.node.type) {
											if (0 === stmt.node.specifiers.length) continue;
											var _iteratorNormalCompletion2 = !0, _didIteratorError2 = !1, _iteratorError2 = void 0;
											try {
												for (var _step2, _loop = function() {
													var specifier = _step2.value, binding = stmt.scope.getBinding(specifier.local.name);
													binding.referencePaths.length ? binding.referencePaths.reduce(function(prev, next) {
														return prev || isInType(next);
													}, !1) && Object.keys(decorators).forEach(function(k$2) {
														var decorator = decorators[k$2];
														(decorator.expression.arguments || []).forEach(function(arg) {
															arg.name === specifier.local.name && binding.referencePaths.push({ parent: decorator.expression });
														});
													}) : decorators[specifier.local.name] && binding.referencePaths.push({ parent: decorators[specifier.local.name] });
												}, _iterator2 = stmt.node.specifiers[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0) _loop();
											} catch (err) {
												_didIteratorError2 = !0, _iteratorError2 = err;
											} finally {
												try {
													_iteratorNormalCompletion2 || null == _iterator2.return || _iterator2.return();
												} finally {
													if (_didIteratorError2) throw _iteratorError2;
												}
											}
										}
									}
								} catch (err) {
									_didIteratorError = !0, _iteratorError = err;
								} finally {
									try {
										_iteratorNormalCompletion || null == _iterator.return || _iterator.return();
									} finally {
										if (_didIteratorError) throw _iteratorError;
									}
								}
							}();
						},
						Function: function(path$9) {
							var functionName = "";
							path$9.node.id ? functionName = path$9.node.id.name : path$9.node.key && (functionName = path$9.node.key.name), (path$9.get("params") || []).slice().forEach(function(param) {
								var decorators = param.node.decorators || [], transformable = decorators.length;
								if (decorators.slice().forEach(function(decorator) {
									if ("ClassMethod" === path$9.type) {
										var classIdentifier, parentNode = path$9.parentPath.parentPath, classDeclaration = path$9.findParent(function(p$1) {
											return "ClassDeclaration" === p$1.type;
										});
										if (classDeclaration ? classIdentifier = classDeclaration.node.id.name : (parentNode.insertAfter(null), classIdentifier = function(path$10) {
											var assignment = path$10.findParent(function(p$1) {
												return "AssignmentExpression" === p$1.node.type;
											});
											return "SequenceExpression" === assignment.node.right.type ? assignment.node.right.expressions[1].name : "ClassExpression" === assignment.node.right.type ? assignment.node.left.name : null;
										}(path$9)), "constructor" === functionName) {
											var expression = decoratorExpressionForConstructor(decorator, param)(classIdentifier);
											parentNode.insertAfter(expression);
										} else {
											var _expression = decoratorExpressionForMethod(decorator, param)(classIdentifier, functionName);
											parentNode.insertAfter(_expression);
										}
									} else {
										var className = path$9.findParent(function(p$1) {
											return "VariableDeclarator" === p$1.node.type;
										}).node.id.name;
										if (functionName === className) {
											var _expression2 = decoratorExpressionForConstructor(decorator, param)(className);
											if ("body" === path$9.parentKey) path$9.insertAfter(_expression2);
											else path$9.findParent(function(p$1) {
												return "body" === p$1.parentKey;
											}).insertAfter(_expression2);
										} else {
											var classParent = path$9.findParent(function(p$1) {
												return "CallExpression" === p$1.node.type;
											}), _expression3 = decoratorExpressionForMethod(decorator, param)(className, functionName);
											classParent.insertAfter(_expression3);
										}
									}
								}), transformable) {
									var replacement = function(path$10) {
										switch (path$10.node.type) {
											case "ObjectPattern": return types$7.ObjectPattern(path$10.node.properties);
											case "AssignmentPattern": return types$7.AssignmentPattern(path$10.node.left, path$10.node.right);
											case "TSParameterProperty": return types$7.Identifier(path$10.node.parameter.name);
											default: return types$7.Identifier(path$10.node.name);
										}
									}(param);
									param.replaceWith(replacement);
								}
							});
						}
					} };
				};
			},
			"./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				var decodeBase64;
				function Converter(sm, opts) {
					(opts = opts || {}).hasComment && (sm = function(sm$1) {
						return sm$1.split(",").pop();
					}(sm)), "base64" === opts.encoding ? sm = decodeBase64(sm) : "uri" === opts.encoding && (sm = decodeURIComponent(sm)), (opts.isJSON || opts.encoding) && (sm = JSON.parse(sm)), this.sourcemap = sm;
				}
				function makeConverter(sm) {
					return new Converter(sm, { isJSON: !0 });
				}
				Object.defineProperty(exports$1, "commentRegex", { get: function() {
					return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/gm;
				} }), Object.defineProperty(exports$1, "mapFileCommentRegex", { get: function() {
					return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/gm;
				} }), decodeBase64 = "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? function(base64) {
					return Buffer.from(base64, "base64").toString();
				} : function(base64) {
					if ("number" == typeof value) throw new TypeError("The value to decode must not be of type number.");
					return new Buffer(base64, "base64").toString();
				} : function(base64) {
					return decodeURIComponent(escape(atob(base64)));
				}, Converter.prototype.toJSON = function(space) {
					return JSON.stringify(this.sourcemap, null, space);
				}, "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? Converter.prototype.toBase64 = function() {
					var json = this.toJSON();
					return Buffer.from(json, "utf8").toString("base64");
				} : Converter.prototype.toBase64 = function() {
					var json = this.toJSON();
					if ("number" == typeof json) throw new TypeError("The json to encode must not be of type number.");
					return new Buffer(json, "utf8").toString("base64");
				} : Converter.prototype.toBase64 = function() {
					var json = this.toJSON();
					return btoa(unescape(encodeURIComponent(json)));
				}, Converter.prototype.toURI = function() {
					var json = this.toJSON();
					return encodeURIComponent(json);
				}, Converter.prototype.toComment = function(options) {
					var encoding, content, data;
					return null != options && "uri" === options.encoding ? (encoding = "", content = this.toURI()) : (encoding = ";base64", content = this.toBase64()), data = "sourceMappingURL=data:application/json;charset=utf-8" + encoding + "," + content, null != options && options.multiline ? "/*# " + data + " */" : "//# " + data;
				}, Converter.prototype.toObject = function() {
					return JSON.parse(this.toJSON());
				}, Converter.prototype.addProperty = function(key, value$1) {
					if (this.sourcemap.hasOwnProperty(key)) throw new Error("property \"" + key + "\" already exists on the sourcemap, use set property instead");
					return this.setProperty(key, value$1);
				}, Converter.prototype.setProperty = function(key, value$1) {
					return this.sourcemap[key] = value$1, this;
				}, Converter.prototype.getProperty = function(key) {
					return this.sourcemap[key];
				}, exports$1.fromObject = function(obj) {
					return new Converter(obj);
				}, exports$1.fromJSON = function(json) {
					return new Converter(json, { isJSON: !0 });
				}, exports$1.fromURI = function(uri) {
					return new Converter(uri, { encoding: "uri" });
				}, exports$1.fromBase64 = function(base64) {
					return new Converter(base64, { encoding: "base64" });
				}, exports$1.fromComment = function(comment) {
					var m$1;
					return new Converter(comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, ""), {
						encoding: (m$1 = exports$1.commentRegex.exec(comment)) && m$1[4] || "uri",
						hasComment: !0
					});
				}, exports$1.fromMapFileComment = function(comment, read$1) {
					if ("string" == typeof read$1) throw new Error("String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
					var sm = function(sm$1, read$2) {
						var r$1 = exports$1.mapFileCommentRegex.exec(sm$1), filename = r$1[1] || r$1[2];
						try {
							return null != (sm$1 = read$2(filename)) && "function" == typeof sm$1.catch ? sm$1.catch(throwError) : sm$1;
						} catch (e$1) {
							throwError(e$1);
						}
						function throwError(e$1) {
							throw new Error("An error occurred while trying to read the map file at " + filename + "\n" + e$1.stack);
						}
					}(comment, read$1);
					return null != sm && "function" == typeof sm.then ? sm.then(makeConverter) : makeConverter(sm);
				}, exports$1.fromSource = function(content) {
					var m$1 = content.match(exports$1.commentRegex);
					return m$1 ? exports$1.fromComment(m$1.pop()) : null;
				}, exports$1.fromMapFileSource = function(content, read$1) {
					if ("string" == typeof read$1) throw new Error("String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
					var m$1 = content.match(exports$1.mapFileCommentRegex);
					return m$1 ? exports$1.fromMapFileComment(m$1.pop(), read$1) : null;
				}, exports$1.removeComments = function(src) {
					return src.replace(exports$1.commentRegex, "");
				}, exports$1.removeMapFileComments = function(src) {
					return src.replace(exports$1.mapFileCommentRegex, "");
				}, exports$1.generateMapFileComment = function(file, options) {
					var data = "sourceMappingURL=" + file;
					return options && options.multiline ? "/*# " + data + " */" : "//# " + data;
				};
			},
			"./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js": (module$1, exports$1, __webpack_require__$1) => {
				exports$1.formatArgs = function(args) {
					if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module$1.exports.humanize(this.diff), !this.useColors) return;
					const c = "color: " + this.color;
					args.splice(1, 0, c, "color: inherit");
					let index = 0, lastC = 0;
					args[0].replace(/%[a-zA-Z%]/g, (match) => {
						"%%" !== match && (index++, "%c" === match && (lastC = index));
					}), args.splice(lastC, 0, c);
				}, exports$1.save = function(namespaces) {
					try {
						namespaces ? exports$1.storage.setItem("debug", namespaces) : exports$1.storage.removeItem("debug");
					} catch (error$1) {}
				}, exports$1.load = function() {
					let r$1;
					try {
						r$1 = exports$1.storage.getItem("debug");
					} catch (error$1) {}
					!r$1 && "undefined" != typeof process && "env" in process && (r$1 = process.env.DEBUG);
					return r$1;
				}, exports$1.useColors = function() {
					if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs)) return !0;
					if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return !1;
					let m$1;
					return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && (m$1 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m$1[1], 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
				}, exports$1.storage = function() {
					try {
						return localStorage;
					} catch (error$1) {}
				}(), exports$1.destroy = (() => {
					let warned = !1;
					return () => {
						warned || (warned = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
					};
				})(), exports$1.colors = [
					"#0000CC",
					"#0000FF",
					"#0033CC",
					"#0033FF",
					"#0066CC",
					"#0066FF",
					"#0099CC",
					"#0099FF",
					"#00CC00",
					"#00CC33",
					"#00CC66",
					"#00CC99",
					"#00CCCC",
					"#00CCFF",
					"#3300CC",
					"#3300FF",
					"#3333CC",
					"#3333FF",
					"#3366CC",
					"#3366FF",
					"#3399CC",
					"#3399FF",
					"#33CC00",
					"#33CC33",
					"#33CC66",
					"#33CC99",
					"#33CCCC",
					"#33CCFF",
					"#6600CC",
					"#6600FF",
					"#6633CC",
					"#6633FF",
					"#66CC00",
					"#66CC33",
					"#9900CC",
					"#9900FF",
					"#9933CC",
					"#9933FF",
					"#99CC00",
					"#99CC33",
					"#CC0000",
					"#CC0033",
					"#CC0066",
					"#CC0099",
					"#CC00CC",
					"#CC00FF",
					"#CC3300",
					"#CC3333",
					"#CC3366",
					"#CC3399",
					"#CC33CC",
					"#CC33FF",
					"#CC6600",
					"#CC6633",
					"#CC9900",
					"#CC9933",
					"#CCCC00",
					"#CCCC33",
					"#FF0000",
					"#FF0033",
					"#FF0066",
					"#FF0099",
					"#FF00CC",
					"#FF00FF",
					"#FF3300",
					"#FF3333",
					"#FF3366",
					"#FF3399",
					"#FF33CC",
					"#FF33FF",
					"#FF6600",
					"#FF6633",
					"#FF9900",
					"#FF9933",
					"#FFCC00",
					"#FFCC33"
				], exports$1.log = console.debug || console.log || (() => {}), module$1.exports = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js")(exports$1);
				const { formatters } = module$1.exports;
				formatters.j = function(v$1) {
					try {
						return JSON.stringify(v$1);
					} catch (error$1) {
						return "[UnexpectedJSONParseError]: " + error$1.message;
					}
				};
			},
			"./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js": (module$1, __unused_webpack_exports, __webpack_require__$1) => {
				module$1.exports = function(env$2) {
					function createDebug(namespace) {
						let prevTime, namespacesCache, enabledCache, enableOverride = null;
						function debug$5(...args) {
							if (!debug$5.enabled) return;
							const self$1 = debug$5, curr = Number(new Date()), ms = curr - (prevTime || curr);
							self$1.diff = ms, self$1.prev = prevTime, self$1.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), "string" != typeof args[0] && args.unshift("%O");
							let index = 0;
							args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
								if ("%%" === match) return "%";
								index++;
								const formatter = createDebug.formatters[format];
								if ("function" == typeof formatter) {
									const val = args[index];
									match = formatter.call(self$1, val), args.splice(index, 1), index--;
								}
								return match;
							}), createDebug.formatArgs.call(self$1, args);
							(self$1.log || createDebug.log).apply(self$1, args);
						}
						return debug$5.namespace = namespace, debug$5.useColors = createDebug.useColors(), debug$5.color = createDebug.selectColor(namespace), debug$5.extend = extend, debug$5.destroy = createDebug.destroy, Object.defineProperty(debug$5, "enabled", {
							enumerable: !0,
							configurable: !1,
							get: () => null !== enableOverride ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache),
							set: (v$1) => {
								enableOverride = v$1;
							}
						}), "function" == typeof createDebug.init && createDebug.init(debug$5), debug$5;
					}
					function extend(namespace, delimiter) {
						const newDebug = createDebug(this.namespace + (void 0 === delimiter ? ":" : delimiter) + namespace);
						return newDebug.log = this.log, newDebug;
					}
					function matchesTemplate(search, template) {
						let searchIndex = 0, templateIndex = 0, starIndex = -1, matchIndex = 0;
						for (; searchIndex < search.length;) if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || "*" === template[templateIndex])) "*" === template[templateIndex] ? (starIndex = templateIndex, matchIndex = searchIndex, templateIndex++) : (searchIndex++, templateIndex++);
						else {
							if (-1 === starIndex) return !1;
							templateIndex = starIndex + 1, matchIndex++, searchIndex = matchIndex;
						}
						for (; templateIndex < template.length && "*" === template[templateIndex];) templateIndex++;
						return templateIndex === template.length;
					}
					return createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = function(val) {
						if (val instanceof Error) return val.stack || val.message;
						return val;
					}, createDebug.disable = function() {
						const namespaces = [...createDebug.names, ...createDebug.skips.map((namespace) => "-" + namespace)].join(",");
						return createDebug.enable(""), namespaces;
					}, createDebug.enable = function(namespaces) {
						createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], createDebug.skips = [];
						const split = ("string" == typeof namespaces ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
						for (const ns of split) "-" === ns[0] ? createDebug.skips.push(ns.slice(1)) : createDebug.names.push(ns);
					}, createDebug.enabled = function(name) {
						for (const skip of createDebug.skips) if (matchesTemplate(name, skip)) return !1;
						for (const ns of createDebug.names) if (matchesTemplate(name, ns)) return !0;
						return !1;
					}, createDebug.humanize = __webpack_require__$1("./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js"), createDebug.destroy = function() {
						console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
					}, Object.keys(env$2).forEach((key) => {
						createDebug[key] = env$2[key];
					}), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {}, createDebug.selectColor = function(namespace) {
						let hash = 0;
						for (let i = 0; i < namespace.length; i++) hash = (hash << 5) - hash + namespace.charCodeAt(i), hash |= 0;
						return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
					}, createDebug.enable(createDebug.load()), createDebug;
				};
			},
			"./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js": (module$1, __unused_webpack_exports, __webpack_require__$1) => {
				"undefined" == typeof process || "renderer" === process.type || !0 === process.browser || process.__nwjs ? module$1.exports = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js") : module$1.exports = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js");
			},
			"./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js": (module$1, exports$1, __webpack_require__$1) => {
				const tty$1 = __webpack_require__$1("tty"), util$18 = __webpack_require__$1("util");
				exports$1.init = function(debug$5) {
					debug$5.inspectOpts = {};
					const keys = Object.keys(exports$1.inspectOpts);
					for (let i = 0; i < keys.length; i++) debug$5.inspectOpts[keys[i]] = exports$1.inspectOpts[keys[i]];
				}, exports$1.log = function(...args) {
					return process.stderr.write(util$18.formatWithOptions(exports$1.inspectOpts, ...args) + "\n");
				}, exports$1.formatArgs = function(args) {
					const { namespace: name, useColors } = this;
					if (useColors) {
						const c = this.color, colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c), prefix = `  ${colorCode};1m${name} [0m`;
						args[0] = prefix + args[0].split("\n").join("\n" + prefix), args.push(colorCode + "m+" + module$1.exports.humanize(this.diff) + "\x1B[0m");
					} else args[0] = function() {
						if (exports$1.inspectOpts.hideDate) return "";
						return new Date().toISOString() + " ";
					}() + name + " " + args[0];
				}, exports$1.save = function(namespaces) {
					namespaces ? process.env.DEBUG = namespaces : delete process.env.DEBUG;
				}, exports$1.load = function() {
					return process.env.DEBUG;
				}, exports$1.useColors = function() {
					return "colors" in exports$1.inspectOpts ? Boolean(exports$1.inspectOpts.colors) : tty$1.isatty(process.stderr.fd);
				}, exports$1.destroy = util$18.deprecate(() => {}, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."), exports$1.colors = [
					6,
					2,
					3,
					4,
					5,
					1
				];
				try {
					const supportsColor = __webpack_require__$1("./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js");
					supportsColor && (supportsColor.stderr || supportsColor).level >= 2 && (exports$1.colors = [
						20,
						21,
						26,
						27,
						32,
						33,
						38,
						39,
						40,
						41,
						42,
						43,
						44,
						45,
						56,
						57,
						62,
						63,
						68,
						69,
						74,
						75,
						76,
						77,
						78,
						79,
						80,
						81,
						92,
						93,
						98,
						99,
						112,
						113,
						128,
						129,
						134,
						135,
						148,
						149,
						160,
						161,
						162,
						163,
						164,
						165,
						166,
						167,
						168,
						169,
						170,
						171,
						172,
						173,
						178,
						179,
						184,
						185,
						196,
						197,
						198,
						199,
						200,
						201,
						202,
						203,
						204,
						205,
						206,
						207,
						208,
						209,
						214,
						215,
						220,
						221
					]);
				} catch (error$1) {}
				exports$1.inspectOpts = Object.keys(process.env).filter((key) => /^debug_/i.test(key)).reduce((obj, key) => {
					const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_$2, k$2) => k$2.toUpperCase());
					let val = process.env[key];
					return val = !!/^(yes|on|true|enabled)$/i.test(val) || !/^(no|off|false|disabled)$/i.test(val) && ("null" === val ? null : Number(val)), obj[prop] = val, obj;
				}, {}), module$1.exports = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js")(exports$1);
				const { formatters } = module$1.exports;
				formatters.o = function(v$1) {
					return this.inspectOpts.colors = this.useColors, util$18.inspect(v$1, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
				}, formatters.O = function(v$1) {
					return this.inspectOpts.colors = this.useColors, util$18.inspect(v$1, this.inspectOpts);
				};
			},
			"./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js": (module$1) => {
				"use strict";
				const GENSYNC_START = Symbol.for("gensync:v1:start"), GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");
				function assertTypeof(type$1, name, value$1, allowUndefined) {
					if (typeof value$1 === type$1 || allowUndefined && void 0 === value$1) return;
					let msg;
					throw msg = allowUndefined ? `Expected opts.${name} to be either a ${type$1}, or undefined.` : `Expected opts.${name} to be a ${type$1}.`, makeError(msg, "GENSYNC_OPTIONS_ERROR");
				}
				function makeError(msg, code) {
					return Object.assign(new Error(msg), { code });
				}
				function buildOperation({ name, arity, sync, async }) {
					return setFunctionMetadata(name, arity, function* (...args) {
						const resume$1 = yield GENSYNC_START;
						if (!resume$1) return sync.call(this, args);
						let result;
						try {
							async.call(this, args, (value$1) => {
								result || (result = { value: value$1 }, resume$1());
							}, (err) => {
								result || (result = { err }, resume$1());
							});
						} catch (err) {
							result = { err }, resume$1();
						}
						if (yield GENSYNC_SUSPEND, result.hasOwnProperty("err")) throw result.err;
						return result.value;
					});
				}
				function evaluateSync(gen) {
					let value$1;
					for (; !({value: value$1} = gen.next()).done;) assertStart(value$1, gen);
					return value$1;
				}
				function evaluateAsync(gen, resolve$1, reject) {
					(function step() {
						try {
							let value$1;
							for (; !({value: value$1} = gen.next()).done;) {
								assertStart(value$1, gen);
								let sync = !0, didSyncResume = !1;
								const out = gen.next(() => {
									sync ? didSyncResume = !0 : step();
								});
								if (sync = !1, assertSuspend(out, gen), !didSyncResume) return;
							}
							return resolve$1(value$1);
						} catch (err) {
							return reject(err);
						}
					})();
				}
				function assertStart(value$1, gen) {
					value$1 !== GENSYNC_START && throwError(gen, makeError(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value$1)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, "GENSYNC_EXPECTED_START"));
				}
				function assertSuspend({ value: value$1, done }, gen) {
					(done || value$1 !== GENSYNC_SUSPEND) && throwError(gen, makeError(done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(value$1)}. If you get this, it is probably a gensync bug.`, "GENSYNC_EXPECTED_SUSPEND"));
				}
				function throwError(gen, err) {
					throw gen.throw && gen.throw(err), err;
				}
				function setFunctionMetadata(name, arity, fn) {
					if ("string" == typeof name) {
						const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
						nameDesc && !nameDesc.configurable || Object.defineProperty(fn, "name", Object.assign(nameDesc || {}, {
							configurable: !0,
							value: name
						}));
					}
					if ("number" == typeof arity) {
						const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
						lengthDesc && !lengthDesc.configurable || Object.defineProperty(fn, "length", Object.assign(lengthDesc || {}, {
							configurable: !0,
							value: arity
						}));
					}
					return fn;
				}
				module$1.exports = Object.assign(function(optsOrFn) {
					let genFn = optsOrFn;
					return genFn = "function" != typeof optsOrFn ? function({ name, arity, sync, async, errback }) {
						if (assertTypeof("string", "name", name, !0), assertTypeof("number", "arity", arity, !0), assertTypeof("function", "sync", sync), assertTypeof("function", "async", async, !0), assertTypeof("function", "errback", errback, !0), async && errback) throw makeError("Expected one of either opts.async or opts.errback, but got _both_.", "GENSYNC_OPTIONS_ERROR");
						if ("string" != typeof name) {
							let fnName;
							errback && errback.name && "errback" !== errback.name && (fnName = errback.name), async && async.name && "async" !== async.name && (fnName = async.name.replace(/Async$/, "")), sync && sync.name && "sync" !== sync.name && (fnName = sync.name.replace(/Sync$/, "")), "string" == typeof fnName && (name = fnName);
						}
						"number" != typeof arity && (arity = sync.length);
						return buildOperation({
							name,
							arity,
							sync: function(args) {
								return sync.apply(this, args);
							},
							async: function(args, resolve$1, reject) {
								async ? async.apply(this, args).then(resolve$1, reject) : errback ? errback.call(this, ...args, (err, value$1) => {
									null == err ? resolve$1(value$1) : reject(err);
								}) : resolve$1(sync.apply(this, args));
							}
						});
					}(optsOrFn) : function(genFn$1) {
						return setFunctionMetadata(genFn$1.name, genFn$1.length, function(...args) {
							return genFn$1.apply(this, args);
						});
					}(optsOrFn), Object.assign(genFn, function(genFn$1) {
						const fns = {
							sync: function(...args) {
								return evaluateSync(genFn$1.apply(this, args));
							},
							async: function(...args) {
								return new Promise((resolve$1, reject) => {
									evaluateAsync(genFn$1.apply(this, args), resolve$1, reject);
								});
							},
							errback: function(...args) {
								const cb = args.pop();
								if ("function" != typeof cb) throw makeError("Asynchronous function called without callback", "GENSYNC_ERRBACK_NO_CALLBACK");
								let gen;
								try {
									gen = genFn$1.apply(this, args);
								} catch (err) {
									return void cb(err);
								}
								evaluateAsync(gen, (val) => cb(void 0, val), (err) => cb(err));
							}
						};
						return fns;
					}(genFn));
				}, {
					all: buildOperation({
						name: "all",
						arity: 1,
						sync: function(args) {
							return Array.from(args[0]).map((item) => evaluateSync(item));
						},
						async: function(args, resolve$1, reject) {
							const items = Array.from(args[0]);
							if (0 === items.length) return void Promise.resolve().then(() => resolve$1([]));
							let count = 0;
							const results = items.map(() => {});
							items.forEach((item, i) => {
								evaluateAsync(item, (val) => {
									results[i] = val, count += 1, count === results.length && resolve$1(results);
								}, reject);
							});
						}
					}),
					race: buildOperation({
						name: "race",
						arity: 1,
						sync: function(args) {
							const items = Array.from(args[0]);
							if (0 === items.length) throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
							return evaluateSync(items[0]);
						},
						async: function(args, resolve$1, reject) {
							const items = Array.from(args[0]);
							if (0 === items.length) throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
							for (const item of items) evaluateAsync(item, resolve$1, reject);
						}
					})
				});
			},
			"./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js": (module$1, __unused_webpack_exports, __webpack_require__$1) => {
				"use strict";
				module$1.exports = __webpack_require__$1("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json");
			},
			"./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js": (module$1) => {
				"use strict";
				module$1.exports = (flag, argv$1 = process.argv) => {
					const prefix = flag.startsWith("-") ? "" : 1 === flag.length ? "-" : "--", position = argv$1.indexOf(prefix + flag), terminatorPosition = argv$1.indexOf("--");
					return -1 !== position && (-1 === terminatorPosition || position < terminatorPosition);
				};
			},
			"./node_modules/.pnpm/jsesc@3.1.0/node_modules/jsesc/jsesc.js": (module$1) => {
				"use strict";
				const object = {}, hasOwnProperty$1 = object.hasOwnProperty, forOwn = (object$1, callback) => {
					for (const key in object$1) hasOwnProperty$1.call(object$1, key) && callback(key, object$1[key]);
				}, fourHexEscape = (hex) => "\\u" + ("0000" + hex).slice(-4), hexadecimal = (code, lowercase) => {
					let hexadecimal$1 = code.toString(16);
					return lowercase ? hexadecimal$1 : hexadecimal$1.toUpperCase();
				}, toString = object.toString, isArray = Array.isArray, isBigInt = (value$1) => "bigint" == typeof value$1, singleEscapes = {
					"\\": "\\\\",
					"\b": "\\b",
					"\f": "\\f",
					"\n": "\\n",
					"\r": "\\r",
					"	": "\\t"
				}, regexSingleEscape = /[\\\b\f\n\r\t]/, regexDigit = /[0-9]/, regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/, escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g, escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g, jsesc = (argument, options) => {
					const increaseIndentation = () => {
						oldIndent = indent, ++options.indentLevel, indent = options.indent.repeat(options.indentLevel);
					}, defaults$1 = {
						escapeEverything: !1,
						minimal: !1,
						isScriptContext: !1,
						quotes: "single",
						wrap: !1,
						es6: !1,
						json: !1,
						compact: !0,
						lowercaseHex: !1,
						numbers: "decimal",
						indent: "	",
						indentLevel: 0,
						__inline1__: !1,
						__inline2__: !1
					}, json = options && options.json;
					var destination, source;
					json && (defaults$1.quotes = "double", defaults$1.wrap = !0), destination = defaults$1, "single" != (options = (source = options) ? (forOwn(source, (key, value$1) => {
						destination[key] = value$1;
					}), destination) : destination).quotes && "double" != options.quotes && "backtick" != options.quotes && (options.quotes = "single");
					const quote = "double" == options.quotes ? "\"" : "backtick" == options.quotes ? "`" : "'", compact = options.compact, lowercaseHex = options.lowercaseHex;
					let indent = options.indent.repeat(options.indentLevel), oldIndent = "";
					const inline1 = options.__inline1__, inline2 = options.__inline2__, newLine = compact ? "" : "\n";
					let result, isEmpty = !0;
					const useBinNumbers = "binary" == options.numbers, useOctNumbers = "octal" == options.numbers, useDecNumbers = "decimal" == options.numbers, useHexNumbers = "hexadecimal" == options.numbers;
					if (json && argument && ((value$1) => "function" == typeof value$1)(argument.toJSON) && (argument = argument.toJSON()), !((value$1) => "string" == typeof value$1 || "[object String]" == toString.call(value$1))(argument)) {
						if (((value$1) => "[object Map]" == toString.call(value$1))(argument)) return 0 == argument.size ? "new Map()" : (compact || (options.__inline1__ = !0, options.__inline2__ = !1), "new Map(" + jsesc(Array.from(argument), options) + ")");
						if (((value$1) => "[object Set]" == toString.call(value$1))(argument)) return 0 == argument.size ? "new Set()" : "new Set(" + jsesc(Array.from(argument), options) + ")";
						if (((value$1) => "function" == typeof Buffer && Buffer.isBuffer(value$1))(argument)) return 0 == argument.length ? "Buffer.from([])" : "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
						if (isArray(argument)) return result = [], options.wrap = !0, inline1 && (options.__inline1__ = !1, options.__inline2__ = !0), inline2 || increaseIndentation(), ((array, callback) => {
							const length = array.length;
							let index = -1;
							for (; ++index < length;) callback(array[index]);
						})(argument, (value$1) => {
							isEmpty = !1, inline2 && (options.__inline2__ = !1), result.push((compact || inline2 ? "" : indent) + jsesc(value$1, options));
						}), isEmpty ? "[]" : inline2 ? "[" + result.join(", ") + "]" : "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
						if (((value$1) => "number" == typeof value$1 || "[object Number]" == toString.call(value$1))(argument) || isBigInt(argument)) {
							if (json) return JSON.stringify(Number(argument));
							let result$1;
							if (useDecNumbers) result$1 = String(argument);
							else if (useHexNumbers) {
								let hexadecimal$1 = argument.toString(16);
								lowercaseHex || (hexadecimal$1 = hexadecimal$1.toUpperCase()), result$1 = "0x" + hexadecimal$1;
							} else useBinNumbers ? result$1 = "0b" + argument.toString(2) : useOctNumbers && (result$1 = "0o" + argument.toString(8));
							return isBigInt(argument) ? result$1 + "n" : result$1;
						}
						return isBigInt(argument) ? json ? JSON.stringify(Number(argument)) : argument + "n" : ((value$1) => "[object Object]" == toString.call(value$1))(argument) ? (result = [], options.wrap = !0, increaseIndentation(), forOwn(argument, (key, value$1) => {
							isEmpty = !1, result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value$1, options));
						}), isEmpty ? "{}" : "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}") : json ? JSON.stringify(argument) || "null" : String(argument);
					}
					const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
					return result = argument.replace(regex, (char, pair, lone, quoteChar, index, string) => {
						if (pair) {
							if (options.minimal) return pair;
							const first = pair.charCodeAt(0), second = pair.charCodeAt(1);
							if (options.es6) return "\\u{" + hexadecimal(1024 * (first - 55296) + second - 56320 + 65536, lowercaseHex) + "}";
							return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
						}
						if (lone) return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
						if ("\0" == char && !json && !regexDigit.test(string.charAt(index + 1))) return "\\0";
						if (quoteChar) return quoteChar == quote || options.escapeEverything ? "\\" + quoteChar : quoteChar;
						if (regexSingleEscape.test(char)) return singleEscapes[char];
						if (options.minimal && !regexWhitespace.test(char)) return char;
						const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);
						return json || hex.length > 2 ? fourHexEscape(hex) : "\\x" + ("00" + hex).slice(-2);
					}), "`" == quote && (result = result.replace(/\$\{/g, "\\${")), options.isScriptContext && (result = result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--")), options.wrap && (result = quote + result + quote), result;
				};
				jsesc.version = "3.0.2", module$1.exports = jsesc;
			},
			"./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive": (module$1) => {
				function webpackEmptyAsyncContext(req) {
					return Promise.resolve().then(() => {
						var e$1 = new Error("Cannot find module '" + req + "'");
						throw e$1.code = "MODULE_NOT_FOUND", e$1;
					});
				}
				webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive", module$1.exports = webpackEmptyAsyncContext;
			},
			"./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js": (module$1) => {
				var s = 1e3, m$1 = 60 * s, h$1 = 60 * m$1, d$2 = 24 * h$1, w$1 = 7 * d$2, y$2 = 365.25 * d$2;
				function plural(ms, msAbs, n, name) {
					var isPlural = msAbs >= 1.5 * n;
					return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
				}
				module$1.exports = function(val, options) {
					options = options || {};
					var type$1 = typeof val;
					if ("string" === type$1 && val.length > 0) return function(str) {
						if ((str = String(str)).length > 100) return;
						var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
						if (!match) return;
						var n = parseFloat(match[1]);
						switch ((match[2] || "ms").toLowerCase()) {
							case "years":
							case "year":
							case "yrs":
							case "yr":
							case "y": return n * y$2;
							case "weeks":
							case "week":
							case "w": return n * w$1;
							case "days":
							case "day":
							case "d": return n * d$2;
							case "hours":
							case "hour":
							case "hrs":
							case "hr":
							case "h": return n * h$1;
							case "minutes":
							case "minute":
							case "mins":
							case "min":
							case "m": return n * m$1;
							case "seconds":
							case "second":
							case "secs":
							case "sec":
							case "s": return n * s;
							case "milliseconds":
							case "millisecond":
							case "msecs":
							case "msec":
							case "ms": return n;
							default: return;
						}
					}(val);
					if ("number" === type$1 && isFinite(val)) return options.long ? function(ms) {
						var msAbs = Math.abs(ms);
						if (msAbs >= d$2) return plural(ms, msAbs, d$2, "day");
						if (msAbs >= h$1) return plural(ms, msAbs, h$1, "hour");
						if (msAbs >= m$1) return plural(ms, msAbs, m$1, "minute");
						if (msAbs >= s) return plural(ms, msAbs, s, "second");
						return ms + " ms";
					}(val) : function(ms) {
						var msAbs = Math.abs(ms);
						if (msAbs >= d$2) return Math.round(ms / d$2) + "d";
						if (msAbs >= h$1) return Math.round(ms / h$1) + "h";
						if (msAbs >= m$1) return Math.round(ms / m$1) + "m";
						if (msAbs >= s) return Math.round(ms / s) + "s";
						return ms + "ms";
					}(val);
					throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
				};
			},
			"./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js": (module$1, exports$1) => {
				var debug$5;
				exports$1 = module$1.exports = SemVer, debug$5 = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function() {
					var args = Array.prototype.slice.call(arguments, 0);
					args.unshift("SEMVER"), console.log.apply(console, args);
				} : function() {}, exports$1.SEMVER_SPEC_VERSION = "2.0.0";
				var MAX_LENGTH$1 = 256, MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_BUILD_LENGTH = MAX_LENGTH$1 - 6, re = exports$1.re = [], safeRe = exports$1.safeRe = [], src = exports$1.src = [], t = exports$1.tokens = {}, R$1 = 0;
				function tok(n) {
					t[n] = R$1++;
				}
				var safeRegexReplacements = [
					["\\s", 1],
					["\\d", MAX_LENGTH$1],
					["[a-zA-Z0-9-]", MAX_SAFE_BUILD_LENGTH]
				];
				function makeSafeRe(value$1) {
					for (var i$1 = 0; i$1 < safeRegexReplacements.length; i$1++) {
						var token = safeRegexReplacements[i$1][0], max = safeRegexReplacements[i$1][1];
						value$1 = value$1.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
					}
					return value$1;
				}
				tok("NUMERICIDENTIFIER"), src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*", tok("NUMERICIDENTIFIERLOOSE"), src[t.NUMERICIDENTIFIERLOOSE] = "\\d+", tok("NONNUMERICIDENTIFIER"), src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*", tok("MAINVERSION"), src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")", tok("MAINVERSIONLOOSE"), src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")", tok("PRERELEASEIDENTIFIER"), src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASEIDENTIFIERLOOSE"), src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASE"), src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))", tok("PRERELEASELOOSE"), src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))", tok("BUILDIDENTIFIER"), src[t.BUILDIDENTIFIER] = "[a-zA-Z0-9-]+", tok("BUILD"), src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))", tok("FULL"), tok("FULLPLAIN"), src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?", src[t.FULL] = "^" + src[t.FULLPLAIN] + "$", tok("LOOSEPLAIN"), src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?", tok("LOOSE"), src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$", tok("GTLT"), src[t.GTLT] = "((?:<|>)?=?)", tok("XRANGEIDENTIFIERLOOSE"), src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*", tok("XRANGEIDENTIFIER"), src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*", tok("XRANGEPLAIN"), src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGEPLAINLOOSE"), src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGE"), src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$", tok("XRANGELOOSE"), src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$", tok("COERCE"), src[t.COERCE] = "(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])", tok("COERCERTL"), re[t.COERCERTL] = new RegExp(src[t.COERCE], "g"), safeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), "g"), tok("LONETILDE"), src[t.LONETILDE] = "(?:~>?)", tok("TILDETRIM"), src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+", re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g"), safeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), "g");
				tok("TILDE"), src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$", tok("TILDELOOSE"), src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$", tok("LONECARET"), src[t.LONECARET] = "(?:\\^)", tok("CARETTRIM"), src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+", re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g"), safeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), "g");
				tok("CARET"), src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$", tok("CARETLOOSE"), src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$", tok("COMPARATORLOOSE"), src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$", tok("COMPARATOR"), src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$", tok("COMPARATORTRIM"), src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")", re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g"), safeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), "g");
				tok("HYPHENRANGE"), src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$", tok("HYPHENRANGELOOSE"), src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$", tok("STAR"), src[t.STAR] = "(<|>)?=?\\s*\\*";
				for (var i = 0; i < R$1; i++) debug$5(i, src[i]), re[i] || (re[i] = new RegExp(src[i]), safeRe[i] = new RegExp(makeSafeRe(src[i])));
				function parse$4(version$1, options) {
					if (options && "object" == typeof options || (options = {
						loose: !!options,
						includePrerelease: !1
					}), version$1 instanceof SemVer) return version$1;
					if ("string" != typeof version$1) return null;
					if (version$1.length > MAX_LENGTH$1) return null;
					if (!(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]).test(version$1)) return null;
					try {
						return new SemVer(version$1, options);
					} catch (er) {
						return null;
					}
				}
				function SemVer(version$1, options) {
					if (options && "object" == typeof options || (options = {
						loose: !!options,
						includePrerelease: !1
					}), version$1 instanceof SemVer) {
						if (version$1.loose === options.loose) return version$1;
						version$1 = version$1.version;
					} else if ("string" != typeof version$1) throw new TypeError("Invalid Version: " + version$1);
					if (version$1.length > MAX_LENGTH$1) throw new TypeError("version is longer than " + MAX_LENGTH$1 + " characters");
					if (!(this instanceof SemVer)) return new SemVer(version$1, options);
					debug$5("SemVer", version$1, options), this.options = options, this.loose = !!options.loose;
					var m$1 = version$1.trim().match(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]);
					if (!m$1) throw new TypeError("Invalid Version: " + version$1);
					if (this.raw = version$1, this.major = +m$1[1], this.minor = +m$1[2], this.patch = +m$1[3], this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
					if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
					if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
					m$1[4] ? this.prerelease = m$1[4].split(".").map(function(id) {
						if (/^[0-9]+$/.test(id)) {
							var num = +id;
							if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
						}
						return id;
					}) : this.prerelease = [], this.build = m$1[5] ? m$1[5].split(".") : [], this.format();
				}
				exports$1.parse = parse$4, exports$1.valid = function(version$1, options) {
					var v$1 = parse$4(version$1, options);
					return v$1 ? v$1.version : null;
				}, exports$1.clean = function(version$1, options) {
					var s = parse$4(version$1.trim().replace(/^[=v]+/, ""), options);
					return s ? s.version : null;
				}, exports$1.SemVer = SemVer, SemVer.prototype.format = function() {
					return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
				}, SemVer.prototype.toString = function() {
					return this.version;
				}, SemVer.prototype.compare = function(other) {
					return debug$5("SemVer.compare", this.version, this.options, other), other instanceof SemVer || (other = new SemVer(other, this.options)), this.compareMain(other) || this.comparePre(other);
				}, SemVer.prototype.compareMain = function(other) {
					return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
				}, SemVer.prototype.comparePre = function(other) {
					if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length) return -1;
					if (!this.prerelease.length && other.prerelease.length) return 1;
					if (!this.prerelease.length && !other.prerelease.length) return 0;
					var i$1 = 0;
					do {
						var a = this.prerelease[i$1], b$2 = other.prerelease[i$1];
						if (debug$5("prerelease compare", i$1, a, b$2), void 0 === a && void 0 === b$2) return 0;
						if (void 0 === b$2) return 1;
						if (void 0 === a) return -1;
						if (a !== b$2) return compareIdentifiers(a, b$2);
					} while (++i$1);
				}, SemVer.prototype.compareBuild = function(other) {
					other instanceof SemVer || (other = new SemVer(other, this.options));
					var i$1 = 0;
					do {
						var a = this.build[i$1], b$2 = other.build[i$1];
						if (debug$5("prerelease compare", i$1, a, b$2), void 0 === a && void 0 === b$2) return 0;
						if (void 0 === b$2) return 1;
						if (void 0 === a) return -1;
						if (a !== b$2) return compareIdentifiers(a, b$2);
					} while (++i$1);
				}, SemVer.prototype.inc = function(release, identifier) {
					switch (release) {
						case "premajor":
							this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
							break;
						case "preminor":
							this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
							break;
						case "prepatch":
							this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
							break;
						case "prerelease":
							0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
							break;
						case "major":
							0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
							break;
						case "minor":
							0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
							break;
						case "patch":
							0 === this.prerelease.length && this.patch++, this.prerelease = [];
							break;
						case "pre":
							if (0 === this.prerelease.length) this.prerelease = [0];
							else {
								for (var i$1 = this.prerelease.length; --i$1 >= 0;) "number" == typeof this.prerelease[i$1] && (this.prerelease[i$1]++, i$1 = -2);
								-1 === i$1 && this.prerelease.push(0);
							}
							identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
							break;
						default: throw new Error("invalid increment argument: " + release);
					}
					return this.format(), this.raw = this.version, this;
				}, exports$1.inc = function(version$1, release, loose, identifier) {
					"string" == typeof loose && (identifier = loose, loose = void 0);
					try {
						return new SemVer(version$1, loose).inc(release, identifier).version;
					} catch (er) {
						return null;
					}
				}, exports$1.diff = function(version1, version2) {
					if (eq(version1, version2)) return null;
					var v1 = parse$4(version1), v2 = parse$4(version2), prefix = "";
					if (v1.prerelease.length || v2.prerelease.length) {
						prefix = "pre";
						var defaultResult = "prerelease";
					}
					for (var key in v1) if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key]) return prefix + key;
					return defaultResult;
				}, exports$1.compareIdentifiers = compareIdentifiers;
				var numeric = /^[0-9]+$/;
				function compareIdentifiers(a, b$2) {
					var anum = numeric.test(a), bnum = numeric.test(b$2);
					return anum && bnum && (a = +a, b$2 = +b$2), a === b$2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b$2 ? -1 : 1;
				}
				function compare(a, b$2, loose) {
					return new SemVer(a, loose).compare(new SemVer(b$2, loose));
				}
				function gt(a, b$2, loose) {
					return compare(a, b$2, loose) > 0;
				}
				function lt(a, b$2, loose) {
					return compare(a, b$2, loose) < 0;
				}
				function eq(a, b$2, loose) {
					return 0 === compare(a, b$2, loose);
				}
				function neq(a, b$2, loose) {
					return 0 !== compare(a, b$2, loose);
				}
				function gte(a, b$2, loose) {
					return compare(a, b$2, loose) >= 0;
				}
				function lte(a, b$2, loose) {
					return compare(a, b$2, loose) <= 0;
				}
				function cmp(a, op, b$2, loose) {
					switch (op) {
						case "===": return "object" == typeof a && (a = a.version), "object" == typeof b$2 && (b$2 = b$2.version), a === b$2;
						case "!==": return "object" == typeof a && (a = a.version), "object" == typeof b$2 && (b$2 = b$2.version), a !== b$2;
						case "":
						case "=":
						case "==": return eq(a, b$2, loose);
						case "!=": return neq(a, b$2, loose);
						case ">": return gt(a, b$2, loose);
						case ">=": return gte(a, b$2, loose);
						case "<": return lt(a, b$2, loose);
						case "<=": return lte(a, b$2, loose);
						default: throw new TypeError("Invalid operator: " + op);
					}
				}
				function Comparator(comp, options) {
					if (options && "object" == typeof options || (options = {
						loose: !!options,
						includePrerelease: !1
					}), comp instanceof Comparator) {
						if (comp.loose === !!options.loose) return comp;
						comp = comp.value;
					}
					if (!(this instanceof Comparator)) return new Comparator(comp, options);
					comp = comp.trim().split(/\s+/).join(" "), debug$5("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug$5("comp", this);
				}
				exports$1.rcompareIdentifiers = function(a, b$2) {
					return compareIdentifiers(b$2, a);
				}, exports$1.major = function(a, loose) {
					return new SemVer(a, loose).major;
				}, exports$1.minor = function(a, loose) {
					return new SemVer(a, loose).minor;
				}, exports$1.patch = function(a, loose) {
					return new SemVer(a, loose).patch;
				}, exports$1.compare = compare, exports$1.compareLoose = function(a, b$2) {
					return compare(a, b$2, !0);
				}, exports$1.compareBuild = function(a, b$2, loose) {
					var versionA = new SemVer(a, loose), versionB = new SemVer(b$2, loose);
					return versionA.compare(versionB) || versionA.compareBuild(versionB);
				}, exports$1.rcompare = function(a, b$2, loose) {
					return compare(b$2, a, loose);
				}, exports$1.sort = function(list, loose) {
					return list.sort(function(a, b$2) {
						return exports$1.compareBuild(a, b$2, loose);
					});
				}, exports$1.rsort = function(list, loose) {
					return list.sort(function(a, b$2) {
						return exports$1.compareBuild(b$2, a, loose);
					});
				}, exports$1.gt = gt, exports$1.lt = lt, exports$1.eq = eq, exports$1.neq = neq, exports$1.gte = gte, exports$1.lte = lte, exports$1.cmp = cmp, exports$1.Comparator = Comparator;
				var ANY = {};
				function Range(range, options) {
					if (options && "object" == typeof options || (options = {
						loose: !!options,
						includePrerelease: !1
					}), range instanceof Range) return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
					if (range instanceof Comparator) return new Range(range.value, options);
					if (!(this instanceof Range)) return new Range(range, options);
					if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range.trim().split(/\s+/).join(" "), this.set = this.raw.split("||").map(function(range$1) {
						return this.parseRange(range$1.trim());
					}, this).filter(function(c) {
						return c.length;
					}), !this.set.length) throw new TypeError("Invalid SemVer Range: " + this.raw);
					this.format();
				}
				function isSatisfiable(comparators, options) {
					for (var result = !0, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop(); result && remainingComparators.length;) result = remainingComparators.every(function(otherComparator) {
						return testComparator.intersects(otherComparator, options);
					}), testComparator = remainingComparators.pop();
					return result;
				}
				function isX(id) {
					return !id || "x" === id.toLowerCase() || "*" === id;
				}
				function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
					return ((from = isX(fM) ? "" : isX(fm) ? ">=" + fM + ".0.0" : isX(fp) ? ">=" + fM + "." + fm + ".0" : ">=" + from) + " " + (to = isX(tM) ? "" : isX(tm) ? "<" + (+tM + 1) + ".0.0" : isX(tp) ? "<" + tM + "." + (+tm + 1) + ".0" : tpr ? "<=" + tM + "." + tm + "." + tp + "-" + tpr : "<=" + to)).trim();
				}
				function testSet(set, version$1, options) {
					for (var i$1 = 0; i$1 < set.length; i$1++) if (!set[i$1].test(version$1)) return !1;
					if (version$1.prerelease.length && !options.includePrerelease) {
						for (i$1 = 0; i$1 < set.length; i$1++) if (debug$5(set[i$1].semver), set[i$1].semver !== ANY && set[i$1].semver.prerelease.length > 0) {
							var allowed = set[i$1].semver;
							if (allowed.major === version$1.major && allowed.minor === version$1.minor && allowed.patch === version$1.patch) return !0;
						}
						return !1;
					}
					return !0;
				}
				function satisfies(version$1, range, options) {
					try {
						range = new Range(range, options);
					} catch (er) {
						return !1;
					}
					return range.test(version$1);
				}
				function outside(version$1, range, hilo, options) {
					var gtfn, ltefn, ltfn, comp, ecomp;
					switch (version$1 = new SemVer(version$1, options), range = new Range(range, options), hilo) {
						case ">":
							gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
							break;
						case "<":
							gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
							break;
						default: throw new TypeError("Must provide a hilo val of \"<\" or \">\"");
					}
					if (satisfies(version$1, range, options)) return !1;
					for (var i$1 = 0; i$1 < range.set.length; ++i$1) {
						var comparators = range.set[i$1], high = null, low = null;
						if (comparators.forEach(function(comparator) {
							comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
						}), high.operator === comp || high.operator === ecomp) return !1;
						if ((!low.operator || low.operator === comp) && ltefn(version$1, low.semver)) return !1;
						if (low.operator === ecomp && ltfn(version$1, low.semver)) return !1;
					}
					return !0;
				}
				Comparator.prototype.parse = function(comp) {
					var r$1 = this.options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR], m$1 = comp.match(r$1);
					if (!m$1) throw new TypeError("Invalid comparator: " + comp);
					this.operator = void 0 !== m$1[1] ? m$1[1] : "", "=" === this.operator && (this.operator = ""), m$1[2] ? this.semver = new SemVer(m$1[2], this.options.loose) : this.semver = ANY;
				}, Comparator.prototype.toString = function() {
					return this.value;
				}, Comparator.prototype.test = function(version$1) {
					if (debug$5("Comparator.test", version$1, this.options.loose), this.semver === ANY || version$1 === ANY) return !0;
					if ("string" == typeof version$1) try {
						version$1 = new SemVer(version$1, this.options);
					} catch (er) {
						return !1;
					}
					return cmp(version$1, this.operator, this.semver, this.options);
				}, Comparator.prototype.intersects = function(comp, options) {
					if (!(comp instanceof Comparator)) throw new TypeError("a Comparator is required");
					var rangeTmp;
					if (options && "object" == typeof options || (options = {
						loose: !!options,
						includePrerelease: !1
					}), "" === this.operator) return "" === this.value || (rangeTmp = new Range(comp.value, options), satisfies(this.value, rangeTmp, options));
					if ("" === comp.operator) return "" === comp.value || (rangeTmp = new Range(this.value, options), satisfies(comp.semver, rangeTmp, options));
					var sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
					return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
				}, exports$1.Range = Range, Range.prototype.format = function() {
					return this.range = this.set.map(function(comps) {
						return comps.join(" ").trim();
					}).join("||").trim(), this.range;
				}, Range.prototype.toString = function() {
					return this.range;
				}, Range.prototype.parseRange = function(range) {
					var loose = this.options.loose, hr = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE];
					range = range.replace(hr, hyphenReplace), debug$5("hyphen replace", range), range = range.replace(safeRe[t.COMPARATORTRIM], "$1$2$3"), debug$5("comparator trim", range, safeRe[t.COMPARATORTRIM]), range = (range = (range = range.replace(safeRe[t.TILDETRIM], "$1~")).replace(safeRe[t.CARETTRIM], "$1^")).split(/\s+/).join(" ");
					var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR], set = range.split(" ").map(function(comp) {
						return function(comp$1, options) {
							return debug$5("comp", comp$1, options), comp$1 = function(comp$2, options$1) {
								return comp$2.trim().split(/\s+/).map(function(comp$3) {
									return function(comp$4, options$2) {
										debug$5("caret", comp$4, options$2);
										var r$1 = options$2.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET];
										return comp$4.replace(r$1, function(_$2, M$1, m$1, p$1, pr) {
											var ret;
											return debug$5("caret", comp$4, _$2, M$1, m$1, p$1, pr), isX(M$1) ? ret = "" : isX(m$1) ? ret = ">=" + M$1 + ".0.0 <" + (+M$1 + 1) + ".0.0" : isX(p$1) ? ret = "0" === M$1 ? ">=" + M$1 + "." + m$1 + ".0 <" + M$1 + "." + (+m$1 + 1) + ".0" : ">=" + M$1 + "." + m$1 + ".0 <" + (+M$1 + 1) + ".0.0" : pr ? (debug$5("replaceCaret pr", pr), ret = "0" === M$1 ? "0" === m$1 ? ">=" + M$1 + "." + m$1 + "." + p$1 + "-" + pr + " <" + M$1 + "." + m$1 + "." + (+p$1 + 1) : ">=" + M$1 + "." + m$1 + "." + p$1 + "-" + pr + " <" + M$1 + "." + (+m$1 + 1) + ".0" : ">=" + M$1 + "." + m$1 + "." + p$1 + "-" + pr + " <" + (+M$1 + 1) + ".0.0") : (debug$5("no pr"), ret = "0" === M$1 ? "0" === m$1 ? ">=" + M$1 + "." + m$1 + "." + p$1 + " <" + M$1 + "." + m$1 + "." + (+p$1 + 1) : ">=" + M$1 + "." + m$1 + "." + p$1 + " <" + M$1 + "." + (+m$1 + 1) + ".0" : ">=" + M$1 + "." + m$1 + "." + p$1 + " <" + (+M$1 + 1) + ".0.0"), debug$5("caret return", ret), ret;
										});
									}(comp$3, options$1);
								}).join(" ");
							}(comp$1, options), debug$5("caret", comp$1), comp$1 = function(comp$2, options$1) {
								return comp$2.trim().split(/\s+/).map(function(comp$3) {
									return function(comp$4, options$2) {
										var r$1 = options$2.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE];
										return comp$4.replace(r$1, function(_$2, M$1, m$1, p$1, pr) {
											var ret;
											return debug$5("tilde", comp$4, _$2, M$1, m$1, p$1, pr), isX(M$1) ? ret = "" : isX(m$1) ? ret = ">=" + M$1 + ".0.0 <" + (+M$1 + 1) + ".0.0" : isX(p$1) ? ret = ">=" + M$1 + "." + m$1 + ".0 <" + M$1 + "." + (+m$1 + 1) + ".0" : pr ? (debug$5("replaceTilde pr", pr), ret = ">=" + M$1 + "." + m$1 + "." + p$1 + "-" + pr + " <" + M$1 + "." + (+m$1 + 1) + ".0") : ret = ">=" + M$1 + "." + m$1 + "." + p$1 + " <" + M$1 + "." + (+m$1 + 1) + ".0", debug$5("tilde return", ret), ret;
										});
									}(comp$3, options$1);
								}).join(" ");
							}(comp$1, options), debug$5("tildes", comp$1), comp$1 = function(comp$2, options$1) {
								return debug$5("replaceXRanges", comp$2, options$1), comp$2.split(/\s+/).map(function(comp$3) {
									return function(comp$4, options$2) {
										comp$4 = comp$4.trim();
										var r$1 = options$2.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE];
										return comp$4.replace(r$1, function(ret, gtlt, M$1, m$1, p$1, pr) {
											debug$5("xRange", comp$4, ret, gtlt, M$1, m$1, p$1, pr);
											var xM = isX(M$1), xm = xM || isX(m$1), xp = xm || isX(p$1), anyX = xp;
											return "=" === gtlt && anyX && (gtlt = ""), pr = options$2.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m$1 = 0), p$1 = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M$1 = +M$1 + 1, m$1 = 0, p$1 = 0) : (m$1 = +m$1 + 1, p$1 = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M$1 = +M$1 + 1 : m$1 = +m$1 + 1), ret = gtlt + M$1 + "." + m$1 + "." + p$1 + pr) : xm ? ret = ">=" + M$1 + ".0.0" + pr + " <" + (+M$1 + 1) + ".0.0" + pr : xp && (ret = ">=" + M$1 + "." + m$1 + ".0" + pr + " <" + M$1 + "." + (+m$1 + 1) + ".0" + pr), debug$5("xRange return", ret), ret;
										});
									}(comp$3, options$1);
								}).join(" ");
							}(comp$1, options), debug$5("xrange", comp$1), comp$1 = function(comp$2, options$1) {
								return debug$5("replaceStars", comp$2, options$1), comp$2.trim().replace(safeRe[t.STAR], "");
							}(comp$1, options), debug$5("stars", comp$1), comp$1;
						}(comp, this.options);
					}, this).join(" ").split(/\s+/);
					return this.options.loose && (set = set.filter(function(comp) {
						return !!comp.match(compRe);
					})), set = set.map(function(comp) {
						return new Comparator(comp, this.options);
					}, this);
				}, Range.prototype.intersects = function(range, options) {
					if (!(range instanceof Range)) throw new TypeError("a Range is required");
					return this.set.some(function(thisComparators) {
						return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
							return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
								return rangeComparators.every(function(rangeComparator) {
									return thisComparator.intersects(rangeComparator, options);
								});
							});
						});
					});
				}, exports$1.toComparators = function(range, options) {
					return new Range(range, options).set.map(function(comp) {
						return comp.map(function(c) {
							return c.value;
						}).join(" ").trim().split(" ");
					});
				}, Range.prototype.test = function(version$1) {
					if (!version$1) return !1;
					if ("string" == typeof version$1) try {
						version$1 = new SemVer(version$1, this.options);
					} catch (er) {
						return !1;
					}
					for (var i$1 = 0; i$1 < this.set.length; i$1++) if (testSet(this.set[i$1], version$1, this.options)) return !0;
					return !1;
				}, exports$1.satisfies = satisfies, exports$1.maxSatisfying = function(versions, range, options) {
					var max = null, maxSV = null;
					try {
						var rangeObj = new Range(range, options);
					} catch (er) {
						return null;
					}
					return versions.forEach(function(v$1) {
						rangeObj.test(v$1) && (max && -1 !== maxSV.compare(v$1) || (maxSV = new SemVer(max = v$1, options)));
					}), max;
				}, exports$1.minSatisfying = function(versions, range, options) {
					var min = null, minSV = null;
					try {
						var rangeObj = new Range(range, options);
					} catch (er) {
						return null;
					}
					return versions.forEach(function(v$1) {
						rangeObj.test(v$1) && (min && 1 !== minSV.compare(v$1) || (minSV = new SemVer(min = v$1, options)));
					}), min;
				}, exports$1.minVersion = function(range, loose) {
					range = new Range(range, loose);
					var minver = new SemVer("0.0.0");
					if (range.test(minver)) return minver;
					if (minver = new SemVer("0.0.0-0"), range.test(minver)) return minver;
					minver = null;
					for (var i$1 = 0; i$1 < range.set.length; ++i$1) range.set[i$1].forEach(function(comparator) {
						var compver = new SemVer(comparator.semver.version);
						switch (comparator.operator) {
							case ">": 0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
							case "":
							case ">=":
								minver && !gt(minver, compver) || (minver = compver);
								break;
							case "<":
							case "<=": break;
							default: throw new Error("Unexpected operation: " + comparator.operator);
						}
					});
					if (minver && range.test(minver)) return minver;
					return null;
				}, exports$1.validRange = function(range, options) {
					try {
						return new Range(range, options).range || "*";
					} catch (er) {
						return null;
					}
				}, exports$1.ltr = function(version$1, range, options) {
					return outside(version$1, range, "<", options);
				}, exports$1.gtr = function(version$1, range, options) {
					return outside(version$1, range, ">", options);
				}, exports$1.outside = outside, exports$1.prerelease = function(version$1, options) {
					var parsed = parse$4(version$1, options);
					return parsed && parsed.prerelease.length ? parsed.prerelease : null;
				}, exports$1.intersects = function(r1, r2, options) {
					return r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2);
				}, exports$1.coerce = function(version$1, options) {
					if (version$1 instanceof SemVer) return version$1;
					"number" == typeof version$1 && (version$1 = String(version$1));
					if ("string" != typeof version$1) return null;
					var match = null;
					if ((options = options || {}).rtl) {
						for (var next; (next = safeRe[t.COERCERTL].exec(version$1)) && (!match || match.index + match[0].length !== version$1.length);) match && next.index + next[0].length === match.index + match[0].length || (match = next), safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
						safeRe[t.COERCERTL].lastIndex = -1;
					} else match = version$1.match(safeRe[t.COERCE]);
					if (null === match) return null;
					return parse$4(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
				};
			},
			"./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js": (module$1, __unused_webpack_exports, __webpack_require__$1) => {
				"use strict";
				const os$5 = __webpack_require__$1("os"), tty$1 = __webpack_require__$1("tty"), hasFlag = __webpack_require__$1("./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"), { env: env$2 } = process;
				let forceColor;
				function translateLevel(level) {
					return 0 !== level && {
						level,
						hasBasic: !0,
						has256: level >= 2,
						has16m: level >= 3
					};
				}
				function supportsColor(haveStream, streamIsTTY) {
					if (0 === forceColor) return 0;
					if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) return 3;
					if (hasFlag("color=256")) return 2;
					if (haveStream && !streamIsTTY && void 0 === forceColor) return 0;
					const min = forceColor || 0;
					if ("dumb" === env$2.TERM) return min;
					if ("win32" === process.platform) {
						const osRelease = os$5.release().split(".");
						return Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
					}
					if ("CI" in env$2) return [
						"TRAVIS",
						"CIRCLECI",
						"APPVEYOR",
						"GITLAB_CI",
						"GITHUB_ACTIONS",
						"BUILDKITE"
					].some((sign) => sign in env$2) || "codeship" === env$2.CI_NAME ? 1 : min;
					if ("TEAMCITY_VERSION" in env$2) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$2.TEAMCITY_VERSION) ? 1 : 0;
					if ("truecolor" === env$2.COLORTERM) return 3;
					if ("TERM_PROGRAM" in env$2) {
						const version$1 = parseInt((env$2.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
						switch (env$2.TERM_PROGRAM) {
							case "iTerm.app": return version$1 >= 3 ? 3 : 2;
							case "Apple_Terminal": return 2;
						}
					}
					return /-256(color)?$/i.test(env$2.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$2.TERM) || "COLORTERM" in env$2 ? 1 : min;
				}
				hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never") ? forceColor = 0 : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (forceColor = 1), "FORCE_COLOR" in env$2 && (forceColor = "true" === env$2.FORCE_COLOR ? 1 : "false" === env$2.FORCE_COLOR ? 0 : 0 === env$2.FORCE_COLOR.length ? 1 : Math.min(parseInt(env$2.FORCE_COLOR, 10), 3)), module$1.exports = {
					supportsColor: function(stream$2) {
						return translateLevel(supportsColor(stream$2, stream$2 && stream$2.isTTY));
					},
					stdout: translateLevel(supportsColor(!0, tty$1.isatty(1))),
					stderr: translateLevel(supportsColor(!0, tty$1.isatty(2)))
				};
			},
			assert: (module$1) => {
				"use strict";
				module$1.exports = __require("assert");
			},
			fs: (module$1) => {
				"use strict";
				module$1.exports = __require("fs");
			},
			module: (module$1) => {
				"use strict";
				module$1.exports = __require("module");
			},
			os: (module$1) => {
				"use strict";
				module$1.exports = __require("os");
			},
			path: (module$1) => {
				"use strict";
				module$1.exports = __require("path");
			},
			process: (module$1) => {
				"use strict";
				module$1.exports = __require("process");
			},
			tty: (module$1) => {
				"use strict";
				module$1.exports = __require("tty");
			},
			url: (module$1) => {
				"use strict";
				module$1.exports = __require("url");
			},
			util: (module$1) => {
				"use strict";
				module$1.exports = __require("util");
			},
			v8: (module$1) => {
				"use strict";
				module$1.exports = __require("v8");
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.assertSimpleType = assertSimpleType, exports$1.makeStrongCache = makeStrongCache, exports$1.makeStrongCacheSync = function(handler) {
					return synchronize(makeStrongCache(handler));
				}, exports$1.makeWeakCache = makeWeakCache, exports$1.makeWeakCacheSync = function(handler) {
					return synchronize(makeWeakCache(handler));
				};
				var _async = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js");
				const synchronize = (gen) => _gensync()(gen).sync;
				function* genTrue() {
					return !0;
				}
				function makeWeakCache(handler) {
					return makeCachedFunction(WeakMap, handler);
				}
				function makeStrongCache(handler) {
					return makeCachedFunction(Map, handler);
				}
				function makeCachedFunction(CallCache, handler) {
					const callCacheSync = new CallCache(), callCacheAsync = new CallCache(), futureCache = new CallCache();
					return function* (arg, data) {
						const asyncContext = yield* (0, _async.isAsync)(), callCache = asyncContext ? callCacheAsync : callCacheSync, cached = yield* function* (asyncContext$1, callCache$1, futureCache$1, arg$1, data$1) {
							const cached$1 = yield* getCachedValue(callCache$1, arg$1, data$1);
							if (cached$1.valid) return cached$1;
							if (asyncContext$1) {
								const cached$2 = yield* getCachedValue(futureCache$1, arg$1, data$1);
								if (cached$2.valid) return {
									valid: !0,
									value: yield* (0, _async.waitFor)(cached$2.value.promise)
								};
							}
							return {
								valid: !1,
								value: null
							};
						}(asyncContext, callCache, futureCache, arg, data);
						if (cached.valid) return cached.value;
						const cache = new CacheConfigurator(data), handlerResult = handler(arg, cache);
						let finishLock, value$1;
						return value$1 = (0, _util.isIterableIterator)(handlerResult) ? yield* (0, _async.onFirstPause)(handlerResult, () => {
							finishLock = function(config$2, futureCache$1, arg$1) {
								const finishLock$1 = new Lock();
								return updateFunctionCache(futureCache$1, config$2, arg$1, finishLock$1), finishLock$1;
							}(cache, futureCache, arg);
						}) : handlerResult, updateFunctionCache(callCache, cache, arg, value$1), finishLock && (futureCache.delete(arg), finishLock.release(value$1)), value$1;
					};
				}
				function* getCachedValue(cache, arg, data) {
					const cachedValue = cache.get(arg);
					if (cachedValue) {
						for (const { value: value$1, valid } of cachedValue) if (yield* valid(data)) return {
							valid: !0,
							value: value$1
						};
					}
					return {
						valid: !1,
						value: null
					};
				}
				function updateFunctionCache(cache, config$2, arg, value$1) {
					config$2.configured() || config$2.forever();
					let cachedValue = cache.get(arg);
					switch (config$2.deactivate(), config$2.mode()) {
						case "forever":
							cachedValue = [{
								value: value$1,
								valid: genTrue
							}], cache.set(arg, cachedValue);
							break;
						case "invalidate":
							cachedValue = [{
								value: value$1,
								valid: config$2.validator()
							}], cache.set(arg, cachedValue);
							break;
						case "valid": cachedValue ? cachedValue.push({
							value: value$1,
							valid: config$2.validator()
						}) : (cachedValue = [{
							value: value$1,
							valid: config$2.validator()
						}], cache.set(arg, cachedValue));
					}
				}
				class CacheConfigurator {
					constructor(data) {
						this._active = !0, this._never = !1, this._forever = !1, this._invalidate = !1, this._configured = !1, this._pairs = [], this._data = void 0, this._data = data;
					}
					simple() {
						return function(cache) {
							function cacheFn(val) {
								if ("boolean" != typeof val) return cache.using(() => assertSimpleType(val()));
								val ? cache.forever() : cache.never();
							}
							return cacheFn.forever = () => cache.forever(), cacheFn.never = () => cache.never(), cacheFn.using = (cb) => cache.using(() => assertSimpleType(cb())), cacheFn.invalidate = (cb) => cache.invalidate(() => assertSimpleType(cb())), cacheFn;
						}(this);
					}
					mode() {
						return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
					}
					forever() {
						if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
						if (this._never) throw new Error("Caching has already been configured with .never()");
						this._forever = !0, this._configured = !0;
					}
					never() {
						if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
						if (this._forever) throw new Error("Caching has already been configured with .forever()");
						this._never = !0, this._configured = !0;
					}
					using(handler) {
						if (!this._active) throw new Error("Cannot change caching after evaluation has completed.");
						if (this._never || this._forever) throw new Error("Caching has already been configured with .never or .forever()");
						this._configured = !0;
						const key = handler(this._data), fn = (0, _async.maybeAsync)(handler, "You appear to be using an async cache handler, but Babel has been called synchronously");
						return (0, _async.isThenable)(key) ? key.then((key$1) => (this._pairs.push([key$1, fn]), key$1)) : (this._pairs.push([key, fn]), key);
					}
					invalidate(handler) {
						return this._invalidate = !0, this.using(handler);
					}
					validator() {
						const pairs = this._pairs;
						return function* (data) {
							for (const [key, fn] of pairs) if (key !== (yield* fn(data))) return !1;
							return !0;
						};
					}
					deactivate() {
						this._active = !1;
					}
					configured() {
						return this._configured;
					}
				}
				function assertSimpleType(value$1) {
					if ((0, _async.isThenable)(value$1)) throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.");
					if (null != value$1 && "string" != typeof value$1 && "boolean" != typeof value$1 && "number" != typeof value$1) throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
					return value$1;
				}
				class Lock {
					constructor() {
						this.released = !1, this.promise = void 0, this._resolve = void 0, this.promise = new Promise((resolve$1) => {
							this._resolve = resolve$1;
						});
					}
					release(value$1) {
						this.released = !0, this._resolve(value$1);
					}
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				function _debug$1() {
					const data = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
					return _debug$1 = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.buildPresetChain = function* (arg, context) {
					const chain = yield* buildPresetChainWalker(arg, context);
					return chain ? {
						plugins: dedupDescriptors(chain.plugins),
						presets: dedupDescriptors(chain.presets),
						options: chain.options.map((o$1) => normalizeOptions(o$1)),
						files: new Set()
					} : null;
				}, exports$1.buildPresetChainWalker = void 0, exports$1.buildRootChain = function* (opts, context) {
					let configReport, babelRcReport;
					const programmaticLogger = new _printer.ConfigPrinter(), programmaticChain = yield* loadProgrammaticChain({
						options: opts,
						dirname: context.cwd
					}, context, void 0, programmaticLogger);
					if (!programmaticChain) return null;
					const programmaticReport = yield* programmaticLogger.output();
					let configFile;
					"string" == typeof opts.configFile ? configFile = yield* (0, _index.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller) : !1 !== opts.configFile && (configFile = yield* (0, _index.findRootConfig)(context.root, context.envName, context.caller));
					let { babelrc, babelrcRoots } = opts, babelrcRootsDirectory = context.cwd;
					const configFileChain = emptyChain(), configFileLogger = new _printer.ConfigPrinter();
					if (configFile) {
						const validatedFile = validateConfigFile(configFile), result = yield* loadFileChain(validatedFile, context, void 0, configFileLogger);
						if (!result) return null;
						configReport = yield* configFileLogger.output(), void 0 === babelrc && (babelrc = validatedFile.options.babelrc), void 0 === babelrcRoots && (babelrcRootsDirectory = validatedFile.dirname, babelrcRoots = validatedFile.options.babelrcRoots), mergeChain(configFileChain, result);
					}
					let ignoreFile, babelrcFile, isIgnored = !1;
					const fileChain = emptyChain();
					if ((!0 === babelrc || void 0 === babelrc) && "string" == typeof context.filename) {
						const pkgData = yield* (0, _index.findPackageData)(context.filename);
						if (pkgData && function(context$1, pkgData$1, babelrcRoots$1, babelrcRootsDirectory$1) {
							if ("boolean" == typeof babelrcRoots$1) return babelrcRoots$1;
							const absoluteRoot = context$1.root;
							if (void 0 === babelrcRoots$1) return pkgData$1.directories.includes(absoluteRoot);
							let babelrcPatterns = babelrcRoots$1;
							Array.isArray(babelrcPatterns) || (babelrcPatterns = [babelrcPatterns]);
							if (babelrcPatterns = babelrcPatterns.map((pat) => "string" == typeof pat ? _path().resolve(babelrcRootsDirectory$1, pat) : pat), 1 === babelrcPatterns.length && babelrcPatterns[0] === absoluteRoot) return pkgData$1.directories.includes(absoluteRoot);
							return babelrcPatterns.some((pat) => ("string" == typeof pat && (pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory$1)), pkgData$1.directories.some((directory) => matchPattern(pat, babelrcRootsDirectory$1, directory, context$1))));
						}(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
							if ({ignore: ignoreFile, config: babelrcFile} = yield* (0, _index.findRelativeConfig)(pkgData, context.envName, context.caller), ignoreFile && fileChain.files.add(ignoreFile.filepath), ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname) && (isIgnored = !0), babelrcFile && !isIgnored) {
								const validatedFile = validateBabelrcFile(babelrcFile), babelrcLogger = new _printer.ConfigPrinter(), result = yield* loadFileChain(validatedFile, context, void 0, babelrcLogger);
								result ? (babelRcReport = yield* babelrcLogger.output(), mergeChain(fileChain, result)) : isIgnored = !0;
							}
							babelrcFile && isIgnored && fileChain.files.add(babelrcFile.filepath);
						}
					}
					context.showConfig && console.log(`Babel configs on "${context.filename}" (ascending priority):\n` + [
						configReport,
						babelRcReport,
						programmaticReport
					].filter((x$3) => !!x$3).join("\n\n") + "\n-----End Babel configs-----");
					const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
					return {
						plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),
						presets: isIgnored ? [] : dedupDescriptors(chain.presets),
						options: isIgnored ? [] : chain.options.map((o$1) => normalizeOptions(o$1)),
						fileHandling: isIgnored ? "ignored" : "transpile",
						ignore: ignoreFile || void 0,
						babelrc: babelrcFile || void 0,
						config: configFile || void 0,
						files: chain.files
					};
				};
				var _options = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _patternToRegex = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _printer = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/printer.js"), _rewriteStackTrace = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _caching = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _configDescriptors = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js");
				const debug$5 = _debug$1()("babel:config:config-chain");
				const buildPresetChainWalker = exports$1.buildPresetChainWalker = makeChainWalker({
					root: (preset) => loadPresetDescriptors(preset),
					env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),
					overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index),
					overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName),
					createLogger: () => () => {}
				}), loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors)), loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName))), loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index))), loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));
				const validateConfigFile = (0, _caching.makeWeakCacheSync)((file) => ({
					filepath: file.filepath,
					dirname: file.dirname,
					options: (0, _options.validate)("configfile", file.options, file.filepath)
				})), validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file) => ({
					filepath: file.filepath,
					dirname: file.dirname,
					options: (0, _options.validate)("babelrcfile", file.options, file.filepath)
				})), validateExtendFile = (0, _caching.makeWeakCacheSync)((file) => ({
					filepath: file.filepath,
					dirname: file.dirname,
					options: (0, _options.validate)("extendsfile", file.options, file.filepath)
				})), loadProgrammaticChain = makeChainWalker({
					root: (input) => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors),
					env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName),
					overrides: (input, index) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index),
					overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index, envName),
					createLogger: (input, context, baseLogger) => function(_$2, context$1, baseLogger$1) {
						var _context$caller;
						if (!baseLogger$1) return () => {};
						return baseLogger$1.configure(context$1.showConfig, _printer.ChainFormatter.Programmatic, { callerName: null == (_context$caller = context$1.caller) ? void 0 : _context$caller.name });
					}(0, context, baseLogger)
				}), loadFileChainWalker = makeChainWalker({
					root: (file) => loadFileDescriptors(file),
					env: (file, envName) => loadFileEnvDescriptors(file)(envName),
					overrides: (file, index) => loadFileOverridesDescriptors(file)(index),
					overridesEnv: (file, index, envName) => loadFileOverridesEnvDescriptors(file)(index)(envName),
					createLogger: (file, context, baseLogger) => function(filepath, context$1, baseLogger$1) {
						if (!baseLogger$1) return () => {};
						return baseLogger$1.configure(context$1.showConfig, _printer.ChainFormatter.Config, { filepath });
					}(file.filepath, context, baseLogger)
				});
				function* loadFileChain(input, context, files, baseLogger) {
					const chain = yield* loadFileChainWalker(input, context, files, baseLogger);
					return chain?.files.add(input.filepath), chain;
				}
				const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file) => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors)), loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName))), loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index))), loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));
				function buildRootDescriptors({ dirname: dirname$1, options }, alias, descriptors) {
					return descriptors(dirname$1, options, alias);
				}
				function buildEnvDescriptors({ dirname: dirname$1, options }, alias, descriptors, envName) {
					var _options$env;
					const opts = null == (_options$env = options.env) ? void 0 : _options$env[envName];
					return opts ? descriptors(dirname$1, opts, `${alias}.env["${envName}"]`) : null;
				}
				function buildOverrideDescriptors({ dirname: dirname$1, options }, alias, descriptors, index) {
					var _options$overrides;
					const opts = null == (_options$overrides = options.overrides) ? void 0 : _options$overrides[index];
					if (!opts) throw new Error("Assertion failure - missing override");
					return descriptors(dirname$1, opts, `${alias}.overrides[${index}]`);
				}
				function buildOverrideEnvDescriptors({ dirname: dirname$1, options }, alias, descriptors, index, envName) {
					var _options$overrides2, _override$env;
					const override = null == (_options$overrides2 = options.overrides) ? void 0 : _options$overrides2[index];
					if (!override) throw new Error("Assertion failure - missing override");
					const opts = null == (_override$env = override.env) ? void 0 : _override$env[envName];
					return opts ? descriptors(dirname$1, opts, `${alias}.overrides[${index}].env["${envName}"]`) : null;
				}
				function makeChainWalker({ root, env: env$2, overrides, overridesEnv, createLogger }) {
					return function* (input, context, files = new Set(), baseLogger) {
						const { dirname: dirname$1 } = input, flattenedConfigs = [], rootOpts = root(input);
						if (configIsApplicable(rootOpts, dirname$1, context, input.filepath)) {
							flattenedConfigs.push({
								config: rootOpts,
								envName: void 0,
								index: void 0
							});
							const envOpts = env$2(input, context.envName);
							envOpts && configIsApplicable(envOpts, dirname$1, context, input.filepath) && flattenedConfigs.push({
								config: envOpts,
								envName: context.envName,
								index: void 0
							}), (rootOpts.options.overrides || []).forEach((_$2, index) => {
								const overrideOps = overrides(input, index);
								if (configIsApplicable(overrideOps, dirname$1, context, input.filepath)) {
									flattenedConfigs.push({
										config: overrideOps,
										index,
										envName: void 0
									});
									const overrideEnvOpts = overridesEnv(input, index, context.envName);
									overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname$1, context, input.filepath) && flattenedConfigs.push({
										config: overrideEnvOpts,
										index,
										envName: context.envName
									});
								}
							});
						}
						if (flattenedConfigs.some(({ config: { options: { ignore, only } } }) => shouldIgnore(context, ignore, only, dirname$1))) return null;
						const chain = emptyChain(), logger = createLogger(input, context, baseLogger);
						for (const { config: config$2, index, envName } of flattenedConfigs) {
							if (!(yield* mergeExtendsChain(chain, config$2.options, dirname$1, context, files, baseLogger))) return null;
							logger(config$2, index, envName), yield* mergeChainOpts(chain, config$2);
						}
						return chain;
					};
				}
				function* mergeExtendsChain(chain, opts, dirname$1, context, files, baseLogger) {
					if (void 0 === opts.extends) return !0;
					const file = yield* (0, _index.loadConfig)(opts.extends, dirname$1, context.envName, context.caller);
					if (files.has(file)) throw new Error(`Configuration cycle detected loading ${file.filepath}.\nFile already loaded following the config chain:\n` + Array.from(files, (file$1) => ` - ${file$1.filepath}`).join("\n"));
					files.add(file);
					const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
					return files.delete(file), !!fileChain && (mergeChain(chain, fileChain), !0);
				}
				function mergeChain(target, source) {
					target.options.push(...source.options), target.plugins.push(...source.plugins), target.presets.push(...source.presets);
					for (const file of source.files) target.files.add(file);
					return target;
				}
				function* mergeChainOpts(target, { options, plugins, presets }) {
					return target.options.push(options), target.plugins.push(...yield* plugins()), target.presets.push(...yield* presets()), target;
				}
				function emptyChain() {
					return {
						options: [],
						presets: [],
						plugins: [],
						files: new Set()
					};
				}
				function normalizeOptions(opts) {
					const options = Object.assign({}, opts);
					return delete options.extends, delete options.env, delete options.overrides, delete options.plugins, delete options.presets, delete options.passPerPreset, delete options.ignore, delete options.only, delete options.test, delete options.include, delete options.exclude, hasOwnProperty.call(options, "sourceMap") && (options.sourceMaps = options.sourceMap, delete options.sourceMap), options;
				}
				function dedupDescriptors(items) {
					const map = new Map(), descriptors = [];
					for (const item of items) if ("function" == typeof item.value) {
						const fnKey = item.value;
						let nameMap = map.get(fnKey);
						nameMap || (nameMap = new Map(), map.set(fnKey, nameMap));
						let desc = nameMap.get(item.name);
						desc ? desc.value = item : (desc = { value: item }, descriptors.push(desc), item.ownPass || nameMap.set(item.name, desc));
					} else descriptors.push({ value: item });
					return descriptors.reduce((acc, desc) => (acc.push(desc.value), acc), []);
				}
				function configIsApplicable({ options }, dirname$1, context, configName) {
					return (void 0 === options.test || configFieldIsApplicable(context, options.test, dirname$1, configName)) && (void 0 === options.include || configFieldIsApplicable(context, options.include, dirname$1, configName)) && (void 0 === options.exclude || !configFieldIsApplicable(context, options.exclude, dirname$1, configName));
				}
				function configFieldIsApplicable(context, test, dirname$1, configName) {
					return matchesPatterns(context, Array.isArray(test) ? test : [test], dirname$1, configName);
				}
				function ignoreListReplacer(_key, value$1) {
					return value$1 instanceof RegExp ? String(value$1) : value$1;
				}
				function shouldIgnore(context, ignore, only, dirname$1) {
					if (ignore && matchesPatterns(context, ignore, dirname$1)) {
						var _context$filename;
						const message = `No config is applied to "${null != (_context$filename = context.filename) ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore, ignoreListReplacer)}\` from "${dirname$1}"`;
						return debug$5(message), context.showConfig && console.log(message), !0;
					}
					if (only && !matchesPatterns(context, only, dirname$1)) {
						var _context$filename2;
						const message = `No config is applied to "${null != (_context$filename2 = context.filename) ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname$1}"`;
						return debug$5(message), context.showConfig && console.log(message), !0;
					}
					return !1;
				}
				function matchesPatterns(context, patterns, dirname$1, configName) {
					return patterns.some((pattern) => matchPattern(pattern, dirname$1, context.filename, context, configName));
				}
				function matchPattern(pattern, dirname$1, pathToTest, context, configName) {
					if ("function" == typeof pattern) return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, {
						dirname: dirname$1,
						envName: context.envName,
						caller: context.caller
					});
					if ("string" != typeof pathToTest) throw new _configError.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel", configName);
					return "string" == typeof pattern && (pattern = (0, _patternToRegex.default)(pattern, dirname$1)), pattern.test(pathToTest);
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.createCachedDescriptors = function(dirname$1, options, alias) {
					const { plugins, presets, passPerPreset } = options;
					return {
						options: optionsWithResolvedBrowserslistConfigFile(options, dirname$1),
						plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname$1)(alias) : () => handlerOf([]),
						presets: presets ? () => createCachedPresetDescriptors(presets, dirname$1)(alias)(!!passPerPreset) : () => handlerOf([])
					};
				}, exports$1.createDescriptor = createDescriptor, exports$1.createUncachedDescriptors = function(dirname$1, options, alias) {
					return {
						options: optionsWithResolvedBrowserslistConfigFile(options, dirname$1),
						plugins: (0, _functional.once)(() => createPluginDescriptors(options.plugins || [], dirname$1, alias)),
						presets: (0, _functional.once)(() => createPresetDescriptors(options.presets || [], dirname$1, alias, !!options.passPerPreset))
					};
				};
				var _functional = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/functional.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _item = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _caching = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _resolveTargets = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js");
				function* handlerOf(value$1) {
					return value$1;
				}
				function optionsWithResolvedBrowserslistConfigFile(options, dirname$1) {
					return "string" == typeof options.browserslistConfigFile && (options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname$1)), options;
				}
				const PRESET_DESCRIPTOR_CACHE = new WeakMap(), createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
					const dirname$1 = cache.using((dir) => dir);
					return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
						return (yield* createPresetDescriptors(items, dirname$1, alias, passPerPreset)).map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
					}));
				}), PLUGIN_DESCRIPTOR_CACHE = new WeakMap(), createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
					const dirname$1 = cache.using((dir) => dir);
					return (0, _caching.makeStrongCache)(function* (alias) {
						return (yield* createPluginDescriptors(items, dirname$1, alias)).map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
					});
				}), DEFAULT_OPTIONS$1 = {};
				function loadCachedDescriptor(cache, desc) {
					const { value: value$1, options = DEFAULT_OPTIONS$1 } = desc;
					if (!1 === options) return desc;
					let cacheByOptions = cache.get(value$1);
					cacheByOptions || (cacheByOptions = new WeakMap(), cache.set(value$1, cacheByOptions));
					let possibilities = cacheByOptions.get(options);
					if (possibilities || (possibilities = [], cacheByOptions.set(options, possibilities)), !possibilities.includes(desc)) {
						const matches = possibilities.filter((possibility) => {
							return b$2 = desc, (a = possibility).name === b$2.name && a.value === b$2.value && a.options === b$2.options && a.dirname === b$2.dirname && a.alias === b$2.alias && a.ownPass === b$2.ownPass && (null == (_a$file = a.file) ? void 0 : _a$file.request) === (null == (_b$file = b$2.file) ? void 0 : _b$file.request) && (null == (_a$file2 = a.file) ? void 0 : _a$file2.resolved) === (null == (_b$file2 = b$2.file) ? void 0 : _b$file2.resolved);
							var a, b$2, _a$file, _b$file, _a$file2, _b$file2;
						});
						if (matches.length > 0) return matches[0];
						possibilities.push(desc);
					}
					return desc;
				}
				function* createPresetDescriptors(items, dirname$1, alias, passPerPreset) {
					return yield* createDescriptors("preset", items, dirname$1, alias, passPerPreset);
				}
				function* createPluginDescriptors(items, dirname$1, alias) {
					return yield* createDescriptors("plugin", items, dirname$1, alias);
				}
				function* createDescriptors(type$1, items, dirname$1, alias, ownPass) {
					const descriptors = yield* _gensync().all(items.map((item, index) => createDescriptor(item, dirname$1, {
						type: type$1,
						alias: `${alias}$${index}`,
						ownPass: !!ownPass
					})));
					return function(items$1) {
						const map = new Map();
						for (const item of items$1) {
							if ("function" != typeof item.value) continue;
							let nameMap = map.get(item.value);
							if (nameMap || (nameMap = new Set(), map.set(item.value, nameMap)), nameMap.has(item.name)) {
								const conflicts = items$1.filter((i) => i.value === item.value);
								throw new Error([
									"Duplicate plugin/preset detected.",
									"If you'd like to use two separate instances of a plugin,",
									"they need separate names, e.g.",
									"",
									"  plugins: [",
									"    ['some-plugin', {}],",
									"    ['some-plugin', {}, 'some unique name'],",
									"  ]",
									"",
									"Duplicates detected are:",
									`${JSON.stringify(conflicts, null, 2)}`
								].join("\n"));
							}
							nameMap.add(item.name);
						}
					}(descriptors), descriptors;
				}
				function* createDescriptor(pair, dirname$1, { type: type$1, alias, ownPass }) {
					const desc = (0, _item.getItemDescriptor)(pair);
					if (desc) return desc;
					let name, options, file, value$1 = pair;
					Array.isArray(value$1) && (3 === value$1.length ? [value$1, options, name] = value$1 : [value$1, options] = value$1);
					let filepath = null;
					if ("string" == typeof value$1) {
						if ("string" != typeof type$1) throw new Error("To resolve a string-based item, the type of item must be given");
						const resolver = "plugin" === type$1 ? _index.loadPlugin : _index.loadPreset, request$1 = value$1;
						({filepath, value: value$1} = yield* resolver(value$1, dirname$1)), file = {
							request: request$1,
							resolved: filepath
						};
					}
					if (!value$1) throw new Error(`Unexpected falsy value: ${String(value$1)}`);
					if ("object" == typeof value$1 && value$1.__esModule) {
						if (!value$1.default) throw new Error("Must export a default export when using ES6 modules.");
						value$1 = value$1.default;
					}
					if ("object" != typeof value$1 && "function" != typeof value$1) throw new Error(`Unsupported format: ${typeof value$1}. Expected an object or a function.`);
					if (null !== filepath && "object" == typeof value$1 && value$1) throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
					return {
						name,
						alias: filepath || alias,
						value: value$1,
						options,
						dirname: dirname$1,
						ownPass,
						file
					};
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/configuration.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _debug$1() {
					const data = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
					return _debug$1 = function() {
						return data;
					}, data;
				}
				function _fs() {
					const data = __webpack_require__$1("fs");
					return _fs = function() {
						return data;
					}, data;
				}
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				function _json() {
					const data = __webpack_require__$1("./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs");
					return _json = function() {
						return data;
					}, data;
				}
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.ROOT_CONFIG_FILENAMES = void 0, exports$1.findConfigUpwards = function(rootDir) {
					let dirname$1 = rootDir;
					for (;;) {
						for (const filename of ROOT_CONFIG_FILENAMES) if (_fs().existsSync(_path().join(dirname$1, filename))) return dirname$1;
						const nextDir = _path().dirname(dirname$1);
						if (dirname$1 === nextDir) break;
						dirname$1 = nextDir;
					}
					return null;
				}, exports$1.findRelativeConfig = function* (packageData$1, envName, caller) {
					let config$2 = null, ignore = null;
					const dirname$1 = _path().dirname(packageData$1.filepath);
					for (const loc of packageData$1.directories) {
						var _packageData$pkg;
						if (!config$2) config$2 = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, (null == (_packageData$pkg = packageData$1.pkg) ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData$1.pkg) : null);
						if (!ignore) {
							const ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);
							ignore = yield* readIgnoreConfig(ignoreLoc), ignore && debug$5("Found ignore %o from %o.", ignore.filepath, dirname$1);
						}
					}
					return {
						config: config$2,
						ignore
					};
				}, exports$1.findRootConfig = function(dirname$1, envName, caller) {
					return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname$1, envName, caller);
				}, exports$1.loadConfig = function* (name, dirname$1, envName, caller) {
					const filepath = (v$1 = process.versions.node, w$1 = "8.9", v$1 = v$1.split("."), w$1 = w$1.split("."), +v$1[0] > +w$1[0] || v$1[0] == w$1[0] && +v$1[1] >= +w$1[1] ? __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r$1, { paths: [b$2] }, M$1 = __webpack_require__$1("module")) => {
						let f = M$1._findPath(r$1, M$1._nodeModulePaths(b$2).concat(b$2));
						if (f) return f;
						throw f = new Error(`Cannot resolve module '${r$1}'`), f.code = "MODULE_NOT_FOUND", f;
					})(name, { paths: [dirname$1] }), conf = yield* readConfig(filepath, envName, caller);
					var v$1, w$1;
					if (!conf) throw new _configError.default("Config file contains no configuration data", filepath);
					return debug$5("Loaded config %o from %o.", name, dirname$1), conf;
				}, exports$1.resolveShowConfigPath = function* (dirname$1) {
					const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
					if (null != targetPath) {
						const absolutePath = _path().resolve(dirname$1, targetPath);
						if (!(yield* fs$3.stat(absolutePath)).isFile()) throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
						return absolutePath;
					}
					return null;
				};
				var _caching = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _configApi = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js"), _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js"), _moduleTypes = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js"), _patternToRegex = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _configError = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), fs$3 = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js"), _rewriteStackTrace = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _async = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
				const debug$5 = _debug$1()("babel:config:loading:files:configuration"), ROOT_CONFIG_FILENAMES = exports$1.ROOT_CONFIG_FILENAMES = [
					"babel.config.js",
					"babel.config.cjs",
					"babel.config.mjs",
					"babel.config.json",
					"babel.config.cts"
				], RELATIVE_CONFIG_FILENAMES = [
					".babelrc",
					".babelrc.js",
					".babelrc.cjs",
					".babelrc.mjs",
					".babelrc.json",
					".babelrc.cts"
				], BABELIGNORE_FILENAME = ".babelignore", runConfig = (0, _caching.makeWeakCache)(function* (options, cache) {
					return yield* [], {
						options: (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)),
						cacheNeedsConfiguration: !cache.configured()
					};
				});
				function* readConfigCode(filepath, data) {
					if (!_fs().existsSync(filepath)) return null;
					let options = yield* (0, _moduleTypes.default)(filepath, (yield* (0, _async.isAsync)()) ? "auto" : "require", "You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously or when using the Node.js `--experimental-require-module` flag.", "You appear to be using a configuration file that contains top-level await, which is only supported when running Babel asynchronously."), cacheNeedsConfiguration = !1;
					if ("function" == typeof options && ({options, cacheNeedsConfiguration} = yield* runConfig(options, data)), !options || "object" != typeof options || Array.isArray(options)) throw new _configError.default("Configuration should be an exported JavaScript object.", filepath);
					if ("function" == typeof options.then) throw null == options.catch || options.catch(() => {}), new _configError.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously return your config.", filepath);
					return cacheNeedsConfiguration && function(filepath$1) {
						throw new _configError.default("Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured\nfor various types of caching, using the first param of their handler functions:\n\nmodule.exports = function(api) {\n  // The API exposes the following:\n\n  // Cache the returned value forever and don't call this function again.\n  api.cache(true);\n\n  // Don't cache at all. Not recommended because it will be very slow.\n  api.cache(false);\n\n  // Cached based on the value of some function. If this function returns a value different from\n  // a previously-encountered value, the plugins will re-evaluate.\n  var env = api.cache(() => process.env.NODE_ENV);\n\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\n  // any possible NODE_ENV value that might come up during plugin execution.\n  var isProd = api.cache(() => process.env.NODE_ENV === \"production\");\n\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\n  // previous instance whenever something changes, you may use:\n  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === \"production\");\n\n  // Note, we also expose the following more-verbose versions of the above examples:\n  api.cache.forever(); // api.cache(true)\n  api.cache.never();   // api.cache(false)\n  api.cache.using(fn); // api.cache(fn)\n\n  // Return the value that will be cached.\n  return { };\n};", filepath$1);
					}(filepath), function(options$1, filepath$1) {
						let configFilesByFilepath = cfboaf.get(options$1);
						configFilesByFilepath || cfboaf.set(options$1, configFilesByFilepath = new Map());
						let configFile = configFilesByFilepath.get(filepath$1);
						configFile || (configFile = {
							filepath: filepath$1,
							dirname: _path().dirname(filepath$1),
							options: options$1
						}, configFilesByFilepath.set(filepath$1, configFile));
						return configFile;
					}(options, filepath);
				}
				const cfboaf = new WeakMap();
				const packageToBabelConfig = (0, _caching.makeWeakCacheSync)((file) => {
					const babel = file.options.babel;
					if (void 0 === babel) return null;
					if ("object" != typeof babel || Array.isArray(babel) || null === babel) throw new _configError.default(".babel property must be an object", file.filepath);
					return {
						filepath: file.filepath,
						dirname: file.dirname,
						options: babel
					};
				}), readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {
					let options;
					try {
						options = _json().parse(content);
					} catch (err) {
						throw new _configError.default(`Error while parsing config - ${err.message}`, filepath);
					}
					if (!options) throw new _configError.default("No config detected", filepath);
					if ("object" != typeof options) throw new _configError.default("Config returned typeof " + typeof options, filepath);
					if (Array.isArray(options)) throw new _configError.default("Expected config object but found array", filepath);
					return delete options.$schema, {
						filepath,
						dirname: _path().dirname(filepath),
						options
					};
				}), readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {
					const ignoreDir = _path().dirname(filepath), ignorePatterns = content.split("\n").map((line) => line.replace(/#.*$/, "").trim()).filter(Boolean);
					for (const pattern of ignorePatterns) if ("!" === pattern[0]) throw new _configError.default("Negation of file paths is not supported.", filepath);
					return {
						filepath,
						dirname: _path().dirname(filepath),
						ignore: ignorePatterns.map((pattern) => (0, _patternToRegex.default)(pattern, ignoreDir))
					};
				});
				function* loadOneConfig(names, dirname$1, envName, caller, previousConfig = null) {
					const config$2 = (yield* _gensync().all(names.map((filename) => readConfig(_path().join(dirname$1, filename), envName, caller)))).reduce((previousConfig$1, config$3) => {
						if (config$3 && previousConfig$1) throw new _configError.default(`Multiple configuration files found. Please remove one:\n - ${_path().basename(previousConfig$1.filepath)}\n - ${config$3.filepath}\nfrom ${dirname$1}`);
						return config$3 || previousConfig$1;
					}, previousConfig);
					return config$2 && debug$5("Found configuration %o from %o.", config$2.filepath, dirname$1), config$2;
				}
				function readConfig(filepath, envName, caller) {
					switch (_path().extname(filepath)) {
						case ".js":
						case ".cjs":
						case ".mjs":
						case ".cts": return readConfigCode(filepath, {
							envName,
							caller
						});
						default: return readConfigJSON5(filepath);
					}
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/import.cjs": (module$1, __unused_webpack_exports, __webpack_require__$1) => {
				module$1.exports = function(filepath) {
					return __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive")(filepath);
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), Object.defineProperty(exports$1, "ROOT_CONFIG_FILENAMES", {
					enumerable: !0,
					get: function() {
						return _configuration.ROOT_CONFIG_FILENAMES;
					}
				}), Object.defineProperty(exports$1, "findConfigUpwards", {
					enumerable: !0,
					get: function() {
						return _configuration.findConfigUpwards;
					}
				}), Object.defineProperty(exports$1, "findPackageData", {
					enumerable: !0,
					get: function() {
						return _package.findPackageData;
					}
				}), Object.defineProperty(exports$1, "findRelativeConfig", {
					enumerable: !0,
					get: function() {
						return _configuration.findRelativeConfig;
					}
				}), Object.defineProperty(exports$1, "findRootConfig", {
					enumerable: !0,
					get: function() {
						return _configuration.findRootConfig;
					}
				}), Object.defineProperty(exports$1, "loadConfig", {
					enumerable: !0,
					get: function() {
						return _configuration.loadConfig;
					}
				}), Object.defineProperty(exports$1, "loadPlugin", {
					enumerable: !0,
					get: function() {
						return _plugins.loadPlugin;
					}
				}), Object.defineProperty(exports$1, "loadPreset", {
					enumerable: !0,
					get: function() {
						return _plugins.loadPreset;
					}
				}), Object.defineProperty(exports$1, "resolvePlugin", {
					enumerable: !0,
					get: function() {
						return _plugins.resolvePlugin;
					}
				}), Object.defineProperty(exports$1, "resolvePreset", {
					enumerable: !0,
					get: function() {
						return _plugins.resolvePreset;
					}
				}), Object.defineProperty(exports$1, "resolveShowConfigPath", {
					enumerable: !0,
					get: function() {
						return _configuration.resolveShowConfigPath;
					}
				});
				var _package = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/package.js"), _configuration = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/configuration.js"), _plugins = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/plugins.js");
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function* (filepath, loader, esmError, tlaError) {
					var _async2;
					let async, ext = _path().extname(filepath);
					SUPPORTED_EXTENSIONS.has(ext) || (ext = ".js");
					switch (`${loader} ${ext}`) {
						case "require .cjs":
						case "auto .cjs": return loadCjsDefault(filepath, arguments[2]);
						case "require .cts":
						case "auto .cts": return function(filepath$1) {
							const ext$1 = ".cts", hasTsSupport = !!(__webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".ts"] || __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".cts"] || __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".mts"]);
							let handler;
							if (!hasTsSupport) {
								const opts = {
									babelrc: !1,
									configFile: !1,
									sourceType: "unambiguous",
									sourceMaps: "inline",
									sourceFileName: _path().basename(filepath$1),
									presets: [[getTSPreset(filepath$1), Object.assign({
										onlyRemoveTypeImports: !0,
										optimizeConstEnums: !0
									}, { allowDeclareFields: !0 })]]
								};
								handler = function(m$1, filename) {
									if (handler && filename.endsWith(ext$1)) try {
										return m$1._compile((0, _transformFile.transformFileSync)(filename, Object.assign({}, opts, { filename })).code, filename);
									} catch (error$1) {
										if (!hasTsSupport) {
											const packageJson$1 = __webpack_require__$1("./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/package.json");
											_semver().lt(packageJson$1.version, "7.21.4") && console.error("`.cts` configuration file failed to load, please try to update `@babel/preset-typescript`.");
										}
										throw error$1;
									}
									return __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".js"](m$1, filename);
								}, __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext$1] = handler;
							}
							try {
								return loadCjsDefault(filepath$1);
							} finally {
								hasTsSupport || (__webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext$1] === handler && delete __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext$1], handler = void 0);
							}
						}(filepath);
						case "auto .js":
						case "require .js":
						case "require .mjs": try {
							return loadCjsDefault(filepath, arguments[2]);
						} catch (e$1) {
							var _async;
							if ("ERR_REQUIRE_ASYNC_MODULE" === e$1.code || "ERR_REQUIRE_CYCLE_MODULE" === e$1.code && asyncModules.has(filepath)) {
								if (asyncModules.add(filepath), !(null != (_async = async) ? _async : async = yield* (0, _async3.isAsync)())) throw new _configError.default(tlaError, filepath);
							} else if ("ERR_REQUIRE_ESM" !== e$1.code && ".mjs" !== ext) throw e$1;
						}
						case "auto .mjs":
							if (null != (_async2 = async) ? _async2 : async = yield* (0, _async3.isAsync)()) return (yield* (0, _async3.waitFor)(loadMjsFromPath(filepath))).default;
							throw new _configError.default(esmError, filepath);
						default: throw new Error("Internal Babel error: unreachable code.");
					}
				}, exports$1.supportsESM = void 0;
				var _async3 = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				function _url() {
					const data = __webpack_require__$1("url");
					return _url = function() {
						return data;
					}, data;
				}
				function _semver() {
					const data = __webpack_require__$1("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
					return _semver = function() {
						return data;
					}, data;
				}
				function _debug$1() {
					const data = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
					return _debug$1 = function() {
						return data;
					}, data;
				}
				var _rewriteStackTrace = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), _transformFile = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js");
				function asyncGeneratorStep(n$1, t, e$1, r$1, o$1, a, c) {
					try {
						var i = n$1[a](c), u$1 = i.value;
					} catch (n$2) {
						return void e$1(n$2);
					}
					i.done ? t(u$1) : Promise.resolve(u$1).then(r$1, o$1);
				}
				const debug$5 = _debug$1()("babel:config:loading:files:module-types");
				try {
					var import_ = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/import.cjs");
				} catch (_unused) {}
				exports$1.supportsESM = _semver().satisfies(process.versions.node, "^12.17 || >=13.2");
				const LOADING_CJS_FILES = new Set();
				function loadCjsDefault(filepath) {
					if (LOADING_CJS_FILES.has(filepath)) return debug$5("Auto-ignoring usage of config %o.", filepath), {};
					let module$1;
					try {
						LOADING_CJS_FILES.add(filepath), module$1 = (0, _rewriteStackTrace.endHiddenCallStack)(__webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive"))(filepath);
					} finally {
						LOADING_CJS_FILES.delete(filepath);
					}
					return null == module$1 || !module$1.__esModule && "Module" !== module$1[Symbol.toStringTag] ? module$1 : module$1.default || (arguments[1] ? module$1 : void 0);
				}
				const loadMjsFromPath = (0, _rewriteStackTrace.endHiddenCallStack)((n = function* (filepath) {
					const url = (0, _url().pathToFileURL)(filepath).toString() + "?import";
					if (!import_) throw new _configError.default("Internal error: Native ECMAScript modules aren't supported by this platform.\n", filepath);
					return yield import_(url);
				}, _loadMjsFromPath = function() {
					var t = this, e$1 = arguments;
					return new Promise(function(r$1, o$1) {
						var a = n.apply(t, e$1);
						function _next(n$1) {
							asyncGeneratorStep(a, r$1, o$1, _next, _throw, "next", n$1);
						}
						function _throw(n$1) {
							asyncGeneratorStep(a, r$1, o$1, _next, _throw, "throw", n$1);
						}
						_next(void 0);
					});
				}, function(_x) {
					return _loadMjsFromPath.apply(this, arguments);
				}));
				var n, _loadMjsFromPath;
				const SUPPORTED_EXTENSIONS = new Set([
					".js",
					".mjs",
					".cjs",
					".cts"
				]), asyncModules = new Set();
				function getTSPreset(filepath) {
					try {
						return __webpack_require__$1("./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/lib/index.js");
					} catch (error$1) {
						if ("MODULE_NOT_FOUND" !== error$1.code) throw error$1;
						let message = "You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please install it!";
						throw process.versions.pnp && (message += "\nIf you are using Yarn Plug'n'Play, you may also need to add the following configuration to your .yarnrc.yml file:\n\npackageExtensions:\n	\"@babel/core@*\":\n		peerDependencies:\n			\"@babel/preset-typescript\": \"*\"\n"), new _configError.default(message, filepath);
					}
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/package.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.findPackageData = function* (filepath) {
					let pkg = null;
					const directories = [];
					let isPackage = !0, dirname$1 = _path().dirname(filepath);
					for (; !pkg && "node_modules" !== _path().basename(dirname$1);) {
						directories.push(dirname$1), pkg = yield* readConfigPackage(_path().join(dirname$1, PACKAGE_FILENAME));
						const nextLoc = _path().dirname(dirname$1);
						if (dirname$1 === nextLoc) {
							isPackage = !1;
							break;
						}
						dirname$1 = nextLoc;
					}
					return {
						filepath,
						directories,
						pkg,
						isPackage
					};
				};
				var _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js"), _configError = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
				const PACKAGE_FILENAME = "package.json", readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
					let options;
					try {
						options = JSON.parse(content);
					} catch (err) {
						throw new _configError.default(`Error while parsing JSON - ${err.message}`, filepath);
					}
					if (!options) throw new Error(`${filepath}: No config detected`);
					if ("object" != typeof options) throw new _configError.default("Config returned typeof " + typeof options, filepath);
					if (Array.isArray(options)) throw new _configError.default("Expected config object but found array", filepath);
					return {
						filepath,
						dirname: _path().dirname(filepath),
						options
					};
				});
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/plugins.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _debug$1() {
					const data = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
					return _debug$1 = function() {
						return data;
					}, data;
				}
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.loadPlugin = function* (name, dirname$1) {
					const { filepath, loader } = resolvePlugin(name, dirname$1, yield* (0, _async.isAsync)()), value$1 = yield* requireModule("plugin", loader, filepath);
					return debug$5("Loaded plugin %o from %o.", name, dirname$1), {
						filepath,
						value: value$1
					};
				}, exports$1.loadPreset = function* (name, dirname$1) {
					const { filepath, loader } = resolvePreset(name, dirname$1, yield* (0, _async.isAsync)()), value$1 = yield* requireModule("preset", loader, filepath);
					return debug$5("Loaded preset %o from %o.", name, dirname$1), {
						filepath,
						value: value$1
					};
				}, exports$1.resolvePreset = exports$1.resolvePlugin = void 0;
				var _async = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _moduleTypes = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js");
				function _url() {
					const data = __webpack_require__$1("url");
					return _url = function() {
						return data;
					}, data;
				}
				var _importMetaResolve = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/vendor/import-meta-resolve.js");
				function _fs() {
					const data = __webpack_require__$1("fs");
					return _fs = function() {
						return data;
					}, data;
				}
				const debug$5 = _debug$1()("babel:config:loading:files:plugins"), EXACT_RE = /^module:/, BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/, BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/, BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/, BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/, OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/, OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/, OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/, resolvePlugin = exports$1.resolvePlugin = resolveStandardizedName.bind(null, "plugin"), resolvePreset = exports$1.resolvePreset = resolveStandardizedName.bind(null, "preset");
				function standardizeName(type$1, name) {
					if (_path().isAbsolute(name)) return name;
					const isPreset = "preset" === type$1;
					return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type$1}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type$1}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type$1}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type$1}`).replace(EXACT_RE, "");
				}
				function* resolveAlternativesHelper(type$1, name) {
					const standardizedName = standardizeName(type$1, name), { error: error$1, value: value$1 } = yield standardizedName;
					if (!error$1) return value$1;
					if ("MODULE_NOT_FOUND" !== error$1.code) throw error$1;
					standardizedName === name || (yield name).error || (error$1.message += `\n- If you want to resolve "${name}", use "module:${name}"`), (yield standardizeName(type$1, "@babel/" + name)).error || (error$1.message += `\n- Did you mean "@babel/${name}"?`);
					const oppositeType = "preset" === type$1 ? "plugin" : "preset";
					if ((yield standardizeName(oppositeType, name)).error || (error$1.message += `\n- Did you accidentally pass a ${oppositeType} as a ${type$1}?`), "plugin" === type$1) {
						const transformName = standardizedName.replace("-proposal-", "-transform-");
						transformName === standardizedName || (yield transformName).error || (error$1.message += `\n- Did you mean "${transformName}"?`);
					}
					throw error$1.message += "\n\nMake sure that all the Babel plugins and presets you are using\nare defined as dependencies or devDependencies in your package.json\nfile. It's possible that the missing plugin is loaded by a preset\nyou are using that forgot to add the plugin to its dependencies: you\ncan workaround this problem by explicitly adding the missing package\nto your top-level package.json.\n", error$1;
				}
				function tryRequireResolve(id, dirname$1) {
					try {
						return dirname$1 ? {
							error: null,
							value: (v$1 = process.versions.node, w$1 = "8.9", v$1 = v$1.split("."), w$1 = w$1.split("."), +v$1[0] > +w$1[0] || v$1[0] == w$1[0] && +v$1[1] >= +w$1[1] ? __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r$1, { paths: [b$2] }, M$1 = __webpack_require__$1("module")) => {
								let f = M$1._findPath(r$1, M$1._nodeModulePaths(b$2).concat(b$2));
								if (f) return f;
								throw f = new Error(`Cannot resolve module '${r$1}'`), f.code = "MODULE_NOT_FOUND", f;
							})(id, { paths: [dirname$1] })
						} : {
							error: null,
							value: __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve(id)
						};
					} catch (error$1) {
						return {
							error: error$1,
							value: null
						};
					}
					var v$1, w$1;
				}
				function tryImportMetaResolve(id, options) {
					try {
						return {
							error: null,
							value: (0, _importMetaResolve.resolve)(id, options)
						};
					} catch (error$1) {
						return {
							error: error$1,
							value: null
						};
					}
				}
				function resolveStandardizedNameForRequire(type$1, name, dirname$1) {
					const it = resolveAlternativesHelper(type$1, name);
					let res = it.next();
					for (; !res.done;) res = it.next(tryRequireResolve(res.value, dirname$1));
					return {
						loader: "require",
						filepath: res.value
					};
				}
				function resolveStandardizedName(type$1, name, dirname$1, allowAsync) {
					if (!_moduleTypes.supportsESM || !allowAsync) return resolveStandardizedNameForRequire(type$1, name, dirname$1);
					try {
						const resolved = function(type$2, name$1, dirname$2) {
							const parentUrl = (0, _url().pathToFileURL)(_path().join(dirname$2, "./babel-virtual-resolve-base.js")).href, it = resolveAlternativesHelper(type$2, name$1);
							let res = it.next();
							for (; !res.done;) res = it.next(tryImportMetaResolve(res.value, parentUrl));
							return {
								loader: "auto",
								filepath: (0, _url().fileURLToPath)(res.value)
							};
						}(type$1, name, dirname$1);
						if (!(0, _fs().existsSync)(resolved.filepath)) throw Object.assign(new Error(`Could not resolve "${name}" in file ${dirname$1}.`), { type: "MODULE_NOT_FOUND" });
						return resolved;
					} catch (e$1) {
						try {
							return resolveStandardizedNameForRequire(type$1, name, dirname$1);
						} catch (e2) {
							if ("MODULE_NOT_FOUND" === e$1.type) throw e$1;
							if ("MODULE_NOT_FOUND" === e2.type) throw e2;
							throw e$1;
						}
					}
				}
				var LOADING_MODULES = new Set();
				function* requireModule(type$1, loader, name) {
					if (!(yield* (0, _async.isAsync)()) && LOADING_MODULES.has(name)) throw new Error(`Reentrant ${type$1} detected trying to load "${name}". This module is not ignored and is trying to load itself while compiling itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);
					try {
						return LOADING_MODULES.add(name), yield* (0, _moduleTypes.default)(name, loader, `You appear to be using a native ECMAScript module ${type$1}, which is only supported when running Babel asynchronously or when using the Node.js \`--experimental-require-module\` flag.`, `You appear to be using a ${type$1} that contains top-level await, which is only supported when running Babel asynchronously.`, !0);
					} catch (err) {
						throw err.message = `[BABEL]: ${err.message} (While processing: ${name})`, err;
					} finally {
						LOADING_MODULES.delete(name);
					}
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.makeStaticFileCache = function(fn) {
					return (0, _caching.makeStrongCache)(function* (filepath, cache) {
						const cached = cache.invalidate(() => function(filepath$1) {
							if (!_fs2().existsSync(filepath$1)) return null;
							try {
								return +_fs2().statSync(filepath$1).mtime;
							} catch (e$1) {
								if ("ENOENT" !== e$1.code && "ENOTDIR" !== e$1.code) throw e$1;
							}
							return null;
						}(filepath));
						return null === cached ? null : fn(filepath, yield* fs$3.readFile(filepath, "utf8"));
					});
				};
				var _caching = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), fs$3 = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js");
				function _fs2() {
					const data = __webpack_require__$1("fs");
					return _fs2 = function() {
						return data;
					}, data;
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/full.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _async = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js"), context = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _plugin = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js"), _item = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js"), _deepArray = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js");
				function _traverse() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
					return _traverse = function() {
						return data;
					}, data;
				}
				var _caching = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _options = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _plugins = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/plugins.js"), _configApi = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js"), _partial = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js"), _configError = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
				exports$1.default = _gensync()(function* (inputOpts) {
					var _opts$assumptions;
					const result = yield* (0, _partial.default)(inputOpts);
					if (!result) return null;
					const { options, context: context$1, fileHandling } = result;
					if ("ignored" === fileHandling) return null;
					const optionDefaults = {}, { plugins, presets } = options;
					if (!plugins || !presets) throw new Error("Assertion failure - plugins and presets exist");
					const presetContext = Object.assign({}, context$1, { targets: options.targets }), toDescriptor = (item) => {
						const desc = (0, _item.getItemDescriptor)(item);
						if (!desc) throw new Error("Assertion failure - must be config item");
						return desc;
					}, presetsDescriptors = presets.map(toDescriptor), initialPluginsDescriptors = plugins.map(toDescriptor), pluginDescriptorsByPass = [[]], passes = [], externalDependencies = [], ignored = yield* enhanceError(context$1, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
						const presets$1 = [];
						for (let i = 0; i < rawPresets.length; i++) {
							const descriptor = rawPresets[i];
							if (!1 !== descriptor.options) {
								try {
									var preset = yield* loadPresetDescriptor(descriptor, presetContext);
								} catch (e$1) {
									throw "BABEL_UNKNOWN_OPTION" === e$1.code && (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", e$1), e$1;
								}
								externalDependencies.push(preset.externalDependencies), descriptor.ownPass ? presets$1.push({
									preset: preset.chain,
									pass: []
								}) : presets$1.unshift({
									preset: preset.chain,
									pass: pluginDescriptorsPass
								});
							}
						}
						if (presets$1.length > 0) {
							pluginDescriptorsByPass.splice(1, 0, ...presets$1.map((o$1) => o$1.pass).filter((p$1) => p$1 !== pluginDescriptorsPass));
							for (const { preset: preset$1, pass } of presets$1) {
								if (!preset$1) return !0;
								pass.push(...preset$1.plugins);
								if (yield* recursePresetDescriptors(preset$1.presets, pass)) return !0;
								preset$1.options.forEach((opts$1) => {
									(0, _util.mergeOptions)(optionDefaults, opts$1);
								});
							}
						}
					})(presetsDescriptors, pluginDescriptorsByPass[0]);
					if (ignored) return null;
					const opts = optionDefaults;
					(0, _util.mergeOptions)(opts, options);
					const pluginContext = Object.assign({}, presetContext, { assumptions: null != (_opts$assumptions = opts.assumptions) ? _opts$assumptions : {} });
					return yield* enhanceError(context$1, function* () {
						pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
						for (const descs of pluginDescriptorsByPass) {
							const pass = [];
							passes.push(pass);
							for (let i = 0; i < descs.length; i++) {
								const descriptor = descs[i];
								if (!1 !== descriptor.options) {
									try {
										var plugin = yield* loadPluginDescriptor(descriptor, pluginContext);
									} catch (e$1) {
										throw "BABEL_UNKNOWN_PLUGIN_PROPERTY" === e$1.code && (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", e$1), e$1;
									}
									pass.push(plugin), externalDependencies.push(plugin.externalDependencies);
								}
							}
						}
					})(), opts.plugins = passes[0], opts.presets = passes.slice(1).filter((plugins$1) => plugins$1.length > 0).map((plugins$1) => ({ plugins: plugins$1 })), opts.passPerPreset = opts.presets.length > 0, {
						options: opts,
						passes,
						externalDependencies: (0, _deepArray.finalize)(externalDependencies)
					};
				});
				function enhanceError(context$1, fn) {
					return function* (arg1, arg2) {
						try {
							return yield* fn(arg1, arg2);
						} catch (e$1) {
							var _context$filename;
							if (!/^\[BABEL\]/.test(e$1.message)) e$1.message = `[BABEL] ${null != (_context$filename = context$1.filename) ? _context$filename : "unknown file"}: ${e$1.message}`;
							throw e$1;
						}
					};
				}
				const makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({ value: value$1, options, dirname: dirname$1, alias }, cache) {
					if (!1 === options) throw new Error("Assertion failure");
					options = options || {};
					const externalDependencies = [];
					let item = value$1;
					if ("function" == typeof value$1) {
						const factory = (0, _async.maybeAsync)(value$1, "You appear to be using an async plugin/preset, but Babel has been called synchronously"), api$1 = Object.assign({}, context, apiFactory(cache, externalDependencies));
						try {
							item = yield* factory(api$1, options, dirname$1);
						} catch (e$1) {
							throw alias && (e$1.message += ` (While processing: ${JSON.stringify(alias)})`), e$1;
						}
					}
					if (!item || "object" != typeof item) throw new Error("Plugin/Preset did not return an object.");
					if ((0, _async.isThenable)(item)) throw yield* [], new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);
					if (externalDependencies.length > 0 && (!cache.configured() || "forever" === cache.mode())) {
						let error$1 = `A plugin/preset has external untracked dependencies (${externalDependencies[0]}), but the cache `;
						throw cache.configured() ? error$1 += " has been configured to never be invalidated. " : error$1 += "has not been configured to be invalidated when the external dependencies change. ", error$1 += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`\n(While processing: ${JSON.stringify(alias)})`, new Error(error$1);
					}
					return {
						value: item,
						options,
						dirname: dirname$1,
						alias,
						externalDependencies: (0, _deepArray.finalize)(externalDependencies)
					};
				}), pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI), presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI), instantiatePlugin = (0, _caching.makeWeakCache)(function* ({ value: value$1, options, dirname: dirname$1, alias, externalDependencies }, cache) {
					const pluginObj = (0, _plugins.validatePluginObject)(value$1), plugin = Object.assign({}, pluginObj);
					if (plugin.visitor && (plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor))), plugin.inherits) {
						const inheritsDescriptor = {
							name: void 0,
							alias: `${alias}$inherits`,
							value: plugin.inherits,
							options,
							dirname: dirname$1
						}, inherits$6 = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run$1) => cache.invalidate((data) => run$1(inheritsDescriptor, data)));
						plugin.pre = chainMaybeAsync(inherits$6.pre, plugin.pre), plugin.post = chainMaybeAsync(inherits$6.post, plugin.post), plugin.manipulateOptions = chainMaybeAsync(inherits$6.manipulateOptions, plugin.manipulateOptions), plugin.visitor = _traverse().default.visitors.merge([inherits$6.visitor || {}, plugin.visitor || {}]), inherits$6.externalDependencies.length > 0 && (externalDependencies = 0 === externalDependencies.length ? inherits$6.externalDependencies : (0, _deepArray.finalize)([externalDependencies, inherits$6.externalDependencies]));
					}
					return new _plugin.default(plugin, options, alias, externalDependencies);
				});
				function* loadPluginDescriptor(descriptor, context$1) {
					if (descriptor.value instanceof _plugin.default) {
						if (descriptor.options) throw new Error("Passed options to an existing Plugin instance will not work.");
						return descriptor.value;
					}
					return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context$1), context$1);
				}
				const needsFilename = (val) => val && "function" != typeof val, validateIfOptionNeedsFilename = (options, descriptor) => {
					if (needsFilename(options.test) || needsFilename(options.include) || needsFilename(options.exclude)) {
						const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
						throw new _configError.default([
							`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`,
							"```",
							`babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`,
							"```",
							"See https://babeljs.io/docs/en/options#filename for more information."
						].join("\n"));
					}
				}, validatePreset = (preset, context$1, descriptor) => {
					if (!context$1.filename) {
						var _options$overrides;
						const { options } = preset;
						validateIfOptionNeedsFilename(options, descriptor), null == (_options$overrides = options.overrides) || _options$overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor));
					}
				}, instantiatePreset = (0, _caching.makeWeakCacheSync)(({ value: value$1, dirname: dirname$1, alias, externalDependencies }) => ({
					options: (0, _options.validate)("preset", value$1),
					alias,
					dirname: dirname$1,
					externalDependencies
				}));
				function* loadPresetDescriptor(descriptor, context$1) {
					const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context$1));
					return validatePreset(preset, context$1, descriptor), {
						chain: yield* (0, _configChain.buildPresetChain)(preset, context$1),
						externalDependencies: preset.externalDependencies
					};
				}
				function chainMaybeAsync(a, b$2) {
					return a ? b$2 ? function(...args) {
						const res = a.apply(this, args);
						return res && "function" == typeof res.then ? res.then(() => b$2.apply(this, args)) : b$2.apply(this, args);
					} : a : b$2;
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _semver() {
					const data = __webpack_require__$1("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
					return _semver = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.makeConfigAPI = makeConfigAPI, exports$1.makePluginAPI = function(cache, externalDependencies) {
					return Object.assign({}, makePresetAPI(cache, externalDependencies), { assumption: (name) => cache.using((data) => data.assumptions[name]) });
				}, exports$1.makePresetAPI = makePresetAPI;
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _caching = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js");
				function makeConfigAPI(cache) {
					return {
						version: _index.version,
						cache: cache.simple(),
						env: (value$1) => cache.using((data) => void 0 === value$1 ? data.envName : "function" == typeof value$1 ? (0, _caching.assertSimpleType)(value$1(data.envName)) : (Array.isArray(value$1) ? value$1 : [value$1]).some((entry) => {
							if ("string" != typeof entry) throw new Error("Unexpected non-string value");
							return entry === data.envName;
						})),
						async: () => !1,
						caller: (cb) => cache.using((data) => (0, _caching.assertSimpleType)(cb(data.caller))),
						assertVersion
					};
				}
				function makePresetAPI(cache, externalDependencies) {
					return Object.assign({}, makeConfigAPI(cache), {
						targets: () => JSON.parse(cache.using((data) => JSON.stringify(data.targets))),
						addExternalDependency: (ref) => {
							externalDependencies.push(ref);
						}
					});
				}
				function assertVersion(range) {
					if ("number" == typeof range) {
						if (!Number.isInteger(range)) throw new Error("Expected string or integer value.");
						range = `^${range}.0.0-0`;
					}
					if ("string" != typeof range) throw new Error("Expected string or integer value.");
					if ("*" === range || _semver().satisfies(_index.version, range)) return;
					const limit = Error.stackTraceLimit;
					"number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
					const err = new Error(`Requires Babel "${range}", but was loaded with "${_index.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
					throw "number" == typeof limit && (Error.stackTraceLimit = limit), Object.assign(err, {
						code: "BABEL_VERSION_UNSUPPORTED",
						version: _index.version,
						range
					});
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.finalize = function(deepArr) {
					return Object.freeze(deepArr);
				}, exports$1.flattenToSet = function(arr) {
					const result = new Set(), stack = [arr];
					for (; stack.length > 0;) for (const el of stack.pop()) Array.isArray(el) ? stack.push(el) : result.add(el);
					return result;
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.getEnv = function(defaultValue = "development") {
					return process.env.BABEL_ENV || "development";
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.createConfigItem = function(target, options, callback) {
					if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, options, callback);
					else {
						if ("function" != typeof options) return createConfigItemSync(target, options);
						(0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, void 0, callback);
					}
				}, exports$1.createConfigItemAsync = function(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.async)(...args);
				}, exports$1.createConfigItemSync = createConfigItemSync, Object.defineProperty(exports$1, "default", {
					enumerable: !0,
					get: function() {
						return _full.default;
					}
				}), exports$1.loadOptions = function(opts, callback) {
					if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(opts, callback);
					else {
						if ("function" != typeof opts) return loadOptionsSync(opts);
						(0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(void 0, opts);
					}
				}, exports$1.loadOptionsAsync = function(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.async)(...args);
				}, exports$1.loadOptionsSync = loadOptionsSync, exports$1.loadPartialConfig = function(opts, callback) {
					if (void 0 !== callback) (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(opts, callback);
					else {
						if ("function" != typeof opts) return loadPartialConfigSync(opts);
						(0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(void 0, opts);
					}
				}, exports$1.loadPartialConfigAsync = function(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.async)(...args);
				}, exports$1.loadPartialConfigSync = loadPartialConfigSync;
				var _full = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/full.js"), _partial = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js"), _item = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _rewriteStackTrace = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
				const loadPartialConfigRunner = _gensync()(_partial.loadPartialConfig);
				function loadPartialConfigSync(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.sync)(...args);
				}
				const loadOptionsRunner = _gensync()(function* (opts) {
					var _config$options;
					const config$2 = yield* (0, _full.default)(opts);
					return null != (_config$options = null == config$2 ? void 0 : config$2.options) ? _config$options : null;
				});
				function loadOptionsSync(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.sync)(...args);
				}
				const createConfigItemRunner = _gensync()(_item.createConfigItem);
				function createConfigItemSync(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.sync)(...args);
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.createConfigItem = function* (value$1, { dirname: dirname$1 = ".", type: type$1 } = {}) {
					return createItemFromDescriptor(yield* (0, _configDescriptors.createDescriptor)(value$1, _path().resolve(dirname$1), {
						type: type$1,
						alias: "programmatic item"
					}));
				}, exports$1.createItemFromDescriptor = createItemFromDescriptor, exports$1.getItemDescriptor = function(item) {
					if (null != item && item[CONFIG_ITEM_BRAND]) return item._descriptor;
					return;
				};
				var _configDescriptors = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js");
				function createItemFromDescriptor(desc) {
					return new ConfigItem(desc);
				}
				const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");
				class ConfigItem {
					constructor(descriptor) {
						this._descriptor = void 0, this[CONFIG_ITEM_BRAND] = !0, this.value = void 0, this.options = void 0, this.dirname = void 0, this.name = void 0, this.file = void 0, this._descriptor = descriptor, Object.defineProperty(this, "_descriptor", { enumerable: !1 }), Object.defineProperty(this, CONFIG_ITEM_BRAND, { enumerable: !1 }), this.value = this._descriptor.value, this.options = this._descriptor.options, this.dirname = this._descriptor.dirname, this.name = this._descriptor.name, this.file = this._descriptor.file ? {
							request: this._descriptor.file.request,
							resolved: this._descriptor.file.resolved
						} : void 0, Object.freeze(this);
					}
				}
				Object.freeze(ConfigItem.prototype);
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = loadPrivatePartialConfig, exports$1.loadPartialConfig = function* (opts) {
					let showIgnoredFiles = !1;
					if ("object" == typeof opts && null !== opts && !Array.isArray(opts)) {
						var _opts = opts;
						({showIgnoredFiles} = _opts), opts = function(r$1, e$1) {
							if (null == r$1) return {};
							var t = {};
							for (var n in r$1) if ({}.hasOwnProperty.call(r$1, n)) {
								if (e$1.includes(n)) continue;
								t[n] = r$1[n];
							}
							return t;
						}(_opts, _excluded);
					}
					const result = yield* loadPrivatePartialConfig(opts);
					if (!result) return null;
					const { options, babelrc, ignore, config: config$2, fileHandling, files } = result;
					if ("ignored" === fileHandling && !showIgnoredFiles) return null;
					return (options.plugins || []).forEach((item) => {
						if (item.value instanceof _plugin.default) throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
					}), new PartialConfig(options, babelrc ? babelrc.filepath : void 0, ignore ? ignore.filepath : void 0, config$2 ? config$2.filepath : void 0, fileHandling, files);
				};
				var _plugin = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js"), _util = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js"), _item = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js"), _environment = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js"), _options = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _resolveTargets = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js");
				const _excluded = ["showIgnoredFiles"];
				function* loadPrivatePartialConfig(inputOpts) {
					if (null != inputOpts && ("object" != typeof inputOpts || Array.isArray(inputOpts))) throw new Error("Babel options must be an object, null, or undefined");
					const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {}, { envName = (0, _environment.getEnv)(), cwd = ".", root: rootDir = ".", rootMode = "root", caller, cloneInputAst = !0 } = args, absoluteCwd = _path().resolve(cwd), absoluteRootDir = function(rootDir$1, rootMode$1) {
						switch (rootMode$1) {
							case "root": return rootDir$1;
							case "upward-optional": {
								const upwardRootDir = (0, _index.findConfigUpwards)(rootDir$1);
								return null === upwardRootDir ? rootDir$1 : upwardRootDir;
							}
							case "upward": {
								const upwardRootDir = (0, _index.findConfigUpwards)(rootDir$1);
								if (null !== upwardRootDir) return upwardRootDir;
								throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir$1}".\nOne of the following config files must be in the directory tree: "${_index.ROOT_CONFIG_FILENAMES.join(", ")}".`), {
									code: "BABEL_ROOT_NOT_FOUND",
									dirname: rootDir$1
								});
							}
							default: throw new Error("Assertion failure - unknown rootMode value.");
						}
					}(_path().resolve(absoluteCwd, rootDir), rootMode), filename = "string" == typeof args.filename ? _path().resolve(cwd, args.filename) : void 0, context = {
						filename,
						cwd: absoluteCwd,
						root: absoluteRootDir,
						envName,
						caller,
						showConfig: (yield* (0, _index.resolveShowConfigPath)(absoluteCwd)) === filename
					}, configChain = yield* (0, _configChain.buildRootChain)(args, context);
					if (!configChain) return null;
					const merged = { assumptions: {} };
					configChain.options.forEach((opts) => {
						(0, _util.mergeOptions)(merged, opts);
					});
					return {
						options: Object.assign({}, merged, {
							targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir),
							cloneInputAst,
							babelrc: !1,
							configFile: !1,
							browserslistConfigFile: !1,
							passPerPreset: !1,
							envName: context.envName,
							cwd: context.cwd,
							root: context.root,
							rootMode: "root",
							filename: "string" == typeof context.filename ? context.filename : void 0,
							plugins: configChain.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)),
							presets: configChain.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor))
						}),
						context,
						fileHandling: configChain.fileHandling,
						ignore: configChain.ignore,
						babelrc: configChain.babelrc,
						config: configChain.config,
						files: configChain.files
					};
				}
				class PartialConfig {
					constructor(options, babelrc, ignore, config$2, fileHandling, files) {
						this.options = void 0, this.babelrc = void 0, this.babelignore = void 0, this.config = void 0, this.fileHandling = void 0, this.files = void 0, this.options = options, this.babelignore = ignore, this.babelrc = babelrc, this.config = config$2, this.fileHandling = fileHandling, this.files = files, Object.freeze(this);
					}
					hasFilesystemConfig() {
						return void 0 !== this.babelrc || void 0 !== this.config;
					}
				}
				Object.freeze(PartialConfig.prototype);
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(pattern, dirname$1) {
					const parts = _path().resolve(dirname$1, pattern).split(_path().sep);
					return new RegExp(["^", ...parts.map((part, i) => {
						const last = i === parts.length - 1;
						return "**" === part ? last ? starStarPatLast : starStarPat : "*" === part ? last ? starPatLast : starPat : 0 === part.indexOf("*.") ? substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep$1) : escapeRegExp(part) + (last ? endSep : sep$1);
					})].join(""));
				};
				const sep$1 = `\\${_path().sep}`, endSep = `(?:${sep$1}|$)`, substitution = `[^${sep$1}]+`, starPat = `(?:${substitution}${sep$1})`, starPatLast = `(?:${substitution}${endSep})`, starStarPat = `${starPat}*?`, starStarPatLast = `${starPat}*?${starPatLast}?`;
				function escapeRegExp(string) {
					return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _deepArray = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js");
				exports$1.default = class {
					constructor(plugin, options, key, externalDependencies = (0, _deepArray.finalize)([])) {
						this.key = void 0, this.manipulateOptions = void 0, this.post = void 0, this.pre = void 0, this.visitor = void 0, this.parserOverride = void 0, this.generatorOverride = void 0, this.options = void 0, this.externalDependencies = void 0, this.key = plugin.name || key, this.manipulateOptions = plugin.manipulateOptions, this.post = plugin.post, this.pre = plugin.pre, this.visitor = plugin.visitor || {}, this.parserOverride = plugin.parserOverride, this.generatorOverride = plugin.generatorOverride, this.options = options, this.externalDependencies = externalDependencies;
					}
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/printer.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.ConfigPrinter = exports$1.ChainFormatter = void 0;
				const ChainFormatter = exports$1.ChainFormatter = {
					Programmatic: 0,
					Config: 1
				}, Formatter = {
					title(type$1, callerName, filepath) {
						let title = "";
						return type$1 === ChainFormatter.Programmatic ? (title = "programmatic options", callerName && (title += " from " + callerName)) : title = "config " + filepath, title;
					},
					loc(index, envName) {
						let loc = "";
						return null != index && (loc += `.overrides[${index}]`), null != envName && (loc += `.env["${envName}"]`), loc;
					},
					*optionsAndDescriptors(opt) {
						const content = Object.assign({}, opt.options);
						delete content.overrides, delete content.env;
						const pluginDescriptors = [...yield* opt.plugins()];
						pluginDescriptors.length && (content.plugins = pluginDescriptors.map((d$2) => descriptorToConfig(d$2)));
						const presetDescriptors = [...yield* opt.presets()];
						return presetDescriptors.length && (content.presets = [...presetDescriptors].map((d$2) => descriptorToConfig(d$2))), JSON.stringify(content, void 0, 2);
					}
				};
				function descriptorToConfig(d$2) {
					var _d$file;
					let name = null == (_d$file = d$2.file) ? void 0 : _d$file.request;
					return name ?? ("object" == typeof d$2.value ? name = d$2.value : "function" == typeof d$2.value && (name = `[Function: ${d$2.value.toString().slice(0, 50)} ... ]`)), name ??= "[Unknown]", void 0 === d$2.options ? name : null == d$2.name ? [name, d$2.options] : [
						name,
						d$2.options,
						d$2.name
					];
				}
				class ConfigPrinter {
					constructor() {
						this._stack = [];
					}
					configure(enabled, type$1, { callerName, filepath }) {
						return enabled ? (content, index, envName) => {
							this._stack.push({
								type: type$1,
								callerName,
								filepath,
								content,
								index,
								envName
							});
						} : () => {};
					}
					static *format(config$2) {
						let title = Formatter.title(config$2.type, config$2.callerName, config$2.filepath);
						const loc = Formatter.loc(config$2.index, config$2.envName);
						loc && (title += ` ${loc}`);
						return `${title}\n${yield* Formatter.optionsAndDescriptors(config$2.content)}`;
					}
					*output() {
						if (0 === this._stack.length) return "";
						return (yield* _gensync().all(this._stack.map((s) => ConfigPrinter.format(s)))).join("\n\n");
					}
				}
				exports$1.ConfigPrinter = ConfigPrinter;
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				function _helperCompilationTargets() {
					const data = __webpack_require__$1("./stubs/helper-compilation-targets.mjs");
					return _helperCompilationTargets = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.resolveBrowserslistConfigFile = function(browserslistConfigFile, configFileDir) {
					return _path().resolve(configFileDir, browserslistConfigFile);
				}, exports$1.resolveTargets = function(options, root) {
					const optTargets = options.targets;
					let targets;
					"string" == typeof optTargets || Array.isArray(optTargets) ? targets = { browsers: optTargets } : optTargets && (targets = "esmodules" in optTargets ? Object.assign({}, optTargets, { esmodules: "intersect" }) : optTargets);
					const { browserslistConfigFile } = options;
					let configFile, ignoreBrowserslistConfig = !1;
					"string" == typeof browserslistConfigFile ? configFile = browserslistConfigFile : ignoreBrowserslistConfig = !1 === browserslistConfigFile;
					return (0, _helperCompilationTargets().default)(targets, {
						ignoreBrowserslistConfig,
						configFile,
						configPath: root,
						browserslistEnv: options.browserslistEnv
					});
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				function mergeDefaultFields(target, source) {
					for (const k$2 of Object.keys(source)) {
						const val = source[k$2];
						void 0 !== val && (target[k$2] = val);
					}
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.isIterableIterator = function(value$1) {
					return !!value$1 && "function" == typeof value$1.next && "function" == typeof value$1[Symbol.iterator];
				}, exports$1.mergeOptions = function(target, source) {
					for (const k$2 of Object.keys(source)) if ("parserOpts" !== k$2 && "generatorOpts" !== k$2 && "assumptions" !== k$2 || !source[k$2]) {
						const val = source[k$2];
						void 0 !== val && (target[k$2] = val);
					} else {
						const parserOpts = source[k$2];
						mergeDefaultFields(target[k$2] || (target[k$2] = {}), parserOpts);
					}
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _helperCompilationTargets() {
					const data = __webpack_require__$1("./stubs/helper-compilation-targets.mjs");
					return _helperCompilationTargets = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.access = access$2, exports$1.assertArray = assertArray, exports$1.assertAssumptions = function(loc, value$1) {
					if (void 0 === value$1) return;
					if ("object" != typeof value$1 || null === value$1) throw new Error(`${msg(loc)} must be an object or undefined.`);
					let root = loc;
					do
						root = root.parent;
					while ("root" !== root.type);
					const inPreset = "preset" === root.source;
					for (const name of Object.keys(value$1)) {
						const subLoc = access$2(loc, name);
						if (!_options.assumptionsNames.has(name)) throw new Error(`${msg(subLoc)} is not a supported assumption.`);
						if ("boolean" != typeof value$1[name]) throw new Error(`${msg(subLoc)} must be a boolean.`);
						if (inPreset && !1 === value$1[name]) throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
					}
					return value$1;
				}, exports$1.assertBabelrcSearch = function(loc, value$1) {
					if (void 0 === value$1 || "boolean" == typeof value$1) return value$1;
					if (Array.isArray(value$1)) value$1.forEach((item, i) => {
						if (!checkValidTest(item)) throw new Error(`${msg(access$2(loc, i))} must be a string/Function/RegExp.`);
					});
					else if (!checkValidTest(value$1)) throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value$1)}`);
					return value$1;
				}, exports$1.assertBoolean = assertBoolean, exports$1.assertCallerMetadata = function(loc, value$1) {
					const obj = assertObject(loc, value$1);
					if (obj) {
						if ("string" != typeof obj.name) throw new Error(`${msg(loc)} set but does not contain "name" property string`);
						for (const prop of Object.keys(obj)) {
							const propLoc = access$2(loc, prop), value$2 = obj[prop];
							if (null != value$2 && "boolean" != typeof value$2 && "string" != typeof value$2 && "number" != typeof value$2) throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
						}
					}
					return value$1;
				}, exports$1.assertCompact = function(loc, value$1) {
					if (void 0 !== value$1 && "boolean" != typeof value$1 && "auto" !== value$1) throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
					return value$1;
				}, exports$1.assertConfigApplicableTest = function(loc, value$1) {
					if (void 0 === value$1) return value$1;
					if (Array.isArray(value$1)) value$1.forEach((item, i) => {
						if (!checkValidTest(item)) throw new Error(`${msg(access$2(loc, i))} must be a string/Function/RegExp.`);
					});
					else if (!checkValidTest(value$1)) throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
					return value$1;
				}, exports$1.assertConfigFileSearch = function(loc, value$1) {
					if (void 0 !== value$1 && "boolean" != typeof value$1 && "string" != typeof value$1) throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value$1)}`);
					return value$1;
				}, exports$1.assertFunction = function(loc, value$1) {
					if (void 0 !== value$1 && "function" != typeof value$1) throw new Error(`${msg(loc)} must be a function, or undefined`);
					return value$1;
				}, exports$1.assertIgnoreList = function(loc, value$1) {
					const arr = assertArray(loc, value$1);
					return arr?.forEach((item, i) => function(loc$1, value$2) {
						if ("string" != typeof value$2 && "function" != typeof value$2 && !(value$2 instanceof RegExp)) throw new Error(`${msg(loc$1)} must be an array of string/Function/RegExp values, or undefined`);
						return value$2;
					}(access$2(loc, i), item)), arr;
				}, exports$1.assertInputSourceMap = function(loc, value$1) {
					if (void 0 !== value$1 && "boolean" != typeof value$1 && ("object" != typeof value$1 || !value$1)) throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
					return value$1;
				}, exports$1.assertObject = assertObject, exports$1.assertPluginList = function(loc, value$1) {
					const arr = assertArray(loc, value$1);
					arr && arr.forEach((item, i) => function(loc$1, value$2) {
						if (Array.isArray(value$2)) {
							if (0 === value$2.length) throw new Error(`${msg(loc$1)} must include an object`);
							if (value$2.length > 3) throw new Error(`${msg(loc$1)} may only be a two-tuple or three-tuple`);
							if (assertPluginTarget(access$2(loc$1, 0), value$2[0]), value$2.length > 1) {
								const opts = value$2[1];
								if (void 0 !== opts && !1 !== opts && ("object" != typeof opts || Array.isArray(opts) || null === opts)) throw new Error(`${msg(access$2(loc$1, 1))} must be an object, false, or undefined`);
							}
							if (3 === value$2.length) {
								const name = value$2[2];
								if (void 0 !== name && "string" != typeof name) throw new Error(`${msg(access$2(loc$1, 2))} must be a string, or undefined`);
							}
						} else assertPluginTarget(loc$1, value$2);
						return value$2;
					}(access$2(loc, i), item));
					return arr;
				}, exports$1.assertRootMode = function(loc, value$1) {
					if (void 0 !== value$1 && "root" !== value$1 && "upward" !== value$1 && "upward-optional" !== value$1) throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
					return value$1;
				}, exports$1.assertSourceMaps = function(loc, value$1) {
					if (void 0 !== value$1 && "boolean" != typeof value$1 && "inline" !== value$1 && "both" !== value$1) throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
					return value$1;
				}, exports$1.assertSourceType = function(loc, value$1) {
					if (void 0 !== value$1 && "module" !== value$1 && "script" !== value$1 && "unambiguous" !== value$1) throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
					return value$1;
				}, exports$1.assertString = function(loc, value$1) {
					if (void 0 !== value$1 && "string" != typeof value$1) throw new Error(`${msg(loc)} must be a string, or undefined`);
					return value$1;
				}, exports$1.assertTargets = function(loc, value$1) {
					if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value$1)) return value$1;
					if ("object" != typeof value$1 || !value$1 || Array.isArray(value$1)) throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
					const browsersLoc = access$2(loc, "browsers"), esmodulesLoc = access$2(loc, "esmodules");
					assertBrowsersList(browsersLoc, value$1.browsers), assertBoolean(esmodulesLoc, value$1.esmodules);
					for (const key of Object.keys(value$1)) {
						const val = value$1[key], subLoc = access$2(loc, key);
						if ("esmodules" === key) assertBoolean(subLoc, val);
						else if ("browsers" === key) assertBrowsersList(subLoc, val);
						else {
							if (!hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
								const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
								throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
							}
							assertBrowserVersion(subLoc, val);
						}
					}
					return value$1;
				}, exports$1.msg = msg;
				var _options = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js");
				function msg(loc) {
					switch (loc.type) {
						case "root": return "";
						case "env": return `${msg(loc.parent)}.env["${loc.name}"]`;
						case "overrides": return `${msg(loc.parent)}.overrides[${loc.index}]`;
						case "option": return `${msg(loc.parent)}.${loc.name}`;
						case "access": return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
						default: throw new Error(`Assertion failure: Unknown type ${loc.type}`);
					}
				}
				function access$2(loc, name) {
					return {
						type: "access",
						name,
						parent: loc
					};
				}
				function assertBoolean(loc, value$1) {
					if (void 0 !== value$1 && "boolean" != typeof value$1) throw new Error(`${msg(loc)} must be a boolean, or undefined`);
					return value$1;
				}
				function assertObject(loc, value$1) {
					if (void 0 !== value$1 && ("object" != typeof value$1 || Array.isArray(value$1) || !value$1)) throw new Error(`${msg(loc)} must be an object, or undefined`);
					return value$1;
				}
				function assertArray(loc, value$1) {
					if (null != value$1 && !Array.isArray(value$1)) throw new Error(`${msg(loc)} must be an array, or undefined`);
					return value$1;
				}
				function checkValidTest(value$1) {
					return "string" == typeof value$1 || "function" == typeof value$1 || value$1 instanceof RegExp;
				}
				function assertPluginTarget(loc, value$1) {
					if (("object" != typeof value$1 || !value$1) && "string" != typeof value$1 && "function" != typeof value$1) throw new Error(`${msg(loc)} must be a string, object, function`);
					return value$1;
				}
				function assertBrowsersList(loc, value$1) {
					if (void 0 !== value$1 && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value$1)) throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
				}
				function assertBrowserVersion(loc, value$1) {
					if (("number" != typeof value$1 || Math.round(value$1) !== value$1) && "string" != typeof value$1) throw new Error(`${msg(loc)} must be a string or an integer number`);
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.assumptionsNames = void 0, exports$1.checkNoUnwrappedItemOptionPairs = function(items, index, type$1, e$1) {
					if (0 === index) return;
					const lastItem = items[index - 1], thisItem = items[index];
					lastItem.file && void 0 === lastItem.options && "object" == typeof thisItem.value && (e$1.message += `\n- Maybe you meant to use\n"${type$1}s": [\n  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, void 0, 2)}]\n]\nTo be a valid ${type$1}, its name and options should be wrapped in a pair of brackets`);
				}, exports$1.validate = function(type$1, opts, filename) {
					try {
						return validateNested({
							type: "root",
							source: type$1
						}, opts);
					} catch (error$1) {
						const configError = new _configError.default(error$1.message, filename);
						throw error$1.code && (configError.code = error$1.code), configError;
					}
				};
				var _removed = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/removed.js"), _optionAssertions = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js"), _configError = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
				const ROOT_VALIDATORS = {
					cwd: _optionAssertions.assertString,
					root: _optionAssertions.assertString,
					rootMode: _optionAssertions.assertRootMode,
					configFile: _optionAssertions.assertConfigFileSearch,
					caller: _optionAssertions.assertCallerMetadata,
					filename: _optionAssertions.assertString,
					filenameRelative: _optionAssertions.assertString,
					code: _optionAssertions.assertBoolean,
					ast: _optionAssertions.assertBoolean,
					cloneInputAst: _optionAssertions.assertBoolean,
					envName: _optionAssertions.assertString
				}, BABELRC_VALIDATORS = {
					babelrc: _optionAssertions.assertBoolean,
					babelrcRoots: _optionAssertions.assertBabelrcSearch
				}, NONPRESET_VALIDATORS = {
					extends: _optionAssertions.assertString,
					ignore: _optionAssertions.assertIgnoreList,
					only: _optionAssertions.assertIgnoreList,
					targets: _optionAssertions.assertTargets,
					browserslistConfigFile: _optionAssertions.assertConfigFileSearch,
					browserslistEnv: _optionAssertions.assertString
				}, COMMON_VALIDATORS = {
					inputSourceMap: _optionAssertions.assertInputSourceMap,
					presets: _optionAssertions.assertPluginList,
					plugins: _optionAssertions.assertPluginList,
					passPerPreset: _optionAssertions.assertBoolean,
					assumptions: _optionAssertions.assertAssumptions,
					env: function(loc, value$1) {
						if ("env" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
						const parent = loc.parent, obj = (0, _optionAssertions.assertObject)(loc, value$1);
						if (obj) for (const envName of Object.keys(obj)) {
							const env$2 = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
							if (!env$2) continue;
							validateNested({
								type: "env",
								name: envName,
								parent
							}, env$2);
						}
						return obj;
					},
					overrides: function(loc, value$1) {
						if ("env" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
						if ("overrides" === loc.parent.type) throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
						const parent = loc.parent, arr = (0, _optionAssertions.assertArray)(loc, value$1);
						if (arr) for (const [index, item] of arr.entries()) {
							const objLoc = (0, _optionAssertions.access)(loc, index), env$2 = (0, _optionAssertions.assertObject)(objLoc, item);
							if (!env$2) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
							validateNested({
								type: "overrides",
								index,
								parent
							}, env$2);
						}
						return arr;
					},
					test: _optionAssertions.assertConfigApplicableTest,
					include: _optionAssertions.assertConfigApplicableTest,
					exclude: _optionAssertions.assertConfigApplicableTest,
					retainLines: _optionAssertions.assertBoolean,
					comments: _optionAssertions.assertBoolean,
					shouldPrintComment: _optionAssertions.assertFunction,
					compact: _optionAssertions.assertCompact,
					minified: _optionAssertions.assertBoolean,
					auxiliaryCommentBefore: _optionAssertions.assertString,
					auxiliaryCommentAfter: _optionAssertions.assertString,
					sourceType: _optionAssertions.assertSourceType,
					wrapPluginVisitorMethod: _optionAssertions.assertFunction,
					highlightCode: _optionAssertions.assertBoolean,
					sourceMaps: _optionAssertions.assertSourceMaps,
					sourceMap: _optionAssertions.assertSourceMaps,
					sourceFileName: _optionAssertions.assertString,
					sourceRoot: _optionAssertions.assertString,
					parserOpts: _optionAssertions.assertObject,
					generatorOpts: _optionAssertions.assertObject
				};
				Object.assign(COMMON_VALIDATORS, {
					getModuleId: _optionAssertions.assertFunction,
					moduleRoot: _optionAssertions.assertString,
					moduleIds: _optionAssertions.assertBoolean,
					moduleId: _optionAssertions.assertString
				});
				exports$1.assumptionsNames = new Set([
					"arrayLikeIsIterable",
					"constantReexports",
					"constantSuper",
					"enumerableModuleMeta",
					"ignoreFunctionLength",
					"ignoreToPrimitiveHint",
					"iterableIsArray",
					"mutableTemplateObject",
					"noClassCalls",
					"noDocumentAll",
					"noIncompleteNsImportDetection",
					"noNewArrows",
					"noUninitializedPrivateFieldAccess",
					"objectRestNoSymbols",
					"privateFieldsAsSymbols",
					"privateFieldsAsProperties",
					"pureGetters",
					"setClassMethods",
					"setComputedProperties",
					"setPublicClassFields",
					"setSpreadProperties",
					"skipForOfIteratorClosing",
					"superIsCallableConstructor"
				]);
				function getSource(loc) {
					return "root" === loc.type ? loc.source : getSource(loc.parent);
				}
				function validateNested(loc, opts) {
					const type$1 = getSource(loc);
					return function(opts$1) {
						if (hasOwnProperty.call(opts$1, "sourceMap") && hasOwnProperty.call(opts$1, "sourceMaps")) throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
					}(opts), Object.keys(opts).forEach((key) => {
						const optLoc = {
							type: "option",
							name: key,
							parent: loc
						};
						if ("preset" === type$1 && NONPRESET_VALIDATORS[key]) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
						if ("arguments" !== type$1 && ROOT_VALIDATORS[key]) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
						if ("arguments" !== type$1 && "configfile" !== type$1 && BABELRC_VALIDATORS[key]) {
							if ("babelrcfile" === type$1 || "extendsfile" === type$1) throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
							throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
						}
						(COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError)(optLoc, opts[key]);
					}), opts;
				}
				function throwUnknownError(loc) {
					const key = loc.name;
					if (_removed.default[key]) {
						const { message, version: version$1 = 5 } = _removed.default[key];
						throw new Error(`Using removed Babel ${version$1} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
					}
					{
						const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
						throw unknownOptErr.code = "BABEL_UNKNOWN_OPTION", unknownOptErr;
					}
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/plugins.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.validatePluginObject = function(obj) {
					const rootPath = {
						type: "root",
						source: "plugin"
					};
					return Object.keys(obj).forEach((key) => {
						const validator = VALIDATORS[key];
						if (!validator) {
							const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
							throw invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY", invalidPluginPropertyError;
						}
						validator({
							type: "option",
							name: key,
							parent: rootPath
						}, obj[key]);
					}), obj;
				};
				var _optionAssertions = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js");
				const VALIDATORS = {
					name: _optionAssertions.assertString,
					manipulateOptions: _optionAssertions.assertFunction,
					pre: _optionAssertions.assertFunction,
					post: _optionAssertions.assertFunction,
					inherits: _optionAssertions.assertFunction,
					visitor: function(loc, value$1) {
						const obj = (0, _optionAssertions.assertObject)(loc, value$1);
						if (obj && (Object.keys(obj).forEach((prop) => {
							"_exploded" !== prop && "_verified" !== prop && function(key, value$2) {
								if (value$2 && "object" == typeof value$2) Object.keys(value$2).forEach((handler) => {
									if ("enter" !== handler && "exit" !== handler) throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
								});
								else if ("function" != typeof value$2) throw new Error(`.visitor["${key}"] must be a function`);
							}(prop, obj[prop]);
						}), obj.enter || obj.exit)) throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
						return obj;
					},
					parserOverride: _optionAssertions.assertFunction,
					generatorOverride: _optionAssertions.assertFunction
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/removed.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				exports$1.default = {
					auxiliaryComment: { message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`" },
					blacklist: { message: "Put the specific transforms you want in the `plugins` option" },
					breakConfig: { message: "This is not a necessary option in Babel 6" },
					experimental: { message: "Put the specific transforms you want in the `plugins` option" },
					externalHelpers: { message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/" },
					extra: { message: "" },
					jsxPragma: { message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/" },
					loose: { message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option." },
					metadataUsedHelpers: { message: "Not required anymore as this is enabled by default" },
					modules: { message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules" },
					nonStandard: { message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/" },
					optional: { message: "Put the specific transforms you want in the `plugins` option" },
					sourceMapName: { message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." },
					stage: { message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets" },
					whitelist: { message: "Put the specific transforms you want in the `plugins` option" },
					resolveModuleSource: {
						version: 6,
						message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
					},
					metadata: {
						version: 6,
						message: "Generated plugin metadata is always included in the output result"
					},
					sourceMapTarget: {
						version: 6,
						message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves."
					}
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _rewriteStackTrace = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
				class ConfigError extends Error {
					constructor(message, filename) {
						super(message), (0, _rewriteStackTrace.expectedError)(this), filename && (0, _rewriteStackTrace.injectVirtualStackFrame)(this, filename);
					}
				}
				exports$1.default = ConfigError;
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				var _Object$getOwnPropert;
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.beginHiddenCallStack = function(fn) {
					return SUPPORTED ? Object.defineProperty(function(...args) {
						return setupPrepareStackTrace(), fn(...args);
					}, "name", { value: STOP_HIDING }) : fn;
				}, exports$1.endHiddenCallStack = function(fn) {
					return SUPPORTED ? Object.defineProperty(function(...args) {
						return fn(...args);
					}, "name", { value: START_HIDING }) : fn;
				}, exports$1.expectedError = function(error$1) {
					if (!SUPPORTED) return;
					return expectedErrors.add(error$1), error$1;
				}, exports$1.injectVirtualStackFrame = function(error$1, filename) {
					if (!SUPPORTED) return;
					let frames = virtualFrames.get(error$1);
					frames || virtualFrames.set(error$1, frames = []);
					return frames.push(function(filename$1) {
						return Object.create({
							isNative: () => !1,
							isConstructor: () => !1,
							isToplevel: () => !0,
							getFileName: () => filename$1,
							getLineNumber: () => {},
							getColumnNumber: () => {},
							getFunctionName: () => {},
							getMethodName: () => {},
							getTypeName: () => {},
							toString: () => filename$1
						});
					}(filename)), error$1;
				};
				const ErrorToString = Function.call.bind(Error.prototype.toString), SUPPORTED = !!Error.captureStackTrace && !0 === (null == (_Object$getOwnPropert = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit")) ? void 0 : _Object$getOwnPropert.writable), START_HIDING = "startHiding - secret - don't use this - v1", STOP_HIDING = "stopHiding - secret - don't use this - v1", expectedErrors = new WeakSet(), virtualFrames = new WeakMap();
				function setupPrepareStackTrace() {
					setupPrepareStackTrace = () => {};
					const { prepareStackTrace = defaultPrepareStackTrace } = Error;
					Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, 50)), Error.prepareStackTrace = function(err, trace) {
						let newTrace = [];
						let status = expectedErrors.has(err) ? "hiding" : "unknown";
						for (let i = 0; i < trace.length; i++) {
							const name = trace[i].getFunctionName();
							if (name === START_HIDING) status = "hiding";
							else if (name === STOP_HIDING) {
								if ("hiding" === status) status = "showing", virtualFrames.has(err) && newTrace.unshift(...virtualFrames.get(err));
								else if ("unknown" === status) {
									newTrace = trace;
									break;
								}
							} else "hiding" !== status && newTrace.push(trace[i]);
						}
						return prepareStackTrace(err, newTrace);
					};
				}
				function defaultPrepareStackTrace(err, trace) {
					return 0 === trace.length ? ErrorToString(err) : `${ErrorToString(err)}\n    at ${trace.join("\n    at ")}`;
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				function asyncGeneratorStep(n, t, e$1, r$1, o$1, a, c) {
					try {
						var i = n[a](c), u$1 = i.value;
					} catch (n$1) {
						return void e$1(n$1);
					}
					i.done ? t(u$1) : Promise.resolve(u$1).then(r$1, o$1);
				}
				function _asyncToGenerator(n) {
					return function() {
						var t = this, e$1 = arguments;
						return new Promise(function(r$1, o$1) {
							var a = n.apply(t, e$1);
							function _next(n$1) {
								asyncGeneratorStep(a, r$1, o$1, _next, _throw, "next", n$1);
							}
							function _throw(n$1) {
								asyncGeneratorStep(a, r$1, o$1, _next, _throw, "throw", n$1);
							}
							_next(void 0);
						});
					};
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.forwardAsync = function(action, cb) {
					const g$1 = _gensync()(action);
					return withKind((kind) => {
						const adapted = g$1[kind];
						return cb(adapted);
					});
				}, exports$1.isAsync = void 0, exports$1.isThenable = isThenable, exports$1.maybeAsync = function(fn, message) {
					return _gensync()({
						sync(...args) {
							const result = fn.apply(this, args);
							if (isThenable(result)) throw new Error(message);
							return result;
						},
						async(...args) {
							return Promise.resolve(fn.apply(this, args));
						}
					});
				}, exports$1.waitFor = exports$1.onFirstPause = void 0;
				const runGenerator = _gensync()(function* (item) {
					return yield* item;
				});
				exports$1.isAsync = _gensync()({
					sync: () => !1,
					errback: (cb) => cb(null, !0)
				});
				const withKind = _gensync()({
					sync: (cb) => cb("sync"),
					async: (_ref = _asyncToGenerator(function* (cb) {
						return cb("async");
					}), function(_x) {
						return _ref.apply(this, arguments);
					})
				});
				var _ref;
				exports$1.onFirstPause = _gensync()({
					name: "onFirstPause",
					arity: 2,
					sync: function(item) {
						return runGenerator.sync(item);
					},
					errback: function(item, firstPause, cb) {
						let completed = !1;
						runGenerator.errback(item, (err, value$1) => {
							completed = !0, cb(err, value$1);
						}), completed || firstPause();
					}
				}), exports$1.waitFor = _gensync()({
					sync: (x$3) => x$3,
					async: (_ref2 = _asyncToGenerator(function* (x$3) {
						return x$3;
					}), function(_x2) {
						return _ref2.apply(this, arguments);
					})
				});
				var _ref2;
				function isThenable(val) {
					return !(!val || "object" != typeof val && "function" != typeof val || !val.then || "function" != typeof val.then);
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _fs() {
					const data = __webpack_require__$1("fs");
					return _fs = function() {
						return data;
					}, data;
				}
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.stat = exports$1.readFile = void 0;
				exports$1.readFile = _gensync()({
					sync: _fs().readFileSync,
					errback: _fs().readFile
				}), exports$1.stat = _gensync()({
					sync: _fs().statSync,
					errback: _fs().stat
				});
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/functional.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.once = function(fn) {
					let result, resultP, promiseReferenced = !1;
					return function* () {
						if (!result) {
							if (resultP) return promiseReferenced = !0, yield* (0, _async.waitFor)(resultP);
							if (yield* (0, _async.isAsync)()) {
								let resolve$1, reject;
								resultP = new Promise((res, rej) => {
									resolve$1 = res, reject = rej;
								});
								try {
									result = {
										ok: !0,
										value: yield* fn()
									}, resultP = null, promiseReferenced && resolve$1(result.value);
								} catch (error$1) {
									result = {
										ok: !1,
										value: error$1
									}, resultP = null, promiseReferenced && reject(error$1);
								}
							} else try {
								result = {
									ok: !0,
									value: yield* fn()
								};
							} catch (error$1) {
								result = {
									ok: !1,
									value: error$1
								};
							}
						}
						if (result.ok) return result.value;
						throw result.value;
					};
				};
				var _async = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.DEFAULT_EXTENSIONS = void 0, Object.defineProperty(exports$1, "File", {
					enumerable: !0,
					get: function() {
						return _file.default;
					}
				}), Object.defineProperty(exports$1, "buildExternalHelpers", {
					enumerable: !0,
					get: function() {
						return _buildExternalHelpers.default;
					}
				}), Object.defineProperty(exports$1, "createConfigItem", {
					enumerable: !0,
					get: function() {
						return _index2.createConfigItem;
					}
				}), Object.defineProperty(exports$1, "createConfigItemAsync", {
					enumerable: !0,
					get: function() {
						return _index2.createConfigItemAsync;
					}
				}), Object.defineProperty(exports$1, "createConfigItemSync", {
					enumerable: !0,
					get: function() {
						return _index2.createConfigItemSync;
					}
				}), Object.defineProperty(exports$1, "getEnv", {
					enumerable: !0,
					get: function() {
						return _environment.getEnv;
					}
				}), Object.defineProperty(exports$1, "loadOptions", {
					enumerable: !0,
					get: function() {
						return _index2.loadOptions;
					}
				}), Object.defineProperty(exports$1, "loadOptionsAsync", {
					enumerable: !0,
					get: function() {
						return _index2.loadOptionsAsync;
					}
				}), Object.defineProperty(exports$1, "loadOptionsSync", {
					enumerable: !0,
					get: function() {
						return _index2.loadOptionsSync;
					}
				}), Object.defineProperty(exports$1, "loadPartialConfig", {
					enumerable: !0,
					get: function() {
						return _index2.loadPartialConfig;
					}
				}), Object.defineProperty(exports$1, "loadPartialConfigAsync", {
					enumerable: !0,
					get: function() {
						return _index2.loadPartialConfigAsync;
					}
				}), Object.defineProperty(exports$1, "loadPartialConfigSync", {
					enumerable: !0,
					get: function() {
						return _index2.loadPartialConfigSync;
					}
				}), Object.defineProperty(exports$1, "parse", {
					enumerable: !0,
					get: function() {
						return _parse.parse;
					}
				}), Object.defineProperty(exports$1, "parseAsync", {
					enumerable: !0,
					get: function() {
						return _parse.parseAsync;
					}
				}), Object.defineProperty(exports$1, "parseSync", {
					enumerable: !0,
					get: function() {
						return _parse.parseSync;
					}
				}), exports$1.resolvePreset = exports$1.resolvePlugin = void 0, Object.defineProperty(exports$1, "template", {
					enumerable: !0,
					get: function() {
						return _template().default;
					}
				}), Object.defineProperty(exports$1, "tokTypes", {
					enumerable: !0,
					get: function() {
						return _parser().tokTypes;
					}
				}), Object.defineProperty(exports$1, "transform", {
					enumerable: !0,
					get: function() {
						return _transform.transform;
					}
				}), Object.defineProperty(exports$1, "transformAsync", {
					enumerable: !0,
					get: function() {
						return _transform.transformAsync;
					}
				}), Object.defineProperty(exports$1, "transformFile", {
					enumerable: !0,
					get: function() {
						return _transformFile.transformFile;
					}
				}), Object.defineProperty(exports$1, "transformFileAsync", {
					enumerable: !0,
					get: function() {
						return _transformFile.transformFileAsync;
					}
				}), Object.defineProperty(exports$1, "transformFileSync", {
					enumerable: !0,
					get: function() {
						return _transformFile.transformFileSync;
					}
				}), Object.defineProperty(exports$1, "transformFromAst", {
					enumerable: !0,
					get: function() {
						return _transformAst.transformFromAst;
					}
				}), Object.defineProperty(exports$1, "transformFromAstAsync", {
					enumerable: !0,
					get: function() {
						return _transformAst.transformFromAstAsync;
					}
				}), Object.defineProperty(exports$1, "transformFromAstSync", {
					enumerable: !0,
					get: function() {
						return _transformAst.transformFromAstSync;
					}
				}), Object.defineProperty(exports$1, "transformSync", {
					enumerable: !0,
					get: function() {
						return _transform.transformSync;
					}
				}), Object.defineProperty(exports$1, "traverse", {
					enumerable: !0,
					get: function() {
						return _traverse().default;
					}
				}), exports$1.version = exports$1.types = void 0;
				var _file = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js"), _buildExternalHelpers = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/tools/build-external-helpers.js"), resolvers = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _environment = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js");
				function _types() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
					return _types = function() {
						return data;
					}, data;
				}
				function _parser() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js");
					return _parser = function() {
						return data;
					}, data;
				}
				function _traverse() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
					return _traverse = function() {
						return data;
					}, data;
				}
				function _template() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
					return _template = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "types", {
					enumerable: !0,
					get: function() {
						return _types();
					}
				});
				var _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _transform = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform.js"), _transformFile = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js"), _transformAst = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-ast.js"), _parse = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parse.js");
				__webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
				exports$1.version = "7.26.0";
				exports$1.resolvePlugin = (name, dirname$1) => resolvers.resolvePlugin(name, dirname$1, !1).filepath;
				exports$1.resolvePreset = (name, dirname$1) => resolvers.resolvePreset(name, dirname$1, !1).filepath;
				exports$1.DEFAULT_EXTENSIONS = Object.freeze([
					".js",
					".jsx",
					".es6",
					".es",
					".mjs",
					".cjs"
				]);
				exports$1.OptionManager = class {
					init(opts) {
						return (0, _index2.loadOptionsSync)(opts);
					}
				}, exports$1.Plugin = function(alias) {
					throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parse.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.parse = void 0, exports$1.parseAsync = function(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
				}, exports$1.parseSync = function(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js"), _normalizeOpts = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _rewriteStackTrace = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
				const parseRunner = _gensync()(function* (code, opts) {
					const config$2 = yield* (0, _index.default)(opts);
					return null === config$2 ? null : yield* (0, _index2.default)(config$2.passes, (0, _normalizeOpts.default)(config$2), code);
				});
				exports$1.parse = function(code, opts, callback) {
					if ("function" == typeof opts && (callback = opts, opts = void 0), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
					(0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _parser() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js");
					return _parser = function() {
						return data;
					}, data;
				}
				function _codeFrame() {
					const data = __webpack_require__$1("./stubs/babel-codeframe.mjs");
					return _codeFrame = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function* (pluginPasses, { parserOpts, highlightCode = !0, filename = "unknown" }, code) {
					try {
						const results = [];
						for (const plugins of pluginPasses) for (const plugin of plugins) {
							const { parserOverride } = plugin;
							if (parserOverride) {
								const ast = parserOverride(code, parserOpts, _parser().parse);
								void 0 !== ast && results.push(ast);
							}
						}
						if (0 === results.length) return (0, _parser().parse)(code, parserOpts);
						if (1 === results.length) {
							if (yield* [], "function" == typeof results[0].then) throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
							return results[0];
						}
						throw new Error("More than one plugin attempted to override parsing.");
					} catch (err) {
						"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" === err.code && (err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.");
						const { loc, missingPlugin } = err;
						if (loc) {
							const codeFrame = (0, _codeFrame().codeFrameColumns)(code, { start: {
								line: loc.line,
								column: loc.column + 1
							} }, { highlightCode });
							err.message = missingPlugin ? `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame, filename) : `${filename}: ${err.message}\n\n` + codeFrame, err.code = "BABEL_PARSE_ERROR";
						}
						throw err;
					}
				};
				var _missingPluginHelper = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js");
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(missingPluginName, loc, codeFrame, filename) {
					let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column + 1}):\n\n` + codeFrame;
					const pluginInfo = pluginNameMap[missingPluginName];
					if (pluginInfo) {
						const { syntax: syntaxPlugin, transform: transformPlugin } = pluginInfo;
						if (syntaxPlugin) {
							const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
							if (transformPlugin) helpMessage += `\n\nAdd ${getNameURLCombination(transformPlugin)} to the '${transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets"}' section of your Babel config to enable transformation.\nIf you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
							else helpMessage += `\n\nAdd ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;
						}
					}
					return helpMessage += `\n\nIf you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.\nYou can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n\tnpx cross-env BABEL_SHOW_CONFIG_FOR=${filename === "unknown" ? "<name of the input file>" : filename} <your build command>\nSee https://babeljs.io/docs/configuration#print-effective-configs for more info.\n`, helpMessage;
				};
				const pluginNameMap = {
					asyncDoExpressions: { syntax: {
						name: "@babel/plugin-syntax-async-do-expressions",
						url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions"
					} },
					decimal: { syntax: {
						name: "@babel/plugin-syntax-decimal",
						url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal"
					} },
					decorators: {
						syntax: {
							name: "@babel/plugin-syntax-decorators",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators"
						},
						transform: {
							name: "@babel/plugin-proposal-decorators",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators"
						}
					},
					doExpressions: {
						syntax: {
							name: "@babel/plugin-syntax-do-expressions",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions"
						},
						transform: {
							name: "@babel/plugin-proposal-do-expressions",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions"
						}
					},
					exportDefaultFrom: {
						syntax: {
							name: "@babel/plugin-syntax-export-default-from",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from"
						},
						transform: {
							name: "@babel/plugin-proposal-export-default-from",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from"
						}
					},
					flow: {
						syntax: {
							name: "@babel/plugin-syntax-flow",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow"
						},
						transform: {
							name: "@babel/preset-flow",
							url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow"
						}
					},
					functionBind: {
						syntax: {
							name: "@babel/plugin-syntax-function-bind",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind"
						},
						transform: {
							name: "@babel/plugin-proposal-function-bind",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind"
						}
					},
					functionSent: {
						syntax: {
							name: "@babel/plugin-syntax-function-sent",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent"
						},
						transform: {
							name: "@babel/plugin-proposal-function-sent",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent"
						}
					},
					jsx: {
						syntax: {
							name: "@babel/plugin-syntax-jsx",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx"
						},
						transform: {
							name: "@babel/preset-react",
							url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react"
						}
					},
					pipelineOperator: {
						syntax: {
							name: "@babel/plugin-syntax-pipeline-operator",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator"
						},
						transform: {
							name: "@babel/plugin-proposal-pipeline-operator",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator"
						}
					},
					recordAndTuple: { syntax: {
						name: "@babel/plugin-syntax-record-and-tuple",
						url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple"
					} },
					throwExpressions: {
						syntax: {
							name: "@babel/plugin-syntax-throw-expressions",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions"
						},
						transform: {
							name: "@babel/plugin-proposal-throw-expressions",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions"
						}
					},
					typescript: {
						syntax: {
							name: "@babel/plugin-syntax-typescript",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript"
						},
						transform: {
							name: "@babel/preset-typescript",
							url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript"
						}
					}
				};
				Object.assign(pluginNameMap, {
					asyncGenerators: {
						syntax: {
							name: "@babel/plugin-syntax-async-generators",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators"
						},
						transform: {
							name: "@babel/plugin-transform-async-generator-functions",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions"
						}
					},
					classProperties: {
						syntax: {
							name: "@babel/plugin-syntax-class-properties",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
						},
						transform: {
							name: "@babel/plugin-transform-class-properties",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
						}
					},
					classPrivateProperties: {
						syntax: {
							name: "@babel/plugin-syntax-class-properties",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
						},
						transform: {
							name: "@babel/plugin-transform-class-properties",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
						}
					},
					classPrivateMethods: {
						syntax: {
							name: "@babel/plugin-syntax-class-properties",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
						},
						transform: {
							name: "@babel/plugin-transform-private-methods",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods"
						}
					},
					classStaticBlock: {
						syntax: {
							name: "@babel/plugin-syntax-class-static-block",
							url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block"
						},
						transform: {
							name: "@babel/plugin-transform-class-static-block",
							url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block"
						}
					},
					dynamicImport: { syntax: {
						name: "@babel/plugin-syntax-dynamic-import",
						url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import"
					} },
					exportNamespaceFrom: {
						syntax: {
							name: "@babel/plugin-syntax-export-namespace-from",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from"
						},
						transform: {
							name: "@babel/plugin-transform-export-namespace-from",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from"
						}
					},
					importAssertions: { syntax: {
						name: "@babel/plugin-syntax-import-assertions",
						url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions"
					} },
					importAttributes: { syntax: {
						name: "@babel/plugin-syntax-import-attributes",
						url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes"
					} },
					importMeta: { syntax: {
						name: "@babel/plugin-syntax-import-meta",
						url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta"
					} },
					logicalAssignment: {
						syntax: {
							name: "@babel/plugin-syntax-logical-assignment-operators",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators"
						},
						transform: {
							name: "@babel/plugin-transform-logical-assignment-operators",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators"
						}
					},
					moduleStringNames: { syntax: {
						name: "@babel/plugin-syntax-module-string-names",
						url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names"
					} },
					numericSeparator: {
						syntax: {
							name: "@babel/plugin-syntax-numeric-separator",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator"
						},
						transform: {
							name: "@babel/plugin-transform-numeric-separator",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator"
						}
					},
					nullishCoalescingOperator: {
						syntax: {
							name: "@babel/plugin-syntax-nullish-coalescing-operator",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator"
						},
						transform: {
							name: "@babel/plugin-transform-nullish-coalescing-operator",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator"
						}
					},
					objectRestSpread: {
						syntax: {
							name: "@babel/plugin-syntax-object-rest-spread",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread"
						},
						transform: {
							name: "@babel/plugin-transform-object-rest-spread",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread"
						}
					},
					optionalCatchBinding: {
						syntax: {
							name: "@babel/plugin-syntax-optional-catch-binding",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding"
						},
						transform: {
							name: "@babel/plugin-transform-optional-catch-binding",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding"
						}
					},
					optionalChaining: {
						syntax: {
							name: "@babel/plugin-syntax-optional-chaining",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining"
						},
						transform: {
							name: "@babel/plugin-transform-optional-chaining",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining"
						}
					},
					privateIn: {
						syntax: {
							name: "@babel/plugin-syntax-private-property-in-object",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object"
						},
						transform: {
							name: "@babel/plugin-transform-private-property-in-object",
							url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object"
						}
					},
					regexpUnicodeSets: {
						syntax: {
							name: "@babel/plugin-syntax-unicode-sets-regex",
							url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md"
						},
						transform: {
							name: "@babel/plugin-transform-unicode-sets-regex",
							url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md"
						}
					}
				});
				const getNameURLCombination = ({ name, url }) => `${name} (${url})`;
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/tools/build-external-helpers.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function helpers() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js");
					return helpers = function() {
						return data;
					}, data;
				}
				function _generator() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js");
					return _generator = function() {
						return data;
					}, data;
				}
				function _template() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
					return _template = function() {
						return data;
					}, data;
				}
				function _t() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
					return _t = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(allowlist, outputType = "global") {
					let tree;
					const build = {
						global: buildGlobal,
						module: buildModule,
						umd: buildUmd,
						var: buildVar
					}[outputType];
					if (!build) throw new Error(`Unsupported output type ${outputType}`);
					tree = build(allowlist);
					return (0, _generator().default)(tree).code;
				};
				const { arrayExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, cloneNode, conditionalExpression, exportNamedDeclaration, exportSpecifier, expressionStatement, functionExpression, identifier, memberExpression, objectExpression, program, stringLiteral, unaryExpression, variableDeclaration, variableDeclarator } = _t(), buildUmdWrapper = (replacements) => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);
				function buildGlobal(allowlist) {
					const namespace = identifier("babelHelpers"), body = [], container = functionExpression(null, [identifier("global")], blockStatement(body)), tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
					return body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))])), buildHelpers(body, namespace, allowlist), tree;
				}
				function buildModule(allowlist) {
					const body = [], refs = buildHelpers(body, null, allowlist);
					return body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => exportSpecifier(cloneNode(refs[name]), identifier(name))))), program(body, [], "module");
				}
				function buildUmd(allowlist) {
					const namespace = identifier("babelHelpers"), body = [];
					return body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))])), buildHelpers(body, namespace, allowlist), program([buildUmdWrapper({
						FACTORY_PARAMETERS: identifier("global"),
						BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])),
						COMMON_ARGUMENTS: identifier("exports"),
						AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]),
						FACTORY_BODY: body,
						UMD_ROOT: identifier("this")
					})]);
				}
				function buildVar(allowlist) {
					const namespace = identifier("babelHelpers"), body = [];
					body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
					const tree = program(body);
					return buildHelpers(body, namespace, allowlist), body.push(expressionStatement(namespace)), tree;
				}
				function buildHelpers(body, namespace, allowlist) {
					const getHelperReference = (name) => namespace ? memberExpression(namespace, identifier(name)) : identifier(`_${name}`), refs = {};
					return helpers().list.forEach(function(name) {
						if (allowlist && !allowlist.includes(name)) return;
						const ref = refs[name] = getHelperReference(name), { nodes } = helpers().get(name, getHelperReference, namespace ? null : `_${name}`, [], namespace ? (ast, exportName, mapExportBindingAssignments) => {
							mapExportBindingAssignments((node) => assignmentExpression("=", ref, node)), ast.body.push(expressionStatement(assignmentExpression("=", ref, identifier(exportName))));
						} : null);
						body.push(...nodes);
					}), refs;
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-ast.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.transformFromAst = void 0, exports$1.transformFromAstAsync = function(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
				}, exports$1.transformFromAstSync = function(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
				const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
					const config$2 = yield* (0, _index.default)(opts);
					if (null === config$2) return null;
					if (!ast) throw new Error("No AST given");
					return yield* (0, _index2.run)(config$2, code, ast);
				});
				exports$1.transformFromAst = function(ast, code, optsOrCallback, maybeCallback) {
					let opts, callback;
					if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
					(0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.transformFile = function(...args) {
					transformFileRunner.errback(...args);
				}, exports$1.transformFileAsync = function(...args) {
					return transformFileRunner.async(...args);
				}, exports$1.transformFileSync = function(...args) {
					return transformFileRunner.sync(...args);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), fs$3 = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js");
				const transformFileRunner = _gensync()(function* (filename, opts) {
					const options = Object.assign({}, opts, { filename }), config$2 = yield* (0, _index.default)(options);
					if (null === config$2) return null;
					const code = yield* fs$3.readFile(filename, "utf8");
					return yield* (0, _index2.run)(config$2, code);
				});
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _gensync() {
					const data = __webpack_require__$1("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
					return _gensync = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.transform = void 0, exports$1.transformAsync = function(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
				}, exports$1.transformSync = function(...args) {
					return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
				const transformRunner = _gensync()(function* (code, opts) {
					const config$2 = yield* (0, _index.default)(opts);
					return null === config$2 ? null : yield* (0, _index2.run)(config$2, code);
				});
				exports$1.transform = function(code, optsOrCallback, maybeCallback) {
					let opts, callback;
					if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback) return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
					(0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _traverse() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
					return _traverse = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function() {
					LOADED_PLUGIN || (LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, { visitor: _traverse().default.explode(blockHoistPlugin.visitor) }), {}));
					return LOADED_PLUGIN;
				};
				var _plugin = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js");
				let LOADED_PLUGIN;
				const blockHoistPlugin = {
					name: "internal.blockHoist",
					visitor: {
						Block: { exit({ node }) {
							node.body = performHoisting(node.body);
						} },
						SwitchCase: { exit({ node }) {
							node.consequent = performHoisting(node.consequent);
						} }
					}
				};
				function performHoisting(body) {
					let max = Math.pow(2, 30) - 1, hasChange = !1;
					for (let i = 0; i < body.length; i++) {
						const p$1 = priority(body[i]);
						if (p$1 > max) {
							hasChange = !0;
							break;
						}
						max = p$1;
					}
					return hasChange ? function(body$1) {
						const buckets = Object.create(null);
						for (let i = 0; i < body$1.length; i++) {
							const n = body$1[i], p$1 = priority(n);
							(buckets[p$1] || (buckets[p$1] = [])).push(n);
						}
						const keys = Object.keys(buckets).map((k$2) => +k$2).sort((a, b$2) => b$2 - a);
						let index = 0;
						for (const key of keys) {
							const bucket = buckets[key];
							for (const n of bucket) body$1[index++] = n;
						}
						return body$1;
					}(body.slice()) : body;
				}
				function priority(bodyNode) {
					const priority$1 = null == bodyNode ? void 0 : bodyNode._blockHoist;
					return null == priority$1 ? 1 : !0 === priority$1 ? 2 : priority$1;
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				exports$1.getModuleName = () => __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js").getModuleName;
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function helpers() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js");
					return helpers = function() {
						return data;
					}, data;
				}
				function _traverse() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
					return _traverse = function() {
						return data;
					}, data;
				}
				function _codeFrame() {
					const data = __webpack_require__$1("./stubs/babel-codeframe.mjs");
					return _codeFrame = function() {
						return data;
					}, data;
				}
				function _t() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
					return _t = function() {
						return data;
					}, data;
				}
				function _semver() {
					const data = __webpack_require__$1("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
					return _semver = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var babel7 = function(e$1, r$1) {
					if (!r$1 && e$1 && e$1.__esModule) return e$1;
					if (null === e$1 || "object" != typeof e$1 && "function" != typeof e$1) return { default: e$1 };
					var t = _getRequireWildcardCache(r$1);
					if (t && t.has(e$1)) return t.get(e$1);
					var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
					for (var u$1 in e$1) if ("default" !== u$1 && {}.hasOwnProperty.call(e$1, u$1)) {
						var i = a ? Object.getOwnPropertyDescriptor(e$1, u$1) : null;
						i && (i.get || i.set) ? Object.defineProperty(n, u$1, i) : n[u$1] = e$1[u$1];
					}
					return n.default = e$1, t && t.set(e$1, n), n;
				}(__webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs"), !0);
				function _getRequireWildcardCache(e$1) {
					if ("function" != typeof WeakMap) return null;
					var r$1 = new WeakMap(), t = new WeakMap();
					return (_getRequireWildcardCache = function(e$2) {
						return e$2 ? t : r$1;
					})(e$1);
				}
				const { cloneNode, interpreterDirective } = _t(), errorVisitor = { enter(path$9, state) {
					const loc = path$9.node.loc;
					loc && (state.loc = loc, path$9.stop());
				} };
				class File$4 {
					constructor(options, { code, ast, inputMap }) {
						this._map = new Map(), this.opts = void 0, this.declarations = {}, this.path = void 0, this.ast = void 0, this.scope = void 0, this.metadata = {}, this.code = "", this.inputMap = void 0, this.hub = {
							file: this,
							getCode: () => this.code,
							getScope: () => this.scope,
							addHelper: this.addHelper.bind(this),
							buildError: this.buildCodeFrameError.bind(this)
						}, this.opts = options, this.code = code, this.ast = ast, this.inputMap = inputMap, this.path = _traverse().NodePath.get({
							hub: this.hub,
							parentPath: null,
							parent: this.ast,
							container: this.ast,
							key: "program"
						}).setContext(), this.scope = this.path.scope;
					}
					get shebang() {
						const { interpreter } = this.path.node;
						return interpreter ? interpreter.value : "";
					}
					set shebang(value$1) {
						value$1 ? this.path.get("interpreter").replaceWith(interpreterDirective(value$1)) : this.path.get("interpreter").remove();
					}
					set(key, val) {
						if ("helpersNamespace" === key) throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
						this._map.set(key, val);
					}
					get(key) {
						return this._map.get(key);
					}
					has(key) {
						return this._map.has(key);
					}
					availableHelper(name, versionRange) {
						let minVersion;
						try {
							minVersion = helpers().minVersion(name);
						} catch (err) {
							if ("BABEL_HELPER_UNKNOWN" !== err.code) throw err;
							return !1;
						}
						return "string" != typeof versionRange || (_semver().valid(versionRange) && (versionRange = `^${versionRange}`), !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(">=8.0.0", versionRange));
					}
					addHelper(name) {
						const declar = this.declarations[name];
						if (declar) return cloneNode(declar);
						const generator = this.get("helperGenerator");
						if (generator) {
							const res = generator(name);
							if (res) return res;
						}
						helpers().minVersion(name);
						const uid$2 = this.declarations[name] = this.scope.generateUidIdentifier(name), dependencies = {};
						for (const dep of helpers().getDependencies(name)) dependencies[dep] = this.addHelper(dep);
						const { nodes, globals } = helpers().get(name, (dep) => dependencies[dep], uid$2.name, Object.keys(this.scope.getAllBindings()));
						globals.forEach((name$1) => {
							this.path.scope.hasBinding(name$1, !0) && this.path.scope.rename(name$1);
						}), nodes.forEach((node) => {
							node._compact = !0;
						});
						const added = this.path.unshiftContainer("body", nodes);
						for (const path$9 of added) path$9.isVariableDeclaration() && this.scope.registerDeclaration(path$9);
						return uid$2;
					}
					buildCodeFrameError(node, msg, _Error = SyntaxError) {
						let loc = null == node ? void 0 : node.loc;
						if (!loc && node) {
							const state = { loc: null };
							(0, _traverse().default)(node, errorVisitor, this.scope, state), loc = state.loc;
							let txt = "This is an error on an internal node. Probably an internal error.";
							loc && (txt += " Location has been estimated."), msg += ` (${txt})`;
						}
						if (loc) {
							const { highlightCode = !0 } = this.opts;
							msg += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, {
								start: {
									line: loc.start.line,
									column: loc.start.column + 1
								},
								end: loc.end && loc.start.line === loc.end.line ? {
									line: loc.end.line,
									column: loc.end.column + 1
								} : void 0
							}, { highlightCode });
						}
						return new _Error(msg);
					}
				}
				exports$1.default = File$4, File$4.prototype.addImport = function() {
					throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
				}, File$4.prototype.addTemplateObject = function() {
					throw new Error("This function has been moved into the template literal transform itself.");
				}, File$4.prototype.getModuleName = function() {
					return babel7.getModuleName()(this.opts, this.opts);
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/generate.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _convertSourceMap() {
					const data = __webpack_require__$1("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
					return _convertSourceMap = function() {
						return data;
					}, data;
				}
				function _generator() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js");
					return _generator = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(pluginPasses, file) {
					const { opts, ast, code, inputMap } = file, { generatorOpts } = opts;
					generatorOpts.inputSourceMap = null == inputMap ? void 0 : inputMap.toObject();
					const results = [];
					for (const plugins of pluginPasses) for (const plugin of plugins) {
						const { generatorOverride } = plugin;
						if (generatorOverride) {
							const result$1 = generatorOverride(ast, generatorOpts, code, _generator().default);
							void 0 !== result$1 && results.push(result$1);
						}
					}
					let result;
					if (0 === results.length) result = (0, _generator().default)(ast, generatorOpts, code);
					else {
						if (1 !== results.length) throw new Error("More than one plugin attempted to override codegen.");
						if (result = results[0], "function" == typeof result.then) throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
					}
					let { code: outputCode, decodedMap: outputMap = result.map } = result;
					result.__mergedMap ? outputMap = Object.assign({}, result.map) : outputMap && (outputMap = inputMap ? (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName) : result.map);
					"inline" !== opts.sourceMaps && "both" !== opts.sourceMaps || (outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment());
					"inline" === opts.sourceMaps && (outputMap = null);
					return {
						outputCode,
						outputMap
					};
				};
				var _mergeMap = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/merge-map.js");
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/merge-map.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _remapping() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@ampproject+remapping@2.3.0/node_modules/@ampproject/remapping/dist/remapping.umd.js");
					return _remapping = function() {
						return data;
					}, data;
				}
				function rootless(map) {
					return Object.assign({}, map, { sourceRoot: null });
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(inputMap, map, sourceFileName) {
					const source = sourceFileName.replace(/\\/g, "/");
					let found = !1;
					const result = _remapping()(rootless(map), (s, ctx) => s !== source || found ? null : (found = !0, ctx.source = "", rootless(inputMap)));
					"string" == typeof inputMap.sourceRoot && (result.sourceRoot = inputMap.sourceRoot);
					return Object.assign({}, result);
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _traverse() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
					return _traverse = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.run = function* (config$2, code, ast) {
					const file = yield* (0, _normalizeFile.default)(config$2.passes, (0, _normalizeOpts.default)(config$2), code, ast), opts = file.opts;
					try {
						yield* function* (file$1, pluginPasses) {
							const async = yield* (0, _async.isAsync)();
							for (const pluginPairs of pluginPasses) {
								const passPairs = [], passes = [], visitors = [];
								for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
									const pass = new _pluginPass.default(file$1, plugin.key, plugin.options, async);
									passPairs.push([plugin, pass]), passes.push(pass), visitors.push(plugin.visitor);
								}
								for (const [plugin, pass] of passPairs) if (plugin.pre) {
									const fn = (0, _async.maybeAsync)(plugin.pre, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
									yield* fn.call(pass, file$1);
								}
								const visitor = _traverse().default.visitors.merge(visitors, passes, file$1.opts.wrapPluginVisitorMethod);
								(0, _traverse().default)(file$1.ast, visitor, file$1.scope);
								for (const [plugin, pass] of passPairs) if (plugin.post) {
									const fn = (0, _async.maybeAsync)(plugin.post, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
									yield* fn.call(pass, file$1);
								}
							}
						}(file, config$2.passes);
					} catch (e$1) {
						var _opts$filename;
						throw e$1.message = `${null != (_opts$filename = opts.filename) ? _opts$filename : "unknown file"}: ${e$1.message}`, e$1.code || (e$1.code = "BABEL_TRANSFORM_ERROR"), e$1;
					}
					let outputCode, outputMap;
					try {
						!1 !== opts.code && ({outputCode, outputMap} = (0, _generate.default)(config$2.passes, file));
					} catch (e$1) {
						var _opts$filename2;
						throw e$1.message = `${null != (_opts$filename2 = opts.filename) ? _opts$filename2 : "unknown file"}: ${e$1.message}`, e$1.code || (e$1.code = "BABEL_GENERATE_ERROR"), e$1;
					}
					return {
						metadata: file.metadata,
						options: opts,
						ast: !0 === opts.ast ? file.ast : null,
						code: void 0 === outputCode ? null : outputCode,
						map: void 0 === outputMap ? null : outputMap,
						sourceType: file.ast.program.sourceType,
						externalDependencies: (0, _deepArray.flattenToSet)(config$2.externalDependencies)
					};
				};
				var _pluginPass = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/plugin-pass.js"), _blockHoistPlugin = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js"), _normalizeOpts = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _normalizeFile = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-file.js"), _generate = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/generate.js"), _deepArray = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js"), _async = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-file.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _fs() {
					const data = __webpack_require__$1("fs");
					return _fs = function() {
						return data;
					}, data;
				}
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				function _debug$1() {
					const data = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
					return _debug$1 = function() {
						return data;
					}, data;
				}
				function _t() {
					const data = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
					return _t = function() {
						return data;
					}, data;
				}
				function _convertSourceMap() {
					const data = __webpack_require__$1("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
					return _convertSourceMap = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function* (pluginPasses, options, code, ast) {
					if (code = `${code || ""}`, ast) {
						if ("Program" === ast.type) ast = file(ast, [], []);
						else if ("File" !== ast.type) throw new Error("AST root must be a Program or File node");
						options.cloneInputAst && (ast = (0, _cloneDeep.default)(ast));
					} else ast = yield* (0, _index.default)(pluginPasses, options, code);
					let inputMap = null;
					if (!1 !== options.inputSourceMap) {
						if ("object" == typeof options.inputSourceMap && (inputMap = _convertSourceMap().fromObject(options.inputSourceMap)), !inputMap) {
							const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
							if (lastComment) try {
								inputMap = _convertSourceMap().fromComment("//" + lastComment);
							} catch (err) {
								debug$5("discarding unknown inline input sourcemap");
							}
						}
						if (!inputMap) {
							const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
							if ("string" == typeof options.filename && lastComment) try {
								const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment), inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]), "utf8");
								inputMap = _convertSourceMap().fromJSON(inputMapContent);
							} catch (err) {
								debug$5("discarding unknown file input sourcemap", err);
							}
							else lastComment && debug$5("discarding un-loadable file input sourcemap");
						}
					}
					return new _file.default(options, {
						code,
						ast,
						inputMap
					});
				};
				var _file = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js"), _cloneDeep = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/util/clone-deep.js");
				const { file, traverseFast } = _t(), debug$5 = _debug$1()("babel:transform:file"), INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,.*$/, EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
				function extractCommentsFromList(regex, comments, lastComment) {
					return comments && (comments = comments.filter(({ value: value$1 }) => !regex.test(value$1) || (lastComment = value$1, !1))), [comments, lastComment];
				}
				function extractComments(regex, ast) {
					let lastComment = null;
					return traverseFast(ast, (node) => {
						[node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment), [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment), [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
					}), lastComment;
				}
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(config$2) {
					const { filename, cwd, filenameRelative = "string" == typeof filename ? _path().relative(cwd, filename) : "unknown", sourceType = "module", inputSourceMap, sourceMaps = !!inputSourceMap, sourceRoot = config$2.options.moduleRoot, sourceFileName = _path().basename(filenameRelative), comments = !0, compact = "auto" } = config$2.options, opts = config$2.options, options = Object.assign({}, opts, {
						parserOpts: Object.assign({
							sourceType: ".mjs" === _path().extname(filenameRelative) ? "module" : sourceType,
							sourceFileName: filename,
							plugins: []
						}, opts.parserOpts),
						generatorOpts: Object.assign({
							filename,
							auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
							auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
							retainLines: opts.retainLines,
							comments,
							shouldPrintComment: opts.shouldPrintComment,
							compact,
							minified: opts.minified,
							sourceMaps,
							sourceRoot,
							sourceFileName
						}, opts.generatorOpts)
					});
					for (const plugins of config$2.passes) for (const plugin of plugins) plugin.manipulateOptions && plugin.manipulateOptions(options, options.parserOpts);
					return options;
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/plugin-pass.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				class PluginPass {
					constructor(file, key, options, isAsync) {
						this._map = new Map(), this.key = void 0, this.file = void 0, this.opts = void 0, this.cwd = void 0, this.filename = void 0, this.isAsync = void 0, this.key = key, this.file = file, this.opts = options || {}, this.cwd = file.opts.cwd, this.filename = file.opts.filename, this.isAsync = isAsync;
					}
					set(key, val) {
						this._map.set(key, val);
					}
					get(key) {
						return this._map.get(key);
					}
					availableHelper(name, versionRange) {
						return this.file.availableHelper(name, versionRange);
					}
					addHelper(name) {
						return this.file.addHelper(name);
					}
					buildCodeFrameError(node, msg, _Error) {
						return this.file.buildCodeFrameError(node, msg, _Error);
					}
				}
				exports$1.default = PluginPass, PluginPass.prototype.getModuleName = function() {
					return this.file.getModuleName();
				}, PluginPass.prototype.addImport = function() {
					this.file.addImport();
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/util/clone-deep.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				function deepClone$1(value$1, cache) {
					if (null !== value$1) {
						if (cache.has(value$1)) return cache.get(value$1);
						let cloned;
						if (Array.isArray(value$1)) {
							cloned = new Array(value$1.length), cache.set(value$1, cloned);
							for (let i = 0; i < value$1.length; i++) cloned[i] = "object" != typeof value$1[i] ? value$1[i] : deepClone$1(value$1[i], cache);
						} else {
							cloned = {}, cache.set(value$1, cloned);
							const keys = Object.keys(value$1);
							for (let i = 0; i < keys.length; i++) {
								const key = keys[i];
								cloned[key] = "object" != typeof value$1[key] ? value$1[key] : deepClone$1(value$1[key], cache);
							}
						}
						return cloned;
					}
					return value$1;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(value$1) {
					return "object" != typeof value$1 ? value$1 : deepClone$1(value$1, new Map());
				};
			},
			"./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/vendor/import-meta-resolve.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _assert() {
					const data = __webpack_require__$1("assert");
					return _assert = function() {
						return data;
					}, data;
				}
				function _fs() {
					const data = function(e$1, r$1) {
						if (!r$1 && e$1 && e$1.__esModule) return e$1;
						if (null === e$1 || "object" != typeof e$1 && "function" != typeof e$1) return { default: e$1 };
						var t = _getRequireWildcardCache(r$1);
						if (t && t.has(e$1)) return t.get(e$1);
						var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
						for (var u$1 in e$1) if ("default" !== u$1 && {}.hasOwnProperty.call(e$1, u$1)) {
							var i = a ? Object.getOwnPropertyDescriptor(e$1, u$1) : null;
							i && (i.get || i.set) ? Object.defineProperty(n, u$1, i) : n[u$1] = e$1[u$1];
						}
						return n.default = e$1, t && t.set(e$1, n), n;
					}(__webpack_require__$1("fs"), !0);
					return _fs = function() {
						return data;
					}, data;
				}
				function _process() {
					const data = __webpack_require__$1("process");
					return _process = function() {
						return data;
					}, data;
				}
				function _url() {
					const data = __webpack_require__$1("url");
					return _url = function() {
						return data;
					}, data;
				}
				function _path() {
					const data = __webpack_require__$1("path");
					return _path = function() {
						return data;
					}, data;
				}
				function _module() {
					const data = __webpack_require__$1("module");
					return _module = function() {
						return data;
					}, data;
				}
				function _v() {
					const data = __webpack_require__$1("v8");
					return _v = function() {
						return data;
					}, data;
				}
				function _util() {
					const data = __webpack_require__$1("util");
					return _util = function() {
						return data;
					}, data;
				}
				function _getRequireWildcardCache(e$1) {
					if ("function" != typeof WeakMap) return null;
					var r$1 = new WeakMap(), t = new WeakMap();
					return (_getRequireWildcardCache = function(e$2) {
						return e$2 ? t : r$1;
					})(e$1);
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.moduleResolve = moduleResolve, exports$1.resolve = function(specifier, parent) {
					if (!parent) throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
					try {
						return function(specifier$1, context = {}) {
							const { parentURL } = context;
							let parsedParentURL, parsed, protocol;
							if (_assert()(void 0 !== parentURL, "expected `parentURL` to be defined"), function(parentURL$1) {
								if (void 0 === parentURL$1) return;
								if ("string" != typeof parentURL$1 && (self$1 = parentURL$1, !Boolean(self$1 && "object" == typeof self$1 && "href" in self$1 && "string" == typeof self$1.href && "protocol" in self$1 && "string" == typeof self$1.protocol && self$1.href && self$1.protocol))) throw new codes.ERR_INVALID_ARG_TYPE("parentURL", ["string", "URL"], parentURL$1);
								var self$1;
							}(parentURL), parentURL) try {
								parsedParentURL = new (_url()).URL(parentURL);
							} catch (_unused4) {}
							try {
								if (parsed = shouldBeTreatedAsRelativeOrAbsolutePath(specifier$1) ? new (_url()).URL(specifier$1, parsedParentURL) : new (_url()).URL(specifier$1), protocol = parsed.protocol, "data:" === protocol) return {
									url: parsed.href,
									format: null
								};
							} catch (_unused5) {}
							const maybeReturn = function(specifier$2, parsed$1, parsedParentURL$1) {
								if (parsedParentURL$1) {
									const parentProtocol = parsedParentURL$1.protocol;
									if ("http:" === parentProtocol || "https:" === parentProtocol) {
										if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier$2)) {
											const parsedProtocol = null == parsed$1 ? void 0 : parsed$1.protocol;
											if (parsedProtocol && "https:" !== parsedProtocol && "http:" !== parsedProtocol) throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier$2, parsedParentURL$1, "remote imports cannot import from a local location.");
											return { url: (null == parsed$1 ? void 0 : parsed$1.href) || "" };
										}
										if (_module().builtinModules.includes(specifier$2)) throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier$2, parsedParentURL$1, "remote imports cannot import from a local location.");
										throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier$2, parsedParentURL$1, "only relative and absolute specifiers are supported.");
									}
								}
							}(specifier$1, parsed, parsedParentURL);
							if (maybeReturn) return maybeReturn;
							void 0 === protocol && parsed && (protocol = parsed.protocol);
							if ("node:" === protocol) return { url: specifier$1 };
							if (parsed && "node:" === parsed.protocol) return { url: specifier$1 };
							const conditions = function(conditions$1) {
								if (void 0 !== conditions$1 && conditions$1 !== DEFAULT_CONDITIONS) {
									if (!Array.isArray(conditions$1)) throw new ERR_INVALID_ARG_VALUE("conditions", conditions$1, "expected an array");
									return new Set(conditions$1);
								}
								return DEFAULT_CONDITIONS_SET;
							}(context.conditions), url = moduleResolve(specifier$1, new (_url()).URL(parentURL), conditions, !1);
							return {
								url: url.href,
								format: defaultGetFormatWithoutErrors(url, { parentURL })
							};
						}(specifier, { parentURL: parent }).url;
					} catch (error$1) {
						const exception = error$1;
						if (("ERR_UNSUPPORTED_DIR_IMPORT" === exception.code || "ERR_MODULE_NOT_FOUND" === exception.code) && "string" == typeof exception.url) return exception.url;
						throw error$1;
					}
				};
				const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = new Set([
					"string",
					"function",
					"number",
					"object",
					"Function",
					"Object",
					"boolean",
					"bigint",
					"symbol"
				]), codes = {};
				function formatList(array, type$1 = "and") {
					return array.length < 3 ? array.join(` ${type$1} `) : `${array.slice(0, -1).join(", ")}, ${type$1} ${array[array.length - 1]}`;
				}
				const messages = new Map();
				let userStackTraceLimit;
				function createError$1(sym, value$1, constructor) {
					return messages.set(sym, value$1), function(Base, key) {
						return NodeError;
						function NodeError(...parameters) {
							const limit = Error.stackTraceLimit;
							isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
							const error$1 = new Base();
							isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
							const message = function(key$1, parameters$1, self$1) {
								const message$1 = messages.get(key$1);
								if (_assert()(void 0 !== message$1, "expected `message` to be found"), "function" == typeof message$1) return _assert()(message$1.length <= parameters$1.length, `Code: ${key$1}; The provided arguments length (${parameters$1.length}) does not match the required ones (${message$1.length}).`), Reflect.apply(message$1, self$1, parameters$1);
								const regex = /%[dfijoOs]/g;
								let expectedLength = 0;
								for (; null !== regex.exec(message$1);) expectedLength++;
								return _assert()(expectedLength === parameters$1.length, `Code: ${key$1}; The provided arguments length (${parameters$1.length}) does not match the required ones (${expectedLength}).`), 0 === parameters$1.length ? message$1 : (parameters$1.unshift(message$1), Reflect.apply(_util().format, null, parameters$1));
							}(key, parameters, error$1);
							return Object.defineProperties(error$1, {
								message: {
									value: message,
									enumerable: !1,
									writable: !0,
									configurable: !0
								},
								toString: {
									value() {
										return `${this.name} [${key}]: ${this.message}`;
									},
									enumerable: !1,
									writable: !0,
									configurable: !0
								}
							}), captureLargerStackTrace(error$1), error$1.code = key, error$1;
						}
					}(constructor, sym);
				}
				function isErrorStackTraceLimitWritable() {
					try {
						if (_v().startupSnapshot.isBuildingSnapshot()) return !1;
					} catch (_unused) {}
					const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
					return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
				}
				codes.ERR_INVALID_ARG_TYPE = createError$1("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
					_assert()("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
					let message = "The ";
					if (name.endsWith(" argument")) message += `${name} `;
					else {
						const type$1 = name.includes(".") ? "property" : "argument";
						message += `"${name}" ${type$1} `;
					}
					message += "must be ";
					const types$7 = [], instances = [], other = [];
					for (const value$1 of expected) _assert()("string" == typeof value$1, "All expected entries have to be of type string"), kTypes.has(value$1) ? types$7.push(value$1.toLowerCase()) : null === classRegExp.exec(value$1) ? (_assert()("object" !== value$1, "The value \"object\" should be written as \"Object\""), other.push(value$1)) : instances.push(value$1);
					if (instances.length > 0) {
						const pos = types$7.indexOf("object");
						-1 !== pos && (types$7.slice(pos, 1), instances.push("Object"));
					}
					return types$7.length > 0 && (message += `${types$7.length > 1 ? "one of type" : "of type"} ${formatList(types$7, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value$1) {
						if (null == value$1) return String(value$1);
						if ("function" == typeof value$1 && value$1.name) return `function ${value$1.name}`;
						if ("object" == typeof value$1) return value$1.constructor && value$1.constructor.name ? `an instance of ${value$1.constructor.name}` : `${(0, _util().inspect)(value$1, { depth: -1 })}`;
						let inspected = (0, _util().inspect)(value$1, { colors: !1 });
						inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
						return `type ${typeof value$1} (${inspected})`;
					}(actual)}`, message;
				}, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError$1("ERR_INVALID_MODULE_SPECIFIER", (request$1, reason, base = void 0) => `Invalid module "${request$1}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError$1("ERR_INVALID_PACKAGE_CONFIG", (path$9, base, message) => `Invalid package config ${path$9}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError$1("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = !1, base = void 0) => {
					const relatedError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
					return "." === key ? (_assert()(!1 === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? "; targets must start with \"./\"" : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? "; targets must start with \"./\"" : ""}`;
				}, Error), codes.ERR_MODULE_NOT_FOUND = createError$1("ERR_MODULE_NOT_FOUND", (path$9, base, exactUrl = !1) => `Cannot find ${exactUrl ? "module" : "package"} '${path$9}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError$1("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError$1("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError$1("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError$1("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError$1("ERR_UNSUPPORTED_RESOLVE_REQUEST", "Failed to resolve module specifier \"%s\" from \"%s\": Invalid relative URL or base scheme is not hierarchical.", TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError$1("ERR_UNKNOWN_FILE_EXTENSION", (extension, path$9) => `Unknown file extension "${extension}" for ${path$9}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError$1("ERR_INVALID_ARG_VALUE", (name, value$1, reason = "is invalid") => {
					let inspected = (0, _util().inspect)(value$1);
					inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
					return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
				}, TypeError);
				const captureLargerStackTrace = function(wrappedFunction) {
					const hidden = "__node_internal_" + wrappedFunction.name;
					return Object.defineProperty(wrappedFunction, "name", { value: hidden }), wrappedFunction;
				}(function(error$1) {
					const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
					return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error$1), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error$1;
				});
				const hasOwnProperty$1 = {}.hasOwnProperty, { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, cache = new Map();
				function read$1(jsonPath, { base, specifier }) {
					const existing = cache.get(jsonPath);
					if (existing) return existing;
					let string;
					try {
						string = _fs().default.readFileSync(_path().toNamespacedPath(jsonPath), "utf8");
					} catch (error$1) {
						const exception = error$1;
						if ("ENOENT" !== exception.code) throw exception;
					}
					const result = {
						exists: !1,
						pjsonPath: jsonPath,
						main: void 0,
						name: void 0,
						type: "none",
						exports: void 0,
						imports: void 0
					};
					if (void 0 !== string) {
						let parsed;
						try {
							parsed = JSON.parse(string);
						} catch (error_) {
							const cause = error_, error$1 = new ERR_INVALID_PACKAGE_CONFIG$1(jsonPath, (base ? `"${specifier}" from ` : "") + (0, _url().fileURLToPath)(base || specifier), cause.message);
							throw error$1.cause = cause, error$1;
						}
						result.exists = !0, hasOwnProperty$1.call(parsed, "name") && "string" == typeof parsed.name && (result.name = parsed.name), hasOwnProperty$1.call(parsed, "main") && "string" == typeof parsed.main && (result.main = parsed.main), hasOwnProperty$1.call(parsed, "exports") && (result.exports = parsed.exports), hasOwnProperty$1.call(parsed, "imports") && (result.imports = parsed.imports), !hasOwnProperty$1.call(parsed, "type") || "commonjs" !== parsed.type && "module" !== parsed.type || (result.type = parsed.type);
					}
					return cache.set(jsonPath, result), result;
				}
				function getPackageScopeConfig(resolved) {
					let packageJSONUrl = new URL("package.json", resolved);
					for (;;) {
						if (packageJSONUrl.pathname.endsWith("node_modules/package.json")) break;
						const packageConfig = read$1((0, _url().fileURLToPath)(packageJSONUrl), { specifier: resolved });
						if (packageConfig.exists) return packageConfig;
						const lastPackageJSONUrl = packageJSONUrl;
						if (packageJSONUrl = new URL("../package.json", packageJSONUrl), packageJSONUrl.pathname === lastPackageJSONUrl.pathname) break;
					}
					return {
						pjsonPath: (0, _url().fileURLToPath)(packageJSONUrl),
						exists: !1,
						type: "none"
					};
				}
				function getPackageType(url) {
					return getPackageScopeConfig(url).type;
				}
				const { ERR_UNKNOWN_FILE_EXTENSION } = codes, hasOwnProperty$2 = {}.hasOwnProperty, extensionFormatMap = {
					__proto__: null,
					".cjs": "commonjs",
					".js": "module",
					".json": "json",
					".mjs": "module"
				};
				const protocolHandlers = {
					__proto__: null,
					"data:": function(parsed) {
						const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [
							null,
							null,
							null
						];
						return function(mime$1) {
							return mime$1 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime$1) ? "module" : "application/json" === mime$1 ? "json" : null;
						}(mime);
					},
					"file:": function(url, _context, ignoreErrors) {
						const value$1 = function(url$1) {
							const pathname = url$1.pathname;
							let index = pathname.length;
							for (; index--;) {
								const code = pathname.codePointAt(index);
								if (47 === code) return "";
								if (46 === code) return 47 === pathname.codePointAt(index - 1) ? "" : pathname.slice(index);
							}
							return "";
						}(url);
						if (".js" === value$1) {
							const packageType = getPackageType(url);
							return "none" !== packageType ? packageType : "commonjs";
						}
						if ("" === value$1) {
							const packageType = getPackageType(url);
							return "none" === packageType || "commonjs" === packageType ? "commonjs" : "module";
						}
						const format = extensionFormatMap[value$1];
						if (format) return format;
						if (ignoreErrors) return;
						const filepath = (0, _url().fileURLToPath)(url);
						throw new ERR_UNKNOWN_FILE_EXTENSION(value$1, filepath);
					},
					"http:": getHttpProtocolModuleFormat,
					"https:": getHttpProtocolModuleFormat,
					"node:": () => "builtin"
				};
				function getHttpProtocolModuleFormat() {}
				function defaultGetFormatWithoutErrors(url, context) {
					const protocol = url.protocol;
					return hasOwnProperty$2.call(protocolHandlers, protocol) && protocolHandlers[protocol](url, context, !0) || null;
				}
				const { ERR_INVALID_ARG_VALUE } = codes, DEFAULT_CONDITIONS = Object.freeze(["node", "import"]), DEFAULT_CONDITIONS_SET = new Set(DEFAULT_CONDITIONS);
				const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSeparatorRegEx = /%2f|%5c/i, emittedPackageWarnings = new Set(), doubleSlashRegEx = /[/\\]{2}/;
				function emitInvalidSegmentDeprecation(target, request$1, match, packageJsonUrl, internal, base, isTarget) {
					if (_process().noDeprecation) return;
					const pjsonPath = (0, _url().fileURLToPath)(packageJsonUrl), double = null !== doubleSlashRegEx.exec(isTarget ? target : request$1);
					_process().emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request$1}" ${request$1 === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
				}
				function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
					if (_process().noDeprecation) return;
					if ("module" !== defaultGetFormatWithoutErrors(url, { parentURL: base.href })) return;
					const urlPath = (0, _url().fileURLToPath)(url.href), packagePath = (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), basePath = (0, _url().fileURLToPath)(base);
					main ? _path().resolve(packagePath, main) !== urlPath && _process().emitWarning(`Package ${packagePath} has a "main" field set to "${main}", excluding the full filename and extension to the resolved file at "${urlPath.slice(packagePath.length)}", imported from ${basePath}.\n Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : _process().emitWarning(`No "main" or "exports" field defined in the package.json for ${packagePath} resolving the main entry point "${urlPath.slice(packagePath.length)}", imported from ${basePath}.\nDefault "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
				}
				function tryStatSync(path$9) {
					try {
						return (0, _fs().statSync)(path$9);
					} catch (_unused2) {}
				}
				function fileExists(url) {
					const stats = (0, _fs().statSync)(url, { throwIfNoEntry: !1 }), isFile = stats ? stats.isFile() : void 0;
					return null != isFile && isFile;
				}
				function legacyMainResolve(packageJsonUrl, packageConfig, base) {
					let guess;
					if (void 0 !== packageConfig.main) {
						if (guess = new (_url()).URL(packageConfig.main, packageJsonUrl), fileExists(guess)) return guess;
						const tries$1 = [
							`./${packageConfig.main}.js`,
							`./${packageConfig.main}.json`,
							`./${packageConfig.main}.node`,
							`./${packageConfig.main}/index.js`,
							`./${packageConfig.main}/index.json`,
							`./${packageConfig.main}/index.node`
						];
						let i$1 = -1;
						for (; ++i$1 < tries$1.length && (guess = new (_url()).URL(tries$1[i$1], packageJsonUrl), !fileExists(guess));) guess = void 0;
						if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
					}
					const tries = [
						"./index.js",
						"./index.json",
						"./index.node"
					];
					let i = -1;
					for (; ++i < tries.length && (guess = new (_url()).URL(tries[i], packageJsonUrl), !fileExists(guess));) guess = void 0;
					if (guess) return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
					throw new ERR_MODULE_NOT_FOUND((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), (0, _url().fileURLToPath)(base));
				}
				function exportsNotFound(subpath, packageJsonUrl, base) {
					return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, base && (0, _url().fileURLToPath)(base));
				}
				function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
					return target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, target, internal, base && (0, _url().fileURLToPath)(base));
				}
				function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
					if ("" !== subpath && !pattern && "/" !== target[target.length - 1]) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
					if (!target.startsWith("./")) {
						if (internal && !target.startsWith("../") && !target.startsWith("/")) {
							let isURL = !1;
							try {
								new (_url()).URL(target), isURL = !0;
							} catch (_unused3) {}
							if (!isURL) return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
						}
						throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
					}
					if (null !== invalidSegmentRegEx.exec(target.slice(2))) {
						if (null !== deprecatedInvalidSegmentRegEx.exec(target.slice(2))) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
						if (!isPathMap) {
							const request$1 = pattern ? match.replace("*", () => subpath) : match + subpath;
							emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request$1, match, packageJsonUrl, internal, base, !0);
						}
					}
					const resolved = new (_url()).URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new (_url()).URL(".", packageJsonUrl).pathname;
					if (!resolvedPath.startsWith(packagePath)) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
					if ("" === subpath) return resolved;
					if (null !== invalidSegmentRegEx.exec(subpath)) {
						const request$1 = pattern ? match.replace("*", () => subpath) : match + subpath;
						if (null === deprecatedInvalidSegmentRegEx.exec(subpath)) {
							if (!isPathMap) emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request$1, match, packageJsonUrl, internal, base, !1);
						} else (function(request$2, match$1, packageJsonUrl$1, internal$1, base$1) {
							const reason = `request is not a valid match in pattern "${match$1}" for the "${internal$1 ? "imports" : "exports"}" resolution of ${(0, _url().fileURLToPath)(packageJsonUrl$1)}`;
							throw new ERR_INVALID_MODULE_SPECIFIER(request$2, reason, base$1 && (0, _url().fileURLToPath)(base$1));
						})(request$1, match, packageJsonUrl, internal, base);
					}
					return pattern ? new (_url()).URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new (_url()).URL(subpath, resolved);
				}
				function isArrayIndex(key) {
					const keyNumber = Number(key);
					return `${keyNumber}` === key && keyNumber >= 0 && keyNumber < 4294967295;
				}
				function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
					if ("string" == typeof target) return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
					if (Array.isArray(target)) {
						const targetList = target;
						if (0 === targetList.length) return null;
						let lastException, i = -1;
						for (; ++i < targetList.length;) {
							const targetItem = targetList[i];
							let resolveResult;
							try {
								resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
							} catch (error$1) {
								if (lastException = error$1, "ERR_INVALID_PACKAGE_TARGET" === error$1.code) continue;
								throw error$1;
							}
							if (void 0 !== resolveResult) {
								if (null !== resolveResult) return resolveResult;
								lastException = null;
							}
						}
						if (null == lastException) return null;
						throw lastException;
					}
					if ("object" == typeof target && null !== target) {
						const keys = Object.getOwnPropertyNames(target);
						let i = -1;
						for (; ++i < keys.length;) if (isArrayIndex(keys[i])) throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl), base, "\"exports\" cannot contain numeric property keys.");
						for (i = -1; ++i < keys.length;) {
							const key = keys[i];
							if ("default" === key || conditions && conditions.has(key)) {
								const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
								if (void 0 === resolveResult) continue;
								return resolveResult;
							}
						}
						return null;
					}
					if (null === target) return null;
					throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
				}
				function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
					if (_process().noDeprecation) return;
					const pjsonPath = (0, _url().fileURLToPath)(pjsonUrl);
					emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), _process().emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
				}
				function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
					let exports$2 = packageConfig.exports;
					if (function(exports$3, packageJsonUrl$1, base$1) {
						if ("string" == typeof exports$3 || Array.isArray(exports$3)) return !0;
						if ("object" != typeof exports$3 || null === exports$3) return !1;
						const keys$1 = Object.getOwnPropertyNames(exports$3);
						let isConditionalSugar = !1, i$1 = 0, keyIndex = -1;
						for (; ++keyIndex < keys$1.length;) {
							const key = keys$1[keyIndex], currentIsConditionalSugar = "" === key || "." !== key[0];
							if (0 == i$1++) isConditionalSugar = currentIsConditionalSugar;
							else if (isConditionalSugar !== currentIsConditionalSugar) throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl$1), base$1, "\"exports\" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.");
						}
						return isConditionalSugar;
					}(exports$2, packageJsonUrl, base) && (exports$2 = { ".": exports$2 }), own.call(exports$2, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
						const resolveResult = resolvePackageTarget(packageJsonUrl, exports$2[packageSubpath], "", packageSubpath, base, !1, !1, !1, conditions);
						if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
						return resolveResult;
					}
					let bestMatch = "", bestMatchSubpath = "";
					const keys = Object.getOwnPropertyNames(exports$2);
					let i = -1;
					for (; ++i < keys.length;) {
						const key = keys[i], patternIndex = key.indexOf("*");
						if (-1 !== patternIndex && packageSubpath.startsWith(key.slice(0, patternIndex))) {
							packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
							const patternTrailer = key.slice(patternIndex + 1);
							packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
						}
					}
					if (bestMatch) {
						const resolveResult = resolvePackageTarget(packageJsonUrl, exports$2[bestMatch], bestMatchSubpath, bestMatch, base, !0, !1, packageSubpath.endsWith("/"), conditions);
						if (null == resolveResult) throw exportsNotFound(packageSubpath, packageJsonUrl, base);
						return resolveResult;
					}
					throw exportsNotFound(packageSubpath, packageJsonUrl, base);
				}
				function patternKeyCompare(a, b$2) {
					const aPatternIndex = a.indexOf("*"), bPatternIndex = b$2.indexOf("*"), baseLengthA = -1 === aPatternIndex ? a.length : aPatternIndex + 1, baseLengthB = -1 === bPatternIndex ? b$2.length : bPatternIndex + 1;
					return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || -1 === aPatternIndex ? 1 : -1 === bPatternIndex || a.length > b$2.length ? -1 : b$2.length > a.length ? 1 : 0;
				}
				function packageImportsResolve(name, base, conditions) {
					if ("#" === name || name.startsWith("#/") || name.endsWith("/")) throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, _url().fileURLToPath)(base));
					let packageJsonUrl;
					const packageConfig = getPackageScopeConfig(base);
					if (packageConfig.exists) {
						packageJsonUrl = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
						const imports = packageConfig.imports;
						if (imports) if (own.call(imports, name) && !name.includes("*")) {
							const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, !1, !0, !1, conditions);
							if (null != resolveResult) return resolveResult;
						} else {
							let bestMatch = "", bestMatchSubpath = "";
							const keys = Object.getOwnPropertyNames(imports);
							let i = -1;
							for (; ++i < keys.length;) {
								const key = keys[i], patternIndex = key.indexOf("*");
								if (-1 !== patternIndex && name.startsWith(key.slice(0, -1))) {
									const patternTrailer = key.slice(patternIndex + 1);
									name.length >= key.length && name.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
								}
							}
							if (bestMatch) {
								const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, !0, !0, !1, conditions);
								if (null != resolveResult) return resolveResult;
							}
						}
					}
					throw function(specifier, packageJsonUrl$1, base$1) {
						return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl$1 && (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl$1)), (0, _url().fileURLToPath)(base$1));
					}(name, packageJsonUrl, base);
				}
				function packageResolve(specifier, base, conditions) {
					if (_module().builtinModules.includes(specifier)) return new (_url()).URL("node:" + specifier);
					const { packageName, packageSubpath, isScoped } = function(specifier$1, base$1) {
						let separatorIndex = specifier$1.indexOf("/"), validPackageName = !0, isScoped$1 = !1;
						"@" === specifier$1[0] && (isScoped$1 = !0, -1 === separatorIndex || 0 === specifier$1.length ? validPackageName = !1 : separatorIndex = specifier$1.indexOf("/", separatorIndex + 1));
						const packageName$1 = -1 === separatorIndex ? specifier$1 : specifier$1.slice(0, separatorIndex);
						if (null !== invalidPackageNameRegEx.exec(packageName$1) && (validPackageName = !1), !validPackageName) throw new ERR_INVALID_MODULE_SPECIFIER(specifier$1, "is not a valid package name", (0, _url().fileURLToPath)(base$1));
						return {
							packageName: packageName$1,
							packageSubpath: "." + (-1 === separatorIndex ? "" : specifier$1.slice(separatorIndex)),
							isScoped: isScoped$1
						};
					}(specifier, base), packageConfig = getPackageScopeConfig(base);
					if (packageConfig.exists) {
						const packageJsonUrl$1 = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
						if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports) return packageExportsResolve(packageJsonUrl$1, packageSubpath, packageConfig, base, conditions);
					}
					let lastPath, packageJsonUrl = new (_url()).URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
					do {
						const stat$3 = tryStatSync(packageJsonPath.slice(0, -13));
						if (!stat$3 || !stat$3.isDirectory()) {
							lastPath = packageJsonPath, packageJsonUrl = new (_url()).URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
							continue;
						}
						const packageConfig$1 = read$1(packageJsonPath, {
							base,
							specifier
						});
						return void 0 !== packageConfig$1.exports && null !== packageConfig$1.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig$1, base, conditions) : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig$1, base) : new (_url()).URL(packageSubpath, packageJsonUrl);
					} while (packageJsonPath.length !== lastPath.length);
					throw new ERR_MODULE_NOT_FOUND(packageName, (0, _url().fileURLToPath)(base), !1);
				}
				function shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {
					return "" !== specifier && ("/" === specifier[0] || function(specifier$1) {
						if ("." === specifier$1[0]) {
							if (1 === specifier$1.length || "/" === specifier$1[1]) return !0;
							if ("." === specifier$1[1] && (2 === specifier$1.length || "/" === specifier$1[2])) return !0;
						}
						return !1;
					}(specifier));
				}
				function moduleResolve(specifier, base, conditions, preserveSymlinks) {
					const protocol = base.protocol, isRemote = "data:" === protocol || "http:" === protocol || "https:" === protocol;
					let resolved;
					if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) try {
						resolved = new (_url()).URL(specifier, base);
					} catch (error_) {
						const error$1 = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
						throw error$1.cause = error_, error$1;
					}
					else if ("file:" === protocol && "#" === specifier[0]) resolved = packageImportsResolve(specifier, base, conditions);
					else try {
						resolved = new (_url()).URL(specifier);
					} catch (error_) {
						if (isRemote && !_module().builtinModules.includes(specifier)) {
							const error$1 = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
							throw error$1.cause = error_, error$1;
						}
						resolved = packageResolve(specifier, base, conditions);
					}
					return _assert()(void 0 !== resolved, "expected to be defined"), "file:" !== resolved.protocol ? resolved : function(resolved$1, base$1, preserveSymlinks$1) {
						if (null !== encodedSeparatorRegEx.exec(resolved$1.pathname)) throw new ERR_INVALID_MODULE_SPECIFIER(resolved$1.pathname, "must not include encoded \"/\" or \"\\\" characters", (0, _url().fileURLToPath)(base$1));
						let filePath;
						try {
							filePath = (0, _url().fileURLToPath)(resolved$1);
						} catch (error$1) {
							const cause = error$1;
							throw Object.defineProperty(cause, "input", { value: String(resolved$1) }), Object.defineProperty(cause, "module", { value: String(base$1) }), cause;
						}
						const stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
						if (stats && stats.isDirectory()) {
							const error$1 = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, _url().fileURLToPath)(base$1));
							throw error$1.url = String(resolved$1), error$1;
						}
						if (!stats || !stats.isFile()) {
							const error$1 = new ERR_MODULE_NOT_FOUND(filePath || resolved$1.pathname, base$1 && (0, _url().fileURLToPath)(base$1), !0);
							throw error$1.url = String(resolved$1), error$1;
						}
						if (!preserveSymlinks$1) {
							const real = (0, _fs().realpathSync)(filePath), { search, hash } = resolved$1;
							(resolved$1 = (0, _url().pathToFileURL)(real + (filePath.endsWith(_path().sep) ? "/" : ""))).search = search, resolved$1.hash = hash;
						}
						return resolved$1;
					}(resolved, base, preserveSymlinks);
				}
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/buffer.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				exports$1.default = class {
					constructor(map, indentChar) {
						this._map = null, this._buf = "", this._str = "", this._appendCount = 0, this._last = 0, this._queue = [], this._queueCursor = 0, this._canMarkIdName = !0, this._indentChar = "", this._fastIndentations = [], this._position = {
							line: 1,
							column: 0
						}, this._sourcePosition = {
							identifierName: void 0,
							identifierNamePos: void 0,
							line: void 0,
							column: void 0,
							filename: void 0
						}, this._map = map, this._indentChar = indentChar;
						for (let i = 0; i < 64; i++) this._fastIndentations.push(indentChar.repeat(i));
						this._allocQueue();
					}
					_allocQueue() {
						const queue$1 = this._queue;
						for (let i = 0; i < 16; i++) queue$1.push({
							char: 0,
							repeat: 1,
							line: void 0,
							column: void 0,
							identifierName: void 0,
							identifierNamePos: void 0,
							filename: ""
						});
					}
					_pushQueue(char, repeat, line, column, filename) {
						const cursor$1 = this._queueCursor;
						cursor$1 === this._queue.length && this._allocQueue();
						const item = this._queue[cursor$1];
						item.char = char, item.repeat = repeat, item.line = line, item.column = column, item.filename = filename, this._queueCursor++;
					}
					_popQueue() {
						if (0 === this._queueCursor) throw new Error("Cannot pop from empty queue");
						return this._queue[--this._queueCursor];
					}
					get() {
						this._flush();
						const map = this._map, result = {
							code: (this._buf + this._str).trimRight(),
							decodedMap: null == map ? void 0 : map.getDecoded(),
							get __mergedMap() {
								return this.map;
							},
							get map() {
								const resultMap = map ? map.get() : null;
								return result.map = resultMap, resultMap;
							},
							set map(value$1) {
								Object.defineProperty(result, "map", {
									value: value$1,
									writable: !0
								});
							},
							get rawMappings() {
								const mappings = null == map ? void 0 : map.getRawMappings();
								return result.rawMappings = mappings, mappings;
							},
							set rawMappings(value$1) {
								Object.defineProperty(result, "rawMappings", {
									value: value$1,
									writable: !0
								});
							}
						};
						return result;
					}
					append(str, maybeNewline) {
						this._flush(), this._append(str, this._sourcePosition, maybeNewline);
					}
					appendChar(char) {
						this._flush(), this._appendChar(char, 1, this._sourcePosition);
					}
					queue(char) {
						if (10 === char) for (; 0 !== this._queueCursor;) {
							const char$1 = this._queue[this._queueCursor - 1].char;
							if (32 !== char$1 && 9 !== char$1) break;
							this._queueCursor--;
						}
						const sourcePosition = this._sourcePosition;
						this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
					}
					queueIndentation(repeat) {
						0 !== repeat && this._pushQueue(-1, repeat, void 0, void 0, void 0);
					}
					_flush() {
						const queueCursor = this._queueCursor, queue$1 = this._queue;
						for (let i = 0; i < queueCursor; i++) {
							const item = queue$1[i];
							this._appendChar(item.char, item.repeat, item);
						}
						this._queueCursor = 0;
					}
					_appendChar(char, repeat, sourcePos) {
						if (this._last = char, -1 === char) {
							const fastIndentation = this._fastIndentations[repeat];
							this._str += void 0 !== fastIndentation ? fastIndentation : repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;
						} else this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);
						10 !== char ? (this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename), this._position.column += repeat) : (this._position.line++, this._position.column = 0), this._canMarkIdName && (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
					}
					_append(str, sourcePos, maybeNewline) {
						const len = str.length, position = this._position;
						if (this._last = str.charCodeAt(len - 1), ++this._appendCount > 4096 ? (this._str, this._buf += this._str, this._str = str, this._appendCount = 0) : this._str += str, !maybeNewline && !this._map) return void (position.column += len);
						const { column, identifierName, identifierNamePos, filename } = sourcePos;
						let line = sourcePos.line;
						null == identifierName && null == identifierNamePos || !this._canMarkIdName || (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
						let i = str.indexOf("\n"), last = 0;
						for (0 !== i && this._mark(line, column, identifierName, identifierNamePos, filename); -1 !== i;) position.line++, position.column = 0, last = i + 1, last < len && void 0 !== line && this._mark(++line, 0, null, null, filename), i = str.indexOf("\n", last);
						position.column += len - last;
					}
					_mark(line, column, identifierName, identifierNamePos, filename) {
						var _this$_map;
						null == (_this$_map = this._map) || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
					}
					removeTrailingNewline() {
						const queueCursor = this._queueCursor;
						0 !== queueCursor && 10 === this._queue[queueCursor - 1].char && this._queueCursor--;
					}
					removeLastSemicolon() {
						const queueCursor = this._queueCursor;
						0 !== queueCursor && 59 === this._queue[queueCursor - 1].char && this._queueCursor--;
					}
					getLastChar() {
						const queueCursor = this._queueCursor;
						return 0 !== queueCursor ? this._queue[queueCursor - 1].char : this._last;
					}
					getNewlineCount() {
						const queueCursor = this._queueCursor;
						let count = 0;
						if (0 === queueCursor) return 10 === this._last ? 1 : 0;
						for (let i = queueCursor - 1; i >= 0 && 10 === this._queue[i].char; i--) count++;
						return count === queueCursor && 10 === this._last ? count + 1 : count;
					}
					endsWithCharAndNewline() {
						const queue$1 = this._queue, queueCursor = this._queueCursor;
						if (0 !== queueCursor) {
							if (10 !== queue$1[queueCursor - 1].char) return;
							return queueCursor > 1 ? queue$1[queueCursor - 2].char : this._last;
						}
					}
					hasContent() {
						return 0 !== this._queueCursor || !!this._last;
					}
					exactSource(loc, cb) {
						if (!this._map) return void cb();
						this.source("start", loc);
						const identifierName = loc.identifierName, sourcePos = this._sourcePosition;
						identifierName && (this._canMarkIdName = !1, sourcePos.identifierName = identifierName), cb(), identifierName && (this._canMarkIdName = !0, sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0), this.source("end", loc);
					}
					source(prop, loc) {
						this._map && this._normalizePosition(prop, loc, 0);
					}
					sourceWithOffset(prop, loc, columnOffset) {
						this._map && this._normalizePosition(prop, loc, columnOffset);
					}
					_normalizePosition(prop, loc, columnOffset) {
						const pos = loc[prop], target = this._sourcePosition;
						pos && (target.line = pos.line, target.column = Math.max(pos.column + columnOffset, 0), target.filename = loc.filename);
					}
					getCurrentColumn() {
						const queue$1 = this._queue, queueCursor = this._queueCursor;
						let lastIndex = -1, len = 0;
						for (let i = 0; i < queueCursor; i++) {
							const item = queue$1[i];
							10 === item.char && (lastIndex = len), len += item.repeat;
						}
						return -1 === lastIndex ? this._position.column + len : len - 1 - lastIndex;
					}
					getCurrentLine() {
						let count = 0;
						const queue$1 = this._queue;
						for (let i = 0; i < this._queueCursor; i++) 10 === queue$1[i].char && count++;
						return this._position.line + count;
					}
				};
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/base.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.BlockStatement = function(node) {
					var _node$directives2;
					this.tokenChar(123);
					const exit = this.enterDelimited(), directivesLen = null == (_node$directives2 = node.directives) ? void 0 : _node$directives2.length;
					if (directivesLen) {
						var _node$directives$trai2;
						const newline = node.body.length ? 2 : 1;
						this.printSequence(node.directives, !0, newline), null != (_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai2.length || this.newline(newline);
					}
					this.printSequence(node.body, !0), exit(), this.rightBrace(node);
				}, exports$1.Directive = function(node) {
					this.print(node.value), this.semicolon();
				}, exports$1.DirectiveLiteral = function(node) {
					const raw = this.getPossibleRaw(node);
					if (!this.format.minified && void 0 !== raw) return void this.token(raw);
					const { value: value$1 } = node;
					if (unescapedDoubleQuoteRE.test(value$1)) {
						if (unescapedSingleQuoteRE.test(value$1)) throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
						this.token(`'${value$1}'`);
					} else this.token(`"${value$1}"`);
				}, exports$1.File = function(node) {
					node.program && this.print(node.program.interpreter);
					this.print(node.program);
				}, exports$1.InterpreterDirective = function(node) {
					this.token(`#!${node.value}`), this.newline(1, !0);
				}, exports$1.Placeholder = function(node) {
					this.token("%%"), this.print(node.name), this.token("%%"), "Statement" === node.expectedNode && this.semicolon();
				}, exports$1.Program = function(node) {
					var _node$directives;
					this.noIndentInnerCommentsHere(), this.printInnerComments();
					const directivesLen = null == (_node$directives = node.directives) ? void 0 : _node$directives.length;
					if (directivesLen) {
						var _node$directives$trai;
						const newline = node.body.length ? 2 : 1;
						this.printSequence(node.directives, void 0, newline), null != (_node$directives$trai = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai.length || this.newline(newline);
					}
					this.printSequence(node.body);
				};
				const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/, unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/classes.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.ClassAccessorProperty = function(node) {
					var _node$key$loc2;
					this.printJoin(node.decorators);
					const endLine = null == (_node$key$loc2 = node.key.loc) || null == (_node$key$loc2 = _node$key$loc2.end) ? void 0 : _node$key$loc2.line;
					endLine && this.catchUp(endLine);
					this.tsPrintClassMemberModifiers(node), this.word("accessor", !0), this.space(), node.computed ? (this.tokenChar(91), this.print(node.key), this.tokenChar(93)) : (this._variance(node), this.print(node.key));
					node.optional && this.tokenChar(63);
					node.definite && this.tokenChar(33);
					this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
					this.semicolon();
				}, exports$1.ClassBody = function(node) {
					if (this.tokenChar(123), 0 === node.body.length) this.tokenChar(125);
					else {
						this.newline();
						const separator = function(printer, node$1) {
							if (!printer.tokenMap || null == node$1.start || null == node$1.end) return null;
							const indexes = printer.tokenMap.getIndexes(node$1);
							if (!indexes) return null;
							let k$2 = 1, occurrenceCount = 0, nextLocIndex = 0;
							const advanceNextLocIndex = () => {
								for (; nextLocIndex < node$1.body.length && null == node$1.body[nextLocIndex].start;) nextLocIndex++;
							};
							return advanceNextLocIndex(), (i) => {
								nextLocIndex <= i && (nextLocIndex = i + 1, advanceNextLocIndex());
								const end = nextLocIndex === node$1.body.length ? node$1.end : node$1.body[nextLocIndex].start;
								let tok;
								for (; k$2 < indexes.length && printer.tokenMap.matchesOriginal(tok = printer._tokens[indexes[k$2]], ";") && tok.start < end;) printer.token(";", void 0, occurrenceCount++), k$2++;
							};
						}(this, node);
						separator?.(-1);
						const exit = this.enterDelimited();
						this.printJoin(node.body, !0, !0, separator, !0), exit(), this.endsWith(10) || this.newline(), this.rightBrace(node);
					}
				}, exports$1.ClassExpression = exports$1.ClassDeclaration = function(node, parent) {
					(isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent)) && this._shouldPrintDecoratorsBeforeExport(parent) || this.printJoin(node.decorators);
					node.declare && (this.word("declare"), this.space());
					node.abstract && (this.word("abstract"), this.space());
					this.word("class"), node.id && (this.space(), this.print(node.id));
					this.print(node.typeParameters), node.superClass && (this.space(), this.word("extends"), this.space(), this.print(node.superClass), this.print(node.superTypeParameters));
					node.implements && (this.space(), this.word("implements"), this.space(), this.printList(node.implements));
					this.space(), this.print(node.body);
				}, exports$1.ClassMethod = function(node) {
					this._classMethodHead(node), this.space(), this.print(node.body);
				}, exports$1.ClassPrivateMethod = function(node) {
					this._classMethodHead(node), this.space(), this.print(node.body);
				}, exports$1.ClassPrivateProperty = function(node) {
					this.printJoin(node.decorators), node.static && (this.word("static"), this.space());
					this.print(node.key), this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
					this.semicolon();
				}, exports$1.ClassProperty = function(node) {
					if (this.printJoin(node.decorators), !node.static && !this.format.preserveFormat) {
						var _node$key$loc;
						const endLine = null == (_node$key$loc = node.key.loc) || null == (_node$key$loc = _node$key$loc.end) ? void 0 : _node$key$loc.line;
						endLine && this.catchUp(endLine);
					}
					this.tsPrintClassMemberModifiers(node), node.computed ? (this.tokenChar(91), this.print(node.key), this.tokenChar(93)) : (this._variance(node), this.print(node.key));
					node.optional && this.tokenChar(63);
					node.definite && this.tokenChar(33);
					this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
					this.semicolon();
				}, exports$1.StaticBlock = function(node) {
					this.word("static"), this.space(), this.tokenChar(123), 0 === node.body.length ? this.tokenChar(125) : (this.newline(), this.printSequence(node.body, !0), this.rightBrace(node));
				}, exports$1._classMethodHead = function(node) {
					if (this.printJoin(node.decorators), !this.format.preserveFormat) {
						var _node$key$loc3;
						const endLine = null == (_node$key$loc3 = node.key.loc) || null == (_node$key$loc3 = _node$key$loc3.end) ? void 0 : _node$key$loc3.line;
						endLine && this.catchUp(endLine);
					}
					this.tsPrintClassMemberModifiers(node), this._methodHead(node);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { isExportDefaultDeclaration, isExportNamedDeclaration } = _t;
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/expressions.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.LogicalExpression = exports$1.BinaryExpression = exports$1.AssignmentExpression = function(node) {
					this.print(node.left), this.space(), "in" === node.operator || "instanceof" === node.operator ? this.word(node.operator) : (this.token(node.operator), this._endsWithDiv = "/" === node.operator);
					this.space(), this.print(node.right);
				}, exports$1.AssignmentPattern = function(node) {
					this.print(node.left), ("Identifier" === node.left.type || isPattern(node.left)) && (node.left.optional && this.tokenChar(63), this.print(node.left.typeAnnotation));
					this.space(), this.tokenChar(61), this.space(), this.print(node.right);
				}, exports$1.AwaitExpression = function(node) {
					this.word("await"), node.argument && (this.space(), this.printTerminatorless(node.argument));
				}, exports$1.BindExpression = function(node) {
					this.print(node.object), this.token("::"), this.print(node.callee);
				}, exports$1.CallExpression = function(node) {
					this.print(node.callee), this.print(node.typeArguments), this.print(node.typeParameters), this.tokenChar(40);
					const exit = this.enterDelimited();
					this.printList(node.arguments, this.shouldPrintTrailingComma(")")), exit(), this.rightParens(node);
				}, exports$1.ConditionalExpression = function(node) {
					this.print(node.test), this.space(), this.tokenChar(63), this.space(), this.print(node.consequent), this.space(), this.tokenChar(58), this.space(), this.print(node.alternate);
				}, exports$1.Decorator = function(node) {
					this.tokenChar(64), this.print(node.expression), this.newline();
				}, exports$1.DoExpression = function(node) {
					node.async && (this.word("async", !0), this.space());
					this.word("do"), this.space(), this.print(node.body);
				}, exports$1.EmptyStatement = function() {
					this.semicolon(!0);
				}, exports$1.ExpressionStatement = function(node) {
					this.tokenContext |= _index.TokenContext.expressionStatement, this.print(node.expression), this.semicolon();
				}, exports$1.Import = function() {
					this.word("import");
				}, exports$1.MemberExpression = function(node) {
					if (this.print(node.object), !node.computed && isMemberExpression(node.property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
					let computed = node.computed;
					isLiteral(node.property) && "number" == typeof node.property.value && (computed = !0);
					if (computed) {
						const exit = this.enterDelimited();
						this.tokenChar(91), this.print(node.property), this.tokenChar(93), exit();
					} else this.tokenChar(46), this.print(node.property);
				}, exports$1.MetaProperty = function(node) {
					this.print(node.meta), this.tokenChar(46), this.print(node.property);
				}, exports$1.ModuleExpression = function(node) {
					this.word("module", !0), this.space(), this.tokenChar(123), this.indent();
					const { body } = node;
					(body.body.length || body.directives.length) && this.newline();
					this.print(body), this.dedent(), this.rightBrace(node);
				}, exports$1.NewExpression = function(node, parent) {
					if (this.word("new"), this.space(), this.print(node.callee), this.format.minified && 0 === node.arguments.length && !node.optional && !isCallExpression(parent, { callee: node }) && !isMemberExpression(parent) && !isNewExpression(parent)) return;
					this.print(node.typeArguments), this.print(node.typeParameters), node.optional && this.token("?.");
					if (0 === node.arguments.length && this.tokenMap && !this.tokenMap.endMatches(node, ")")) return;
					this.tokenChar(40);
					const exit = this.enterDelimited();
					this.printList(node.arguments, this.shouldPrintTrailingComma(")")), exit(), this.rightParens(node);
				}, exports$1.OptionalCallExpression = function(node) {
					this.print(node.callee), this.print(node.typeParameters), node.optional && this.token("?.");
					this.print(node.typeArguments), this.tokenChar(40);
					const exit = this.enterDelimited();
					this.printList(node.arguments), exit(), this.rightParens(node);
				}, exports$1.OptionalMemberExpression = function(node) {
					let { computed } = node;
					const { optional, property } = node;
					if (this.print(node.object), !computed && isMemberExpression(property)) throw new TypeError("Got a MemberExpression for MemberExpression property");
					isLiteral(property) && "number" == typeof property.value && (computed = !0);
					optional && this.token("?.");
					computed ? (this.tokenChar(91), this.print(property), this.tokenChar(93)) : (optional || this.tokenChar(46), this.print(property));
				}, exports$1.ParenthesizedExpression = function(node) {
					this.tokenChar(40);
					const exit = this.enterDelimited();
					this.print(node.expression), exit(), this.rightParens(node);
				}, exports$1.PrivateName = function(node) {
					this.tokenChar(35), this.print(node.id);
				}, exports$1.SequenceExpression = function(node) {
					this.printList(node.expressions);
				}, exports$1.Super = function() {
					this.word("super");
				}, exports$1.ThisExpression = function() {
					this.word("this");
				}, exports$1.UnaryExpression = function(node) {
					const { operator } = node;
					"void" === operator || "delete" === operator || "typeof" === operator || "throw" === operator ? (this.word(operator), this.space()) : this.token(operator);
					this.print(node.argument);
				}, exports$1.UpdateExpression = function(node) {
					node.prefix ? (this.token(node.operator), this.print(node.argument)) : (this.print(node.argument, !0), this.token(node.operator));
				}, exports$1.V8IntrinsicIdentifier = function(node) {
					this.tokenChar(37), this.word(node.name);
				}, exports$1.YieldExpression = function(node) {
					this.word("yield", !0), node.delegate ? (this.tokenChar(42), node.argument && (this.space(), this.print(node.argument))) : node.argument && (this.space(), this.printTerminatorless(node.argument));
				}, exports$1._shouldPrintDecoratorsBeforeExport = function(node) {
					if ("boolean" == typeof this.format.decoratorsBeforeExport) return this.format.decoratorsBeforeExport;
					return "number" == typeof node.start && node.start === node.declaration.start;
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
				const { isCallExpression, isLiteral, isMemberExpression, isNewExpression, isPattern } = _t;
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/flow.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.AnyTypeAnnotation = function() {
					this.word("any");
				}, exports$1.ArrayTypeAnnotation = function(node) {
					this.print(node.elementType, !0), this.tokenChar(91), this.tokenChar(93);
				}, exports$1.BooleanLiteralTypeAnnotation = function(node) {
					this.word(node.value ? "true" : "false");
				}, exports$1.BooleanTypeAnnotation = function() {
					this.word("boolean");
				}, exports$1.DeclareClass = function(node, parent) {
					isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
					this.word("class"), this.space(), this._interfaceish(node);
				}, exports$1.DeclareExportAllDeclaration = function(node) {
					this.word("declare"), this.space(), _modules.ExportAllDeclaration.call(this, node);
				}, exports$1.DeclareExportDeclaration = function(node) {
					this.word("declare"), this.space(), this.word("export"), this.space(), node.default && (this.word("default"), this.space());
					FlowExportDeclaration.call(this, node);
				}, exports$1.DeclareFunction = function(node, parent) {
					isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
					this.word("function"), this.space(), this.print(node.id), this.print(node.id.typeAnnotation.typeAnnotation), node.predicate && (this.space(), this.print(node.predicate));
					this.semicolon();
				}, exports$1.DeclareInterface = function(node) {
					this.word("declare"), this.space(), this.InterfaceDeclaration(node);
				}, exports$1.DeclareModule = function(node) {
					this.word("declare"), this.space(), this.word("module"), this.space(), this.print(node.id), this.space(), this.print(node.body);
				}, exports$1.DeclareModuleExports = function(node) {
					this.word("declare"), this.space(), this.word("module"), this.tokenChar(46), this.word("exports"), this.print(node.typeAnnotation);
				}, exports$1.DeclareOpaqueType = function(node, parent) {
					isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
					this.OpaqueType(node);
				}, exports$1.DeclareTypeAlias = function(node) {
					this.word("declare"), this.space(), this.TypeAlias(node);
				}, exports$1.DeclareVariable = function(node, parent) {
					isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
					this.word("var"), this.space(), this.print(node.id), this.print(node.id.typeAnnotation), this.semicolon();
				}, exports$1.DeclaredPredicate = function(node) {
					this.tokenChar(37), this.word("checks"), this.tokenChar(40), this.print(node.value), this.tokenChar(41);
				}, exports$1.EmptyTypeAnnotation = function() {
					this.word("empty");
				}, exports$1.EnumBooleanBody = function(node) {
					const { explicitType } = node;
					enumExplicitType(this, "boolean", explicitType), enumBody(this, node);
				}, exports$1.EnumBooleanMember = function(node) {
					enumInitializedMember(this, node);
				}, exports$1.EnumDeclaration = function(node) {
					const { id, body } = node;
					this.word("enum"), this.space(), this.print(id), this.print(body);
				}, exports$1.EnumDefaultedMember = function(node) {
					const { id } = node;
					this.print(id), this.tokenChar(44);
				}, exports$1.EnumNumberBody = function(node) {
					const { explicitType } = node;
					enumExplicitType(this, "number", explicitType), enumBody(this, node);
				}, exports$1.EnumNumberMember = function(node) {
					enumInitializedMember(this, node);
				}, exports$1.EnumStringBody = function(node) {
					const { explicitType } = node;
					enumExplicitType(this, "string", explicitType), enumBody(this, node);
				}, exports$1.EnumStringMember = function(node) {
					enumInitializedMember(this, node);
				}, exports$1.EnumSymbolBody = function(node) {
					enumExplicitType(this, "symbol", !0), enumBody(this, node);
				}, exports$1.ExistsTypeAnnotation = function() {
					this.tokenChar(42);
				}, exports$1.FunctionTypeAnnotation = function(node, parent) {
					this.print(node.typeParameters), this.tokenChar(40), node.this && (this.word("this"), this.tokenChar(58), this.space(), this.print(node.this.typeAnnotation), (node.params.length || node.rest) && (this.tokenChar(44), this.space()));
					this.printList(node.params), node.rest && (node.params.length && (this.tokenChar(44), this.space()), this.token("..."), this.print(node.rest));
					this.tokenChar(41);
					const type$1 = null == parent ? void 0 : parent.type;
					null != type$1 && ("ObjectTypeCallProperty" === type$1 || "ObjectTypeInternalSlot" === type$1 || "DeclareFunction" === type$1 || "ObjectTypeProperty" === type$1 && parent.method) ? this.tokenChar(58) : (this.space(), this.token("=>"));
					this.space(), this.print(node.returnType);
				}, exports$1.FunctionTypeParam = function(node) {
					this.print(node.name), node.optional && this.tokenChar(63);
					node.name && (this.tokenChar(58), this.space());
					this.print(node.typeAnnotation);
				}, exports$1.IndexedAccessType = function(node) {
					this.print(node.objectType, !0), this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
				}, exports$1.InferredPredicate = function() {
					this.tokenChar(37), this.word("checks");
				}, exports$1.InterfaceDeclaration = function(node) {
					this.word("interface"), this.space(), this._interfaceish(node);
				}, exports$1.GenericTypeAnnotation = exports$1.ClassImplements = exports$1.InterfaceExtends = function(node) {
					this.print(node.id), this.print(node.typeParameters, !0);
				}, exports$1.InterfaceTypeAnnotation = function(node) {
					var _node$extends2;
					this.word("interface"), null != (_node$extends2 = node.extends) && _node$extends2.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends));
					this.space(), this.print(node.body);
				}, exports$1.IntersectionTypeAnnotation = function(node) {
					this.printJoin(node.types, void 0, void 0, andSeparator);
				}, exports$1.MixedTypeAnnotation = function() {
					this.word("mixed");
				}, exports$1.NullLiteralTypeAnnotation = function() {
					this.word("null");
				}, exports$1.NullableTypeAnnotation = function(node) {
					this.tokenChar(63), this.print(node.typeAnnotation);
				}, Object.defineProperty(exports$1, "NumberLiteralTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _types2.NumericLiteral;
					}
				}), exports$1.NumberTypeAnnotation = function() {
					this.word("number");
				}, exports$1.ObjectTypeAnnotation = function(node) {
					node.exact ? this.token("{|") : this.tokenChar(123);
					const props = [
						...node.properties,
						...node.callProperties || [],
						...node.indexers || [],
						...node.internalSlots || []
					];
					props.length && (this.newline(), this.space(), this.printJoin(props, !0, !0, void 0, void 0, function(leading) {
						if (leading && !props[0]) return 1;
					}, () => {
						(1 !== props.length || node.inexact) && (this.tokenChar(44), this.space());
					}), this.space());
					node.inexact && (this.indent(), this.token("..."), props.length && this.newline(), this.dedent());
					node.exact ? this.token("|}") : this.tokenChar(125);
				}, exports$1.ObjectTypeCallProperty = function(node) {
					node.static && (this.word("static"), this.space());
					this.print(node.value);
				}, exports$1.ObjectTypeIndexer = function(node) {
					node.static && (this.word("static"), this.space());
					this._variance(node), this.tokenChar(91), node.id && (this.print(node.id), this.tokenChar(58), this.space());
					this.print(node.key), this.tokenChar(93), this.tokenChar(58), this.space(), this.print(node.value);
				}, exports$1.ObjectTypeInternalSlot = function(node) {
					node.static && (this.word("static"), this.space());
					this.tokenChar(91), this.tokenChar(91), this.print(node.id), this.tokenChar(93), this.tokenChar(93), node.optional && this.tokenChar(63);
					node.method || (this.tokenChar(58), this.space());
					this.print(node.value);
				}, exports$1.ObjectTypeProperty = function(node) {
					node.proto && (this.word("proto"), this.space());
					node.static && (this.word("static"), this.space());
					"get" !== node.kind && "set" !== node.kind || (this.word(node.kind), this.space());
					this._variance(node), this.print(node.key), node.optional && this.tokenChar(63);
					node.method || (this.tokenChar(58), this.space());
					this.print(node.value);
				}, exports$1.ObjectTypeSpreadProperty = function(node) {
					this.token("..."), this.print(node.argument);
				}, exports$1.OpaqueType = function(node) {
					this.word("opaque"), this.space(), this.word("type"), this.space(), this.print(node.id), this.print(node.typeParameters), node.supertype && (this.tokenChar(58), this.space(), this.print(node.supertype));
					node.impltype && (this.space(), this.tokenChar(61), this.space(), this.print(node.impltype));
					this.semicolon();
				}, exports$1.OptionalIndexedAccessType = function(node) {
					this.print(node.objectType), node.optional && this.token("?.");
					this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
				}, exports$1.QualifiedTypeIdentifier = function(node) {
					this.print(node.qualification), this.tokenChar(46), this.print(node.id);
				}, Object.defineProperty(exports$1, "StringLiteralTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _types2.StringLiteral;
					}
				}), exports$1.StringTypeAnnotation = function() {
					this.word("string");
				}, exports$1.SymbolTypeAnnotation = function() {
					this.word("symbol");
				}, exports$1.ThisTypeAnnotation = function() {
					this.word("this");
				}, exports$1.TupleTypeAnnotation = function(node) {
					this.tokenChar(91), this.printList(node.types), this.tokenChar(93);
				}, exports$1.TypeAlias = function(node) {
					this.word("type"), this.space(), this.print(node.id), this.print(node.typeParameters), this.space(), this.tokenChar(61), this.space(), this.print(node.right), this.semicolon();
				}, exports$1.TypeAnnotation = function(node, parent) {
					this.tokenChar(58), this.space(), "ArrowFunctionExpression" === parent.type ? this.tokenContext |= _index.TokenContext.arrowFlowReturnType : node.optional && this.tokenChar(63);
					this.print(node.typeAnnotation);
				}, exports$1.TypeCastExpression = function(node) {
					this.tokenChar(40), this.print(node.expression), this.print(node.typeAnnotation), this.tokenChar(41);
				}, exports$1.TypeParameter = function(node) {
					this._variance(node), this.word(node.name), node.bound && this.print(node.bound);
					node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default));
				}, exports$1.TypeParameterDeclaration = exports$1.TypeParameterInstantiation = function(node) {
					this.tokenChar(60), this.printList(node.params), this.tokenChar(62);
				}, exports$1.TypeofTypeAnnotation = function(node) {
					this.word("typeof"), this.space(), this.print(node.argument);
				}, exports$1.UnionTypeAnnotation = function(node) {
					this.printJoin(node.types, void 0, void 0, orSeparator);
				}, exports$1.Variance = function(node) {
					"plus" === node.kind ? this.tokenChar(43) : this.tokenChar(45);
				}, exports$1.VoidTypeAnnotation = function() {
					this.word("void");
				}, exports$1._interfaceish = function(node) {
					var _node$extends;
					this.print(node.id), this.print(node.typeParameters), null != (_node$extends = node.extends) && _node$extends.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends));
					if ("DeclareClass" === node.type) {
						var _node$mixins, _node$implements;
						null != (_node$mixins = node.mixins) && _node$mixins.length && (this.space(), this.word("mixins"), this.space(), this.printList(node.mixins)), null != (_node$implements = node.implements) && _node$implements.length && (this.space(), this.word("implements"), this.space(), this.printList(node.implements));
					}
					this.space(), this.print(node.body);
				}, exports$1._variance = function(node) {
					var _node$variance;
					const kind = null == (_node$variance = node.variance) ? void 0 : _node$variance.kind;
					null != kind && ("plus" === kind ? this.tokenChar(43) : "minus" === kind && this.tokenChar(45));
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _modules = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js"), _types2 = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js");
				const { isDeclareExportDeclaration, isStatement } = _t;
				function enumExplicitType(context, name, hasExplicitType) {
					hasExplicitType && (context.space(), context.word("of"), context.space(), context.word(name)), context.space();
				}
				function enumBody(context, node) {
					const { members } = node;
					context.token("{"), context.indent(), context.newline();
					for (const member of members) context.print(member), context.newline();
					node.hasUnknownMembers && (context.token("..."), context.newline()), context.dedent(), context.token("}");
				}
				function enumInitializedMember(context, node) {
					context.print(node.id), context.space(), context.token("="), context.space(), context.print(node.init), context.token(",");
				}
				function FlowExportDeclaration(node) {
					if (node.declaration) {
						const declar = node.declaration;
						this.print(declar), isStatement(declar) || this.semicolon();
					} else this.tokenChar(123), node.specifiers.length && (this.space(), this.printList(node.specifiers), this.space()), this.tokenChar(125), node.source && (this.space(), this.word("from"), this.space(), this.print(node.source)), this.semicolon();
				}
				function andSeparator(occurrenceCount) {
					this.space(), this.token("&", !1, occurrenceCount), this.space();
				}
				function orSeparator(occurrenceCount) {
					this.space(), this.token("|", !1, occurrenceCount), this.space();
				}
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 });
				var _templateLiterals = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/template-literals.js");
				Object.keys(_templateLiterals).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _templateLiterals[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _templateLiterals[key];
						}
					}));
				});
				var _expressions = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/expressions.js");
				Object.keys(_expressions).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _expressions[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _expressions[key];
						}
					}));
				});
				var _statements = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/statements.js");
				Object.keys(_statements).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _statements[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _statements[key];
						}
					}));
				});
				var _classes = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/classes.js");
				Object.keys(_classes).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _classes[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _classes[key];
						}
					}));
				});
				var _methods = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/methods.js");
				Object.keys(_methods).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _methods[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _methods[key];
						}
					}));
				});
				var _modules = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js");
				Object.keys(_modules).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _modules[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _modules[key];
						}
					}));
				});
				var _types = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js");
				Object.keys(_types).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _types[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _types[key];
						}
					}));
				});
				var _flow = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/flow.js");
				Object.keys(_flow).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _flow[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _flow[key];
						}
					}));
				});
				var _base = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/base.js");
				Object.keys(_base).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _base[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _base[key];
						}
					}));
				});
				var _jsx = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/jsx.js");
				Object.keys(_jsx).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _jsx[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _jsx[key];
						}
					}));
				});
				var _typescript = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/typescript.js");
				Object.keys(_typescript).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (key in exports$1 && exports$1[key] === _typescript[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _typescript[key];
						}
					}));
				});
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/jsx.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				function spaceSeparator() {
					this.space();
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.JSXAttribute = function(node) {
					this.print(node.name), node.value && (this.tokenChar(61), this.print(node.value));
				}, exports$1.JSXClosingElement = function(node) {
					this.tokenChar(60), this.tokenChar(47), this.print(node.name), this.tokenChar(62);
				}, exports$1.JSXClosingFragment = function() {
					this.token("</"), this.tokenChar(62);
				}, exports$1.JSXElement = function(node) {
					const open$1 = node.openingElement;
					if (this.print(open$1), open$1.selfClosing) return;
					this.indent();
					for (const child$1 of node.children) this.print(child$1);
					this.dedent(), this.print(node.closingElement);
				}, exports$1.JSXEmptyExpression = function() {
					this.printInnerComments();
				}, exports$1.JSXExpressionContainer = function(node) {
					this.tokenChar(123), this.print(node.expression), this.rightBrace(node);
				}, exports$1.JSXFragment = function(node) {
					this.print(node.openingFragment), this.indent();
					for (const child$1 of node.children) this.print(child$1);
					this.dedent(), this.print(node.closingFragment);
				}, exports$1.JSXIdentifier = function(node) {
					this.word(node.name);
				}, exports$1.JSXMemberExpression = function(node) {
					this.print(node.object), this.tokenChar(46), this.print(node.property);
				}, exports$1.JSXNamespacedName = function(node) {
					this.print(node.namespace), this.tokenChar(58), this.print(node.name);
				}, exports$1.JSXOpeningElement = function(node) {
					this.tokenChar(60), this.print(node.name), this.print(node.typeParameters), node.attributes.length > 0 && (this.space(), this.printJoin(node.attributes, void 0, void 0, spaceSeparator));
					node.selfClosing && (this.space(), this.tokenChar(47));
					this.tokenChar(62);
				}, exports$1.JSXOpeningFragment = function() {
					this.tokenChar(60), this.tokenChar(62);
				}, exports$1.JSXSpreadAttribute = function(node) {
					this.tokenChar(123), this.token("..."), this.print(node.argument), this.rightBrace(node);
				}, exports$1.JSXSpreadChild = function(node) {
					this.tokenChar(123), this.token("..."), this.print(node.expression), this.rightBrace(node);
				}, exports$1.JSXText = function(node) {
					const raw = this.getPossibleRaw(node);
					void 0 !== raw ? this.token(raw, !0) : this.token(node.value, !0);
				};
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/methods.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.ArrowFunctionExpression = function(node, parent) {
					node.async && (this.word("async", !0), this.space());
					this._shouldPrintArrowParamsParens(node) ? this._params(node, void 0, parent) : this.print(node.params[0], !0);
					this._predicate(node, !0), this.space(), this.printInnerComments(), this.token("=>"), this.space(), this.tokenContext |= _index.TokenContext.arrowBody, this.print(node.body);
				}, exports$1.FunctionDeclaration = exports$1.FunctionExpression = function(node, parent) {
					this._functionHead(node, parent), this.space(), this.print(node.body);
				}, exports$1._functionHead = function(node, parent) {
					node.async && (this.word("async"), this.format.preserveFormat || (this._endsWithInnerRaw = !1), this.space());
					this.word("function"), node.generator && (this.format.preserveFormat || (this._endsWithInnerRaw = !1), this.tokenChar(42));
					this.space(), node.id && this.print(node.id);
					this._params(node, node.id, parent), "TSDeclareFunction" !== node.type && this._predicate(node);
				}, exports$1._methodHead = function(node) {
					const kind = node.kind, key = node.key;
					"get" !== kind && "set" !== kind || (this.word(kind), this.space());
					node.async && (this.word("async", !0), this.space());
					"method" !== kind && "init" !== kind || node.generator && this.tokenChar(42);
					node.computed ? (this.tokenChar(91), this.print(key), this.tokenChar(93)) : this.print(key);
					node.optional && this.tokenChar(63);
					this._params(node, node.computed && "StringLiteral" !== node.key.type ? void 0 : node.key, void 0);
				}, exports$1._param = function(parameter) {
					this.printJoin(parameter.decorators), this.print(parameter), parameter.optional && this.tokenChar(63);
					this.print(parameter.typeAnnotation);
				}, exports$1._parameters = function(parameters, endToken) {
					const exit = this.enterDelimited(), trailingComma = this.shouldPrintTrailingComma(endToken), paramLength = parameters.length;
					for (let i = 0; i < paramLength; i++) this._param(parameters[i]), (trailingComma || i < paramLength - 1) && (this.token(",", null, i), this.space());
					this.token(endToken), exit();
				}, exports$1._params = function(node, idNode, parentNode) {
					this.print(node.typeParameters);
					const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
					nameInfo && this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
					this.tokenChar(40), this._parameters(node.params, ")");
					const noLineTerminator = "ArrowFunctionExpression" === node.type;
					this.print(node.returnType, noLineTerminator), this._noLineTerminator = noLineTerminator;
				}, exports$1._predicate = function(node, noLineTerminatorAfter) {
					node.predicate && (node.returnType || this.tokenChar(58), this.space(), this.print(node.predicate, noLineTerminatorAfter));
				}, exports$1._shouldPrintArrowParamsParens = function(node) {
					var _firstParam$leadingCo, _firstParam$trailingC;
					if (1 !== node.params.length) return !0;
					if (node.typeParameters || node.returnType || node.predicate) return !0;
					const firstParam = node.params[0];
					if (!isIdentifier(firstParam) || firstParam.typeAnnotation || firstParam.optional || null != (_firstParam$leadingCo = firstParam.leadingComments) && _firstParam$leadingCo.length || null != (_firstParam$trailingC = firstParam.trailingComments) && _firstParam$trailingC.length) return !0;
					if (this.tokenMap) {
						if (null == node.loc) return !0;
						if (null !== this.tokenMap.findMatching(node, "(")) return !0;
						const arrowToken = this.tokenMap.findMatching(node, "=>");
						return null == (null == arrowToken ? void 0 : arrowToken.loc) || arrowToken.loc.start.line !== node.loc.start.line;
					}
					return !!this.format.retainLines;
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
				const { isIdentifier } = _t;
				function _getFuncIdName(idNode, parent) {
					let nameInfo, id = idNode;
					if (!id && parent) {
						const parentType = parent.type;
						"VariableDeclarator" === parentType ? id = parent.id : "AssignmentExpression" === parentType || "AssignmentPattern" === parentType ? id = parent.left : "ObjectProperty" === parentType || "ClassProperty" === parentType ? parent.computed && "StringLiteral" !== parent.key.type || (id = parent.key) : "ClassPrivateProperty" !== parentType && "ClassAccessorProperty" !== parentType || (id = parent.key);
					}
					if (id) {
						var _id$loc, _id$loc2;
						if ("Identifier" === id.type) nameInfo = {
							pos: null == (_id$loc = id.loc) ? void 0 : _id$loc.start,
							name: (null == (_id$loc2 = id.loc) ? void 0 : _id$loc2.identifierName) || id.name
						};
						else if ("PrivateName" === id.type) {
							var _id$loc3;
							nameInfo = {
								pos: null == (_id$loc3 = id.loc) ? void 0 : _id$loc3.start,
								name: "#" + id.id.name
							};
						} else if ("StringLiteral" === id.type) {
							var _id$loc4;
							nameInfo = {
								pos: null == (_id$loc4 = id.loc) ? void 0 : _id$loc4.start,
								name: id.value
							};
						}
						return nameInfo;
					}
				}
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.ExportAllDeclaration = function(node) {
					var _node$attributes, _node$assertions;
					this.word("export"), this.space(), "type" === node.exportKind && (this.word("type"), this.space());
					this.tokenChar(42), this.space(), this.word("from"), this.space(), null != (_node$attributes = node.attributes) && _node$attributes.length || null != (_node$assertions = node.assertions) && _node$assertions.length ? (this.print(node.source, !0), this.space(), this._printAttributes(node, !1)) : this.print(node.source);
					this.semicolon();
				}, exports$1.ExportDefaultDeclaration = function(node) {
					maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.noIndentInnerCommentsHere(), this.space(), this.word("default"), this.space(), this.tokenContext |= _index.TokenContext.exportDefault;
					const declar = node.declaration;
					this.print(declar), isStatement(declar) || this.semicolon();
				}, exports$1.ExportDefaultSpecifier = function(node) {
					this.print(node.exported);
				}, exports$1.ExportNamedDeclaration = function(node) {
					if (maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.space(), node.declaration) {
						const declar = node.declaration;
						this.print(declar), isStatement(declar) || this.semicolon();
					} else {
						"type" === node.exportKind && (this.word("type"), this.space());
						const specifiers = node.specifiers.slice(0);
						let hasSpecial = !1;
						for (;;) {
							const first = specifiers[0];
							if (!isExportDefaultSpecifier(first) && !isExportNamespaceSpecifier(first)) break;
							hasSpecial = !0, this.print(specifiers.shift()), specifiers.length && (this.tokenChar(44), this.space());
						}
						let hasBrace = !1;
						var _node$attributes2, _node$assertions2;
						if ((specifiers.length || !specifiers.length && !hasSpecial) && (hasBrace = !0, this.tokenChar(123), specifiers.length && (this.space(), this.printList(specifiers, this.shouldPrintTrailingComma("}")), this.space()), this.tokenChar(125)), node.source) this.space(), this.word("from"), this.space(), null != (_node$attributes2 = node.attributes) && _node$attributes2.length || null != (_node$assertions2 = node.assertions) && _node$assertions2.length ? (this.print(node.source, !0), this.space(), this._printAttributes(node, hasBrace)) : this.print(node.source);
						this.semicolon();
					}
				}, exports$1.ExportNamespaceSpecifier = function(node) {
					this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.exported);
				}, exports$1.ExportSpecifier = function(node) {
					"type" === node.exportKind && (this.word("type"), this.space());
					this.print(node.local), node.exported && node.local.name !== node.exported.name && (this.space(), this.word("as"), this.space(), this.print(node.exported));
				}, exports$1.ImportAttribute = function(node) {
					this.print(node.key), this.tokenChar(58), this.space(), this.print(node.value);
				}, exports$1.ImportDeclaration = function(node) {
					var _node$attributes3, _node$assertions3;
					this.word("import"), this.space();
					const isTypeKind = "type" === node.importKind || "typeof" === node.importKind;
					isTypeKind ? (this.noIndentInnerCommentsHere(), this.word(node.importKind), this.space()) : node.module ? (this.noIndentInnerCommentsHere(), this.word("module"), this.space()) : node.phase && (this.noIndentInnerCommentsHere(), this.word(node.phase), this.space());
					const specifiers = node.specifiers.slice(0), hasSpecifiers = !!specifiers.length;
					for (; hasSpecifiers;) {
						const first = specifiers[0];
						if (!isImportDefaultSpecifier(first) && !isImportNamespaceSpecifier(first)) break;
						this.print(specifiers.shift()), specifiers.length && (this.tokenChar(44), this.space());
					}
					let hasBrace = !1;
					specifiers.length ? (hasBrace = !0, this.tokenChar(123), this.space(), this.printList(specifiers, this.shouldPrintTrailingComma("}")), this.space(), this.tokenChar(125)) : isTypeKind && !hasSpecifiers && (hasBrace = !0, this.tokenChar(123), this.tokenChar(125));
					(hasSpecifiers || isTypeKind) && (this.space(), this.word("from"), this.space());
					null != (_node$attributes3 = node.attributes) && _node$attributes3.length || null != (_node$assertions3 = node.assertions) && _node$assertions3.length ? (this.print(node.source, !0), this.space(), this._printAttributes(node, hasBrace)) : this.print(node.source);
					this.semicolon();
				}, exports$1.ImportDefaultSpecifier = function(node) {
					this.print(node.local);
				}, exports$1.ImportExpression = function(node) {
					this.word("import"), node.phase && (this.tokenChar(46), this.word(node.phase));
					this.tokenChar(40), this.print(node.source), null != node.options && (this.tokenChar(44), this.space(), this.print(node.options));
					this.tokenChar(41);
				}, exports$1.ImportNamespaceSpecifier = function(node) {
					this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.local);
				}, exports$1.ImportSpecifier = function(node) {
					"type" !== node.importKind && "typeof" !== node.importKind || (this.word(node.importKind), this.space());
					this.print(node.imported), node.local && node.local.name !== node.imported.name && (this.space(), this.word("as"), this.space(), this.print(node.local));
				}, exports$1._printAttributes = function(node, hasPreviousBrace) {
					const { importAttributesKeyword } = this.format, { attributes, assertions } = node;
					!attributes || importAttributesKeyword || warningShown || (warningShown = !0, console.warn("You are using import attributes, without specifying the desired output syntax.\nPlease specify the \"importAttributesKeyword\" generator option, whose value can be one of:\n - \"with\"        : `import { a } from \"b\" with { type: \"json\" };`\n - \"assert\"      : `import { a } from \"b\" assert { type: \"json\" };`\n - \"with-legacy\" : `import { a } from \"b\" with type: \"json\";`\n"));
					const useAssertKeyword = "assert" === importAttributesKeyword || !importAttributesKeyword && assertions;
					if (this.word(useAssertKeyword ? "assert" : "with"), this.space(), !useAssertKeyword && "with" !== importAttributesKeyword) return void this.printList(attributes || assertions);
					const occurrenceCount = hasPreviousBrace ? 1 : 0;
					this.token("{", null, occurrenceCount), this.space(), this.printList(attributes || assertions, this.shouldPrintTrailingComma("}")), this.space(), this.token("}", null, occurrenceCount);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
				const { isClassDeclaration, isExportDefaultSpecifier, isExportNamespaceSpecifier, isImportDefaultSpecifier, isImportNamespaceSpecifier, isStatement } = _t;
				let warningShown = !1;
				function maybePrintDecoratorsBeforeExport(printer, node) {
					isClassDeclaration(node.declaration) && printer._shouldPrintDecoratorsBeforeExport(node) && printer.printJoin(node.declaration.decorators);
				}
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/statements.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.BreakStatement = function(node) {
					this.word("break"), printStatementAfterKeyword(this, node.label);
				}, exports$1.CatchClause = function(node) {
					this.word("catch"), this.space(), node.param && (this.tokenChar(40), this.print(node.param), this.print(node.param.typeAnnotation), this.tokenChar(41), this.space());
					this.print(node.body);
				}, exports$1.ContinueStatement = function(node) {
					this.word("continue"), printStatementAfterKeyword(this, node.label);
				}, exports$1.DebuggerStatement = function() {
					this.word("debugger"), this.semicolon();
				}, exports$1.DoWhileStatement = function(node) {
					this.word("do"), this.space(), this.print(node.body), this.space(), this.word("while"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.semicolon();
				}, exports$1.ForOfStatement = exports$1.ForInStatement = void 0, exports$1.ForStatement = function(node) {
					this.word("for"), this.space(), this.tokenChar(40);
					{
						const exit = this.enterForStatementInit();
						this.tokenContext |= _index.TokenContext.forHead, this.print(node.init), exit();
					}
					this.tokenChar(59), node.test && (this.space(), this.print(node.test));
					this.token(";", !1, 1), node.update && (this.space(), this.print(node.update));
					this.tokenChar(41), this.printBlock(node);
				}, exports$1.IfStatement = function(node) {
					this.word("if"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.space();
					const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
					needsBlock && (this.tokenChar(123), this.newline(), this.indent());
					this.printAndIndentOnComments(node.consequent), needsBlock && (this.dedent(), this.newline(), this.tokenChar(125));
					node.alternate && (this.endsWith(125) && this.space(), this.word("else"), this.space(), this.printAndIndentOnComments(node.alternate));
				}, exports$1.LabeledStatement = function(node) {
					this.print(node.label), this.tokenChar(58), this.space(), this.print(node.body);
				}, exports$1.ReturnStatement = function(node) {
					this.word("return"), printStatementAfterKeyword(this, node.argument);
				}, exports$1.SwitchCase = function(node) {
					node.test ? (this.word("case"), this.space(), this.print(node.test), this.tokenChar(58)) : (this.word("default"), this.tokenChar(58));
					node.consequent.length && (this.newline(), this.printSequence(node.consequent, !0));
				}, exports$1.SwitchStatement = function(node) {
					this.word("switch"), this.space(), this.tokenChar(40), this.print(node.discriminant), this.tokenChar(41), this.space(), this.tokenChar(123), this.printSequence(node.cases, !0, void 0, function(leading, cas) {
						if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
					}), this.rightBrace(node);
				}, exports$1.ThrowStatement = function(node) {
					this.word("throw"), printStatementAfterKeyword(this, node.argument);
				}, exports$1.TryStatement = function(node) {
					this.word("try"), this.space(), this.print(node.block), this.space(), node.handlers ? this.print(node.handlers[0]) : this.print(node.handler);
					node.finalizer && (this.space(), this.word("finally"), this.space(), this.print(node.finalizer));
				}, exports$1.VariableDeclaration = function(node, parent) {
					node.declare && (this.word("declare"), this.space());
					const { kind } = node;
					"await using" === kind ? (this.word("await"), this.space(), this.word("using", !0)) : this.word(kind, "using" === kind);
					this.space();
					let hasInits = !1;
					if (!isFor(parent)) for (const declar of node.declarations) declar.init && (hasInits = !0);
					if (this.printList(node.declarations, void 0, void 0, node.declarations.length > 1, hasInits ? function(occurrenceCount) {
						this.token(",", !1, occurrenceCount), this.newline();
					} : void 0), isFor(parent)) {
						if (isForStatement(parent)) {
							if (parent.init === node) return;
						} else if (parent.left === node) return;
					}
					this.semicolon();
				}, exports$1.VariableDeclarator = function(node) {
					this.print(node.id), node.definite && this.tokenChar(33);
					this.print(node.id.typeAnnotation), node.init && (this.space(), this.tokenChar(61), this.space(), this.print(node.init));
				}, exports$1.WhileStatement = function(node) {
					this.word("while"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.printBlock(node);
				}, exports$1.WithStatement = function(node) {
					this.word("with"), this.space(), this.tokenChar(40), this.print(node.object), this.tokenChar(41), this.printBlock(node);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
				const { isFor, isForStatement, isIfStatement, isStatement } = _t;
				function getLastStatement(statement) {
					const { body } = statement;
					return !1 === isStatement(body) ? statement : getLastStatement(body);
				}
				function ForXStatement(node) {
					this.word("for"), this.space();
					const isForOf = "ForOfStatement" === node.type;
					isForOf && node.await && (this.word("await"), this.space()), this.noIndentInnerCommentsHere(), this.tokenChar(40);
					{
						const exit = isForOf ? null : this.enterForStatementInit();
						this.tokenContext |= isForOf ? _index.TokenContext.forOfHead : _index.TokenContext.forInHead, this.print(node.left), exit?.();
					}
					this.space(), this.word(isForOf ? "of" : "in"), this.space(), this.print(node.right), this.tokenChar(41), this.printBlock(node);
				}
				exports$1.ForInStatement = ForXStatement, exports$1.ForOfStatement = ForXStatement;
				function printStatementAfterKeyword(printer, node) {
					node && (printer.space(), printer.printTerminatorless(node)), printer.semicolon();
				}
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/template-literals.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.TaggedTemplateExpression = function(node) {
					this.print(node.tag), this.print(node.typeParameters), this.print(node.quasi);
				}, exports$1.TemplateElement = function() {
					throw new Error("TemplateElement printing is handled in TemplateLiteral");
				}, exports$1.TemplateLiteral = function(node) {
					const quasis = node.quasis;
					let partRaw = "`";
					for (let i = 0; i < quasis.length; i++) if (partRaw += quasis[i].value.raw, i + 1 < quasis.length && (this.token(partRaw + "${", !0), this.print(node.expressions[i]), partRaw = "}", this.tokenMap)) {
						const token = this.tokenMap.findMatching(node, "}", i);
						token && this._catchUpTo(token.loc.start);
					}
					this.token(partRaw + "`", !0);
				};
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.ArgumentPlaceholder = function() {
					this.tokenChar(63);
				}, exports$1.ArrayPattern = exports$1.ArrayExpression = function(node) {
					const elems = node.elements, len = elems.length;
					this.tokenChar(91);
					const exit = this.enterDelimited();
					for (let i = 0; i < elems.length; i++) {
						const elem = elems[i];
						elem ? (i > 0 && this.space(), this.print(elem), (i < len - 1 || this.shouldPrintTrailingComma("]")) && this.token(",", !1, i)) : this.token(",", !1, i);
					}
					exit(), this.tokenChar(93);
				}, exports$1.BigIntLiteral = function(node) {
					const raw = this.getPossibleRaw(node);
					if (!this.format.minified && void 0 !== raw) return void this.word(raw);
					this.word(node.value + "n");
				}, exports$1.BooleanLiteral = function(node) {
					this.word(node.value ? "true" : "false");
				}, exports$1.DecimalLiteral = function(node) {
					const raw = this.getPossibleRaw(node);
					if (!this.format.minified && void 0 !== raw) return void this.word(raw);
					this.word(node.value + "m");
				}, exports$1.Identifier = function(node) {
					var _node$loc;
					this.sourceIdentifierName((null == (_node$loc = node.loc) ? void 0 : _node$loc.identifierName) || node.name), this.word(this.tokenMap ? this._getRawIdentifier(node) : node.name);
				}, exports$1.NullLiteral = function() {
					this.word("null");
				}, exports$1.NumericLiteral = function(node) {
					const raw = this.getPossibleRaw(node), opts = this.format.jsescOption, value$1 = node.value, str = value$1 + "";
					opts.numbers ? this.number(_jsesc(value$1, opts), value$1) : null == raw ? this.number(str, value$1) : this.format.minified ? this.number(raw.length < str.length ? raw : str, value$1) : this.number(raw, value$1);
				}, exports$1.ObjectPattern = exports$1.ObjectExpression = function(node) {
					const props = node.properties;
					if (this.tokenChar(123), props.length) {
						const exit = this.enterDelimited();
						this.space(), this.printList(props, this.shouldPrintTrailingComma("}"), !0, !0), this.space(), exit();
					}
					this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
				}, exports$1.ObjectMethod = function(node) {
					this.printJoin(node.decorators), this._methodHead(node), this.space(), this.print(node.body);
				}, exports$1.ObjectProperty = function(node) {
					if (this.printJoin(node.decorators), node.computed) this.tokenChar(91), this.print(node.key), this.tokenChar(93);
					else {
						if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) return void this.print(node.value);
						if (this.print(node.key), node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name) return;
					}
					this.tokenChar(58), this.space(), this.print(node.value);
				}, exports$1.PipelineBareFunction = function(node) {
					this.print(node.callee);
				}, exports$1.PipelinePrimaryTopicReference = function() {
					this.tokenChar(35);
				}, exports$1.PipelineTopicExpression = function(node) {
					this.print(node.expression);
				}, exports$1.RecordExpression = function(node) {
					const props = node.properties;
					let startToken, endToken;
					if ("bar" === this.format.recordAndTupleSyntaxType) startToken = "{|", endToken = "|}";
					else {
						if ("hash" !== this.format.recordAndTupleSyntaxType && null != this.format.recordAndTupleSyntaxType) throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
						startToken = "#{", endToken = "}";
					}
					this.token(startToken), props.length && (this.space(), this.printList(props, this.shouldPrintTrailingComma(endToken), !0, !0), this.space());
					this.token(endToken);
				}, exports$1.RegExpLiteral = function(node) {
					this.word(`/${node.pattern}/${node.flags}`);
				}, exports$1.SpreadElement = exports$1.RestElement = function(node) {
					this.token("..."), this.print(node.argument);
				}, exports$1.StringLiteral = function(node) {
					const raw = this.getPossibleRaw(node);
					if (!this.format.minified && void 0 !== raw) return void this.token(raw);
					const val = _jsesc(node.value, this.format.jsescOption);
					this.token(val);
				}, exports$1.TopicReference = function() {
					const { topicToken } = this.format;
					if (!validTopicTokenSet.has(topicToken)) {
						const givenTopicTokenJSON = JSON.stringify(topicToken), validTopics = Array.from(validTopicTokenSet, (v$1) => JSON.stringify(v$1));
						throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
					}
					this.token(topicToken);
				}, exports$1.TupleExpression = function(node) {
					const elems = node.elements, len = elems.length;
					let startToken, endToken;
					if ("bar" === this.format.recordAndTupleSyntaxType) startToken = "[|", endToken = "|]";
					else {
						if ("hash" !== this.format.recordAndTupleSyntaxType) throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
						startToken = "#[", endToken = "]";
					}
					this.token(startToken);
					for (let i = 0; i < elems.length; i++) {
						const elem = elems[i];
						elem && (i > 0 && this.space(), this.print(elem), (i < len - 1 || this.shouldPrintTrailingComma(endToken)) && this.token(",", !1, i));
					}
					this.token(endToken);
				}, exports$1._getRawIdentifier = function(node) {
					if (node === lastRawIdentNode) return lastRawIdentResult;
					lastRawIdentNode = node;
					const { name } = node, token = this.tokenMap.find(node, (tok) => tok.value === name);
					if (token) return lastRawIdentResult = this._originalCode.slice(token.start, token.end), lastRawIdentResult;
					return lastRawIdentResult = node.name;
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _jsesc = __webpack_require__$1("./node_modules/.pnpm/jsesc@3.1.0/node_modules/jsesc/jsesc.js");
				const { isAssignmentPattern, isIdentifier } = _t;
				let lastRawIdentNode = null, lastRawIdentResult = "";
				const validTopicTokenSet = new Set([
					"^^",
					"@@",
					"^",
					"%",
					"#"
				]);
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/typescript.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				function maybePrintTrailingCommaOrSemicolon(printer, node) {
					printer.tokenMap && node.start && node.end ? printer.tokenMap.endMatches(node, ",") ? printer.token(",") : printer.tokenMap.endMatches(node, ";") && printer.semicolon() : printer.semicolon();
				}
				function tsPrintUnionOrIntersectionType(printer, node, sep$1) {
					var _printer$tokenMap;
					let hasLeadingToken = 0;
					null != (_printer$tokenMap = printer.tokenMap) && _printer$tokenMap.startMatches(node, sep$1) && (hasLeadingToken = 1, printer.token(sep$1)), printer.printJoin(node.types, void 0, void 0, function(i) {
						this.space(), this.token(sep$1, null, i + hasLeadingToken), this.space();
					});
				}
				function tokenIfPlusMinus(self$1, tok) {
					!0 !== tok && self$1.token(tok);
				}
				function printBraced(printer, node, cb) {
					printer.token("{");
					const exit = printer.enterDelimited();
					cb(), exit(), printer.rightBrace(node);
				}
				function printModifiersList(printer, node, modifiers) {
					var _printer$tokenMap2;
					const modifiersSet = new Set();
					for (const modifier of modifiers) modifier && modifiersSet.add(modifier);
					null == (_printer$tokenMap2 = printer.tokenMap) || _printer$tokenMap2.find(node, (tok) => {
						if (modifiersSet.has(tok.value)) return printer.token(tok.value), printer.space(), modifiersSet.delete(tok.value), 0 === modifiersSet.size;
					});
					for (const modifier of modifiersSet) printer.word(modifier), printer.space();
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.TSAnyKeyword = function() {
					this.word("any");
				}, exports$1.TSArrayType = function(node) {
					this.print(node.elementType, !0), this.tokenChar(91), this.tokenChar(93);
				}, exports$1.TSSatisfiesExpression = exports$1.TSAsExpression = function(node) {
					const { type: type$1, expression, typeAnnotation } = node;
					this.print(expression, !0), this.space(), this.word("TSAsExpression" === type$1 ? "as" : "satisfies"), this.space(), this.print(typeAnnotation);
				}, exports$1.TSBigIntKeyword = function() {
					this.word("bigint");
				}, exports$1.TSBooleanKeyword = function() {
					this.word("boolean");
				}, exports$1.TSCallSignatureDeclaration = function(node) {
					this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
				}, exports$1.TSInterfaceHeritage = exports$1.TSExpressionWithTypeArguments = exports$1.TSClassImplements = function(node) {
					this.print(node.expression), this.print(node.typeParameters);
				}, exports$1.TSConditionalType = function(node) {
					this.print(node.checkType), this.space(), this.word("extends"), this.space(), this.print(node.extendsType), this.space(), this.tokenChar(63), this.space(), this.print(node.trueType), this.space(), this.tokenChar(58), this.space(), this.print(node.falseType);
				}, exports$1.TSConstructSignatureDeclaration = function(node) {
					this.word("new"), this.space(), this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
				}, exports$1.TSConstructorType = function(node) {
					node.abstract && (this.word("abstract"), this.space());
					this.word("new"), this.space(), this.tsPrintFunctionOrConstructorType(node);
				}, exports$1.TSDeclareFunction = function(node, parent) {
					node.declare && (this.word("declare"), this.space());
					this._functionHead(node, parent), this.semicolon();
				}, exports$1.TSDeclareMethod = function(node) {
					this._classMethodHead(node), this.semicolon();
				}, exports$1.TSEnumDeclaration = function(node) {
					const { declare, const: isConst, id, members } = node;
					declare && (this.word("declare"), this.space());
					isConst && (this.word("const"), this.space());
					this.word("enum"), this.space(), this.print(id), this.space(), printBraced(this, node, () => {
						var _this$shouldPrintTrai;
						return this.printList(members, null == (_this$shouldPrintTrai = this.shouldPrintTrailingComma("}")) || _this$shouldPrintTrai, !0, !0);
					});
				}, exports$1.TSEnumMember = function(node) {
					const { id, initializer } = node;
					this.print(id), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer));
				}, exports$1.TSExportAssignment = function(node) {
					this.word("export"), this.space(), this.tokenChar(61), this.space(), this.print(node.expression), this.semicolon();
				}, exports$1.TSExternalModuleReference = function(node) {
					this.token("require("), this.print(node.expression), this.tokenChar(41);
				}, exports$1.TSFunctionType = function(node) {
					this.tsPrintFunctionOrConstructorType(node);
				}, exports$1.TSImportEqualsDeclaration = function(node) {
					const { isExport, id, moduleReference } = node;
					isExport && (this.word("export"), this.space());
					this.word("import"), this.space(), this.print(id), this.space(), this.tokenChar(61), this.space(), this.print(moduleReference), this.semicolon();
				}, exports$1.TSImportType = function(node) {
					const { argument, qualifier, typeParameters } = node;
					this.word("import"), this.tokenChar(40), this.print(argument), this.tokenChar(41), qualifier && (this.tokenChar(46), this.print(qualifier));
					typeParameters && this.print(typeParameters);
				}, exports$1.TSIndexSignature = function(node) {
					const { readonly, static: isStatic } = node;
					isStatic && (this.word("static"), this.space());
					readonly && (this.word("readonly"), this.space());
					this.tokenChar(91), this._parameters(node.parameters, "]"), this.print(node.typeAnnotation), maybePrintTrailingCommaOrSemicolon(this, node);
				}, exports$1.TSIndexedAccessType = function(node) {
					this.print(node.objectType, !0), this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
				}, exports$1.TSInferType = function(node) {
					this.word("infer"), this.print(node.typeParameter);
				}, exports$1.TSInstantiationExpression = function(node) {
					this.print(node.expression), this.print(node.typeParameters);
				}, exports$1.TSInterfaceBody = function(node) {
					printBraced(this, node, () => this.printJoin(node.body, !0, !0));
				}, exports$1.TSInterfaceDeclaration = function(node) {
					const { declare, id, typeParameters, extends: extendz, body } = node;
					declare && (this.word("declare"), this.space());
					this.word("interface"), this.space(), this.print(id), this.print(typeParameters), null != extendz && extendz.length && (this.space(), this.word("extends"), this.space(), this.printList(extendz));
					this.space(), this.print(body);
				}, exports$1.TSIntersectionType = function(node) {
					tsPrintUnionOrIntersectionType(this, node, "&");
				}, exports$1.TSIntrinsicKeyword = function() {
					this.word("intrinsic");
				}, exports$1.TSLiteralType = function(node) {
					this.print(node.literal);
				}, exports$1.TSMappedType = function(node) {
					const { nameType, optional, readonly, typeAnnotation } = node;
					this.tokenChar(123);
					const exit = this.enterDelimited();
					this.space(), readonly && (tokenIfPlusMinus(this, readonly), this.word("readonly"), this.space());
					this.tokenChar(91), this.word(node.typeParameter.name), this.space(), this.word("in"), this.space(), this.print(node.typeParameter.constraint), nameType && (this.space(), this.word("as"), this.space(), this.print(nameType));
					this.tokenChar(93), optional && (tokenIfPlusMinus(this, optional), this.tokenChar(63));
					typeAnnotation && (this.tokenChar(58), this.space(), this.print(typeAnnotation));
					this.space(), exit(), this.tokenChar(125);
				}, exports$1.TSMethodSignature = function(node) {
					const { kind } = node;
					"set" !== kind && "get" !== kind || (this.word(kind), this.space());
					this.tsPrintPropertyOrMethodName(node), this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
				}, exports$1.TSModuleBlock = function(node) {
					printBraced(this, node, () => this.printSequence(node.body, !0));
				}, exports$1.TSModuleDeclaration = function(node) {
					const { declare, id, kind } = node;
					declare && (this.word("declare"), this.space());
					{
						if (node.global || (this.word(null != kind ? kind : "Identifier" === id.type ? "namespace" : "module"), this.space()), this.print(id), !node.body) return void this.semicolon();
						let body = node.body;
						for (; "TSModuleDeclaration" === body.type;) this.tokenChar(46), this.print(body.id), body = body.body;
						this.space(), this.print(body);
					}
				}, exports$1.TSNamedTupleMember = function(node) {
					this.print(node.label), node.optional && this.tokenChar(63);
					this.tokenChar(58), this.space(), this.print(node.elementType);
				}, exports$1.TSNamespaceExportDeclaration = function(node) {
					this.word("export"), this.space(), this.word("as"), this.space(), this.word("namespace"), this.space(), this.print(node.id), this.semicolon();
				}, exports$1.TSNeverKeyword = function() {
					this.word("never");
				}, exports$1.TSNonNullExpression = function(node) {
					this.print(node.expression), this.tokenChar(33);
				}, exports$1.TSNullKeyword = function() {
					this.word("null");
				}, exports$1.TSNumberKeyword = function() {
					this.word("number");
				}, exports$1.TSObjectKeyword = function() {
					this.word("object");
				}, exports$1.TSOptionalType = function(node) {
					this.print(node.typeAnnotation), this.tokenChar(63);
				}, exports$1.TSParameterProperty = function(node) {
					node.accessibility && (this.word(node.accessibility), this.space());
					node.readonly && (this.word("readonly"), this.space());
					this._param(node.parameter);
				}, exports$1.TSParenthesizedType = function(node) {
					this.tokenChar(40), this.print(node.typeAnnotation), this.tokenChar(41);
				}, exports$1.TSPropertySignature = function(node) {
					const { readonly } = node;
					readonly && (this.word("readonly"), this.space());
					this.tsPrintPropertyOrMethodName(node), this.print(node.typeAnnotation), maybePrintTrailingCommaOrSemicolon(this, node);
				}, exports$1.TSQualifiedName = function(node) {
					this.print(node.left), this.tokenChar(46), this.print(node.right);
				}, exports$1.TSRestType = function(node) {
					this.token("..."), this.print(node.typeAnnotation);
				}, exports$1.TSStringKeyword = function() {
					this.word("string");
				}, exports$1.TSSymbolKeyword = function() {
					this.word("symbol");
				}, exports$1.TSThisType = function() {
					this.word("this");
				}, exports$1.TSTupleType = function(node) {
					this.tokenChar(91), this.printList(node.elementTypes, this.shouldPrintTrailingComma("]")), this.tokenChar(93);
				}, exports$1.TSTypeAliasDeclaration = function(node) {
					const { declare, id, typeParameters, typeAnnotation } = node;
					declare && (this.word("declare"), this.space());
					this.word("type"), this.space(), this.print(id), this.print(typeParameters), this.space(), this.tokenChar(61), this.space(), this.print(typeAnnotation), this.semicolon();
				}, exports$1.TSTypeAnnotation = function(node, parent) {
					this.token("TSFunctionType" !== parent.type && "TSConstructorType" !== parent.type || parent.typeAnnotation !== node ? ":" : "=>"), this.space(), node.optional && this.tokenChar(63);
					this.print(node.typeAnnotation);
				}, exports$1.TSTypeAssertion = function(node) {
					const { typeAnnotation, expression } = node;
					this.tokenChar(60), this.print(typeAnnotation), this.tokenChar(62), this.space(), this.print(expression);
				}, exports$1.TSTypeLiteral = function(node) {
					printBraced(this, node, () => this.printJoin(node.members, !0, !0));
				}, exports$1.TSTypeOperator = function(node) {
					this.word(node.operator), this.space(), this.print(node.typeAnnotation);
				}, exports$1.TSTypeParameter = function(node) {
					node.in && (this.word("in"), this.space());
					node.out && (this.word("out"), this.space());
					this.word(node.name), node.constraint && (this.space(), this.word("extends"), this.space(), this.print(node.constraint));
					node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default));
				}, exports$1.TSTypeParameterDeclaration = exports$1.TSTypeParameterInstantiation = function(node, parent) {
					this.tokenChar(60);
					let printTrailingSeparator = "ArrowFunctionExpression" === parent.type && 1 === node.params.length;
					this.tokenMap && null != node.start && null != node.end && (printTrailingSeparator && (printTrailingSeparator = !!this.tokenMap.find(node, (t) => this.tokenMap.matchesOriginal(t, ","))), printTrailingSeparator || (printTrailingSeparator = this.shouldPrintTrailingComma(">")));
					this.printList(node.params, printTrailingSeparator), this.tokenChar(62);
				}, exports$1.TSTypePredicate = function(node) {
					node.asserts && (this.word("asserts"), this.space());
					this.print(node.parameterName), node.typeAnnotation && (this.space(), this.word("is"), this.space(), this.print(node.typeAnnotation.typeAnnotation));
				}, exports$1.TSTypeQuery = function(node) {
					this.word("typeof"), this.space(), this.print(node.exprName), node.typeParameters && this.print(node.typeParameters);
				}, exports$1.TSTypeReference = function(node) {
					this.print(node.typeName, !!node.typeParameters), this.print(node.typeParameters);
				}, exports$1.TSUndefinedKeyword = function() {
					this.word("undefined");
				}, exports$1.TSUnionType = function(node) {
					tsPrintUnionOrIntersectionType(this, node, "|");
				}, exports$1.TSUnknownKeyword = function() {
					this.word("unknown");
				}, exports$1.TSVoidKeyword = function() {
					this.word("void");
				}, exports$1.tsPrintClassMemberModifiers = function(node) {
					const isField = "ClassAccessorProperty" === node.type || "ClassProperty" === node.type;
					printModifiersList(this, node, [isField && node.declare && "declare", node.accessibility]), node.static && (this.word("static"), this.space());
					printModifiersList(this, node, [
						node.override && "override",
						node.abstract && "abstract",
						isField && node.readonly && "readonly"
					]);
				}, exports$1.tsPrintFunctionOrConstructorType = function(node) {
					const { typeParameters } = node, parameters = node.parameters;
					this.print(typeParameters), this.tokenChar(40), this._parameters(parameters, ")"), this.space();
					const returnType = node.typeAnnotation;
					this.print(returnType);
				}, exports$1.tsPrintPropertyOrMethodName = function(node) {
					node.computed && this.tokenChar(91);
					this.print(node.key), node.computed && this.tokenChar(93);
					node.optional && this.tokenChar(63);
				}, exports$1.tsPrintSignatureDeclarationBase = function(node) {
					const { typeParameters } = node, parameters = node.parameters;
					this.print(typeParameters), this.tokenChar(40), this._parameters(parameters, ")");
					const returnType = node.typeAnnotation;
					this.print(returnType);
				};
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(ast, opts = {}, code) {
					const format = normalizeOptions(code, opts, ast), map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
					return new _printer.default(format, map, ast.tokens, "string" == typeof code ? code : null).generate(ast);
				};
				var _sourceMap = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/source-map.js"), _printer = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/printer.js");
				function normalizeOptions(code, opts, ast) {
					if (opts.experimental_preserveFormat) {
						if ("string" != typeof code) throw new Error("`experimental_preserveFormat` requires the original `code` to be passed to @babel/generator as a string");
						if (!opts.retainLines) throw new Error("`experimental_preserveFormat` requires `retainLines` to be set to `true`");
						if (opts.compact && "auto" !== opts.compact) throw new Error("`experimental_preserveFormat` is not compatible with the `compact` option");
						if (opts.minified) throw new Error("`experimental_preserveFormat` is not compatible with the `minified` option");
						if (opts.jsescOption) throw new Error("`experimental_preserveFormat` is not compatible with the `jsescOption` option");
						if (!Array.isArray(ast.tokens)) throw new Error("`experimental_preserveFormat` requires the AST to have attatched the token of the input code. Make sure to enable the `tokens: true` parser option.");
					}
					const format = {
						auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
						auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
						shouldPrintComment: opts.shouldPrintComment,
						preserveFormat: opts.experimental_preserveFormat,
						retainLines: opts.retainLines,
						retainFunctionParens: opts.retainFunctionParens,
						comments: null == opts.comments || opts.comments,
						compact: opts.compact,
						minified: opts.minified,
						concise: opts.concise,
						indent: {
							adjustMultilineComment: !0,
							style: "  "
						},
						jsescOption: Object.assign({
							quotes: "double",
							wrap: !0,
							minimal: !1
						}, opts.jsescOption),
						topicToken: opts.topicToken,
						importAttributesKeyword: opts.importAttributesKeyword
					};
					var _opts$recordAndTupleS;
					format.decoratorsBeforeExport = opts.decoratorsBeforeExport, format.jsescOption.json = opts.jsonCompatibleStrings, format.recordAndTupleSyntaxType = null != (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) ? _opts$recordAndTupleS : "hash", format.minified ? (format.compact = !0, format.shouldPrintComment = format.shouldPrintComment || (() => format.comments)) : format.shouldPrintComment = format.shouldPrintComment || ((value$1) => format.comments || value$1.includes("@license") || value$1.includes("@preserve")), "auto" === format.compact && (format.compact = "string" == typeof code && code.length > 5e5, format.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts.filename} as it exceeds the max of 500KB.`)), (format.compact || format.preserveFormat) && (format.indent.adjustMultilineComment = !1);
					const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } = format;
					return auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore) && (format.auxiliaryCommentBefore = void 0), auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter) && (format.auxiliaryCommentAfter = void 0), format;
				}
				exports$1.CodeGenerator = class {
					constructor(ast, opts = {}, code) {
						this._ast = void 0, this._format = void 0, this._map = void 0, this._ast = ast, this._format = normalizeOptions(code, opts, ast), this._map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
					}
					generate() {
						return new _printer.default(this._format, this._map).generate(this._ast);
					}
				};
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.TokenContext = void 0, exports$1.isLastChild = function(parent, child$1) {
					const visitorKeys = VISITOR_KEYS[parent.type];
					for (let i = visitorKeys.length - 1; i >= 0; i--) {
						const val = parent[visitorKeys[i]];
						if (val === child$1) return !0;
						if (Array.isArray(val)) {
							let j = val.length - 1;
							for (; j >= 0 && null === val[j];) j--;
							return j >= 0 && val[j] === child$1;
						}
						if (val) return !1;
					}
					return !1;
				}, exports$1.needsParens = function(node, parent, tokenContext, inForInit, getRawIdentifier) {
					var _expandedParens$get;
					if (!parent) return !1;
					if (isNewExpression(parent) && parent.callee === node && isOrHasCallExpression(node)) return !0;
					if (isDecorator(parent)) return !(isDecoratorMemberExpression(node) || isCallExpression(node) && isDecoratorMemberExpression(node.callee) || isParenthesizedExpression(node));
					return null == (_expandedParens$get = expandedParens.get(node.type)) ? void 0 : _expandedParens$get(node, parent, tokenContext, inForInit, getRawIdentifier);
				}, exports$1.needsWhitespace = needsWhitespace, exports$1.needsWhitespaceAfter = function(node, parent) {
					return needsWhitespace(node, parent, 2);
				}, exports$1.needsWhitespaceBefore = function(node, parent) {
					return needsWhitespace(node, parent, 1);
				};
				var whitespace = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/whitespace.js"), parens = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/parentheses.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { FLIPPED_ALIAS_KEYS, VISITOR_KEYS, isCallExpression, isDecorator, isExpressionStatement, isMemberExpression, isNewExpression, isParenthesizedExpression } = _t;
				exports$1.TokenContext = {
					expressionStatement: 1,
					arrowBody: 2,
					exportDefault: 4,
					forHead: 8,
					forInHead: 16,
					forOfHead: 32,
					arrowFlowReturnType: 64
				};
				function expandAliases(obj) {
					const map = new Map();
					function add(type$1, func) {
						const fn = map.get(type$1);
						map.set(type$1, fn ? function(node, parent, stack, inForInit, getRawIdentifier) {
							var _fn;
							return null != (_fn = fn(node, parent, stack, inForInit, getRawIdentifier)) ? _fn : func(node, parent, stack, inForInit, getRawIdentifier);
						} : func);
					}
					for (const type$1 of Object.keys(obj)) {
						const aliases = FLIPPED_ALIAS_KEYS[type$1];
						if (aliases) for (const alias of aliases) add(alias, obj[type$1]);
						else add(type$1, obj[type$1]);
					}
					return map;
				}
				const expandedParens = expandAliases(parens), expandedWhitespaceNodes = expandAliases(whitespace.nodes);
				function isOrHasCallExpression(node) {
					return !!isCallExpression(node) || isMemberExpression(node) && isOrHasCallExpression(node.object);
				}
				function needsWhitespace(node, parent, type$1) {
					var _expandedWhitespaceNo;
					if (!node) return !1;
					isExpressionStatement(node) && (node = node.expression);
					const flag = null == (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node.type)) ? void 0 : _expandedWhitespaceNo(node, parent);
					return "number" == typeof flag && !!(flag & type$1);
				}
				function isDecoratorMemberExpression(node) {
					switch (node.type) {
						case "Identifier": return !0;
						case "MemberExpression": return !node.computed && "Identifier" === node.property.type && isDecoratorMemberExpression(node.object);
						default: return !1;
					}
				}
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/parentheses.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.AssignmentExpression = function(node, parent, tokenContext) {
					return !(!needsParenBeforeExpressionBrace(tokenContext) || !isObjectPattern(node.left)) || ConditionalExpression(node, parent);
				}, exports$1.Binary = Binary, exports$1.BinaryExpression = function(node, parent, tokenContext, inForStatementInit) {
					return "in" === node.operator && inForStatementInit;
				}, exports$1.ClassExpression = function(node, parent, tokenContext) {
					return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
				}, exports$1.ArrowFunctionExpression = exports$1.ConditionalExpression = ConditionalExpression, exports$1.DoExpression = function(node, parent, tokenContext) {
					return !node.async && Boolean(tokenContext & _index.TokenContext.expressionStatement);
				}, exports$1.FunctionExpression = function(node, parent, tokenContext) {
					return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
				}, exports$1.FunctionTypeAnnotation = function(node, parent, tokenContext) {
					const parentType = parent.type;
					return "UnionTypeAnnotation" === parentType || "IntersectionTypeAnnotation" === parentType || "ArrayTypeAnnotation" === parentType || Boolean(tokenContext & _index.TokenContext.arrowFlowReturnType);
				}, exports$1.Identifier = function(node, parent, tokenContext, _inForInit, getRawIdentifier) {
					var _node$extra;
					const parentType = parent.type;
					if (null != (_node$extra = node.extra) && _node$extra.parenthesized && "AssignmentExpression" === parentType && parent.left === node) {
						const rightType = parent.right.type;
						if (("FunctionExpression" === rightType || "ClassExpression" === rightType) && null == parent.right.id) return !0;
					}
					if (getRawIdentifier && getRawIdentifier(node) !== node.name) return !1;
					if ("let" === node.name) return !!((isMemberExpression(parent, {
						object: node,
						computed: !0
					}) || isOptionalMemberExpression(parent, {
						object: node,
						computed: !0,
						optional: !1
					})) && tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.forHead | _index.TokenContext.forInHead)) || Boolean(tokenContext & _index.TokenContext.forOfHead);
					return "async" === node.name && isForOfStatement(parent, {
						left: node,
						await: !1
					});
				}, exports$1.LogicalExpression = function(node, parent) {
					const parentType = parent.type;
					if (isTSTypeExpression(parentType)) return !0;
					if ("LogicalExpression" !== parentType) return !1;
					switch (node.operator) {
						case "||": return "??" === parent.operator || "&&" === parent.operator;
						case "&&": return "??" === parent.operator;
						case "??": return "??" !== parent.operator;
					}
				}, exports$1.NullableTypeAnnotation = function(node, parent) {
					return isArrayTypeAnnotation(parent);
				}, exports$1.ObjectExpression = function(node, parent, tokenContext) {
					return needsParenBeforeExpressionBrace(tokenContext);
				}, exports$1.OptionalIndexedAccessType = function(node, parent) {
					return isIndexedAccessType(parent) && parent.objectType === node;
				}, exports$1.OptionalCallExpression = exports$1.OptionalMemberExpression = function(node, parent) {
					return isCallExpression(parent) && parent.callee === node || isMemberExpression(parent) && parent.object === node;
				}, exports$1.SequenceExpression = function(node, parent) {
					const parentType = parent.type;
					if ("SequenceExpression" === parentType || "ParenthesizedExpression" === parentType || "MemberExpression" === parentType && parent.property === node || "OptionalMemberExpression" === parentType && parent.property === node || "TemplateLiteral" === parentType) return !1;
					if ("ClassDeclaration" === parentType) return !0;
					if ("ForOfStatement" === parentType) return parent.right === node;
					if ("ExportDefaultDeclaration" === parentType) return !0;
					return !isStatement(parent);
				}, exports$1.TSSatisfiesExpression = exports$1.TSAsExpression = function(node, parent) {
					if (("AssignmentExpression" === parent.type || "AssignmentPattern" === parent.type) && parent.left === node) return !0;
					if ("BinaryExpression" === parent.type && ("|" === parent.operator || "&" === parent.operator) && node === parent.left) return !0;
					return Binary(node, parent);
				}, exports$1.TSInferType = function(node, parent) {
					const parentType = parent.type;
					return "TSArrayType" === parentType || "TSOptionalType" === parentType;
				}, exports$1.TSInstantiationExpression = function(node, parent) {
					const parentType = parent.type;
					return ("CallExpression" === parentType || "OptionalCallExpression" === parentType || "NewExpression" === parentType || "TSInstantiationExpression" === parentType) && !!parent.typeParameters;
				}, exports$1.UnaryLike = exports$1.TSTypeAssertion = UnaryLike, exports$1.TSIntersectionType = exports$1.TSUnionType = function(node, parent) {
					const parentType = parent.type;
					return "TSArrayType" === parentType || "TSOptionalType" === parentType || "TSIntersectionType" === parentType || "TSRestType" === parentType;
				}, exports$1.IntersectionTypeAnnotation = exports$1.UnionTypeAnnotation = function(node, parent) {
					const parentType = parent.type;
					return "ArrayTypeAnnotation" === parentType || "NullableTypeAnnotation" === parentType || "IntersectionTypeAnnotation" === parentType || "UnionTypeAnnotation" === parentType;
				}, exports$1.UpdateExpression = function(node, parent) {
					return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
				}, exports$1.AwaitExpression = exports$1.YieldExpression = function(node, parent) {
					const parentType = parent.type;
					return "BinaryExpression" === parentType || "LogicalExpression" === parentType || "UnaryExpression" === parentType || "SpreadElement" === parentType || hasPostfixPart(node, parent) || "AwaitExpression" === parentType && isYieldExpression(node) || "ConditionalExpression" === parentType && node === parent.test || isClassExtendsClause(node, parent) || isTSTypeExpression(parentType);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
				const { isArrayTypeAnnotation, isBinaryExpression, isCallExpression, isForOfStatement, isIndexedAccessType, isMemberExpression, isObjectPattern, isOptionalMemberExpression, isYieldExpression, isStatement } = _t, PRECEDENCE = new Map([
					["||", 0],
					["??", 0],
					["|>", 0],
					["&&", 1],
					["|", 2],
					["^", 3],
					["&", 4],
					["==", 5],
					["===", 5],
					["!=", 5],
					["!==", 5],
					["<", 6],
					[">", 6],
					["<=", 6],
					[">=", 6],
					["in", 6],
					["instanceof", 6],
					[">>", 7],
					["<<", 7],
					[">>>", 7],
					["+", 8],
					["-", 8],
					["*", 9],
					["/", 9],
					["%", 9],
					["**", 10]
				]);
				function getBinaryPrecedence(node, nodeType) {
					return "BinaryExpression" === nodeType || "LogicalExpression" === nodeType ? PRECEDENCE.get(node.operator) : "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType ? PRECEDENCE.get("in") : void 0;
				}
				function isTSTypeExpression(nodeType) {
					return "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType || "TSTypeAssertion" === nodeType;
				}
				const isClassExtendsClause = (node, parent) => {
					const parentType = parent.type;
					return ("ClassDeclaration" === parentType || "ClassExpression" === parentType) && parent.superClass === node;
				}, hasPostfixPart = (node, parent) => {
					const parentType = parent.type;
					return ("MemberExpression" === parentType || "OptionalMemberExpression" === parentType) && parent.object === node || ("CallExpression" === parentType || "OptionalCallExpression" === parentType || "NewExpression" === parentType) && parent.callee === node || "TaggedTemplateExpression" === parentType && parent.tag === node || "TSNonNullExpression" === parentType;
				};
				function needsParenBeforeExpressionBrace(tokenContext) {
					return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.arrowBody));
				}
				function Binary(node, parent) {
					const parentType = parent.type;
					if ("BinaryExpression" === node.type && "**" === node.operator && "BinaryExpression" === parentType && "**" === parent.operator) return parent.left === node;
					if (isClassExtendsClause(node, parent)) return !0;
					if (hasPostfixPart(node, parent) || "UnaryExpression" === parentType || "SpreadElement" === parentType || "AwaitExpression" === parentType) return !0;
					const parentPos = getBinaryPrecedence(parent, parentType);
					if (null != parentPos) {
						const nodePos = getBinaryPrecedence(node, node.type);
						if (parentPos === nodePos && "BinaryExpression" === parentType && parent.right === node || parentPos > nodePos) return !0;
					}
				}
				function UnaryLike(node, parent) {
					return hasPostfixPart(node, parent) || isBinaryExpression(parent) && "**" === parent.operator && parent.left === node || isClassExtendsClause(node, parent);
				}
				function ConditionalExpression(node, parent) {
					const parentType = parent.type;
					return !!("UnaryExpression" === parentType || "SpreadElement" === parentType || "BinaryExpression" === parentType || "LogicalExpression" === parentType || "ConditionalExpression" === parentType && parent.test === node || "AwaitExpression" === parentType || isTSTypeExpression(parentType)) || UnaryLike(node, parent);
				}
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/whitespace.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.nodes = void 0;
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { FLIPPED_ALIAS_KEYS, isArrayExpression, isAssignmentExpression, isBinary, isBlockStatement, isCallExpression, isFunction, isIdentifier, isLiteral, isMemberExpression, isObjectExpression, isOptionalCallExpression, isOptionalMemberExpression, isStringLiteral } = _t;
				function crawlInternal(node, state) {
					return node ? (isMemberExpression(node) || isOptionalMemberExpression(node) ? (crawlInternal(node.object, state), node.computed && crawlInternal(node.property, state)) : isBinary(node) || isAssignmentExpression(node) ? (crawlInternal(node.left, state), crawlInternal(node.right, state)) : isCallExpression(node) || isOptionalCallExpression(node) ? (state.hasCall = !0, crawlInternal(node.callee, state)) : isFunction(node) ? state.hasFunction = !0 : isIdentifier(node) && (state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee)), state) : state;
				}
				function crawl(node) {
					return crawlInternal(node, {
						hasCall: !1,
						hasFunction: !1,
						hasHelper: !1
					});
				}
				function isHelper(node) {
					return !!node && (isMemberExpression(node) ? isHelper(node.object) || isHelper(node.property) : isIdentifier(node) ? "require" === node.name || 95 === node.name.charCodeAt(0) : isCallExpression(node) ? isHelper(node.callee) : !(!isBinary(node) && !isAssignmentExpression(node)) && (isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right)));
				}
				function isType(node) {
					return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);
				}
				const nodes = exports$1.nodes = {
					AssignmentExpression(node) {
						const state = crawl(node.right);
						if (state.hasCall && state.hasHelper || state.hasFunction) return state.hasFunction ? 3 : 2;
					},
					SwitchCase: (node, parent) => (node.consequent.length || parent.cases[0] === node ? 1 : 0) | (node.consequent.length || parent.cases[parent.cases.length - 1] !== node ? 0 : 2),
					LogicalExpression(node) {
						if (isFunction(node.left) || isFunction(node.right)) return 2;
					},
					Literal(node) {
						if (isStringLiteral(node) && "use strict" === node.value) return 2;
					},
					CallExpression(node) {
						if (isFunction(node.callee) || isHelper(node)) return 3;
					},
					OptionalCallExpression(node) {
						if (isFunction(node.callee)) return 3;
					},
					VariableDeclaration(node) {
						for (let i = 0; i < node.declarations.length; i++) {
							const declar = node.declarations[i];
							let enabled = isHelper(declar.id) && !isType(declar.init);
							if (!enabled && declar.init) {
								const state = crawl(declar.init);
								enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
							}
							if (enabled) return 3;
						}
					},
					IfStatement(node) {
						if (isBlockStatement(node.consequent)) return 3;
					}
				};
				nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
					if (parent.properties[0] === node) return 1;
				}, nodes.ObjectTypeCallProperty = function(node, parent) {
					var _parent$properties;
					if (parent.callProperties[0] === node && (null == (_parent$properties = parent.properties) || !_parent$properties.length)) return 1;
				}, nodes.ObjectTypeIndexer = function(node, parent) {
					var _parent$properties2, _parent$callPropertie;
					if (!(parent.indexers[0] !== node || null != (_parent$properties2 = parent.properties) && _parent$properties2.length || null != (_parent$callPropertie = parent.callProperties) && _parent$callPropertie.length)) return 1;
				}, nodes.ObjectTypeInternalSlot = function(node, parent) {
					var _parent$properties3, _parent$callPropertie2, _parent$indexers;
					if (!(parent.internalSlots[0] !== node || null != (_parent$properties3 = parent.properties) && _parent$properties3.length || null != (_parent$callPropertie2 = parent.callProperties) && _parent$callPropertie2.length || null != (_parent$indexers = parent.indexers) && _parent$indexers.length)) return 1;
				}, [
					["Function", !0],
					["Class", !0],
					["Loop", !0],
					["LabeledStatement", !0],
					["SwitchStatement", !0],
					["TryStatement", !0]
				].forEach(function([type$1, amounts]) {
					[type$1].concat(FLIPPED_ALIAS_KEYS[type$1] || []).forEach(function(type$2) {
						const ret = amounts ? 3 : 0;
						nodes[type$2] = () => ret;
					});
				});
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/printer.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _buffer = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/buffer.js"), n = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _tokenMap = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/token-map.js"), generatorFunctions = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/index.js");
				const { isExpression, isFunction, isStatement, isClassBody, isTSInterfaceBody, isTSEnumDeclaration } = _t, SCIENTIFIC_NOTATION = /e/i, ZERO_DECIMAL_INTEGER = /\.0+$/, HAS_NEWLINE = /[\n\r\u2028\u2029]/, HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\n\r\u2028\u2029]|\*\//;
				function commentIsNewline(c) {
					return "CommentLine" === c.type || HAS_NEWLINE.test(c.value);
				}
				const { needsParens } = n;
				class Printer {
					constructor(format, map, tokens, originalCode) {
						this.inForStatementInit = !1, this.tokenContext = 0, this._tokens = null, this._originalCode = null, this._currentNode = null, this._indent = 0, this._indentRepeat = 0, this._insideAux = !1, this._noLineTerminator = !1, this._noLineTerminatorAfterNode = null, this._printAuxAfterOnNextUserNode = !1, this._printedComments = new Set(), this._endsWithInteger = !1, this._endsWithWord = !1, this._endsWithDiv = !1, this._lastCommentLine = 0, this._endsWithInnerRaw = !1, this._indentInnerComments = !0, this.tokenMap = null, this._boundGetRawIdentifier = this._getRawIdentifier.bind(this), this._printSemicolonBeforeNextNode = -1, this._printSemicolonBeforeNextToken = -1, this.format = format, this._tokens = tokens, this._originalCode = originalCode, this._indentRepeat = format.indent.style.length, this._inputMap = null == map ? void 0 : map._inputMap, this._buf = new _buffer.default(map, format.indent.style[0]);
					}
					enterForStatementInit() {
						return this.inForStatementInit ? () => {} : (this.inForStatementInit = !0, () => {
							this.inForStatementInit = !1;
						});
					}
					enterDelimited() {
						const oldInForStatementInit = this.inForStatementInit, oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
						return !1 === oldInForStatementInit && null === oldNoLineTerminatorAfterNode ? () => {} : (this.inForStatementInit = !1, this._noLineTerminatorAfterNode = null, () => {
							this.inForStatementInit = oldInForStatementInit, this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;
						});
					}
					generate(ast) {
						return this.format.preserveFormat && (this.tokenMap = new _tokenMap.TokenMap(ast, this._tokens, this._originalCode)), this.print(ast), this._maybeAddAuxComment(), this._buf.get();
					}
					indent() {
						const { format } = this;
						format.preserveFormat || format.compact || format.concise || this._indent++;
					}
					dedent() {
						const { format } = this;
						format.preserveFormat || format.compact || format.concise || this._indent--;
					}
					semicolon(force = !1) {
						if (this._maybeAddAuxComment(), force) return this._appendChar(59), void (this._noLineTerminator = !1);
						if (this.tokenMap) {
							const node = this._currentNode;
							if (null != node.start && null != node.end) {
								if (!this.tokenMap.endMatches(node, ";")) return void (this._printSemicolonBeforeNextNode = this._buf.getCurrentLine());
								const indexes = this.tokenMap.getIndexes(this._currentNode);
								this._catchUpTo(this._tokens[indexes[indexes.length - 1]].loc.start);
							}
						}
						this._queue(59), this._noLineTerminator = !1;
					}
					rightBrace(node) {
						this.format.minified && this._buf.removeLastSemicolon(), this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
					}
					rightParens(node) {
						this.sourceWithOffset("end", node.loc, -1), this.tokenChar(41);
					}
					space(force = !1) {
						const { format } = this;
						if (!format.compact && !format.preserveFormat) {
							if (force) this._space();
							else if (this._buf.hasContent()) {
								const lastCp = this.getLastChar();
								32 !== lastCp && 10 !== lastCp && this._space();
							}
						}
					}
					word(str, noLineTerminatorAfter = !1) {
						this.tokenContext = 0, this._maybePrintInnerComments(str), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str), (this._endsWithWord || this._endsWithDiv && 47 === str.charCodeAt(0)) && this._space(), this._append(str, !1), this._endsWithWord = !0, this._noLineTerminator = noLineTerminatorAfter;
					}
					number(str, number) {
						this.word(str), this._endsWithInteger = Number.isInteger(number) && !function(str$1) {
							if (str$1.length > 2 && 48 === str$1.charCodeAt(0)) {
								const secondChar = str$1.charCodeAt(1);
								return 98 === secondChar || 111 === secondChar || 120 === secondChar;
							}
							return !1;
						}(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && 46 !== str.charCodeAt(str.length - 1);
					}
					token(str, maybeNewline = !1, occurrenceCount = 0) {
						this.tokenContext = 0, this._maybePrintInnerComments(str, occurrenceCount), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str, occurrenceCount);
						const lastChar = this.getLastChar(), strFirst = str.charCodeAt(0);
						(33 === lastChar && ("--" === str || 61 === strFirst) || 43 === strFirst && 43 === lastChar || 45 === strFirst && 45 === lastChar || 46 === strFirst && this._endsWithInteger) && this._space(), this._append(str, maybeNewline), this._noLineTerminator = !1;
					}
					tokenChar(char) {
						this.tokenContext = 0;
						const str = String.fromCharCode(char);
						this._maybePrintInnerComments(str), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str);
						const lastChar = this.getLastChar();
						(43 === char && 43 === lastChar || 45 === char && 45 === lastChar || 46 === char && this._endsWithInteger) && this._space(), this._appendChar(char), this._noLineTerminator = !1;
					}
					newline(i = 1, force) {
						if (!(i <= 0)) {
							if (!force) {
								if (this.format.retainLines || this.format.compact) return;
								if (this.format.concise) return void this.space();
							}
							i > 2 && (i = 2), i -= this._buf.getNewlineCount();
							for (let j = 0; j < i; j++) this._newline();
						}
					}
					endsWith(char) {
						return this.getLastChar() === char;
					}
					getLastChar() {
						return this._buf.getLastChar();
					}
					endsWithCharAndNewline() {
						return this._buf.endsWithCharAndNewline();
					}
					removeTrailingNewline() {
						this._buf.removeTrailingNewline();
					}
					exactSource(loc, cb) {
						loc ? (this._catchUp("start", loc), this._buf.exactSource(loc, cb)) : cb();
					}
					source(prop, loc) {
						loc && (this._catchUp(prop, loc), this._buf.source(prop, loc));
					}
					sourceWithOffset(prop, loc, columnOffset) {
						loc && !this.format.preserveFormat && (this._catchUp(prop, loc), this._buf.sourceWithOffset(prop, loc, columnOffset));
					}
					sourceIdentifierName(identifierName, pos) {
						if (!this._buf._canMarkIdName) return;
						const sourcePosition = this._buf._sourcePosition;
						sourcePosition.identifierNamePos = pos, sourcePosition.identifierName = identifierName;
					}
					_space() {
						this._queue(32);
					}
					_newline() {
						this._queue(10);
					}
					_catchUpToCurrentToken(str, occurrenceCount = 0) {
						const token = this.tokenMap.findMatching(this._currentNode, str, occurrenceCount);
						token && this._catchUpTo(token.loc.start), -1 !== this._printSemicolonBeforeNextToken && this._printSemicolonBeforeNextToken === this._buf.getCurrentLine() && (this._buf.appendChar(59), this._endsWithWord = !1, this._endsWithInteger = !1, this._endsWithDiv = !1), this._printSemicolonBeforeNextToken = -1, this._printSemicolonBeforeNextNode = -1;
					}
					_append(str, maybeNewline) {
						this._maybeIndent(str.charCodeAt(0)), this._buf.append(str, maybeNewline), this._endsWithWord = !1, this._endsWithInteger = !1, this._endsWithDiv = !1;
					}
					_appendChar(char) {
						this._maybeIndent(char), this._buf.appendChar(char), this._endsWithWord = !1, this._endsWithInteger = !1, this._endsWithDiv = !1;
					}
					_queue(char) {
						this._maybeIndent(char), this._buf.queue(char), this._endsWithWord = !1, this._endsWithInteger = !1;
					}
					_maybeIndent(firstChar) {
						this._indent && 10 !== firstChar && this.endsWith(10) && this._buf.queueIndentation(this._getIndent());
					}
					_shouldIndent(firstChar) {
						if (this._indent && 10 !== firstChar && this.endsWith(10)) return !0;
					}
					catchUp(line) {
						if (!this.format.retainLines) return;
						const count = line - this._buf.getCurrentLine();
						for (let i = 0; i < count; i++) this._newline();
					}
					_catchUp(prop, loc) {
						const { format } = this;
						if (!format.preserveFormat) return void (format.retainLines && null != loc && loc[prop] && this.catchUp(loc[prop].line));
						const pos = null == loc ? void 0 : loc[prop];
						null != pos && this._catchUpTo(pos);
					}
					_catchUpTo({ line, column, index }) {
						const count = line - this._buf.getCurrentLine();
						if (count > 0 && this._noLineTerminator) return;
						for (let i = 0; i < count; i++) this._newline();
						const spacesCount = count > 0 ? column : column - this._buf.getCurrentColumn();
						if (spacesCount > 0) {
							const spaces = this._originalCode ? this._originalCode.slice(index - spacesCount, index).replace(/[^\t\x0B\f \xA0\u1680\u2000-\u200A\u202F\u205F\u3000\uFEFF]/gu, " ") : " ".repeat(spacesCount);
							this._append(spaces, !1);
						}
					}
					_getIndent() {
						return this._indentRepeat * this._indent;
					}
					printTerminatorless(node) {
						this._noLineTerminator = !0, this.print(node);
					}
					print(node, noLineTerminatorAfter, trailingCommentsLineOffset) {
						var _node$extra, _node$leadingComments, _node$leadingComments2;
						if (!node) return;
						this._endsWithInnerRaw = !1;
						const nodeType = node.type, format = this.format, oldConcise = format.concise;
						node._compact && (format.concise = !0);
						const printMethod = this[nodeType];
						if (void 0 === printMethod) throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
						const parent = this._currentNode;
						this._currentNode = node, this.tokenMap && (this._printSemicolonBeforeNextToken = this._printSemicolonBeforeNextNode);
						const oldInAux = this._insideAux;
						this._insideAux = null == node.loc, this._maybeAddAuxComment(this._insideAux && !oldInAux);
						const parenthesized = null == (_node$extra = node.extra) ? void 0 : _node$extra.parenthesized;
						let shouldPrintParens = parenthesized && format.preserveFormat || parenthesized && format.retainFunctionParens && "FunctionExpression" === nodeType || needsParens(node, parent, this.tokenContext, this.inForStatementInit, format.preserveFormat ? this._boundGetRawIdentifier : void 0);
						if (!shouldPrintParens && parenthesized && null != (_node$leadingComments = node.leadingComments) && _node$leadingComments.length && "CommentBlock" === node.leadingComments[0].type) switch (null == parent ? void 0 : parent.type) {
							case "ExpressionStatement":
							case "VariableDeclarator":
							case "AssignmentExpression":
							case "ReturnStatement": break;
							case "CallExpression":
							case "OptionalCallExpression":
							case "NewExpression": if (parent.callee !== node) break;
							default: shouldPrintParens = !0;
						}
						let oldNoLineTerminatorAfterNode, oldInForStatementInitWasTrue, indentParenthesized = !1;
						var _node$trailingComment;
						(!shouldPrintParens && this._noLineTerminator && (null != (_node$leadingComments2 = node.leadingComments) && _node$leadingComments2.some(commentIsNewline) || this.format.retainLines && node.loc && node.loc.start.line > this._buf.getCurrentLine()) && (shouldPrintParens = !0, indentParenthesized = !0), shouldPrintParens) || (noLineTerminatorAfter || (noLineTerminatorAfter = parent && this._noLineTerminatorAfterNode === parent && n.isLastChild(parent, node)), noLineTerminatorAfter && (null != (_node$trailingComment = node.trailingComments) && _node$trailingComment.some(commentIsNewline) ? isExpression(node) && (shouldPrintParens = !0) : (oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode = node)));
						shouldPrintParens && (this.tokenChar(40), indentParenthesized && this.indent(), this._endsWithInnerRaw = !1, this.inForStatementInit && (oldInForStatementInitWasTrue = !0, this.inForStatementInit = !1), oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode = null), this._lastCommentLine = 0, this._printLeadingComments(node, parent);
						const loc = "Program" === nodeType || "File" === nodeType ? null : node.loc;
						this.exactSource(loc, printMethod.bind(this, node, parent)), shouldPrintParens ? (this._printTrailingComments(node, parent), indentParenthesized && (this.dedent(), this.newline()), this.tokenChar(41), this._noLineTerminator = noLineTerminatorAfter, oldInForStatementInitWasTrue && (this.inForStatementInit = !0)) : noLineTerminatorAfter && !this._noLineTerminator ? (this._noLineTerminator = !0, this._printTrailingComments(node, parent)) : this._printTrailingComments(node, parent, trailingCommentsLineOffset), this._currentNode = parent, format.concise = oldConcise, this._insideAux = oldInAux, void 0 !== oldNoLineTerminatorAfterNode && (this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode), this._endsWithInnerRaw = !1;
					}
					_maybeAddAuxComment(enteredPositionlessNode) {
						enteredPositionlessNode && this._printAuxBeforeComment(), this._insideAux || this._printAuxAfterComment();
					}
					_printAuxBeforeComment() {
						if (this._printAuxAfterOnNextUserNode) return;
						this._printAuxAfterOnNextUserNode = !0;
						const comment = this.format.auxiliaryCommentBefore;
						comment && this._printComment({
							type: "CommentBlock",
							value: comment
						}, 0);
					}
					_printAuxAfterComment() {
						if (!this._printAuxAfterOnNextUserNode) return;
						this._printAuxAfterOnNextUserNode = !1;
						const comment = this.format.auxiliaryCommentAfter;
						comment && this._printComment({
							type: "CommentBlock",
							value: comment
						}, 0);
					}
					getPossibleRaw(node) {
						const extra = node.extra;
						if (null != (null == extra ? void 0 : extra.raw) && null != extra.rawValue && node.value === extra.rawValue) return extra.raw;
					}
					printJoin(nodes, statement, indent, separator, printTrailingSeparator, addNewlines, iterator, trailingCommentsLineOffset) {
						if (null == nodes || !nodes.length) return;
						if (null == indent && this.format.retainLines) {
							var _nodes$0$loc;
							const startLine = null == (_nodes$0$loc = nodes[0].loc) ? void 0 : _nodes$0$loc.start.line;
							null != startLine && startLine !== this._buf.getCurrentLine() && (indent = !0);
						}
						indent && this.indent();
						const newlineOpts = {
							addNewlines,
							nextNodeStartLine: 0
						}, boundSeparator = null == separator ? void 0 : separator.bind(this), len = nodes.length;
						for (let i = 0; i < len; i++) {
							const node = nodes[i];
							var _node$trailingComment2;
							if (node) {
								if (statement && this._printNewline(0 === i, newlineOpts), this.print(node, void 0, trailingCommentsLineOffset || 0), iterator?.(node, i), null != boundSeparator && (i < len - 1 ? boundSeparator(i, !1) : printTrailingSeparator && boundSeparator(i, !0)), statement) if (null != (_node$trailingComment2 = node.trailingComments) && _node$trailingComment2.length || (this._lastCommentLine = 0), i + 1 === len) this.newline(1);
								else {
									var _nextNode$loc;
									const nextNode = nodes[i + 1];
									newlineOpts.nextNodeStartLine = (null == (_nextNode$loc = nextNode.loc) ? void 0 : _nextNode$loc.start.line) || 0, this._printNewline(!0, newlineOpts);
								}
							}
						}
						indent && this.dedent();
					}
					printAndIndentOnComments(node) {
						const indent = node.leadingComments && node.leadingComments.length > 0;
						indent && this.indent(), this.print(node), indent && this.dedent();
					}
					printBlock(parent) {
						const node = parent.body;
						"EmptyStatement" !== node.type && this.space(), this.print(node);
					}
					_printTrailingComments(node, parent, lineOffset) {
						const { innerComments, trailingComments } = node;
						null != innerComments && innerComments.length && this._printComments(2, innerComments, node, parent, lineOffset), null != trailingComments && trailingComments.length && this._printComments(2, trailingComments, node, parent, lineOffset);
					}
					_printLeadingComments(node, parent) {
						const comments = node.leadingComments;
						null != comments && comments.length && this._printComments(0, comments, node, parent);
					}
					_maybePrintInnerComments(nextTokenStr, nextTokenOccurrenceCount) {
						var _this$tokenMap;
						this._endsWithInnerRaw && this.printInnerComments(null == (_this$tokenMap = this.tokenMap) ? void 0 : _this$tokenMap.findMatching(this._currentNode, nextTokenStr, nextTokenOccurrenceCount));
						this._endsWithInnerRaw = !0, this._indentInnerComments = !0;
					}
					printInnerComments(nextToken) {
						const node = this._currentNode, comments = node.innerComments;
						if (null == comments || !comments.length) return;
						const hasSpace = this.endsWith(32), indent = this._indentInnerComments, printedCommentsCount = this._printedComments.size;
						indent && this.indent(), this._printComments(1, comments, node, void 0, void 0, nextToken), hasSpace && printedCommentsCount !== this._printedComments.size && this.space(), indent && this.dedent();
					}
					noIndentInnerCommentsHere() {
						this._indentInnerComments = !1;
					}
					printSequence(nodes, indent, trailingCommentsLineOffset, addNewlines) {
						this.printJoin(nodes, !0, null != indent && indent, void 0, void 0, addNewlines, void 0, trailingCommentsLineOffset);
					}
					printList(items, printTrailingSeparator, statement, indent, separator, iterator) {
						this.printJoin(items, statement, indent, null != separator ? separator : commaSeparator, printTrailingSeparator, void 0, iterator);
					}
					shouldPrintTrailingComma(listEnd) {
						if (!this.tokenMap) return null;
						const listEndIndex = this.tokenMap.findLastIndex(this._currentNode, (token) => this.tokenMap.matchesOriginal(token, listEnd));
						return listEndIndex <= 0 ? null : this.tokenMap.matchesOriginal(this._tokens[listEndIndex - 1], ",");
					}
					_printNewline(newLine, opts) {
						const format = this.format;
						if (format.retainLines || format.compact) return;
						if (format.concise) return void this.space();
						if (!newLine) return;
						const startLine = opts.nextNodeStartLine, lastCommentLine = this._lastCommentLine;
						if (startLine > 0 && lastCommentLine > 0) {
							const offset = startLine - lastCommentLine;
							if (offset >= 0) return void this.newline(offset || 1);
						}
						this._buf.hasContent() && this.newline(1);
					}
					_shouldPrintComment(comment, nextToken) {
						if (comment.ignore) return 0;
						if (this._printedComments.has(comment)) return 0;
						if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)) return 2;
						if (nextToken && this.tokenMap) {
							const commentTok = this.tokenMap.find(this._currentNode, (token) => token.value === comment.value);
							if (commentTok && commentTok.start > nextToken.start) return 2;
						}
						return this._printedComments.add(comment), this.format.shouldPrintComment(comment.value) ? 1 : 0;
					}
					_printComment(comment, skipNewLines) {
						const noLineTerminator = this._noLineTerminator, isBlockComment = "CommentBlock" === comment.type, printNewLines = isBlockComment && 1 !== skipNewLines && !this._noLineTerminator;
						printNewLines && this._buf.hasContent() && 2 !== skipNewLines && this.newline(1);
						const lastCharCode = this.getLastChar();
						let val;
						if (91 !== lastCharCode && 123 !== lastCharCode && 40 !== lastCharCode && this.space(), isBlockComment) {
							if (val = `/*${comment.value}*/`, this.format.indent.adjustMultilineComment) {
								var _comment$loc;
								const offset = null == (_comment$loc = comment.loc) ? void 0 : _comment$loc.start.column;
								if (offset) {
									const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
									val = val.replace(newlineRegex, "\n");
								}
								if (this.format.concise) val = val.replace(/\n(?!$)/g, "\n");
								else {
									let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
									(this._shouldIndent(47) || this.format.retainLines) && (indentSize += this._getIndent()), val = val.replace(/\n(?!$)/g, `\n${" ".repeat(indentSize)}`);
								}
							}
						} else val = noLineTerminator ? `/*${comment.value}*/` : `//${comment.value}`;
						if (this._endsWithDiv && this._space(), this.tokenMap) {
							const { _printSemicolonBeforeNextToken, _printSemicolonBeforeNextNode } = this;
							this._printSemicolonBeforeNextToken = -1, this._printSemicolonBeforeNextNode = -1, this.source("start", comment.loc), this._append(val, isBlockComment), this._printSemicolonBeforeNextNode = _printSemicolonBeforeNextNode, this._printSemicolonBeforeNextToken = _printSemicolonBeforeNextToken;
						} else this.source("start", comment.loc), this._append(val, isBlockComment);
						isBlockComment || noLineTerminator || this.newline(1, !0), printNewLines && 3 !== skipNewLines && this.newline(1);
					}
					_printComments(type$1, comments, node, parent, lineOffset = 0, nextToken) {
						const nodeLoc = node.loc, len = comments.length;
						let hasLoc = !!nodeLoc;
						const nodeStartLine = hasLoc ? nodeLoc.start.line : 0, nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
						let lastLine = 0, leadingCommentNewline = 0;
						const maybeNewline = this._noLineTerminator ? function() {} : this.newline.bind(this);
						for (let i = 0; i < len; i++) {
							const comment = comments[i], shouldPrint = this._shouldPrintComment(comment, nextToken);
							if (2 === shouldPrint) {
								hasLoc = !1;
								break;
							}
							if (hasLoc && comment.loc && 1 === shouldPrint) {
								const commentStartLine = comment.loc.start.line, commentEndLine = comment.loc.end.line;
								if (0 === type$1) {
									let offset = 0;
									0 === i ? !this._buf.hasContent() || "CommentLine" !== comment.type && commentStartLine === commentEndLine || (offset = leadingCommentNewline = 1) : offset = commentStartLine - lastLine, lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i + 1 === len && (maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline)), lastLine = nodeStartLine);
								} else if (1 === type$1) {
									const offset = commentStartLine - (0 === i ? nodeStartLine : lastLine);
									lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i + 1 === len && (maybeNewline(Math.min(1, nodeEndLine - lastLine)), lastLine = nodeEndLine);
								} else {
									const offset = commentStartLine - (0 === i ? nodeEndLine - lineOffset : lastLine);
									lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1);
								}
							} else {
								if (hasLoc = !1, 1 !== shouldPrint) continue;
								if (1 === len) {
									const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value), shouldSkipNewline = singleLine && !isStatement(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);
									0 === type$1 ? this._printComment(comment, shouldSkipNewline && "ObjectExpression" !== node.type || singleLine && isFunction(parent, { body: node }) ? 1 : 0) : shouldSkipNewline && 2 === type$1 ? this._printComment(comment, 1) : this._printComment(comment, 0);
								} else 1 !== type$1 || "ObjectExpression" === node.type && node.properties.length > 1 || "ClassBody" === node.type || "TSInterfaceBody" === node.type ? this._printComment(comment, 0) : this._printComment(comment, 0 === i ? 2 : i === len - 1 ? 3 : 0);
							}
						}
						2 === type$1 && hasLoc && lastLine && (this._lastCommentLine = lastLine);
					}
				}
				Object.assign(Printer.prototype, generatorFunctions), Printer.prototype.Noop = function() {};
				exports$1.default = Printer;
				function commaSeparator(occurrenceCount, last) {
					this.token(",", !1, occurrenceCount), last || this.space();
				}
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/source-map.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _genMapping = __webpack_require__$1("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"), _traceMapping = __webpack_require__$1("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js");
				exports$1.default = class {
					constructor(opts, code) {
						var _opts$sourceFileName;
						this._map = void 0, this._rawMappings = void 0, this._sourceFileName = void 0, this._lastGenLine = 0, this._lastSourceLine = 0, this._lastSourceColumn = 0, this._inputMap = void 0;
						const map = this._map = new _genMapping.GenMapping({ sourceRoot: opts.sourceRoot });
						if (this._sourceFileName = null == (_opts$sourceFileName = opts.sourceFileName) ? void 0 : _opts$sourceFileName.replace(/\\/g, "/"), this._rawMappings = void 0, opts.inputSourceMap) {
							this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
							const resolvedSources = this._inputMap.resolvedSources;
							if (resolvedSources.length) for (let i = 0; i < resolvedSources.length; i++) {
								var _this$_inputMap$sourc;
								(0, _genMapping.setSourceContent)(map, resolvedSources[i], null == (_this$_inputMap$sourc = this._inputMap.sourcesContent) ? void 0 : _this$_inputMap$sourc[i]);
							}
						}
						if ("string" != typeof code || opts.inputSourceMap) {
							if ("object" == typeof code) for (const sourceFileName of Object.keys(code)) (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
						} else (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
					}
					get() {
						return (0, _genMapping.toEncodedMap)(this._map);
					}
					getDecoded() {
						return (0, _genMapping.toDecodedMap)(this._map);
					}
					getRawMappings() {
						return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
					}
					mark(generated, line, column, identifierName, identifierNamePos, filename) {
						var _originalMapping;
						let originalMapping;
						if (this._rawMappings = void 0, null != line) if (this._inputMap) {
							if (originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, {
								line,
								column
							}), !originalMapping.name && identifierNamePos) {
								const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
								originalIdentifierMapping.name && (identifierName = originalIdentifierMapping.name);
							}
						} else originalMapping = {
							source: (null == filename ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName,
							line,
							column
						};
						(0, _genMapping.maybeAddMapping)(this._map, {
							name: identifierName,
							generated,
							source: null == (_originalMapping = originalMapping) ? void 0 : _originalMapping.source,
							original: originalMapping
						});
					}
				};
			},
			"./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/token-map.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.TokenMap = void 0;
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { traverseFast, VISITOR_KEYS } = _t;
				exports$1.TokenMap = class {
					constructor(ast, tokens, source) {
						this._tokens = void 0, this._source = void 0, this._nodesToTokenIndexes = new Map(), this._nodesOccurrencesCountCache = new Map(), this._tokensCache = new Map(), this._tokens = tokens, this._source = source, traverseFast(ast, (node) => {
							const indexes = this._getTokensIndexesOfNode(node);
							indexes.length > 0 && this._nodesToTokenIndexes.set(node, indexes);
						}), this._tokensCache = null;
					}
					has(node) {
						return this._nodesToTokenIndexes.has(node);
					}
					getIndexes(node) {
						return this._nodesToTokenIndexes.get(node);
					}
					find(node, condition) {
						const indexes = this._nodesToTokenIndexes.get(node);
						if (indexes) for (let k$2 = 0; k$2 < indexes.length; k$2++) {
							const index = indexes[k$2], tok = this._tokens[index];
							if (condition(tok, index)) return tok;
						}
						return null;
					}
					findLastIndex(node, condition) {
						const indexes = this._nodesToTokenIndexes.get(node);
						if (indexes) for (let k$2 = indexes.length - 1; k$2 >= 0; k$2--) {
							const index = indexes[k$2];
							if (condition(this._tokens[index], index)) return index;
						}
						return -1;
					}
					findMatching(node, test, occurrenceCount = 0) {
						const indexes = this._nodesToTokenIndexes.get(node);
						if (indexes) {
							let i = 0;
							const count = occurrenceCount;
							if (count > 1) {
								const cache = this._nodesOccurrencesCountCache.get(node);
								cache && cache.test === test && cache.count < count && (i = cache.i + 1, occurrenceCount -= cache.count + 1);
							}
							for (; i < indexes.length; i++) {
								const tok = this._tokens[indexes[i]];
								if (this.matchesOriginal(tok, test)) {
									if (0 === occurrenceCount) return count > 0 && this._nodesOccurrencesCountCache.set(node, {
										test,
										count,
										i
									}), tok;
									occurrenceCount--;
								}
							}
						}
						return null;
					}
					matchesOriginal(token, test) {
						return token.end - token.start === test.length && (null != token.value ? token.value === test : this._source.startsWith(test, token.start));
					}
					startMatches(node, test) {
						const indexes = this._nodesToTokenIndexes.get(node);
						if (!indexes) return !1;
						const tok = this._tokens[indexes[0]];
						return tok.start === node.start && this.matchesOriginal(tok, test);
					}
					endMatches(node, test) {
						const indexes = this._nodesToTokenIndexes.get(node);
						if (!indexes) return !1;
						const tok = this._tokens[indexes[indexes.length - 1]];
						return tok.end === node.end && this.matchesOriginal(tok, test);
					}
					_getTokensIndexesOfNode(node) {
						if (null == node.start || null == node.end) return [];
						const { first, last } = this._findTokensOfNode(node, 0, this._tokens.length - 1);
						let low = first;
						const children = function* (node$1) {
							if ("TemplateLiteral" === node$1.type) {
								yield node$1.quasis[0];
								for (let i = 1; i < node$1.quasis.length; i++) yield node$1.expressions[i - 1], yield node$1.quasis[i];
								return;
							}
							const keys = VISITOR_KEYS[node$1.type];
							for (const key of keys) {
								const child$1 = node$1[key];
								child$1 && (Array.isArray(child$1) ? yield* child$1 : yield child$1);
							}
						}(node);
						"ExportNamedDeclaration" !== node.type && "ExportDefaultDeclaration" !== node.type || !node.declaration || "ClassDeclaration" !== node.declaration.type || children.next();
						const indexes = [];
						for (const child$1 of children) {
							if (null == child$1) continue;
							if (null == child$1.start || null == child$1.end) continue;
							const childTok = this._findTokensOfNode(child$1, low, last), high = childTok.first;
							for (let k$2 = low; k$2 < high; k$2++) indexes.push(k$2);
							low = childTok.last + 1;
						}
						for (let k$2 = low; k$2 <= last; k$2++) indexes.push(k$2);
						return indexes;
					}
					_findTokensOfNode(node, low, high) {
						const cached = this._tokensCache.get(node);
						if (cached) return cached;
						const first = this._findFirstTokenOfNode(node.start, low, high), last = this._findLastTokenOfNode(node.end, first, high);
						return this._tokensCache.set(node, {
							first,
							last
						}), {
							first,
							last
						};
					}
					_findFirstTokenOfNode(start, low, high) {
						for (; low <= high;) {
							const mid = high + low >> 1;
							if (start < this._tokens[mid].start) high = mid - 1;
							else {
								if (!(start > this._tokens[mid].start)) return mid;
								low = mid + 1;
							}
						}
						return low;
					}
					_findLastTokenOfNode(end, low, high) {
						for (; low <= high;) {
							const mid = high + low >> 1;
							if (end < this._tokens[mid].end) high = mid - 1;
							else {
								if (!(end > this._tokens[mid].end)) return mid;
								low = mid + 1;
							}
						}
						return high;
					}
				};
			},
			"./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(pathOrNode) {
					const node = pathOrNode.node || pathOrNode;
					if (isPureAnnotated(node)) return;
					addComment(node, "leading", PURE_ANNOTATION);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { addComment } = _t, PURE_ANNOTATION = "#__PURE__", isPureAnnotated = ({ leadingComments }) => !!leadingComments && leadingComments.some((comment) => /[@#]__PURE__/.test(comment.value));
			},
			"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.buildDecoratedClass = function(ref, path$9, elements, file) {
					const { node, scope } = path$9, initializeId = scope.generateUidIdentifier("initialize"), isDeclaration = node.id && path$9.isDeclaration(), isStrict = path$9.isInStrictMode(), { superClass } = node;
					node.type = "ClassDeclaration", node.id || (node.id = _core.types.cloneNode(ref));
					let superId;
					superClass && (superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super"), node.superClass = superId);
					const classDecorators = takeDecorators(node), definitions = _core.types.arrayExpression(elements.filter((element) => !element.node.abstract && "TSIndexSignature" !== element.node.type).map((path$10) => function(file$1, classRef, superRef, path$11) {
						const isMethod = path$11.isClassMethod();
						if (path$11.isPrivate()) throw path$11.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"} in decorated classes are not supported yet.`);
						if ("ClassAccessorProperty" === path$11.node.type) throw path$11.buildCodeFrameError("Accessor properties are not supported in 2018-09 decorator transform, please specify { \"version\": \"2021-12\" } instead.");
						if ("StaticBlock" === path$11.node.type) throw path$11.buildCodeFrameError("Static blocks are not supported in 2018-09 decorator transform, please specify { \"version\": \"2021-12\" } instead.");
						const { node: node$1, scope: scope$1 } = path$11;
						path$11.isTSDeclareMethod() || new _helperReplaceSupers.default({
							methodPath: path$11,
							objectRef: classRef,
							superRef,
							file: file$1,
							refToPreserve: classRef
						}).replace();
						const properties = [
							prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node$1) ? node$1.kind : "field")),
							prop("decorators", takeDecorators(node$1)),
							prop("static", node$1.static && _core.types.booleanLiteral(!0)),
							prop("key", getKey(node$1))
						].filter(Boolean);
						if (isMethod) path$11.ensureFunctionName ??= __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.ensureFunctionName, path$11.ensureFunctionName(!1), properties.push(prop("value", _core.types.toExpression(path$11.node)));
						else _core.types.isClassProperty(node$1) && node$1.value ? properties.push((key = "value", body = _core.template.statements.ast`return ${node$1.value}`, _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body)))) : properties.push(prop("value", scope$1.buildUndefinedNode()));
						var key, body;
						return path$11.remove(), _core.types.objectExpression(properties);
					}(file, node.id, superId, path$10))), wrapperCall = _core.template.expression.ast`
    ${function(file$1) {
						return file$1.addHelper("decorate");
					}(file)}(
      ${classDecorators || _core.types.nullLiteral()},
      function (${initializeId}, ${superClass ? _core.types.cloneNode(superId) : null}) {
        ${node}
        return { F: ${_core.types.cloneNode(node.id)}, d: ${definitions} };
      },
      ${superClass}
    )
  `;
					isStrict || wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
					let replacement = wrapperCall, classPathDesc = "arguments.1.body.body.0";
					isDeclaration && (replacement = _core.template.statement.ast`let ${ref} = ${wrapperCall}`, classPathDesc = "declarations.0.init." + classPathDesc);
					return {
						instanceNodes: [_core.template.statement.ast`
        ${_core.types.cloneNode(initializeId)}(this)
      `],
						wrapClass: (path$10) => (path$10.replaceWith(replacement), path$10.get(classPathDesc))
					};
				}, exports$1.hasDecorators = function(node) {
					return hasOwnDecorators(node) || node.body.body.some(hasOwnDecorators);
				}, exports$1.hasOwnDecorators = hasOwnDecorators;
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js");
				function hasOwnDecorators(node) {
					var _node$decorators;
					return !(null == (_node$decorators = node.decorators) || !_node$decorators.length);
				}
				function prop(key, value$1) {
					return value$1 ? _core.types.objectProperty(_core.types.identifier(key), value$1) : null;
				}
				function takeDecorators(node) {
					let result;
					return node.decorators && node.decorators.length > 0 && (result = _core.types.arrayExpression(node.decorators.map((decorator) => decorator.expression))), node.decorators = void 0, result;
				}
				function getKey(node) {
					return node.computed ? node.key : _core.types.isIdentifier(node.key) ? _core.types.stringLiteral(node.key.name) : _core.types.stringLiteral(String(node.key.value));
				}
			},
			"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function({ assertVersion, assumption }, { loose }, version$1, inherits$6) {
					var _assumption, _assumption2;
					assertVersion("2023-11" === version$1 || "2023-05" === version$1 || "2023-01" === version$1 ? "^7.21.0" : "2021-12" === version$1 ? "^7.16.0" : "^7.19.0");
					const VISITED = new WeakSet(), constantSuper = null != (_assumption = assumption("constantSuper")) ? _assumption : loose, ignoreFunctionLength = null != (_assumption2 = assumption("ignoreFunctionLength")) ? _assumption2 : loose, namedEvaluationVisitor = function(isAnonymous, visitor) {
						function handleComputedProperty(propertyPath, key, state) {
							switch (key.type) {
								case "StringLiteral": return _core.types.stringLiteral(key.value);
								case "NumericLiteral":
								case "BigIntLiteral": {
									const keyValue = key.value + "";
									return propertyPath.get("key").replaceWith(_core.types.stringLiteral(keyValue)), _core.types.stringLiteral(keyValue);
								}
								default: {
									const ref = propertyPath.scope.maybeGenerateMemoised(key);
									return propertyPath.get("key").replaceWith(_core.types.assignmentExpression("=", ref, createToPropertyKeyCall(state, key))), _core.types.cloneNode(ref);
								}
							}
						}
						return {
							VariableDeclarator(path$9, state) {
								const id = path$9.node.id;
								if ("Identifier" === id.type) {
									const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path$9.get("init"));
									if (isAnonymous(initializer)) {
										const name = id.name;
										visitor(initializer, state, name);
									}
								}
							},
							AssignmentExpression(path$9, state) {
								const id = path$9.node.left;
								if ("Identifier" === id.type) {
									const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path$9.get("right"));
									if (isAnonymous(initializer)) switch (path$9.node.operator) {
										case "=":
										case "&&=":
										case "||=":
										case "??=": visitor(initializer, state, id.name);
									}
								}
							},
							AssignmentPattern(path$9, state) {
								const id = path$9.node.left;
								if ("Identifier" === id.type) {
									const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path$9.get("right"));
									if (isAnonymous(initializer)) {
										const name = id.name;
										visitor(initializer, state, name);
									}
								}
							},
							ObjectExpression(path$9, state) {
								for (const propertyPath of path$9.get("properties")) {
									if (!propertyPath.isObjectProperty()) continue;
									const { node } = propertyPath, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(propertyPath.get("value"));
									if (isAnonymous(initializer)) {
										if (node.computed) {
											const ref = handleComputedProperty(propertyPath, id, state);
											visitor(initializer, state, ref);
										} else if (!isProtoKey(id)) if ("Identifier" === id.type) visitor(initializer, state, id.name);
										else {
											const className = _core.types.stringLiteral(id.value + "");
											visitor(initializer, state, className);
										}
									}
								}
							},
							ClassPrivateProperty(path$9, state) {
								const { node } = path$9, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path$9.get("value"));
								if (isAnonymous(initializer)) {
									const className = _core.types.stringLiteral("#" + node.key.id.name);
									visitor(initializer, state, className);
								}
							},
							ClassAccessorProperty(path$9, state) {
								const { node } = path$9, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path$9.get("value"));
								if (isAnonymous(initializer)) if (node.computed) {
									const ref = handleComputedProperty(path$9, id, state);
									visitor(initializer, state, ref);
								} else if ("Identifier" === id.type) visitor(initializer, state, id.name);
								else if ("PrivateName" === id.type) {
									const className = _core.types.stringLiteral("#" + id.id.name);
									visitor(initializer, state, className);
								} else {
									const className = _core.types.stringLiteral(id.value + "");
									visitor(initializer, state, className);
								}
							},
							ClassProperty(path$9, state) {
								const { node } = path$9, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path$9.get("value"));
								if (isAnonymous(initializer)) if (node.computed) {
									const ref = handleComputedProperty(path$9, id, state);
									visitor(initializer, state, ref);
								} else if ("Identifier" === id.type) visitor(initializer, state, id.name);
								else {
									const className = _core.types.stringLiteral(id.value + "");
									visitor(initializer, state, className);
								}
							}
						};
					}(isDecoratedAnonymousClassExpression, visitClass);
					function visitClass(path$9, state, className) {
						var _node$id;
						if (VISITED.has(path$9)) return;
						const { node } = path$9;
						className ??= null == (_node$id = node.id) ? void 0 : _node$id.name;
						const newPath = function(path$10, state$1, constantSuper$1, ignoreFunctionLength$1, className$1, propertyVisitor, version$2) {
							var _path$node$id, _classDecorationsId;
							const body = path$10.get("body.body"), classDecorators = path$10.node.decorators;
							let hasElementDecorators = !1, hasComputedKeysSideEffects = !1, elemDecsUseFnContext = !1;
							const generateClassPrivateUid = function(classPath) {
								let generator;
								return () => (generator || (generator = function(classPath$1) {
									const currentPrivateId = [], privateNames = new Set();
									return classPath$1.traverse({ PrivateName(path$11) {
										privateNames.add(path$11.node.id.name);
									} }), () => {
										let reifiedId;
										do
											incrementId(currentPrivateId), reifiedId = String.fromCharCode(...currentPrivateId);
										while (privateNames.has(reifiedId));
										return _core.types.privateName(_core.types.identifier(reifiedId));
									};
								}(classPath)), generator());
							}(path$10), classAssignments = [], scopeParent = path$10.scope.parent, memoiseExpression = (expression, hint, assignments) => {
								const localEvaluatedId = generateLetUidIdentifier(scopeParent, hint);
								return assignments.push(_core.types.assignmentExpression("=", localEvaluatedId, expression)), _core.types.cloneNode(localEvaluatedId);
							};
							let protoInitLocal, staticInitLocal;
							const classIdName = null == (_path$node$id = path$10.node.id) ? void 0 : _path$node$id.name, setClassName = "object" == typeof className$1 ? className$1 : void 0, usesFunctionContextOrYieldAwait = (decorator) => {
								try {
									return _core.types.traverseFast(decorator, (node$1) => {
										if (_core.types.isThisExpression(node$1) || _core.types.isSuper(node$1) || _core.types.isYieldExpression(node$1) || _core.types.isAwaitExpression(node$1) || _core.types.isIdentifier(node$1, { name: "arguments" }) || classIdName && _core.types.isIdentifier(node$1, { name: classIdName }) || _core.types.isMetaProperty(node$1) && "import" !== node$1.meta.name) throw null;
									}), !1;
								} catch (_unused2) {
									return !0;
								}
							}, instancePrivateNames = [];
							for (const element of body) {
								if (!isClassDecoratableElementPath(element)) continue;
								const elementNode = element.node;
								if (!elementNode.static && _core.types.isPrivateName(elementNode.key) && instancePrivateNames.push(elementNode.key.id.name), isDecorated(elementNode)) {
									switch (elementNode.type) {
										case "ClassProperty":
											propertyVisitor.ClassProperty(element, state$1);
											break;
										case "ClassPrivateProperty":
											propertyVisitor.ClassPrivateProperty(element, state$1);
											break;
										case "ClassAccessorProperty": if (propertyVisitor.ClassAccessorProperty(element, state$1), "2023-11" === version$2) break;
										default: if (elementNode.static) staticInitLocal ??= generateLetUidIdentifier(scopeParent, "initStatic");
										else protoInitLocal ??= generateLetUidIdentifier(scopeParent, "initProto");
									}
									hasElementDecorators = !0, elemDecsUseFnContext || (elemDecsUseFnContext = elementNode.decorators.some(usesFunctionContextOrYieldAwait));
								} else if ("ClassAccessorProperty" === elementNode.type) {
									propertyVisitor.ClassAccessorProperty(element, state$1);
									const { key, value: value$1, static: isStatic, computed } = elementNode, newId = generateClassPrivateUid(), newField = generateClassProperty(newId, value$1, isStatic), keyPath = element.get("key"), [newPath$1] = element.replaceWith(newField);
									let getterKey, setterKey;
									computed && !keyPath.isConstantExpression() ? (getterKey = (0, _misc.memoiseComputedKey)(createToPropertyKeyCall(state$1, key), scopeParent, scopeParent.generateUid("computedKey")), setterKey = _core.types.cloneNode(getterKey.left)) : (getterKey = _core.types.cloneNode(key), setterKey = _core.types.cloneNode(key)), assignIdForAnonymousClass(path$10, className$1), addProxyAccessorsFor(path$10.node.id, newPath$1, getterKey, setterKey, newId, computed, isStatic, version$2);
								}
								"computed" in element.node && element.node.computed && (hasComputedKeysSideEffects || (hasComputedKeysSideEffects = !scopeParent.isStatic(element.node.key)));
							}
							if (!classDecorators && !hasElementDecorators) return path$10.node.id || "string" != typeof className$1 || (path$10.node.id = _core.types.identifier(className$1)), void (setClassName && path$10.node.body.body.unshift(createStaticBlockFromExpressions([createSetFunctionNameCall(state$1, setClassName)])));
							const elementDecoratorInfo = [];
							let constructorPath;
							const decoratedPrivateMethods = new Set();
							let classInitLocal, classIdLocal, decoratorReceiverId = null;
							function handleDecorators(decorators) {
								let hasSideEffects = !1, usesFnContext = !1;
								const decoratorsThis = [];
								for (const decorator of decorators) {
									const { expression } = decorator;
									let object;
									if (("2023-11" === version$2 || "2023-05" === version$2) && _core.types.isMemberExpression(expression)) if (_core.types.isSuper(expression.object)) object = _core.types.thisExpression();
									else if (scopeParent.isStatic(expression.object)) object = _core.types.cloneNode(expression.object);
									else decoratorReceiverId ??= generateLetUidIdentifier(scopeParent, "obj"), object = _core.types.assignmentExpression("=", _core.types.cloneNode(decoratorReceiverId), expression.object), expression.object = _core.types.cloneNode(decoratorReceiverId);
									decoratorsThis.push(object), hasSideEffects || (hasSideEffects = !scopeParent.isStatic(expression)), usesFnContext || (usesFnContext = usesFunctionContextOrYieldAwait(decorator));
								}
								return {
									hasSideEffects,
									usesFnContext,
									decoratorsThis
								};
							}
							const willExtractSomeElemDecs = hasComputedKeysSideEffects || elemDecsUseFnContext || "2023-11" !== version$2;
							let classDecorationsId, lastInstancePrivateName, needsDeclaraionForClassBinding = !1, classDecorationsFlag = 0, classDecorations = [], computedKeyAssignments = [];
							if (classDecorators) {
								classInitLocal = generateLetUidIdentifier(scopeParent, "initClass"), needsDeclaraionForClassBinding = path$10.isClassDeclaration(), {id: classIdLocal, path: path$10} = function(path$11, className$2) {
									const id = path$11.node.id, scope = path$11.scope;
									if ("ClassDeclaration" === path$11.type) {
										const className$3 = id.name, varId = scope.generateUidIdentifierBasedOnNode(id), classId = _core.types.identifier(className$3);
										return scope.rename(className$3, varId.name), path$11.get("id").replaceWith(classId), {
											id: _core.types.cloneNode(varId),
											path: path$11
										};
									}
									{
										let varId;
										id ? (className$2 = id.name, varId = generateLetUidIdentifier(scope.parent, className$2), scope.rename(className$2, varId.name)) : varId = generateLetUidIdentifier(scope.parent, "string" == typeof className$2 ? className$2 : "decorated_class");
										const newClassExpr = _core.types.classExpression("string" == typeof className$2 ? _core.types.identifier(className$2) : null, path$11.node.superClass, path$11.node.body), [newPath$1] = path$11.replaceWith(_core.types.sequenceExpression([newClassExpr, varId]));
										return {
											id: _core.types.cloneNode(varId),
											path: newPath$1.get("expressions.0")
										};
									}
								}(path$10, className$1), path$10.node.decorators = null;
								const classDecsUsePrivateName = classDecorators.some(usesPrivateField), { hasSideEffects, usesFnContext, decoratorsThis } = handleDecorators(classDecorators), { haveThis, decs } = generateDecorationList(classDecorators, decoratorsThis, version$2);
								if (classDecorationsFlag = haveThis ? 1 : 0, classDecorations = decs, (usesFnContext || hasSideEffects && willExtractSomeElemDecs || classDecsUsePrivateName) && (classDecorationsId = memoiseExpression(_core.types.arrayExpression(classDecorations), "classDecs", classAssignments)), !hasElementDecorators) for (const element of path$10.get("body.body")) {
									const { node: node$1 } = element;
									if ("computed" in node$1 && node$1.computed) if (element.isClassProperty({ static: !0 })) {
										if (!element.get("key").isConstantExpression()) {
											const key = node$1.key, maybeAssignment = (0, _misc.memoiseComputedKey)(key, scopeParent, scopeParent.generateUid("computedKey"));
											null != maybeAssignment && (node$1.key = _core.types.cloneNode(maybeAssignment.left), computedKeyAssignments.push(maybeAssignment));
										}
									} else computedKeyAssignments.length > 0 && (prependExpressionsToComputedKey(computedKeyAssignments, element), computedKeyAssignments = []);
								}
							} else assignIdForAnonymousClass(path$10, className$1), classIdLocal = _core.types.cloneNode(path$10.node.id);
							let needsInstancePrivateBrandCheck = !1, fieldInitializerExpressions = [], staticFieldInitializerExpressions = [];
							if (hasElementDecorators) {
								if (protoInitLocal) {
									const protoInitCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [_core.types.thisExpression()]);
									fieldInitializerExpressions.push(protoInitCall);
								}
								for (const element of body) {
									if (!isClassDecoratableElementPath(element)) {
										staticFieldInitializerExpressions.length > 0 && element.isStaticBlock() && (prependExpressionsToStaticBlock(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []);
										continue;
									}
									const { node: node$1 } = element, decorators = node$1.decorators, hasDecorators = !(null == decorators || !decorators.length), isComputed = "computed" in node$1 && node$1.computed;
									let decoratorsArray, decoratorsHaveThis, name = "computedKey";
									if ("PrivateName" === node$1.key.type ? name = node$1.key.id.name : isComputed || "Identifier" !== node$1.key.type || (name = node$1.key.name), hasDecorators) {
										const { hasSideEffects, usesFnContext, decoratorsThis } = handleDecorators(decorators), { decs, haveThis } = generateDecorationList(decorators, decoratorsThis, version$2);
										decoratorsHaveThis = haveThis, decoratorsArray = 1 === decs.length ? decs[0] : _core.types.arrayExpression(decs), (usesFnContext || hasSideEffects && willExtractSomeElemDecs) && (decoratorsArray = memoiseExpression(decoratorsArray, name + "Decs", computedKeyAssignments));
									}
									if (isComputed && !element.get("key").isConstantExpression()) {
										const key$1 = node$1.key, maybeAssignment = (0, _misc.memoiseComputedKey)(hasDecorators ? createToPropertyKeyCall(state$1, key$1) : key$1, scopeParent, scopeParent.generateUid("computedKey"));
										null != maybeAssignment && (classDecorators && element.isClassProperty({ static: !0 }) ? (node$1.key = _core.types.cloneNode(maybeAssignment.left), computedKeyAssignments.push(maybeAssignment)) : node$1.key = maybeAssignment);
									}
									const { key, static: isStatic } = node$1, isPrivate = "PrivateName" === key.type, kind = getElementKind(element);
									let locals;
									if (isPrivate && !isStatic && (hasDecorators && (needsInstancePrivateBrandCheck = !0), !_core.types.isClassPrivateProperty(node$1) && lastInstancePrivateName || (lastInstancePrivateName = key)), element.isClassMethod({ kind: "constructor" }) && (constructorPath = element), hasDecorators) {
										let privateMethods, nameExpr;
										if (nameExpr = isComputed ? getComputedKeyMemoiser(element.get("key")) : "PrivateName" === key.type ? _core.types.stringLiteral(key.id.name) : "Identifier" === key.type ? _core.types.stringLiteral(key.name) : _core.types.cloneNode(key), kind === ACCESSOR) {
											const { value: value$1 } = element.node, params = "2023-11" === version$2 && isStatic ? [] : [_core.types.thisExpression()];
											value$1 && params.push(_core.types.cloneNode(value$1));
											const newId = generateClassPrivateUid(), newFieldInitId = generateLetUidIdentifier(scopeParent, `init_${name}`), newField = generateClassProperty(newId, _core.types.callExpression(_core.types.cloneNode(newFieldInitId), params), isStatic), [newPath$1] = element.replaceWith(newField);
											if (isPrivate) {
												privateMethods = extractProxyAccessorsFor(newId, version$2);
												const getId = generateLetUidIdentifier(scopeParent, `get_${name}`), setId = generateLetUidIdentifier(scopeParent, `set_${name}`);
												addCallAccessorsFor(version$2, newPath$1, key, getId, setId, isStatic), locals = [
													newFieldInitId,
													getId,
													setId
												];
											} else assignIdForAnonymousClass(path$10, className$1), addProxyAccessorsFor(path$10.node.id, newPath$1, _core.types.cloneNode(key), _core.types.isAssignmentExpression(key) ? _core.types.cloneNode(key.left) : _core.types.cloneNode(key), newId, isComputed, isStatic, version$2), locals = [newFieldInitId];
										} else if (kind === FIELD) {
											const initId = generateLetUidIdentifier(scopeParent, `init_${name}`), valuePath = element.get("value"), args = "2023-11" === version$2 && isStatic ? [] : [_core.types.thisExpression()];
											valuePath.node && args.push(valuePath.node), valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId), args)), locals = [initId], isPrivate && (privateMethods = extractProxyAccessorsFor(key, version$2));
										} else if (isPrivate) {
											const callId = generateLetUidIdentifier(scopeParent, `call_${name}`);
											locals = [callId];
											if (new _helperReplaceSupers.default({
												constantSuper: constantSuper$1,
												methodPath: element,
												objectRef: classIdLocal,
												superRef: path$10.node.superClass,
												file: state$1.file,
												refToPreserve: classIdLocal
											}).replace(), privateMethods = [createFunctionExpressionFromPrivateMethod(element.node)], kind === GETTER || kind === SETTER) movePrivateAccessor(element, _core.types.cloneNode(key), _core.types.cloneNode(callId), isStatic);
											else {
												const node$2 = element.node;
												path$10.node.body.body.unshift(_core.types.classPrivateProperty(key, _core.types.cloneNode(callId), [], node$2.static)), decoratedPrivateMethods.add(key.id.name), element.remove();
											}
										}
										elementDecoratorInfo.push({
											kind,
											decoratorsArray,
											decoratorsHaveThis,
											name: nameExpr,
											isStatic,
											privateMethods,
											locals
										}), element.node && (element.node.decorators = null);
									}
									if (isComputed && computedKeyAssignments.length > 0 && (classDecorators && element.isClassProperty({ static: !0 }) || (prependExpressionsToComputedKey(computedKeyAssignments, kind === ACCESSOR ? element.getNextSibling() : element), computedKeyAssignments = [])), fieldInitializerExpressions.length > 0 && !isStatic && (kind === FIELD || kind === ACCESSOR) && (prependExpressionsToFieldInitializer(fieldInitializerExpressions, element), fieldInitializerExpressions = []), staticFieldInitializerExpressions.length > 0 && isStatic && (kind === FIELD || kind === ACCESSOR) && (prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []), hasDecorators && "2023-11" === version$2 && (kind === FIELD || kind === ACCESSOR)) {
										const initExtraId = generateLetUidIdentifier(scopeParent, `init_extra_${name}`);
										locals.push(initExtraId);
										const initExtraCall = _core.types.callExpression(_core.types.cloneNode(initExtraId), isStatic ? [] : [_core.types.thisExpression()]);
										isStatic ? staticFieldInitializerExpressions.push(initExtraCall) : fieldInitializerExpressions.push(initExtraCall);
									}
								}
							}
							if (computedKeyAssignments.length > 0) {
								const elements = path$10.get("body.body");
								let lastComputedElement;
								for (let i = elements.length - 1; i >= 0; i--) {
									const path$11 = elements[i], node$1 = path$11.node;
									if (node$1.computed) {
										if (classDecorators && _core.types.isClassProperty(node$1, { static: !0 })) continue;
										lastComputedElement = path$11;
										break;
									}
								}
								null != lastComputedElement && (function(expressions, fieldPath) {
									const key = fieldPath.get("key"), completion = getComputedKeyLastElement(key);
									if (completion.isConstantExpression()) prependExpressionsToComputedKey(expressions, fieldPath);
									else {
										const scopeParent$1 = key.scope.parent, maybeAssignment = (0, _misc.memoiseComputedKey)(completion.node, scopeParent$1, scopeParent$1.generateUid("computedKey"));
										if (maybeAssignment) {
											const expressionSequence = [...expressions, _core.types.cloneNode(maybeAssignment.left)], completionParent = completion.parentPath;
											completionParent.isSequenceExpression() ? completionParent.pushContainer("expressions", expressionSequence) : completion.replaceWith(maybeSequenceExpression([_core.types.cloneNode(maybeAssignment), ...expressionSequence]));
										} else prependExpressionsToComputedKey(expressions, fieldPath);
									}
								}(computedKeyAssignments, lastComputedElement), computedKeyAssignments = []);
							}
							if (fieldInitializerExpressions.length > 0) {
								const isDerivedClass = !!path$10.node.superClass;
								constructorPath ? isDerivedClass ? function(expressions, constructorPath$1, protoInitLocal$1) {
									constructorPath$1.traverse({
										CallExpression: { exit(path$11) {
											if (!path$11.get("callee").isSuper()) return;
											const newNodes = [path$11.node, ...expressions.map((expr) => _core.types.cloneNode(expr))];
											path$11.isCompletionRecord() && newNodes.push(_core.types.thisExpression()), path$11.replaceWith(function(expressions$1, protoInitLocal$2) {
												if (protoInitLocal$2) {
													if (expressions$1.length >= 2 && isProtoInitCallExpression(expressions$1[1], protoInitLocal$2)) {
														const mergedSuperCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal$2), [expressions$1[0]]);
														expressions$1.splice(0, 2, mergedSuperCall);
													}
													expressions$1.length >= 2 && _core.types.isThisExpression(expressions$1[expressions$1.length - 1]) && isProtoInitCallExpression(expressions$1[expressions$1.length - 2], protoInitLocal$2) && expressions$1.splice(expressions$1.length - 1, 1);
												}
												return maybeSequenceExpression(expressions$1);
											}(newNodes, protoInitLocal$1)), path$11.skip();
										} },
										ClassMethod(path$11) {
											"constructor" === path$11.node.kind && path$11.skip();
										}
									});
								}(fieldInitializerExpressions, constructorPath, protoInitLocal) : function(expressions, constructorPath$1) {
									constructorPath$1.node.body.body.unshift(_core.types.expressionStatement(maybeSequenceExpression(expressions)));
								}(fieldInitializerExpressions, constructorPath) : path$10.node.body.body.unshift(createConstructorFromExpressions(fieldInitializerExpressions, isDerivedClass)), fieldInitializerExpressions = [];
							}
							staticFieldInitializerExpressions.length > 0 && (path$10.node.body.body.push(createStaticBlockFromExpressions(staticFieldInitializerExpressions)), staticFieldInitializerExpressions = []);
							const sortedElementDecoratorInfo = (info$1 = elementDecoratorInfo, [
								...info$1.filter((el) => el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER),
								...info$1.filter((el) => !el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER),
								...info$1.filter((el) => el.isStatic && el.kind === FIELD),
								...info$1.filter((el) => !el.isStatic && el.kind === FIELD)
							]), elementDecorations = function(decorationInfo, version$3) {
								return _core.types.arrayExpression(decorationInfo.map((el) => {
									let flag = el.kind;
									return el.isStatic && (flag += "2023-11" === version$3 || "2023-05" === version$3 ? STATIC : STATIC_OLD_VERSION), el.decoratorsHaveThis && (flag += DECORATORS_HAVE_THIS), _core.types.arrayExpression([
										el.decoratorsArray,
										_core.types.numericLiteral(flag),
										el.name,
										...el.privateMethods || []
									]);
								}));
							}("2023-11" === version$2 ? elementDecoratorInfo : sortedElementDecoratorInfo, version$2), elementLocals = function(decorationInfo) {
								const localIds = [];
								for (const el of decorationInfo) {
									const { locals } = el;
									Array.isArray(locals) ? localIds.push(...locals) : void 0 !== locals && localIds.push(locals);
								}
								return localIds;
							}(sortedElementDecoratorInfo);
							var info$1;
							protoInitLocal && elementLocals.push(protoInitLocal);
							staticInitLocal && elementLocals.push(staticInitLocal);
							const classLocals = [];
							let classInitInjected = !1;
							const classInitCall = classInitLocal && _core.types.callExpression(_core.types.cloneNode(classInitLocal), []);
							let originalClassPath = path$10;
							const originalClass = path$10.node, staticClosures = [];
							if (classDecorators) {
								classLocals.push(classIdLocal, classInitLocal);
								const statics = [];
								if (path$10.get("body.body").forEach((element) => {
									if (element.isStaticBlock()) {
										if (hasInstancePrivateAccess(element, instancePrivateNames)) {
											const staticBlockClosureId = memoiseExpression((block = element.node, _core.types.functionExpression(null, [], _core.types.blockStatement(block.body))), "staticBlock", staticClosures);
											staticFieldInitializerExpressions.push(_core.types.callExpression(_core.types.memberExpression(staticBlockClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
										} else staticFieldInitializerExpressions.push(function(block$1) {
											return _core.types.callExpression(_core.types.arrowFunctionExpression([], _core.types.blockStatement(block$1.body)), []);
										}(element.node));
										element.remove();
									} else {
										var block;
										if ((element.isClassProperty() || element.isClassPrivateProperty()) && element.node.static) {
											const valuePath = element.get("value");
											if (hasInstancePrivateAccess(valuePath, instancePrivateNames)) {
												const fieldValueClosureId = memoiseExpression(function(value$1) {
													return _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(value$1)]));
												}(valuePath.node), "fieldValue", staticClosures);
												valuePath.replaceWith(_core.types.callExpression(_core.types.memberExpression(fieldValueClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
											}
											staticFieldInitializerExpressions.length > 0 && (prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []), element.node.static = !1, statics.push(element.node), element.remove();
										} else if (element.isClassPrivateMethod({ static: !0 })) {
											if (hasInstancePrivateAccess(element, instancePrivateNames)) {
												new _helperReplaceSupers.default({
													constantSuper: constantSuper$1,
													methodPath: element,
													objectRef: classIdLocal,
													superRef: path$10.node.superClass,
													file: state$1.file,
													refToPreserve: classIdLocal
												}).replace();
												const privateMethodDelegateId = memoiseExpression(createFunctionExpressionFromPrivateMethod(element.node), element.get("key.id").node.name, staticClosures);
												ignoreFunctionLength$1 ? (element.node.params = [_core.types.restElement(_core.types.identifier("arg"))], element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arg")]))])) : (element.node.params = element.node.params.map((p$1, i) => _core.types.isRestElement(p$1) ? _core.types.restElement(_core.types.identifier("arg")) : _core.types.identifier("_" + i)), element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arguments")]))]));
											}
											element.node.static = !1, statics.push(element.node), element.remove();
										}
									}
								}), statics.length > 0 || staticFieldInitializerExpressions.length > 0) {
									const staticsClass = _core.template.expression.ast`
        class extends ${state$1.addHelper("identity")} {}
      `;
									staticsClass.body.body = [_core.types.classProperty(_core.types.toExpression(originalClass), void 0, void 0, void 0, !0, !0), ...statics];
									const constructorBody = [], newExpr = _core.types.newExpression(staticsClass, []);
									staticFieldInitializerExpressions.length > 0 && constructorBody.push(...staticFieldInitializerExpressions), classInitCall && (classInitInjected = !0, constructorBody.push(classInitCall)), constructorBody.length > 0 ? (constructorBody.unshift(_core.types.callExpression(_core.types.super(), [_core.types.cloneNode(classIdLocal)])), staticsClass.body.body.push(createConstructorFromExpressions(constructorBody, !1))) : newExpr.arguments.push(_core.types.cloneNode(classIdLocal));
									const [newPath$1] = path$10.replaceWith(newExpr);
									originalClassPath = newPath$1.get("callee").get("body").get("body.0.key");
								}
							}
							!classInitInjected && classInitCall && path$10.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));
							let { superClass } = originalClass;
							if (superClass && ("2023-11" === version$2 || "2023-05" === version$2)) {
								const id = path$10.scope.maybeGenerateMemoised(superClass);
								id && (originalClass.superClass = _core.types.assignmentExpression("=", id, superClass), superClass = id);
							}
							const applyDecoratorWrapper = _core.types.staticBlock([]);
							originalClass.body.body.unshift(applyDecoratorWrapper);
							const applyDecsBody = applyDecoratorWrapper.body;
							if (computedKeyAssignments.length > 0) {
								const elements = originalClassPath.get("body.body");
								let firstPublicElement;
								for (const path$11 of elements) if ((path$11.isClassProperty() || path$11.isClassMethod()) && "constructor" !== path$11.node.kind) {
									firstPublicElement = path$11;
									break;
								}
								null != firstPublicElement ? (function(path$11) {
									const { node: node$1 } = path$11;
									node$1.computed = !0, _core.types.isIdentifier(node$1.key) && (node$1.key = _core.types.stringLiteral(node$1.key.name));
								}(firstPublicElement), prependExpressionsToComputedKey(computedKeyAssignments, firstPublicElement)) : (originalClass.body.body.unshift(_core.types.classProperty(_core.types.sequenceExpression([...computedKeyAssignments, _core.types.stringLiteral("_")]), void 0, void 0, void 0, !0, !0)), applyDecsBody.push(_core.types.expressionStatement(_core.types.unaryExpression("delete", _core.types.memberExpression(_core.types.thisExpression(), _core.types.identifier("_")))))), computedKeyAssignments = [];
							}
							applyDecsBody.push(_core.types.expressionStatement(function(elementLocals$1, classLocals$1, elementDecorations$1, classDecorations$1, classDecorationsFlag$1, maybePrivateBrandName, setClassName$1, superClass$1, state$2, version$3) {
								let lhs, rhs;
								const args = [
									setClassName$1 ? createSetFunctionNameCall(state$2, setClassName$1) : _core.types.thisExpression(),
									classDecorations$1,
									elementDecorations$1
								];
								"2023-11" !== version$3 && args.splice(1, 2, elementDecorations$1, classDecorations$1);
								if ("2021-12" === version$3 || "2022-03" === version$3 && !state$2.availableHelper("applyDecs2203R")) return lhs = _core.types.arrayPattern([...elementLocals$1, ...classLocals$1]), rhs = _core.types.callExpression(state$2.addHelper("2021-12" === version$3 ? "applyDecs" : "applyDecs2203"), args), _core.types.assignmentExpression("=", lhs, rhs);
								"2022-03" === version$3 ? rhs = _core.types.callExpression(state$2.addHelper("applyDecs2203R"), args) : "2023-01" === version$3 ? (maybePrivateBrandName && args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)), rhs = _core.types.callExpression(state$2.addHelper("applyDecs2301"), args)) : "2023-05" === version$3 && ((maybePrivateBrandName || superClass$1 || 0 !== classDecorationsFlag$1.value) && args.push(classDecorationsFlag$1), maybePrivateBrandName ? args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)) : superClass$1 && args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0))), superClass$1 && args.push(superClass$1), rhs = _core.types.callExpression(state$2.addHelper("applyDecs2305"), args));
								"2023-11" === version$3 && ((maybePrivateBrandName || superClass$1 || 0 !== classDecorationsFlag$1.value) && args.push(classDecorationsFlag$1), maybePrivateBrandName ? args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)) : superClass$1 && args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0))), superClass$1 && args.push(superClass$1), rhs = _core.types.callExpression(state$2.addHelper("applyDecs2311"), args));
								elementLocals$1.length > 0 ? classLocals$1.length > 0 ? lhs = _core.types.objectPattern([_core.types.objectProperty(_core.types.identifier("e"), _core.types.arrayPattern(elementLocals$1)), _core.types.objectProperty(_core.types.identifier("c"), _core.types.arrayPattern(classLocals$1))]) : (lhs = _core.types.arrayPattern(elementLocals$1), rhs = _core.types.memberExpression(rhs, _core.types.identifier("e"), !1, !1)) : (lhs = _core.types.arrayPattern(classLocals$1), rhs = _core.types.memberExpression(rhs, _core.types.identifier("c"), !1, !1));
								return _core.types.assignmentExpression("=", lhs, rhs);
							}(elementLocals, classLocals, elementDecorations, null != (_classDecorationsId = classDecorationsId) ? _classDecorationsId : _core.types.arrayExpression(classDecorations), _core.types.numericLiteral(classDecorationsFlag), needsInstancePrivateBrandCheck ? lastInstancePrivateName : null, setClassName, _core.types.cloneNode(superClass), state$1, version$2))), staticInitLocal && applyDecsBody.push(_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal), [_core.types.thisExpression()])));
							staticClosures.length > 0 && applyDecsBody.push(...staticClosures.map((expr) => _core.types.expressionStatement(expr)));
							if (path$10.insertBefore(classAssignments.map((expr) => _core.types.expressionStatement(expr))), needsDeclaraionForClassBinding) if (scopeParent.getBinding(classIdLocal.name).constantViolations.length) {
								const classOuterBindingDelegateLocal = scopeParent.generateUidIdentifier("t" + classIdLocal.name), classOuterBindingLocal = classIdLocal;
								path$10.replaceWithMultiple([
									_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classOuterBindingLocal)), _core.types.variableDeclarator(classOuterBindingDelegateLocal)]),
									_core.types.blockStatement([
										_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]),
										path$10.node,
										_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingDelegateLocal), _core.types.cloneNode(classIdLocal)))
									]),
									_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingLocal), _core.types.cloneNode(classOuterBindingDelegateLocal)))
								]);
							} else path$10.insertBefore(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]));
							decoratedPrivateMethods.size > 0 && function(path$11, decoratedPrivateMethods$1) {
								const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({ PrivateName(path$12, state$2) {
									if (!state$2.privateNamesMap.has(path$12.node.id.name)) return;
									const parentPath = path$12.parentPath, parentParentPath = parentPath.parentPath;
									if ("AssignmentExpression" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node || "UpdateExpression" === parentParentPath.node.type || "RestElement" === parentParentPath.node.type || "ArrayPattern" === parentParentPath.node.type || "ObjectProperty" === parentParentPath.node.type && parentParentPath.node.value === parentPath.node && "ObjectPattern" === parentParentPath.parentPath.type || "ForOfStatement" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node) throw path$12.buildCodeFrameError(`Decorated private methods are read-only, but "#${path$12.node.id.name}" is updated via this expression.`);
								} }), privateNamesMap = new Map();
								for (const name of decoratedPrivateMethods$1) privateNamesMap.set(name, null);
								path$11.traverse(privateNameVisitor, { privateNamesMap });
							}(path$10, decoratedPrivateMethods);
							return path$10.scope.crawl(), path$10;
						}(path$9, state, constantSuper, ignoreFunctionLength, className, namedEvaluationVisitor, version$1);
						newPath ? VISITED.add(newPath) : VISITED.add(path$9);
					}
					return {
						name: "proposal-decorators",
						inherits: inherits$6,
						visitor: Object.assign({
							ExportDefaultDeclaration(path$9, state) {
								const { declaration } = path$9.node;
								if ("ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && isDecorated(declaration)) {
									const isAnonymous = !declaration.id;
									path$9.splitExportDeclaration ??= __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration;
									const updatedVarDeclarationPath = path$9.splitExportDeclaration();
									isAnonymous && visitClass(updatedVarDeclarationPath, state, _core.types.stringLiteral("default"));
								}
							},
							ExportNamedDeclaration(path$9) {
								const { declaration } = path$9.node;
								"ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && isDecorated(declaration) && (path$9.splitExportDeclaration ??= __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration, path$9.splitExportDeclaration());
							},
							Class(path$9, state) {
								visitClass(path$9, state, void 0);
							}
						}, namedEvaluationVisitor)
					};
				};
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), _fields = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _misc = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js");
				function incrementId(id, idx = id.length - 1) {
					if (-1 === idx) return void id.unshift(65);
					const current = id[idx];
					90 === current ? id[idx] = 97 : 122 === current ? (id[idx] = 65, incrementId(id, idx - 1)) : id[idx] = current + 1;
				}
				function generateClassProperty(key, value$1, isStatic) {
					return "PrivateName" === key.type ? _core.types.classPrivateProperty(key, value$1, void 0, isStatic) : _core.types.classProperty(key, value$1, void 0, void 0, isStatic);
				}
				function assignIdForAnonymousClass(path$9, className) {
					path$9.node.id || (path$9.node.id = "string" == typeof className ? _core.types.identifier(className) : path$9.scope.generateUidIdentifier("Class"));
				}
				function addProxyAccessorsFor(className, element, getterKey, setterKey, targetKey, isComputed, isStatic, version$1) {
					const thisArg = "2023-11" !== version$1 && "2023-05" !== version$1 || !isStatic ? _core.types.thisExpression() : className, getterBody = _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)))]), setterBody = _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)), _core.types.identifier("v")))]);
					let getter, setter;
					"PrivateName" === getterKey.type ? (getter = _core.types.classPrivateMethod("get", getterKey, [], getterBody, isStatic), setter = _core.types.classPrivateMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isStatic)) : (getter = _core.types.classMethod("get", getterKey, [], getterBody, isComputed, isStatic), setter = _core.types.classMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isComputed, isStatic)), element.insertAfter(setter), element.insertAfter(getter);
				}
				function extractProxyAccessorsFor(targetKey, version$1) {
					return "2023-11" !== version$1 && "2023-05" !== version$1 && "2023-01" !== version$1 ? [_core.template.expression.ast`
        function () {
          return this.${_core.types.cloneNode(targetKey)};
        }
      `, _core.template.expression.ast`
        function (value) {
          this.${_core.types.cloneNode(targetKey)} = value;
        }
      `] : [_core.template.expression.ast`
      o => o.${_core.types.cloneNode(targetKey)}
    `, _core.template.expression.ast`
      (o, v) => o.${_core.types.cloneNode(targetKey)} = v
    `];
				}
				function getComputedKeyLastElement(path$9) {
					if ((path$9 = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path$9)).isSequenceExpression()) {
						const expressions = path$9.get("expressions");
						return getComputedKeyLastElement(expressions[expressions.length - 1]);
					}
					return path$9;
				}
				function getComputedKeyMemoiser(path$9) {
					const element = getComputedKeyLastElement(path$9);
					if (element.isConstantExpression()) return _core.types.cloneNode(path$9.node);
					if (element.isIdentifier() && path$9.scope.hasUid(element.node.name)) return _core.types.cloneNode(path$9.node);
					if (element.isAssignmentExpression() && element.get("left").isIdentifier()) return _core.types.cloneNode(element.node.left);
					throw new Error(`Internal Error: the computed key ${path$9.toString()} has not yet been memoised.`);
				}
				function prependExpressionsToComputedKey(expressions, fieldPath) {
					const key = fieldPath.get("key");
					key.isSequenceExpression() ? expressions.push(...key.node.expressions) : expressions.push(key.node), key.replaceWith(maybeSequenceExpression(expressions));
				}
				function prependExpressionsToFieldInitializer(expressions, fieldPath) {
					const initializer = fieldPath.get("value");
					initializer.node ? expressions.push(initializer.node) : expressions.length > 0 && (expressions[expressions.length - 1] = _core.types.unaryExpression("void", expressions[expressions.length - 1])), initializer.replaceWith(maybeSequenceExpression(expressions));
				}
				function prependExpressionsToStaticBlock(expressions, blockPath) {
					blockPath.unshiftContainer("body", _core.types.expressionStatement(maybeSequenceExpression(expressions)));
				}
				function isProtoInitCallExpression(expression, protoInitCall) {
					return _core.types.isCallExpression(expression) && _core.types.isIdentifier(expression.callee, { name: protoInitCall.name });
				}
				function createConstructorFromExpressions(expressions, isDerivedClass) {
					const body = [_core.types.expressionStatement(maybeSequenceExpression(expressions))];
					return isDerivedClass && body.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(), [_core.types.spreadElement(_core.types.identifier("args"))]))), _core.types.classMethod("constructor", _core.types.identifier("constructor"), isDerivedClass ? [_core.types.restElement(_core.types.identifier("args"))] : [], _core.types.blockStatement(body));
				}
				function createStaticBlockFromExpressions(expressions) {
					return _core.types.staticBlock([_core.types.expressionStatement(maybeSequenceExpression(expressions))]);
				}
				const FIELD = 0, ACCESSOR = 1, METHOD = 2, GETTER = 3, SETTER = 4, STATIC_OLD_VERSION = 5, STATIC = 8, DECORATORS_HAVE_THIS = 16;
				function getElementKind(element) {
					switch (element.node.type) {
						case "ClassProperty":
						case "ClassPrivateProperty": return FIELD;
						case "ClassAccessorProperty": return ACCESSOR;
						case "ClassMethod":
						case "ClassPrivateMethod": return "get" === element.node.kind ? GETTER : "set" === element.node.kind ? SETTER : METHOD;
					}
				}
				function generateDecorationList(decorators, decoratorsThis, version$1) {
					const decsCount = decorators.length, haveOneThis = decoratorsThis.some(Boolean), decs = [];
					for (let i = 0; i < decsCount; i++) "2023-11" !== version$1 && "2023-05" !== version$1 || !haveOneThis || decs.push(decoratorsThis[i] || _core.types.unaryExpression("void", _core.types.numericLiteral(0))), decs.push(decorators[i].expression);
					return {
						haveThis: haveOneThis,
						decs
					};
				}
				function addCallAccessorsFor(version$1, element, key, getId, setId, isStatic) {
					element.insertAfter(_core.types.classPrivateMethod("get", _core.types.cloneNode(key), [], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId), "2023-11" === version$1 && isStatic ? [] : [_core.types.thisExpression()]))]), isStatic)), element.insertAfter(_core.types.classPrivateMethod("set", _core.types.cloneNode(key), [_core.types.identifier("v")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId), "2023-11" === version$1 && isStatic ? [_core.types.identifier("v")] : [_core.types.thisExpression(), _core.types.identifier("v")]))]), isStatic));
				}
				function movePrivateAccessor(element, key, methodLocalVar, isStatic) {
					let params, block;
					"set" === element.node.kind ? (params = [_core.types.identifier("v")], block = [_core.types.expressionStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression(), _core.types.identifier("v")]))]) : (params = [], block = [_core.types.returnStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression()]))]), element.replaceWith(_core.types.classPrivateMethod(element.node.kind, _core.types.cloneNode(key), params, _core.types.blockStatement(block), isStatic));
				}
				function isClassDecoratableElementPath(path$9) {
					const { type: type$1 } = path$9;
					return "TSDeclareMethod" !== type$1 && "TSIndexSignature" !== type$1 && "StaticBlock" !== type$1;
				}
				function maybeSequenceExpression(exprs) {
					return 0 === exprs.length ? _core.types.unaryExpression("void", _core.types.numericLiteral(0)) : 1 === exprs.length ? exprs[0] : _core.types.sequenceExpression(exprs);
				}
				function createFunctionExpressionFromPrivateMethod(node) {
					const { params, body, generator: isGenerator, async: isAsync } = node;
					return _core.types.functionExpression(void 0, params, body, isGenerator, isAsync);
				}
				function createSetFunctionNameCall(state, className) {
					return _core.types.callExpression(state.addHelper("setFunctionName"), [_core.types.thisExpression(), className]);
				}
				function createToPropertyKeyCall(state, propertyKey) {
					return _core.types.callExpression(state.addHelper("toPropertyKey"), [propertyKey]);
				}
				function createPrivateBrandCheckClosure(brandName) {
					return _core.types.arrowFunctionExpression([_core.types.identifier("_")], _core.types.binaryExpression("in", _core.types.cloneNode(brandName), _core.types.identifier("_")));
				}
				function usesPrivateField(expression) {
					try {
						return _core.types.traverseFast(expression, (node) => {
							if (_core.types.isPrivateName(node)) throw null;
						}), !1;
					} catch (_unused) {
						return !0;
					}
				}
				function hasInstancePrivateAccess(path$9, privateNames) {
					let containsInstancePrivateAccess = !1;
					if (privateNames.length > 0) {
						const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({ PrivateName(path$10, state) {
							state.privateNamesMap.has(path$10.node.id.name) && (containsInstancePrivateAccess = !0, path$10.stop());
						} }), privateNamesMap = new Map();
						for (const name of privateNames) privateNamesMap.set(name, null);
						path$9.traverse(privateNameVisitor, { privateNamesMap });
					}
					return containsInstancePrivateAccess;
				}
				function isProtoKey(node) {
					return "Identifier" === node.type ? "__proto__" === node.name : "__proto__" === node.value;
				}
				function isDecorated(node) {
					return node.decorators && node.decorators.length > 0;
				}
				function shouldTransformElement(node) {
					switch (node.type) {
						case "ClassAccessorProperty": return !0;
						case "ClassMethod":
						case "ClassProperty":
						case "ClassPrivateMethod":
						case "ClassPrivateProperty": return isDecorated(node);
						default: return !1;
					}
				}
				function isDecoratedAnonymousClassExpression(path$9) {
					return path$9.isClassExpression({ id: null }) && (isDecorated(node = path$9.node) || node.body.body.some(shouldTransformElement));
					var node;
				}
				function generateLetUidIdentifier(scope, name) {
					const id = scope.generateUidIdentifier(name);
					return scope.push({
						id,
						kind: "let"
					}), _core.types.cloneNode(id);
				}
			},
			"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/features.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.FEATURES = void 0, exports$1.enableFeature = function(file, feature, loose) {
					hasFeature(file, feature) && !canIgnoreLoose(file, feature) || (file.set(featuresKey, file.get(featuresKey) | feature), "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, !0), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, !1), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : setLoose(file, feature, loose));
					let resolvedLoose;
					for (const [mask, name] of featuresSameLoose) {
						if (!hasFeature(file, mask)) continue;
						if (canIgnoreLoose(file, mask)) continue;
						const loose$1 = isLoose(file, mask);
						if (resolvedLoose === !loose$1) throw new Error("'loose' mode configuration must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled).\n\n" + getBabelShowConfigForHint(file));
						resolvedLoose = loose$1;
						var higherPriorityPluginName = name;
					}
					if (void 0 !== resolvedLoose) for (const [mask, name] of featuresSameLoose) hasFeature(file, mask) && isLoose(file, mask) !== resolvedLoose && (setLoose(file, mask, resolvedLoose), console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env config, it will not be used for ${name} since the "loose" mode option was set to "${resolvedLoose}" for ${higherPriorityPluginName}.\nThe "loose" option must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding\n\t["${name}", { "loose": ${resolvedLoose} }]\nto the "plugins" section of your Babel config.\n\n` + getBabelShowConfigForHint(file)));
				}, exports$1.isLoose = isLoose, exports$1.shouldTransform = function(path$9, file) {
					let decoratorPath = null, publicFieldPath = null, privateFieldPath = null, privateMethodPath = null, staticBlockPath = null;
					(0, _decorators.hasOwnDecorators)(path$9.node) && (decoratorPath = path$9.get("decorators.0"));
					for (const el of path$9.get("body.body")) !decoratorPath && (0, _decorators.hasOwnDecorators)(el.node) && (decoratorPath = el.get("decorators.0")), !publicFieldPath && el.isClassProperty() && (publicFieldPath = el), !privateFieldPath && el.isClassPrivateProperty() && (privateFieldPath = el), !privateMethodPath && null != el.isClassPrivateMethod && el.isClassPrivateMethod() && (privateMethodPath = el), !staticBlockPath && null != el.isStaticBlock && el.isStaticBlock() && (staticBlockPath = el);
					if (decoratorPath && privateFieldPath) throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
					if (decoratorPath && privateMethodPath) throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
					if (decoratorPath && !hasFeature(file, FEATURES.decorators)) throw path$9.buildCodeFrameError("Decorators are not enabled.\nIf you are using [\"@babel/plugin-proposal-decorators\", { \"version\": \"legacy\" }], make sure it comes *before* \"@babel/plugin-transform-class-properties\" and enable loose mode, like so:\n	[\"@babel/plugin-proposal-decorators\", { \"version\": \"legacy\" }]\n	[\"@babel/plugin-transform-class-properties\", { \"loose\": true }]");
					if (privateMethodPath && !hasFeature(file, FEATURES.privateMethods)) throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-transform-private-methods` to your configuration.");
					if ((publicFieldPath || privateFieldPath) && !hasFeature(file, FEATURES.fields) && !hasFeature(file, FEATURES.privateMethods)) throw path$9.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-transform-class-properties` to your configuration.");
					if (staticBlockPath && !hasFeature(file, FEATURES.staticBlocks)) throw path$9.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-transform-class-static-block` to your configuration.");
					if (decoratorPath || privateMethodPath || staticBlockPath) return !0;
					if ((publicFieldPath || privateFieldPath) && hasFeature(file, FEATURES.fields)) return !0;
					return !1;
				};
				var _decorators = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js");
				const FEATURES = exports$1.FEATURES = Object.freeze({
					fields: 2,
					privateMethods: 4,
					decorators: 8,
					privateIn: 16,
					staticBlocks: 32
				}), featuresSameLoose = new Map([
					[FEATURES.fields, "@babel/plugin-transform-class-properties"],
					[FEATURES.privateMethods, "@babel/plugin-transform-private-methods"],
					[FEATURES.privateIn, "@babel/plugin-transform-private-property-in-object"]
				]), featuresKey = "@babel/plugin-class-features/featuresKey", looseKey = "@babel/plugin-class-features/looseKey";
				var looseLowPriorityKey = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing", canIgnoreLoose = function(file, feature) {
					return !!(file.get(looseLowPriorityKey) & feature);
				};
				function getBabelShowConfigForHint(file) {
					let { filename } = file.opts;
					return filename && "unknown" !== filename || (filename = "[name of the input file]"), `If you already set the same 'loose' mode for these plugins in your config, it's possible that they are enabled multiple times with different options.\nYou can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:\n\tnpx cross-env BABEL_SHOW_CONFIG_FOR=${filename} <your build command>\nSee https://babeljs.io/docs/configuration#print-effective-configs for more info.`;
				}
				function hasFeature(file, feature) {
					return !!(file.get(featuresKey) & feature);
				}
				function isLoose(file, feature) {
					return !!(file.get(looseKey) & feature);
				}
				function setLoose(file, feature, loose) {
					loose ? file.set(looseKey, file.get(looseKey) | feature) : file.set(looseKey, file.get(looseKey) & ~feature), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) & ~feature);
				}
			},
			"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.buildCheckInRHS = buildCheckInRHS, exports$1.buildFieldsInitNodes = function(ref, superRef, props, privateNamesMap, file, setPublicClassFields, privateFieldsAsSymbolsOrProperties, noUninitializedPrivateFieldAccess, constantSuper, innerBindingRef) {
					var _ref;
					let injectSuperRef, classRefFlags = 0;
					const staticNodes = [], instanceNodes = [];
					let lastInstanceNodeReturnsThis = !1;
					const pureStaticNodes = [];
					let classBindingNode = null;
					const getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => (injectSuperRef ??= props[0].scope.generateUidIdentifierBasedOnNode(superRef), injectSuperRef), classRefForInnerBinding = null != (_ref = ref) ? _ref : props[0].scope.generateUidIdentifier((null == innerBindingRef ? void 0 : innerBindingRef.name) || "Class");
					ref ??= _core.types.cloneNode(innerBindingRef);
					for (const prop of props) {
						prop.isClassProperty() && ts.assertFieldTransformed(prop);
						const isStatic = !(null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node)) && prop.node.static, isInstance = !isStatic, isPrivate = prop.isPrivate(), isPublic = !isPrivate, isField = prop.isProperty(), isMethod = !isField, isStaticBlock = null == prop.isStaticBlock ? void 0 : prop.isStaticBlock();
						if (isStatic && (classRefFlags |= 1), isStatic || isMethod && isPrivate || isStaticBlock) {
							new _helperReplaceSupers.default({
								methodPath: prop,
								constantSuper,
								file,
								refToPreserve: innerBindingRef,
								getSuperRef,
								getObjectRef: () => (classRefFlags |= 2, isStatic || isStaticBlock ? classRefForInnerBinding : _core.types.memberExpression(classRefForInnerBinding, _core.types.identifier("prototype")))
							}).replace();
							replaceThisContext(prop, classRefForInnerBinding, innerBindingRef) && (classRefFlags |= 2);
						}
						switch (lastInstanceNodeReturnsThis = !1, !0) {
							case isStaticBlock: {
								const blockBody = prop.node.body;
								1 === blockBody.length && _core.types.isExpressionStatement(blockBody[0]) ? staticNodes.push(inheritPropComments(blockBody[0], prop)) : staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`, prop.node));
								break;
							}
							case isStatic && isPrivate && isField && privateFieldsAsSymbolsOrProperties:
								staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));
								break;
							case isStatic && isPrivate && isField && !privateFieldsAsSymbolsOrProperties:
								newHelpers(file) ? staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess)) : staticNodes.push(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));
								break;
							case isStatic && isPublic && isField && setPublicClassFields: if (!isNameOrLength(prop.node)) {
								staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));
								break;
							}
							case isStatic && isPublic && isField && !setPublicClassFields:
								staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, file));
								break;
							case isInstance && isPrivate && isField && privateFieldsAsSymbolsOrProperties:
								instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
								break;
							case isInstance && isPrivate && isField && !privateFieldsAsSymbolsOrProperties:
								instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file));
								break;
							case isInstance && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties:
								instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
								break;
							case isInstance && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties:
								instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
								break;
							case isStatic && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties:
								newHelpers(file) || staticNodes.unshift(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
								break;
							case isStatic && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties:
								staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, file, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
								break;
							case isInstance && isPublic && isField && setPublicClassFields:
								instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));
								break;
							case isInstance && isPublic && isField && !setPublicClassFields:
								lastInstanceNodeReturnsThis = !0, instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, file));
								break;
							default: throw new Error("Unreachable.");
						}
					}
					2 & classRefFlags && null != innerBindingRef && (classBindingNode = _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classRefForInnerBinding), _core.types.cloneNode(innerBindingRef))));
					return {
						staticNodes: staticNodes.filter(Boolean),
						instanceNodes: instanceNodes.filter(Boolean),
						lastInstanceNodeReturnsThis,
						pureStaticNodes: pureStaticNodes.filter(Boolean),
						classBindingNode,
						wrapClass(path$9) {
							for (const prop of props) prop.node.leadingComments = null, prop.remove();
							return injectSuperRef && (path$9.scope.push({ id: _core.types.cloneNode(injectSuperRef) }), path$9.set("superClass", _core.types.assignmentExpression("=", injectSuperRef, path$9.node.superClass))), 0 !== classRefFlags && (path$9.isClassExpression() ? (path$9.scope.push({ id: ref }), path$9.replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(ref), path$9.node))) : (innerBindingRef ?? (path$9.node.id = ref), null != classBindingNode && path$9.scope.push({ id: classRefForInnerBinding }))), path$9;
						}
					};
				}, exports$1.buildPrivateNamesMap = function(className, privateFieldsAsSymbolsOrProperties, props, file) {
					const privateNamesMap = new Map();
					let classBrandId;
					for (const prop of props) if (prop.isPrivate()) {
						const { name } = prop.node.key.id;
						let update = privateNamesMap.get(name);
						if (!update) {
							const isMethod = !prop.isProperty(), isStatic = prop.node.static;
							let id, initAdded = !1;
							if (!privateFieldsAsSymbolsOrProperties && newHelpers(file) && isMethod && !isStatic) initAdded = !!classBrandId, classBrandId ??= prop.scope.generateUidIdentifier(`${className}_brand`), id = classBrandId;
							else id = prop.scope.generateUidIdentifier(name);
							update = {
								id,
								static: isStatic,
								method: isMethod,
								initAdded
							}, privateNamesMap.set(name, update);
						}
						if (prop.isClassPrivateMethod()) if ("get" === prop.node.kind) {
							const { body } = prop.node.body;
							let $$1;
							1 === body.length && _core.types.isReturnStatement($$1 = body[0]) && _core.types.isCallExpression($$1 = $$1.argument) && 1 === $$1.arguments.length && _core.types.isThisExpression($$1.arguments[0]) && _core.types.isIdentifier($$1 = $$1.callee) ? (update.getId = _core.types.cloneNode($$1), update.getterDeclared = !0) : update.getId = prop.scope.generateUidIdentifier(`get_${name}`);
						} else if ("set" === prop.node.kind) {
							const { params } = prop.node, { body } = prop.node.body;
							let $$1;
							1 === body.length && _core.types.isExpressionStatement($$1 = body[0]) && _core.types.isCallExpression($$1 = $$1.expression) && 2 === $$1.arguments.length && _core.types.isThisExpression($$1.arguments[0]) && _core.types.isIdentifier($$1.arguments[1], { name: params[0].name }) && _core.types.isIdentifier($$1 = $$1.callee) ? (update.setId = _core.types.cloneNode($$1), update.setterDeclared = !0) : update.setId = prop.scope.generateUidIdentifier(`set_${name}`);
						} else "method" === prop.node.kind && (update.methodId = prop.scope.generateUidIdentifier(name));
						privateNamesMap.set(name, update);
					}
					return privateNamesMap;
				}, exports$1.buildPrivateNamesNodes = function(privateNamesMap, privateFieldsAsProperties, privateFieldsAsSymbols, state) {
					const initNodes = [], injectedIds = new Set();
					for (const [name, value$1] of privateNamesMap) {
						const { static: isStatic, method: isMethod, getId, setId } = value$1, isGetterOrSetter = getId || setId, id = _core.types.cloneNode(value$1.id);
						let init$1;
						if (privateFieldsAsProperties) init$1 = _core.types.callExpression(state.addHelper("classPrivateFieldLooseKey"), [_core.types.stringLiteral(name)]);
						else if (privateFieldsAsSymbols) init$1 = _core.types.callExpression(_core.types.identifier("Symbol"), [_core.types.stringLiteral(name)]);
						else if (!isStatic) {
							if (injectedIds.has(id.name)) continue;
							injectedIds.add(id.name), init$1 = _core.types.newExpression(_core.types.identifier(!isMethod || isGetterOrSetter && !newHelpers(state) ? "WeakMap" : "WeakSet"), []);
						}
						init$1 && (privateFieldsAsSymbols || (0, _helperAnnotateAsPure.default)(init$1), initNodes.push(_core.template.statement.ast`var ${id} = ${init$1}`));
					}
					return initNodes;
				}, exports$1.privateNameVisitorFactory = privateNameVisitorFactory, exports$1.transformPrivateNamesUsage = function(ref, path$9, privateNamesMap, { privateFieldsAsProperties, noUninitializedPrivateFieldAccess, noDocumentAll, innerBinding }, state) {
					if (!privateNamesMap.size) return;
					const body = path$9.get("body"), handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;
					(0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({
						privateNamesMap,
						classRef: ref,
						file: state
					}, handler, {
						noDocumentAll,
						noUninitializedPrivateFieldAccess,
						innerBinding
					})), body.traverse(privateInVisitor, {
						privateNamesMap,
						classRef: ref,
						file: state,
						privateFieldsAsProperties,
						innerBinding
					});
				};
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _helperReplaceSupers = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _helperAnnotateAsPure = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), ts = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js"), newHelpers = (file) => file.availableHelper("classPrivateFieldGet2");
				function privateNameVisitorFactory(visitor) {
					const nestedVisitor = _traverse.visitors.environmentVisitor(Object.assign({}, visitor)), privateNameVisitor$1 = Object.assign({}, visitor, { Class(path$9) {
						const { privateNamesMap } = this, body = path$9.get("body.body"), visiblePrivateNames = new Map(privateNamesMap), redeclared = [];
						for (const prop of body) {
							if (!prop.isPrivate()) continue;
							const { name } = prop.node.key.id;
							visiblePrivateNames.delete(name), redeclared.push(name);
						}
						redeclared.length && (path$9.get("body").traverse(nestedVisitor, Object.assign({}, this, { redeclared })), path$9.traverse(privateNameVisitor$1, Object.assign({}, this, { privateNamesMap: visiblePrivateNames })), path$9.skipKey("body"));
					} });
					return privateNameVisitor$1;
				}
				const privateNameVisitor = privateNameVisitorFactory({ PrivateName(path$9, { noDocumentAll }) {
					const { privateNamesMap, redeclared } = this, { node, parentPath } = path$9;
					if (!parentPath.isMemberExpression({ property: node }) && !parentPath.isOptionalMemberExpression({ property: node })) return;
					const { name } = node.id;
					privateNamesMap.has(name) && (null != redeclared && redeclared.includes(name) || this.handle(parentPath, noDocumentAll));
				} });
				function unshadow(name, scope, innerBinding) {
					for (; null != (_scope = scope) && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding);) {
						var _scope;
						scope.rename(name), scope = scope.parent;
					}
				}
				function buildCheckInRHS(rhs, file, inRHSIsObject) {
					return inRHSIsObject || null == file.availableHelper || !file.availableHelper("checkInRHS") ? rhs : _core.types.callExpression(file.addHelper("checkInRHS"), [rhs]);
				}
				const privateInVisitor = privateNameVisitorFactory({ BinaryExpression(path$9, { file }) {
					const { operator, left, right } = path$9.node;
					if ("in" !== operator) return;
					if (!_core.types.isPrivateName(left)) return;
					const { privateFieldsAsProperties, privateNamesMap, redeclared } = this, { name } = left.id;
					if (!privateNamesMap.has(name)) return;
					if (null != redeclared && redeclared.includes(name)) return;
					if (unshadow(this.classRef.name, path$9.scope, this.innerBinding), privateFieldsAsProperties) {
						const { id: id$1 } = privateNamesMap.get(name);
						return void path$9.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right, file)}, ${_core.types.cloneNode(id$1)})
      `);
					}
					const { id, static: isStatic } = privateNamesMap.get(name);
					isStatic ? path$9.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right, file)} === ${_core.types.cloneNode(this.classRef)}`) : path$9.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right, file)})`);
				} });
				function readOnlyError(file, name) {
					return _core.types.callExpression(file.addHelper("readOnlyError"), [_core.types.stringLiteral(`#${name}`)]);
				}
				function writeOnlyError(file, name) {
					return file.availableHelper("writeOnlyError") ? _core.types.callExpression(file.addHelper("writeOnlyError"), [_core.types.stringLiteral(`#${name}`)]) : (console.warn("@babel/helpers is outdated, update it to silence this warning."), _core.types.buildUndefinedNode());
				}
				function buildStaticPrivateFieldAccess(expr, noUninitializedPrivateFieldAccess) {
					return noUninitializedPrivateFieldAccess ? expr : _core.types.memberExpression(expr, _core.types.identifier("_"));
				}
				function autoInherits(fn) {
					return function(member) {
						return _core.types.inherits(fn.apply(this, arguments), member.node);
					};
				}
				const privateNameHandlerSpec = {
					memoise(member, count) {
						const { scope } = member, { object } = member.node, memo = scope.maybeGenerateMemoised(object);
						memo && this.memoiser.set(object, memo, count);
					},
					receiver(member) {
						const { object } = member.node;
						return this.memoiser.has(object) ? _core.types.cloneNode(this.memoiser.get(object)) : _core.types.cloneNode(object);
					},
					get: autoInherits(function(member) {
						const { classRef, privateNamesMap, file, innerBinding, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, methodId, getId, setId } = privateNamesMap.get(name), isGetterOrSetter = getId || setId, cloneId = (id$1) => _core.types.inherits(_core.types.cloneNode(id$1), privateName);
						if (isStatic) {
							if (unshadow(classRef.name, member.scope, innerBinding), !newHelpers(file)) {
								const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
								return _core.types.callExpression(file.addHelper(helperName), [
									this.receiver(member),
									_core.types.cloneNode(classRef),
									cloneId(id)
								]);
							}
							const receiver = this.receiver(member), skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
							if (!isMethod) return buildStaticPrivateFieldAccess(skipCheck ? cloneId(id) : _core.types.callExpression(file.addHelper("assertClassBrand"), [
								_core.types.cloneNode(classRef),
								receiver,
								cloneId(id)
							]), noUninitializedPrivateFieldAccess);
							if (getId) return skipCheck ? _core.types.callExpression(cloneId(getId), [receiver]) : _core.types.callExpression(file.addHelper("classPrivateGetter"), [
								_core.types.cloneNode(classRef),
								receiver,
								cloneId(getId)
							]);
							if (setId) {
								const err = _core.types.buildUndefinedNode();
								return skipCheck ? err : _core.types.sequenceExpression([_core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), err]);
							}
							return skipCheck ? cloneId(id) : _core.types.callExpression(file.addHelper("assertClassBrand"), [
								_core.types.cloneNode(classRef),
								receiver,
								cloneId(id)
							]);
						}
						return isMethod ? isGetterOrSetter ? getId ? newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateGetter"), [
							_core.types.cloneNode(id),
							this.receiver(member),
							cloneId(getId)
						]) : _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]) : _core.types.sequenceExpression([this.receiver(member), writeOnlyError(file, name)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("assertClassBrand"), [
							_core.types.cloneNode(id),
							this.receiver(member),
							cloneId(methodId)
						]) : _core.types.callExpression(file.addHelper("classPrivateMethodGet"), [
							this.receiver(member),
							_core.types.cloneNode(id),
							cloneId(methodId)
						]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateFieldGet2"), [cloneId(id), this.receiver(member)]) : _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]);
					}),
					boundGet(member) {
						return this.memoise(member, 1), _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [this.receiver(member)]);
					},
					set: autoInherits(function(member, value$1) {
						const { classRef, privateNamesMap, file, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, setId, getId } = privateNamesMap.get(name), isGetterOrSetter = getId || setId, cloneId = (id$1) => _core.types.inherits(_core.types.cloneNode(id$1), privateName);
						if (isStatic) {
							if (!newHelpers(file)) {
								const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
								return _core.types.callExpression(file.addHelper(helperName), [
									this.receiver(member),
									_core.types.cloneNode(classRef),
									cloneId(id),
									value$1
								]);
							}
							const receiver = this.receiver(member), skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
							if (isMethod && !setId) {
								const err = readOnlyError(file, name);
								return skipCheck ? _core.types.sequenceExpression([value$1, err]) : _core.types.sequenceExpression([
									value$1,
									_core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]),
									readOnlyError(file, name)
								]);
							}
							return setId ? skipCheck ? _core.types.callExpression(_core.types.cloneNode(setId), [receiver, value$1]) : _core.types.callExpression(file.addHelper("classPrivateSetter"), [
								_core.types.cloneNode(classRef),
								cloneId(setId),
								receiver,
								value$1
							]) : _core.types.assignmentExpression("=", buildStaticPrivateFieldAccess(cloneId(id), noUninitializedPrivateFieldAccess), skipCheck ? value$1 : _core.types.callExpression(file.addHelper("assertClassBrand"), [
								_core.types.cloneNode(classRef),
								receiver,
								value$1
							]));
						}
						return isMethod ? setId ? newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateSetter"), [
							_core.types.cloneNode(id),
							cloneId(setId),
							this.receiver(member),
							value$1
						]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [
							this.receiver(member),
							cloneId(id),
							value$1
						]) : _core.types.sequenceExpression([
							this.receiver(member),
							value$1,
							readOnlyError(file, name)
						]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateFieldSet2"), [
							cloneId(id),
							this.receiver(member),
							value$1
						]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [
							this.receiver(member),
							cloneId(id),
							value$1
						]);
					}),
					destructureSet(member) {
						const { classRef, privateNamesMap, file, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, setId } = privateNamesMap.get(name), cloneId = (id$1) => _core.types.inherits(_core.types.cloneNode(id$1), privateName);
						if (!newHelpers(file)) {
							if (isStatic) {
								try {
									var helper = file.addHelper("classStaticPrivateFieldDestructureSet");
								} catch (_unused) {
									throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.");
								}
								return _core.types.memberExpression(_core.types.callExpression(helper, [
									this.receiver(member),
									_core.types.cloneNode(classRef),
									cloneId(id)
								]), _core.types.identifier("value"));
							}
							return _core.types.memberExpression(_core.types.callExpression(file.addHelper("classPrivateFieldDestructureSet"), [this.receiver(member), cloneId(id)]), _core.types.identifier("value"));
						}
						if (isMethod && !setId) return _core.types.memberExpression(_core.types.sequenceExpression([member.node.object, readOnlyError(file, name)]), _core.types.identifier("_"));
						if (isStatic && !isMethod) {
							const getCall = this.get(member);
							if (!noUninitializedPrivateFieldAccess || !_core.types.isCallExpression(getCall)) return getCall;
							const ref = getCall.arguments.pop();
							return getCall.arguments.push(_core.template.expression.ast`(_) => ${ref} = _`), _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), [getCall]), _core.types.identifier("_"));
						}
						const setCall = this.set(member, _core.types.identifier("_"));
						if (!_core.types.isCallExpression(setCall) || !_core.types.isIdentifier(setCall.arguments[setCall.arguments.length - 1], { name: "_" })) throw member.buildCodeFrameError("Internal Babel error while compiling this code. This is a Babel bug. Please report it at https://github.com/babel/babel/issues.");
						let args;
						return args = _core.types.isMemberExpression(setCall.callee, { computed: !1 }) && _core.types.isIdentifier(setCall.callee.property) && "call" === setCall.callee.property.name ? [
							setCall.callee.object,
							_core.types.arrayExpression(setCall.arguments.slice(1, -1)),
							setCall.arguments[0]
						] : [setCall.callee, _core.types.arrayExpression(setCall.arguments.slice(0, -1))], _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), args), _core.types.identifier("_"));
					},
					call(member, args) {
						return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, !1);
					},
					optionalCall(member, args) {
						return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, !0);
					},
					delete() {
						throw new Error("Internal Babel error: deleting private elements is a parsing error.");
					}
				}, privateNameHandlerLoose = {
					get(member) {
						const { privateNamesMap, file } = this, { object } = member.node, { name } = member.node.property.id;
						return _core.template.expression`BASE(REF, PROP)[PROP]`({
							BASE: file.addHelper("classPrivateFieldLooseBase"),
							REF: _core.types.cloneNode(object),
							PROP: _core.types.cloneNode(privateNamesMap.get(name).id)
						});
					},
					set() {
						throw new Error("private name handler with loose = true don't need set()");
					},
					boundGet(member) {
						return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [_core.types.cloneNode(member.node.object)]);
					},
					simpleSet(member) {
						return this.get(member);
					},
					destructureSet(member) {
						return this.get(member);
					},
					call(member, args) {
						return _core.types.callExpression(this.get(member), args);
					},
					optionalCall(member, args) {
						return _core.types.optionalCallExpression(this.get(member), args, !0);
					},
					delete() {
						throw new Error("Internal Babel error: deleting private elements is a parsing error.");
					}
				};
				function buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {
					const { id } = privateNamesMap.get(prop.node.key.id.name), value$1 = prop.node.value || prop.scope.buildUndefinedNode();
					return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value$1}
      });
    `, prop);
				}
				function buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state) {
					const { id } = privateNamesMap.get(prop.node.key.id.name), value$1 = prop.node.value || prop.scope.buildUndefinedNode();
					if (!state.availableHelper("classPrivateFieldInitSpec")) return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${value$1},
        })`, prop);
					const helper = state.addHelper("classPrivateFieldInitSpec");
					return inheritLoc(inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(helper, [
						_core.types.thisExpression(),
						inheritLoc(_core.types.cloneNode(id), prop.node.key),
						newHelpers(state) ? value$1 : _core.template.expression.ast`{ writable: true, value: ${value$1} }`
					])), prop), prop.node);
				}
				function buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess) {
					const privateName = privateNamesMap.get(prop.node.key.id.name), value$1 = noUninitializedPrivateFieldAccess ? prop.node.value : _core.template.expression.ast`{
        _: ${prop.node.value || _core.types.buildUndefinedNode()}
      }`;
					return inheritPropComments(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(_core.types.cloneNode(privateName.id), value$1)]), prop);
				}
				var buildPrivateStaticFieldInitSpecOld = function(prop, privateNamesMap) {
					const privateName = privateNamesMap.get(prop.node.key.id.name), { id, getId, setId, initAdded } = privateName, isGetterOrSetter = getId || setId;
					if (!prop.isProperty() && (initAdded || !isGetterOrSetter)) return;
					if (isGetterOrSetter) return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: !0 })), inheritPropComments(_core.template.statement.ast`
          var ${_core.types.cloneNode(id)} = {
            // configurable is false by default
            // enumerable is false by default
            // writable is false by default
            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
          }
        `, prop);
					const value$1 = prop.node.value || prop.scope.buildUndefinedNode();
					return inheritPropComments(_core.template.statement.ast`
        var ${_core.types.cloneNode(id)} = {
          // configurable is false by default
          // enumerable is false by default
          writable: true,
          value: ${value$1}
        };
      `, prop);
				};
				function buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {
					const privateName = privateNamesMap.get(prop.node.key.id.name), { methodId, id, getId, setId, initAdded } = privateName;
					if (initAdded) return;
					if (methodId) return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `, prop);
					return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: !0 })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        });
      `, prop)) : void 0;
				}
				function buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state) {
					const privateName = privateNamesMap.get(prop.node.key.id.name);
					if (!privateName.initAdded) {
						if (!newHelpers(state)) {
							if (privateName.getId || privateName.setId) return function(ref$1, prop$1, privateNamesMap$1, state$1) {
								const privateName$1 = privateNamesMap$1.get(prop$1.node.key.id.name), { id, getId, setId } = privateName$1;
								if (privateNamesMap$1.set(prop$1.node.key.id.name, Object.assign({}, privateName$1, { initAdded: !0 })), !state$1.availableHelper("classPrivateFieldInitSpec")) return inheritPropComments(_core.template.statement.ast`
          ${id}.set(${ref$1}, {
            get: ${getId ? getId.name : prop$1.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop$1.scope.buildUndefinedNode()}
          });
        `, prop$1);
								const helper = state$1.addHelper("classPrivateFieldInitSpec");
								return inheritLoc(inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        get: ${getId ? getId.name : prop$1.scope.buildUndefinedNode()},
        set: ${setId ? setId.name : prop$1.scope.buildUndefinedNode()}
      },
    )`, prop$1), prop$1.node);
							}(ref, prop, privateNamesMap, state);
						}
						return function(ref$1, prop$1, privateNamesMap$1, state$1) {
							const privateName$1 = privateNamesMap$1.get(prop$1.node.key.id.name), { id } = privateName$1;
							if (!state$1.availableHelper("classPrivateMethodInitSpec")) return inheritPropComments(_core.template.statement.ast`${id}.add(${ref$1})`, prop$1);
							const helper = state$1.addHelper("classPrivateMethodInitSpec");
							return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)}
    )`, prop$1);
						}(ref, prop, privateNamesMap, state);
					}
				}
				function buildPublicFieldInitLoose(ref, prop) {
					const { key, computed } = prop.node, value$1 = prop.node.value || prop.scope.buildUndefinedNode();
					return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(ref, key, computed || _core.types.isLiteral(key)), value$1)), prop);
				}
				function buildPublicFieldInitSpec(ref, prop, state) {
					const { key, computed } = prop.node, value$1 = prop.node.value || prop.scope.buildUndefinedNode();
					return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state.addHelper("defineProperty"), [
						ref,
						computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name),
						value$1
					])), prop);
				}
				function buildPrivateStaticMethodInitLoose(ref, prop, state, privateNamesMap) {
					const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, initAdded } = privateName;
					if (initAdded) return;
					return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: !0 })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        })
      `, prop)) : inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${methodId.name}
      });
    `, prop);
				}
				function buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties = !1) {
					const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, getterDeclared, setterDeclared, static: isStatic } = privateName, { params, body, generator, async } = prop.node, isGetter = getId && 0 === params.length, isSetter = setId && params.length > 0;
					if (isGetter && getterDeclared || isSetter && setterDeclared) return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: !0 })), null;
					if (newHelpers(file) && (isGetter || isSetter) && !privateFieldsAsSymbolsOrProperties) {
						const scope = prop.get("body").scope, thisArg = scope.generateUidIdentifier("this"), state = {
							thisRef: thisArg,
							argumentsPath: []
						};
						if (prop.traverse(thisContextVisitor, state), state.argumentsPath.length) {
							const argumentsId = scope.generateUidIdentifier("arguments");
							scope.push({
								id: argumentsId,
								init: _core.template.expression.ast`[].slice.call(arguments, 1)`
							});
							for (const path$9 of state.argumentsPath) path$9.replaceWith(_core.types.cloneNode(argumentsId));
						}
						params.unshift(_core.types.cloneNode(thisArg));
					}
					let declId = methodId;
					return isGetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
						getterDeclared: !0,
						initAdded: !0
					})), declId = getId) : isSetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
						setterDeclared: !0,
						initAdded: !0
					})), declId = setId) : isStatic && !privateFieldsAsSymbolsOrProperties && (declId = id), inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async), prop);
				}
				const thisContextVisitor = _traverse.visitors.environmentVisitor({
					Identifier(path$9, state) {
						state.argumentsPath && "arguments" === path$9.node.name && state.argumentsPath.push(path$9);
					},
					UnaryExpression(path$9) {
						const { node } = path$9;
						if ("delete" === node.operator) {
							const argument = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(node.argument);
							_core.types.isThisExpression(argument) && path$9.replaceWith(_core.types.booleanLiteral(!0));
						}
					},
					ThisExpression(path$9, state) {
						state.needsClassRef = !0, path$9.replaceWith(_core.types.cloneNode(state.thisRef));
					},
					MetaProperty(path$9) {
						const { node, scope } = path$9;
						"new" === node.meta.name && "target" === node.property.name && path$9.replaceWith(scope.buildUndefinedNode());
					}
				}), innerReferencesVisitor = { ReferencedIdentifier(path$9, state) {
					path$9.scope.bindingIdentifierEquals(path$9.node.name, state.innerBinding) && (state.needsClassRef = !0, path$9.node.name = state.thisRef.name);
				} };
				function replaceThisContext(path$9, ref, innerBindingRef) {
					var _state$thisRef;
					const state = {
						thisRef: ref,
						needsClassRef: !1,
						innerBinding: innerBindingRef
					};
					return path$9.isMethod() || path$9.traverse(thisContextVisitor, state), null != innerBindingRef && null != (_state$thisRef = state.thisRef) && _state$thisRef.name && state.thisRef.name !== innerBindingRef.name && path$9.traverse(innerReferencesVisitor, state), state.needsClassRef;
				}
				function isNameOrLength({ key, computed }) {
					return "Identifier" === key.type ? !computed && ("name" === key.name || "length" === key.name) : "StringLiteral" === key.type && ("name" === key.value || "length" === key.value);
				}
				function inheritPropComments(node, prop) {
					return _core.types.inheritLeadingComments(node, prop.node), _core.types.inheritInnerComments(node, prop.node), node;
				}
				function inheritLoc(node, original) {
					return node.start = original.start, node.end = original.end, node.loc = original.loc, node;
				}
			},
			"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), Object.defineProperty(exports$1, "FEATURES", {
					enumerable: !0,
					get: function() {
						return _features.FEATURES;
					}
				}), Object.defineProperty(exports$1, "buildCheckInRHS", {
					enumerable: !0,
					get: function() {
						return _fields.buildCheckInRHS;
					}
				}), exports$1.createClassFeaturePlugin = function({ name, feature, loose, manipulateOptions, api: api$1, inherits: inherits$6, decoratorVersion }) {
					var _api$assumption;
					if (feature & _features.FEATURES.decorators && ("2023-11" === decoratorVersion || "2023-05" === decoratorVersion || "2023-01" === decoratorVersion || "2022-03" === decoratorVersion || "2021-12" === decoratorVersion)) return (0, _decorators.default)(api$1, { loose }, decoratorVersion, inherits$6);
					api$1 ??= { assumption: () => {} };
					const setPublicClassFields = api$1.assumption("setPublicClassFields"), privateFieldsAsSymbols = api$1.assumption("privateFieldsAsSymbols"), privateFieldsAsProperties = api$1.assumption("privateFieldsAsProperties"), noUninitializedPrivateFieldAccess = null != (_api$assumption = api$1.assumption("noUninitializedPrivateFieldAccess")) && _api$assumption, constantSuper = api$1.assumption("constantSuper"), noDocumentAll = api$1.assumption("noDocumentAll");
					if (privateFieldsAsProperties && privateFieldsAsSymbols) throw new Error("Cannot enable both the \"privateFieldsAsProperties\" and \"privateFieldsAsSymbols\" assumptions as the same time.");
					const privateFieldsAsSymbolsOrProperties = privateFieldsAsProperties || privateFieldsAsSymbols;
					if (!0 === loose) {
						const explicit = [];
						void 0 !== setPublicClassFields && explicit.push("\"setPublicClassFields\""), void 0 !== privateFieldsAsProperties && explicit.push("\"privateFieldsAsProperties\""), void 0 !== privateFieldsAsSymbols && explicit.push("\"privateFieldsAsSymbols\""), 0 !== explicit.length && console.warn(`[${name}]: You are using the "loose: true" option and you are explicitly setting a value for the ${explicit.join(" and ")} assumption${explicit.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:\n\t"assumptions": {\n\t\t"setPublicClassFields": true,\n\t\t"privateFieldsAsSymbols": true\n\t}`);
					}
					return {
						name,
						manipulateOptions,
						inherits: inherits$6,
						pre(file) {
							(0, _features.enableFeature)(file, feature, loose), "number" != typeof file.get(versionKey) && file.get(versionKey) && !_semver.lt(file.get(versionKey), "7.25.9") || file.set(versionKey, "7.25.9");
						},
						visitor: {
							Class(path$9, { file }) {
								var _ref;
								if ("7.25.9" !== file.get(versionKey)) return;
								if (!(0, _features.shouldTransform)(path$9, file)) return;
								const pathIsClassDeclaration = path$9.isClassDeclaration();
								pathIsClassDeclaration && (0, _typescript.assertFieldTransformed)(path$9);
								const loose$1 = (0, _features.isLoose)(file, feature);
								let constructor;
								const isDecorated = (0, _decorators2.hasDecorators)(path$9.node), props = [], elements = [], computedPaths = [], privateNames = new Set(), body = path$9.get("body");
								for (const path$10 of body.get("body")) {
									if ((path$10.isClassProperty() || path$10.isClassMethod()) && path$10.node.computed && computedPaths.push(path$10), path$10.isPrivate()) {
										const { name: name$1 } = path$10.node.key.id, getName = `get ${name$1}`, setName = `set ${name$1}`;
										if (path$10.isClassPrivateMethod()) {
											if ("get" === path$10.node.kind) {
												if (privateNames.has(getName) || privateNames.has(name$1) && !privateNames.has(setName)) throw path$10.buildCodeFrameError("Duplicate private field");
												privateNames.add(getName).add(name$1);
											} else if ("set" === path$10.node.kind) {
												if (privateNames.has(setName) || privateNames.has(name$1) && !privateNames.has(getName)) throw path$10.buildCodeFrameError("Duplicate private field");
												privateNames.add(setName).add(name$1);
											}
										} else {
											if (privateNames.has(name$1) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name$1) && (privateNames.has(getName) || privateNames.has(setName))) throw path$10.buildCodeFrameError("Duplicate private field");
											privateNames.add(name$1);
										}
									}
									path$10.isClassMethod({ kind: "constructor" }) ? constructor = path$10 : (elements.push(path$10), (path$10.isProperty() || path$10.isPrivate() || null != path$10.isStaticBlock && path$10.isStaticBlock()) && props.push(path$10));
								}
								if (!props.length && !isDecorated) return;
								const innerBinding = path$9.node.id;
								let ref;
								innerBinding && pathIsClassDeclaration || (path$9.ensureFunctionName ??= __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.ensureFunctionName, path$9.ensureFunctionName(!1), ref = path$9.scope.generateUidIdentifier((null == innerBinding ? void 0 : innerBinding.name) || "Class"));
								const classRefForDefine = null != (_ref = ref) ? _ref : _core.types.cloneNode(innerBinding), privateNamesMap = (0, _fields.buildPrivateNamesMap)(classRefForDefine.name, null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose$1, props, file), privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, null != privateFieldsAsProperties ? privateFieldsAsProperties : loose$1, null != privateFieldsAsSymbols && privateFieldsAsSymbols, file);
								let keysNodes, staticNodes, instanceNodes, lastInstanceNodeReturnsThis, pureStaticNodes, classBindingNode, wrapClass;
								(0, _fields.transformPrivateNamesUsage)(classRefForDefine, path$9, privateNamesMap, {
									privateFieldsAsProperties: null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose$1,
									noUninitializedPrivateFieldAccess,
									noDocumentAll,
									innerBinding
								}, file), isDecorated ? (staticNodes = pureStaticNodes = keysNodes = [], {instanceNodes, wrapClass} = (0, _decorators2.buildDecoratedClass)(classRefForDefine, path$9, elements, file)) : (keysNodes = (0, _misc.extractComputedKeys)(path$9, computedPaths, file), {staticNodes, pureStaticNodes, instanceNodes, lastInstanceNodeReturnsThis, classBindingNode, wrapClass} = (0, _fields.buildFieldsInitNodes)(ref, path$9.node.superClass, props, privateNamesMap, file, null != setPublicClassFields ? setPublicClassFields : loose$1, null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose$1, noUninitializedPrivateFieldAccess, null != constantSuper ? constantSuper : loose$1, innerBinding)), instanceNodes.length > 0 && (0, _misc.injectInitialization)(path$9, constructor, instanceNodes, (referenceVisitor, state) => {
									if (!isDecorated) for (const prop of props) null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node) || prop.node.static || prop.traverse(referenceVisitor, state);
								}, lastInstanceNodeReturnsThis);
								const wrappedPath = wrapClass(path$9);
								wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]), staticNodes.length > 0 && wrappedPath.insertAfter(staticNodes), pureStaticNodes.length > 0 && wrappedPath.find((parent) => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes), null != classBindingNode && pathIsClassDeclaration && wrappedPath.insertAfter(classBindingNode);
							},
							ExportDefaultDeclaration(path$9, { file }) {
								{
									if ("7.25.9" !== file.get(versionKey)) return;
									const decl = path$9.get("declaration");
									if (decl.isClassDeclaration() && (0, _decorators2.hasDecorators)(decl.node)) if (decl.node.id) path$9.splitExportDeclaration ??= __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration, path$9.splitExportDeclaration();
									else decl.node.type = "ClassExpression";
								}
							}
						}
					};
				}, Object.defineProperty(exports$1, "enableFeature", {
					enumerable: !0,
					get: function() {
						return _features.enableFeature;
					}
				}), Object.defineProperty(exports$1, "injectInitialization", {
					enumerable: !0,
					get: function() {
						return _misc.injectInitialization;
					}
				});
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _decorators = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js"), _semver = __webpack_require__$1("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js"), _fields = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _decorators2 = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js"), _misc = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js"), _features = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/features.js"), _typescript = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
				const versionKey = "@babel/plugin-class-features/version";
			},
			"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.extractComputedKeys = function(path$9, computedPaths, file) {
					const { scope } = path$9, declarations = [], state = {
						classBinding: path$9.node.id && scope.getBinding(path$9.node.id.name),
						file
					};
					for (const computedPath of computedPaths) {
						const computedKey = computedPath.get("key");
						computedKey.isReferencedIdentifier() ? handleClassTDZ(computedKey, state) : computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state);
						const computedNode = computedPath.node;
						if (!computedKey.isConstantExpression()) {
							const assignment = memoiseComputedKey(computedKey.node, scope, scope.generateUidBasedOnNode(computedKey.node));
							assignment && (declarations.push(_core.types.expressionStatement(assignment)), computedNode.key = _core.types.cloneNode(assignment.left));
						}
					}
					return declarations;
				}, exports$1.injectInitialization = function(path$9, constructor, nodes, renamer, lastReturnsThis) {
					if (!nodes.length) return;
					const isDerived = !!path$9.node.superClass;
					if (!constructor) {
						const newConstructor = _core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([]));
						isDerived && (newConstructor.params = [_core.types.restElement(_core.types.identifier("args"))], newConstructor.body.body.push(_core.template.statement.ast`super(...args)`)), [constructor] = path$9.get("body").unshiftContainer("body", newConstructor);
					}
					renamer && renamer(referenceVisitor, { scope: constructor.scope });
					if (isDerived) {
						const bareSupers = [];
						constructor.traverse(findBareSupers, bareSupers);
						let isFirst = !0;
						for (const bareSuper of bareSupers) if (isFirst ? isFirst = !1 : nodes = nodes.map((n) => _core.types.cloneNode(n)), bareSuper.parentPath.isExpressionStatement()) bareSuper.insertAfter(nodes);
						else {
							const allNodes = [bareSuper.node, ...nodes.map((n) => _core.types.toExpression(n))];
							lastReturnsThis || allNodes.push(_core.types.thisExpression()), bareSuper.replaceWith(_core.types.sequenceExpression(allNodes));
						}
					} else constructor.get("body").unshiftContainer("body", nodes);
				}, exports$1.memoiseComputedKey = memoiseComputedKey;
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
				const findBareSupers = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").visitors.environmentVisitor({ Super(path$9) {
					const { node, parentPath } = path$9;
					parentPath.isCallExpression({ callee: node }) && this.push(parentPath);
				} }), referenceVisitor = {
					"TSTypeAnnotation|TypeAnnotation"(path$9) {
						path$9.skip();
					},
					ReferencedIdentifier(path$9, { scope }) {
						scope.hasOwnBinding(path$9.node.name) && (scope.rename(path$9.node.name), path$9.skip());
					}
				};
				function handleClassTDZ(path$9, state) {
					if (state.classBinding && state.classBinding === path$9.scope.getBinding(path$9.node.name)) {
						const classNameTDZError = state.file.addHelper("classNameTDZError"), throwNode = _core.types.callExpression(classNameTDZError, [_core.types.stringLiteral(path$9.node.name)]);
						path$9.replaceWith(_core.types.sequenceExpression([throwNode, path$9.node])), path$9.skip();
					}
				}
				const classFieldDefinitionEvaluationTDZVisitor = { ReferencedIdentifier: handleClassTDZ };
				function memoiseComputedKey(keyNode, scope, hint) {
					if (_core.types.isIdentifier(keyNode) && scope.hasUid(keyNode.name)) return;
					if (_core.types.isAssignmentExpression(keyNode, { operator: "=" }) && _core.types.isIdentifier(keyNode.left) && scope.hasUid(keyNode.left.name)) return _core.types.cloneNode(keyNode);
					{
						const ident = _core.types.identifier(hint);
						return scope.push({
							id: ident,
							kind: "let"
						}), _core.types.assignmentExpression("=", _core.types.cloneNode(ident), keyNode);
					}
				}
			},
			"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.assertFieldTransformed = function(path$9) {
					if (path$9.node.declare) throw path$9.buildCodeFrameError("TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.\nIf you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:\n - @babel/plugin-transform-class-properties\n - @babel/plugin-transform-private-methods\n - @babel/plugin-proposal-decorators");
				};
			},
			"./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				function _interopNamespace(e$1) {
					if (e$1 && e$1.__esModule) return e$1;
					var n = Object.create(null);
					return e$1 && Object.keys(e$1).forEach(function(k$2) {
						if ("default" !== k$2) {
							var d$2 = Object.getOwnPropertyDescriptor(e$1, k$2);
							Object.defineProperty(n, k$2, d$2.get ? d$2 : {
								enumerable: !0,
								get: function() {
									return e$1[k$2];
								}
							});
						}
					}), n.default = e$1, Object.freeze(n);
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 });
				var _t__namespace = _interopNamespace(__webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"));
				function willPathCastToBoolean(path$9) {
					const maybeWrapped = path$9, { node, parentPath } = maybeWrapped;
					if (parentPath.isLogicalExpression()) {
						const { operator, right } = parentPath.node;
						if ("&&" === operator || "||" === operator || "??" === operator && node === right) return willPathCastToBoolean(parentPath);
					}
					if (parentPath.isSequenceExpression()) {
						const { expressions } = parentPath.node;
						return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
					}
					return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
				}
				const { LOGICAL_OPERATORS, arrowFunctionExpression, assignmentExpression, binaryExpression, booleanLiteral, callExpression, cloneNode, conditionalExpression, identifier, isMemberExpression, isOptionalCallExpression, isOptionalMemberExpression, isUpdateExpression, logicalExpression, memberExpression, nullLiteral, optionalCallExpression, optionalMemberExpression, sequenceExpression, updateExpression } = _t__namespace;
				class AssignmentMemoiser {
					constructor() {
						this._map = void 0, this._map = new WeakMap();
					}
					has(key) {
						return this._map.has(key);
					}
					get(key) {
						if (!this.has(key)) return;
						const record = this._map.get(key), { value: value$1 } = record;
						return record.count--, 0 === record.count ? assignmentExpression("=", value$1, key) : value$1;
					}
					set(key, value$1, count) {
						return this._map.set(key, {
							count,
							value: value$1
						});
					}
				}
				function toNonOptional(path$9, base) {
					const { node } = path$9;
					if (isOptionalMemberExpression(node)) return memberExpression(base, node.property, node.computed);
					if (path$9.isOptionalCallExpression()) {
						const callee = path$9.get("callee");
						if (path$9.node.optional && callee.isOptionalMemberExpression()) {
							const object = callee.node.object, context = path$9.scope.maybeGenerateMemoised(object);
							return callee.get("object").replaceWith(assignmentExpression("=", context, object)), callExpression(memberExpression(base, identifier("call")), [context, ...path$9.node.arguments]);
						}
						return callExpression(base, path$9.node.arguments);
					}
					return path$9.node;
				}
				const handle = {
					memoise() {},
					handle(member, noDocumentAll) {
						const { node, parent, parentPath, scope } = member;
						if (member.isOptionalMemberExpression()) {
							if (function(path$9) {
								for (; path$9 && !path$9.isProgram();) {
									const { parentPath: parentPath$1, container, listKey } = path$9, parentNode = parentPath$1.node;
									if (listKey) {
										if (container !== parentNode[listKey]) return !0;
									} else if (container !== parentNode) return !0;
									path$9 = parentPath$1;
								}
								return !1;
							}(member)) return;
							const endPath = member.find(({ node: node$1, parent: parent$1 }) => isOptionalMemberExpression(parent$1) ? parent$1.optional || parent$1.object !== node$1 : !isOptionalCallExpression(parent$1) || node$1 !== member.node && parent$1.optional || parent$1.callee !== node$1);
							if (scope.path.isPattern()) return void endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
							const willEndPathCastToBoolean = willPathCastToBoolean(endPath), rootParentPath = endPath.parentPath;
							if (rootParentPath.isUpdateExpression({ argument: node })) throw member.buildCodeFrameError("can't handle update expression");
							const isAssignment = rootParentPath.isAssignmentExpression({ left: endPath.node }), isDeleteOperation = rootParentPath.isUnaryExpression({ operator: "delete" });
							if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName()) throw member.buildCodeFrameError("can't delete a private class element");
							let startingOptional = member;
							for (;;) if (startingOptional.isOptionalMemberExpression()) {
								if (startingOptional.node.optional) break;
								startingOptional = startingOptional.get("object");
							} else {
								if (!startingOptional.isOptionalCallExpression()) throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
								if (startingOptional.node.optional) break;
								startingOptional = startingOptional.get("callee");
							}
							const startingNode = startingOptional.isOptionalMemberExpression() ? startingOptional.node.object : startingOptional.node.callee, baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode), baseRef = null != baseNeedsMemoised ? baseNeedsMemoised : startingNode, parentIsOptionalCall = parentPath.isOptionalCallExpression({ callee: node }), isOptionalCall = (parent$1) => parentIsOptionalCall, parentIsCall = parentPath.isCallExpression({ callee: node });
							startingOptional.replaceWith(toNonOptional(startingOptional, baseRef)), isOptionalCall() ? parent.optional ? parentPath.replaceWith(this.optionalCall(member, parent.arguments)) : parentPath.replaceWith(this.call(member, parent.arguments)) : parentIsCall ? member.replaceWith(this.boundGet(member)) : this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isAssignmentExpression() ? handleAssignment(this, member, parentPath) : member.replaceWith(this.get(member));
							let context, regular = member.node;
							for (let current = member; current !== endPath;) {
								const parentPath$1 = current.parentPath;
								if (parentPath$1 === endPath && isOptionalCall() && parent.optional) {
									regular = parentPath$1.node;
									break;
								}
								regular = toNonOptional(parentPath$1, regular), current = parentPath$1;
							}
							const endParentPath = endPath.parentPath;
							if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({
								callee: endPath.node,
								optional: !0
							})) {
								const { object } = regular;
								context = member.scope.maybeGenerateMemoised(object), context && (regular.object = assignmentExpression("=", context, object));
							}
							let replacementPath = endPath;
							(isDeleteOperation || isAssignment) && (replacementPath = endParentPath, regular = endParentPath.node);
							const baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode(baseRef), cloneNode(startingNode)) : cloneNode(baseRef);
							if (willEndPathCastToBoolean) {
								let nonNullishCheck;
								nonNullishCheck = noDocumentAll ? binaryExpression("!=", baseMemoised, nullLiteral()) : logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
							} else {
								let nullishCheck;
								nullishCheck = noDocumentAll ? binaryExpression("==", baseMemoised, nullLiteral()) : logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(!0) : scope.buildUndefinedNode(), regular));
							}
							if (context) {
								const endParent = endParentPath.node;
								endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier("call"), !1, !0), [cloneNode(context), ...endParent.arguments], !1));
							}
						} else {
							if (isUpdateExpression(parent, { argument: node })) {
								if (this.simpleSet) return void member.replaceWith(this.simpleSet(member));
								const { operator, prefix } = parent;
								this.memoise(member, 2);
								const ref = scope.generateUidIdentifierBasedOnNode(node);
								scope.push({ id: ref });
								const seq = [assignmentExpression("=", cloneNode(ref), this.get(member))];
								if (prefix) {
									seq.push(updateExpression(operator, cloneNode(ref), prefix));
									const value$1 = sequenceExpression(seq);
									return void parentPath.replaceWith(this.set(member, value$1));
								}
								{
									const ref2 = scope.generateUidIdentifierBasedOnNode(node);
									scope.push({ id: ref2 }), seq.push(assignmentExpression("=", cloneNode(ref2), updateExpression(operator, cloneNode(ref), prefix)), cloneNode(ref));
									const value$1 = sequenceExpression(seq);
									return void parentPath.replaceWith(sequenceExpression([this.set(member, value$1), cloneNode(ref2)]));
								}
							}
							if (parentPath.isAssignmentExpression({ left: node })) handleAssignment(this, member, parentPath);
							else {
								if (!parentPath.isCallExpression({ callee: node })) return parentPath.isOptionalCallExpression({ callee: node }) ? scope.path.isPattern() ? void parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), [])) : void parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments)) : void (this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isForXStatement({ left: node }) || parentPath.isObjectProperty({ value: node }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isObjectProperty({ value: parent }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement() ? member.replaceWith(this.destructureSet(member)) : parentPath.isTaggedTemplateExpression() ? member.replaceWith(this.boundGet(member)) : member.replaceWith(this.get(member)));
								parentPath.replaceWith(this.call(member, parentPath.node.arguments));
							}
						}
					}
				};
				function handleAssignment(state, member, parentPath) {
					if (state.simpleSet) return void member.replaceWith(state.simpleSet(member));
					const { operator, right: value$1 } = parentPath.node;
					if ("=" === operator) parentPath.replaceWith(state.set(member, value$1));
					else {
						const operatorTrunc = operator.slice(0, -1);
						LOGICAL_OPERATORS.includes(operatorTrunc) ? (state.memoise(member, 1), parentPath.replaceWith(logicalExpression(operatorTrunc, state.get(member), state.set(member, value$1)))) : (state.memoise(member, 2), parentPath.replaceWith(state.set(member, binaryExpression(operatorTrunc, state.get(member), value$1))));
					}
				}
				exports$1.default = function(path$9, visitor, state) {
					path$9.traverse(visitor, Object.assign({}, handle, state, { memoiser: new AssignmentMemoiser() }));
				};
			},
			"./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-builder.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _assert = __webpack_require__$1("assert"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { callExpression, cloneNode, expressionStatement, identifier, importDeclaration, importDefaultSpecifier, importNamespaceSpecifier, importSpecifier, memberExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
				exports$1.default = class {
					constructor(importedSource, scope, hub) {
						this._statements = [], this._resultName = null, this._importedSource = void 0, this._scope = scope, this._hub = hub, this._importedSource = importedSource;
					}
					done() {
						return {
							statements: this._statements,
							resultName: this._resultName
						};
					}
					import() {
						return this._statements.push(importDeclaration([], stringLiteral(this._importedSource))), this;
					}
					require() {
						return this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)]))), this;
					}
					namespace(name = "namespace") {
						const local = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
						return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importNamespaceSpecifier(local)], this._resultName = cloneNode(local), this;
					}
					default(name) {
						const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
						return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importDefaultSpecifier(id)], this._resultName = cloneNode(id), this;
					}
					named(name, importName) {
						if ("default" === importName) return this.default(name);
						const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
						return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importSpecifier(id, identifier(importName))], this._resultName = cloneNode(id), this;
					}
					var(name) {
						const id = this._scope.generateUidIdentifier(name);
						let statement = this._statements[this._statements.length - 1];
						return "ExpressionStatement" !== statement.type && (_assert(this._resultName), statement = expressionStatement(this._resultName), this._statements.push(statement)), this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]), this._resultName = cloneNode(id), this;
					}
					defaultInterop() {
						return this._interop(this._hub.addHelper("interopRequireDefault"));
					}
					wildcardInterop() {
						return this._interop(this._hub.addHelper("interopRequireWildcard"));
					}
					_interop(callee) {
						const statement = this._statements[this._statements.length - 1];
						return "ExpressionStatement" === statement.type ? statement.expression = callExpression(callee, [statement.expression]) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init])) : _assert.fail("Unexpected type."), this;
					}
					prop(name) {
						const statement = this._statements[this._statements.length - 1];
						return "ExpressionStatement" === statement.type ? statement.expression = memberExpression(statement.expression, identifier(name)) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name))) : _assert.fail("Unexpected type:" + statement.type), this;
					}
					read(name) {
						this._resultName = memberExpression(this._resultName, identifier(name));
					}
				};
			},
			"./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-injector.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _assert = __webpack_require__$1("assert"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _importBuilder = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-builder.js"), _isModule = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js");
				const { identifier, importSpecifier, numericLiteral, sequenceExpression, isImportDeclaration } = _t;
				function isValueImport(node) {
					return "type" !== node.importKind && "typeof" !== node.importKind;
				}
				function hasNamespaceImport(node) {
					return 1 === node.specifiers.length && "ImportNamespaceSpecifier" === node.specifiers[0].type || 2 === node.specifiers.length && "ImportNamespaceSpecifier" === node.specifiers[1].type;
				}
				function hasDefaultImport(node) {
					return node.specifiers.length > 0 && "ImportDefaultSpecifier" === node.specifiers[0].type;
				}
				function maybeAppendImportSpecifiers(target, source) {
					return target.specifiers.length ? !source.specifiers.length || !hasNamespaceImport(target) && !hasNamespaceImport(source) && (hasDefaultImport(source) && (hasDefaultImport(target) ? source.specifiers[0] = importSpecifier(source.specifiers[0].local, identifier("default")) : target.specifiers.unshift(source.specifiers.shift())), target.specifiers.push(...source.specifiers), !0) : (target.specifiers = source.specifiers, !0);
				}
				exports$1.default = class {
					constructor(path$9, importedSource, opts) {
						this._defaultOpts = {
							importedSource: null,
							importedType: "commonjs",
							importedInterop: "babel",
							importingInterop: "babel",
							ensureLiveReference: !1,
							ensureNoContext: !1,
							importPosition: "before"
						};
						const programPath = path$9.find((p$1) => p$1.isProgram());
						this._programPath = programPath, this._programScope = programPath.scope, this._hub = programPath.hub, this._defaultOpts = this._applyDefaults(importedSource, opts, !0);
					}
					addDefault(importedSourceIn, opts) {
						return this.addNamed("default", importedSourceIn, opts);
					}
					addNamed(importName, importedSourceIn, opts) {
						return _assert("string" == typeof importName), this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
					}
					addNamespace(importedSourceIn, opts) {
						return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
					}
					addSideEffect(importedSourceIn, opts) {
						return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
					}
					_applyDefaults(importedSource, opts, isInit = !1) {
						let newOpts;
						return "string" == typeof importedSource ? newOpts = Object.assign({}, this._defaultOpts, { importedSource }, opts) : (_assert(!opts, "Unexpected secondary arguments."), newOpts = Object.assign({}, this._defaultOpts, importedSource)), !isInit && opts && (void 0 !== opts.nameHint && (newOpts.nameHint = opts.nameHint), void 0 !== opts.blockHoist && (newOpts.blockHoist = opts.blockHoist)), newOpts;
					}
					_generateImport(opts, importName) {
						const isDefault = "default" === importName, isNamed = !!importName && !isDefault, isNamespace = null === importName, { importedSource, importedType, importedInterop, importingInterop, ensureLiveReference, ensureNoContext, nameHint, importPosition, blockHoist } = opts;
						let name = nameHint || importName;
						const isMod = (0, _isModule.default)(this._programPath), isModuleForNode = isMod && "node" === importingInterop, isModuleForBabel = isMod && "babel" === importingInterop;
						if ("after" === importPosition && !isMod) throw new Error("\"importPosition\": \"after\" is only supported in modules");
						const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);
						if ("es6" === importedType) {
							if (!isModuleForNode && !isModuleForBabel) throw new Error("Cannot import an ES6 module from CommonJS");
							builder.import(), isNamespace ? builder.namespace(nameHint || importedSource) : (isDefault || isNamed) && builder.named(name, importName);
						} else {
							if ("commonjs" !== importedType) throw new Error(`Unexpected interopType "${importedType}"`);
							if ("babel" === importedInterop) if (isModuleForNode) {
								name = "default" !== name ? name : importedSource;
								const es6Default = `${importedSource}$es6Default`;
								builder.import(), isNamespace ? builder.default(es6Default).var(name || importedSource).wildcardInterop() : isDefault ? ensureLiveReference ? builder.default(es6Default).var(name || importedSource).defaultInterop().read("default") : builder.default(es6Default).var(name).defaultInterop().prop(importName) : isNamed && builder.default(es6Default).read(importName);
							} else isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource).wildcardInterop() : (isDefault || isNamed) && ensureLiveReference ? isDefault ? (name = "default" !== name ? name : importedSource, builder.var(name).read(importName), builder.defaultInterop()) : builder.var(importedSource).read(importName) : isDefault ? builder.var(name).defaultInterop().prop(importName) : isNamed && builder.var(name).prop(importName));
							else if ("compiled" === importedInterop) isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : (isDefault || isNamed) && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : (isDefault || isNamed) && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.prop(importName).var(name)));
							else {
								if ("uncompiled" !== importedInterop) throw new Error(`Unknown importedInterop "${importedInterop}".`);
								if (isDefault && ensureLiveReference) throw new Error("No live reference for commonjs default");
								isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : isDefault ? builder.var(name) : isNamed && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.var(name).prop(importName)));
							}
						}
						const { statements, resultName } = builder.done();
						return this._insertStatements(statements, importPosition, blockHoist), (isDefault || isNamed) && ensureNoContext && "Identifier" !== resultName.type ? sequenceExpression([numericLiteral(0), resultName]) : resultName;
					}
					_insertStatements(statements, importPosition = "before", blockHoist = 3) {
						if ("after" === importPosition) {
							if (this._insertStatementsAfter(statements)) return;
						} else if (this._insertStatementsBefore(statements, blockHoist)) return;
						this._programPath.unshiftContainer("body", statements);
					}
					_insertStatementsBefore(statements, blockHoist) {
						if (1 === statements.length && isImportDeclaration(statements[0]) && isValueImport(statements[0])) {
							const firstImportDecl = this._programPath.get("body").find((p$1) => p$1.isImportDeclaration() && isValueImport(p$1.node));
							if ((null == firstImportDecl ? void 0 : firstImportDecl.node.source.value) === statements[0].source.value && maybeAppendImportSpecifiers(firstImportDecl.node, statements[0])) return !0;
						}
						statements.forEach((node) => {
							node._blockHoist = blockHoist;
						});
						const targetPath = this._programPath.get("body").find((p$1) => {
							const val = p$1.node._blockHoist;
							return Number.isFinite(val) && val < 4;
						});
						return !!targetPath && (targetPath.insertBefore(statements), !0);
					}
					_insertStatementsAfter(statements) {
						const statementsSet = new Set(statements), importDeclarations = new Map();
						for (const statement of statements) if (isImportDeclaration(statement) && isValueImport(statement)) {
							const source = statement.source.value;
							importDeclarations.has(source) || importDeclarations.set(source, []), importDeclarations.get(source).push(statement);
						}
						let lastImportPath = null;
						for (const bodyStmt of this._programPath.get("body")) if (bodyStmt.isImportDeclaration() && isValueImport(bodyStmt.node)) {
							lastImportPath = bodyStmt;
							const source = bodyStmt.node.source.value, newImports = importDeclarations.get(source);
							if (!newImports) continue;
							for (const decl of newImports) statementsSet.has(decl) && maybeAppendImportSpecifiers(bodyStmt.node, decl) && statementsSet.delete(decl);
						}
						return 0 === statementsSet.size || (lastImportPath && lastImportPath.insertAfter(Array.from(statementsSet)), !!lastImportPath);
					}
				};
			},
			"./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), Object.defineProperty(exports$1, "ImportInjector", {
					enumerable: !0,
					get: function() {
						return _importInjector.default;
					}
				}), exports$1.addDefault = function(path$9, importedSource, opts) {
					return new _importInjector.default(path$9).addDefault(importedSource, opts);
				}, exports$1.addNamed = function(path$9, name, importedSource, opts) {
					return new _importInjector.default(path$9).addNamed(name, importedSource, opts);
				}, exports$1.addNamespace = function(path$9, importedSource, opts) {
					return new _importInjector.default(path$9).addNamespace(importedSource, opts);
				}, exports$1.addSideEffect = function(path$9, importedSource, opts) {
					return new _importInjector.default(path$9).addSideEffect(importedSource, opts);
				}, Object.defineProperty(exports$1, "isModule", {
					enumerable: !0,
					get: function() {
						return _isModule.default;
					}
				});
				var _importInjector = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-injector.js"), _isModule = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js");
			},
			"./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(path$9) {
					return "module" === path$9.node.sourceType;
				};
			},
			"./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.buildDynamicImport = function(node, deferToThen, wrapWithPromise, builder) {
					const specifier = _core.types.isCallExpression(node) ? node.arguments[0] : node.source;
					if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && 0 === specifier.quasis.length) return deferToThen ? _core.template.expression.ast`
        Promise.resolve().then(() => ${builder(specifier)})
      ` : builder(specifier);
					const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier("specifier") : _core.types.templateLiteral([_core.types.templateElement({ raw: "" }), _core.types.templateElement({ raw: "" })], [_core.types.identifier("specifier")]);
					return deferToThen ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder(_core.types.identifier("s"))})
      )(${specifier})
    ` : wrapWithPromise ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${builder(specifierToString)}))
      )(${specifier})
    ` : _core.template.expression.ast`
      (specifier => ${builder(specifierToString)})(${specifier})
    `;
				};
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
				exports$1.getDynamicImportSource = function(node) {
					const [source] = node.arguments;
					return _core.types.isStringLiteral(source) || _core.types.isTemplateLiteral(source) ? source : _core.template.expression.ast`\`\${${source}}\``;
				};
			},
			"./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = getModuleName;
				{
					const originalGetModuleName = getModuleName;
					exports$1.default = getModuleName = function(rootOpts, pluginOpts) {
						var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
						return originalGetModuleName(rootOpts, {
							moduleId: null != (_pluginOpts$moduleId = pluginOpts.moduleId) ? _pluginOpts$moduleId : rootOpts.moduleId,
							moduleIds: null != (_pluginOpts$moduleIds = pluginOpts.moduleIds) ? _pluginOpts$moduleIds : rootOpts.moduleIds,
							getModuleId: null != (_pluginOpts$getModule = pluginOpts.getModuleId) ? _pluginOpts$getModule : rootOpts.getModuleId,
							moduleRoot: null != (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) ? _pluginOpts$moduleRoo : rootOpts.moduleRoot
						});
					};
				}
				function getModuleName(rootOpts, pluginOpts) {
					const { filename, filenameRelative = filename, sourceRoot = pluginOpts.moduleRoot } = rootOpts, { moduleId, moduleIds = !!moduleId, getModuleId, moduleRoot = sourceRoot } = pluginOpts;
					if (!moduleIds) return null;
					if (null != moduleId && !getModuleId) return moduleId;
					let moduleName = null != moduleRoot ? moduleRoot + "/" : "";
					if (filenameRelative) {
						const sourceRootReplacer = null != sourceRoot ? new RegExp("^" + sourceRoot + "/?") : "";
						moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.\w*$/, "");
					}
					return moduleName = moduleName.replace(/\\/g, "/"), getModuleId && getModuleId(moduleName) || moduleName;
				}
			},
			"./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), Object.defineProperty(exports$1, "buildDynamicImport", {
					enumerable: !0,
					get: function() {
						return _dynamicImport.buildDynamicImport;
					}
				}), exports$1.buildNamespaceInitStatements = function(metadata, sourceMetadata, constantReexports = !1, wrapReference = Lazy.wrapReference) {
					var _wrapReference;
					const statements = [], srcNamespaceId = _core.types.identifier(sourceMetadata.name);
					for (const localName of sourceMetadata.importsNamespace) localName !== sourceMetadata.name && statements.push(_core.template.statement`var NAME = SOURCE;`({
						NAME: localName,
						SOURCE: _core.types.cloneNode(srcNamespaceId)
					}));
					const srcNamespace = null != (_wrapReference = wrapReference(srcNamespaceId, sourceMetadata.wrap)) ? _wrapReference : srcNamespaceId;
					constantReexports && statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, !0, wrapReference));
					for (const exportName of sourceMetadata.reexportNamespace) statements.push((_core.types.isIdentifier(srcNamespace) ? _core.template.statement`EXPORTS.NAME = NAMESPACE;` : _core.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          `)({
						EXPORTS: metadata.exportName,
						NAME: exportName,
						NAMESPACE: _core.types.cloneNode(srcNamespace)
					}));
					if (sourceMetadata.reexportAll) {
						const statement = function(metadata$1, namespace, constantReexports$1) {
							return (constantReexports$1 ? _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({
								NAMESPACE: namespace,
								EXPORTS: metadata$1.exportName,
								VERIFY_NAME_LIST: metadata$1.exportNameListName ? _core.template`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({ EXPORTS_LIST: metadata$1.exportNameListName }) : null
							});
						}(metadata, _core.types.cloneNode(srcNamespace), constantReexports);
						statement.loc = sourceMetadata.reexportAll.loc, statements.push(statement);
					}
					return statements;
				}, exports$1.ensureStatementsHoisted = function(statements) {
					statements.forEach((header) => {
						header._blockHoist = 3;
					});
				}, Object.defineProperty(exports$1, "getModuleName", {
					enumerable: !0,
					get: function() {
						return _getModuleName.default;
					}
				}), Object.defineProperty(exports$1, "hasExports", {
					enumerable: !0,
					get: function() {
						return _normalizeAndLoadMetadata.hasExports;
					}
				}), Object.defineProperty(exports$1, "isModule", {
					enumerable: !0,
					get: function() {
						return _helperModuleImports.isModule;
					}
				}), Object.defineProperty(exports$1, "isSideEffectImport", {
					enumerable: !0,
					get: function() {
						return _normalizeAndLoadMetadata.isSideEffectImport;
					}
				}), exports$1.rewriteModuleStatementsAndPrepareHeader = function(path$9, { exportName, strict, allowTopLevelThis, strictMode, noInterop, importInterop = noInterop ? "none" : "babel", lazy, getWrapperPayload = Lazy.toGetWrapperPayload(null != lazy && lazy), wrapReference = Lazy.wrapReference, esNamespaceOnly, filename, constantReexports = arguments[1].loose, enumerableModuleMeta = arguments[1].loose, noIncompleteNsImportDetection }) {
					(0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop), _assert((0, _helperModuleImports.isModule)(path$9), "Cannot process module statements in a script"), path$9.node.sourceType = "script";
					const meta = (0, _normalizeAndLoadMetadata.default)(path$9, exportName, {
						importInterop,
						initializeReexports: constantReexports,
						getWrapperPayload,
						esNamespaceOnly,
						filename
					});
					allowTopLevelThis || (0, _rewriteThis.default)(path$9);
					if ((0, _rewriteLiveReferences.default)(path$9, meta, wrapReference), !1 !== strictMode) path$9.node.directives.some((directive) => "use strict" === directive.value.value) || path$9.unshiftContainer("directives", _core.types.directive(_core.types.directiveLiteral("use strict")));
					const headers = [];
					(0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict && headers.push(function(metadata, enumerableModuleMeta$1 = !1) {
						return (enumerableModuleMeta$1 ? _core.template.statement`
        EXPORTS.__esModule = true;
      ` : _core.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({ EXPORTS: metadata.exportName });
					}(meta, enumerableModuleMeta));
					const nameList = function(programPath, metadata) {
						const exportedVars = Object.create(null);
						for (const data of metadata.local.values()) for (const name$1 of data.names) exportedVars[name$1] = !0;
						let hasReexport = !1;
						for (const data of metadata.source.values()) {
							for (const exportName$1 of data.reexports.keys()) exportedVars[exportName$1] = !0;
							for (const exportName$1 of data.reexportNamespace) exportedVars[exportName$1] = !0;
							hasReexport = hasReexport || !!data.reexportAll;
						}
						if (!hasReexport || 0 === Object.keys(exportedVars).length) return null;
						const name = programPath.scope.generateUidIdentifier("exportNames");
						return delete exportedVars.default, {
							name: name.name,
							statement: _core.types.variableDeclaration("var", [_core.types.variableDeclarator(name, _core.types.valueToNode(exportedVars))])
						};
					}(path$9, meta);
					nameList && (meta.exportNameListName = nameList.name, headers.push(nameList.statement));
					return headers.push(...function(programPath, metadata, wrapReference$1, constantReexports$1 = !1, noIncompleteNsImportDetection$1 = !1) {
						const initStatements = [];
						for (const [localName, data] of metadata.local) if ("import" === data.kind);
						else if ("hoisted" === data.kind) initStatements.push([data.names[0], buildInitStatement(metadata, data.names, _core.types.identifier(localName))]);
						else if (!noIncompleteNsImportDetection$1) for (const exportName$1 of data.names) initStatements.push([exportName$1, null]);
						for (const data of metadata.source.values()) {
							if (!constantReexports$1) {
								const reexportsStatements = buildReexportsFromMeta(metadata, data, !1, wrapReference$1), reexports = [...data.reexports.keys()];
								for (let i = 0; i < reexportsStatements.length; i++) initStatements.push([reexports[i], reexportsStatements[i]]);
							}
							if (!noIncompleteNsImportDetection$1) for (const exportName$1 of data.reexportNamespace) initStatements.push([exportName$1, null]);
						}
						initStatements.sort(([a], [b$2]) => a < b$2 ? -1 : b$2 < a ? 1 : 0);
						const results = [];
						if (noIncompleteNsImportDetection$1) for (const [, initStatement] of initStatements) results.push(initStatement);
						else {
							const chunkSize = 100;
							for (let i = 0; i < initStatements.length; i += chunkSize) {
								let uninitializedExportNames = [];
								for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {
									const [exportName$1, initStatement] = initStatements[i + j];
									null !== initStatement ? (uninitializedExportNames.length > 0 && (results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode())), uninitializedExportNames = []), results.push(initStatement)) : uninitializedExportNames.push(exportName$1);
								}
								uninitializedExportNames.length > 0 && results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
							}
						}
						return results;
					}(path$9, meta, wrapReference, constantReexports, noIncompleteNsImportDetection)), {
						meta,
						headers
					};
				}, Object.defineProperty(exports$1, "rewriteThis", {
					enumerable: !0,
					get: function() {
						return _rewriteThis.default;
					}
				}), exports$1.wrapInterop = function(programPath, expr, type$1) {
					if ("none" === type$1) return null;
					if ("node-namespace" === type$1) return _core.types.callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, _core.types.booleanLiteral(!0)]);
					if ("node-default" === type$1) return null;
					let helper;
					if ("default" === type$1) helper = "interopRequireDefault";
					else {
						if ("namespace" !== type$1) throw new Error(`Unknown interop: ${type$1}`);
						helper = "interopRequireWildcard";
					}
					return _core.types.callExpression(programPath.hub.addHelper(helper), [expr]);
				};
				var _assert = __webpack_require__$1("assert"), _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleImports = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), _rewriteThis = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js"), _rewriteLiveReferences = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"), _normalizeAndLoadMetadata = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"), Lazy = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js"), _dynamicImport = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js"), _getModuleName = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js");
				exports$1.getDynamicImportSource = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js").getDynamicImportSource;
				const ReexportTemplate = {
					constant: ({ exports: exports$2, exportName, namespaceImport }) => _core.template.statement.ast`
      ${exports$2}.${exportName} = ${namespaceImport};
    `,
					constantComputed: ({ exports: exports$2, exportName, namespaceImport }) => _core.template.statement.ast`
      ${exports$2}["${exportName}"] = ${namespaceImport};
    `,
					spec: ({ exports: exports$2, exportName, namespaceImport }) => _core.template.statement.ast`
      Object.defineProperty(${exports$2}, "${exportName}", {
        enumerable: true,
        get: function() {
          return ${namespaceImport};
        },
      });
    `
				};
				function buildReexportsFromMeta(meta, metadata, constantReexports, wrapReference) {
					var _wrapReference2;
					let namespace = _core.types.identifier(metadata.name);
					namespace = null != (_wrapReference2 = wrapReference(namespace, metadata.wrap)) ? _wrapReference2 : namespace;
					const { stringSpecifiers } = meta;
					return Array.from(metadata.reexports, ([exportName, importName]) => {
						let namespaceImport = _core.types.cloneNode(namespace);
						"default" === importName && "node-default" === metadata.interop || (namespaceImport = stringSpecifiers.has(importName) ? _core.types.memberExpression(namespaceImport, _core.types.stringLiteral(importName), !0) : _core.types.memberExpression(namespaceImport, _core.types.identifier(importName)));
						const astNodes = {
							exports: meta.exportName,
							exportName,
							namespaceImport
						};
						return constantReexports || _core.types.isIdentifier(namespaceImport) ? stringSpecifiers.has(exportName) ? ReexportTemplate.constantComputed(astNodes) : ReexportTemplate.constant(astNodes) : ReexportTemplate.spec(astNodes);
					});
				}
				const InitTemplate = {
					computed: ({ exports: exports$2, name, value: value$1 }) => _core.template.expression.ast`${exports$2}["${name}"] = ${value$1}`,
					default: ({ exports: exports$2, name, value: value$1 }) => _core.template.expression.ast`${exports$2}.${name} = ${value$1}`,
					define: ({ exports: exports$2, name, value: value$1 }) => _core.template.expression.ast`
      Object.defineProperty(${exports$2}, "${name}", {
        enumerable: true,
        value: void 0,
        writable: true
      })["${name}"] = ${value$1}`
				};
				function buildInitStatement(metadata, exportNames, initExpr) {
					const { stringSpecifiers, exportName: exports$2 } = metadata;
					return _core.types.expressionStatement(exportNames.reduce((value$1, name) => {
						const params = {
							exports: exports$2,
							name,
							value: value$1
						};
						return "__proto__" === name ? InitTemplate.define(params) : stringSpecifiers.has(name) ? InitTemplate.computed(params) : InitTemplate.default(params);
					}, initExpr));
				}
			},
			"./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.toGetWrapperPayload = function(lazy) {
					return (source, metadata) => {
						if (!1 === lazy) return null;
						if ((0, _normalizeAndLoadMetadata.isSideEffectImport)(metadata) || metadata.reexportAll) return null;
						if (!0 === lazy) return source.includes(".") ? null : "lazy";
						if (Array.isArray(lazy)) return lazy.includes(source) ? "lazy" : null;
						if ("function" == typeof lazy) return lazy(source) ? "lazy" : null;
						throw new Error(".lazy must be a boolean, string array, or function");
					};
				}, exports$1.wrapReference = function(ref, payload) {
					return "lazy" === payload ? _core.types.callExpression(ref, []) : null;
				};
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _normalizeAndLoadMetadata = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js");
			},
			"./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(programPath, exportName, { importInterop, initializeReexports = !1, getWrapperPayload, esNamespaceOnly = !1, filename }) {
					exportName || (exportName = programPath.scope.generateUidIdentifier("exports").name);
					const stringSpecifiers = new Set();
					(function(programPath$1) {
						programPath$1.get("body").forEach((child$1) => {
							child$1.isExportDefaultDeclaration() && (child$1.splitExportDeclaration ??= __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration, child$1.splitExportDeclaration());
						});
					})(programPath);
					const { local, sources, hasExports } = function(programPath$1, { getWrapperPayload: getWrapperPayload$1, initializeReexports: initializeReexports$1 }, stringSpecifiers$1) {
						const localData = function(programPath$2, initializeReexports$2, stringSpecifiers$2) {
							const bindingKindLookup = new Map();
							programPath$2.get("body").forEach((child$1) => {
								let kind;
								if (child$1.isImportDeclaration()) kind = "import";
								else {
									if (child$1.isExportDefaultDeclaration() && (child$1 = child$1.get("declaration")), child$1.isExportNamedDeclaration()) {
										if (child$1.node.declaration) child$1 = child$1.get("declaration");
										else if (initializeReexports$2 && child$1.node.source && child$1.get("source").isStringLiteral()) return void child$1.get("specifiers").forEach((spec) => {
											assertExportSpecifier(spec), bindingKindLookup.set(spec.get("local").node.name, "block");
										});
									}
									if (child$1.isFunctionDeclaration()) kind = "hoisted";
									else if (child$1.isClassDeclaration()) kind = "block";
									else if (child$1.isVariableDeclaration({ kind: "var" })) kind = "var";
									else {
										if (!child$1.isVariableDeclaration()) return;
										kind = "block";
									}
								}
								Object.keys(child$1.getOuterBindingIdentifiers()).forEach((name) => {
									bindingKindLookup.set(name, kind);
								});
							});
							const localMetadata = new Map(), getLocalMetadata = (idPath) => {
								const localName = idPath.node.name;
								let metadata = localMetadata.get(localName);
								if (!metadata) {
									const kind = bindingKindLookup.get(localName);
									if (void 0 === kind) throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
									metadata = {
										names: [],
										kind
									}, localMetadata.set(localName, metadata);
								}
								return metadata;
							};
							return programPath$2.get("body").forEach((child$1) => {
								if (!child$1.isExportNamedDeclaration() || !initializeReexports$2 && child$1.node.source) {
									if (child$1.isExportDefaultDeclaration()) {
										const declaration = child$1.get("declaration");
										if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration()) throw declaration.buildCodeFrameError("Unexpected default expression export.");
										getLocalMetadata(declaration.get("id")).names.push("default");
									}
								} else if (child$1.node.declaration) {
									const declaration = child$1.get("declaration"), ids = declaration.getOuterBindingIdentifierPaths();
									Object.keys(ids).forEach((name) => {
										if ("__esModule" === name) throw declaration.buildCodeFrameError("Illegal export \"__esModule\".");
										getLocalMetadata(ids[name]).names.push(name);
									});
								} else child$1.get("specifiers").forEach((spec) => {
									const local$1 = spec.get("local"), exported = spec.get("exported"), localMetadata$1 = getLocalMetadata(local$1), exportName$1 = getExportSpecifierName(exported, stringSpecifiers$2);
									if ("__esModule" === exportName$1) throw exported.buildCodeFrameError("Illegal export \"__esModule\".");
									localMetadata$1.names.push(exportName$1);
								});
							}), localMetadata;
						}(programPath$1, initializeReexports$1, stringSpecifiers$1), importNodes = new Map(), sourceData = new Map(), getData = (sourceNode, node) => {
							const source = sourceNode.value;
							let data = sourceData.get(source);
							return data ? importNodes.get(source).push(node) : (data = {
								name: programPath$1.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name,
								interop: "none",
								loc: null,
								imports: new Map(),
								importsNamespace: new Set(),
								reexports: new Map(),
								reexportNamespace: new Set(),
								reexportAll: null,
								wrap: null,
								get lazy() {
									return "lazy" === this.wrap;
								},
								referenced: !1
							}, sourceData.set(source, data), importNodes.set(source, [node])), data;
						};
						let hasExports$1 = !1;
						programPath$1.get("body").forEach((child$1) => {
							if (child$1.isImportDeclaration()) {
								const data = getData(child$1.node.source, child$1.node);
								data.loc || (data.loc = child$1.node.loc), child$1.get("specifiers").forEach((spec) => {
									if (spec.isImportDefaultSpecifier()) {
										const localName = spec.get("local").node.name;
										data.imports.set(localName, "default");
										const reexport = localData.get(localName);
										reexport && (localData.delete(localName), reexport.names.forEach((name) => {
											data.reexports.set(name, "default");
										}), data.referenced = !0);
									} else if (spec.isImportNamespaceSpecifier()) {
										const localName = spec.get("local").node.name;
										data.importsNamespace.add(localName);
										const reexport = localData.get(localName);
										reexport && (localData.delete(localName), reexport.names.forEach((name) => {
											data.reexportNamespace.add(name);
										}), data.referenced = !0);
									} else if (spec.isImportSpecifier()) {
										const importName = getExportSpecifierName(spec.get("imported"), stringSpecifiers$1), localName = spec.get("local").node.name;
										data.imports.set(localName, importName);
										const reexport = localData.get(localName);
										reexport && (localData.delete(localName), reexport.names.forEach((name) => {
											data.reexports.set(name, importName);
										}), data.referenced = !0);
									}
								});
							} else if (child$1.isExportAllDeclaration()) {
								hasExports$1 = !0;
								const data = getData(child$1.node.source, child$1.node);
								data.loc || (data.loc = child$1.node.loc), data.reexportAll = { loc: child$1.node.loc }, data.referenced = !0;
							} else if (child$1.isExportNamedDeclaration() && child$1.node.source) {
								hasExports$1 = !0;
								const data = getData(child$1.node.source, child$1.node);
								data.loc || (data.loc = child$1.node.loc), child$1.get("specifiers").forEach((spec) => {
									assertExportSpecifier(spec);
									const importName = getExportSpecifierName(spec.get("local"), stringSpecifiers$1), exportName$1 = getExportSpecifierName(spec.get("exported"), stringSpecifiers$1);
									if (data.reexports.set(exportName$1, importName), data.referenced = !0, "__esModule" === exportName$1) throw spec.get("exported").buildCodeFrameError("Illegal export \"__esModule\".");
								});
							} else (child$1.isExportNamedDeclaration() || child$1.isExportDefaultDeclaration()) && (hasExports$1 = !0);
						});
						for (const metadata of sourceData.values()) {
							let needsDefault = !1, needsNamed = !1;
							metadata.importsNamespace.size > 0 && (needsDefault = !0, needsNamed = !0), metadata.reexportAll && (needsNamed = !0);
							for (const importName of metadata.imports.values()) "default" === importName ? needsDefault = !0 : needsNamed = !0;
							for (const importName of metadata.reexports.values()) "default" === importName ? needsDefault = !0 : needsNamed = !0;
							needsDefault && needsNamed ? metadata.interop = "namespace" : needsDefault && (metadata.interop = "default");
						}
						if (getWrapperPayload$1) for (const [source, metadata] of sourceData) metadata.wrap = getWrapperPayload$1(source, metadata, importNodes.get(source));
						return {
							hasExports: hasExports$1,
							local: localData,
							sources: sourceData
						};
					}(programPath, {
						initializeReexports,
						getWrapperPayload
					}, stringSpecifiers);
					(function(programPath$1) {
						programPath$1.get("body").forEach((child$1) => {
							if (child$1.isImportDeclaration()) child$1.remove();
							else if (child$1.isExportNamedDeclaration()) child$1.node.declaration ? (child$1.node.declaration._blockHoist = child$1.node._blockHoist, child$1.replaceWith(child$1.node.declaration)) : child$1.remove();
							else if (child$1.isExportDefaultDeclaration()) {
								const declaration = child$1.get("declaration");
								if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration()) throw declaration.buildCodeFrameError("Unexpected default expression export.");
								declaration._blockHoist = child$1.node._blockHoist, child$1.replaceWith(declaration);
							} else child$1.isExportAllDeclaration() && child$1.remove();
						});
					})(programPath);
					for (const [source, metadata] of sources) {
						const { importsNamespace, imports } = metadata;
						if (importsNamespace.size > 0 && 0 === imports.size) {
							const [nameOfnamespace] = importsNamespace;
							metadata.name = nameOfnamespace;
						}
						const resolvedInterop = resolveImportInterop(importInterop, source, filename);
						"none" === resolvedInterop ? metadata.interop = "none" : "node" === resolvedInterop && "namespace" === metadata.interop ? metadata.interop = "node-namespace" : "node" === resolvedInterop && "default" === metadata.interop ? metadata.interop = "node-default" : esNamespaceOnly && "namespace" === metadata.interop && (metadata.interop = "default");
					}
					return {
						exportName,
						exportNameListName: null,
						hasExports,
						local,
						source: sources,
						stringSpecifiers
					};
				}, exports$1.hasExports = function(metadata) {
					return metadata.hasExports;
				}, exports$1.isSideEffectImport = function(source) {
					return 0 === source.imports.size && 0 === source.importsNamespace.size && 0 === source.reexports.size && 0 === source.reexportNamespace.size && !source.reexportAll;
				}, exports$1.validateImportInteropOption = validateImportInteropOption;
				var _path = __webpack_require__$1("path"), _helperValidatorIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
				function validateImportInteropOption(importInterop) {
					if ("function" != typeof importInterop && "none" !== importInterop && "babel" !== importInterop && "node" !== importInterop) throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
					return importInterop;
				}
				function resolveImportInterop(importInterop, source, filename) {
					return "function" == typeof importInterop ? validateImportInteropOption(importInterop(source, filename)) : importInterop;
				}
				function getExportSpecifierName(path$9, stringSpecifiers) {
					if (path$9.isIdentifier()) return path$9.node.name;
					if (path$9.isStringLiteral()) {
						const stringValue = path$9.node.value;
						return (0, _helperValidatorIdentifier.isIdentifierName)(stringValue) || stringSpecifiers.add(stringValue), stringValue;
					}
					throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path$9.node.type}`);
				}
				function assertExportSpecifier(path$9) {
					if (!path$9.isExportSpecifier()) throw path$9.isExportNamespaceSpecifier() ? path$9.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform-export-namespace-from`.") : path$9.buildCodeFrameError("Unexpected export specifier type");
				}
			},
			"./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(programPath, metadata, wrapReference) {
					const imported = new Map(), exported = new Map(), requeueInParent = (path$9) => {
						programPath.requeue(path$9);
					};
					for (const [source, data] of metadata.source) {
						for (const [localName, importName] of data.imports) imported.set(localName, [
							source,
							importName,
							null
						]);
						for (const localName of data.importsNamespace) imported.set(localName, [
							source,
							null,
							localName
						]);
					}
					for (const [local, data] of metadata.local) {
						let exportMeta = exported.get(local);
						exportMeta || (exportMeta = [], exported.set(local, exportMeta)), exportMeta.push(...data.names);
					}
					const rewriteBindingInitVisitorState = {
						metadata,
						requeueInParent,
						scope: programPath.scope,
						exported
					};
					programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
					const rewriteReferencesVisitorState = {
						seen: new WeakSet(),
						metadata,
						requeueInParent,
						scope: programPath.scope,
						imported,
						exported,
						buildImportReference([source, importName, localName], identNode) {
							const meta = metadata.source.get(source);
							if (meta.referenced = !0, localName) {
								var _wrapReference;
								if (meta.wrap) identNode = null != (_wrapReference = wrapReference(identNode, meta.wrap)) ? _wrapReference : identNode;
								return identNode;
							}
							let namespace = _core.types.identifier(meta.name);
							var _wrapReference2;
							meta.wrap && (namespace = null != (_wrapReference2 = wrapReference(namespace, meta.wrap)) ? _wrapReference2 : namespace);
							if ("default" === importName && "node-default" === meta.interop) return namespace;
							const computed = metadata.stringSpecifiers.has(importName);
							return _core.types.memberExpression(namespace, computed ? _core.types.stringLiteral(importName) : _core.types.identifier(importName), computed);
						}
					};
					programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
				};
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
				const rewriteBindingInitVisitor = {
					Scope(path$9) {
						path$9.skip();
					},
					ClassDeclaration(path$9) {
						const { requeueInParent, exported, metadata } = this, { id } = path$9.node;
						if (!id) throw new Error("Expected class to have a name");
						const localName = id.name, exportNames = exported.get(localName) || [];
						if (exportNames.length > 0) {
							const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, _core.types.identifier(localName), path$9.scope));
							statement._blockHoist = path$9.node._blockHoist, requeueInParent(path$9.insertAfter(statement)[0]);
						}
					},
					VariableDeclaration(path$9) {
						const { requeueInParent, exported, metadata } = this, isVar = "var" === path$9.node.kind;
						for (const decl of path$9.get("declarations")) {
							const { id } = decl.node;
							let { init: init$1 } = decl.node;
							if (!_core.types.isIdentifier(id) || !exported.has(id.name) || _core.types.isArrowFunctionExpression(init$1) || _core.types.isFunctionExpression(init$1) && !init$1.id || _core.types.isClassExpression(init$1) && !init$1.id) {
								for (const localName of Object.keys(decl.getOuterBindingIdentifiers())) if (exported.has(localName)) {
									const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exported.get(localName), _core.types.identifier(localName), path$9.scope));
									statement._blockHoist = path$9.node._blockHoist, requeueInParent(path$9.insertAfter(statement)[0]);
								}
							} else {
								if (!init$1) {
									if (isVar) continue;
									init$1 = path$9.scope.buildUndefinedNode();
								}
								decl.node.init = buildBindingExportAssignmentExpression(metadata, exported.get(id.name), init$1, path$9.scope), requeueInParent(decl.get("init"));
							}
						}
					}
				}, buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
					const exportsObjectName = metadata.exportName;
					for (let currentScope = scope; null != currentScope; currentScope = currentScope.parent) currentScope.hasOwnBinding(exportsObjectName) && currentScope.rename(exportsObjectName);
					return (exportNames || []).reduce((expr, exportName) => {
						const { stringSpecifiers } = metadata, computed = stringSpecifiers.has(exportName);
						return _core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.identifier(exportsObjectName), computed ? _core.types.stringLiteral(exportName) : _core.types.identifier(exportName), computed), expr);
					}, localExpr);
				}, buildImportThrow = (localName) => _core.template.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `, rewriteReferencesVisitor = {
					ReferencedIdentifier(path$9) {
						const { seen, buildImportReference, scope, imported, requeueInParent } = this;
						if (seen.has(path$9.node)) return;
						seen.add(path$9.node);
						const localName = path$9.node.name, importData = imported.get(localName);
						if (importData) {
							if (function(path$10) {
								do
									switch (path$10.parent.type) {
										case "TSTypeAnnotation":
										case "TSTypeAliasDeclaration":
										case "TSTypeReference":
										case "TypeAnnotation":
										case "TypeAlias": return !0;
										case "ExportSpecifier": return "type" === path$10.parentPath.parent.exportKind;
										default: if (path$10.parentPath.isStatement() || path$10.parentPath.isExpression()) return !1;
									}
								while (path$10 = path$10.parentPath);
							}(path$9)) throw path$9.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
							const localBinding = path$9.scope.getBinding(localName);
							if (scope.getBinding(localName) !== localBinding) return;
							const ref = buildImportReference(importData, path$9.node);
							if (ref.loc = path$9.node.loc, (path$9.parentPath.isCallExpression({ callee: path$9.node }) || path$9.parentPath.isOptionalCallExpression({ callee: path$9.node }) || path$9.parentPath.isTaggedTemplateExpression({ tag: path$9.node })) && _core.types.isMemberExpression(ref)) path$9.replaceWith(_core.types.sequenceExpression([_core.types.numericLiteral(0), ref]));
							else if (path$9.isJSXIdentifier() && _core.types.isMemberExpression(ref)) {
								const { object, property } = ref;
								path$9.replaceWith(_core.types.jsxMemberExpression(_core.types.jsxIdentifier(object.name), _core.types.jsxIdentifier(property.name)));
							} else path$9.replaceWith(ref);
							requeueInParent(path$9), path$9.skip();
						}
					},
					UpdateExpression(path$9) {
						const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
						if (seen.has(path$9.node)) return;
						seen.add(path$9.node);
						const arg = path$9.get("argument");
						if (arg.isMemberExpression()) return;
						const update = path$9.node;
						if (arg.isIdentifier()) {
							const localName = arg.node.name;
							if (scope.getBinding(localName) !== path$9.scope.getBinding(localName)) return;
							const exportedNames = exported.get(localName), importData = imported.get(localName);
							if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) if (importData) path$9.replaceWith(_core.types.assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
							else if (update.prefix) path$9.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.cloneNode(update), path$9.scope));
							else {
								const ref = scope.generateDeclaredUidIdentifier(localName);
								path$9.replaceWith(_core.types.sequenceExpression([
									_core.types.assignmentExpression("=", _core.types.cloneNode(ref), _core.types.cloneNode(update)),
									buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path$9.scope),
									_core.types.cloneNode(ref)
								]));
							}
						}
						requeueInParent(path$9), path$9.skip();
					},
					AssignmentExpression: { exit(path$9) {
						const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
						if (seen.has(path$9.node)) return;
						seen.add(path$9.node);
						const left = path$9.get("left");
						if (!left.isMemberExpression()) if (left.isIdentifier()) {
							const localName = left.node.name;
							if (scope.getBinding(localName) !== path$9.scope.getBinding(localName)) return;
							const exportedNames = exported.get(localName), importData = imported.get(localName);
							if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) {
								const assignment = path$9.node;
								importData && (assignment.left = buildImportReference(importData, left.node), assignment.right = _core.types.sequenceExpression([assignment.right, buildImportThrow(localName)]));
								const { operator } = assignment;
								let newExpr;
								newExpr = "=" === operator ? assignment : "&&=" === operator || "||=" === operator || "??=" === operator ? _core.types.assignmentExpression("=", assignment.left, _core.types.logicalExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right)) : _core.types.assignmentExpression("=", assignment.left, _core.types.binaryExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right)), path$9.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, newExpr, path$9.scope)), requeueInParent(path$9), path$9.skip();
							}
						} else {
							const ids = left.getOuterBindingIdentifiers(), programScopeIds = Object.keys(ids).filter((localName) => scope.getBinding(localName) === path$9.scope.getBinding(localName)), id = programScopeIds.find((localName) => imported.has(localName));
							id && (path$9.node.right = _core.types.sequenceExpression([path$9.node.right, buildImportThrow(id)]));
							const items = [];
							if (programScopeIds.forEach((localName) => {
								const exportedNames = exported.get(localName) || [];
								exportedNames.length > 0 && items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path$9.scope));
							}), items.length > 0) {
								let node = _core.types.sequenceExpression(items);
								path$9.parentPath.isExpressionStatement() && (node = _core.types.expressionStatement(node), node._blockHoist = path$9.parentPath.node._blockHoist);
								requeueInParent(path$9.insertAfter(node)[0]);
							}
						}
					} },
					ForXStatement(path$9) {
						const { scope, node } = path$9, { left } = node, { exported, imported, scope: programScope } = this;
						if (!_core.types.isVariableDeclaration(left)) {
							let importConstViolationName, didTransformExport = !1;
							const loopBodyScope = path$9.get("body").scope;
							for (const name of Object.keys(_core.types.getOuterBindingIdentifiers(left))) programScope.getBinding(name) === scope.getBinding(name) && (exported.has(name) && (didTransformExport = !0, loopBodyScope.hasOwnBinding(name) && loopBodyScope.rename(name)), imported.has(name) && !importConstViolationName && (importConstViolationName = name));
							if (!didTransformExport && !importConstViolationName) return;
							path$9.ensureBlock();
							const bodyPath = path$9.get("body"), newLoopId = scope.generateUidIdentifierBasedOnNode(left);
							path$9.get("left").replaceWith(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(newLoopId))])), scope.registerDeclaration(path$9.get("left")), didTransformExport && bodyPath.unshiftContainer("body", _core.types.expressionStatement(_core.types.assignmentExpression("=", left, newLoopId))), importConstViolationName && bodyPath.unshiftContainer("body", _core.types.expressionStatement(buildImportThrow(importConstViolationName)));
						}
					}
				};
			},
			"./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(programPath) {
					rewriteThisVisitor || (rewriteThisVisitor = _traverse.visitors.environmentVisitor({ ThisExpression(path$9) {
						path$9.replaceWith(_core.types.unaryExpression("void", _core.types.numericLiteral(0), !0));
					} }), rewriteThisVisitor.noScope = !0);
					(0, _traverse.default)(programPath.node, rewriteThisVisitor);
				};
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
				let rewriteThisVisitor;
			},
			"./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(callee, thisNode, args, optional) {
					return 1 === args.length && isSpreadElement(args[0]) && isIdentifier(args[0].argument, { name: "arguments" }) ? optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("apply"), !1, !0), [thisNode, args[0].argument], !1) : callExpression(memberExpression(callee, identifier("apply")), [thisNode, args[0].argument]) : optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("call"), !1, !0), [thisNode, ...args], !1) : callExpression(memberExpression(callee, identifier("call")), [thisNode, ...args]);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { callExpression, identifier, isIdentifier, isSpreadElement, memberExpression, optionalCallExpression, optionalMemberExpression } = _t;
			},
			"./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.declare = declare, exports$1.declarePreset = void 0;
				const apiPolyfills = { assertVersion: (api$1) => (range) => {
					(function(range$1, version$1) {
						if ("number" == typeof range$1) {
							if (!Number.isInteger(range$1)) throw new Error("Expected string or integer value.");
							range$1 = `^${range$1}.0.0-0`;
						}
						if ("string" != typeof range$1) throw new Error("Expected string or integer value.");
						const limit = Error.stackTraceLimit;
						"number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
						let err;
						err = "7." === version$1.slice(0, 2) ? new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version$1}". You'll need to update your @babel/core version.`) : new Error(`Requires Babel "${range$1}", but was loaded with "${version$1}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
						"number" == typeof limit && (Error.stackTraceLimit = limit);
						throw Object.assign(err, {
							code: "BABEL_VERSION_UNSUPPORTED",
							version: version$1,
							range: range$1
						});
					})(range, api$1.version);
				} };
				function declare(builder) {
					return (api$1, options, dirname$1) => {
						var _clonedApi2;
						let clonedApi;
						for (const name of Object.keys(apiPolyfills)) api$1[name] || (clonedApi ??= copyApiObject(api$1), clonedApi[name] = apiPolyfills[name](clonedApi));
						return builder(null != (_clonedApi2 = clonedApi) ? _clonedApi2 : api$1, options || {}, dirname$1);
					};
				}
				Object.assign(apiPolyfills, {
					targets: () => () => ({}),
					assumption: () => () => {},
					addExternalDependency: () => () => {}
				});
				exports$1.declarePreset = declare;
				function copyApiObject(api$1) {
					let proto = null;
					return "string" == typeof api$1.version && /^7\./.test(api$1.version) && (proto = Object.getPrototypeOf(api$1), !proto || hasOwnProperty.call(proto, "version") && hasOwnProperty.call(proto, "transform") && hasOwnProperty.call(proto, "template") && hasOwnProperty.call(proto, "types") || (proto = null)), Object.assign({}, proto, api$1);
				}
			},
			"./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _helperMemberExpressionToFunctions = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
				const { assignmentExpression, callExpression, cloneNode, identifier, memberExpression, sequenceExpression, stringLiteral, thisExpression } = _core.types;
				exports$1.environmentVisitor = _traverse.visitors.environmentVisitor({}), exports$1.skipAllButComputedKey = function(path$9) {
					path$9.skip(), path$9.node.computed && path$9.context.maybeQueue(path$9.get("key"));
				};
				const visitor = _traverse.visitors.environmentVisitor({ Super(path$9, state) {
					const { node, parentPath } = path$9;
					parentPath.isMemberExpression({ object: node }) && state.handle(parentPath);
				} }), unshadowSuperBindingVisitor = _traverse.visitors.environmentVisitor({ Scopable(path$9, { refName }) {
					const binding = path$9.scope.getOwnBinding(refName);
					binding && binding.identifier.name === refName && path$9.scope.rename(refName);
				} }), specHandlers = {
					memoise(superMember, count) {
						const { scope, node } = superMember, { computed, property } = node;
						if (!computed) return;
						const memo = scope.maybeGenerateMemoised(property);
						memo && this.memoiser.set(property, memo, count);
					},
					prop(superMember) {
						const { computed, property } = superMember.node;
						return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : computed ? cloneNode(property) : stringLiteral(property.name);
					},
					_getPrototypeOfExpression() {
						const objectRef = cloneNode(this.getObjectRef()), targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
						return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
					},
					get(superMember) {
						const objectRef = cloneNode(this.getObjectRef());
						return callExpression(this.file.addHelper("superPropGet"), [
							this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef,
							this.prop(superMember),
							thisExpression(),
							...this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)]
						]);
					},
					_call(superMember, args, optional) {
						const objectRef = cloneNode(this.getObjectRef());
						let argsNode;
						argsNode = 1 === args.length && _core.types.isSpreadElement(args[0]) && (_core.types.isIdentifier(args[0].argument) || _core.types.isArrayExpression(args[0].argument)) ? args[0].argument : _core.types.arrayExpression(args);
						const call = _core.types.callExpression(this.file.addHelper("superPropGet"), [
							this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef,
							this.prop(superMember),
							thisExpression(),
							_core.types.numericLiteral(2 | (this.isStatic || this.isPrivateMethod ? 0 : 1))
						]);
						return optional ? _core.types.optionalCallExpression(call, [argsNode], !0) : callExpression(call, [argsNode]);
					},
					set(superMember, value$1) {
						const objectRef = cloneNode(this.getObjectRef());
						return callExpression(this.file.addHelper("superPropSet"), [
							this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef,
							this.prop(superMember),
							value$1,
							thisExpression(),
							_core.types.numericLiteral(superMember.isInStrictMode() ? 1 : 0),
							...this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)]
						]);
					},
					destructureSet(superMember) {
						throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
					},
					call(superMember, args) {
						return this._call(superMember, args, !1);
					},
					optionalCall(superMember, args) {
						return this._call(superMember, args, !0);
					},
					delete(superMember) {
						return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
					}
				}, specHandlers_old = {
					memoise(superMember, count) {
						const { scope, node } = superMember, { computed, property } = node;
						if (!computed) return;
						const memo = scope.maybeGenerateMemoised(property);
						memo && this.memoiser.set(property, memo, count);
					},
					prop(superMember) {
						const { computed, property } = superMember.node;
						return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : computed ? cloneNode(property) : stringLiteral(property.name);
					},
					_getPrototypeOfExpression() {
						const objectRef = cloneNode(this.getObjectRef()), targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
						return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
					},
					get(superMember) {
						return this._get(superMember);
					},
					_get(superMember) {
						const proto = this._getPrototypeOfExpression();
						return callExpression(this.file.addHelper("get"), [
							this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto,
							this.prop(superMember),
							thisExpression()
						]);
					},
					set(superMember, value$1) {
						const proto = this._getPrototypeOfExpression();
						return callExpression(this.file.addHelper("set"), [
							this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto,
							this.prop(superMember),
							value$1,
							thisExpression(),
							_core.types.booleanLiteral(superMember.isInStrictMode())
						]);
					},
					destructureSet(superMember) {
						throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
					},
					call(superMember, args) {
						return (0, _helperOptimiseCallExpression.default)(this._get(superMember), thisExpression(), args, !1);
					},
					optionalCall(superMember, args) {
						return (0, _helperOptimiseCallExpression.default)(this._get(superMember), cloneNode(thisExpression()), args, !0);
					},
					delete(superMember) {
						return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
					}
				}, looseHandlers = Object.assign({}, specHandlers, {
					prop(superMember) {
						const { property } = superMember.node;
						return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : cloneNode(property);
					},
					get(superMember) {
						const { isStatic, getSuperRef } = this, { computed } = superMember.node, prop = this.prop(superMember);
						let object;
						var _getSuperRef, _getSuperRef2;
						isStatic ? object = null != (_getSuperRef = getSuperRef()) ? _getSuperRef : memberExpression(identifier("Function"), identifier("prototype")) : object = memberExpression(null != (_getSuperRef2 = getSuperRef()) ? _getSuperRef2 : identifier("Object"), identifier("prototype"));
						return memberExpression(object, prop, computed);
					},
					set(superMember, value$1) {
						const { computed } = superMember.node, prop = this.prop(superMember);
						return assignmentExpression("=", memberExpression(thisExpression(), prop, computed), value$1);
					},
					destructureSet(superMember) {
						const { computed } = superMember.node, prop = this.prop(superMember);
						return memberExpression(thisExpression(), prop, computed);
					},
					call(superMember, args) {
						return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, !1);
					},
					optionalCall(superMember, args) {
						return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, !0);
					}
				});
				exports$1.default = class {
					constructor(opts) {
						var _opts$constantSuper;
						const path$9 = opts.methodPath;
						this.methodPath = path$9, this.isDerivedConstructor = path$9.isClassMethod({ kind: "constructor" }) && !!opts.superRef, this.isStatic = path$9.isObjectMethod() || path$9.node.static || (null == path$9.isStaticBlock ? void 0 : path$9.isStaticBlock()), this.isPrivateMethod = path$9.isPrivate() && path$9.isMethod(), this.file = opts.file, this.constantSuper = null != (_opts$constantSuper = opts.constantSuper) ? _opts$constantSuper : opts.isLoose, this.opts = opts;
					}
					getObjectRef() {
						return cloneNode(this.opts.objectRef || this.opts.getObjectRef());
					}
					getSuperRef() {
						return this.opts.superRef ? cloneNode(this.opts.superRef) : this.opts.getSuperRef ? cloneNode(this.opts.getSuperRef()) : void 0;
					}
					replace() {
						const { methodPath } = this;
						this.opts.refToPreserve && methodPath.traverse(unshadowSuperBindingVisitor, { refName: this.opts.refToPreserve.name });
						const handler = this.constantSuper ? looseHandlers : this.file.availableHelper("superPropSet") ? specHandlers : specHandlers_old;
						visitor.shouldSkip = (path$9) => {
							if (path$9.parentPath === methodPath && ("decorators" === path$9.parentKey || "key" === path$9.parentKey)) return !0;
						}, (0, _helperMemberExpressionToFunctions.default)(methodPath, visitor, Object.assign({
							file: this.file,
							scope: this.methodPath.scope,
							isDerivedConstructor: this.isDerivedConstructor,
							isStatic: this.isStatic,
							isPrivateMethod: this.isPrivateMethod,
							getObjectRef: this.getObjectRef.bind(this),
							getSuperRef: this.getSuperRef.bind(this),
							boundGet: handler.get
						}, handler));
					}
				};
			},
			"./node_modules/.pnpm/@babel+helper-simple-access@7.25.9/node_modules/@babel/helper-simple-access/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				exports$1.A = function(path$9, bindingNames) {
					var _arguments$;
					path$9.traverse(simpleAssignmentVisitor, {
						scope: path$9.scope,
						bindingNames,
						seen: new WeakSet(),
						includeUpdateExpression: null == (_arguments$ = arguments[2]) || _arguments$
					});
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { LOGICAL_OPERATORS, assignmentExpression, binaryExpression, cloneNode, identifier, logicalExpression, numericLiteral, sequenceExpression, unaryExpression } = _t, simpleAssignmentVisitor = { AssignmentExpression: { exit(path$9) {
					const { scope, seen, bindingNames } = this;
					if ("=" === path$9.node.operator) return;
					if (seen.has(path$9.node)) return;
					seen.add(path$9.node);
					const left = path$9.get("left");
					if (!left.isIdentifier()) return;
					const localName = left.node.name;
					if (!bindingNames.has(localName)) return;
					if (scope.getBinding(localName) !== path$9.scope.getBinding(localName)) return;
					const operator = path$9.node.operator.slice(0, -1);
					LOGICAL_OPERATORS.includes(operator) ? path$9.replaceWith(logicalExpression(operator, path$9.node.left, assignmentExpression("=", cloneNode(path$9.node.left), path$9.node.right))) : (path$9.node.right = binaryExpression(operator, cloneNode(path$9.node.left), path$9.node.right), path$9.node.operator = "=");
				} } };
				simpleAssignmentVisitor.UpdateExpression = { exit(path$9) {
					if (!this.includeUpdateExpression) return;
					const { scope, bindingNames } = this, arg = path$9.get("argument");
					if (!arg.isIdentifier()) return;
					const localName = arg.node.name;
					if (bindingNames.has(localName) && scope.getBinding(localName) === path$9.scope.getBinding(localName)) if (path$9.parentPath.isExpressionStatement() && !path$9.isCompletionRecord()) {
						const operator = "++" === path$9.node.operator ? "+=" : "-=";
						path$9.replaceWith(assignmentExpression(operator, arg.node, numericLiteral(1)));
					} else if (path$9.node.prefix) path$9.replaceWith(assignmentExpression("=", identifier(localName), binaryExpression(path$9.node.operator[0], unaryExpression("+", arg.node), numericLiteral(1))));
					else {
						const old = path$9.scope.generateUidIdentifierBasedOnNode(arg.node, "old"), varName = old.name;
						path$9.scope.push({ id: old });
						const binary = binaryExpression(path$9.node.operator[0], identifier(varName), numericLiteral(1));
						path$9.replaceWith(sequenceExpression([
							assignmentExpression("=", identifier(varName), unaryExpression("+", arg.node)),
							assignmentExpression("=", cloneNode(arg.node), binary),
							identifier(varName)
						]));
					}
				} };
			},
			"./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.isTransparentExprWrapper = isTransparentExprWrapper, exports$1.skipTransparentExprWrapperNodes = function(node) {
					for (; isTransparentExprWrapper(node);) node = node.expression;
					return node;
				}, exports$1.skipTransparentExprWrappers = function(path$9) {
					for (; isTransparentExprWrapper(path$9.node);) path$9 = path$9.get("expression");
					return path$9;
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { isParenthesizedExpression, isTSAsExpression, isTSNonNullExpression, isTSSatisfiesExpression, isTSTypeAssertion, isTypeCastExpression } = _t;
				function isTransparentExprWrapper(node) {
					return isTSAsExpression(node) || isTSSatisfiesExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);
				}
			},
			"./node_modules/.pnpm/@babel+helper-string-parser@7.25.9/node_modules/@babel/helper-string-parser/lib/index.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.readCodePoint = readCodePoint, exports$1.readInt = readInt, exports$1.readStringContents = function(type$1, input, pos, lineStart, curLine, errors$1) {
					const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
					let out = "", firstInvalidLoc = null, chunkStart = pos;
					const { length } = input;
					for (;;) {
						if (pos >= length) {
							errors$1.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
							break;
						}
						const ch = input.charCodeAt(pos);
						if (isStringEnd(type$1, ch, input, pos)) {
							out += input.slice(chunkStart, pos);
							break;
						}
						if (92 === ch) {
							out += input.slice(chunkStart, pos);
							const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type$1, errors$1);
							null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = {
								pos,
								lineStart,
								curLine
							}, {pos, lineStart, curLine} = res, chunkStart = pos;
						} else 8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type$1 ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors$1.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
					}
					return {
						pos,
						str: out,
						firstInvalidLoc,
						lineStart,
						curLine,
						containsInvalid: !!firstInvalidLoc
					};
				};
				var _isDigit = function(code) {
					return code >= 48 && code <= 57;
				};
				const forbiddenNumericSeparatorSiblings = {
					decBinOct: new Set([
						46,
						66,
						69,
						79,
						95,
						98,
						101,
						111
					]),
					hex: new Set([
						46,
						88,
						95,
						120
					])
				}, isAllowedNumericSeparatorSibling = {
					bin: (ch) => 48 === ch || 49 === ch,
					oct: (ch) => ch >= 48 && ch <= 55,
					dec: (ch) => ch >= 48 && ch <= 57,
					hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
				};
				function isStringEnd(type$1, ch, input, pos) {
					return "template" === type$1 ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type$1 ? 34 : 39);
				}
				function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors$1) {
					const throwOnInvalid = !inTemplate;
					pos++;
					const res = (ch$1) => ({
						pos,
						ch: ch$1,
						lineStart,
						curLine
					}), ch = input.charCodeAt(pos++);
					switch (ch) {
						case 110: return res("\n");
						case 114: return res("\r");
						case 120: {
							let code;
							return {code, pos} = readHexChar(input, pos, lineStart, curLine, 2, !1, throwOnInvalid, errors$1), res(null === code ? null : String.fromCharCode(code));
						}
						case 117: {
							let code;
							return {code, pos} = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors$1), res(null === code ? null : String.fromCodePoint(code));
						}
						case 116: return res("	");
						case 98: return res("\b");
						case 118: return res("\v");
						case 102: return res("\f");
						case 13: 10 === input.charCodeAt(pos) && ++pos;
						case 10: lineStart = pos, ++curLine;
						case 8232:
						case 8233: return res("");
						case 56:
						case 57:
							if (inTemplate) return res(null);
							errors$1.strictNumericEscape(pos - 1, lineStart, curLine);
						default:
							if (ch >= 48 && ch <= 55) {
								const startPos = pos - 1;
								let octalStr = /^[0-7]+/.exec(input.slice(startPos, pos + 2))[0], octal = parseInt(octalStr, 8);
								octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
								const next = input.charCodeAt(pos);
								if ("0" !== octalStr || 56 === next || 57 === next) {
									if (inTemplate) return res(null);
									errors$1.strictNumericEscape(startPos, lineStart, curLine);
								}
								return res(String.fromCharCode(octal));
							}
							return res(String.fromCharCode(ch));
					}
				}
				function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors$1) {
					const initialPos = pos;
					let n;
					return {n, pos} = readInt(input, pos, lineStart, curLine, 16, len, forceLen, !1, errors$1, !throwOnInvalid), null === n && (throwOnInvalid ? errors$1.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), {
						code: n,
						pos
					};
				}
				function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors$1, bailOnError) {
					const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
					let invalid = !1, total = 0;
					for (let i = 0, e$1 = null == len ? Infinity : len; i < e$1; ++i) {
						const code = input.charCodeAt(pos);
						let val;
						if (95 !== code || "bail" === allowNumSeparator) {
							if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : Infinity, val >= radix) {
								if (val <= 9 && bailOnError) return {
									n: null,
									pos
								};
								if (val <= 9 && errors$1.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
								else {
									if (!forceLen) break;
									val = 0, invalid = !0;
								}
							}
							++pos, total = total * radix + val;
						} else {
							const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
							if (allowNumSeparator) {
								if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
									if (bailOnError) return {
										n: null,
										pos
									};
									errors$1.unexpectedNumericSeparator(pos, lineStart, curLine);
								}
							} else {
								if (bailOnError) return {
									n: null,
									pos
								};
								errors$1.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
							}
							++pos;
						}
					}
					return pos === start || null != len && pos - start !== len || invalid ? {
						n: null,
						pos
					} : {
						n: total,
						pos
					};
				}
				function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors$1) {
					let code;
					if (123 === input.charCodeAt(pos)) {
						if (++pos, {code, pos} = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, !0, throwOnInvalid, errors$1), ++pos, null !== code && code > 1114111) {
							if (!throwOnInvalid) return {
								code: null,
								pos
							};
							errors$1.invalidCodePoint(pos, lineStart, curLine);
						}
					} else ({code, pos} = readHexChar(input, pos, lineStart, curLine, 4, !1, throwOnInvalid, errors$1));
					return {
						code,
						pos
					};
				}
			},
			"./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/identifier.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.isIdentifierChar = isIdentifierChar, exports$1.isIdentifierName = function(name) {
					let isFirst = !0;
					for (let i = 0; i < name.length; i++) {
						let cp$1 = name.charCodeAt(i);
						if (55296 == (64512 & cp$1) && i + 1 < name.length) {
							const trail = name.charCodeAt(++i);
							56320 == (64512 & trail) && (cp$1 = 65536 + ((1023 & cp$1) << 10) + (1023 & trail));
						}
						if (isFirst) {
							if (isFirst = !1, !isIdentifierStart(cp$1)) return !1;
						} else if (!isIdentifierChar(cp$1)) return !1;
					}
					return !isFirst;
				}, exports$1.isIdentifierStart = isIdentifierStart;
				let nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", nonASCIIidentifierChars = "·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
				const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
				nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
				const astralIdentifierStartCodes = [
					0,
					11,
					2,
					25,
					2,
					18,
					2,
					1,
					2,
					14,
					3,
					13,
					35,
					122,
					70,
					52,
					268,
					28,
					4,
					48,
					48,
					31,
					14,
					29,
					6,
					37,
					11,
					29,
					3,
					35,
					5,
					7,
					2,
					4,
					43,
					157,
					19,
					35,
					5,
					35,
					5,
					39,
					9,
					51,
					13,
					10,
					2,
					14,
					2,
					6,
					2,
					1,
					2,
					10,
					2,
					14,
					2,
					6,
					2,
					1,
					4,
					51,
					13,
					310,
					10,
					21,
					11,
					7,
					25,
					5,
					2,
					41,
					2,
					8,
					70,
					5,
					3,
					0,
					2,
					43,
					2,
					1,
					4,
					0,
					3,
					22,
					11,
					22,
					10,
					30,
					66,
					18,
					2,
					1,
					11,
					21,
					11,
					25,
					71,
					55,
					7,
					1,
					65,
					0,
					16,
					3,
					2,
					2,
					2,
					28,
					43,
					28,
					4,
					28,
					36,
					7,
					2,
					27,
					28,
					53,
					11,
					21,
					11,
					18,
					14,
					17,
					111,
					72,
					56,
					50,
					14,
					50,
					14,
					35,
					39,
					27,
					10,
					22,
					251,
					41,
					7,
					1,
					17,
					2,
					60,
					28,
					11,
					0,
					9,
					21,
					43,
					17,
					47,
					20,
					28,
					22,
					13,
					52,
					58,
					1,
					3,
					0,
					14,
					44,
					33,
					24,
					27,
					35,
					30,
					0,
					3,
					0,
					9,
					34,
					4,
					0,
					13,
					47,
					15,
					3,
					22,
					0,
					2,
					0,
					36,
					17,
					2,
					24,
					20,
					1,
					64,
					6,
					2,
					0,
					2,
					3,
					2,
					14,
					2,
					9,
					8,
					46,
					39,
					7,
					3,
					1,
					3,
					21,
					2,
					6,
					2,
					1,
					2,
					4,
					4,
					0,
					19,
					0,
					13,
					4,
					31,
					9,
					2,
					0,
					3,
					0,
					2,
					37,
					2,
					0,
					26,
					0,
					2,
					0,
					45,
					52,
					19,
					3,
					21,
					2,
					31,
					47,
					21,
					1,
					2,
					0,
					185,
					46,
					42,
					3,
					37,
					47,
					21,
					0,
					60,
					42,
					14,
					0,
					72,
					26,
					38,
					6,
					186,
					43,
					117,
					63,
					32,
					7,
					3,
					0,
					3,
					7,
					2,
					1,
					2,
					23,
					16,
					0,
					2,
					0,
					95,
					7,
					3,
					38,
					17,
					0,
					2,
					0,
					29,
					0,
					11,
					39,
					8,
					0,
					22,
					0,
					12,
					45,
					20,
					0,
					19,
					72,
					200,
					32,
					32,
					8,
					2,
					36,
					18,
					0,
					50,
					29,
					113,
					6,
					2,
					1,
					2,
					37,
					22,
					0,
					26,
					5,
					2,
					1,
					2,
					31,
					15,
					0,
					328,
					18,
					16,
					0,
					2,
					12,
					2,
					33,
					125,
					0,
					80,
					921,
					103,
					110,
					18,
					195,
					2637,
					96,
					16,
					1071,
					18,
					5,
					26,
					3994,
					6,
					582,
					6842,
					29,
					1763,
					568,
					8,
					30,
					18,
					78,
					18,
					29,
					19,
					47,
					17,
					3,
					32,
					20,
					6,
					18,
					433,
					44,
					212,
					63,
					129,
					74,
					6,
					0,
					67,
					12,
					65,
					1,
					2,
					0,
					29,
					6135,
					9,
					1237,
					42,
					9,
					8936,
					3,
					2,
					6,
					2,
					1,
					2,
					290,
					16,
					0,
					30,
					2,
					3,
					0,
					15,
					3,
					9,
					395,
					2309,
					106,
					6,
					12,
					4,
					8,
					8,
					9,
					5991,
					84,
					2,
					70,
					2,
					1,
					3,
					0,
					3,
					1,
					3,
					3,
					2,
					11,
					2,
					0,
					2,
					6,
					2,
					64,
					2,
					3,
					3,
					7,
					2,
					6,
					2,
					27,
					2,
					3,
					2,
					4,
					2,
					0,
					4,
					6,
					2,
					339,
					3,
					24,
					2,
					24,
					2,
					30,
					2,
					24,
					2,
					30,
					2,
					24,
					2,
					30,
					2,
					24,
					2,
					30,
					2,
					24,
					2,
					7,
					1845,
					30,
					7,
					5,
					262,
					61,
					147,
					44,
					11,
					6,
					17,
					0,
					322,
					29,
					19,
					43,
					485,
					27,
					229,
					29,
					3,
					0,
					496,
					6,
					2,
					3,
					2,
					1,
					2,
					14,
					2,
					196,
					60,
					67,
					8,
					0,
					1205,
					3,
					2,
					26,
					2,
					1,
					2,
					0,
					3,
					0,
					2,
					9,
					2,
					3,
					2,
					0,
					2,
					0,
					7,
					0,
					5,
					0,
					2,
					0,
					2,
					0,
					2,
					2,
					2,
					1,
					2,
					0,
					3,
					0,
					2,
					0,
					2,
					0,
					2,
					0,
					2,
					0,
					2,
					1,
					2,
					0,
					3,
					3,
					2,
					6,
					2,
					3,
					2,
					3,
					2,
					0,
					2,
					9,
					2,
					16,
					6,
					2,
					2,
					4,
					2,
					16,
					4421,
					42719,
					33,
					4153,
					7,
					221,
					3,
					5761,
					15,
					7472,
					16,
					621,
					2467,
					541,
					1507,
					4938,
					6,
					4191
				], astralIdentifierCodes = [
					509,
					0,
					227,
					0,
					150,
					4,
					294,
					9,
					1368,
					2,
					2,
					1,
					6,
					3,
					41,
					2,
					5,
					0,
					166,
					1,
					574,
					3,
					9,
					9,
					7,
					9,
					32,
					4,
					318,
					1,
					80,
					3,
					71,
					10,
					50,
					3,
					123,
					2,
					54,
					14,
					32,
					10,
					3,
					1,
					11,
					3,
					46,
					10,
					8,
					0,
					46,
					9,
					7,
					2,
					37,
					13,
					2,
					9,
					6,
					1,
					45,
					0,
					13,
					2,
					49,
					13,
					9,
					3,
					2,
					11,
					83,
					11,
					7,
					0,
					3,
					0,
					158,
					11,
					6,
					9,
					7,
					3,
					56,
					1,
					2,
					6,
					3,
					1,
					3,
					2,
					10,
					0,
					11,
					1,
					3,
					6,
					4,
					4,
					68,
					8,
					2,
					0,
					3,
					0,
					2,
					3,
					2,
					4,
					2,
					0,
					15,
					1,
					83,
					17,
					10,
					9,
					5,
					0,
					82,
					19,
					13,
					9,
					214,
					6,
					3,
					8,
					28,
					1,
					83,
					16,
					16,
					9,
					82,
					12,
					9,
					9,
					7,
					19,
					58,
					14,
					5,
					9,
					243,
					14,
					166,
					9,
					71,
					5,
					2,
					1,
					3,
					3,
					2,
					0,
					2,
					1,
					13,
					9,
					120,
					6,
					3,
					6,
					4,
					0,
					29,
					9,
					41,
					6,
					2,
					3,
					9,
					0,
					10,
					10,
					47,
					15,
					343,
					9,
					54,
					7,
					2,
					7,
					17,
					9,
					57,
					21,
					2,
					13,
					123,
					5,
					4,
					0,
					2,
					1,
					2,
					6,
					2,
					0,
					9,
					9,
					49,
					4,
					2,
					1,
					2,
					4,
					9,
					9,
					330,
					3,
					10,
					1,
					2,
					0,
					49,
					6,
					4,
					4,
					14,
					10,
					5350,
					0,
					7,
					14,
					11465,
					27,
					2343,
					9,
					87,
					9,
					39,
					4,
					60,
					6,
					26,
					9,
					535,
					9,
					470,
					0,
					2,
					54,
					8,
					3,
					82,
					0,
					12,
					1,
					19628,
					1,
					4178,
					9,
					519,
					45,
					3,
					22,
					543,
					4,
					4,
					5,
					9,
					7,
					3,
					6,
					31,
					3,
					149,
					2,
					1418,
					49,
					513,
					54,
					5,
					49,
					9,
					0,
					15,
					0,
					23,
					4,
					2,
					14,
					1361,
					6,
					2,
					16,
					3,
					6,
					2,
					1,
					2,
					4,
					101,
					0,
					161,
					6,
					10,
					9,
					357,
					0,
					62,
					13,
					499,
					13,
					245,
					1,
					2,
					9,
					726,
					6,
					110,
					6,
					6,
					9,
					4759,
					9,
					787719,
					239
				];
				function isInAstralSet(code, set) {
					let pos = 65536;
					for (let i = 0, length = set.length; i < length; i += 2) {
						if (pos += set[i], pos > code) return !1;
						if (pos += set[i + 1], pos >= code) return !0;
					}
					return !1;
				}
				function isIdentifierStart(code) {
					return code < 65 ? 36 === code : code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes)));
				}
				function isIdentifierChar(code) {
					return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes))));
				}
			},
			"./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), Object.defineProperty(exports$1, "isIdentifierChar", {
					enumerable: !0,
					get: function() {
						return _identifier.isIdentifierChar;
					}
				}), Object.defineProperty(exports$1, "isIdentifierName", {
					enumerable: !0,
					get: function() {
						return _identifier.isIdentifierName;
					}
				}), Object.defineProperty(exports$1, "isIdentifierStart", {
					enumerable: !0,
					get: function() {
						return _identifier.isIdentifierStart;
					}
				}), Object.defineProperty(exports$1, "isKeyword", {
					enumerable: !0,
					get: function() {
						return _keyword.isKeyword;
					}
				}), Object.defineProperty(exports$1, "isReservedWord", {
					enumerable: !0,
					get: function() {
						return _keyword.isReservedWord;
					}
				}), Object.defineProperty(exports$1, "isStrictBindOnlyReservedWord", {
					enumerable: !0,
					get: function() {
						return _keyword.isStrictBindOnlyReservedWord;
					}
				}), Object.defineProperty(exports$1, "isStrictBindReservedWord", {
					enumerable: !0,
					get: function() {
						return _keyword.isStrictBindReservedWord;
					}
				}), Object.defineProperty(exports$1, "isStrictReservedWord", {
					enumerable: !0,
					get: function() {
						return _keyword.isStrictReservedWord;
					}
				});
				var _identifier = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/identifier.js"), _keyword = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/keyword.js");
			},
			"./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/keyword.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.isKeyword = function(word) {
					return keywords.has(word);
				}, exports$1.isReservedWord = isReservedWord, exports$1.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord, exports$1.isStrictBindReservedWord = function(word, inModule) {
					return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
				}, exports$1.isStrictReservedWord = isStrictReservedWord;
				const reservedWords_strict = [
					"implements",
					"interface",
					"let",
					"package",
					"private",
					"protected",
					"public",
					"static",
					"yield"
				], reservedWords_strictBind = ["eval", "arguments"], keywords = new Set([
					"break",
					"case",
					"catch",
					"continue",
					"debugger",
					"default",
					"do",
					"else",
					"finally",
					"for",
					"function",
					"if",
					"return",
					"switch",
					"throw",
					"try",
					"var",
					"const",
					"while",
					"with",
					"new",
					"this",
					"super",
					"class",
					"extends",
					"export",
					"import",
					"null",
					"true",
					"false",
					"in",
					"instanceof",
					"typeof",
					"void",
					"delete"
				]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
				function isReservedWord(word, inModule) {
					return inModule && "await" === word || "enum" === word;
				}
				function isStrictReservedWord(word, inModule) {
					return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
				}
				function isStrictBindOnlyReservedWord(word) {
					return reservedWordsStrictBindSet.has(word);
				}
			},
			"./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.findSuggestion = function(str, arr) {
					const distances = arr.map((el) => function(a, b$2) {
						let i, j, t = [], u$1 = [];
						const m$1 = a.length, n = b$2.length;
						if (!m$1) return n;
						if (!n) return m$1;
						for (j = 0; j <= n; j++) t[j] = j;
						for (i = 1; i <= m$1; i++) {
							for (u$1 = [i], j = 1; j <= n; j++) u$1[j] = a[i - 1] === b$2[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u$1[j - 1]) + 1;
							t = u$1;
						}
						return u$1[n];
					}(el, str));
					return arr[distances.indexOf(min(...distances))];
				};
				const { min } = Math;
			},
			"./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), Object.defineProperty(exports$1, "OptionValidator", {
					enumerable: !0,
					get: function() {
						return _validator.OptionValidator;
					}
				}), Object.defineProperty(exports$1, "findSuggestion", {
					enumerable: !0,
					get: function() {
						return _findSuggestion.findSuggestion;
					}
				});
				var _validator = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/validator.js"), _findSuggestion = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
			},
			"./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/validator.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.OptionValidator = void 0;
				var _findSuggestion = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
				exports$1.OptionValidator = class {
					constructor(descriptor) {
						this.descriptor = descriptor;
					}
					validateTopLevelOptions(options, TopLevelOptionShape) {
						const validOptionNames = Object.keys(TopLevelOptionShape);
						for (const option of Object.keys(options)) if (!validOptionNames.includes(option)) throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.\n- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
					}
					validateBooleanOption(name, value$1, defaultValue) {
						return void 0 === value$1 ? defaultValue : (this.invariant("boolean" == typeof value$1, `'${name}' option must be a boolean.`), value$1);
					}
					validateStringOption(name, value$1, defaultValue) {
						return void 0 === value$1 ? defaultValue : (this.invariant("string" == typeof value$1, `'${name}' option must be a string.`), value$1);
					}
					invariant(condition, message) {
						if (!condition) throw new Error(this.formatMessage(message));
					}
					formatMessage(message) {
						return `${this.descriptor}: ${message}`;
					}
				};
			},
			"./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/helpers-generated.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _template = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
				function helper(minVersion, source, metadata) {
					return Object.freeze({
						minVersion,
						ast: () => _template.default.program.ast(source, { preserveComments: !0 }),
						metadata
					});
				}
				const helpers = exports$1.default = {
					__proto__: null,
					OverloadYield: helper("7.18.14", "function _OverloadYield(e,d){this.v=e,this.k=d}", {
						globals: [],
						locals: { _OverloadYield: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_OverloadYield",
						dependencies: {}
					}),
					applyDecoratedDescriptor: helper("7.0.0-beta.0", "function _applyDecoratedDescriptor(i,e,r,n,l){var a={};return Object.keys(n).forEach((function(i){a[i]=n[i]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,(\"value\"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(i,e,r)||r}),a),l&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(l):void 0,a.initializer=void 0),void 0===a.initializer?(Object.defineProperty(i,e,a),null):a}", {
						globals: ["Object"],
						locals: { _applyDecoratedDescriptor: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_applyDecoratedDescriptor",
						dependencies: {}
					}),
					applyDecs2311: helper("7.24.0", "function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for(\"Symbol.metadata\"),m=Object.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if(\"function\"!=typeof e&&(r||void 0!==e))throw new TypeError(t+\" must \"+(n||\"be\")+\" a function\"+(r?\"\":\" or undefined\"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError(\"Attempted to access private element on non-instance\")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){return function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?\"get\":j||D?\"set\":\"value\";if(f?(l||D?P={get:setFunctionName((function(){return v(this)}),r,\"get\"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?\"\":F)):l||(P=Object.getOwnPropertyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error(\"Decorating two elements with the same name (\"+P[F].name+\") is not supported yet\");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var T=b(h[O],\"A decorator\",\"be\",!0),z=n?h[O-1]:void 0,A={},H={kind:[\"field\",\"accessor\",\"method\",\"getter\",\"setter\",\"class\"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw new TypeError(\"attempted to call addInitializer after decoration was finished\");b(t,\"An initializer\",\"be\",!0),i.push(t)}.bind(null,A)};if(w)c=T.call(z,N,H),A.v=1,b(c,\"class decorators\",\"return\")&&(N=c);else if(H.static=s,H.private=f,c=H.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?function(e){return d(e),P.value}:I(\"get\",0,d):function(e){return e[r]}),E||S||(c.set=f?I(\"set\",0,d):function(e,t){e[r]=t}),N=T.call(z,D?{get:P.get,set:P.set}:P[F],H),A.v=1,D){if(\"object\"==typeof N&&N)(c=b(N.get,\"accessor.get\"))&&(P.get=c),(c=b(N.set,\"accessor.set\"))&&(P.set=c),(c=b(N.init,\"accessor.init\"))&&k.unshift(c);else if(void 0!==N)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or undefined\")}else b(N,(l?\"field\":\"method\")+\" decorators\",\"return\")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s,0)),l||w||(f?D?u.splice(-1,0,I(\"get\",s),I(\"set\",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?\"#\"+p:toPropertyKey(p),l,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}", {
						globals: [
							"Symbol",
							"Object",
							"TypeError",
							"Error"
						],
						locals: { applyDecs2311: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "applyDecs2311",
						dependencies: {
							checkInRHS: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.10.consequent.body.body.0.argument.left.callee"],
							setFunctionName: ["body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.1.right.callee"],
							toPropertyKey: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.3.alternate.callee"]
						}
					}),
					arrayLikeToArray: helper("7.9.0", "function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}", {
						globals: ["Array"],
						locals: { _arrayLikeToArray: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_arrayLikeToArray",
						dependencies: {}
					}),
					arrayWithHoles: helper("7.0.0-beta.0", "function _arrayWithHoles(r){if(Array.isArray(r))return r}", {
						globals: ["Array"],
						locals: { _arrayWithHoles: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_arrayWithHoles",
						dependencies: {}
					}),
					arrayWithoutHoles: helper("7.0.0-beta.0", "function _arrayWithoutHoles(r){if(Array.isArray(r))return arrayLikeToArray(r)}", {
						globals: ["Array"],
						locals: { _arrayWithoutHoles: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_arrayWithoutHoles",
						dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.argument.callee"] }
					}),
					assertClassBrand: helper("7.24.0", "function _assertClassBrand(e,t,n){if(\"function\"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError(\"Private element is not present on this object\")}", {
						globals: ["TypeError"],
						locals: { _assertClassBrand: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_assertClassBrand",
						dependencies: {}
					}),
					assertThisInitialized: helper("7.0.0-beta.0", "function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}", {
						globals: ["ReferenceError"],
						locals: { _assertThisInitialized: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_assertThisInitialized",
						dependencies: {}
					}),
					asyncGeneratorDelegate: helper("7.0.0-beta.0", "function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promise((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e[\"undefined\"!=typeof Symbol&&Symbol.iterator||\"@@iterator\"]=function(){return this},e.next=function(t){return n?(n=!1,t):pump(\"next\",t)},\"function\"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;return pump(\"throw\",t)}),\"function\"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump(\"return\",t)}),e}", {
						globals: ["Promise", "Symbol"],
						locals: { _asyncGeneratorDelegate: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_asyncGeneratorDelegate",
						dependencies: { OverloadYield: ["body.0.body.body.1.body.body.0.argument.expressions.2.properties.1.value.callee"] }
					}),
					asyncIterator: helper("7.15.9", "function _asyncIterator(r){var n,t,o,e=2;for(\"undefined\"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.iterator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t=\"@@asyncIterator\",o=\"@@iterator\"}throw new TypeError(\"Object is not async iterable\")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+\" is not an object.\"));var n=r.done;return Promise.resolve(r.value).then((function(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return void 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.return;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}", {
						globals: [
							"Symbol",
							"TypeError",
							"Object",
							"Promise"
						],
						locals: {
							_asyncIterator: ["body.0.id"],
							AsyncFromSyncIterator: [
								"body.1.id",
								"body.0.body.body.1.body.body.1.consequent.argument.callee",
								"body.1.body.body.1.argument.expressions.1.left.object",
								"body.1.body.body.1.argument.expressions.2.callee",
								"body.1.body.body.1.argument.expressions.0.left"
							]
						},
						exportBindingAssignments: [],
						exportName: "_asyncIterator",
						dependencies: {}
					}),
					asyncToGenerator: helper("7.0.0-beta.0", "function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,\"next\",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_throw,\"throw\",n)}_next(void 0)}))}}", {
						globals: ["Promise"],
						locals: {
							asyncGeneratorStep: [
								"body.0.id",
								"body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.1.body.body.0.expression.callee",
								"body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.2.body.body.0.expression.callee"
							],
							_asyncToGenerator: ["body.1.id"]
						},
						exportBindingAssignments: [],
						exportName: "_asyncToGenerator",
						dependencies: {}
					}),
					awaitAsyncGenerator: helper("7.0.0-beta.0", "function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}", {
						globals: [],
						locals: { _awaitAsyncGenerator: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_awaitAsyncGenerator",
						dependencies: { OverloadYield: ["body.0.body.body.0.argument.callee"] }
					}),
					callSuper: helper("7.23.8", "function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Reflect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}", {
						globals: ["Reflect"],
						locals: { _callSuper: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_callSuper",
						dependencies: {
							getPrototypeOf: ["body.0.body.body.0.argument.expressions.0.right.callee", "body.0.body.body.0.argument.expressions.1.arguments.1.consequent.arguments.2.object.callee"],
							isNativeReflectConstruct: ["body.0.body.body.0.argument.expressions.1.arguments.1.test.callee"],
							possibleConstructorReturn: ["body.0.body.body.0.argument.expressions.1.callee"]
						}
					}),
					checkInRHS: helper("7.20.5", "function _checkInRHS(e){if(Object(e)!==e)throw TypeError(\"right-hand side of 'in' should be an object, got \"+(null!==e?typeof e:\"null\"));return e}", {
						globals: ["Object", "TypeError"],
						locals: { _checkInRHS: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_checkInRHS",
						dependencies: {}
					}),
					checkPrivateRedeclaration: helper("7.14.1", "function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError(\"Cannot initialize the same private elements twice on an object\")}", {
						globals: ["TypeError"],
						locals: { _checkPrivateRedeclaration: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_checkPrivateRedeclaration",
						dependencies: {}
					}),
					classCallCheck: helper("7.0.0-beta.0", "function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError(\"Cannot call a class as a function\")}", {
						globals: ["TypeError"],
						locals: { _classCallCheck: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classCallCheck",
						dependencies: {}
					}),
					classNameTDZError: helper("7.0.0-beta.0", "function _classNameTDZError(e){throw new ReferenceError('Class \"'+e+'\" cannot be referenced in computed property keys.')}", {
						globals: ["ReferenceError"],
						locals: { _classNameTDZError: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classNameTDZError",
						dependencies: {}
					}),
					classPrivateFieldGet2: helper("7.24.0", "function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}", {
						globals: [],
						locals: { _classPrivateFieldGet2: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateFieldGet2",
						dependencies: { assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"] }
					}),
					classPrivateFieldInitSpec: helper("7.14.1", "function _classPrivateFieldInitSpec(e,t,a){checkPrivateRedeclaration(e,t),t.set(e,a)}", {
						globals: [],
						locals: { _classPrivateFieldInitSpec: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateFieldInitSpec",
						dependencies: { checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"] }
					}),
					classPrivateFieldLooseBase: helper("7.0.0-beta.0", "function _classPrivateFieldBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError(\"attempted to use private field on non-instance\");return e}", {
						globals: ["TypeError"],
						locals: { _classPrivateFieldBase: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateFieldBase",
						dependencies: {}
					}),
					classPrivateFieldLooseKey: helper("7.0.0-beta.0", "var id=0;function _classPrivateFieldKey(e){return\"__private_\"+id+++\"_\"+e}", {
						globals: [],
						locals: {
							id: [
								"body.0.declarations.0.id",
								"body.1.body.body.0.argument.left.left.right.argument",
								"body.1.body.body.0.argument.left.left.right.argument"
							],
							_classPrivateFieldKey: ["body.1.id"]
						},
						exportBindingAssignments: [],
						exportName: "_classPrivateFieldKey",
						dependencies: {}
					}),
					classPrivateFieldSet2: helper("7.24.0", "function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}", {
						globals: [],
						locals: { _classPrivateFieldSet2: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateFieldSet2",
						dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"] }
					}),
					classPrivateGetter: helper("7.24.0", "function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}", {
						globals: [],
						locals: { _classPrivateGetter: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateGetter",
						dependencies: { assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"] }
					}),
					classPrivateMethodInitSpec: helper("7.14.1", "function _classPrivateMethodInitSpec(e,a){checkPrivateRedeclaration(e,a),a.add(e)}", {
						globals: [],
						locals: { _classPrivateMethodInitSpec: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateMethodInitSpec",
						dependencies: { checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"] }
					}),
					classPrivateSetter: helper("7.24.0", "function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}", {
						globals: [],
						locals: { _classPrivateSetter: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateSetter",
						dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"] }
					}),
					classStaticPrivateMethodGet: helper("7.3.2", "function _classStaticPrivateMethodGet(s,a,t){return assertClassBrand(a,s),t}", {
						globals: [],
						locals: { _classStaticPrivateMethodGet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classStaticPrivateMethodGet",
						dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"] }
					}),
					construct: helper("7.0.0-beta.0", "function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);var o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}", {
						globals: ["Reflect"],
						locals: { _construct: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_construct",
						dependencies: {
							isNativeReflectConstruct: ["body.0.body.body.0.test.callee"],
							setPrototypeOf: ["body.0.body.body.4.argument.expressions.0.right.callee"]
						}
					}),
					createClass: helper("7.0.0-beta.0", "function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&&(o.writable=!0),Object.defineProperty(e,toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,\"prototype\",{writable:!1}),e}", {
						globals: ["Object"],
						locals: {
							_defineProperties: [
								"body.0.id",
								"body.1.body.body.0.argument.expressions.0.right.callee",
								"body.1.body.body.0.argument.expressions.1.right.callee"
							],
							_createClass: ["body.1.id"]
						},
						exportBindingAssignments: [],
						exportName: "_createClass",
						dependencies: { toPropertyKey: ["body.0.body.body.0.body.body.1.expression.expressions.3.arguments.1.callee"] }
					}),
					createForOfIteratorHelper: helper("7.9.0", "function _createForOfIteratorHelper(r,e){var t=\"undefined\"!=typeof Symbol&&r[Symbol.iterator]||r[\"@@iterator\"];if(!t){if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&\"number\"==typeof r.length){t&&(r=t);var n=0,F=function(){};return{s:F,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(r){throw r},f:F}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,a=!0,u=!1;return{s:function(){t=t.call(r)},n:function(){var r=t.next();return a=r.done,r},e:function(r){u=!0,o=r},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}", {
						globals: [
							"Symbol",
							"Array",
							"TypeError"
						],
						locals: { _createForOfIteratorHelper: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_createForOfIteratorHelper",
						dependencies: { unsupportedIterableToArray: ["body.0.body.body.1.consequent.body.0.test.left.right.right.callee"] }
					}),
					createForOfIteratorHelperLoose: helper("7.9.0", "function _createForOfIteratorHelperLoose(r,e){var t=\"undefined\"!=typeof Symbol&&r[Symbol.iterator]||r[\"@@iterator\"];if(t)return(t=t.call(r)).next.bind(t);if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&\"number\"==typeof r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}", {
						globals: [
							"Symbol",
							"Array",
							"TypeError"
						],
						locals: { _createForOfIteratorHelperLoose: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_createForOfIteratorHelperLoose",
						dependencies: { unsupportedIterableToArray: ["body.0.body.body.2.test.left.right.right.callee"] }
					}),
					createSuper: helper("7.9.0", "function _createSuper(t){var r=isNativeReflectConstruct();return function(){var e,o=getPrototypeOf(t);if(r){var s=getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,s)}else e=o.apply(this,arguments);return possibleConstructorReturn(this,e)}}", {
						globals: ["Reflect"],
						locals: { _createSuper: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_createSuper",
						dependencies: {
							getPrototypeOf: ["body.0.body.body.1.argument.body.body.0.declarations.1.init.callee", "body.0.body.body.1.argument.body.body.1.consequent.body.0.declarations.0.init.object.callee"],
							isNativeReflectConstruct: ["body.0.body.body.0.declarations.0.init.callee"],
							possibleConstructorReturn: ["body.0.body.body.1.argument.body.body.2.argument.callee"]
						}
					}),
					decorate: helper("7.1.5", "function _decorate(e,r,t,i){var o=_getDecoratorsApi();if(i)for(var n=0;n<i.length;n++)o=i[n](o);var s=r((function(e){o.initializeInstanceElements(e,a.elements)}),t),a=o.decorateClass(_coalesceClassElements(s.d.map(_createElementDescriptor)),e);return o.initializeClassElements(s.F,a.elements),o.runClassFinishers(s.F,a.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return e};var e={elementsDefinitionOrder:[[\"method\"],[\"field\"]],initializeInstanceElements:function(e,r){[\"method\",\"field\"].forEach((function(t){r.forEach((function(r){r.kind===t&&\"own\"===r.placement&&this.defineClassElement(e,r)}),this)}),this)},initializeClassElements:function(e,r){var t=e.prototype;[\"method\",\"field\"].forEach((function(i){r.forEach((function(r){var o=r.placement;if(r.kind===i&&(\"static\"===o||\"prototype\"===o)){var n=\"static\"===o?e:t;this.defineClassElement(n,r)}}),this)}),this)},defineClassElement:function(e,r){var t=r.descriptor;if(\"field\"===r.kind){var i=r.initializer;t={enumerable:t.enumerable,writable:t.writable,configurable:t.configurable,value:void 0===i?void 0:i.call(e)}}Object.defineProperty(e,r.key,t)},decorateClass:function(e,r){var t=[],i=[],o={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.addElementPlacement(e,o)}),this),e.forEach((function(e){if(!_hasDecorators(e))return t.push(e);var r=this.decorateElement(e,o);t.push(r.element),t.push.apply(t,r.extras),i.push.apply(i,r.finishers)}),this),!r)return{elements:t,finishers:i};var n=this.decorateConstructor(t,r);return i.push.apply(i,n.finishers),n.finishers=i,n},addElementPlacement:function(e,r,t){var i=r[e.placement];if(!t&&-1!==i.indexOf(e.key))throw new TypeError(\"Duplicated element (\"+e.key+\")\");i.push(e.key)},decorateElement:function(e,r){for(var t=[],i=[],o=e.decorators,n=o.length-1;n>=0;n--){var s=r[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,o[n])(a)||a);e=l.element,this.addElementPlacement(e,r),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var p=0;p<c.length;p++)this.addElementPlacement(c[p],r);t.push.apply(t,c)}}return{element:e,finishers:i,extras:t}},decorateConstructor:function(e,r){for(var t=[],i=r.length-1;i>=0;i--){var o=this.fromClassDescriptor(e),n=this.toClassDescriptor((0,r[i])(o)||o);if(void 0!==n.finisher&&t.push(n.finisher),void 0!==n.elements){e=n.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new TypeError(\"Duplicated element (\"+e[s].key+\")\")}}return{elements:e,finishers:t}},fromElementDescriptor:function(e){var r={kind:e.kind,key:e.key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(r,Symbol.toStringTag,{value:\"Descriptor\",configurable:!0}),\"field\"===e.kind&&(r.initializer=e.initializer),r},toElementDescriptors:function(e){if(void 0!==e)return toArray(e).map((function(e){var r=this.toElementDescriptor(e);return this.disallowProperty(e,\"finisher\",\"An element descriptor\"),this.disallowProperty(e,\"extras\",\"An element descriptor\"),r}),this)},toElementDescriptor:function(e){var r=e.kind+\"\";if(\"method\"!==r&&\"field\"!==r)throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or \"field\", but a decorator created an element descriptor with .kind \"'+r+'\"');var t=toPropertyKey(e.key),i=e.placement+\"\";if(\"static\"!==i&&\"prototype\"!==i&&\"own\"!==i)throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\", \"prototype\" or \"own\", but a decorator created an element descriptor with .placement \"'+i+'\"');var o=e.descriptor;this.disallowProperty(e,\"elements\",\"An element descriptor\");var n={kind:r,key:t,placement:i,descriptor:Object.assign({},o)};return\"field\"!==r?this.disallowProperty(e,\"initializer\",\"A method descriptor\"):(this.disallowProperty(o,\"get\",\"The property descriptor of a field descriptor\"),this.disallowProperty(o,\"set\",\"The property descriptor of a field descriptor\"),this.disallowProperty(o,\"value\",\"The property descriptor of a field descriptor\"),n.initializer=e.initializer),n},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:_optionalCallableProperty(e,\"finisher\"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var r={kind:\"class\",elements:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(r,Symbol.toStringTag,{value:\"Descriptor\",configurable:!0}),r},toClassDescriptor:function(e){var r=e.kind+\"\";if(\"class\"!==r)throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator created a class descriptor with .kind \"'+r+'\"');this.disallowProperty(e,\"key\",\"A class descriptor\"),this.disallowProperty(e,\"placement\",\"A class descriptor\"),this.disallowProperty(e,\"descriptor\",\"A class descriptor\"),this.disallowProperty(e,\"initializer\",\"A class descriptor\"),this.disallowProperty(e,\"extras\",\"A class descriptor\");var t=_optionalCallableProperty(e,\"finisher\");return{elements:this.toElementDescriptors(e.elements),finisher:t}},runClassFinishers:function(e,r){for(var t=0;t<r.length;t++){var i=(0,r[t])(e);if(void 0!==i){if(\"function\"!=typeof i)throw new TypeError(\"Finishers must return a constructor.\");e=i}}return e},disallowProperty:function(e,r,t){if(void 0!==e[r])throw new TypeError(t+\" can't have a .\"+r+\" property.\")}};return e}function _createElementDescriptor(e){var r,t=toPropertyKey(e.key);\"method\"===e.kind?r={value:e.value,writable:!0,configurable:!0,enumerable:!1}:\"get\"===e.kind?r={get:e.value,configurable:!0,enumerable:!1}:\"set\"===e.kind?r={set:e.value,configurable:!0,enumerable:!1}:\"field\"===e.kind&&(r={configurable:!0,writable:!0,enumerable:!0});var i={kind:\"field\"===e.kind?\"field\":\"method\",key:t,placement:e.static?\"static\":\"field\"===e.kind?\"own\":\"prototype\",descriptor:r};return e.decorators&&(i.decorators=e.decorators),\"field\"===e.kind&&(i.initializer=e.value),i}function _coalesceGetterSetter(e,r){void 0!==e.descriptor.get?r.descriptor.get=e.descriptor.get:r.descriptor.set=e.descriptor.set}function _coalesceClassElements(e){for(var r=[],isSameElement=function(e){return\"method\"===e.kind&&e.key===o.key&&e.placement===o.placement},t=0;t<e.length;t++){var i,o=e[t];if(\"method\"===o.kind&&(i=r.find(isSameElement)))if(_isDataDescriptor(o.descriptor)||_isDataDescriptor(i.descriptor)){if(_hasDecorators(o)||_hasDecorators(i))throw new ReferenceError(\"Duplicated methods (\"+o.key+\") can't be decorated.\");i.descriptor=o.descriptor}else{if(_hasDecorators(o)){if(_hasDecorators(i))throw new ReferenceError(\"Decorators can't be placed on different accessors with for the same property (\"+o.key+\").\");i.decorators=o.decorators}_coalesceGetterSetter(o,i)}else r.push(o)}return r}function _hasDecorators(e){return e.decorators&&e.decorators.length}function _isDataDescriptor(e){return void 0!==e&&!(void 0===e.value&&void 0===e.writable)}function _optionalCallableProperty(e,r){var t=e[r];if(void 0!==t&&\"function\"!=typeof t)throw new TypeError(\"Expected '\"+r+\"' to be a function\");return t}", {
						globals: [
							"Object",
							"TypeError",
							"Symbol",
							"ReferenceError"
						],
						locals: {
							_decorate: ["body.0.id"],
							_getDecoratorsApi: [
								"body.1.id",
								"body.0.body.body.0.declarations.0.init.callee",
								"body.1.body.body.0.expression.left"
							],
							_createElementDescriptor: ["body.2.id", "body.0.body.body.2.declarations.1.init.arguments.0.arguments.0.arguments.0"],
							_coalesceGetterSetter: ["body.3.id", "body.4.body.body.0.body.body.1.consequent.alternate.body.1.expression.callee"],
							_coalesceClassElements: ["body.4.id", "body.0.body.body.2.declarations.1.init.arguments.0.callee"],
							_hasDecorators: [
								"body.5.id",
								"body.1.body.body.1.declarations.0.init.properties.4.value.body.body.1.test.expressions.1.arguments.0.body.body.0.test.argument.callee",
								"body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.left.callee",
								"body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.right.callee",
								"body.4.body.body.0.body.body.1.consequent.alternate.body.0.test.callee",
								"body.4.body.body.0.body.body.1.consequent.alternate.body.0.consequent.body.0.test.callee"
							],
							_isDataDescriptor: [
								"body.6.id",
								"body.4.body.body.0.body.body.1.consequent.test.left.callee",
								"body.4.body.body.0.body.body.1.consequent.test.right.callee"
							],
							_optionalCallableProperty: [
								"body.7.id",
								"body.1.body.body.1.declarations.0.init.properties.11.value.body.body.0.argument.properties.1.value.callee",
								"body.1.body.body.1.declarations.0.init.properties.13.value.body.body.3.declarations.0.init.callee"
							]
						},
						exportBindingAssignments: [],
						exportName: "_decorate",
						dependencies: {
							toArray: ["body.1.body.body.1.declarations.0.init.properties.9.value.body.body.0.consequent.argument.callee.object.callee"],
							toPropertyKey: ["body.1.body.body.1.declarations.0.init.properties.10.value.body.body.2.declarations.0.init.callee", "body.2.body.body.0.declarations.1.init.callee"]
						}
					}),
					defaults: helper("7.0.0-beta.0", "function _defaults(e,r){for(var t=Object.getOwnPropertyNames(r),o=0;o<t.length;o++){var n=t[o],a=Object.getOwnPropertyDescriptor(r,n);a&&a.configurable&&void 0===e[n]&&Object.defineProperty(e,n,a)}return e}", {
						globals: ["Object"],
						locals: { _defaults: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_defaults",
						dependencies: {}
					}),
					defineAccessor: helper("7.20.7", "function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty(r,n,c)}", {
						globals: ["Object"],
						locals: { _defineAccessor: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_defineAccessor",
						dependencies: {}
					}),
					defineProperty: helper("7.0.0-beta.0", "function _defineProperty(e,r,t){return(r=toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}", {
						globals: ["Object"],
						locals: { _defineProperty: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_defineProperty",
						dependencies: { toPropertyKey: ["body.0.body.body.0.argument.expressions.0.test.left.right.callee"] }
					}),
					extends: helper("7.0.0-beta.0", "function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}", {
						globals: ["Object"],
						locals: { _extends: [
							"body.0.id",
							"body.0.body.body.0.argument.expressions.1.callee.object",
							"body.0.body.body.0.argument.expressions.0.left"
						] },
						exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
						exportName: "_extends",
						dependencies: {}
					}),
					get: helper("7.0.0-beta.0", "function _get(){return _get=\"undefined\"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var p=superPropBase(e,t);if(p){var n=Object.getOwnPropertyDescriptor(p,t);return n.get?n.get.call(arguments.length<3?e:r):n.value}},_get.apply(null,arguments)}", {
						globals: ["Reflect", "Object"],
						locals: { _get: [
							"body.0.id",
							"body.0.body.body.0.argument.expressions.1.callee.object",
							"body.0.body.body.0.argument.expressions.0.left"
						] },
						exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
						exportName: "_get",
						dependencies: { superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.0.init.callee"] }
					}),
					getPrototypeOf: helper("7.0.0-beta.0", "function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}", {
						globals: ["Object"],
						locals: { _getPrototypeOf: [
							"body.0.id",
							"body.0.body.body.0.argument.expressions.1.callee",
							"body.0.body.body.0.argument.expressions.0.left"
						] },
						exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
						exportName: "_getPrototypeOf",
						dependencies: {}
					}),
					identity: helper("7.17.0", "function _identity(t){return t}", {
						globals: [],
						locals: { _identity: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_identity",
						dependencies: {}
					}),
					importDeferProxy: helper("7.23.0", "function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=function(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValue(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:constValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:constValue(!1)})}", {
						globals: ["Proxy", "Reflect"],
						locals: { _importDeferProxy: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_importDeferProxy",
						dependencies: {}
					}),
					inherits: helper("7.0.0-beta.0", "function _inherits(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,\"prototype\",{writable:!1}),e&&setPrototypeOf(t,e)}", {
						globals: ["TypeError", "Object"],
						locals: { _inherits: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_inherits",
						dependencies: { setPrototypeOf: ["body.0.body.body.1.expression.expressions.2.right.callee"] }
					}),
					inheritsLoose: helper("7.0.0-beta.0", "function _inheritsLoose(t,o){t.prototype=Object.create(o.prototype),t.prototype.constructor=t,setPrototypeOf(t,o)}", {
						globals: ["Object"],
						locals: { _inheritsLoose: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_inheritsLoose",
						dependencies: { setPrototypeOf: ["body.0.body.body.0.expression.expressions.2.callee"] }
					}),
					initializerDefineProperty: helper("7.0.0-beta.0", "function _initializerDefineProperty(e,i,r,l){r&&Object.defineProperty(e,i,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(l):void 0})}", {
						globals: ["Object"],
						locals: { _initializerDefineProperty: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_initializerDefineProperty",
						dependencies: {}
					}),
					initializerWarningHelper: helper("7.0.0-beta.0", "function _initializerWarningHelper(r,e){throw Error(\"Decorating class property failed. Please ensure that transform-class-properties is enabled and runs after the decorators transform.\")}", {
						globals: ["Error"],
						locals: { _initializerWarningHelper: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_initializerWarningHelper",
						dependencies: {}
					}),
					instanceof: helper("7.0.0-beta.0", "function _instanceof(n,e){return null!=e&&\"undefined\"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](n):n instanceof e}", {
						globals: ["Symbol"],
						locals: { _instanceof: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_instanceof",
						dependencies: {}
					}),
					interopRequireDefault: helper("7.0.0-beta.0", "function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}", {
						globals: [],
						locals: { _interopRequireDefault: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_interopRequireDefault",
						dependencies: {}
					}),
					interopRequireWildcard: helper("7.14.0", "function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}", {
						globals: ["WeakMap", "Object"],
						locals: {
							_getRequireWildcardCache: [
								"body.0.id",
								"body.1.body.body.2.declarations.0.init.callee",
								"body.0.body.body.2.argument.callee.left"
							],
							_interopRequireWildcard: ["body.1.id"]
						},
						exportBindingAssignments: [],
						exportName: "_interopRequireWildcard",
						dependencies: {}
					}),
					isNativeFunction: helper("7.0.0-beta.0", "function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf(\"[native code]\")}catch(n){return\"function\"==typeof t}}", {
						globals: ["Function"],
						locals: { _isNativeFunction: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_isNativeFunction",
						dependencies: {}
					}),
					isNativeReflectConstruct: helper("7.9.0", "function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}", {
						globals: ["Boolean", "Reflect"],
						locals: { _isNativeReflectConstruct: ["body.0.id", "body.0.body.body.1.argument.callee.left"] },
						exportBindingAssignments: ["body.0.body.body.1.argument.callee"],
						exportName: "_isNativeReflectConstruct",
						dependencies: {}
					}),
					iterableToArray: helper("7.0.0-beta.0", "function _iterableToArray(r){if(\"undefined\"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r[\"@@iterator\"])return Array.from(r)}", {
						globals: ["Symbol", "Array"],
						locals: { _iterableToArray: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_iterableToArray",
						dependencies: {}
					}),
					iterableToArrayLimit: helper("7.0.0-beta.0", "function _iterableToArrayLimit(r,l){var t=null==r?null:\"undefined\"!=typeof Symbol&&r[Symbol.iterator]||r[\"@@iterator\"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}", {
						globals: ["Symbol", "Object"],
						locals: { _iterableToArrayLimit: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_iterableToArrayLimit",
						dependencies: {}
					}),
					jsx: helper("7.0.0-beta.0", "var REACT_ELEMENT_TYPE;function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE=\"function\"==typeof Symbol&&Symbol.for&&Symbol.for(\"react.element\")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:void 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:\"\"+E,ref:null,props:r,_owner:null}}", {
						globals: ["Symbol", "Array"],
						locals: {
							REACT_ELEMENT_TYPE: [
								"body.0.declarations.0.id",
								"body.1.body.body.0.expression.left",
								"body.1.body.body.4.argument.properties.0.value",
								"body.1.body.body.0.expression.right.left"
							],
							_createRawReactElement: ["body.1.id"]
						},
						exportBindingAssignments: [],
						exportName: "_createRawReactElement",
						dependencies: {}
					}),
					maybeArrayLike: helper("7.9.0", "function _maybeArrayLike(r,a,e){if(a&&!Array.isArray(a)&&\"number\"==typeof a.length){var y=a.length;return arrayLikeToArray(a,void 0!==e&&e<y?e:y)}return r(a,e)}", {
						globals: ["Array"],
						locals: { _maybeArrayLike: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_maybeArrayLike",
						dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.body.1.argument.callee"] }
					}),
					newArrowCheck: helper("7.0.0-beta.0", "function _newArrowCheck(n,r){if(n!==r)throw new TypeError(\"Cannot instantiate an arrow function\")}", {
						globals: ["TypeError"],
						locals: { _newArrowCheck: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_newArrowCheck",
						dependencies: {}
					}),
					nonIterableRest: helper("7.0.0-beta.0", "function _nonIterableRest(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}", {
						globals: ["TypeError"],
						locals: { _nonIterableRest: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_nonIterableRest",
						dependencies: {}
					}),
					nonIterableSpread: helper("7.0.0-beta.0", "function _nonIterableSpread(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}", {
						globals: ["TypeError"],
						locals: { _nonIterableSpread: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_nonIterableSpread",
						dependencies: {}
					}),
					nullishReceiverError: helper("7.22.6", "function _nullishReceiverError(r){throw new TypeError(\"Cannot set property of null or undefined.\")}", {
						globals: ["TypeError"],
						locals: { _nullishReceiverError: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_nullishReceiverError",
						dependencies: {}
					}),
					objectDestructuringEmpty: helper("7.0.0-beta.0", "function _objectDestructuringEmpty(t){if(null==t)throw new TypeError(\"Cannot destructure \"+t)}", {
						globals: ["TypeError"],
						locals: { _objectDestructuringEmpty: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_objectDestructuringEmpty",
						dependencies: {}
					}),
					objectSpread2: helper("7.5.0", "function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}", {
						globals: ["Object"],
						locals: {
							ownKeys: [
								"body.0.id",
								"body.1.body.body.0.body.body.1.expression.consequent.callee.object.callee",
								"body.1.body.body.0.body.body.1.expression.alternate.alternate.callee.object.callee"
							],
							_objectSpread2: ["body.1.id"]
						},
						exportBindingAssignments: [],
						exportName: "_objectSpread2",
						dependencies: { defineProperty: ["body.1.body.body.0.body.body.1.expression.consequent.arguments.0.body.body.0.expression.callee"] }
					}),
					objectWithoutProperties: helper("7.0.0-beta.0", "function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}", {
						globals: ["Object"],
						locals: { _objectWithoutProperties: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_objectWithoutProperties",
						dependencies: { objectWithoutPropertiesLoose: ["body.0.body.body.1.declarations.2.init.callee"] }
					}),
					objectWithoutPropertiesLoose: helper("7.0.0-beta.0", "function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}", {
						globals: [],
						locals: { _objectWithoutPropertiesLoose: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_objectWithoutPropertiesLoose",
						dependencies: {}
					}),
					possibleConstructorReturn: helper("7.0.0-beta.0", "function _possibleConstructorReturn(t,e){if(e&&(\"object\"==typeof e||\"function\"==typeof e))return e;if(void 0!==e)throw new TypeError(\"Derived constructors may only return object or undefined\");return assertThisInitialized(t)}", {
						globals: ["TypeError"],
						locals: { _possibleConstructorReturn: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_possibleConstructorReturn",
						dependencies: { assertThisInitialized: ["body.0.body.body.2.argument.callee"] }
					}),
					readOnlyError: helper("7.0.0-beta.0", "function _readOnlyError(r){throw new TypeError('\"'+r+'\" is read-only')}", {
						globals: ["TypeError"],
						locals: { _readOnlyError: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_readOnlyError",
						dependencies: {}
					}),
					regeneratorRuntime: helper("7.18.0", "function _regeneratorRuntime(){\"use strict\";\n/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i=\"function\"==typeof Symbol?Symbol:{},a=i.iterator||\"@@iterator\",c=i.asyncIterator||\"@@asyncIterator\",u=i.toStringTag||\"@@toStringTag\";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},\"\")}catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,\"_invoke\",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:\"normal\",arg:t.call(e,r)}}catch(t){return{type:\"throw\",arg:t}}}e.wrap=wrap;var h=\"suspendedStart\",l=\"suspendedYield\",f=\"executing\",s=\"completed\",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){[\"next\",\"throw\",\"return\"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if(\"throw\"!==c.type){var u=c.arg,h=u.value;return h&&\"object\"==typeof h&&n.call(h,\"__await\")?e.resolve(h.__await).then((function(t){invoke(\"next\",t,i,a)}),(function(t){invoke(\"throw\",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke(\"throw\",t,i,a)}))}a(c.arg)}var r;o(this,\"_invoke\",{value:function(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error(\"Generator is already running\");if(o===s){if(\"throw\"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if(\"next\"===n.method)n.sent=n._sent=n.arg;else if(\"throw\"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else\"return\"===n.method&&n.abrupt(\"return\",n.arg);o=f;var p=tryCatch(e,r,n);if(\"normal\"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}\"throw\"===p.type&&(o=s,n.method=\"throw\",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,\"throw\"===n&&e.iterator.return&&(r.method=\"return\",r.arg=t,maybeInvokeDelegate(e,r),\"throw\"===r.method)||\"return\"!==n&&(r.method=\"throw\",r.arg=new TypeError(\"The iterator does not provide a '\"+n+\"' method\")),y;var i=tryCatch(o,e.iterator,r.arg);if(\"throw\"===i.type)return r.method=\"throw\",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,\"return\"!==r.method&&(r.method=\"next\",r.arg=t),r.delegate=null,y):a:(r.method=\"throw\",r.arg=new TypeError(\"iterator result is not an object\"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||\"\"===e){var r=e[a];if(r)return r.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(typeof e+\" is not iterable\")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,\"constructor\",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,\"constructor\",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,\"GeneratorFunction\"),e.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||\"GeneratorFunction\"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,\"GeneratorFunction\")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,\"Generator\"),define(g,a,(function(){return this})),define(g,\"toString\",(function(){return\"[object Generator]\"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)\"t\"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type=\"throw\",a.arg=e,r.next=n,o&&(r.method=\"next\",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if(\"root\"===i.tryLoc)return handle(\"end\");if(i.tryLoc<=this.prev){var c=n.call(i,\"catchLoc\"),u=n.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error(\"illegal catch attempt\")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},\"next\"===this.method&&(this.arg=t),y}},e}", {
						globals: [
							"Object",
							"Symbol",
							"Error",
							"TypeError",
							"isNaN",
							"Promise"
						],
						locals: { _regeneratorRuntime: ["body.0.id", "body.0.body.body.0.expression.left"] },
						exportBindingAssignments: ["body.0.body.body.0.expression"],
						exportName: "_regeneratorRuntime",
						dependencies: {}
					}),
					set: helper("7.0.0-beta.0", "function set(e,r,t,o){return set=\"undefined\"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,r,t,o){var f,i=superPropBase(e,r);if(i){if((f=Object.getOwnPropertyDescriptor(i,r)).set)return f.set.call(o,t),!0;if(!f.writable)return!1}if(f=Object.getOwnPropertyDescriptor(o,r)){if(!f.writable)return!1;f.value=t,Object.defineProperty(o,r,f)}else defineProperty(o,r,t);return!0},set(e,r,t,o)}function _set(e,r,t,o,f){if(!set(e,r,t,o||e)&&f)throw new TypeError(\"failed to set property\");return t}", {
						globals: [
							"Reflect",
							"Object",
							"TypeError"
						],
						locals: {
							set: [
								"body.0.id",
								"body.0.body.body.0.argument.expressions.1.callee",
								"body.1.body.body.0.test.left.argument.callee",
								"body.0.body.body.0.argument.expressions.0.left"
							],
							_set: ["body.1.id"]
						},
						exportBindingAssignments: [],
						exportName: "_set",
						dependencies: {
							superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.1.init.callee"],
							defineProperty: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.2.alternate.expression.callee"]
						}
					}),
					setFunctionName: helper("7.23.6", "function setFunctionName(e,t,n){\"symbol\"==typeof t&&(t=(t=t.description)?\"[\"+t+\"]\":\"\");try{Object.defineProperty(e,\"name\",{configurable:!0,value:n?n+\" \"+t:t})}catch(e){}return e}", {
						globals: ["Object"],
						locals: { setFunctionName: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "setFunctionName",
						dependencies: {}
					}),
					setPrototypeOf: helper("7.0.0-beta.0", "function _setPrototypeOf(t,e){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_setPrototypeOf(t,e)}", {
						globals: ["Object"],
						locals: { _setPrototypeOf: [
							"body.0.id",
							"body.0.body.body.0.argument.expressions.1.callee",
							"body.0.body.body.0.argument.expressions.0.left"
						] },
						exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
						exportName: "_setPrototypeOf",
						dependencies: {}
					}),
					skipFirstGeneratorNext: helper("7.0.0-beta.0", "function _skipFirstGeneratorNext(t){return function(){var r=t.apply(this,arguments);return r.next(),r}}", {
						globals: [],
						locals: { _skipFirstGeneratorNext: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_skipFirstGeneratorNext",
						dependencies: {}
					}),
					slicedToArray: helper("7.0.0-beta.0", "function _slicedToArray(r,e){return arrayWithHoles(r)||iterableToArrayLimit(r,e)||unsupportedIterableToArray(r,e)||nonIterableRest()}", {
						globals: [],
						locals: { _slicedToArray: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_slicedToArray",
						dependencies: {
							arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
							iterableToArrayLimit: ["body.0.body.body.0.argument.left.left.right.callee"],
							unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
							nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
						}
					}),
					superPropBase: helper("7.0.0-beta.0", "function _superPropBase(t,o){for(;!{}.hasOwnProperty.call(t,o)&&null!==(t=getPrototypeOf(t)););return t}", {
						globals: [],
						locals: { _superPropBase: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_superPropBase",
						dependencies: { getPrototypeOf: ["body.0.body.body.0.test.right.right.right.callee"] }
					}),
					superPropGet: helper("7.25.0", "function _superPropGet(t,o,e,r){var p=get(getPrototypeOf(1&r?t.prototype:t),o,e);return 2&r&&\"function\"==typeof p?function(t){return p.apply(e,t)}:p}", {
						globals: [],
						locals: { _superPropGet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_superPropGet",
						dependencies: {
							get: ["body.0.body.body.0.declarations.0.init.callee"],
							getPrototypeOf: ["body.0.body.body.0.declarations.0.init.arguments.0.callee"]
						}
					}),
					superPropSet: helper("7.25.0", "function _superPropSet(t,e,o,r,p,f){return set(getPrototypeOf(f?t.prototype:t),e,o,r,p)}", {
						globals: [],
						locals: { _superPropSet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_superPropSet",
						dependencies: {
							set: ["body.0.body.body.0.argument.callee"],
							getPrototypeOf: ["body.0.body.body.0.argument.arguments.0.callee"]
						}
					}),
					taggedTemplateLiteral: helper("7.0.0-beta.0", "function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}", {
						globals: ["Object"],
						locals: { _taggedTemplateLiteral: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_taggedTemplateLiteral",
						dependencies: {}
					}),
					taggedTemplateLiteralLoose: helper("7.0.0-beta.0", "function _taggedTemplateLiteralLoose(e,t){return t||(t=e.slice(0)),e.raw=t,e}", {
						globals: [],
						locals: { _taggedTemplateLiteralLoose: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_taggedTemplateLiteralLoose",
						dependencies: {}
					}),
					tdz: helper("7.5.5", "function _tdzError(e){throw new ReferenceError(e+\" is not defined - temporal dead zone\")}", {
						globals: ["ReferenceError"],
						locals: { _tdzError: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_tdzError",
						dependencies: {}
					}),
					temporalRef: helper("7.0.0-beta.0", "function _temporalRef(r,e){return r===undef?err(e):r}", {
						globals: [],
						locals: { _temporalRef: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_temporalRef",
						dependencies: {
							temporalUndefined: ["body.0.body.body.0.argument.test.right"],
							tdz: ["body.0.body.body.0.argument.consequent.callee"]
						}
					}),
					temporalUndefined: helper("7.0.0-beta.0", "function _temporalUndefined(){}", {
						globals: [],
						locals: { _temporalUndefined: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_temporalUndefined",
						dependencies: {}
					}),
					toArray: helper("7.0.0-beta.0", "function _toArray(r){return arrayWithHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableRest()}", {
						globals: [],
						locals: { _toArray: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_toArray",
						dependencies: {
							arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
							iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
							unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
							nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
						}
					}),
					toConsumableArray: helper("7.0.0-beta.0", "function _toConsumableArray(r){return arrayWithoutHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableSpread()}", {
						globals: [],
						locals: { _toConsumableArray: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_toConsumableArray",
						dependencies: {
							arrayWithoutHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
							iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
							unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
							nonIterableSpread: ["body.0.body.body.0.argument.right.callee"]
						}
					}),
					toPrimitive: helper("7.1.5", "function toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===r?String:Number)(t)}", {
						globals: [
							"Symbol",
							"TypeError",
							"String",
							"Number"
						],
						locals: { toPrimitive: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "toPrimitive",
						dependencies: {}
					}),
					toPropertyKey: helper("7.1.5", "function toPropertyKey(t){var i=toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\"}", {
						globals: [],
						locals: { toPropertyKey: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "toPropertyKey",
						dependencies: { toPrimitive: ["body.0.body.body.0.declarations.0.init.callee"] }
					}),
					toSetter: helper("7.24.0", "function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},\"_\",{set:function(o){e[r]=o,t.apply(n,e)}})}", {
						globals: ["Object"],
						locals: { _toSetter: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_toSetter",
						dependencies: {}
					}),
					typeof: helper("7.0.0-beta.0", "function _typeof(o){\"@babel/helpers - typeof\";return _typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&\"function\"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?\"symbol\":typeof o},_typeof(o)}", {
						globals: ["Symbol"],
						locals: { _typeof: [
							"body.0.id",
							"body.0.body.body.0.argument.expressions.1.callee",
							"body.0.body.body.0.argument.expressions.0.left"
						] },
						exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
						exportName: "_typeof",
						dependencies: {}
					}),
					unsupportedIterableToArray: helper("7.9.0", "function _unsupportedIterableToArray(r,a){if(r){if(\"string\"==typeof r)return arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return\"Object\"===t&&r.constructor&&(t=r.constructor.name),\"Map\"===t||\"Set\"===t?Array.from(r):\"Arguments\"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?arrayLikeToArray(r,a):void 0}}", {
						globals: ["Array"],
						locals: { _unsupportedIterableToArray: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_unsupportedIterableToArray",
						dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.body.0.consequent.argument.callee", "body.0.body.body.0.consequent.body.2.argument.expressions.1.alternate.consequent.callee"] }
					}),
					usingCtx: helper("7.23.9", "function _usingCtx(){var r=\"function\"==typeof SuppressedError?SuppressedError:function(r,e){var n=Error();return n.name=\"SuppressedError\",n.error=r,n.suppressed=e,n},e={},n=[];function using(r,e){if(null!=e){if(Object(e)!==e)throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");if(r)var o=e[Symbol.asyncDispose||Symbol.for(\"Symbol.asyncDispose\")];if(void 0===o&&(o=e[Symbol.dispose||Symbol.for(\"Symbol.dispose\")],r))var t=o;if(\"function\"!=typeof o)throw new TypeError(\"Object is not disposable.\");t&&(o=function(){try{t.call(e)}catch(r){return Promise.reject(r)}}),n.push({v:e,d:o,a:r})}else r&&n.push({d:e,a:r});return e}return{e:e,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o,t=this.e,s=0;function next(){for(;o=n.pop();)try{if(!o.a&&1===s)return s=0,n.push(o),Promise.resolve().then(next);if(o.d){var r=o.d.call(o.v);if(o.a)return s|=2,Promise.resolve(r).then(next,err)}else s|=1}catch(r){return err(r)}if(1===s)return t!==e?Promise.reject(t):Promise.resolve();if(t!==e)throw t}function err(n){return t=t!==e?new r(n,t):n,next()}return next()}}}", {
						globals: [
							"SuppressedError",
							"Error",
							"Object",
							"TypeError",
							"Symbol",
							"Promise"
						],
						locals: { _usingCtx: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_usingCtx",
						dependencies: {}
					}),
					wrapAsyncGenerator: helper("7.0.0-beta.0", "function _wrapAsyncGenerator(e){return function(){return new AsyncGenerator(e.apply(this,arguments))}}function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:o).then((function(t){if(u){var i=\"return\"===r?\"return\":\"next\";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?\"return\":\"normal\",t)}),(function(e){resume(\"throw\",e)}))}catch(e){settle(\"throw\",e)}}function settle(e,n){switch(e){case\"return\":r.resolve({value:n,done:!0});break;case\"throw\":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},\"function\"!=typeof e.return&&(this.return=void 0)}AsyncGenerator.prototype[\"function\"==typeof Symbol&&Symbol.asyncIterator||\"@@asyncIterator\"]=function(){return this},AsyncGenerator.prototype.next=function(e){return this._invoke(\"next\",e)},AsyncGenerator.prototype.throw=function(e){return this._invoke(\"throw\",e)},AsyncGenerator.prototype.return=function(e){return this._invoke(\"return\",e)};", {
						globals: ["Promise", "Symbol"],
						locals: {
							_wrapAsyncGenerator: ["body.0.id"],
							AsyncGenerator: [
								"body.1.id",
								"body.0.body.body.0.argument.body.body.0.argument.callee",
								"body.2.expression.expressions.0.left.object.object",
								"body.2.expression.expressions.1.left.object.object",
								"body.2.expression.expressions.2.left.object.object",
								"body.2.expression.expressions.3.left.object.object"
							]
						},
						exportBindingAssignments: [],
						exportName: "_wrapAsyncGenerator",
						dependencies: { OverloadYield: ["body.1.body.body.1.body.body.0.block.body.0.declarations.2.init.right"] }
					}),
					wrapNativeSuper: helper("7.0.0-beta.0", "function _wrapNativeSuper(t){var r=\"function\"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(t){if(null===t||!isNativeFunction(t))return t;if(\"function\"!=typeof t)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return construct(t,arguments,getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),setPrototypeOf(Wrapper,t)},_wrapNativeSuper(t)}", {
						globals: [
							"Map",
							"TypeError",
							"Object"
						],
						locals: { _wrapNativeSuper: [
							"body.0.id",
							"body.0.body.body.1.argument.expressions.1.callee",
							"body.0.body.body.1.argument.expressions.0.left"
						] },
						exportBindingAssignments: ["body.0.body.body.1.argument.expressions.0"],
						exportName: "_wrapNativeSuper",
						dependencies: {
							getPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.arguments.2.object.callee"],
							setPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.4.argument.expressions.1.callee"],
							isNativeFunction: ["body.0.body.body.1.argument.expressions.0.right.body.body.0.test.right.argument.callee"],
							construct: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.callee"]
						}
					}),
					wrapRegExp: helper("7.19.0", "function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildGroups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if(\"number\"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.prototype[Symbol.replace]=function(t,p){if(\"string\"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)>/g,(function(e,r){var t=o[r];return\"$\"+(Array.isArray(t)?t.join(\"$\"):t)})))}if(\"function\"==typeof p){var i=this;return e[Symbol.replace].call(this,t,(function(){var e=arguments;return\"object\"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}return e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}", {
						globals: [
							"RegExp",
							"WeakMap",
							"Object",
							"Symbol",
							"Array"
						],
						locals: { _wrapRegExp: [
							"body.0.id",
							"body.0.body.body.4.argument.expressions.3.callee.object",
							"body.0.body.body.0.expression.left"
						] },
						exportBindingAssignments: ["body.0.body.body.0.expression"],
						exportName: "_wrapRegExp",
						dependencies: {
							setPrototypeOf: ["body.0.body.body.2.body.body.1.argument.expressions.1.callee"],
							inherits: ["body.0.body.body.4.argument.expressions.0.callee"]
						}
					}),
					writeOnlyError: helper("7.12.13", "function _writeOnlyError(r){throw new TypeError('\"'+r+'\" is write-only')}", {
						globals: ["TypeError"],
						locals: { _writeOnlyError: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_writeOnlyError",
						dependencies: {}
					})
				};
				Object.assign(helpers, {
					AwaitValue: helper("7.0.0-beta.0", "function _AwaitValue(t){this.wrapped=t}", {
						globals: [],
						locals: { _AwaitValue: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_AwaitValue",
						dependencies: {}
					}),
					applyDecs: helper("7.17.8", "function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,\"getMetadata\"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.private;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,\"constructor\"))return i.constructor},setMetadata:function(o,i){old_assertNotFinished(r,\"setMetadata\"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.public={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMapToFinal(e,t){var a=e[Symbol.metadata||Symbol.for(\"Symbol.metadata\")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.length;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.from(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadata||Symbol.for(\"Symbol.metadata\")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,\"addInitializer\"),old_assertCallable(a,\"An initializer\"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c=\"accessor\";break;case 2:c=\"method\";break;case 3:c=\"getter\";break;case 4:c=\"setter\";break;default:c=\"field\"}var d,u,f={kind:c,name:l?\"#\"+t:toPropertyKey(t),isStatic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error(\"attempted to call \"+t+\" after decoration was finished\")}function old_assertMetadataKey(e){if(\"symbol\"!=typeof e)throw new TypeError(\"Metadata keys must be symbols, received: \"+e)}function old_assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if(\"object\"!==a||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&old_assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&old_assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&old_assertCallable(t.init,\"accessor.init\"),void 0!==t.initializer&&old_assertCallable(t.initializer,\"accessor.initializer\")}else if(\"function\"!==a)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function old_getInit(e){var t;return null==(t=e.init)&&(t=e.initializer)&&void 0!==console&&console.warn(\".initializer has been renamed to .init as of March 2022\"),t}function old_applyMemberDec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u=\"get\"):3===o?(c={get:a[3]},u=\"get\"):4===o?(c={set:a[3]},u=\"set\"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],\"#\"+r,\"set\"),setFunctionName(a[3],\"#\"+r,u))):0!==o&&(c=Object.getOwnPropertyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),\"function\"==typeof h)void 0!==(p=old_memberDec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:\"function\"==typeof d?d=[d,b]:d.push(b)))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if(\"function\"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.value=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(var i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}old_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a].call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{var c=Object.assign({kind:\"class\",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))}}function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyClassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}", {
						globals: [
							"Object",
							"Map",
							"Symbol",
							"Array",
							"Error",
							"TypeError",
							"console"
						],
						locals: {
							old_createMetadataMethodsForProperty: [
								"body.0.id",
								"body.3.body.body.4.block.body.0.argument.arguments.1.arguments.1.callee",
								"body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.1.callee"
							],
							old_convertMetadataMapToFinal: [
								"body.1.id",
								"body.13.body.body.1.argument.expressions.1.callee",
								"body.13.body.body.1.argument.expressions.3.callee"
							],
							old_createAddInitializerMethod: [
								"body.2.id",
								"body.3.body.body.3.test.expressions.0.right.right.callee",
								"body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.0.properties.2.value.callee"
							],
							old_memberDec: [
								"body.3.id",
								"body.9.body.body.1.consequent.expression.left.right.right.callee",
								"body.9.body.body.1.alternate.body.body.1.expression.left.right.right.callee"
							],
							old_assertNotFinished: [
								"body.4.id",
								"body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.0.callee",
								"body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.0.callee",
								"body.2.body.body.0.argument.body.body.0.expression.expressions.0.callee"
							],
							old_assertMetadataKey: [
								"body.5.id",
								"body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.1.callee",
								"body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.1.callee"
							],
							old_assertCallable: [
								"body.6.id",
								"body.2.body.body.0.argument.body.body.0.expression.expressions.1.callee",
								"body.7.body.body.1.consequent.body.1.expression.expressions.0.right.callee",
								"body.7.body.body.1.consequent.body.1.expression.expressions.1.right.callee",
								"body.7.body.body.1.consequent.body.1.expression.expressions.2.right.callee",
								"body.7.body.body.1.consequent.body.1.expression.expressions.3.right.callee"
							],
							old_assertValidReturnValue: [
								"body.7.id",
								"body.9.body.body.1.consequent.expression.right.expressions.0.callee",
								"body.9.body.body.1.alternate.body.body.1.expression.right.expressions.0.callee",
								"body.12.body.body.0.consequent.body.0.body.body.2.expression.right.expressions.0.callee"
							],
							old_getInit: [
								"body.8.id",
								"body.9.body.body.1.consequent.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee",
								"body.9.body.body.1.alternate.body.body.1.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee"
							],
							old_applyMemberDec: ["body.9.id", "body.10.body.body.0.body.body.1.consequent.body.2.expression.callee"],
							old_applyMemberDecs: ["body.10.id", "body.13.body.body.1.argument.expressions.0.callee"],
							old_pushInitializers: [
								"body.11.id",
								"body.10.body.body.1.expression.expressions.0.callee",
								"body.10.body.body.1.expression.expressions.1.callee"
							],
							old_applyClassDecs: ["body.12.id", "body.13.body.body.1.argument.expressions.2.callee"],
							applyDecs: ["body.13.id"]
						},
						exportBindingAssignments: [],
						exportName: "applyDecs",
						dependencies: {
							setFunctionName: ["body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
							toPropertyKey: ["body.3.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
						}
					}),
					applyDecs2203: helper("7.19.0", "function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\")}(t),assertCallable(r,\"An initializer\"),e.push(r)}}function memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c=\"accessor\";break;case 2:c=\"method\";break;case 3:c=\"getter\";break;case 4:c=\"setter\";break;default:c=\"field\"}var l,u,f={kind:c,name:s?\"#\"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=function(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if(\"object\"!==r||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&assertCallable(t.init,\"accessor.init\")}else if(\"function\"!==r)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{get:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),\"function\"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDec(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:\"function\"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if(\"function\"!=typeof l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){var a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:\"class\",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;function applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}", {
						globals: [
							"Error",
							"TypeError",
							"Object",
							"Map",
							"Array"
						],
						locals: {
							applyDecs2203Factory: ["body.0.id", "body.2.body.body.0.argument.callee.right.right.callee"],
							applyDecs2203Impl: [
								"body.1.declarations.0.id",
								"body.2.body.body.0.argument.callee.right.left",
								"body.2.body.body.0.argument.callee.left"
							],
							applyDecs2203: ["body.2.id"]
						},
						exportBindingAssignments: [],
						exportName: "applyDecs2203",
						dependencies: {}
					}),
					applyDecs2203R: helper("7.20.0", "function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\")}(t),assertCallable(r,\"An initializer\"),e.push(r)}}function memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c=\"accessor\";break;case 2:c=\"method\";break;case 3:c=\"getter\";break;case 4:c=\"setter\";break;default:c=\"field\"}var l,u,f={kind:c,name:o?\"#\"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddInitializerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!==a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if(\"object\"!==r||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&assertCallable(t.init,\"accessor.init\")}else if(\"function\"!==r)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o?(0===a||1===a?(c={get:r[3],set:r[4]},u=\"get\"):3===a?(c={get:r[3]},u=\"get\"):4===a?(c={set:r[3]},u=\"set\"):c={value:r[3]},0!==a&&(1===a&&setFunctionName(r[4],\"#\"+n,\"set\"),setFunctionName(r[3],\"#\"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),\"function\"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(void 0===l?l=y:\"function\"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if(\"function\"!=typeof l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:\"class\",name:a,addInitializer:createAddInitializerMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}", {
						globals: [
							"Error",
							"TypeError",
							"Object",
							"Map",
							"Array"
						],
						locals: {
							applyDecs2203RFactory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
							applyDecs2203R: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
						},
						exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
						exportName: "applyDecs2203R",
						dependencies: {
							setFunctionName: ["body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
							toPropertyKey: ["body.0.body.body.1.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
						}
					}),
					applyDecs2301: helper("7.21.0", "function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\")}(t),assertCallable(r,\"An initializer\"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError(\"Attempted to access private element on non-instance\")}function memberDec(e,t,r,n,a,i,s,o,c){var u;switch(a){case 1:u=\"accessor\";break;case 2:u=\"method\";break;case 3:u=\"getter\";break;case 4:u=\"setter\";break;default:u=\"field\"}var l,f,p={kind:u,name:s?\"#\"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e){return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivate(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():function(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if(\"object\"!==r||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&assertCallable(t.init,\"accessor.init\")}else if(\"function\"!==r)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f=\"get\"):3===a?(u={get:r[3]},f=\"get\"):4===a?(u={set:r[3]},f=\"set\"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,\"#\"+n,\"set\"),setFunctionName(u[f||\"value\"],\"#\"+n,f))):0!==a&&(u=Object.getOwnPropertyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),\"function\"==typeof g)void 0!==(h=memberDec(g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:\"function\"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if(\"function\"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.set=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((function(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=function(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b&&3!==d)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:\"class\",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}", {
						globals: [
							"Error",
							"TypeError",
							"Object",
							"Map",
							"Array"
						],
						locals: {
							applyDecs2301Factory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
							applyDecs2301: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
						},
						exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
						exportName: "applyDecs2301",
						dependencies: {
							checkInRHS: ["body.0.body.body.7.body.body.0.body.body.1.consequent.body.1.test.expressions.0.consequent.expressions.2.right.right.body.body.0.argument.left.callee"],
							setFunctionName: ["body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
							toPropertyKey: ["body.0.body.body.2.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
						}
					}),
					applyDecs2305: helper("7.21.0", "function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}function c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if(\"function\"!=typeof e&&(n||void 0!==e))throw new TypeError(t+\" must \"+(r||\"be\")+\" a function\"+(n?\"\":\" or undefined\"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))throw new TypeError(\"Attempted to access private element on non-instance\")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var w={},S=[],A=3===o?\"get\":4===o||d?\"set\":\"value\";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,\"get\"),set:function(e){t[4](this,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?\"\":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var D=v[j],E=r?v[j-1]:void 0,I={},O={kind:[\"field\",\"accessor\",\"method\",\"getter\",\"setter\",\"class\"][o],name:n,metadata:a,addInitializer:function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\");s(t,\"An initializer\",\"be\",!0),c.push(t)}.bind(null,I)};try{if(b)(y=s(D.call(E,P,O),\"class decorators\",\"return\"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),w.value}:(o<4&&(k=i(w,\"get\",m)),3!==o&&(F=i(w,\"set\",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if(\"object\"==typeof P&&P)(y=s(P.get,\"accessor.get\"))&&(w.get=y),(y=s(P.set,\"accessor.set\"))&&(w.set=y),(y=s(P.init,\"accessor.init\"))&&S.push(y);else if(void 0!==P)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\")}else s(P,(p?\"field\":\"method\")+\" decorators\",\"return\")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].call(e,t);return t})),p||b||(f?d?u.push(i(w,\"get\"),i(w,\"set\")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for(\"Symbol.metadata\"),{configurable:!0,enumerable:!0,value:t})}if(arguments.length>=6)var l=a[Symbol.metadata||Symbol.for(\"Symbol.metadata\")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=function(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+\"/\"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?\"#\"+h:toPropertyKey(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.length&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}", {
						globals: [
							"TypeError",
							"Array",
							"Object",
							"Error",
							"Symbol",
							"Map"
						],
						locals: { applyDecs2305: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "applyDecs2305",
						dependencies: {
							checkInRHS: ["body.0.body.body.6.declarations.1.init.callee.body.body.0.declarations.3.init.body.body.0.argument.left.callee"],
							setFunctionName: ["body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.1.right.callee"],
							toPropertyKey: ["body.0.body.body.6.declarations.1.init.callee.body.body.2.body.body.1.consequent.body.2.expression.arguments.3.alternate.callee"]
						}
					}),
					classApplyDescriptorDestructureSet: helper("7.13.10", "function _classApplyDescriptorDestructureSet(e,t){if(t.set)return\"__destrObj\"in t||(t.__destrObj={set value(r){t.set.call(e,r)}}),t.__destrObj;if(!t.writable)throw new TypeError(\"attempted to set read only private field\");return t}", {
						globals: ["TypeError"],
						locals: { _classApplyDescriptorDestructureSet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classApplyDescriptorDestructureSet",
						dependencies: {}
					}),
					classApplyDescriptorGet: helper("7.13.10", "function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}", {
						globals: [],
						locals: { _classApplyDescriptorGet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classApplyDescriptorGet",
						dependencies: {}
					}),
					classApplyDescriptorSet: helper("7.13.10", "function _classApplyDescriptorSet(e,t,l){if(t.set)t.set.call(e,l);else{if(!t.writable)throw new TypeError(\"attempted to set read only private field\");t.value=l}}", {
						globals: ["TypeError"],
						locals: { _classApplyDescriptorSet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classApplyDescriptorSet",
						dependencies: {}
					}),
					classCheckPrivateStaticAccess: helper("7.13.10", "function _classCheckPrivateStaticAccess(s,a,r){return assertClassBrand(a,s,r)}", {
						globals: [],
						locals: { _classCheckPrivateStaticAccess: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classCheckPrivateStaticAccess",
						dependencies: { assertClassBrand: ["body.0.body.body.0.argument.callee"] }
					}),
					classCheckPrivateStaticFieldDescriptor: helper("7.13.10", "function _classCheckPrivateStaticFieldDescriptor(t,e){if(void 0===t)throw new TypeError(\"attempted to \"+e+\" private static field before its declaration\")}", {
						globals: ["TypeError"],
						locals: { _classCheckPrivateStaticFieldDescriptor: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classCheckPrivateStaticFieldDescriptor",
						dependencies: {}
					}),
					classExtractFieldDescriptor: helper("7.13.10", "function _classExtractFieldDescriptor(e,t){return classPrivateFieldGet2(t,e)}", {
						globals: [],
						locals: { _classExtractFieldDescriptor: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classExtractFieldDescriptor",
						dependencies: { classPrivateFieldGet2: ["body.0.body.body.0.argument.callee"] }
					}),
					classPrivateFieldDestructureSet: helper("7.4.4", "function _classPrivateFieldDestructureSet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorDestructureSet(e,r)}", {
						globals: [],
						locals: { _classPrivateFieldDestructureSet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateFieldDestructureSet",
						dependencies: {
							classApplyDescriptorDestructureSet: ["body.0.body.body.1.argument.callee"],
							classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
						}
					}),
					classPrivateFieldGet: helper("7.0.0-beta.0", "function _classPrivateFieldGet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorGet(e,r)}", {
						globals: [],
						locals: { _classPrivateFieldGet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateFieldGet",
						dependencies: {
							classApplyDescriptorGet: ["body.0.body.body.1.argument.callee"],
							classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
						}
					}),
					classPrivateFieldSet: helper("7.0.0-beta.0", "function _classPrivateFieldSet(e,t,r){var s=classPrivateFieldGet2(t,e);return classApplyDescriptorSet(e,s,r),r}", {
						globals: [],
						locals: { _classPrivateFieldSet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateFieldSet",
						dependencies: {
							classApplyDescriptorSet: ["body.0.body.body.1.argument.expressions.0.callee"],
							classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
						}
					}),
					classPrivateMethodGet: helper("7.1.6", "function _classPrivateMethodGet(s,a,r){return assertClassBrand(a,s),r}", {
						globals: [],
						locals: { _classPrivateMethodGet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateMethodGet",
						dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"] }
					}),
					classPrivateMethodSet: helper("7.1.6", "function _classPrivateMethodSet(){throw new TypeError(\"attempted to reassign private method\")}", {
						globals: ["TypeError"],
						locals: { _classPrivateMethodSet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classPrivateMethodSet",
						dependencies: {}
					}),
					classStaticPrivateFieldDestructureSet: helper("7.13.10", "function _classStaticPrivateFieldDestructureSet(t,r,s){return assertClassBrand(r,t),classCheckPrivateStaticFieldDescriptor(s,\"set\"),classApplyDescriptorDestructureSet(t,s)}", {
						globals: [],
						locals: { _classStaticPrivateFieldDestructureSet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classStaticPrivateFieldDestructureSet",
						dependencies: {
							classApplyDescriptorDestructureSet: ["body.0.body.body.0.argument.expressions.2.callee"],
							assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
							classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
						}
					}),
					classStaticPrivateFieldSpecGet: helper("7.0.2", "function _classStaticPrivateFieldSpecGet(t,s,r){return assertClassBrand(s,t),classCheckPrivateStaticFieldDescriptor(r,\"get\"),classApplyDescriptorGet(t,r)}", {
						globals: [],
						locals: { _classStaticPrivateFieldSpecGet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classStaticPrivateFieldSpecGet",
						dependencies: {
							classApplyDescriptorGet: ["body.0.body.body.0.argument.expressions.2.callee"],
							assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
							classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
						}
					}),
					classStaticPrivateFieldSpecSet: helper("7.0.2", "function _classStaticPrivateFieldSpecSet(s,t,r,e){return assertClassBrand(t,s),classCheckPrivateStaticFieldDescriptor(r,\"set\"),classApplyDescriptorSet(s,r,e),e}", {
						globals: [],
						locals: { _classStaticPrivateFieldSpecSet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classStaticPrivateFieldSpecSet",
						dependencies: {
							classApplyDescriptorSet: ["body.0.body.body.0.argument.expressions.2.callee"],
							assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
							classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
						}
					}),
					classStaticPrivateMethodSet: helper("7.3.2", "function _classStaticPrivateMethodSet(){throw new TypeError(\"attempted to set read only static private field\")}", {
						globals: ["TypeError"],
						locals: { _classStaticPrivateMethodSet: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_classStaticPrivateMethodSet",
						dependencies: {}
					}),
					defineEnumerableProperties: helper("7.0.0-beta.0", "function _defineEnumerableProperties(e,r){for(var t in r){var n=r[t];n.configurable=n.enumerable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,t,n)}if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(r),b=0;b<a.length;b++){var i=a[b];(n=r[i]).configurable=n.enumerable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,i,n)}return e}", {
						globals: ["Object"],
						locals: { _defineEnumerableProperties: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_defineEnumerableProperties",
						dependencies: {}
					}),
					dispose: helper("7.22.0", "function dispose_SuppressedError(r,e){return\"undefined\"!=typeof SuppressedError?dispose_SuppressedError=SuppressedError:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Object.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}function _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}", {
						globals: [
							"SuppressedError",
							"Error",
							"Object",
							"Promise"
						],
						locals: {
							dispose_SuppressedError: [
								"body.0.id",
								"body.0.body.body.0.argument.expressions.0.alternate.expressions.1.left.object",
								"body.0.body.body.0.argument.expressions.0.alternate.expressions.1.right.arguments.1.properties.0.value.properties.0.value",
								"body.0.body.body.0.argument.expressions.1.callee",
								"body.1.body.body.1.body.body.0.argument.expressions.0.right.consequent.callee",
								"body.0.body.body.0.argument.expressions.0.consequent.left",
								"body.0.body.body.0.argument.expressions.0.alternate.expressions.0.left"
							],
							_dispose: ["body.1.id"]
						},
						exportBindingAssignments: [],
						exportName: "_dispose",
						dependencies: {}
					}),
					objectSpread: helper("7.0.0-beta.0", "function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?Object(arguments[r]):{},o=Object.keys(t);\"function\"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.forEach((function(r){defineProperty(e,r,t[r])}))}return e}", {
						globals: ["Object"],
						locals: { _objectSpread: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_objectSpread",
						dependencies: { defineProperty: ["body.0.body.body.0.body.body.1.expression.expressions.1.arguments.0.body.body.0.expression.callee"] }
					}),
					using: helper("7.22.0", "function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");if(e)var r=n[Symbol.asyncDispose||Symbol.for(\"Symbol.asyncDispose\")];if(null==r&&(r=n[Symbol.dispose||Symbol.for(\"Symbol.dispose\")]),\"function\"!=typeof r)throw new TypeError(\"Property [Symbol.dispose] is not a function.\");return o.push({v:n,d:r,a:e}),n}", {
						globals: [
							"Object",
							"TypeError",
							"Symbol"
						],
						locals: { _using: ["body.0.id"] },
						exportBindingAssignments: [],
						exportName: "_using",
						dependencies: {}
					})
				});
			},
			"./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0, exports$1.get = get$1, exports$1.getDependencies = function(name) {
					return loadHelper(name).getDependencies();
				}, exports$1.list = void 0, exports$1.minVersion = function(name) {
					return loadHelper(name).minVersion;
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _helpersGenerated = __webpack_require__$1("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/helpers-generated.js");
				const { cloneNode, identifier } = _t;
				function deep(obj, path$9, value$1) {
					try {
						const parts = path$9.split(".");
						let last = parts.shift();
						for (; parts.length > 0;) obj = obj[last], last = parts.shift();
						if (!(arguments.length > 2)) return obj[last];
						obj[last] = value$1;
					} catch (e$1) {
						throw e$1.message += ` (when accessing ${path$9})`, e$1;
					}
				}
				const helperData = Object.create(null);
				function loadHelper(name) {
					if (!helperData[name]) {
						const helper = _helpersGenerated.default[name];
						if (!helper) throw Object.assign(new ReferenceError(`Unknown helper ${name}`), {
							code: "BABEL_HELPER_UNKNOWN",
							helper: name
						});
						helperData[name] = {
							minVersion: helper.minVersion,
							build(getDependency, bindingName, localBindings, adjustAst) {
								const ast = helper.ast();
								return function(ast$1, metadata, bindingName$1, localBindings$1, getDependency$1, adjustAst$1) {
									const { locals, dependencies, exportBindingAssignments, exportName } = metadata, bindings = new Set(localBindings$1 || []);
									bindingName$1 && bindings.add(bindingName$1);
									for (const [name$1, paths] of (Object.entries || ((o$1) => Object.keys(o$1).map((k$2) => [k$2, o$1[k$2]])))(locals)) {
										let newName = name$1;
										if (bindingName$1 && name$1 === exportName) newName = bindingName$1;
										else for (; bindings.has(newName);) newName = "_" + newName;
										if (newName !== name$1) for (const path$9 of paths) deep(ast$1, path$9, identifier(newName));
									}
									for (const [name$1, paths] of (Object.entries || ((o$1) => Object.keys(o$1).map((k$2) => [k$2, o$1[k$2]])))(dependencies)) {
										const ref = "function" == typeof getDependency$1 && getDependency$1(name$1) || identifier(name$1);
										for (const path$9 of paths) deep(ast$1, path$9, cloneNode(ref));
									}
									adjustAst$1?.(ast$1, exportName, (map) => {
										exportBindingAssignments.forEach((p$1) => deep(ast$1, p$1, map(deep(ast$1, p$1))));
									});
								}(ast, helper.metadata, bindingName, localBindings, getDependency, adjustAst), {
									nodes: ast.body,
									globals: helper.metadata.globals
								};
							},
							getDependencies: () => Object.keys(helper.metadata.dependencies)
						};
					}
					return helperData[name];
				}
				function get$1(name, getDependency, bindingName, localBindings, adjustAst) {
					if ("object" == typeof bindingName) {
						const id = bindingName;
						bindingName = "Identifier" === (null == id ? void 0 : id.type) ? id.name : void 0;
					}
					return loadHelper(name).build(getDependency, bindingName, localBindings, adjustAst);
				}
				exports$1.ensure = (name) => {
					loadHelper(name);
				};
				exports$1.list = Object.keys(_helpersGenerated.default).map((name) => name.replace(/^_/, ""));
				exports$1.default = get$1;
			},
			"./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				function _objectWithoutPropertiesLoose(r$1, e$1) {
					if (null == r$1) return {};
					var t = {};
					for (var n in r$1) if ({}.hasOwnProperty.call(r$1, n)) {
						if (e$1.includes(n)) continue;
						t[n] = r$1[n];
					}
					return t;
				}
				Object.defineProperty(exports$1, "__esModule", { value: !0 });
				class Position {
					constructor(line, col, index) {
						this.line = void 0, this.column = void 0, this.index = void 0, this.line = line, this.column = col, this.index = index;
					}
				}
				class SourceLocation {
					constructor(start, end) {
						this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = start, this.end = end;
					}
				}
				function createPositionWithColumnOffset(position, columnOffset) {
					const { line, column, index } = position;
					return new Position(line, column + columnOffset, index + columnOffset);
				}
				const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
				var ModuleErrors = {
					ImportMetaOutsideModule: {
						message: "import.meta may appear only with 'sourceType: \"module\"'",
						code
					},
					ImportOutsideModule: {
						message: "'import' and 'export' may appear only with 'sourceType: \"module\"'",
						code
					}
				};
				const NodeDescriptions = {
					ArrayPattern: "array destructuring pattern",
					AssignmentExpression: "assignment expression",
					AssignmentPattern: "assignment expression",
					ArrowFunctionExpression: "arrow function expression",
					ConditionalExpression: "conditional expression",
					CatchClause: "catch clause",
					ForOfStatement: "for-of statement",
					ForInStatement: "for-in statement",
					ForStatement: "for-loop",
					FormalParameters: "function parameter list",
					Identifier: "identifier",
					ImportSpecifier: "import specifier",
					ImportDefaultSpecifier: "import default specifier",
					ImportNamespaceSpecifier: "import namespace specifier",
					ObjectPattern: "object destructuring pattern",
					ParenthesizedExpression: "parenthesized expression",
					RestElement: "rest element",
					UpdateExpression: {
						true: "prefix operation",
						false: "postfix operation"
					},
					VariableDeclarator: "variable declaration",
					YieldExpression: "yield expression"
				}, toNodeDescription = (node) => "UpdateExpression" === node.type ? NodeDescriptions.UpdateExpression[`${node.prefix}`] : NodeDescriptions[node.type];
				var StandardErrors = {
					AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`,
					ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
					AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
					AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
					AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
					AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
					AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
					AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
					AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
					BadGetterArity: "A 'get' accessor must not have any formal parameters.",
					BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
					BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
					ConstructorClassField: "Classes may not have a field named 'constructor'.",
					ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
					ConstructorIsAccessor: "Class constructor may not be an accessor.",
					ConstructorIsAsync: "Constructor can't be an async function.",
					ConstructorIsGenerator: "Constructor can't be a generator.",
					DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`,
					DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
					DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
					DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
					DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
					DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
					DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
					DecoratorStaticBlock: "Decorators can't be used with a static block.",
					DeferImportRequiresNamespace: "Only `import defer * as x from \"./module\"` is valid.",
					DeletePrivateField: "Deleting a private field is not allowed.",
					DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
					DuplicateConstructor: "Duplicate constructor in the same class.",
					DuplicateDefaultExport: "Only one default export allowed per module.",
					DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
					DuplicateProto: "Redefinition of __proto__ property.",
					DuplicateRegExpFlags: "Duplicate regular expression flag.",
					DynamicImportPhaseRequiresImportExpressions: ({ phase }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,
					ElementAfterRest: "Rest element must be last element.",
					EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
					ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
					ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
					ForInOfLoopInitializer: ({ type: type$1 }) => `'${"ForInStatement" === type$1 ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
					ForInUsing: "For-in loop may not start with 'using' declaration.",
					ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
					ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
					GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
					IllegalBreakContinue: ({ type: type$1 }) => `Unsyntactic ${"BreakStatement" === type$1 ? "break" : "continue"}.`,
					IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
					IllegalReturn: "'return' outside of function.",
					ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.",
					ImportBindingIsString: ({ importName }) => `A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${importName}" as foo }\`?`,
					ImportCallArity: "`import()` requires exactly one or two arguments.",
					ImportCallNotNewExpression: "Cannot use new with import(...).",
					ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
					ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
					ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
					ImportReflectionNotBinding: "Only `import module x from \"./module\"` is valid.",
					IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
					InvalidBigIntLiteral: "Invalid BigIntLiteral.",
					InvalidCodePoint: "Code point out of bounds.",
					InvalidCoverInitializedName: "Invalid shorthand property initializer.",
					InvalidDecimal: "Invalid decimal.",
					InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`,
					InvalidEscapeSequence: "Bad character escape sequence.",
					InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
					InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,
					InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`,
					InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
					InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
					InvalidLhsOptionalChaining: ({ ancestor }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,
					InvalidNumber: "Invalid number.",
					InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
					InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`,
					InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
					InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`,
					InvalidPropertyBindingPattern: "Binding member expression.",
					InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
					InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
					LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`,
					LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
					LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
					MalformedRegExpFlags: "Invalid regular expression flag.",
					MissingClassName: "A class name is required.",
					MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
					MissingSemicolon: "Missing semicolon.",
					MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
					MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`,
					MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
					MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
					ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
					ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
					ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`,
					ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
					ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`,
					MultipleDefaultsInSwitch: "Multiple default clauses.",
					NewlineAfterThrow: "Illegal newline after throw.",
					NoCatchOrFinally: "Missing catch or finally clause.",
					NumberIdentifier: "Identifier directly after number.",
					NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
					ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
					OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
					OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
					OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
					ParamDupe: "Argument name clash.",
					PatternHasAccessor: "Object pattern can't contain getter or setter.",
					PatternHasMethod: "Object pattern can't contain methods.",
					PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
					PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`,
					RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
					RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
					RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
					RecordNoProto: "'__proto__' is not allowed in Record expressions.",
					RestTrailingComma: "Unexpected trailing comma after rest element.",
					SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
					SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
					SourcePhaseImportRequiresDefault: "Only `import source x from \"./module\"` is valid.",
					StaticPrototype: "Classes may not have static property named prototype.",
					SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
					SuperPrivateField: "Private fields can't be accessed on super.",
					TrailingDecorator: "Decorators must be attached to a class element.",
					TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
					TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
					TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
					UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
					UnexpectedAwaitAfterPipelineBody: "Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.",
					UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
					UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
					UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`,
					UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
					UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
					UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
					UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
					UnexpectedPrivateField: "Unexpected private name.",
					UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,
					UnexpectedSuper: "'super' is only allowed in object methods and classes.",
					UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
					UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
					UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
					UnsupportedBind: "Binding should be performed on object property.",
					UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
					UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
					UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
					UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
					UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
					UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
					UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
					UnterminatedComment: "Unterminated comment.",
					UnterminatedRegExp: "Unterminated regular expression.",
					UnterminatedString: "Unterminated string constant.",
					UnterminatedTemplate: "Unterminated template.",
					UsingDeclarationExport: "Using declaration cannot be exported.",
					UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
					VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`,
					YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
					YieldInParameter: "Yield expression is not allowed in formal parameters.",
					ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
				};
				const UnparenthesizedPipeBodyDescriptions = new Set([
					"ArrowFunctionExpression",
					"AssignmentExpression",
					"ConditionalExpression",
					"YieldExpression"
				]);
				var PipelineOperatorErrors = {
					PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
					PipeTopicRequiresHackPipes: "Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.",
					PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
					PipeTopicUnconfiguredToken: ({ token }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,
					PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
					PipeUnparenthesizedBody: ({ type: type$1 }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({ type: type$1 })}; please wrap it in parentheses.`,
					PipelineBodyNoArrow: "Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.",
					PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
					PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
					PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
					PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
					PrimaryTopicRequiresSmartPipeline: "Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option."
				};
				const _excluded = ["message"];
				function defineHidden(obj, key, value$1) {
					Object.defineProperty(obj, key, {
						enumerable: !1,
						configurable: !0,
						value: value$1
					});
				}
				function toParseErrorConstructor({ toMessage, code: code$1, reasonCode, syntaxPlugin }) {
					const hasMissingPlugin = "MissingPlugin" === reasonCode || "MissingOneOfPlugins" === reasonCode;
					{
						const oldReasonCodes = {
							AccessorCannotDeclareThisParameter: "AccesorCannotDeclareThisParameter",
							AccessorCannotHaveTypeParameters: "AccesorCannotHaveTypeParameters",
							ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference",
							SetAccessorCannotHaveOptionalParameter: "SetAccesorCannotHaveOptionalParameter",
							SetAccessorCannotHaveRestParameter: "SetAccesorCannotHaveRestParameter",
							SetAccessorCannotHaveReturnType: "SetAccesorCannotHaveReturnType"
						};
						oldReasonCodes[reasonCode] && (reasonCode = oldReasonCodes[reasonCode]);
					}
					return function constructor(loc, details) {
						const error$1 = new SyntaxError();
						return error$1.code = code$1, error$1.reasonCode = reasonCode, error$1.loc = loc, error$1.pos = loc.index, error$1.syntaxPlugin = syntaxPlugin, hasMissingPlugin && (error$1.missingPlugin = details.missingPlugin), defineHidden(error$1, "clone", function(overrides = {}) {
							var _overrides$loc;
							const { line, column, index } = null != (_overrides$loc = overrides.loc) ? _overrides$loc : loc;
							return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));
						}), defineHidden(error$1, "details", details), Object.defineProperty(error$1, "message", {
							configurable: !0,
							get() {
								const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
								return this.message = message, message;
							},
							set(value$1) {
								Object.defineProperty(this, "message", {
									value: value$1,
									writable: !0
								});
							}
						}), error$1;
					};
				}
				function ParseErrorEnum(argument, syntaxPlugin) {
					if (Array.isArray(argument)) return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
					const ParseErrorConstructors = {};
					for (const reasonCode of Object.keys(argument)) {
						const template = argument[reasonCode], _ref = "string" == typeof template ? { message: () => template } : "function" == typeof template ? { message: template } : template, { message } = _ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded), toMessage = "string" == typeof message ? () => message : message;
						ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
							code: "BABEL_PARSER_SYNTAX_ERROR",
							reasonCode,
							toMessage
						}, syntaxPlugin ? { syntaxPlugin } : {}, rest));
					}
					return ParseErrorConstructors;
				}
				const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum({
					StrictDelete: "Deleting local variable in strict mode.",
					StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,
					StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,
					StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
					StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
					StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
					StrictWith: "'with' in strict mode."
				}), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors)), { defineProperty } = Object, toUnenumerable = (object, key) => {
					object && defineProperty(object, key, {
						enumerable: !1,
						value: object[key]
					});
				};
				function toESTreeLocation(node) {
					return toUnenumerable(node.loc.start, "index"), toUnenumerable(node.loc.end, "index"), node;
				}
				class TokContext {
					constructor(token, preserveSpace) {
						this.token = void 0, this.preserveSpace = void 0, this.token = token, this.preserveSpace = !!preserveSpace;
					}
				}
				const types$7 = {
					brace: new TokContext("{"),
					j_oTag: new TokContext("<tag"),
					j_cTag: new TokContext("</tag"),
					j_expr: new TokContext("<tag>...</tag>", !0)
				};
				types$7.template = new TokContext("`", !0);
				class ExportedTokenType {
					constructor(label, conf = {}) {
						this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.rightAssociative = !!conf.rightAssociative, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = null != conf.binop ? conf.binop : null, this.updateContext = null;
					}
				}
				const keywords$1 = new Map();
				function createKeyword(name, options = {}) {
					options.keyword = name;
					const token = createToken(name, options);
					return keywords$1.set(name, token), token;
				}
				function createBinop(name, binop) {
					return createToken(name, {
						beforeExpr: true,
						binop
					});
				}
				let tokenTypeCounter = -1;
				const tokenTypes = [], tokenLabels = [], tokenBinops = [], tokenBeforeExprs = [], tokenStartsExprs = [], tokenPrefixes = [];
				function createToken(name, options = {}) {
					var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
					return ++tokenTypeCounter, tokenLabels.push(name), tokenBinops.push(null != (_options$binop = options.binop) ? _options$binop : -1), tokenBeforeExprs.push(null != (_options$beforeExpr = options.beforeExpr) && _options$beforeExpr), tokenStartsExprs.push(null != (_options$startsExpr = options.startsExpr) && _options$startsExpr), tokenPrefixes.push(null != (_options$prefix = options.prefix) && _options$prefix), tokenTypes.push(new ExportedTokenType(name, options)), tokenTypeCounter;
				}
				function createKeywordLike(name, options = {}) {
					var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
					return ++tokenTypeCounter, keywords$1.set(name, tokenTypeCounter), tokenLabels.push(name), tokenBinops.push(null != (_options$binop2 = options.binop) ? _options$binop2 : -1), tokenBeforeExprs.push(null != (_options$beforeExpr2 = options.beforeExpr) && _options$beforeExpr2), tokenStartsExprs.push(null != (_options$startsExpr2 = options.startsExpr) && _options$startsExpr2), tokenPrefixes.push(null != (_options$prefix2 = options.prefix) && _options$prefix2), tokenTypes.push(new ExportedTokenType("name", options)), tokenTypeCounter;
				}
				const tt = {
					bracketL: createToken("[", {
						beforeExpr: true,
						startsExpr: true
					}),
					bracketHashL: createToken("#[", {
						beforeExpr: true,
						startsExpr: true
					}),
					bracketBarL: createToken("[|", {
						beforeExpr: true,
						startsExpr: true
					}),
					bracketR: createToken("]"),
					bracketBarR: createToken("|]"),
					braceL: createToken("{", {
						beforeExpr: true,
						startsExpr: true
					}),
					braceBarL: createToken("{|", {
						beforeExpr: true,
						startsExpr: true
					}),
					braceHashL: createToken("#{", {
						beforeExpr: true,
						startsExpr: true
					}),
					braceR: createToken("}"),
					braceBarR: createToken("|}"),
					parenL: createToken("(", {
						beforeExpr: true,
						startsExpr: true
					}),
					parenR: createToken(")"),
					comma: createToken(",", { beforeExpr: true }),
					semi: createToken(";", { beforeExpr: true }),
					colon: createToken(":", { beforeExpr: true }),
					doubleColon: createToken("::", { beforeExpr: true }),
					dot: createToken("."),
					question: createToken("?", { beforeExpr: true }),
					questionDot: createToken("?."),
					arrow: createToken("=>", { beforeExpr: true }),
					template: createToken("template"),
					ellipsis: createToken("...", { beforeExpr: true }),
					backQuote: createToken("`", { startsExpr: true }),
					dollarBraceL: createToken("${", {
						beforeExpr: true,
						startsExpr: true
					}),
					templateTail: createToken("...`", { startsExpr: true }),
					templateNonTail: createToken("...${", {
						beforeExpr: true,
						startsExpr: true
					}),
					at: createToken("@"),
					hash: createToken("#", { startsExpr: true }),
					interpreterDirective: createToken("#!..."),
					eq: createToken("=", {
						beforeExpr: true,
						isAssign: true
					}),
					assign: createToken("_=", {
						beforeExpr: true,
						isAssign: true
					}),
					slashAssign: createToken("_=", {
						beforeExpr: true,
						isAssign: true
					}),
					xorAssign: createToken("_=", {
						beforeExpr: true,
						isAssign: true
					}),
					moduloAssign: createToken("_=", {
						beforeExpr: true,
						isAssign: true
					}),
					incDec: createToken("++/--", {
						prefix: true,
						postfix: !0,
						startsExpr: true
					}),
					bang: createToken("!", {
						beforeExpr: true,
						prefix: true,
						startsExpr: true
					}),
					tilde: createToken("~", {
						beforeExpr: true,
						prefix: true,
						startsExpr: true
					}),
					doubleCaret: createToken("^^", { startsExpr: true }),
					doubleAt: createToken("@@", { startsExpr: true }),
					pipeline: createBinop("|>", 0),
					nullishCoalescing: createBinop("??", 1),
					logicalOR: createBinop("||", 1),
					logicalAND: createBinop("&&", 2),
					bitwiseOR: createBinop("|", 3),
					bitwiseXOR: createBinop("^", 4),
					bitwiseAND: createBinop("&", 5),
					equality: createBinop("==/!=/===/!==", 6),
					lt: createBinop("</>/<=/>=", 7),
					gt: createBinop("</>/<=/>=", 7),
					relational: createBinop("</>/<=/>=", 7),
					bitShift: createBinop("<</>>/>>>", 8),
					bitShiftL: createBinop("<</>>/>>>", 8),
					bitShiftR: createBinop("<</>>/>>>", 8),
					plusMin: createToken("+/-", {
						beforeExpr: true,
						binop: 9,
						prefix: true,
						startsExpr: true
					}),
					modulo: createToken("%", {
						binop: 10,
						startsExpr: true
					}),
					star: createToken("*", { binop: 10 }),
					slash: createBinop("/", 10),
					exponent: createToken("**", {
						beforeExpr: true,
						binop: 11,
						rightAssociative: !0
					}),
					_in: createKeyword("in", {
						beforeExpr: true,
						binop: 7
					}),
					_instanceof: createKeyword("instanceof", {
						beforeExpr: true,
						binop: 7
					}),
					_break: createKeyword("break"),
					_case: createKeyword("case", { beforeExpr: true }),
					_catch: createKeyword("catch"),
					_continue: createKeyword("continue"),
					_debugger: createKeyword("debugger"),
					_default: createKeyword("default", { beforeExpr: true }),
					_else: createKeyword("else", { beforeExpr: true }),
					_finally: createKeyword("finally"),
					_function: createKeyword("function", { startsExpr: true }),
					_if: createKeyword("if"),
					_return: createKeyword("return", { beforeExpr: true }),
					_switch: createKeyword("switch"),
					_throw: createKeyword("throw", {
						beforeExpr: true,
						prefix: true,
						startsExpr: true
					}),
					_try: createKeyword("try"),
					_var: createKeyword("var"),
					_const: createKeyword("const"),
					_with: createKeyword("with"),
					_new: createKeyword("new", {
						beforeExpr: true,
						startsExpr: true
					}),
					_this: createKeyword("this", { startsExpr: true }),
					_super: createKeyword("super", { startsExpr: true }),
					_class: createKeyword("class", { startsExpr: true }),
					_extends: createKeyword("extends", { beforeExpr: true }),
					_export: createKeyword("export"),
					_import: createKeyword("import", { startsExpr: true }),
					_null: createKeyword("null", { startsExpr: true }),
					_true: createKeyword("true", { startsExpr: true }),
					_false: createKeyword("false", { startsExpr: true }),
					_typeof: createKeyword("typeof", {
						beforeExpr: true,
						prefix: true,
						startsExpr: true
					}),
					_void: createKeyword("void", {
						beforeExpr: true,
						prefix: true,
						startsExpr: true
					}),
					_delete: createKeyword("delete", {
						beforeExpr: true,
						prefix: true,
						startsExpr: true
					}),
					_do: createKeyword("do", {
						isLoop: true,
						beforeExpr: true
					}),
					_for: createKeyword("for", { isLoop: true }),
					_while: createKeyword("while", { isLoop: true }),
					_as: createKeywordLike("as", { startsExpr: true }),
					_assert: createKeywordLike("assert", { startsExpr: true }),
					_async: createKeywordLike("async", { startsExpr: true }),
					_await: createKeywordLike("await", { startsExpr: true }),
					_defer: createKeywordLike("defer", { startsExpr: true }),
					_from: createKeywordLike("from", { startsExpr: true }),
					_get: createKeywordLike("get", { startsExpr: true }),
					_let: createKeywordLike("let", { startsExpr: true }),
					_meta: createKeywordLike("meta", { startsExpr: true }),
					_of: createKeywordLike("of", { startsExpr: true }),
					_sent: createKeywordLike("sent", { startsExpr: true }),
					_set: createKeywordLike("set", { startsExpr: true }),
					_source: createKeywordLike("source", { startsExpr: true }),
					_static: createKeywordLike("static", { startsExpr: true }),
					_using: createKeywordLike("using", { startsExpr: true }),
					_yield: createKeywordLike("yield", { startsExpr: true }),
					_asserts: createKeywordLike("asserts", { startsExpr: true }),
					_checks: createKeywordLike("checks", { startsExpr: true }),
					_exports: createKeywordLike("exports", { startsExpr: true }),
					_global: createKeywordLike("global", { startsExpr: true }),
					_implements: createKeywordLike("implements", { startsExpr: true }),
					_intrinsic: createKeywordLike("intrinsic", { startsExpr: true }),
					_infer: createKeywordLike("infer", { startsExpr: true }),
					_is: createKeywordLike("is", { startsExpr: true }),
					_mixins: createKeywordLike("mixins", { startsExpr: true }),
					_proto: createKeywordLike("proto", { startsExpr: true }),
					_require: createKeywordLike("require", { startsExpr: true }),
					_satisfies: createKeywordLike("satisfies", { startsExpr: true }),
					_keyof: createKeywordLike("keyof", { startsExpr: true }),
					_readonly: createKeywordLike("readonly", { startsExpr: true }),
					_unique: createKeywordLike("unique", { startsExpr: true }),
					_abstract: createKeywordLike("abstract", { startsExpr: true }),
					_declare: createKeywordLike("declare", { startsExpr: true }),
					_enum: createKeywordLike("enum", { startsExpr: true }),
					_module: createKeywordLike("module", { startsExpr: true }),
					_namespace: createKeywordLike("namespace", { startsExpr: true }),
					_interface: createKeywordLike("interface", { startsExpr: true }),
					_type: createKeywordLike("type", { startsExpr: true }),
					_opaque: createKeywordLike("opaque", { startsExpr: true }),
					name: createToken("name", { startsExpr: true }),
					placeholder: createToken("%%", { startsExpr: !0 }),
					string: createToken("string", { startsExpr: true }),
					num: createToken("num", { startsExpr: true }),
					bigint: createToken("bigint", { startsExpr: true }),
					decimal: createToken("decimal", { startsExpr: true }),
					regexp: createToken("regexp", { startsExpr: true }),
					privateName: createToken("#name", { startsExpr: true }),
					eof: createToken("eof"),
					jsxName: createToken("jsxName"),
					jsxText: createToken("jsxText", { beforeExpr: !0 }),
					jsxTagStart: createToken("jsxTagStart", { startsExpr: !0 }),
					jsxTagEnd: createToken("jsxTagEnd")
				};
				function tokenIsIdentifier(token) {
					return token >= 93 && token <= 133;
				}
				function tokenIsKeywordOrIdentifier(token) {
					return token >= 58 && token <= 133;
				}
				function tokenIsLiteralPropertyName(token) {
					return token >= 58 && token <= 137;
				}
				function tokenCanStartExpression(token) {
					return tokenStartsExprs[token];
				}
				function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
					return token >= 129 && token <= 131;
				}
				function tokenIsKeyword(token) {
					return token >= 58 && token <= 92;
				}
				function tokenLabelName(token) {
					return tokenLabels[token];
				}
				function tokenOperatorPrecedence(token) {
					return tokenBinops[token];
				}
				function tokenIsTemplate(token) {
					return token >= 24 && token <= 25;
				}
				function getExportedToken(token) {
					return tokenTypes[token];
				}
				tokenTypes[8].updateContext = (context) => {
					context.pop();
				}, tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
					context.push(types$7.brace);
				}, tokenTypes[22].updateContext = (context) => {
					context[context.length - 1] === types$7.template ? context.pop() : context.push(types$7.template);
				}, tokenTypes[143].updateContext = (context) => {
					context.push(types$7.j_expr, types$7.j_oTag);
				};
				let nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", nonASCIIidentifierChars = "·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･";
				const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
				nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
				const astralIdentifierStartCodes = [
					0,
					11,
					2,
					25,
					2,
					18,
					2,
					1,
					2,
					14,
					3,
					13,
					35,
					122,
					70,
					52,
					268,
					28,
					4,
					48,
					48,
					31,
					14,
					29,
					6,
					37,
					11,
					29,
					3,
					35,
					5,
					7,
					2,
					4,
					43,
					157,
					19,
					35,
					5,
					35,
					5,
					39,
					9,
					51,
					13,
					10,
					2,
					14,
					2,
					6,
					2,
					1,
					2,
					10,
					2,
					14,
					2,
					6,
					2,
					1,
					4,
					51,
					13,
					310,
					10,
					21,
					11,
					7,
					25,
					5,
					2,
					41,
					2,
					8,
					70,
					5,
					3,
					0,
					2,
					43,
					2,
					1,
					4,
					0,
					3,
					22,
					11,
					22,
					10,
					30,
					66,
					18,
					2,
					1,
					11,
					21,
					11,
					25,
					71,
					55,
					7,
					1,
					65,
					0,
					16,
					3,
					2,
					2,
					2,
					28,
					43,
					28,
					4,
					28,
					36,
					7,
					2,
					27,
					28,
					53,
					11,
					21,
					11,
					18,
					14,
					17,
					111,
					72,
					56,
					50,
					14,
					50,
					14,
					35,
					39,
					27,
					10,
					22,
					251,
					41,
					7,
					1,
					17,
					2,
					60,
					28,
					11,
					0,
					9,
					21,
					43,
					17,
					47,
					20,
					28,
					22,
					13,
					52,
					58,
					1,
					3,
					0,
					14,
					44,
					33,
					24,
					27,
					35,
					30,
					0,
					3,
					0,
					9,
					34,
					4,
					0,
					13,
					47,
					15,
					3,
					22,
					0,
					2,
					0,
					36,
					17,
					2,
					24,
					20,
					1,
					64,
					6,
					2,
					0,
					2,
					3,
					2,
					14,
					2,
					9,
					8,
					46,
					39,
					7,
					3,
					1,
					3,
					21,
					2,
					6,
					2,
					1,
					2,
					4,
					4,
					0,
					19,
					0,
					13,
					4,
					31,
					9,
					2,
					0,
					3,
					0,
					2,
					37,
					2,
					0,
					26,
					0,
					2,
					0,
					45,
					52,
					19,
					3,
					21,
					2,
					31,
					47,
					21,
					1,
					2,
					0,
					185,
					46,
					42,
					3,
					37,
					47,
					21,
					0,
					60,
					42,
					14,
					0,
					72,
					26,
					38,
					6,
					186,
					43,
					117,
					63,
					32,
					7,
					3,
					0,
					3,
					7,
					2,
					1,
					2,
					23,
					16,
					0,
					2,
					0,
					95,
					7,
					3,
					38,
					17,
					0,
					2,
					0,
					29,
					0,
					11,
					39,
					8,
					0,
					22,
					0,
					12,
					45,
					20,
					0,
					19,
					72,
					200,
					32,
					32,
					8,
					2,
					36,
					18,
					0,
					50,
					29,
					113,
					6,
					2,
					1,
					2,
					37,
					22,
					0,
					26,
					5,
					2,
					1,
					2,
					31,
					15,
					0,
					328,
					18,
					16,
					0,
					2,
					12,
					2,
					33,
					125,
					0,
					80,
					921,
					103,
					110,
					18,
					195,
					2637,
					96,
					16,
					1071,
					18,
					5,
					26,
					3994,
					6,
					582,
					6842,
					29,
					1763,
					568,
					8,
					30,
					18,
					78,
					18,
					29,
					19,
					47,
					17,
					3,
					32,
					20,
					6,
					18,
					433,
					44,
					212,
					63,
					129,
					74,
					6,
					0,
					67,
					12,
					65,
					1,
					2,
					0,
					29,
					6135,
					9,
					1237,
					42,
					9,
					8936,
					3,
					2,
					6,
					2,
					1,
					2,
					290,
					16,
					0,
					30,
					2,
					3,
					0,
					15,
					3,
					9,
					395,
					2309,
					106,
					6,
					12,
					4,
					8,
					8,
					9,
					5991,
					84,
					2,
					70,
					2,
					1,
					3,
					0,
					3,
					1,
					3,
					3,
					2,
					11,
					2,
					0,
					2,
					6,
					2,
					64,
					2,
					3,
					3,
					7,
					2,
					6,
					2,
					27,
					2,
					3,
					2,
					4,
					2,
					0,
					4,
					6,
					2,
					339,
					3,
					24,
					2,
					24,
					2,
					30,
					2,
					24,
					2,
					30,
					2,
					24,
					2,
					30,
					2,
					24,
					2,
					30,
					2,
					24,
					2,
					7,
					1845,
					30,
					7,
					5,
					262,
					61,
					147,
					44,
					11,
					6,
					17,
					0,
					322,
					29,
					19,
					43,
					485,
					27,
					229,
					29,
					3,
					0,
					496,
					6,
					2,
					3,
					2,
					1,
					2,
					14,
					2,
					196,
					60,
					67,
					8,
					0,
					1205,
					3,
					2,
					26,
					2,
					1,
					2,
					0,
					3,
					0,
					2,
					9,
					2,
					3,
					2,
					0,
					2,
					0,
					7,
					0,
					5,
					0,
					2,
					0,
					2,
					0,
					2,
					2,
					2,
					1,
					2,
					0,
					3,
					0,
					2,
					0,
					2,
					0,
					2,
					0,
					2,
					0,
					2,
					1,
					2,
					0,
					3,
					3,
					2,
					6,
					2,
					3,
					2,
					3,
					2,
					0,
					2,
					9,
					2,
					16,
					6,
					2,
					2,
					4,
					2,
					16,
					4421,
					42719,
					33,
					4153,
					7,
					221,
					3,
					5761,
					15,
					7472,
					16,
					621,
					2467,
					541,
					1507,
					4938,
					6,
					4191
				], astralIdentifierCodes = [
					509,
					0,
					227,
					0,
					150,
					4,
					294,
					9,
					1368,
					2,
					2,
					1,
					6,
					3,
					41,
					2,
					5,
					0,
					166,
					1,
					574,
					3,
					9,
					9,
					7,
					9,
					32,
					4,
					318,
					1,
					80,
					3,
					71,
					10,
					50,
					3,
					123,
					2,
					54,
					14,
					32,
					10,
					3,
					1,
					11,
					3,
					46,
					10,
					8,
					0,
					46,
					9,
					7,
					2,
					37,
					13,
					2,
					9,
					6,
					1,
					45,
					0,
					13,
					2,
					49,
					13,
					9,
					3,
					2,
					11,
					83,
					11,
					7,
					0,
					3,
					0,
					158,
					11,
					6,
					9,
					7,
					3,
					56,
					1,
					2,
					6,
					3,
					1,
					3,
					2,
					10,
					0,
					11,
					1,
					3,
					6,
					4,
					4,
					68,
					8,
					2,
					0,
					3,
					0,
					2,
					3,
					2,
					4,
					2,
					0,
					15,
					1,
					83,
					17,
					10,
					9,
					5,
					0,
					82,
					19,
					13,
					9,
					214,
					6,
					3,
					8,
					28,
					1,
					83,
					16,
					16,
					9,
					82,
					12,
					9,
					9,
					7,
					19,
					58,
					14,
					5,
					9,
					243,
					14,
					166,
					9,
					71,
					5,
					2,
					1,
					3,
					3,
					2,
					0,
					2,
					1,
					13,
					9,
					120,
					6,
					3,
					6,
					4,
					0,
					29,
					9,
					41,
					6,
					2,
					3,
					9,
					0,
					10,
					10,
					47,
					15,
					343,
					9,
					54,
					7,
					2,
					7,
					17,
					9,
					57,
					21,
					2,
					13,
					123,
					5,
					4,
					0,
					2,
					1,
					2,
					6,
					2,
					0,
					9,
					9,
					49,
					4,
					2,
					1,
					2,
					4,
					9,
					9,
					330,
					3,
					10,
					1,
					2,
					0,
					49,
					6,
					4,
					4,
					14,
					10,
					5350,
					0,
					7,
					14,
					11465,
					27,
					2343,
					9,
					87,
					9,
					39,
					4,
					60,
					6,
					26,
					9,
					535,
					9,
					470,
					0,
					2,
					54,
					8,
					3,
					82,
					0,
					12,
					1,
					19628,
					1,
					4178,
					9,
					519,
					45,
					3,
					22,
					543,
					4,
					4,
					5,
					9,
					7,
					3,
					6,
					31,
					3,
					149,
					2,
					1418,
					49,
					513,
					54,
					5,
					49,
					9,
					0,
					15,
					0,
					23,
					4,
					2,
					14,
					1361,
					6,
					2,
					16,
					3,
					6,
					2,
					1,
					2,
					4,
					101,
					0,
					161,
					6,
					10,
					9,
					357,
					0,
					62,
					13,
					499,
					13,
					245,
					1,
					2,
					9,
					726,
					6,
					110,
					6,
					6,
					9,
					4759,
					9,
					787719,
					239
				];
				function isInAstralSet(code$1, set) {
					let pos = 65536;
					for (let i = 0, length = set.length; i < length; i += 2) {
						if (pos += set[i], pos > code$1) return !1;
						if (pos += set[i + 1], pos >= code$1) return !0;
					}
					return !1;
				}
				function isIdentifierStart(code$1) {
					return code$1 < 65 ? 36 === code$1 : code$1 <= 90 || (code$1 < 97 ? 95 === code$1 : code$1 <= 122 || (code$1 <= 65535 ? code$1 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code$1)) : isInAstralSet(code$1, astralIdentifierStartCodes)));
				}
				function isIdentifierChar(code$1) {
					return code$1 < 48 ? 36 === code$1 : code$1 < 58 || !(code$1 < 65) && (code$1 <= 90 || (code$1 < 97 ? 95 === code$1 : code$1 <= 122 || (code$1 <= 65535 ? code$1 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code$1)) : isInAstralSet(code$1, astralIdentifierStartCodes) || isInAstralSet(code$1, astralIdentifierCodes))));
				}
				const reservedWords_strict = [
					"implements",
					"interface",
					"let",
					"package",
					"private",
					"protected",
					"public",
					"static",
					"yield"
				], reservedWords_strictBind = ["eval", "arguments"], keywords = new Set([
					"break",
					"case",
					"catch",
					"continue",
					"debugger",
					"default",
					"do",
					"else",
					"finally",
					"for",
					"function",
					"if",
					"return",
					"switch",
					"throw",
					"try",
					"var",
					"const",
					"while",
					"with",
					"new",
					"this",
					"super",
					"class",
					"extends",
					"export",
					"import",
					"null",
					"true",
					"false",
					"in",
					"instanceof",
					"typeof",
					"void",
					"delete"
				]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
				function isReservedWord(word, inModule) {
					return inModule && "await" === word || "enum" === word;
				}
				function isStrictReservedWord(word, inModule) {
					return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
				}
				function isStrictBindOnlyReservedWord(word) {
					return reservedWordsStrictBindSet.has(word);
				}
				function isStrictBindReservedWord(word, inModule) {
					return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
				}
				const reservedWordLikeSet = new Set([
					"break",
					"case",
					"catch",
					"continue",
					"debugger",
					"default",
					"do",
					"else",
					"finally",
					"for",
					"function",
					"if",
					"return",
					"switch",
					"throw",
					"try",
					"var",
					"const",
					"while",
					"with",
					"new",
					"this",
					"super",
					"class",
					"extends",
					"export",
					"import",
					"null",
					"true",
					"false",
					"in",
					"instanceof",
					"typeof",
					"void",
					"delete",
					"implements",
					"interface",
					"let",
					"package",
					"private",
					"protected",
					"public",
					"static",
					"yield",
					"eval",
					"arguments",
					"enum",
					"await"
				]);
				class Scope {
					constructor(flags) {
						this.flags = 0, this.names = new Map(), this.firstLexicalName = "", this.flags = flags;
					}
				}
				class ScopeHandler {
					constructor(parser, inModule) {
						this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = new Map(), this.parser = parser, this.inModule = inModule;
					}
					get inTopLevel() {
						return (1 & this.currentScope().flags) > 0;
					}
					get inFunction() {
						return (2 & this.currentVarScopeFlags()) > 0;
					}
					get allowSuper() {
						return (16 & this.currentThisScopeFlags()) > 0;
					}
					get allowDirectSuper() {
						return (32 & this.currentThisScopeFlags()) > 0;
					}
					get inClass() {
						return (64 & this.currentThisScopeFlags()) > 0;
					}
					get inClassAndNotInNonArrowFunction() {
						const flags = this.currentThisScopeFlags();
						return (64 & flags) > 0 && !(2 & flags);
					}
					get inStaticBlock() {
						for (let i = this.scopeStack.length - 1;; i--) {
							const { flags } = this.scopeStack[i];
							if (128 & flags) return !0;
							if (451 & flags) return !1;
						}
					}
					get inNonArrowFunction() {
						return (2 & this.currentThisScopeFlags()) > 0;
					}
					get treatFunctionsAsVar() {
						return this.treatFunctionsAsVarInScope(this.currentScope());
					}
					createScope(flags) {
						return new Scope(flags);
					}
					enter(flags) {
						this.scopeStack.push(this.createScope(flags));
					}
					exit() {
						return this.scopeStack.pop().flags;
					}
					treatFunctionsAsVarInScope(scope) {
						return !!(130 & scope.flags || !this.parser.inModule && 1 & scope.flags);
					}
					declareName(name, bindingType, loc) {
						let scope = this.currentScope();
						if (8 & bindingType || 16 & bindingType) {
							this.checkRedeclarationInScope(scope, name, bindingType, loc);
							let type$1 = scope.names.get(name) || 0;
							16 & bindingType ? type$1 |= 4 : (scope.firstLexicalName || (scope.firstLexicalName = name), type$1 |= 2), scope.names.set(name, type$1), 8 & bindingType && this.maybeExportDefined(scope, name);
						} else if (4 & bindingType) for (let i = this.scopeStack.length - 1; i >= 0 && (scope = this.scopeStack[i], this.checkRedeclarationInScope(scope, name, bindingType, loc), scope.names.set(name, 1 | (scope.names.get(name) || 0)), this.maybeExportDefined(scope, name), !(387 & scope.flags)); --i);
						this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
					}
					maybeExportDefined(scope, name) {
						this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
					}
					checkRedeclarationInScope(scope, name, bindingType, loc) {
						this.isRedeclaredInScope(scope, name, bindingType) && this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name });
					}
					isRedeclaredInScope(scope, name, bindingType) {
						if (!(1 & bindingType)) return !1;
						if (8 & bindingType) return scope.names.has(name);
						const type$1 = scope.names.get(name);
						return 16 & bindingType ? (2 & type$1) > 0 || !this.treatFunctionsAsVarInScope(scope) && (1 & type$1) > 0 : (2 & type$1) > 0 && !(8 & scope.flags && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (4 & type$1) > 0;
					}
					checkLocalExport(id) {
						const { name } = id;
						this.scopeStack[0].names.has(name) || this.undefinedExports.set(name, id.loc.start);
					}
					currentScope() {
						return this.scopeStack[this.scopeStack.length - 1];
					}
					currentVarScopeFlags() {
						for (let i = this.scopeStack.length - 1;; i--) {
							const { flags } = this.scopeStack[i];
							if (387 & flags) return flags;
						}
					}
					currentThisScopeFlags() {
						for (let i = this.scopeStack.length - 1;; i--) {
							const { flags } = this.scopeStack[i];
							if (451 & flags && !(4 & flags)) return flags;
						}
					}
				}
				class FlowScope extends Scope {
					constructor(...args) {
						super(...args), this.declareFunctions = new Set();
					}
				}
				class FlowScopeHandler extends ScopeHandler {
					createScope(flags) {
						return new FlowScope(flags);
					}
					declareName(name, bindingType, loc) {
						const scope = this.currentScope();
						if (2048 & bindingType) return this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name), void scope.declareFunctions.add(name);
						super.declareName(name, bindingType, loc);
					}
					isRedeclaredInScope(scope, name, bindingType) {
						if (super.isRedeclaredInScope(scope, name, bindingType)) return !0;
						if (2048 & bindingType && !scope.declareFunctions.has(name)) {
							const type$1 = scope.names.get(name);
							return (4 & type$1) > 0 || (2 & type$1) > 0;
						}
						return !1;
					}
					checkLocalExport(id) {
						this.scopeStack[0].declareFunctions.has(id.name) || super.checkLocalExport(id);
					}
				}
				class BaseParser {
					constructor() {
						this.sawUnambiguousESM = !1, this.ambiguousScriptDifferentAst = !1;
					}
					sourceToOffsetPos(sourcePos) {
						return sourcePos + this.startIndex;
					}
					offsetToSourcePos(offsetPos) {
						return offsetPos - this.startIndex;
					}
					hasPlugin(pluginConfig) {
						if ("string" == typeof pluginConfig) return this.plugins.has(pluginConfig);
						{
							const [pluginName, pluginOptions] = pluginConfig;
							if (!this.hasPlugin(pluginName)) return !1;
							const actualOptions = this.plugins.get(pluginName);
							for (const key of Object.keys(pluginOptions)) if ((null == actualOptions ? void 0 : actualOptions[key]) !== pluginOptions[key]) return !1;
							return !0;
						}
					}
					getPluginOption(plugin, name) {
						var _this$plugins$get;
						return null == (_this$plugins$get = this.plugins.get(plugin)) ? void 0 : _this$plugins$get[name];
					}
				}
				function setTrailingComments(node, comments) {
					void 0 === node.trailingComments ? node.trailingComments = comments : node.trailingComments.unshift(...comments);
				}
				function setInnerComments(node, comments) {
					void 0 === node.innerComments ? node.innerComments = comments : node.innerComments.unshift(...comments);
				}
				function adjustInnerComments(node, elements, commentWS) {
					let lastElement = null, i = elements.length;
					for (; null === lastElement && i > 0;) lastElement = elements[--i];
					null === lastElement || lastElement.start > commentWS.start ? setInnerComments(node, commentWS.comments) : setTrailingComments(lastElement, commentWS.comments);
				}
				class CommentsParser extends BaseParser {
					addComment(comment) {
						this.filename && (comment.loc.filename = this.filename);
						const { commentsLen } = this.state;
						this.comments.length !== commentsLen && (this.comments.length = commentsLen), this.comments.push(comment), this.state.commentsLen++;
					}
					processComment(node) {
						const { commentStack } = this.state, commentStackLength = commentStack.length;
						if (0 === commentStackLength) return;
						let i = commentStackLength - 1;
						const lastCommentWS = commentStack[i];
						lastCommentWS.start === node.end && (lastCommentWS.leadingNode = node, i--);
						const { start: nodeStart } = node;
						for (; i >= 0; i--) {
							const commentWS = commentStack[i], commentEnd = commentWS.end;
							if (!(commentEnd > nodeStart)) {
								commentEnd === nodeStart && (commentWS.trailingNode = node);
								break;
							}
							commentWS.containingNode = node, this.finalizeComment(commentWS), commentStack.splice(i, 1);
						}
					}
					finalizeComment(commentWS) {
						const { comments } = commentWS;
						if (null !== commentWS.leadingNode || null !== commentWS.trailingNode) null !== commentWS.leadingNode && setTrailingComments(commentWS.leadingNode, comments), null !== commentWS.trailingNode && function(node, comments$1) {
							void 0 === node.leadingComments ? node.leadingComments = comments$1 : node.leadingComments.unshift(...comments$1);
						}(commentWS.trailingNode, comments);
						else {
							const { containingNode: node, start: commentStart } = commentWS;
							if (44 === this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1)) switch (node.type) {
								case "ObjectExpression":
								case "ObjectPattern":
								case "RecordExpression":
									adjustInnerComments(node, node.properties, commentWS);
									break;
								case "CallExpression":
								case "OptionalCallExpression":
									adjustInnerComments(node, node.arguments, commentWS);
									break;
								case "FunctionDeclaration":
								case "FunctionExpression":
								case "ArrowFunctionExpression":
								case "ObjectMethod":
								case "ClassMethod":
								case "ClassPrivateMethod":
									adjustInnerComments(node, node.params, commentWS);
									break;
								case "ArrayExpression":
								case "ArrayPattern":
								case "TupleExpression":
									adjustInnerComments(node, node.elements, commentWS);
									break;
								case "ExportNamedDeclaration":
								case "ImportDeclaration":
									adjustInnerComments(node, node.specifiers, commentWS);
									break;
								default: setInnerComments(node, comments);
							}
							else setInnerComments(node, comments);
						}
					}
					finalizeRemainingComments() {
						const { commentStack } = this.state;
						for (let i = commentStack.length - 1; i >= 0; i--) this.finalizeComment(commentStack[i]);
						this.state.commentStack = [];
					}
					resetPreviousNodeTrailingComments(node) {
						const { commentStack } = this.state, { length } = commentStack;
						if (0 === length) return;
						const commentWS = commentStack[length - 1];
						commentWS.leadingNode === node && (commentWS.leadingNode = null);
					}
					resetPreviousIdentifierLeadingComments(node) {
						const { commentStack } = this.state, { length } = commentStack;
						0 !== length && (commentStack[length - 1].trailingNode === node ? commentStack[length - 1].trailingNode = null : length >= 2 && commentStack[length - 2].trailingNode === node && (commentStack[length - 2].trailingNode = null));
					}
					takeSurroundingComments(node, start, end) {
						const { commentStack } = this.state, commentStackLength = commentStack.length;
						if (0 === commentStackLength) return;
						let i = commentStackLength - 1;
						for (; i >= 0; i--) {
							const commentWS = commentStack[i], commentEnd = commentWS.end;
							if (commentWS.start === end) commentWS.leadingNode = node;
							else if (commentEnd === start) commentWS.trailingNode = node;
							else if (commentEnd < start) break;
						}
					}
				}
				const lineBreakG = new RegExp(/\r\n|[\r\n\u2028\u2029]/.source, "g");
				function isNewLine(code$1) {
					switch (code$1) {
						case 10:
						case 13:
						case 8232:
						case 8233: return !0;
						default: return !1;
					}
				}
				function hasNewLine(input, start, end) {
					for (let i = start; i < end; i++) if (isNewLine(input.charCodeAt(i))) return !0;
					return !1;
				}
				const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
				function isWhitespace(code$1) {
					switch (code$1) {
						case 9:
						case 11:
						case 12:
						case 32:
						case 160:
						case 5760:
						case 8192:
						case 8193:
						case 8194:
						case 8195:
						case 8196:
						case 8197:
						case 8198:
						case 8199:
						case 8200:
						case 8201:
						case 8202:
						case 8239:
						case 8287:
						case 12288:
						case 65279: return !0;
						default: return !1;
					}
				}
				class State {
					constructor() {
						this.flags = 1024, this.startIndex = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.topicContext = {
							maxNumOfResolvableTopics: 0,
							maxTopicIndex: null
						}, this.labels = [], this.commentsLen = 0, this.commentStack = [], this.pos = 0, this.type = 140, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.context = [types$7.brace], this.firstInvalidTemplateEscapePos = null, this.strictErrors = new Map(), this.tokensLength = 0;
					}
					get strict() {
						return (1 & this.flags) > 0;
					}
					set strict(v$1) {
						v$1 ? this.flags |= 1 : this.flags &= -2;
					}
					init({ strictMode, sourceType, startIndex, startLine, startColumn }) {
						this.strict = !1 !== strictMode && (!0 === strictMode || "module" === sourceType), this.startIndex = startIndex, this.curLine = startLine, this.lineStart = -startColumn, this.startLoc = this.endLoc = new Position(startLine, startColumn, startIndex);
					}
					get maybeInArrowParameters() {
						return (2 & this.flags) > 0;
					}
					set maybeInArrowParameters(v$1) {
						v$1 ? this.flags |= 2 : this.flags &= -3;
					}
					get inType() {
						return (4 & this.flags) > 0;
					}
					set inType(v$1) {
						v$1 ? this.flags |= 4 : this.flags &= -5;
					}
					get noAnonFunctionType() {
						return (8 & this.flags) > 0;
					}
					set noAnonFunctionType(v$1) {
						v$1 ? this.flags |= 8 : this.flags &= -9;
					}
					get hasFlowComment() {
						return (16 & this.flags) > 0;
					}
					set hasFlowComment(v$1) {
						v$1 ? this.flags |= 16 : this.flags &= -17;
					}
					get isAmbientContext() {
						return (32 & this.flags) > 0;
					}
					set isAmbientContext(v$1) {
						v$1 ? this.flags |= 32 : this.flags &= -33;
					}
					get inAbstractClass() {
						return (64 & this.flags) > 0;
					}
					set inAbstractClass(v$1) {
						v$1 ? this.flags |= 64 : this.flags &= -65;
					}
					get inDisallowConditionalTypesContext() {
						return (128 & this.flags) > 0;
					}
					set inDisallowConditionalTypesContext(v$1) {
						v$1 ? this.flags |= 128 : this.flags &= -129;
					}
					get soloAwait() {
						return (256 & this.flags) > 0;
					}
					set soloAwait(v$1) {
						v$1 ? this.flags |= 256 : this.flags &= -257;
					}
					get inFSharpPipelineDirectBody() {
						return (512 & this.flags) > 0;
					}
					set inFSharpPipelineDirectBody(v$1) {
						v$1 ? this.flags |= 512 : this.flags &= -513;
					}
					get canStartJSXElement() {
						return (1024 & this.flags) > 0;
					}
					set canStartJSXElement(v$1) {
						v$1 ? this.flags |= 1024 : this.flags &= -1025;
					}
					get containsEsc() {
						return (2048 & this.flags) > 0;
					}
					set containsEsc(v$1) {
						v$1 ? this.flags |= 2048 : this.flags &= -2049;
					}
					get hasTopLevelAwait() {
						return (4096 & this.flags) > 0;
					}
					set hasTopLevelAwait(v$1) {
						v$1 ? this.flags |= 4096 : this.flags &= -4097;
					}
					curPosition() {
						return new Position(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);
					}
					clone() {
						const state = new State();
						return state.flags = this.flags, state.startIndex = this.startIndex, state.curLine = this.curLine, state.lineStart = this.lineStart, state.startLoc = this.startLoc, state.endLoc = this.endLoc, state.errors = this.errors.slice(), state.potentialArrowAt = this.potentialArrowAt, state.noArrowAt = this.noArrowAt.slice(), state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice(), state.topicContext = this.topicContext, state.labels = this.labels.slice(), state.commentsLen = this.commentsLen, state.commentStack = this.commentStack.slice(), state.pos = this.pos, state.type = this.type, state.value = this.value, state.start = this.start, state.end = this.end, state.lastTokEndLoc = this.lastTokEndLoc, state.lastTokStartLoc = this.lastTokStartLoc, state.context = this.context.slice(), state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos, state.strictErrors = this.strictErrors, state.tokensLength = this.tokensLength, state;
					}
				}
				var _isDigit = function(code$1) {
					return code$1 >= 48 && code$1 <= 57;
				};
				const forbiddenNumericSeparatorSiblings = {
					decBinOct: new Set([
						46,
						66,
						69,
						79,
						95,
						98,
						101,
						111
					]),
					hex: new Set([
						46,
						88,
						95,
						120
					])
				}, isAllowedNumericSeparatorSibling = {
					bin: (ch) => 48 === ch || 49 === ch,
					oct: (ch) => ch >= 48 && ch <= 55,
					dec: (ch) => ch >= 48 && ch <= 57,
					hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
				};
				function readStringContents(type$1, input, pos, lineStart, curLine, errors$1) {
					const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
					let out = "", firstInvalidLoc = null, chunkStart = pos;
					const { length } = input;
					for (;;) {
						if (pos >= length) {
							errors$1.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
							break;
						}
						const ch = input.charCodeAt(pos);
						if (isStringEnd(type$1, ch, input, pos)) {
							out += input.slice(chunkStart, pos);
							break;
						}
						if (92 === ch) {
							out += input.slice(chunkStart, pos);
							const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type$1, errors$1);
							null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = {
								pos,
								lineStart,
								curLine
							}, {pos, lineStart, curLine} = res, chunkStart = pos;
						} else 8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type$1 ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors$1.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
					}
					return {
						pos,
						str: out,
						firstInvalidLoc,
						lineStart,
						curLine,
						containsInvalid: !!firstInvalidLoc
					};
				}
				function isStringEnd(type$1, ch, input, pos) {
					return "template" === type$1 ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type$1 ? 34 : 39);
				}
				function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors$1) {
					const throwOnInvalid = !inTemplate;
					pos++;
					const res = (ch$1) => ({
						pos,
						ch: ch$1,
						lineStart,
						curLine
					}), ch = input.charCodeAt(pos++);
					switch (ch) {
						case 110: return res("\n");
						case 114: return res("\r");
						case 120: {
							let code$1;
							return {code: code$1, pos} = readHexChar(input, pos, lineStart, curLine, 2, !1, throwOnInvalid, errors$1), res(null === code$1 ? null : String.fromCharCode(code$1));
						}
						case 117: {
							let code$1;
							return {code: code$1, pos} = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors$1), res(null === code$1 ? null : String.fromCodePoint(code$1));
						}
						case 116: return res("	");
						case 98: return res("\b");
						case 118: return res("\v");
						case 102: return res("\f");
						case 13: 10 === input.charCodeAt(pos) && ++pos;
						case 10: lineStart = pos, ++curLine;
						case 8232:
						case 8233: return res("");
						case 56:
						case 57:
							if (inTemplate) return res(null);
							errors$1.strictNumericEscape(pos - 1, lineStart, curLine);
						default:
							if (ch >= 48 && ch <= 55) {
								const startPos = pos - 1;
								let octalStr = /^[0-7]+/.exec(input.slice(startPos, pos + 2))[0], octal = parseInt(octalStr, 8);
								octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
								const next = input.charCodeAt(pos);
								if ("0" !== octalStr || 56 === next || 57 === next) {
									if (inTemplate) return res(null);
									errors$1.strictNumericEscape(startPos, lineStart, curLine);
								}
								return res(String.fromCharCode(octal));
							}
							return res(String.fromCharCode(ch));
					}
				}
				function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors$1) {
					const initialPos = pos;
					let n;
					return {n, pos} = readInt(input, pos, lineStart, curLine, 16, len, forceLen, !1, errors$1, !throwOnInvalid), null === n && (throwOnInvalid ? errors$1.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), {
						code: n,
						pos
					};
				}
				function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors$1, bailOnError) {
					const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
					let invalid = !1, total = 0;
					for (let i = 0, e$1 = null == len ? Infinity : len; i < e$1; ++i) {
						const code$1 = input.charCodeAt(pos);
						let val;
						if (95 !== code$1 || "bail" === allowNumSeparator) {
							if (val = code$1 >= 97 ? code$1 - 97 + 10 : code$1 >= 65 ? code$1 - 65 + 10 : _isDigit(code$1) ? code$1 - 48 : Infinity, val >= radix) {
								if (val <= 9 && bailOnError) return {
									n: null,
									pos
								};
								if (val <= 9 && errors$1.invalidDigit(pos, lineStart, curLine, radix)) val = 0;
								else {
									if (!forceLen) break;
									val = 0, invalid = !0;
								}
							}
							++pos, total = total * radix + val;
						} else {
							const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
							if (allowNumSeparator) {
								if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
									if (bailOnError) return {
										n: null,
										pos
									};
									errors$1.unexpectedNumericSeparator(pos, lineStart, curLine);
								}
							} else {
								if (bailOnError) return {
									n: null,
									pos
								};
								errors$1.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
							}
							++pos;
						}
					}
					return pos === start || null != len && pos - start !== len || invalid ? {
						n: null,
						pos
					} : {
						n: total,
						pos
					};
				}
				function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors$1) {
					let code$1;
					if (123 === input.charCodeAt(pos)) {
						if (++pos, {code: code$1, pos} = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, !0, throwOnInvalid, errors$1), ++pos, null !== code$1 && code$1 > 1114111) {
							if (!throwOnInvalid) return {
								code: null,
								pos
							};
							errors$1.invalidCodePoint(pos, lineStart, curLine);
						}
					} else ({code: code$1, pos} = readHexChar(input, pos, lineStart, curLine, 4, !1, throwOnInvalid, errors$1));
					return {
						code: code$1,
						pos
					};
				}
				function buildPosition(pos, lineStart, curLine) {
					return new Position(curLine, pos - lineStart, pos);
				}
				const VALID_REGEX_FLAGS = new Set([
					103,
					109,
					115,
					105,
					121,
					117,
					100,
					118
				]);
				class Token {
					constructor(state) {
						const startIndex = state.startIndex || 0;
						this.type = state.type, this.value = state.value, this.start = startIndex + state.start, this.end = startIndex + state.end, this.loc = new SourceLocation(state.startLoc, state.endLoc);
					}
				}
				class Tokenizer extends CommentsParser {
					constructor(options, input) {
						super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = {
							invalidDigit: (pos, lineStart, curLine, radix) => !!this.options.errorRecovery && (this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), { radix }), !0),
							numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
							unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
						}, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
							invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
							invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
						}), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
							strictNumericEscape: (pos, lineStart, curLine) => {
								this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));
							},
							unterminated: (pos, lineStart, curLine) => {
								throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));
							}
						}), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
							strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
							unterminated: (pos, lineStart, curLine) => {
								throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));
							}
						}), this.state = new State(), this.state.init(options), this.input = input, this.length = input.length, this.comments = [], this.isLookahead = !1;
					}
					pushToken(token) {
						this.tokens.length = this.state.tokensLength, this.tokens.push(token), ++this.state.tokensLength;
					}
					next() {
						this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Token(this.state)), this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
					}
					eat(type$1) {
						return !!this.match(type$1) && (this.next(), !0);
					}
					match(type$1) {
						return this.state.type === type$1;
					}
					createLookaheadState(state) {
						return {
							pos: state.pos,
							value: null,
							type: state.type,
							start: state.start,
							end: state.end,
							context: [this.curContext()],
							inType: state.inType,
							startLoc: state.startLoc,
							lastTokEndLoc: state.lastTokEndLoc,
							curLine: state.curLine,
							lineStart: state.lineStart,
							curPosition: state.curPosition
						};
					}
					lookahead() {
						const old = this.state;
						this.state = this.createLookaheadState(old), this.isLookahead = !0, this.nextToken(), this.isLookahead = !1;
						const curr = this.state;
						return this.state = old, curr;
					}
					nextTokenStart() {
						return this.nextTokenStartSince(this.state.pos);
					}
					nextTokenStartSince(pos) {
						return skipWhiteSpace.lastIndex = pos, skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
					}
					lookaheadCharCode() {
						return this.input.charCodeAt(this.nextTokenStart());
					}
					nextTokenInLineStart() {
						return this.nextTokenInLineStartSince(this.state.pos);
					}
					nextTokenInLineStartSince(pos) {
						return skipWhiteSpaceInLine.lastIndex = pos, skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
					}
					lookaheadInLineCharCode() {
						return this.input.charCodeAt(this.nextTokenInLineStart());
					}
					codePointAtPos(pos) {
						let cp$1 = this.input.charCodeAt(pos);
						if (55296 == (64512 & cp$1) && ++pos < this.input.length) {
							const trail = this.input.charCodeAt(pos);
							56320 == (64512 & trail) && (cp$1 = 65536 + ((1023 & cp$1) << 10) + (1023 & trail));
						}
						return cp$1;
					}
					setStrict(strict) {
						this.state.strict = strict, strict && (this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at)), this.state.strictErrors.clear());
					}
					curContext() {
						return this.state.context[this.state.context.length - 1];
					}
					nextToken() {
						this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length ? this.finishToken(140) : this.getTokenFromCode(this.codePointAtPos(this.state.pos));
					}
					skipBlockComment(commentEnd) {
						let startLoc;
						this.isLookahead || (startLoc = this.state.curPosition());
						const start = this.state.pos, end = this.input.indexOf(commentEnd, start + 2);
						if (-1 === end) throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
						for (this.state.pos = end + commentEnd.length, lineBreakG.lastIndex = start + 2; lineBreakG.test(this.input) && lineBreakG.lastIndex <= end;) ++this.state.curLine, this.state.lineStart = lineBreakG.lastIndex;
						if (this.isLookahead) return;
						const comment = {
							type: "CommentBlock",
							value: this.input.slice(start + 2, end),
							start: this.sourceToOffsetPos(start),
							end: this.sourceToOffsetPos(end + commentEnd.length),
							loc: new SourceLocation(startLoc, this.state.curPosition())
						};
						return this.options.tokens && this.pushToken(comment), comment;
					}
					skipLineComment(startSkip) {
						const start = this.state.pos;
						let startLoc;
						this.isLookahead || (startLoc = this.state.curPosition());
						let ch = this.input.charCodeAt(this.state.pos += startSkip);
						if (this.state.pos < this.length) for (; !isNewLine(ch) && ++this.state.pos < this.length;) ch = this.input.charCodeAt(this.state.pos);
						if (this.isLookahead) return;
						const end = this.state.pos, comment = {
							type: "CommentLine",
							value: this.input.slice(start + startSkip, end),
							start: this.sourceToOffsetPos(start),
							end: this.sourceToOffsetPos(end),
							loc: new SourceLocation(startLoc, this.state.curPosition())
						};
						return this.options.tokens && this.pushToken(comment), comment;
					}
					skipSpace() {
						const spaceStart = this.state.pos, comments = [];
						loop: for (; this.state.pos < this.length;) {
							const ch = this.input.charCodeAt(this.state.pos);
							switch (ch) {
								case 32:
								case 160:
								case 9:
									++this.state.pos;
									break;
								case 13: 10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos;
								case 10:
								case 8232:
								case 8233:
									++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
									break;
								case 47:
									switch (this.input.charCodeAt(this.state.pos + 1)) {
										case 42: {
											const comment = this.skipBlockComment("*/");
											void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
											break;
										}
										case 47: {
											const comment = this.skipLineComment(2);
											void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
											break;
										}
										default: break loop;
									}
									break;
								default: if (isWhitespace(ch)) ++this.state.pos;
								else if (45 === ch && !this.inModule && this.options.annexB) {
									const pos = this.state.pos;
									if (45 !== this.input.charCodeAt(pos + 1) || 62 !== this.input.charCodeAt(pos + 2) || !(0 === spaceStart || this.state.lineStart > spaceStart)) break loop;
									{
										const comment = this.skipLineComment(3);
										void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
									}
								} else {
									if (60 !== ch || this.inModule || !this.options.annexB) break loop;
									{
										const pos = this.state.pos;
										if (33 !== this.input.charCodeAt(pos + 1) || 45 !== this.input.charCodeAt(pos + 2) || 45 !== this.input.charCodeAt(pos + 3)) break loop;
										{
											const comment = this.skipLineComment(4);
											void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
										}
									}
								}
							}
						}
						if (comments.length > 0) {
							const end = this.state.pos, commentWhitespace = {
								start: this.sourceToOffsetPos(spaceStart),
								end: this.sourceToOffsetPos(end),
								comments,
								leadingNode: null,
								trailingNode: null,
								containingNode: null
							};
							this.state.commentStack.push(commentWhitespace);
						}
					}
					finishToken(type$1, val) {
						this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
						const prevType = this.state.type;
						this.state.type = type$1, this.state.value = val, this.isLookahead || this.updateContext(prevType);
					}
					replaceToken(type$1) {
						this.state.type = type$1, this.updateContext();
					}
					readToken_numberSign() {
						if (0 === this.state.pos && this.readToken_interpreter()) return;
						const nextPos = this.state.pos + 1, next = this.codePointAtPos(nextPos);
						if (next >= 48 && next <= 57) throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
						if (123 === next || 91 === next && this.hasPlugin("recordAndTuple")) {
							if (this.expectPlugin("recordAndTuple"), "bar" === this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(123 === next ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
							this.state.pos += 2, 123 === next ? this.finishToken(7) : this.finishToken(1);
						} else isIdentifierStart(next) ? (++this.state.pos, this.finishToken(139, this.readWord1(next))) : 92 === next ? (++this.state.pos, this.finishToken(139, this.readWord1())) : this.finishOp(27, 1);
					}
					readToken_dot() {
						const next = this.input.charCodeAt(this.state.pos + 1);
						next >= 48 && next <= 57 ? this.readNumber(!0) : 46 === next && 46 === this.input.charCodeAt(this.state.pos + 2) ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
					}
					readToken_slash() {
						61 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(31, 2) : this.finishOp(56, 1);
					}
					readToken_interpreter() {
						if (0 !== this.state.pos || this.length < 2) return !1;
						let ch = this.input.charCodeAt(this.state.pos + 1);
						if (33 !== ch) return !1;
						const start = this.state.pos;
						for (this.state.pos += 1; !isNewLine(ch) && ++this.state.pos < this.length;) ch = this.input.charCodeAt(this.state.pos);
						const value$1 = this.input.slice(start + 2, this.state.pos);
						return this.finishToken(28, value$1), !0;
					}
					readToken_mult_modulo(code$1) {
						let type$1 = 42 === code$1 ? 55 : 54, width = 1, next = this.input.charCodeAt(this.state.pos + 1);
						42 === code$1 && 42 === next && (width++, next = this.input.charCodeAt(this.state.pos + 2), type$1 = 57), 61 !== next || this.state.inType || (width++, type$1 = 37 === code$1 ? 33 : 30), this.finishOp(type$1, width);
					}
					readToken_pipe_amp(code$1) {
						const next = this.input.charCodeAt(this.state.pos + 1);
						if (next !== code$1) {
							if (124 === code$1) {
								if (62 === next) return void this.finishOp(39, 2);
								if (this.hasPlugin("recordAndTuple") && 125 === next) {
									if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
									return this.state.pos += 2, void this.finishToken(9);
								}
								if (this.hasPlugin("recordAndTuple") && 93 === next) {
									if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
									return this.state.pos += 2, void this.finishToken(4);
								}
							}
							61 !== next ? this.finishOp(124 === code$1 ? 43 : 45, 1) : this.finishOp(30, 2);
						} else 61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(30, 3) : this.finishOp(124 === code$1 ? 41 : 42, 2);
					}
					readToken_caret() {
						const next = this.input.charCodeAt(this.state.pos + 1);
						if (61 !== next || this.state.inType) if (94 === next && this.hasPlugin(["pipelineOperator", {
							proposal: "hack",
							topicToken: "^^"
						}])) {
							this.finishOp(37, 2);
							94 === this.input.codePointAt(this.state.pos) && this.unexpected();
						} else this.finishOp(44, 1);
						else this.finishOp(32, 2);
					}
					readToken_atSign() {
						64 === this.input.charCodeAt(this.state.pos + 1) && this.hasPlugin(["pipelineOperator", {
							proposal: "hack",
							topicToken: "@@"
						}]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
					}
					readToken_plus_min(code$1) {
						const next = this.input.charCodeAt(this.state.pos + 1);
						next !== code$1 ? 61 === next ? this.finishOp(30, 2) : this.finishOp(53, 1) : this.finishOp(34, 2);
					}
					readToken_lt() {
						const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
						if (60 === next) return 61 === this.input.charCodeAt(pos + 2) ? void this.finishOp(30, 3) : void this.finishOp(51, 2);
						61 !== next ? this.finishOp(47, 1) : this.finishOp(49, 2);
					}
					readToken_gt() {
						const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
						if (62 === next) {
							const size = 62 === this.input.charCodeAt(pos + 2) ? 3 : 2;
							return 61 === this.input.charCodeAt(pos + size) ? void this.finishOp(30, size + 1) : void this.finishOp(52, size);
						}
						61 !== next ? this.finishOp(48, 1) : this.finishOp(49, 2);
					}
					readToken_eq_excl(code$1) {
						const next = this.input.charCodeAt(this.state.pos + 1);
						if (61 !== next) return 61 === code$1 && 62 === next ? (this.state.pos += 2, void this.finishToken(19)) : void this.finishOp(61 === code$1 ? 29 : 35, 1);
						this.finishOp(46, 61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2);
					}
					readToken_question() {
						const next = this.input.charCodeAt(this.state.pos + 1), next2 = this.input.charCodeAt(this.state.pos + 2);
						63 === next ? 61 === next2 ? this.finishOp(30, 3) : this.finishOp(40, 2) : 46 !== next || next2 >= 48 && next2 <= 57 ? (++this.state.pos, this.finishToken(17)) : (this.state.pos += 2, this.finishToken(18));
					}
					getTokenFromCode(code$1) {
						switch (code$1) {
							case 46: return void this.readToken_dot();
							case 40: return ++this.state.pos, void this.finishToken(10);
							case 41: return ++this.state.pos, void this.finishToken(11);
							case 59: return ++this.state.pos, void this.finishToken(13);
							case 44: return ++this.state.pos, void this.finishToken(12);
							case 91:
								if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
									if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
									this.state.pos += 2, this.finishToken(2);
								} else ++this.state.pos, this.finishToken(0);
								return;
							case 93: return ++this.state.pos, void this.finishToken(3);
							case 123:
								if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
									if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType")) throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
									this.state.pos += 2, this.finishToken(6);
								} else ++this.state.pos, this.finishToken(5);
								return;
							case 125: return ++this.state.pos, void this.finishToken(8);
							case 58: return void (this.hasPlugin("functionBind") && 58 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14)));
							case 63: return void this.readToken_question();
							case 96: return void this.readTemplateToken();
							case 48: {
								const next = this.input.charCodeAt(this.state.pos + 1);
								if (120 === next || 88 === next) return void this.readRadixNumber(16);
								if (111 === next || 79 === next) return void this.readRadixNumber(8);
								if (98 === next || 66 === next) return void this.readRadixNumber(2);
							}
							case 49:
							case 50:
							case 51:
							case 52:
							case 53:
							case 54:
							case 55:
							case 56:
							case 57: return void this.readNumber(!1);
							case 34:
							case 39: return void this.readString(code$1);
							case 47: return void this.readToken_slash();
							case 37:
							case 42: return void this.readToken_mult_modulo(code$1);
							case 124:
							case 38: return void this.readToken_pipe_amp(code$1);
							case 94: return void this.readToken_caret();
							case 43:
							case 45: return void this.readToken_plus_min(code$1);
							case 60: return void this.readToken_lt();
							case 62: return void this.readToken_gt();
							case 61:
							case 33: return void this.readToken_eq_excl(code$1);
							case 126: return void this.finishOp(36, 1);
							case 64: return void this.readToken_atSign();
							case 35: return void this.readToken_numberSign();
							case 92: return void this.readWord();
							default: if (isIdentifierStart(code$1)) return void this.readWord(code$1);
						}
						throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), { unexpected: String.fromCodePoint(code$1) });
					}
					finishOp(type$1, size) {
						const str = this.input.slice(this.state.pos, this.state.pos + size);
						this.state.pos += size, this.finishToken(type$1, str);
					}
					readRegexp() {
						const startLoc = this.state.startLoc, start = this.state.start + 1;
						let escaped, inClass, { pos } = this.state;
						for (;; ++pos) {
							if (pos >= this.length) throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
							const ch = this.input.charCodeAt(pos);
							if (isNewLine(ch)) throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
							if (escaped) escaped = !1;
							else {
								if (91 === ch) inClass = !0;
								else if (93 === ch && inClass) inClass = !1;
								else if (47 === ch && !inClass) break;
								escaped = 92 === ch;
							}
						}
						const content = this.input.slice(start, pos);
						++pos;
						let mods = "";
						const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
						for (; pos < this.length;) {
							const cp$1 = this.codePointAtPos(pos), char = String.fromCharCode(cp$1);
							if (VALID_REGEX_FLAGS.has(cp$1)) 118 === cp$1 ? mods.includes("u") && this.raise(Errors.IncompatibleRegExpUVFlags, nextPos()) : 117 === cp$1 && mods.includes("v") && this.raise(Errors.IncompatibleRegExpUVFlags, nextPos()), mods.includes(char) && this.raise(Errors.DuplicateRegExpFlags, nextPos());
							else {
								if (!isIdentifierChar(cp$1) && 92 !== cp$1) break;
								this.raise(Errors.MalformedRegExpFlags, nextPos());
							}
							++pos, mods += char;
						}
						this.state.pos = pos, this.finishToken(138, {
							pattern: content,
							flags: mods
						});
					}
					readInt(radix, len, forceLen = !1, allowNumSeparator = !0) {
						const { n, pos } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, !1);
						return this.state.pos = pos, n;
					}
					readRadixNumber(radix) {
						const start = this.state.pos, startLoc = this.state.curPosition();
						let isBigInt = !1;
						this.state.pos += 2;
						const val = this.readInt(radix);
						val ?? this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), { radix });
						const next = this.input.charCodeAt(this.state.pos);
						if (110 === next) ++this.state.pos, isBigInt = !0;
						else if (109 === next) throw this.raise(Errors.InvalidDecimal, startLoc);
						if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
						if (isBigInt) {
							const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");
							this.finishToken(136, str);
						} else this.finishToken(135, val);
					}
					readNumber(startsWithDot) {
						const start = this.state.pos, startLoc = this.state.curPosition();
						let isFloat = !1, isBigInt = !1, hasExponent = !1, isOctal = !1;
						startsWithDot || null !== this.readInt(10) || this.raise(Errors.InvalidNumber, this.state.curPosition());
						const hasLeadingZero = this.state.pos - start >= 2 && 48 === this.input.charCodeAt(start);
						if (hasLeadingZero) {
							const integer = this.input.slice(start, this.state.pos);
							if (this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc), !this.state.strict) {
								const underscorePos = integer.indexOf("_");
								underscorePos > 0 && this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
							}
							isOctal = hasLeadingZero && !/[89]/.test(integer);
						}
						let next = this.input.charCodeAt(this.state.pos);
						if (46 !== next || isOctal || (++this.state.pos, this.readInt(10), isFloat = !0, next = this.input.charCodeAt(this.state.pos)), 69 !== next && 101 !== next || isOctal || (next = this.input.charCodeAt(++this.state.pos), 43 !== next && 45 !== next || ++this.state.pos, null === this.readInt(10) && this.raise(Errors.InvalidOrMissingExponent, startLoc), isFloat = !0, hasExponent = !0, next = this.input.charCodeAt(this.state.pos)), 110 === next && ((isFloat || hasLeadingZero) && this.raise(Errors.InvalidBigIntLiteral, startLoc), ++this.state.pos, isBigInt = !0), 109 === next) {
							this.expectPlugin("decimal", this.state.curPosition()), (hasExponent || hasLeadingZero) && this.raise(Errors.InvalidDecimal, startLoc), ++this.state.pos;
							var isDecimal = !0;
						}
						if (isIdentifierStart(this.codePointAtPos(this.state.pos))) throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
						const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
						if (isBigInt) return void this.finishToken(136, str);
						if (isDecimal) return void this.finishToken(137, str);
						const val = isOctal ? parseInt(str, 8) : parseFloat(str);
						this.finishToken(135, val);
					}
					readCodePoint(throwOnInvalid) {
						const { code: code$1, pos } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
						return this.state.pos = pos, code$1;
					}
					readString(quote) {
						const { str, pos, curLine, lineStart } = readStringContents(34 === quote ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
						this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, this.finishToken(134, str);
					}
					readTemplateContinuation() {
						this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
					}
					readTemplateToken() {
						const opening = this.input[this.state.pos], { str, firstInvalidLoc, pos, curLine, lineStart } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
						this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, firstInvalidLoc && (this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, this.sourceToOffsetPos(firstInvalidLoc.pos))), 96 === this.input.codePointAt(pos) ? this.finishToken(24, firstInvalidLoc ? null : opening + str + "`") : (this.state.pos++, this.finishToken(25, firstInvalidLoc ? null : opening + str + "${"));
					}
					recordStrictModeErrors(toParseError, at) {
						const index = at.index;
						this.state.strict && !this.state.strictErrors.has(index) ? this.raise(toParseError, at) : this.state.strictErrors.set(index, [toParseError, at]);
					}
					readWord1(firstCode) {
						this.state.containsEsc = !1;
						let word = "";
						const start = this.state.pos;
						let chunkStart = this.state.pos;
						for (void 0 !== firstCode && (this.state.pos += firstCode <= 65535 ? 1 : 2); this.state.pos < this.length;) {
							const ch = this.codePointAtPos(this.state.pos);
							if (isIdentifierChar(ch)) this.state.pos += ch <= 65535 ? 1 : 2;
							else {
								if (92 !== ch) break;
								{
									this.state.containsEsc = !0, word += this.input.slice(chunkStart, this.state.pos);
									const escStart = this.state.curPosition(), identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
									if (117 !== this.input.charCodeAt(++this.state.pos)) {
										this.raise(Errors.MissingUnicodeEscape, this.state.curPosition()), chunkStart = this.state.pos - 1;
										continue;
									}
									++this.state.pos;
									const esc = this.readCodePoint(!0);
									null !== esc && (identifierCheck(esc) || this.raise(Errors.EscapedCharNotAnIdentifier, escStart), word += String.fromCodePoint(esc)), chunkStart = this.state.pos;
								}
							}
						}
						return word + this.input.slice(chunkStart, this.state.pos);
					}
					readWord(firstCode) {
						const word = this.readWord1(firstCode), type$1 = keywords$1.get(word);
						void 0 !== type$1 ? this.finishToken(type$1, tokenLabelName(type$1)) : this.finishToken(132, word);
					}
					checkKeywordEscapes() {
						const { type: type$1 } = this.state;
						tokenIsKeyword(type$1) && this.state.containsEsc && this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, { reservedWord: tokenLabelName(type$1) });
					}
					raise(toParseError, at, details = {}) {
						const error$1 = toParseError(at instanceof Position ? at : at.loc.start, details);
						if (!this.options.errorRecovery) throw error$1;
						return this.isLookahead || this.state.errors.push(error$1), error$1;
					}
					raiseOverwrite(toParseError, at, details = {}) {
						const loc = at instanceof Position ? at : at.loc.start, pos = loc.index, errors$1 = this.state.errors;
						for (let i = errors$1.length - 1; i >= 0; i--) {
							const error$1 = errors$1[i];
							if (error$1.loc.index === pos) return errors$1[i] = toParseError(loc, details);
							if (error$1.loc.index < pos) break;
						}
						return this.raise(toParseError, at, details);
					}
					updateContext(prevType) {}
					unexpected(loc, type$1) {
						throw this.raise(Errors.UnexpectedToken, null != loc ? loc : this.state.startLoc, { expected: type$1 ? tokenLabelName(type$1) : null });
					}
					expectPlugin(pluginName, loc) {
						if (this.hasPlugin(pluginName)) return !0;
						throw this.raise(Errors.MissingPlugin, null != loc ? loc : this.state.startLoc, { missingPlugin: [pluginName] });
					}
					expectOnePlugin(pluginNames) {
						if (!pluginNames.some((name) => this.hasPlugin(name))) throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, { missingPlugin: pluginNames });
					}
					errorBuilder(error$1) {
						return (pos, lineStart, curLine) => {
							this.raise(error$1, buildPosition(pos, lineStart, curLine));
						};
					}
				}
				class ClassScope {
					constructor() {
						this.privateNames = new Set(), this.loneAccessors = new Map(), this.undefinedPrivateNames = new Map();
					}
				}
				class ClassScopeHandler {
					constructor(parser) {
						this.parser = void 0, this.stack = [], this.undefinedPrivateNames = new Map(), this.parser = parser;
					}
					current() {
						return this.stack[this.stack.length - 1];
					}
					enter() {
						this.stack.push(new ClassScope());
					}
					exit() {
						const oldClassScope = this.stack.pop(), current = this.current();
						for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) current ? current.undefinedPrivateNames.has(name) || current.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
					}
					declarePrivateName(name, elementType, loc) {
						const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
						let redefined = privateNames.has(name);
						if (3 & elementType) {
							const accessor = redefined && loneAccessors.get(name);
							if (accessor) redefined = (3 & accessor) === (3 & elementType) || (4 & accessor) !== (4 & elementType), redefined || loneAccessors.delete(name);
							else redefined || loneAccessors.set(name, elementType);
						}
						redefined && this.parser.raise(Errors.PrivateNameRedeclaration, loc, { identifierName: name }), privateNames.add(name), undefinedPrivateNames.delete(name);
					}
					usePrivateName(name, loc) {
						let classScope;
						for (classScope of this.stack) if (classScope.privateNames.has(name)) return;
						classScope ? classScope.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
					}
				}
				class ExpressionScope {
					constructor(type$1 = 0) {
						this.type = type$1;
					}
					canBeArrowParameterDeclaration() {
						return 2 === this.type || 1 === this.type;
					}
					isCertainlyParameterDeclaration() {
						return 3 === this.type;
					}
				}
				class ArrowHeadParsingScope extends ExpressionScope {
					constructor(type$1) {
						super(type$1), this.declarationErrors = new Map();
					}
					recordDeclarationError(ParsingErrorClass, at) {
						const index = at.index;
						this.declarationErrors.set(index, [ParsingErrorClass, at]);
					}
					clearDeclarationError(index) {
						this.declarationErrors.delete(index);
					}
					iterateErrors(iterator) {
						this.declarationErrors.forEach(iterator);
					}
				}
				class ExpressionScopeHandler {
					constructor(parser) {
						this.parser = void 0, this.stack = [new ExpressionScope()], this.parser = parser;
					}
					enter(scope) {
						this.stack.push(scope);
					}
					exit() {
						this.stack.pop();
					}
					recordParameterInitializerError(toParseError, node) {
						const origin = node.loc.start, { stack } = this;
						let i = stack.length - 1, scope = stack[i];
						for (; !scope.isCertainlyParameterDeclaration();) {
							if (!scope.canBeArrowParameterDeclaration()) return;
							scope.recordDeclarationError(toParseError, origin), scope = stack[--i];
						}
						this.parser.raise(toParseError, origin);
					}
					recordArrowParameterBindingError(error$1, node) {
						const { stack } = this, scope = stack[stack.length - 1], origin = node.loc.start;
						if (scope.isCertainlyParameterDeclaration()) this.parser.raise(error$1, origin);
						else {
							if (!scope.canBeArrowParameterDeclaration()) return;
							scope.recordDeclarationError(error$1, origin);
						}
					}
					recordAsyncArrowParametersError(at) {
						const { stack } = this;
						let i = stack.length - 1, scope = stack[i];
						for (; scope.canBeArrowParameterDeclaration();) 2 === scope.type && scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at), scope = stack[--i];
					}
					validateAsPattern() {
						const { stack } = this, currentScope = stack[stack.length - 1];
						currentScope.canBeArrowParameterDeclaration() && currentScope.iterateErrors(([toParseError, loc]) => {
							this.parser.raise(toParseError, loc);
							let i = stack.length - 2, scope = stack[i];
							for (; scope.canBeArrowParameterDeclaration();) scope.clearDeclarationError(loc.index), scope = stack[--i];
						});
					}
				}
				function newExpressionScope() {
					return new ExpressionScope();
				}
				class ProductionParameterHandler {
					constructor() {
						this.stacks = [];
					}
					enter(flags) {
						this.stacks.push(flags);
					}
					exit() {
						this.stacks.pop();
					}
					currentFlags() {
						return this.stacks[this.stacks.length - 1];
					}
					get hasAwait() {
						return (2 & this.currentFlags()) > 0;
					}
					get hasYield() {
						return (1 & this.currentFlags()) > 0;
					}
					get hasReturn() {
						return (4 & this.currentFlags()) > 0;
					}
					get hasIn() {
						return (8 & this.currentFlags()) > 0;
					}
				}
				function functionFlags(isAsync, isGenerator) {
					return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
				}
				class UtilParser extends Tokenizer {
					addExtra(node, key, value$1, enumerable = !0) {
						if (!node) return;
						let { extra } = node;
						extra ?? (extra = {}, node.extra = extra), enumerable ? extra[key] = value$1 : Object.defineProperty(extra, key, {
							enumerable,
							value: value$1
						});
					}
					isContextual(token) {
						return this.state.type === token && !this.state.containsEsc;
					}
					isUnparsedContextual(nameStart, name) {
						const nameEnd = nameStart + name.length;
						if (this.input.slice(nameStart, nameEnd) === name) {
							const nextCh = this.input.charCodeAt(nameEnd);
							return !(isIdentifierChar(nextCh) || 55296 == (64512 & nextCh));
						}
						return !1;
					}
					isLookaheadContextual(name) {
						const next = this.nextTokenStart();
						return this.isUnparsedContextual(next, name);
					}
					eatContextual(token) {
						return !!this.isContextual(token) && (this.next(), !0);
					}
					expectContextual(token, toParseError) {
						if (!this.eatContextual(token)) {
							if (null != toParseError) throw this.raise(toParseError, this.state.startLoc);
							this.unexpected(null, token);
						}
					}
					canInsertSemicolon() {
						return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();
					}
					hasPrecedingLineBreak() {
						return hasNewLine(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);
					}
					hasFollowingLineBreak() {
						return hasNewLine(this.input, this.state.end, this.nextTokenStart());
					}
					isLineTerminator() {
						return this.eat(13) || this.canInsertSemicolon();
					}
					semicolon(allowAsi = !0) {
						(allowAsi ? this.isLineTerminator() : this.eat(13)) || this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
					}
					expect(type$1, loc) {
						this.eat(type$1) || this.unexpected(loc, type$1);
					}
					tryParse(fn, oldState = this.state.clone()) {
						const abortSignal = { node: null };
						try {
							const node = fn((node$1 = null) => {
								throw abortSignal.node = node$1, abortSignal;
							});
							if (this.state.errors.length > oldState.errors.length) {
								const failState = this.state;
								return this.state = oldState, this.state.tokensLength = failState.tokensLength, {
									node,
									error: failState.errors[oldState.errors.length],
									thrown: !1,
									aborted: !1,
									failState
								};
							}
							return {
								node,
								error: null,
								thrown: !1,
								aborted: !1,
								failState: null
							};
						} catch (error$1) {
							const failState = this.state;
							if (this.state = oldState, error$1 instanceof SyntaxError) return {
								node: null,
								error: error$1,
								thrown: !0,
								aborted: !1,
								failState
							};
							if (error$1 === abortSignal) return {
								node: abortSignal.node,
								error: null,
								thrown: !1,
								aborted: !0,
								failState
							};
							throw error$1;
						}
					}
					checkExpressionErrors(refExpressionErrors, andThrow) {
						if (!refExpressionErrors) return !1;
						const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
						if (!andThrow) return !!(shorthandAssignLoc || doubleProtoLoc || optionalParametersLoc || privateKeyLoc);
						null != shorthandAssignLoc && this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc), null != doubleProtoLoc && this.raise(Errors.DuplicateProto, doubleProtoLoc), null != privateKeyLoc && this.raise(Errors.UnexpectedPrivateField, privateKeyLoc), null != optionalParametersLoc && this.unexpected(optionalParametersLoc);
					}
					isLiteralPropertyName() {
						return tokenIsLiteralPropertyName(this.state.type);
					}
					isPrivateName(node) {
						return "PrivateName" === node.type;
					}
					getPrivateNameSV(node) {
						return node.id.name;
					}
					hasPropertyAsPrivateName(node) {
						return ("MemberExpression" === node.type || "OptionalMemberExpression" === node.type) && this.isPrivateName(node.property);
					}
					isObjectProperty(node) {
						return "ObjectProperty" === node.type;
					}
					isObjectMethod(node) {
						return "ObjectMethod" === node.type;
					}
					initializeScopes(inModule = "module" === this.options.sourceType) {
						const oldLabels = this.state.labels;
						this.state.labels = [];
						const oldExportedIdentifiers = this.exportedIdentifiers;
						this.exportedIdentifiers = new Set();
						const oldInModule = this.inModule;
						this.inModule = inModule;
						const oldScope = this.scope, ScopeHandler$1 = this.getScopeHandler();
						this.scope = new ScopeHandler$1(this, inModule);
						const oldProdParam = this.prodParam;
						this.prodParam = new ProductionParameterHandler();
						const oldClassScope = this.classScope;
						this.classScope = new ClassScopeHandler(this);
						const oldExpressionScope = this.expressionScope;
						return this.expressionScope = new ExpressionScopeHandler(this), () => {
							this.state.labels = oldLabels, this.exportedIdentifiers = oldExportedIdentifiers, this.inModule = oldInModule, this.scope = oldScope, this.prodParam = oldProdParam, this.classScope = oldClassScope, this.expressionScope = oldExpressionScope;
						};
					}
					enterInitialScopes() {
						let paramFlags = 0;
						this.inModule && (paramFlags |= 2), this.scope.enter(1), this.prodParam.enter(paramFlags);
					}
					checkDestructuringPrivate(refExpressionErrors) {
						const { privateKeyLoc } = refExpressionErrors;
						null !== privateKeyLoc && this.expectPlugin("destructuringPrivate", privateKeyLoc);
					}
				}
				class ExpressionErrors {
					constructor() {
						this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
					}
				}
				class Node {
					constructor(parser, pos, loc) {
						this.type = "", this.start = pos, this.end = 0, this.loc = new SourceLocation(loc), null != parser && parser.options.ranges && (this.range = [pos, 0]), null != parser && parser.filename && (this.loc.filename = parser.filename);
					}
				}
				const NodePrototype = Node.prototype;
				function cloneIdentifier(node) {
					const { type: type$1, start, end, loc, range, extra, name } = node, cloned = Object.create(NodePrototype);
					return cloned.type = type$1, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, cloned.extra = extra, cloned.name = name, "Placeholder" === type$1 && (cloned.expectedNode = node.expectedNode), cloned;
				}
				function cloneStringLiteral(node) {
					const { type: type$1, start, end, loc, range, extra } = node;
					if ("Placeholder" === type$1) return function(node$1) {
						return cloneIdentifier(node$1);
					}(node);
					const cloned = Object.create(NodePrototype);
					return cloned.type = type$1, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, void 0 !== node.raw ? cloned.raw = node.raw : cloned.extra = extra, cloned.value = node.value, cloned;
				}
				NodePrototype.__clone = function() {
					const newNode = new Node(void 0, this.start, this.loc.start), keys = Object.keys(this);
					for (let i = 0, length = keys.length; i < length; i++) {
						const key = keys[i];
						"leadingComments" !== key && "trailingComments" !== key && "innerComments" !== key && (newNode[key] = this[key]);
					}
					return newNode;
				};
				class NodeUtils extends UtilParser {
					startNode() {
						const loc = this.state.startLoc;
						return new Node(this, loc.index, loc);
					}
					startNodeAt(loc) {
						return new Node(this, loc.index, loc);
					}
					startNodeAtNode(type$1) {
						return this.startNodeAt(type$1.loc.start);
					}
					finishNode(node, type$1) {
						return this.finishNodeAt(node, type$1, this.state.lastTokEndLoc);
					}
					finishNodeAt(node, type$1, endLoc) {
						return node.type = type$1, node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index), this.options.attachComment && this.processComment(node), node;
					}
					resetStartLocation(node, startLoc) {
						node.start = startLoc.index, node.loc.start = startLoc, this.options.ranges && (node.range[0] = startLoc.index);
					}
					resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
						node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index);
					}
					resetStartLocationFromNode(node, locationNode) {
						this.resetStartLocation(node, locationNode.loc.start);
					}
				}
				const reservedTypes = new Set([
					"_",
					"any",
					"bool",
					"boolean",
					"empty",
					"extends",
					"false",
					"interface",
					"mixed",
					"null",
					"number",
					"static",
					"string",
					"true",
					"typeof",
					"void"
				]), FlowErrors = ParseErrorEnum`flow`({
					AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
					AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
					AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,
					DeclareClassElement: "The `declare` modifier can only appear on class fields.",
					DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
					DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
					EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
					EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
					EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
					EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
					EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
					EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
					EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
					EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
					EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
					EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
					EnumStringMemberInconsistentlyInitialized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
					GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
					ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
					ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
					InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
					InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
					InexactVariance: "Explicit inexact syntax cannot have variance.",
					InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
					MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
					NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
					NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
					PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }),
					SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
					SpreadVariance: "Spread properties cannot have variance.",
					ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
					ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
					ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
					ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
					ThisParamNoDefault: "The `this` parameter may not have a default value.",
					TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
					TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
					UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
					UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,
					UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
					UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
					UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
					UnexpectedSubtractionOperand: "Unexpected token, expected \"number\" or \"bigint\".",
					UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
					UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
					UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
					UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
					UnterminatedFlowComment: "Unterminated flow-comment."
				});
				function hasTypeImportKind(node) {
					return "type" === node.importKind || "typeof" === node.importKind;
				}
				const exportSuggestions = {
					const: "declare export var",
					let: "declare export var",
					type: "export type",
					interface: "export interface"
				};
				const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
				const entities = {
					__proto__: null,
					quot: "\"",
					amp: "&",
					apos: "'",
					lt: "<",
					gt: ">",
					nbsp: "\xA0",
					iexcl: "¡",
					cent: "¢",
					pound: "£",
					curren: "¤",
					yen: "¥",
					brvbar: "¦",
					sect: "§",
					uml: "¨",
					copy: "©",
					ordf: "ª",
					laquo: "«",
					not: "¬",
					shy: "­",
					reg: "®",
					macr: "¯",
					deg: "°",
					plusmn: "±",
					sup2: "²",
					sup3: "³",
					acute: "´",
					micro: "µ",
					para: "¶",
					middot: "·",
					cedil: "¸",
					sup1: "¹",
					ordm: "º",
					raquo: "»",
					frac14: "¼",
					frac12: "½",
					frac34: "¾",
					iquest: "¿",
					Agrave: "À",
					Aacute: "Á",
					Acirc: "Â",
					Atilde: "Ã",
					Auml: "Ä",
					Aring: "Å",
					AElig: "Æ",
					Ccedil: "Ç",
					Egrave: "È",
					Eacute: "É",
					Ecirc: "Ê",
					Euml: "Ë",
					Igrave: "Ì",
					Iacute: "Í",
					Icirc: "Î",
					Iuml: "Ï",
					ETH: "Ð",
					Ntilde: "Ñ",
					Ograve: "Ò",
					Oacute: "Ó",
					Ocirc: "Ô",
					Otilde: "Õ",
					Ouml: "Ö",
					times: "×",
					Oslash: "Ø",
					Ugrave: "Ù",
					Uacute: "Ú",
					Ucirc: "Û",
					Uuml: "Ü",
					Yacute: "Ý",
					THORN: "Þ",
					szlig: "ß",
					agrave: "à",
					aacute: "á",
					acirc: "â",
					atilde: "ã",
					auml: "ä",
					aring: "å",
					aelig: "æ",
					ccedil: "ç",
					egrave: "è",
					eacute: "é",
					ecirc: "ê",
					euml: "ë",
					igrave: "ì",
					iacute: "í",
					icirc: "î",
					iuml: "ï",
					eth: "ð",
					ntilde: "ñ",
					ograve: "ò",
					oacute: "ó",
					ocirc: "ô",
					otilde: "õ",
					ouml: "ö",
					divide: "÷",
					oslash: "ø",
					ugrave: "ù",
					uacute: "ú",
					ucirc: "û",
					uuml: "ü",
					yacute: "ý",
					thorn: "þ",
					yuml: "ÿ",
					OElig: "Œ",
					oelig: "œ",
					Scaron: "Š",
					scaron: "š",
					Yuml: "Ÿ",
					fnof: "ƒ",
					circ: "ˆ",
					tilde: "˜",
					Alpha: "Α",
					Beta: "Β",
					Gamma: "Γ",
					Delta: "Δ",
					Epsilon: "Ε",
					Zeta: "Ζ",
					Eta: "Η",
					Theta: "Θ",
					Iota: "Ι",
					Kappa: "Κ",
					Lambda: "Λ",
					Mu: "Μ",
					Nu: "Ν",
					Xi: "Ξ",
					Omicron: "Ο",
					Pi: "Π",
					Rho: "Ρ",
					Sigma: "Σ",
					Tau: "Τ",
					Upsilon: "Υ",
					Phi: "Φ",
					Chi: "Χ",
					Psi: "Ψ",
					Omega: "Ω",
					alpha: "α",
					beta: "β",
					gamma: "γ",
					delta: "δ",
					epsilon: "ε",
					zeta: "ζ",
					eta: "η",
					theta: "θ",
					iota: "ι",
					kappa: "κ",
					lambda: "λ",
					mu: "μ",
					nu: "ν",
					xi: "ξ",
					omicron: "ο",
					pi: "π",
					rho: "ρ",
					sigmaf: "ς",
					sigma: "σ",
					tau: "τ",
					upsilon: "υ",
					phi: "φ",
					chi: "χ",
					psi: "ψ",
					omega: "ω",
					thetasym: "ϑ",
					upsih: "ϒ",
					piv: "ϖ",
					ensp: " ",
					emsp: " ",
					thinsp: " ",
					zwnj: "‌",
					zwj: "‍",
					lrm: "‎",
					rlm: "‏",
					ndash: "–",
					mdash: "—",
					lsquo: "‘",
					rsquo: "’",
					sbquo: "‚",
					ldquo: "“",
					rdquo: "”",
					bdquo: "„",
					dagger: "†",
					Dagger: "‡",
					bull: "•",
					hellip: "…",
					permil: "‰",
					prime: "′",
					Prime: "″",
					lsaquo: "‹",
					rsaquo: "›",
					oline: "‾",
					frasl: "⁄",
					euro: "€",
					image: "ℑ",
					weierp: "℘",
					real: "ℜ",
					trade: "™",
					alefsym: "ℵ",
					larr: "←",
					uarr: "↑",
					rarr: "→",
					darr: "↓",
					harr: "↔",
					crarr: "↵",
					lArr: "⇐",
					uArr: "⇑",
					rArr: "⇒",
					dArr: "⇓",
					hArr: "⇔",
					forall: "∀",
					part: "∂",
					exist: "∃",
					empty: "∅",
					nabla: "∇",
					isin: "∈",
					notin: "∉",
					ni: "∋",
					prod: "∏",
					sum: "∑",
					minus: "−",
					lowast: "∗",
					radic: "√",
					prop: "∝",
					infin: "∞",
					ang: "∠",
					and: "∧",
					or: "∨",
					cap: "∩",
					cup: "∪",
					int: "∫",
					there4: "∴",
					sim: "∼",
					cong: "≅",
					asymp: "≈",
					ne: "≠",
					equiv: "≡",
					le: "≤",
					ge: "≥",
					sub: "⊂",
					sup: "⊃",
					nsub: "⊄",
					sube: "⊆",
					supe: "⊇",
					oplus: "⊕",
					otimes: "⊗",
					perp: "⊥",
					sdot: "⋅",
					lceil: "⌈",
					rceil: "⌉",
					lfloor: "⌊",
					rfloor: "⌋",
					lang: "〈",
					rang: "〉",
					loz: "◊",
					spades: "♠",
					clubs: "♣",
					hearts: "♥",
					diams: "♦"
				}, JsxErrors = ParseErrorEnum`jsx`({
					AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
					MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
					MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
					UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
					UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
					UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
					UnterminatedJsxContent: "Unterminated JSX contents.",
					UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
				});
				function isFragment(object) {
					return !!object && ("JSXOpeningFragment" === object.type || "JSXClosingFragment" === object.type);
				}
				function getQualifiedJSXName(object) {
					if ("JSXIdentifier" === object.type) return object.name;
					if ("JSXNamespacedName" === object.type) return object.namespace.name + ":" + object.name.name;
					if ("JSXMemberExpression" === object.type) return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
					throw new Error("Node had unexpected type: " + object.type);
				}
				class TypeScriptScope extends Scope {
					constructor(...args) {
						super(...args), this.tsNames = new Map();
					}
				}
				class TypeScriptScopeHandler extends ScopeHandler {
					constructor(...args) {
						super(...args), this.importsStack = [];
					}
					createScope(flags) {
						return this.importsStack.push(new Set()), new TypeScriptScope(flags);
					}
					enter(flags) {
						256 === flags && this.importsStack.push(new Set()), super.enter(flags);
					}
					exit() {
						const flags = super.exit();
						return 256 === flags && this.importsStack.pop(), flags;
					}
					hasImport(name, allowShadow) {
						const len = this.importsStack.length;
						if (this.importsStack[len - 1].has(name)) return !0;
						if (!allowShadow && len > 1) {
							for (let i = 0; i < len - 1; i++) if (this.importsStack[i].has(name)) return !0;
						}
						return !1;
					}
					declareName(name, bindingType, loc) {
						if (4096 & bindingType) return this.hasImport(name, !0) && this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name }), void this.importsStack[this.importsStack.length - 1].add(name);
						const scope = this.currentScope();
						let type$1 = scope.tsNames.get(name) || 0;
						if (1024 & bindingType) return this.maybeExportDefined(scope, name), void scope.tsNames.set(name, 16 | type$1);
						super.declareName(name, bindingType, loc), 2 & bindingType && (1 & bindingType || (this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name)), type$1 |= 1), 256 & bindingType && (type$1 |= 2), 512 & bindingType && (type$1 |= 4), 128 & bindingType && (type$1 |= 8), type$1 && scope.tsNames.set(name, type$1);
					}
					isRedeclaredInScope(scope, name, bindingType) {
						const type$1 = scope.tsNames.get(name);
						if ((2 & type$1) > 0) {
							if (256 & bindingType) return !!(512 & bindingType) !== (4 & type$1) > 0;
							return !0;
						}
						return 128 & bindingType && (8 & type$1) > 0 ? !!(2 & scope.names.get(name)) && !!(1 & bindingType) : !!(2 & bindingType && (1 & type$1) > 0) || super.isRedeclaredInScope(scope, name, bindingType);
					}
					checkLocalExport(id) {
						const { name } = id;
						if (this.hasImport(name)) return;
						for (let i = this.scopeStack.length - 1; i >= 0; i--) {
							const type$1 = this.scopeStack[i].tsNames.get(name);
							if ((1 & type$1) > 0 || (16 & type$1) > 0) return;
						}
						super.checkLocalExport(id);
					}
				}
				const unwrapParenthesizedExpression = (node) => "ParenthesizedExpression" === node.type ? unwrapParenthesizedExpression(node.expression) : node;
				class LValParser extends NodeUtils {
					toAssignable(node, isLHS = !1) {
						var _node$extra, _node$extra3;
						let parenthesized;
						switch (("ParenthesizedExpression" === node.type || null != (_node$extra = node.extra) && _node$extra.parenthesized) && (parenthesized = unwrapParenthesizedExpression(node), isLHS ? "Identifier" === parenthesized.type ? this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node) : "MemberExpression" === parenthesized.type || this.isOptionalMemberExpression(parenthesized) || this.raise(Errors.InvalidParenthesizedAssignment, node) : this.raise(Errors.InvalidParenthesizedAssignment, node)), node.type) {
							case "Identifier":
							case "ObjectPattern":
							case "ArrayPattern":
							case "AssignmentPattern":
							case "RestElement": break;
							case "ObjectExpression":
								node.type = "ObjectPattern";
								for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
									var _node$extra2;
									const prop = node.properties[i], isLast = i === last;
									this.toAssignableObjectExpressionProp(prop, isLast, isLHS), isLast && "RestElement" === prop.type && null != (_node$extra2 = node.extra) && _node$extra2.trailingCommaLoc && this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);
								}
								break;
							case "ObjectProperty": {
								const { key, value: value$1 } = node;
								this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value$1, isLHS);
								break;
							}
							case "SpreadElement": throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
							case "ArrayExpression":
								node.type = "ArrayPattern", this.toAssignableList(node.elements, null == (_node$extra3 = node.extra) ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
								break;
							case "AssignmentExpression":
								"=" !== node.operator && this.raise(Errors.MissingEqInAssignment, node.left.loc.end), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isLHS);
								break;
							case "ParenthesizedExpression": this.toAssignable(parenthesized, isLHS);
						}
					}
					toAssignableObjectExpressionProp(prop, isLast, isLHS) {
						if ("ObjectMethod" === prop.type) this.raise("get" === prop.kind || "set" === prop.kind ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
						else if ("SpreadElement" === prop.type) {
							prop.type = "RestElement";
							const arg = prop.argument;
							this.checkToRestConversion(arg, !1), this.toAssignable(arg, isLHS), isLast || this.raise(Errors.RestTrailingComma, prop);
						} else this.toAssignable(prop, isLHS);
					}
					toAssignableList(exprList, trailingCommaLoc, isLHS) {
						const end = exprList.length - 1;
						for (let i = 0; i <= end; i++) {
							const elt = exprList[i];
							if (elt) {
								if ("SpreadElement" === elt.type) {
									elt.type = "RestElement";
									const arg = elt.argument;
									this.checkToRestConversion(arg, !0), this.toAssignable(arg, isLHS);
								} else this.toAssignable(elt, isLHS);
								"RestElement" === elt.type && (i < end ? this.raise(Errors.RestTrailingComma, elt) : trailingCommaLoc && this.raise(Errors.RestTrailingComma, trailingCommaLoc));
							}
						}
					}
					isAssignable(node, isBinding) {
						switch (node.type) {
							case "Identifier":
							case "ObjectPattern":
							case "ArrayPattern":
							case "AssignmentPattern":
							case "RestElement": return !0;
							case "ObjectExpression": {
								const last = node.properties.length - 1;
								return node.properties.every((prop, i) => "ObjectMethod" !== prop.type && (i === last || "SpreadElement" !== prop.type) && this.isAssignable(prop));
							}
							case "ObjectProperty": return this.isAssignable(node.value);
							case "SpreadElement": return this.isAssignable(node.argument);
							case "ArrayExpression": return node.elements.every((element) => null === element || this.isAssignable(element));
							case "AssignmentExpression": return "=" === node.operator;
							case "ParenthesizedExpression": return this.isAssignable(node.expression);
							case "MemberExpression":
							case "OptionalMemberExpression": return !isBinding;
							default: return !1;
						}
					}
					toReferencedList(exprList, isParenthesizedExpr) {
						return exprList;
					}
					toReferencedListDeep(exprList, isParenthesizedExpr) {
						this.toReferencedList(exprList, isParenthesizedExpr);
						for (const expr of exprList) "ArrayExpression" === (null == expr ? void 0 : expr.type) && this.toReferencedListDeep(expr.elements);
					}
					parseSpread(refExpressionErrors) {
						const node = this.startNode();
						return this.next(), node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0), this.finishNode(node, "SpreadElement");
					}
					parseRestBinding() {
						const node = this.startNode();
						return this.next(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
					}
					parseBindingAtom() {
						switch (this.state.type) {
							case 0: {
								const node = this.startNode();
								return this.next(), node.elements = this.parseBindingList(3, 93, 1), this.finishNode(node, "ArrayPattern");
							}
							case 5: return this.parseObjectLike(8, !0);
						}
						return this.parseIdentifier();
					}
					parseBindingList(close, closeCharCode, flags) {
						const allowEmpty = 1 & flags, elts = [];
						let first = !0;
						for (; !this.eat(close);) if (first ? first = !1 : this.expect(12), allowEmpty && this.match(12)) elts.push(null);
						else {
							if (this.eat(close)) break;
							if (this.match(21)) {
								let rest = this.parseRestBinding();
								if ((this.hasPlugin("flow") || 2 & flags) && (rest = this.parseFunctionParamType(rest)), elts.push(rest), !this.checkCommaAfterRest(closeCharCode)) {
									this.expect(close);
									break;
								}
							} else {
								const decorators = [];
								for (this.match(26) && this.hasPlugin("decorators") && this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc); this.match(26);) decorators.push(this.parseDecorator());
								elts.push(this.parseAssignableListItem(flags, decorators));
							}
						}
						return elts;
					}
					parseBindingRestProperty(prop) {
						return this.next(), prop.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(prop, "RestElement");
					}
					parseBindingProperty() {
						const { type: type$1, startLoc } = this.state;
						if (21 === type$1) return this.parseBindingRestProperty(this.startNode());
						const prop = this.startNode();
						return 139 === type$1 ? (this.expectPlugin("destructuringPrivate", startLoc), this.classScope.usePrivateName(this.state.value, startLoc), prop.key = this.parsePrivateName()) : this.parsePropertyName(prop), prop.method = !1, this.parseObjPropValue(prop, startLoc, !1, !1, !0, !1);
					}
					parseAssignableListItem(flags, decorators) {
						const left = this.parseMaybeDefault();
						(this.hasPlugin("flow") || 2 & flags) && this.parseFunctionParamType(left);
						const elt = this.parseMaybeDefault(left.loc.start, left);
						return decorators.length && (left.decorators = decorators), elt;
					}
					parseFunctionParamType(param) {
						return param;
					}
					parseMaybeDefault(startLoc, left) {
						var _left;
						if (startLoc ??= this.state.startLoc, left = null != (_left = left) ? _left : this.parseBindingAtom(), !this.eat(29)) return left;
						const node = this.startNodeAt(startLoc);
						return node.left = left, node.right = this.parseMaybeAssignAllowIn(), this.finishNode(node, "AssignmentPattern");
					}
					isValidLVal(type$1, isUnparenthesizedInAssign, binding) {
						switch (type$1) {
							case "AssignmentPattern": return "left";
							case "RestElement": return "argument";
							case "ObjectProperty": return "value";
							case "ParenthesizedExpression": return "expression";
							case "ArrayPattern": return "elements";
							case "ObjectPattern": return "properties";
						}
						return !1;
					}
					isOptionalMemberExpression(expression) {
						return "OptionalMemberExpression" === expression.type;
					}
					checkLVal(expression, ancestor, binding = 64, checkClashes = !1, strictModeChanged = !1, hasParenthesizedAncestor = !1) {
						var _expression$extra;
						const type$1 = expression.type;
						if (this.isObjectMethod(expression)) return;
						const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
						if (isOptionalMemberExpression || "MemberExpression" === type$1) return isOptionalMemberExpression && (this.expectPlugin("optionalChainingAssign", expression.loc.start), "AssignmentExpression" !== ancestor.type && this.raise(Errors.InvalidLhsOptionalChaining, expression, { ancestor })), void (64 !== binding && this.raise(Errors.InvalidPropertyBindingPattern, expression));
						if ("Identifier" === type$1) {
							this.checkIdentifier(expression, binding, strictModeChanged);
							const { name } = expression;
							return void (checkClashes && (checkClashes.has(name) ? this.raise(Errors.ParamDupe, expression) : checkClashes.add(name)));
						}
						const validity = this.isValidLVal(type$1, !(hasParenthesizedAncestor || null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) && "AssignmentExpression" === ancestor.type, binding);
						if (!0 === validity) return;
						if (!1 === validity) {
							const ParseErrorClass = 64 === binding ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
							return void this.raise(ParseErrorClass, expression, { ancestor });
						}
						let key, isParenthesizedExpression;
						"string" == typeof validity ? (key = validity, isParenthesizedExpression = "ParenthesizedExpression" === type$1) : [key, isParenthesizedExpression] = validity;
						const nextAncestor = "ArrayPattern" === type$1 || "ObjectPattern" === type$1 ? { type: type$1 } : ancestor, val = expression[key];
						if (Array.isArray(val)) for (const child$1 of val) child$1 && this.checkLVal(child$1, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
						else val && this.checkLVal(val, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
					}
					checkIdentifier(at, bindingType, strictModeChanged = !1) {
						this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name)) && (64 === bindingType ? this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name }) : this.raise(Errors.StrictEvalArgumentsBinding, at, { bindingName: at.name })), 8192 & bindingType && "let" === at.name && this.raise(Errors.LetInLexicalBinding, at), 64 & bindingType || this.declareNameFromIdentifier(at, bindingType);
					}
					declareNameFromIdentifier(identifier, binding) {
						this.scope.declareName(identifier.name, binding, identifier.loc.start);
					}
					checkToRestConversion(node, allowPattern) {
						switch (node.type) {
							case "ParenthesizedExpression":
								this.checkToRestConversion(node.expression, allowPattern);
								break;
							case "Identifier":
							case "MemberExpression": break;
							case "ArrayExpression":
							case "ObjectExpression": if (allowPattern) break;
							default: this.raise(Errors.InvalidRestAssignmentPattern, node);
						}
					}
					checkCommaAfterRest(close) {
						return !!this.match(12) && (this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc), !0);
					}
				}
				function assert$21(x$3) {
					if (!x$3) throw new Error("Assert fail");
				}
				const TSErrors = ParseErrorEnum`typescript`({
					AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
					AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
					AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
					AccessorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
					AccessorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
					ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
					ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
					ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
					ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
					DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`,
					DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
					DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
					DuplicateAccessibilityModifier: ({ modifier }) => "Accessibility modifier already seen.",
					DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`,
					EmptyHeritageClauseType: ({ token }) => `'${token}' list cannot be empty.`,
					EmptyTypeArguments: "Type argument list cannot be empty.",
					EmptyTypeParameters: "Type parameter list cannot be empty.",
					ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
					ImportAliasHasImportType: "An import alias can not use 'import type'.",
					ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
					IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
					IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
					IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
					IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
					IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
					IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
					InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
					InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,
					InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`,
					InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
					InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
					InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
					InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
					MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
					NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
					NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
					OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
					OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
					PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
					PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
					PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
					ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
					ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
					ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
					SetAccessorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
					SetAccessorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
					SetAccessorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
					SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
					StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
					TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
					TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
					TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
					TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
					TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
					UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
					UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
					UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
					UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
					UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
					UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
					UnsupportedSignatureParameterKind: ({ type: type$1 }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type$1}.`
				});
				function tsIsAccessModifier(modifier) {
					return "private" === modifier || "public" === modifier || "protected" === modifier;
				}
				function tsIsVarianceAnnotations(modifier) {
					return "in" === modifier || "out" === modifier;
				}
				function isPossiblyLiteralEnum(expression) {
					if ("MemberExpression" !== expression.type) return !1;
					const { computed, property } = expression;
					return (!computed || "StringLiteral" === property.type || !("TemplateLiteral" !== property.type || property.expressions.length > 0)) && isUncomputedMemberExpressionChain(expression.object);
				}
				function isValidAmbientConstInitializer(expression, estree) {
					var _expression$extra;
					const { type: type$1 } = expression;
					if (null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) return !1;
					if (estree) {
						if ("Literal" === type$1) {
							const { value: value$1 } = expression;
							if ("string" == typeof value$1 || "boolean" == typeof value$1) return !0;
						}
					} else if ("StringLiteral" === type$1 || "BooleanLiteral" === type$1) return !0;
					return !(!isNumber(expression, estree) && !function(expression$1, estree$1) {
						if ("UnaryExpression" === expression$1.type) {
							const { operator, argument } = expression$1;
							if ("-" === operator && isNumber(argument, estree$1)) return !0;
						}
						return !1;
					}(expression, estree)) || "TemplateLiteral" === type$1 && 0 === expression.expressions.length || !!isPossiblyLiteralEnum(expression);
				}
				function isNumber(expression, estree) {
					return estree ? "Literal" === expression.type && ("number" == typeof expression.value || "bigint" in expression) : "NumericLiteral" === expression.type || "BigIntLiteral" === expression.type;
				}
				function isUncomputedMemberExpressionChain(expression) {
					return "Identifier" === expression.type || "MemberExpression" === expression.type && !expression.computed && isUncomputedMemberExpressionChain(expression.object);
				}
				const PlaceholderErrors = ParseErrorEnum`placeholders`({
					ClassNameIsRequired: "A class name is required.",
					UnexpectedSpace: "Unexpected space in placeholder."
				});
				const PIPELINE_PROPOSALS = [
					"minimal",
					"fsharp",
					"hack",
					"smart"
				], TOPIC_TOKENS = [
					"^^",
					"@@",
					"^",
					"%",
					"#"
				];
				const mixinPlugins = {
					estree: (superClass) => class extends superClass {
						parse() {
							const file = toESTreeLocation(super.parse());
							return this.options.tokens && (file.tokens = file.tokens.map(toESTreeLocation)), file;
						}
						parseRegExpLiteral({ pattern, flags }) {
							let regex = null;
							try {
								regex = new RegExp(pattern, flags);
							} catch (_$2) {}
							const node = this.estreeParseLiteral(regex);
							return node.regex = {
								pattern,
								flags
							}, node;
						}
						parseBigIntLiteral(value$1) {
							let bigInt;
							try {
								bigInt = BigInt(value$1);
							} catch (_unused) {
								bigInt = null;
							}
							const node = this.estreeParseLiteral(bigInt);
							return node.bigint = String(node.value || value$1), node;
						}
						parseDecimalLiteral(value$1) {
							const node = this.estreeParseLiteral(null);
							return node.decimal = String(node.value || value$1), node;
						}
						estreeParseLiteral(value$1) {
							return this.parseLiteral(value$1, "Literal");
						}
						parseStringLiteral(value$1) {
							return this.estreeParseLiteral(value$1);
						}
						parseNumericLiteral(value$1) {
							return this.estreeParseLiteral(value$1);
						}
						parseNullLiteral() {
							return this.estreeParseLiteral(null);
						}
						parseBooleanLiteral(value$1) {
							return this.estreeParseLiteral(value$1);
						}
						directiveToStmt(directive) {
							const expression = directive.value;
							delete directive.value, expression.type = "Literal", expression.raw = expression.extra.raw, expression.value = expression.extra.expressionValue;
							const stmt = directive;
							return stmt.type = "ExpressionStatement", stmt.expression = expression, stmt.directive = expression.extra.rawValue, delete expression.extra, stmt;
						}
						initFunction(node, isAsync) {
							super.initFunction(node, isAsync), node.expression = !1;
						}
						checkDeclaration(node) {
							null != node && this.isObjectProperty(node) ? this.checkDeclaration(node.value) : super.checkDeclaration(node);
						}
						getObjectOrClassMethodParams(method) {
							return method.value.params;
						}
						isValidDirective(stmt) {
							var _stmt$expression$extr;
							return "ExpressionStatement" === stmt.type && "Literal" === stmt.expression.type && "string" == typeof stmt.expression.value && !(null != (_stmt$expression$extr = stmt.expression.extra) && _stmt$expression$extr.parenthesized);
						}
						parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
							super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
							const directiveStatements = node.directives.map((d$2) => this.directiveToStmt(d$2));
							node.body = directiveStatements.concat(node.body), delete node.directives;
						}
						pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
							this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", !0), method.typeParameters && (method.value.typeParameters = method.typeParameters, delete method.typeParameters), classBody.body.push(method);
						}
						parsePrivateName() {
							const node = super.parsePrivateName();
							return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(node) : node;
						}
						convertPrivateNameToPrivateIdentifier(node) {
							const name = super.getPrivateNameSV(node);
							return delete node.id, node.name = name, node.type = "PrivateIdentifier", node;
						}
						isPrivateName(node) {
							return this.getPluginOption("estree", "classFeatures") ? "PrivateIdentifier" === node.type : super.isPrivateName(node);
						}
						getPrivateNameSV(node) {
							return this.getPluginOption("estree", "classFeatures") ? node.name : super.getPrivateNameSV(node);
						}
						parseLiteral(value$1, type$1) {
							const node = super.parseLiteral(value$1, type$1);
							return node.raw = node.extra.raw, delete node.extra, node;
						}
						parseFunctionBody(node, allowExpression, isMethod = !1) {
							super.parseFunctionBody(node, allowExpression, isMethod), node.expression = "BlockStatement" !== node.body.type;
						}
						parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type$1, inClassScope = !1) {
							let funcNode = this.startNode();
							return funcNode.kind = node.kind, funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type$1, inClassScope), funcNode.type = "FunctionExpression", delete funcNode.kind, node.value = funcNode, "ClassPrivateMethod" === type$1 && (node.computed = !1), this.finishNode(node, "MethodDefinition");
						}
						nameIsConstructor(key) {
							return "Literal" === key.type ? "constructor" === key.value : super.nameIsConstructor(key);
						}
						parseClassProperty(...args) {
							const propertyNode = super.parseClassProperty(...args);
							return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode) : propertyNode;
						}
						parseClassPrivateProperty(...args) {
							const propertyNode = super.parseClassPrivateProperty(...args);
							return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode.computed = !1, propertyNode) : propertyNode;
						}
						parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
							const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
							return node && (node.type = "Property", "method" === node.kind && (node.kind = "init"), node.shorthand = !1), node;
						}
						parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
							const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
							return node && (node.kind = "init", node.type = "Property"), node;
						}
						isValidLVal(type$1, isUnparenthesizedInAssign, binding) {
							return "Property" === type$1 ? "value" : super.isValidLVal(type$1, isUnparenthesizedInAssign, binding);
						}
						isAssignable(node, isBinding) {
							return null != node && this.isObjectProperty(node) ? this.isAssignable(node.value, isBinding) : super.isAssignable(node, isBinding);
						}
						toAssignable(node, isLHS = !1) {
							if (null != node && this.isObjectProperty(node)) {
								const { key, value: value$1 } = node;
								this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value$1, isLHS);
							} else super.toAssignable(node, isLHS);
						}
						toAssignableObjectExpressionProp(prop, isLast, isLHS) {
							"Property" !== prop.type || "get" !== prop.kind && "set" !== prop.kind ? "Property" === prop.type && prop.method ? this.raise(Errors.PatternHasMethod, prop.key) : super.toAssignableObjectExpressionProp(prop, isLast, isLHS) : this.raise(Errors.PatternHasAccessor, prop.key);
						}
						finishCallExpression(unfinished, optional) {
							const node = super.finishCallExpression(unfinished, optional);
							var _ref, _ref2;
							"Import" === node.callee.type && (node.type = "ImportExpression", node.source = node.arguments[0], node.options = null != (_ref = node.arguments[1]) ? _ref : null, node.attributes = null != (_ref2 = node.arguments[1]) ? _ref2 : null, delete node.arguments, delete node.callee);
							return node;
						}
						toReferencedArguments(node) {
							"ImportExpression" !== node.type && super.toReferencedArguments(node);
						}
						parseExport(unfinished, decorators) {
							const exportStartLoc = this.state.lastTokStartLoc, node = super.parseExport(unfinished, decorators);
							switch (node.type) {
								case "ExportAllDeclaration":
									node.exported = null;
									break;
								case "ExportNamedDeclaration": 1 === node.specifiers.length && "ExportNamespaceSpecifier" === node.specifiers[0].type && (node.type = "ExportAllDeclaration", node.exported = node.specifiers[0].exported, delete node.specifiers);
								case "ExportDefaultDeclaration": {
									var _declaration$decorato;
									const { declaration } = node;
									"ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && (null == (_declaration$decorato = declaration.decorators) ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start && this.resetStartLocation(node, exportStartLoc);
								}
							}
							return node;
						}
						parseSubscript(base, startLoc, noCalls, state) {
							const node = super.parseSubscript(base, startLoc, noCalls, state);
							if (state.optionalChainMember) {
								if ("OptionalMemberExpression" !== node.type && "OptionalCallExpression" !== node.type || (node.type = node.type.substring(8)), state.stop) {
									const chain = this.startNodeAtNode(node);
									return chain.expression = node, this.finishNode(chain, "ChainExpression");
								}
							} else "MemberExpression" !== node.type && "CallExpression" !== node.type || (node.optional = !1);
							return node;
						}
						isOptionalMemberExpression(node) {
							return "ChainExpression" === node.type ? "MemberExpression" === node.expression.type : super.isOptionalMemberExpression(node);
						}
						hasPropertyAsPrivateName(node) {
							return "ChainExpression" === node.type && (node = node.expression), super.hasPropertyAsPrivateName(node);
						}
						isObjectProperty(node) {
							return "Property" === node.type && "init" === node.kind && !node.method;
						}
						isObjectMethod(node) {
							return "Property" === node.type && (node.method || "get" === node.kind || "set" === node.kind);
						}
						finishNodeAt(node, type$1, endLoc) {
							return toESTreeLocation(super.finishNodeAt(node, type$1, endLoc));
						}
						resetStartLocation(node, startLoc) {
							super.resetStartLocation(node, startLoc), toESTreeLocation(node);
						}
						resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
							super.resetEndLocation(node, endLoc), toESTreeLocation(node);
						}
					},
					jsx: (superClass) => class extends superClass {
						jsxReadToken() {
							let out = "", chunkStart = this.state.pos;
							for (;;) {
								if (this.state.pos >= this.length) throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
								const ch = this.input.charCodeAt(this.state.pos);
								switch (ch) {
									case 60:
									case 123: return this.state.pos === this.state.start ? void (60 === ch && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(143)) : super.getTokenFromCode(ch)) : (out += this.input.slice(chunkStart, this.state.pos), void this.finishToken(142, out));
									case 38:
										out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos;
										break;
									default: isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(!0), chunkStart = this.state.pos) : ++this.state.pos;
								}
							}
						}
						jsxReadNewLine(normalizeCRLF) {
							const ch = this.input.charCodeAt(this.state.pos);
							let out;
							return ++this.state.pos, 13 === ch && 10 === this.input.charCodeAt(this.state.pos) ? (++this.state.pos, out = normalizeCRLF ? "\n" : "\r\n") : out = String.fromCharCode(ch), ++this.state.curLine, this.state.lineStart = this.state.pos, out;
						}
						jsxReadString(quote) {
							let out = "", chunkStart = ++this.state.pos;
							for (;;) {
								if (this.state.pos >= this.length) throw this.raise(Errors.UnterminatedString, this.state.startLoc);
								const ch = this.input.charCodeAt(this.state.pos);
								if (ch === quote) break;
								38 === ch ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos) : isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(!1), chunkStart = this.state.pos) : ++this.state.pos;
							}
							out += this.input.slice(chunkStart, this.state.pos++), this.finishToken(134, out);
						}
						jsxReadEntity() {
							const startPos = ++this.state.pos;
							if (35 === this.codePointAtPos(this.state.pos)) {
								++this.state.pos;
								let radix = 10;
								120 === this.codePointAtPos(this.state.pos) && (radix = 16, ++this.state.pos);
								const codePoint = this.readInt(radix, void 0, !1, "bail");
								if (null !== codePoint && 59 === this.codePointAtPos(this.state.pos)) return ++this.state.pos, String.fromCodePoint(codePoint);
							} else {
								let count = 0, semi = !1;
								for (; count++ < 10 && this.state.pos < this.length && !(semi = 59 === this.codePointAtPos(this.state.pos));) ++this.state.pos;
								if (semi) {
									const desc = this.input.slice(startPos, this.state.pos), entity = entities[desc];
									if (++this.state.pos, entity) return entity;
								}
							}
							return this.state.pos = startPos, "&";
						}
						jsxReadWord() {
							let ch;
							const start = this.state.pos;
							do
								ch = this.input.charCodeAt(++this.state.pos);
							while (isIdentifierChar(ch) || 45 === ch);
							this.finishToken(141, this.input.slice(start, this.state.pos));
						}
						jsxParseIdentifier() {
							const node = this.startNode();
							return this.match(141) ? node.name = this.state.value : tokenIsKeyword(this.state.type) ? node.name = tokenLabelName(this.state.type) : this.unexpected(), this.next(), this.finishNode(node, "JSXIdentifier");
						}
						jsxParseNamespacedName() {
							const startLoc = this.state.startLoc, name = this.jsxParseIdentifier();
							if (!this.eat(14)) return name;
							const node = this.startNodeAt(startLoc);
							return node.namespace = name, node.name = this.jsxParseIdentifier(), this.finishNode(node, "JSXNamespacedName");
						}
						jsxParseElementName() {
							const startLoc = this.state.startLoc;
							let node = this.jsxParseNamespacedName();
							if ("JSXNamespacedName" === node.type) return node;
							for (; this.eat(16);) {
								const newNode = this.startNodeAt(startLoc);
								newNode.object = node, newNode.property = this.jsxParseIdentifier(), node = this.finishNode(newNode, "JSXMemberExpression");
							}
							return node;
						}
						jsxParseAttributeValue() {
							let node;
							switch (this.state.type) {
								case 5: return node = this.startNode(), this.setContext(types$7.brace), this.next(), node = this.jsxParseExpressionContainer(node, types$7.j_oTag), "JSXEmptyExpression" === node.expression.type && this.raise(JsxErrors.AttributeIsEmpty, node), node;
								case 143:
								case 134: return this.parseExprAtom();
								default: throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
							}
						}
						jsxParseEmptyExpression() {
							const node = this.startNodeAt(this.state.lastTokEndLoc);
							return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
						}
						jsxParseSpreadChild(node) {
							return this.next(), node.expression = this.parseExpression(), this.setContext(types$7.j_expr), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(node, "JSXSpreadChild");
						}
						jsxParseExpressionContainer(node, previousContext) {
							if (this.match(8)) node.expression = this.jsxParseEmptyExpression();
							else {
								const expression = this.parseExpression();
								node.expression = expression;
							}
							return this.setContext(previousContext), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(node, "JSXExpressionContainer");
						}
						jsxParseAttribute() {
							const node = this.startNode();
							return this.match(5) ? (this.setContext(types$7.brace), this.next(), this.expect(21), node.argument = this.parseMaybeAssignAllowIn(), this.setContext(types$7.j_oTag), this.state.canStartJSXElement = !0, this.expect(8), this.finishNode(node, "JSXSpreadAttribute")) : (node.name = this.jsxParseNamespacedName(), node.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(node, "JSXAttribute"));
						}
						jsxParseOpeningElementAt(startLoc) {
							const node = this.startNodeAt(startLoc);
							return this.eat(144) ? this.finishNode(node, "JSXOpeningFragment") : (node.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(node));
						}
						jsxParseOpeningElementAfterName(node) {
							const attributes = [];
							for (; !this.match(56) && !this.match(144);) attributes.push(this.jsxParseAttribute());
							return node.attributes = attributes, node.selfClosing = this.eat(56), this.expect(144), this.finishNode(node, "JSXOpeningElement");
						}
						jsxParseClosingElementAt(startLoc) {
							const node = this.startNodeAt(startLoc);
							return this.eat(144) ? this.finishNode(node, "JSXClosingFragment") : (node.name = this.jsxParseElementName(), this.expect(144), this.finishNode(node, "JSXClosingElement"));
						}
						jsxParseElementAt(startLoc) {
							const node = this.startNodeAt(startLoc), children = [], openingElement = this.jsxParseOpeningElementAt(startLoc);
							let closingElement = null;
							if (!openingElement.selfClosing) {
								contents: for (;;) switch (this.state.type) {
									case 143:
										if (startLoc = this.state.startLoc, this.next(), this.eat(56)) {
											closingElement = this.jsxParseClosingElementAt(startLoc);
											break contents;
										}
										children.push(this.jsxParseElementAt(startLoc));
										break;
									case 142:
										children.push(this.parseLiteral(this.state.value, "JSXText"));
										break;
									case 5: {
										const node$1 = this.startNode();
										this.setContext(types$7.brace), this.next(), this.match(21) ? children.push(this.jsxParseSpreadChild(node$1)) : children.push(this.jsxParseExpressionContainer(node$1, types$7.j_expr));
										break;
									}
									default: this.unexpected();
								}
								isFragment(openingElement) && !isFragment(closingElement) && null !== closingElement ? this.raise(JsxErrors.MissingClosingTagFragment, closingElement) : !isFragment(openingElement) && isFragment(closingElement) ? this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) }) : isFragment(openingElement) || isFragment(closingElement) || getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name) && this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) });
							}
							if (isFragment(openingElement) ? (node.openingFragment = openingElement, node.closingFragment = closingElement) : (node.openingElement = openingElement, node.closingElement = closingElement), node.children = children, this.match(47)) throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
							return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
						}
						jsxParseElement() {
							const startLoc = this.state.startLoc;
							return this.next(), this.jsxParseElementAt(startLoc);
						}
						setContext(newContext) {
							const { context } = this.state;
							context[context.length - 1] = newContext;
						}
						parseExprAtom(refExpressionErrors) {
							return this.match(143) ? this.jsxParseElement() : this.match(47) && 33 !== this.input.charCodeAt(this.state.pos) ? (this.replaceToken(143), this.jsxParseElement()) : super.parseExprAtom(refExpressionErrors);
						}
						skipSpace() {
							this.curContext().preserveSpace || super.skipSpace();
						}
						getTokenFromCode(code$1) {
							const context = this.curContext();
							if (context !== types$7.j_expr) {
								if (context === types$7.j_oTag || context === types$7.j_cTag) {
									if (isIdentifierStart(code$1)) return void this.jsxReadWord();
									if (62 === code$1) return ++this.state.pos, void this.finishToken(144);
									if ((34 === code$1 || 39 === code$1) && context === types$7.j_oTag) return void this.jsxReadString(code$1);
								}
								if (60 === code$1 && this.state.canStartJSXElement && 33 !== this.input.charCodeAt(this.state.pos + 1)) return ++this.state.pos, void this.finishToken(143);
								super.getTokenFromCode(code$1);
							} else this.jsxReadToken();
						}
						updateContext(prevType) {
							const { context, type: type$1 } = this.state;
							if (56 === type$1 && 143 === prevType) context.splice(-2, 2, types$7.j_cTag), this.state.canStartJSXElement = !1;
							else if (143 === type$1) context.push(types$7.j_oTag);
							else if (144 === type$1) {
								const out = context[context.length - 1];
								out === types$7.j_oTag && 56 === prevType || out === types$7.j_cTag ? (context.pop(), this.state.canStartJSXElement = context[context.length - 1] === types$7.j_expr) : (this.setContext(types$7.j_expr), this.state.canStartJSXElement = !0);
							} else this.state.canStartJSXElement = tokenBeforeExprs[type$1];
						}
					},
					flow: (superClass) => class extends superClass {
						constructor(...args) {
							super(...args), this.flowPragma = void 0;
						}
						getScopeHandler() {
							return FlowScopeHandler;
						}
						shouldParseTypes() {
							return this.getPluginOption("flow", "all") || "flow" === this.flowPragma;
						}
						finishToken(type$1, val) {
							134 !== type$1 && 13 !== type$1 && 28 !== type$1 && void 0 === this.flowPragma && (this.flowPragma = null), super.finishToken(type$1, val);
						}
						addComment(comment) {
							if (void 0 === this.flowPragma) {
								const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
								if (matches) if ("flow" === matches[1]) this.flowPragma = "flow";
								else {
									if ("noflow" !== matches[1]) throw new Error("Unexpected flow pragma");
									this.flowPragma = "noflow";
								}
							}
							super.addComment(comment);
						}
						flowParseTypeInitialiser(tok) {
							const oldInType = this.state.inType;
							this.state.inType = !0, this.expect(tok || 14);
							const type$1 = this.flowParseType();
							return this.state.inType = oldInType, type$1;
						}
						flowParsePredicate() {
							const node = this.startNode(), moduloLoc = this.state.startLoc;
							return this.next(), this.expectContextual(110), this.state.lastTokStartLoc.index > moduloLoc.index + 1 && this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc), this.eat(10) ? (node.value = super.parseExpression(), this.expect(11), this.finishNode(node, "DeclaredPredicate")) : this.finishNode(node, "InferredPredicate");
						}
						flowParseTypeAndPredicateInitialiser() {
							const oldInType = this.state.inType;
							this.state.inType = !0, this.expect(14);
							let type$1 = null, predicate = null;
							return this.match(54) ? (this.state.inType = oldInType, predicate = this.flowParsePredicate()) : (type$1 = this.flowParseType(), this.state.inType = oldInType, this.match(54) && (predicate = this.flowParsePredicate())), [type$1, predicate];
						}
						flowParseDeclareClass(node) {
							return this.next(), this.flowParseInterfaceish(node, !0), this.finishNode(node, "DeclareClass");
						}
						flowParseDeclareFunction(node) {
							this.next();
							const id = node.id = this.parseIdentifier(), typeNode = this.startNode(), typeContainer = this.startNode();
							this.match(47) ? typeNode.typeParameters = this.flowParseTypeParameterDeclaration() : typeNode.typeParameters = null, this.expect(10);
							const tmp = this.flowParseFunctionTypeParams();
							return typeNode.params = tmp.params, typeNode.rest = tmp.rest, typeNode.this = tmp._this, this.expect(11), [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation"), id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation"), this.resetEndLocation(id), this.semicolon(), this.scope.declareName(node.id.name, 2048, node.id.loc.start), this.finishNode(node, "DeclareFunction");
						}
						flowParseDeclare(node, insideModule) {
							return this.match(80) ? this.flowParseDeclareClass(node) : this.match(68) ? this.flowParseDeclareFunction(node) : this.match(74) ? this.flowParseDeclareVariable(node) : this.eatContextual(127) ? this.match(16) ? this.flowParseDeclareModuleExports(node) : (insideModule && this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc), this.flowParseDeclareModule(node)) : this.isContextual(130) ? this.flowParseDeclareTypeAlias(node) : this.isContextual(131) ? this.flowParseDeclareOpaqueType(node) : this.isContextual(129) ? this.flowParseDeclareInterface(node) : this.match(82) ? this.flowParseDeclareExportDeclaration(node, insideModule) : void this.unexpected();
						}
						flowParseDeclareVariable(node) {
							return this.next(), node.id = this.flowParseTypeAnnotatableIdentifier(!0), this.scope.declareName(node.id.name, 5, node.id.loc.start), this.semicolon(), this.finishNode(node, "DeclareVariable");
						}
						flowParseDeclareModule(node) {
							this.scope.enter(0), this.match(134) ? node.id = super.parseExprAtom() : node.id = this.parseIdentifier();
							const bodyNode = node.body = this.startNode(), body = bodyNode.body = [];
							for (this.expect(5); !this.match(8);) {
								let bodyNode$1 = this.startNode();
								this.match(83) ? (this.next(), this.isContextual(130) || this.match(87) || this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc), super.parseImport(bodyNode$1)) : (this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule), bodyNode$1 = this.flowParseDeclare(bodyNode$1, !0)), body.push(bodyNode$1);
							}
							this.scope.exit(), this.expect(8), this.finishNode(bodyNode, "BlockStatement");
							let kind = null, hasModuleExport = !1;
							return body.forEach((bodyElement) => {
								!function(bodyElement$1) {
									return "DeclareExportAllDeclaration" === bodyElement$1.type || "DeclareExportDeclaration" === bodyElement$1.type && (!bodyElement$1.declaration || "TypeAlias" !== bodyElement$1.declaration.type && "InterfaceDeclaration" !== bodyElement$1.declaration.type);
								}(bodyElement) ? "DeclareModuleExports" === bodyElement.type && (hasModuleExport && this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement), "ES" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement), kind = "CommonJS", hasModuleExport = !0) : ("CommonJS" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement), kind = "ES");
							}), node.kind = kind || "CommonJS", this.finishNode(node, "DeclareModule");
						}
						flowParseDeclareExportDeclaration(node, insideModule) {
							if (this.expect(82), this.eat(65)) return this.match(68) || this.match(80) ? node.declaration = this.flowParseDeclare(this.startNode()) : (node.declaration = this.flowParseType(), this.semicolon()), node.default = !0, this.finishNode(node, "DeclareExportDeclaration");
							if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
								const label = this.state.value;
								throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {
									unsupportedExportKind: label,
									suggestion: exportSuggestions[label]
								});
							}
							return this.match(74) || this.match(68) || this.match(80) || this.isContextual(131) ? (node.declaration = this.flowParseDeclare(this.startNode()), node.default = !1, this.finishNode(node, "DeclareExportDeclaration")) : this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131) ? ("ExportNamedDeclaration" === (node = this.parseExport(node, null)).type && (node.type = "ExportDeclaration", node.default = !1, delete node.exportKind), node.type = "Declare" + node.type, node) : void this.unexpected();
						}
						flowParseDeclareModuleExports(node) {
							return this.next(), this.expectContextual(111), node.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(node, "DeclareModuleExports");
						}
						flowParseDeclareTypeAlias(node) {
							this.next();
							const finished$1 = this.flowParseTypeAlias(node);
							return finished$1.type = "DeclareTypeAlias", finished$1;
						}
						flowParseDeclareOpaqueType(node) {
							this.next();
							const finished$1 = this.flowParseOpaqueType(node, !0);
							return finished$1.type = "DeclareOpaqueType", finished$1;
						}
						flowParseDeclareInterface(node) {
							return this.next(), this.flowParseInterfaceish(node, !1), this.finishNode(node, "DeclareInterface");
						}
						flowParseInterfaceish(node, isClass) {
							if (node.id = this.flowParseRestrictedIdentifier(!isClass, !0), this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.extends = [], this.eat(81)) do
								node.extends.push(this.flowParseInterfaceExtends());
							while (!isClass && this.eat(12));
							if (isClass) {
								if (node.implements = [], node.mixins = [], this.eatContextual(117)) do
									node.mixins.push(this.flowParseInterfaceExtends());
								while (this.eat(12));
								if (this.eatContextual(113)) do
									node.implements.push(this.flowParseInterfaceExtends());
								while (this.eat(12));
							}
							node.body = this.flowParseObjectType({
								allowStatic: isClass,
								allowExact: !1,
								allowSpread: !1,
								allowProto: isClass,
								allowInexact: !1
							});
						}
						flowParseInterfaceExtends() {
							const node = this.startNode();
							return node.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? node.typeParameters = this.flowParseTypeParameterInstantiation() : node.typeParameters = null, this.finishNode(node, "InterfaceExtends");
						}
						flowParseInterface(node) {
							return this.flowParseInterfaceish(node, !1), this.finishNode(node, "InterfaceDeclaration");
						}
						checkNotUnderscore(word) {
							"_" === word && this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
						}
						checkReservedType(word, startLoc, declaration) {
							reservedTypes.has(word) && this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, { reservedType: word });
						}
						flowParseRestrictedIdentifier(liberal, declaration) {
							return this.checkReservedType(this.state.value, this.state.startLoc, declaration), this.parseIdentifier(liberal);
						}
						flowParseTypeAlias(node) {
							return node.id = this.flowParseRestrictedIdentifier(!1, !0), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(node, "TypeAlias");
						}
						flowParseOpaqueType(node, declare) {
							return this.expectContextual(130), node.id = this.flowParseRestrictedIdentifier(!0, !0), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.supertype = null, this.match(14) && (node.supertype = this.flowParseTypeInitialiser(14)), node.impltype = null, declare || (node.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(node, "OpaqueType");
						}
						flowParseTypeParameter(requireDefault = !1) {
							const nodeStartLoc = this.state.startLoc, node = this.startNode(), variance = this.flowParseVariance(), ident = this.flowParseTypeAnnotatableIdentifier();
							return node.name = ident.name, node.variance = variance, node.bound = ident.typeAnnotation, this.match(29) ? (this.eat(29), node.default = this.flowParseType()) : requireDefault && this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc), this.finishNode(node, "TypeParameter");
						}
						flowParseTypeParameterDeclaration() {
							const oldInType = this.state.inType, node = this.startNode();
							node.params = [], this.state.inType = !0, this.match(47) || this.match(143) ? this.next() : this.unexpected();
							let defaultRequired = !1;
							do {
								const typeParameter = this.flowParseTypeParameter(defaultRequired);
								node.params.push(typeParameter), typeParameter.default && (defaultRequired = !0), this.match(48) || this.expect(12);
							} while (!this.match(48));
							return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterDeclaration");
						}
						flowParseTypeParameterInstantiation() {
							const node = this.startNode(), oldInType = this.state.inType;
							node.params = [], this.state.inType = !0, this.expect(47);
							const oldNoAnonFunctionType = this.state.noAnonFunctionType;
							for (this.state.noAnonFunctionType = !1; !this.match(48);) node.params.push(this.flowParseType()), this.match(48) || this.expect(12);
							return this.state.noAnonFunctionType = oldNoAnonFunctionType, this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
						}
						flowParseTypeParameterInstantiationCallOrNew() {
							const node = this.startNode(), oldInType = this.state.inType;
							for (node.params = [], this.state.inType = !0, this.expect(47); !this.match(48);) node.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
							return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
						}
						flowParseInterfaceType() {
							const node = this.startNode();
							if (this.expectContextual(129), node.extends = [], this.eat(81)) do
								node.extends.push(this.flowParseInterfaceExtends());
							while (this.eat(12));
							return node.body = this.flowParseObjectType({
								allowStatic: !1,
								allowExact: !1,
								allowSpread: !1,
								allowProto: !1,
								allowInexact: !1
							}), this.finishNode(node, "InterfaceTypeAnnotation");
						}
						flowParseObjectPropertyKey() {
							return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(!0);
						}
						flowParseObjectTypeIndexer(node, isStatic, variance) {
							return node.static = isStatic, 14 === this.lookahead().type ? (node.id = this.flowParseObjectPropertyKey(), node.key = this.flowParseTypeInitialiser()) : (node.id = null, node.key = this.flowParseType()), this.expect(3), node.value = this.flowParseTypeInitialiser(), node.variance = variance, this.finishNode(node, "ObjectTypeIndexer");
						}
						flowParseObjectTypeInternalSlot(node, isStatic) {
							return node.static = isStatic, node.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (node.method = !0, node.optional = !1, node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start))) : (node.method = !1, this.eat(17) && (node.optional = !0), node.value = this.flowParseTypeInitialiser()), this.finishNode(node, "ObjectTypeInternalSlot");
						}
						flowParseObjectTypeMethodish(node) {
							for (node.params = [], node.rest = null, node.typeParameters = null, node.this = null, this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (node.this = this.flowParseFunctionTypeParam(!0), node.this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21);) node.params.push(this.flowParseFunctionTypeParam(!1)), this.match(11) || this.expect(12);
							return this.eat(21) && (node.rest = this.flowParseFunctionTypeParam(!1)), this.expect(11), node.returnType = this.flowParseTypeInitialiser(), this.finishNode(node, "FunctionTypeAnnotation");
						}
						flowParseObjectTypeCallProperty(node, isStatic) {
							const valueNode = this.startNode();
							return node.static = isStatic, node.value = this.flowParseObjectTypeMethodish(valueNode), this.finishNode(node, "ObjectTypeCallProperty");
						}
						flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
							const oldInType = this.state.inType;
							this.state.inType = !0;
							const nodeStart = this.startNode();
							let endDelim, exact;
							nodeStart.callProperties = [], nodeStart.properties = [], nodeStart.indexers = [], nodeStart.internalSlots = [];
							let inexact = !1;
							for (allowExact && this.match(6) ? (this.expect(6), endDelim = 9, exact = !0) : (this.expect(5), endDelim = 8, exact = !1), nodeStart.exact = exact; !this.match(endDelim);) {
								let isStatic = !1, protoStartLoc = null, inexactStartLoc = null;
								const node = this.startNode();
								if (allowProto && this.isContextual(118)) {
									const lookahead = this.lookahead();
									14 !== lookahead.type && 17 !== lookahead.type && (this.next(), protoStartLoc = this.state.startLoc, allowStatic = !1);
								}
								if (allowStatic && this.isContextual(106)) {
									const lookahead = this.lookahead();
									14 !== lookahead.type && 17 !== lookahead.type && (this.next(), isStatic = !0);
								}
								const variance = this.flowParseVariance();
								if (this.eat(0)) null != protoStartLoc && this.unexpected(protoStartLoc), this.eat(0) ? (variance && this.unexpected(variance.loc.start), nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic))) : nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
								else if (this.match(10) || this.match(47)) null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
								else {
									let kind = "init";
									if (this.isContextual(99) || this.isContextual(104)) tokenIsLiteralPropertyName(this.lookahead().type) && (kind = this.state.value, this.next());
									const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, null != allowInexact ? allowInexact : !exact);
									null === propOrInexact ? (inexact = !0, inexactStartLoc = this.state.lastTokStartLoc) : nodeStart.properties.push(propOrInexact);
								}
								this.flowObjectTypeSemicolon(), !inexactStartLoc || this.match(8) || this.match(9) || this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
							}
							this.expect(endDelim), allowSpread && (nodeStart.inexact = inexact);
							const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
							return this.state.inType = oldInType, out;
						}
						flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
							if (this.eat(21)) return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (allowSpread ? allowInexact || this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc) : this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc), variance && this.raise(FlowErrors.InexactVariance, variance), null) : (allowSpread || this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc), null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.raise(FlowErrors.SpreadVariance, variance), node.argument = this.flowParseType(), this.finishNode(node, "ObjectTypeSpreadProperty"));
							{
								node.key = this.flowParseObjectPropertyKey(), node.static = isStatic, node.proto = null != protoStartLoc, node.kind = kind;
								let optional = !1;
								return this.match(47) || this.match(10) ? (node.method = !0, null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start)), "get" !== kind && "set" !== kind || this.flowCheckGetterSetterParams(node), !allowSpread && "constructor" === node.key.name && node.value.this && this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this)) : ("init" !== kind && this.unexpected(), node.method = !1, this.eat(17) && (optional = !0), node.value = this.flowParseTypeInitialiser(), node.variance = variance), node.optional = optional, this.finishNode(node, "ObjectTypeProperty");
							}
						}
						flowCheckGetterSetterParams(property) {
							const paramCount = "get" === property.kind ? 0 : 1, length = property.value.params.length + (property.value.rest ? 1 : 0);
							property.value.this && this.raise("get" === property.kind ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this), length !== paramCount && this.raise("get" === property.kind ? Errors.BadGetterArity : Errors.BadSetterArity, property), "set" === property.kind && property.value.rest && this.raise(Errors.BadSetterRestParameter, property);
						}
						flowObjectTypeSemicolon() {
							this.eat(13) || this.eat(12) || this.match(8) || this.match(9) || this.unexpected();
						}
						flowParseQualifiedTypeIdentifier(startLoc, id) {
							startLoc ??= this.state.startLoc;
							let node = id || this.flowParseRestrictedIdentifier(!0);
							for (; this.eat(16);) {
								const node2 = this.startNodeAt(startLoc);
								node2.qualification = node, node2.id = this.flowParseRestrictedIdentifier(!0), node = this.finishNode(node2, "QualifiedTypeIdentifier");
							}
							return node;
						}
						flowParseGenericType(startLoc, id) {
							const node = this.startNodeAt(startLoc);
							return node.typeParameters = null, node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id), this.match(47) && (node.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(node, "GenericTypeAnnotation");
						}
						flowParseTypeofType() {
							const node = this.startNode();
							return this.expect(87), node.argument = this.flowParsePrimaryType(), this.finishNode(node, "TypeofTypeAnnotation");
						}
						flowParseTupleType() {
							const node = this.startNode();
							for (node.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (node.types.push(this.flowParseType()), !this.match(3));) this.expect(12);
							return this.expect(3), this.finishNode(node, "TupleTypeAnnotation");
						}
						flowParseFunctionTypeParam(first) {
							let name = null, optional = !1, typeAnnotation = null;
							const node = this.startNode(), lh = this.lookahead(), isThis = 78 === this.state.type;
							return 14 === lh.type || 17 === lh.type ? (isThis && !first && this.raise(FlowErrors.ThisParamMustBeFirst, node), name = this.parseIdentifier(isThis), this.eat(17) && (optional = !0, isThis && this.raise(FlowErrors.ThisParamMayNotBeOptional, node)), typeAnnotation = this.flowParseTypeInitialiser()) : typeAnnotation = this.flowParseType(), node.name = name, node.optional = optional, node.typeAnnotation = typeAnnotation, this.finishNode(node, "FunctionTypeParam");
						}
						reinterpretTypeAsFunctionTypeParam(type$1) {
							const node = this.startNodeAt(type$1.loc.start);
							return node.name = null, node.optional = !1, node.typeAnnotation = type$1, this.finishNode(node, "FunctionTypeParam");
						}
						flowParseFunctionTypeParams(params = []) {
							let rest = null, _this = null;
							for (this.match(78) && (_this = this.flowParseFunctionTypeParam(!0), _this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21);) params.push(this.flowParseFunctionTypeParam(!1)), this.match(11) || this.expect(12);
							return this.eat(21) && (rest = this.flowParseFunctionTypeParam(!1)), {
								params,
								rest,
								_this
							};
						}
						flowIdentToTypeAnnotation(startLoc, node, id) {
							switch (id.name) {
								case "any": return this.finishNode(node, "AnyTypeAnnotation");
								case "bool":
								case "boolean": return this.finishNode(node, "BooleanTypeAnnotation");
								case "mixed": return this.finishNode(node, "MixedTypeAnnotation");
								case "empty": return this.finishNode(node, "EmptyTypeAnnotation");
								case "number": return this.finishNode(node, "NumberTypeAnnotation");
								case "string": return this.finishNode(node, "StringTypeAnnotation");
								case "symbol": return this.finishNode(node, "SymbolTypeAnnotation");
								default: return this.checkNotUnderscore(id.name), this.flowParseGenericType(startLoc, id);
							}
						}
						flowParsePrimaryType() {
							const startLoc = this.state.startLoc, node = this.startNode();
							let tmp, type$1, isGroupedType = !1;
							const oldNoAnonFunctionType = this.state.noAnonFunctionType;
							switch (this.state.type) {
								case 5: return this.flowParseObjectType({
									allowStatic: !1,
									allowExact: !1,
									allowSpread: !0,
									allowProto: !1,
									allowInexact: !0
								});
								case 6: return this.flowParseObjectType({
									allowStatic: !1,
									allowExact: !0,
									allowSpread: !0,
									allowProto: !1,
									allowInexact: !1
								});
								case 0: return this.state.noAnonFunctionType = !1, type$1 = this.flowParseTupleType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, type$1;
								case 47: {
									const node$1 = this.startNode();
									return node$1.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), tmp = this.flowParseFunctionTypeParams(), node$1.params = tmp.params, node$1.rest = tmp.rest, node$1.this = tmp._this, this.expect(11), this.expect(19), node$1.returnType = this.flowParseType(), this.finishNode(node$1, "FunctionTypeAnnotation");
								}
								case 10: {
									const node$1 = this.startNode();
									if (this.next(), !this.match(11) && !this.match(21)) if (tokenIsIdentifier(this.state.type) || this.match(78)) {
										const token = this.lookahead().type;
										isGroupedType = 17 !== token && 14 !== token;
									} else isGroupedType = !0;
									if (isGroupedType) {
										if (this.state.noAnonFunctionType = !1, type$1 = this.flowParseType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && 19 === this.lookahead().type)) return this.expect(11), type$1;
										this.eat(12);
									}
									return tmp = type$1 ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type$1)]) : this.flowParseFunctionTypeParams(), node$1.params = tmp.params, node$1.rest = tmp.rest, node$1.this = tmp._this, this.expect(11), this.expect(19), node$1.returnType = this.flowParseType(), node$1.typeParameters = null, this.finishNode(node$1, "FunctionTypeAnnotation");
								}
								case 134: return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
								case 85:
								case 86: return node.value = this.match(85), this.next(), this.finishNode(node, "BooleanLiteralTypeAnnotation");
								case 53:
									if ("-" === this.state.value) {
										if (this.next(), this.match(135)) return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
										if (this.match(136)) return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
										throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
									}
									return void this.unexpected();
								case 135: return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
								case 136: return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
								case 88: return this.next(), this.finishNode(node, "VoidTypeAnnotation");
								case 84: return this.next(), this.finishNode(node, "NullLiteralTypeAnnotation");
								case 78: return this.next(), this.finishNode(node, "ThisTypeAnnotation");
								case 55: return this.next(), this.finishNode(node, "ExistsTypeAnnotation");
								case 87: return this.flowParseTypeofType();
								default:
									if (tokenIsKeyword(this.state.type)) {
										const label = tokenLabelName(this.state.type);
										return this.next(), super.createIdentifier(node, label);
									}
									if (tokenIsIdentifier(this.state.type)) return this.isContextual(129) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
							}
							this.unexpected();
						}
						flowParsePostfixType() {
							const startLoc = this.state.startLoc;
							let type$1 = this.flowParsePrimaryType(), seenOptionalIndexedAccess = !1;
							for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon();) {
								const node = this.startNodeAt(startLoc), optional = this.eat(18);
								seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional, this.expect(0), !optional && this.match(3) ? (node.elementType = type$1, this.next(), type$1 = this.finishNode(node, "ArrayTypeAnnotation")) : (node.objectType = type$1, node.indexType = this.flowParseType(), this.expect(3), seenOptionalIndexedAccess ? (node.optional = optional, type$1 = this.finishNode(node, "OptionalIndexedAccessType")) : type$1 = this.finishNode(node, "IndexedAccessType"));
							}
							return type$1;
						}
						flowParsePrefixType() {
							const node = this.startNode();
							return this.eat(17) ? (node.typeAnnotation = this.flowParsePrefixType(), this.finishNode(node, "NullableTypeAnnotation")) : this.flowParsePostfixType();
						}
						flowParseAnonFunctionWithoutParens() {
							const param = this.flowParsePrefixType();
							if (!this.state.noAnonFunctionType && this.eat(19)) {
								const node = this.startNodeAt(param.loc.start);
								return node.params = [this.reinterpretTypeAsFunctionTypeParam(param)], node.rest = null, node.this = null, node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
							}
							return param;
						}
						flowParseIntersectionType() {
							const node = this.startNode();
							this.eat(45);
							const type$1 = this.flowParseAnonFunctionWithoutParens();
							for (node.types = [type$1]; this.eat(45);) node.types.push(this.flowParseAnonFunctionWithoutParens());
							return 1 === node.types.length ? type$1 : this.finishNode(node, "IntersectionTypeAnnotation");
						}
						flowParseUnionType() {
							const node = this.startNode();
							this.eat(43);
							const type$1 = this.flowParseIntersectionType();
							for (node.types = [type$1]; this.eat(43);) node.types.push(this.flowParseIntersectionType());
							return 1 === node.types.length ? type$1 : this.finishNode(node, "UnionTypeAnnotation");
						}
						flowParseType() {
							const oldInType = this.state.inType;
							this.state.inType = !0;
							const type$1 = this.flowParseUnionType();
							return this.state.inType = oldInType, type$1;
						}
						flowParseTypeOrImplicitInstantiation() {
							if (132 === this.state.type && "_" === this.state.value) {
								const startLoc = this.state.startLoc, node = this.parseIdentifier();
								return this.flowParseGenericType(startLoc, node);
							}
							return this.flowParseType();
						}
						flowParseTypeAnnotation() {
							const node = this.startNode();
							return node.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(node, "TypeAnnotation");
						}
						flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
							const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
							return this.match(14) && (ident.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(ident)), ident;
						}
						typeCastToParameter(node) {
							return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
						}
						flowParseVariance() {
							let variance = null;
							return this.match(53) ? (variance = this.startNode(), "+" === this.state.value ? variance.kind = "plus" : variance.kind = "minus", this.next(), this.finishNode(variance, "Variance")) : variance;
						}
						parseFunctionBody(node, allowExpressionBody, isMethod = !1) {
							allowExpressionBody ? this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, !0, isMethod)) : super.parseFunctionBody(node, !1, isMethod);
						}
						parseFunctionBodyAndFinish(node, type$1, isMethod = !1) {
							if (this.match(14)) {
								const typeNode = this.startNode();
								[typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
							}
							return super.parseFunctionBodyAndFinish(node, type$1, isMethod);
						}
						parseStatementLike(flags) {
							if (this.state.strict && this.isContextual(129)) {
								if (tokenIsKeywordOrIdentifier(this.lookahead().type)) {
									const node = this.startNode();
									return this.next(), this.flowParseInterface(node);
								}
							} else if (this.isContextual(126)) {
								const node = this.startNode();
								return this.next(), this.flowParseEnumDeclaration(node);
							}
							const stmt = super.parseStatementLike(flags);
							return void 0 !== this.flowPragma || this.isValidDirective(stmt) || (this.flowPragma = null), stmt;
						}
						parseExpressionStatement(node, expr, decorators) {
							if ("Identifier" === expr.type) {
								if ("declare" === expr.name) {
									if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) return this.flowParseDeclare(node);
								} else if (tokenIsIdentifier(this.state.type)) {
									if ("interface" === expr.name) return this.flowParseInterface(node);
									if ("type" === expr.name) return this.flowParseTypeAlias(node);
									if ("opaque" === expr.name) return this.flowParseOpaqueType(node, !1);
								}
							}
							return super.parseExpressionStatement(node, expr, decorators);
						}
						shouldParseExportDeclaration() {
							const { type: type$1 } = this.state;
							return 126 === type$1 || tokenIsFlowInterfaceOrTypeOrOpaque(type$1) ? !this.state.containsEsc : super.shouldParseExportDeclaration();
						}
						isExportDefaultSpecifier() {
							const { type: type$1 } = this.state;
							return 126 === type$1 || tokenIsFlowInterfaceOrTypeOrOpaque(type$1) ? this.state.containsEsc : super.isExportDefaultSpecifier();
						}
						parseExportDefaultExpression() {
							if (this.isContextual(126)) {
								const node = this.startNode();
								return this.next(), this.flowParseEnumDeclaration(node);
							}
							return super.parseExportDefaultExpression();
						}
						parseConditional(expr, startLoc, refExpressionErrors) {
							if (!this.match(17)) return expr;
							if (this.state.maybeInArrowParameters) {
								const nextCh = this.lookaheadCharCode();
								if (44 === nextCh || 61 === nextCh || 58 === nextCh || 41 === nextCh) return this.setOptionalParametersError(refExpressionErrors), expr;
							}
							this.expect(17);
							const state = this.state.clone(), originalNoArrowAt = this.state.noArrowAt, node = this.startNodeAt(startLoc);
							let { consequent, failed } = this.tryParseConditionalConsequent(), [valid, invalid] = this.getArrowLikeExpressions(consequent);
							if (failed || invalid.length > 0) {
								const noArrowAt = [...originalNoArrowAt];
								if (invalid.length > 0) {
									this.state = state, this.state.noArrowAt = noArrowAt;
									for (let i = 0; i < invalid.length; i++) noArrowAt.push(invalid[i].start);
									({consequent, failed} = this.tryParseConditionalConsequent()), [valid, invalid] = this.getArrowLikeExpressions(consequent);
								}
								failed && valid.length > 1 && this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc), failed && 1 === valid.length && (this.state = state, noArrowAt.push(valid[0].start), this.state.noArrowAt = noArrowAt, {consequent, failed} = this.tryParseConditionalConsequent());
							}
							return this.getArrowLikeExpressions(consequent, !0), this.state.noArrowAt = originalNoArrowAt, this.expect(14), node.test = expr, node.consequent = consequent, node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(node, "ConditionalExpression");
						}
						tryParseConditionalConsequent() {
							this.state.noArrowParamsConversionAt.push(this.state.start);
							const consequent = this.parseMaybeAssignAllowIn(), failed = !this.match(14);
							return this.state.noArrowParamsConversionAt.pop(), {
								consequent,
								failed
							};
						}
						getArrowLikeExpressions(node, disallowInvalid) {
							const stack = [node], arrows = [];
							for (; 0 !== stack.length;) {
								const node$1 = stack.pop();
								"ArrowFunctionExpression" === node$1.type && "BlockStatement" !== node$1.body.type ? (node$1.typeParameters || !node$1.returnType ? this.finishArrowValidation(node$1) : arrows.push(node$1), stack.push(node$1.body)) : "ConditionalExpression" === node$1.type && (stack.push(node$1.consequent), stack.push(node$1.alternate));
							}
							return disallowInvalid ? (arrows.forEach((node$1) => this.finishArrowValidation(node$1)), [arrows, []]) : function(list, test) {
								const list1 = [], list2 = [];
								for (let i = 0; i < list.length; i++) (test(list[i], i, list) ? list1 : list2).push(list[i]);
								return [list1, list2];
							}(arrows, (node$1) => node$1.params.every((param) => this.isAssignable(param, !0)));
						}
						finishArrowValidation(node) {
							var _node$extra;
							this.toAssignableList(node.params, null == (_node$extra = node.extra) ? void 0 : _node$extra.trailingCommaLoc, !1), this.scope.enter(6), super.checkParams(node, !1, !0), this.scope.exit();
						}
						forwardNoArrowParamsConversionAt(node, parse$4) {
							let result;
							return this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start)) ? (this.state.noArrowParamsConversionAt.push(this.state.start), result = parse$4(), this.state.noArrowParamsConversionAt.pop()) : result = parse$4(), result;
						}
						parseParenItem(node, startLoc) {
							const newNode = super.parseParenItem(node, startLoc);
							if (this.eat(17) && (newNode.optional = !0, this.resetEndLocation(node)), this.match(14)) {
								const typeCastNode = this.startNodeAt(startLoc);
								return typeCastNode.expression = newNode, typeCastNode.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(typeCastNode, "TypeCastExpression");
							}
							return newNode;
						}
						assertModuleNodeAllowed(node) {
							"ImportDeclaration" === node.type && ("type" === node.importKind || "typeof" === node.importKind) || "ExportNamedDeclaration" === node.type && "type" === node.exportKind || "ExportAllDeclaration" === node.type && "type" === node.exportKind || super.assertModuleNodeAllowed(node);
						}
						parseExportDeclaration(node) {
							if (this.isContextual(130)) {
								node.exportKind = "type";
								const declarationNode = this.startNode();
								return this.next(), this.match(5) ? (node.specifiers = this.parseExportSpecifiers(!0), super.parseExportFrom(node), null) : this.flowParseTypeAlias(declarationNode);
							}
							if (this.isContextual(131)) {
								node.exportKind = "type";
								const declarationNode = this.startNode();
								return this.next(), this.flowParseOpaqueType(declarationNode, !1);
							}
							if (this.isContextual(129)) {
								node.exportKind = "type";
								const declarationNode = this.startNode();
								return this.next(), this.flowParseInterface(declarationNode);
							}
							if (this.isContextual(126)) {
								node.exportKind = "value";
								const declarationNode = this.startNode();
								return this.next(), this.flowParseEnumDeclaration(declarationNode);
							}
							return super.parseExportDeclaration(node);
						}
						eatExportStar(node) {
							return !!super.eatExportStar(node) || !(!this.isContextual(130) || 55 !== this.lookahead().type) && (node.exportKind = "type", this.next(), this.next(), !0);
						}
						maybeParseExportNamespaceSpecifier(node) {
							const { startLoc } = this.state, hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
							return hasNamespace && "type" === node.exportKind && this.unexpected(startLoc), hasNamespace;
						}
						parseClassId(node, isStatement, optionalId) {
							super.parseClassId(node, isStatement, optionalId), this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration());
						}
						parseClassMember(classBody, member, state) {
							const { startLoc } = this.state;
							if (this.isContextual(125)) {
								if (super.parseClassMemberFromModifier(classBody, member)) return;
								member.declare = !0;
							}
							super.parseClassMember(classBody, member, state), member.declare && ("ClassProperty" !== member.type && "ClassPrivateProperty" !== member.type && "PropertyDefinition" !== member.type ? this.raise(FlowErrors.DeclareClassElement, startLoc) : member.value && this.raise(FlowErrors.DeclareClassFieldInitializer, member.value));
						}
						isIterator(word) {
							return "iterator" === word || "asyncIterator" === word;
						}
						readIterator() {
							const word = super.readWord1(), fullWord = "@@" + word;
							this.isIterator(word) && this.state.inType || this.raise(Errors.InvalidIdentifier, this.state.curPosition(), { identifierName: fullWord }), this.finishToken(132, fullWord);
						}
						getTokenFromCode(code$1) {
							const next = this.input.charCodeAt(this.state.pos + 1);
							123 === code$1 && 124 === next ? this.finishOp(6, 2) : !this.state.inType || 62 !== code$1 && 60 !== code$1 ? this.state.inType && 63 === code$1 ? 46 === next ? this.finishOp(18, 2) : this.finishOp(17, 1) : !function(current, next$1, next2) {
								return 64 === current && 64 === next$1 && isIdentifierStart(next2);
							}(code$1, next, this.input.charCodeAt(this.state.pos + 2)) ? super.getTokenFromCode(code$1) : (this.state.pos += 2, this.readIterator()) : this.finishOp(62 === code$1 ? 48 : 47, 1);
						}
						isAssignable(node, isBinding) {
							return "TypeCastExpression" === node.type ? this.isAssignable(node.expression, isBinding) : super.isAssignable(node, isBinding);
						}
						toAssignable(node, isLHS = !1) {
							isLHS || "AssignmentExpression" !== node.type || "TypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left)), super.toAssignable(node, isLHS);
						}
						toAssignableList(exprList, trailingCommaLoc, isLHS) {
							for (let i = 0; i < exprList.length; i++) {
								const expr = exprList[i];
								"TypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
							}
							super.toAssignableList(exprList, trailingCommaLoc, isLHS);
						}
						toReferencedList(exprList, isParenthesizedExpr) {
							for (let i = 0; i < exprList.length; i++) {
								var _expr$extra;
								const expr = exprList[i];
								!expr || "TypeCastExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized || !(exprList.length > 1) && isParenthesizedExpr || this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
							}
							return exprList;
						}
						parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
							const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
							return canBePattern && !this.state.maybeInArrowParameters && this.toReferencedList(node.elements), node;
						}
						isValidLVal(type$1, isParenthesized, binding) {
							return "TypeCastExpression" === type$1 || super.isValidLVal(type$1, isParenthesized, binding);
						}
						parseClassProperty(node) {
							return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(node);
						}
						parseClassPrivateProperty(node) {
							return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(node);
						}
						isClassMethod() {
							return this.match(47) || super.isClassMethod();
						}
						isClassProperty() {
							return this.match(14) || super.isClassProperty();
						}
						isNonstaticConstructor(method) {
							return !this.match(14) && super.isNonstaticConstructor(method);
						}
						pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
							if (method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper), method.params && isConstructor) {
								const params = method.params;
								params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, method);
							} else if ("MethodDefinition" === method.type && isConstructor && method.value.params) {
								const params = method.value.params;
								params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, method);
							}
						}
						pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
							method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
						}
						parseClassSuper(node) {
							if (super.parseClassSuper(node), node.superClass && this.match(47) && (node.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(113)) {
								this.next();
								const implemented = node.implements = [];
								do {
									const node$1 = this.startNode();
									node$1.id = this.flowParseRestrictedIdentifier(!0), this.match(47) ? node$1.typeParameters = this.flowParseTypeParameterInstantiation() : node$1.typeParameters = null, implemented.push(this.finishNode(node$1, "ClassImplements"));
								} while (this.eat(12));
							}
						}
						checkGetterSetterParams(method) {
							super.checkGetterSetterParams(method);
							const params = this.getObjectOrClassMethodParams(method);
							if (params.length > 0) {
								const param = params[0];
								this.isThisParam(param) && "get" === method.kind ? this.raise(FlowErrors.GetterMayNotHaveThisParam, param) : this.isThisParam(param) && this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
							}
						}
						parsePropertyNamePrefixOperator(node) {
							node.variance = this.flowParseVariance();
						}
						parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
							let typeParameters;
							prop.variance && this.unexpected(prop.variance.loc.start), delete prop.variance, this.match(47) && !isAccessor && (typeParameters = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
							const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
							return typeParameters && ((result.value || result).typeParameters = typeParameters), result;
						}
						parseFunctionParamType(param) {
							return this.eat(17) && ("Identifier" !== param.type && this.raise(FlowErrors.PatternIsOptional, param), this.isThisParam(param) && this.raise(FlowErrors.ThisParamMayNotBeOptional, param), param.optional = !0), this.match(14) ? param.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(param) && this.raise(FlowErrors.ThisParamAnnotationRequired, param), this.match(29) && this.isThisParam(param) && this.raise(FlowErrors.ThisParamNoDefault, param), this.resetEndLocation(param), param;
						}
						parseMaybeDefault(startLoc, left) {
							const node = super.parseMaybeDefault(startLoc, left);
							return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation), node;
						}
						checkImportReflection(node) {
							super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
						}
						parseImportSpecifierLocal(node, specifier, type$1) {
							specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(!0, !0) : this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type$1));
						}
						isPotentialImportPhase(isExport) {
							if (super.isPotentialImportPhase(isExport)) return !0;
							if (this.isContextual(130)) {
								if (!isExport) return !0;
								const ch = this.lookaheadCharCode();
								return 123 === ch || 42 === ch;
							}
							return !isExport && this.isContextual(87);
						}
						applyImportPhase(node, isExport, phase, loc) {
							if (super.applyImportPhase(node, isExport, phase, loc), isExport) {
								if (!phase && this.match(65)) return;
								node.exportKind = "type" === phase ? phase : "value";
							} else "type" === phase && this.match(55) && this.unexpected(), node.importKind = "type" === phase || "typeof" === phase ? phase : "value";
						}
						parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
							const firstIdent = specifier.imported;
							let specifierTypeKind = null;
							"Identifier" === firstIdent.type && ("type" === firstIdent.name ? specifierTypeKind = "type" : "typeof" === firstIdent.name && (specifierTypeKind = "typeof"));
							let isBinding = !1;
							if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
								const as_ident = this.parseIdentifier(!0);
								null === specifierTypeKind || tokenIsKeywordOrIdentifier(this.state.type) ? (specifier.imported = firstIdent, specifier.importKind = null, specifier.local = this.parseIdentifier()) : (specifier.imported = as_ident, specifier.importKind = specifierTypeKind, specifier.local = cloneIdentifier(as_ident));
							} else {
								if (null !== specifierTypeKind && tokenIsKeywordOrIdentifier(this.state.type)) specifier.imported = this.parseIdentifier(!0), specifier.importKind = specifierTypeKind;
								else {
									if (importedIsString) throw this.raise(Errors.ImportBindingIsString, specifier, { importName: firstIdent.value });
									specifier.imported = firstIdent, specifier.importKind = null;
								}
								this.eatContextual(93) ? specifier.local = this.parseIdentifier() : (isBinding = !0, specifier.local = cloneIdentifier(specifier.imported));
							}
							const specifierIsTypeImport = hasTypeImportKind(specifier);
							return isInTypeOnlyImport && specifierIsTypeImport && this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier), (isInTypeOnlyImport || specifierIsTypeImport) && this.checkReservedType(specifier.local.name, specifier.local.loc.start, !0), !isBinding || isInTypeOnlyImport || specifierIsTypeImport || this.checkReservedWord(specifier.local.name, specifier.loc.start, !0, !0), this.finishImportSpecifier(specifier, "ImportSpecifier");
						}
						parseBindingAtom() {
							return 78 === this.state.type ? this.parseIdentifier(!0) : super.parseBindingAtom();
						}
						parseFunctionParams(node, isConstructor) {
							const kind = node.kind;
							"get" !== kind && "set" !== kind && this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(node, isConstructor);
						}
						parseVarId(decl, kind) {
							super.parseVarId(decl, kind), this.match(14) && (decl.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(decl.id));
						}
						parseAsyncArrowFromCallExpression(node, call) {
							if (this.match(14)) {
								const oldNoAnonFunctionType = this.state.noAnonFunctionType;
								this.state.noAnonFunctionType = !0, node.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = oldNoAnonFunctionType;
							}
							return super.parseAsyncArrowFromCallExpression(node, call);
						}
						shouldParseAsyncArrow() {
							return this.match(14) || super.shouldParseAsyncArrow();
						}
						parseMaybeAssign(refExpressionErrors, afterLeftParse) {
							var _jsx;
							let jsx, state = null;
							if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
								if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error) return jsx.node;
								const { context } = this.state, currentContext = context[context.length - 1];
								currentContext !== types$7.j_oTag && currentContext !== types$7.j_expr || context.pop();
							}
							if (null != (_jsx = jsx) && _jsx.error || this.match(47)) {
								var _jsx2, _jsx3;
								let typeParameters;
								state = state || this.state.clone();
								const arrow = this.tryParse((abort$1) => {
									var _arrowExpression$extr;
									typeParameters = this.flowParseTypeParameterDeclaration();
									const arrowExpression$1 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
										const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
										return this.resetStartLocationFromNode(result, typeParameters), result;
									});
									null != (_arrowExpression$extr = arrowExpression$1.extra) && _arrowExpression$extr.parenthesized && abort$1();
									const expr = this.maybeUnwrapTypeCastExpression(arrowExpression$1);
									return "ArrowFunctionExpression" !== expr.type && abort$1(), expr.typeParameters = typeParameters, this.resetStartLocationFromNode(expr, typeParameters), arrowExpression$1;
								}, state);
								let arrowExpression = null;
								if (arrow.node && "ArrowFunctionExpression" === this.maybeUnwrapTypeCastExpression(arrow.node).type) {
									if (!arrow.error && !arrow.aborted) return arrow.node.async && this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters), arrow.node;
									arrowExpression = arrow.node;
								}
								if (null != (_jsx2 = jsx) && _jsx2.node) return this.state = jsx.failState, jsx.node;
								if (arrowExpression) return this.state = arrow.failState, arrowExpression;
								if (null != (_jsx3 = jsx) && _jsx3.thrown) throw jsx.error;
								if (arrow.thrown) throw arrow.error;
								throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
							}
							return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
						}
						parseArrow(node) {
							if (this.match(14)) {
								const result = this.tryParse(() => {
									const oldNoAnonFunctionType = this.state.noAnonFunctionType;
									this.state.noAnonFunctionType = !0;
									const typeNode = this.startNode();
									return [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), typeNode;
								});
								if (result.thrown) return null;
								result.error && (this.state = result.failState), node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
							}
							return super.parseArrow(node);
						}
						shouldParseArrow(params) {
							return this.match(14) || super.shouldParseArrow(params);
						}
						setArrowFunctionParameters(node, params) {
							this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start)) ? node.params = params : super.setArrowFunctionParameters(node, params);
						}
						checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = !0) {
							if (!isArrowFunction || !this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {
								for (let i = 0; i < node.params.length; i++) this.isThisParam(node.params[i]) && i > 0 && this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);
								super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
							}
						}
						parseParenAndDistinguishExpression(canBeArrow) {
							return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));
						}
						parseSubscripts(base, startLoc, noCalls) {
							if ("Identifier" === base.type && "async" === base.name && this.state.noArrowAt.includes(startLoc.index)) {
								this.next();
								const node = this.startNodeAt(startLoc);
								node.callee = base, node.arguments = super.parseCallExpressionArguments(11), base = this.finishNode(node, "CallExpression");
							} else if ("Identifier" === base.type && "async" === base.name && this.match(47)) {
								const state = this.state.clone(), arrow = this.tryParse((abort$1) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort$1(), state);
								if (!arrow.error && !arrow.aborted) return arrow.node;
								const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
								if (result.node && !result.error) return result.node;
								if (arrow.node) return this.state = arrow.failState, arrow.node;
								if (result.node) return this.state = result.failState, result.node;
								throw arrow.error || result.error;
							}
							return super.parseSubscripts(base, startLoc, noCalls);
						}
						parseSubscript(base, startLoc, noCalls, subscriptState) {
							if (this.match(18) && this.isLookaheadToken_lt()) {
								if (subscriptState.optionalChainMember = !0, noCalls) return subscriptState.stop = !0, base;
								this.next();
								const node = this.startNodeAt(startLoc);
								return node.callee = base, node.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), node.arguments = this.parseCallExpressionArguments(11), node.optional = !0, this.finishCallExpression(node, !0);
							}
							if (!noCalls && this.shouldParseTypes() && this.match(47)) {
								const node = this.startNodeAt(startLoc);
								node.callee = base;
								const result = this.tryParse(() => (node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), node.arguments = super.parseCallExpressionArguments(11), subscriptState.optionalChainMember && (node.optional = !1), this.finishCallExpression(node, subscriptState.optionalChainMember)));
								if (result.node) return result.error && (this.state = result.failState), result.node;
							}
							return super.parseSubscript(base, startLoc, noCalls, subscriptState);
						}
						parseNewCallee(node) {
							super.parseNewCallee(node);
							let targs = null;
							this.shouldParseTypes() && this.match(47) && (targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), node.typeArguments = targs;
						}
						parseAsyncArrowWithTypeParameters(startLoc) {
							const node = this.startNodeAt(startLoc);
							if (this.parseFunctionParams(node, !1), this.parseArrow(node)) return super.parseArrowExpression(node, void 0, !0);
						}
						readToken_mult_modulo(code$1) {
							const next = this.input.charCodeAt(this.state.pos + 1);
							if (42 === code$1 && 47 === next && this.state.hasFlowComment) return this.state.hasFlowComment = !1, this.state.pos += 2, void this.nextToken();
							super.readToken_mult_modulo(code$1);
						}
						readToken_pipe_amp(code$1) {
							const next = this.input.charCodeAt(this.state.pos + 1);
							124 !== code$1 || 125 !== next ? super.readToken_pipe_amp(code$1) : this.finishOp(9, 2);
						}
						parseTopLevel(file, program) {
							const fileNode = super.parseTopLevel(file, program);
							return this.state.hasFlowComment && this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition()), fileNode;
						}
						skipBlockComment() {
							if (!this.hasPlugin("flowComments") || !this.skipFlowComment()) return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
							{
								if (this.state.hasFlowComment) throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
								this.hasFlowCommentCompletion();
								const commentSkip = this.skipFlowComment();
								commentSkip && (this.state.pos += commentSkip, this.state.hasFlowComment = !0);
							}
						}
						skipFlowComment() {
							const { pos } = this.state;
							let shiftToFirstNonWhiteSpace = 2;
							for (; [32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace));) shiftToFirstNonWhiteSpace++;
							const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos), ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
							return 58 === ch2 && 58 === ch3 ? shiftToFirstNonWhiteSpace + 2 : "flow-include" === this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) ? shiftToFirstNonWhiteSpace + 12 : 58 === ch2 && 58 !== ch3 && shiftToFirstNonWhiteSpace;
						}
						hasFlowCommentCompletion() {
							if (-1 === this.input.indexOf("*/", this.state.pos)) throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
						}
						flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
							this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {
								memberName,
								enumName
							});
						}
						flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
							return this.raise(enumContext.explicitType ? "symbol" === enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType : FlowErrors.EnumInvalidMemberInitializerUnknownType, loc, enumContext);
						}
						flowEnumErrorNumberMemberNotInitialized(loc, details) {
							this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
						}
						flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {
							this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);
						}
						flowEnumMemberInit() {
							const startLoc = this.state.startLoc, endOfInit = () => this.match(12) || this.match(8);
							switch (this.state.type) {
								case 135: {
									const literal = this.parseNumericLiteral(this.state.value);
									return endOfInit() ? {
										type: "number",
										loc: literal.loc.start,
										value: literal
									} : {
										type: "invalid",
										loc: startLoc
									};
								}
								case 134: {
									const literal = this.parseStringLiteral(this.state.value);
									return endOfInit() ? {
										type: "string",
										loc: literal.loc.start,
										value: literal
									} : {
										type: "invalid",
										loc: startLoc
									};
								}
								case 85:
								case 86: {
									const literal = this.parseBooleanLiteral(this.match(85));
									return endOfInit() ? {
										type: "boolean",
										loc: literal.loc.start,
										value: literal
									} : {
										type: "invalid",
										loc: startLoc
									};
								}
								default: return {
									type: "invalid",
									loc: startLoc
								};
							}
						}
						flowEnumMemberRaw() {
							const loc = this.state.startLoc;
							return {
								id: this.parseIdentifier(!0),
								init: this.eat(29) ? this.flowEnumMemberInit() : {
									type: "none",
									loc
								}
							};
						}
						flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
							const { explicitType } = context;
							null !== explicitType && explicitType !== expectedType && this.flowEnumErrorInvalidMemberInitializer(loc, context);
						}
						flowEnumMembers({ enumName, explicitType }) {
							const seenNames = new Set(), members = {
								booleanMembers: [],
								numberMembers: [],
								stringMembers: [],
								defaultedMembers: []
							};
							let hasUnknownMembers = !1;
							for (; !this.match(8);) {
								if (this.eat(21)) {
									hasUnknownMembers = !0;
									break;
								}
								const memberNode = this.startNode(), { id, init: init$1 } = this.flowEnumMemberRaw(), memberName = id.name;
								if ("" === memberName) continue;
								/^[a-z]/.test(memberName) && this.raise(FlowErrors.EnumInvalidMemberName, id, {
									memberName,
									suggestion: memberName[0].toUpperCase() + memberName.slice(1),
									enumName
								}), seenNames.has(memberName) && this.raise(FlowErrors.EnumDuplicateMemberName, id, {
									memberName,
									enumName
								}), seenNames.add(memberName);
								const context = {
									enumName,
									explicitType,
									memberName
								};
								switch (memberNode.id = id, init$1.type) {
									case "boolean":
										this.flowEnumCheckExplicitTypeMismatch(init$1.loc, context, "boolean"), memberNode.init = init$1.value, members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
										break;
									case "number":
										this.flowEnumCheckExplicitTypeMismatch(init$1.loc, context, "number"), memberNode.init = init$1.value, members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
										break;
									case "string":
										this.flowEnumCheckExplicitTypeMismatch(init$1.loc, context, "string"), memberNode.init = init$1.value, members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
										break;
									case "invalid": throw this.flowEnumErrorInvalidMemberInitializer(init$1.loc, context);
									case "none": switch (explicitType) {
										case "boolean":
											this.flowEnumErrorBooleanMemberNotInitialized(init$1.loc, context);
											break;
										case "number":
											this.flowEnumErrorNumberMemberNotInitialized(init$1.loc, context);
											break;
										default: members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
									}
								}
								this.match(8) || this.expect(12);
							}
							return {
								members,
								hasUnknownMembers
							};
						}
						flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
							if (0 === initializedMembers.length) return defaultedMembers;
							if (0 === defaultedMembers.length) return initializedMembers;
							if (defaultedMembers.length > initializedMembers.length) {
								for (const member of initializedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
								return defaultedMembers;
							}
							for (const member of defaultedMembers) this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
							return initializedMembers;
						}
						flowEnumParseExplicitType({ enumName }) {
							if (!this.eatContextual(102)) return null;
							if (!tokenIsIdentifier(this.state.type)) throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, { enumName });
							const { value: value$1 } = this.state;
							return this.next(), "boolean" !== value$1 && "number" !== value$1 && "string" !== value$1 && "symbol" !== value$1 && this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {
								enumName,
								invalidEnumType: value$1
							}), value$1;
						}
						flowEnumBody(node, id) {
							const enumName = id.name, nameLoc = id.loc.start, explicitType = this.flowEnumParseExplicitType({ enumName });
							this.expect(5);
							const { members, hasUnknownMembers } = this.flowEnumMembers({
								enumName,
								explicitType
							});
							switch (node.hasUnknownMembers = hasUnknownMembers, explicitType) {
								case "boolean": return node.explicitType = !0, node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
								case "number": return node.explicitType = !0, node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
								case "string": return node.explicitType = !0, node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
								case "symbol": return node.members = members.defaultedMembers, this.expect(8), this.finishNode(node, "EnumSymbolBody");
								default: {
									const empty = () => (node.members = [], this.expect(8), this.finishNode(node, "EnumStringBody"));
									node.explicitType = !1;
									const boolsLen = members.booleanMembers.length, numsLen = members.numberMembers.length, strsLen = members.stringMembers.length, defaultedLen = members.defaultedMembers.length;
									if (boolsLen || numsLen || strsLen || defaultedLen) {
										if (boolsLen || numsLen) {
											if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
												for (const member of members.defaultedMembers) this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
													enumName,
													memberName: member.id.name
												});
												return node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
											}
											if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
												for (const member of members.defaultedMembers) this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
													enumName,
													memberName: member.id.name
												});
												return node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
											}
											return this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, { enumName }), empty();
										}
										return node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
									}
									return empty();
								}
							}
						}
						flowParseEnumDeclaration(node) {
							const id = this.parseIdentifier();
							return node.id = id, node.body = this.flowEnumBody(this.startNode(), id), this.finishNode(node, "EnumDeclaration");
						}
						isLookaheadToken_lt() {
							const next = this.nextTokenStart();
							if (60 === this.input.charCodeAt(next)) {
								const afterNext = this.input.charCodeAt(next + 1);
								return 60 !== afterNext && 61 !== afterNext;
							}
							return !1;
						}
						maybeUnwrapTypeCastExpression(node) {
							return "TypeCastExpression" === node.type ? node.expression : node;
						}
					},
					typescript: (superClass) => class extends superClass {
						constructor(...args) {
							super(...args), this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
								allowedModifiers: ["in", "out"],
								disallowedModifiers: [
									"const",
									"public",
									"private",
									"protected",
									"readonly",
									"declare",
									"abstract",
									"override"
								],
								errorTemplate: TSErrors.InvalidModifierOnTypeParameter
							}), this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
								allowedModifiers: ["const"],
								disallowedModifiers: ["in", "out"],
								errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
							}), this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
								allowedModifiers: [
									"in",
									"out",
									"const"
								],
								disallowedModifiers: [
									"public",
									"private",
									"protected",
									"readonly",
									"declare",
									"abstract",
									"override"
								],
								errorTemplate: TSErrors.InvalidModifierOnTypeParameter
							});
						}
						getScopeHandler() {
							return TypeScriptScopeHandler;
						}
						tsIsIdentifier() {
							return tokenIsIdentifier(this.state.type);
						}
						tsTokenCanFollowModifier() {
							return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();
						}
						tsNextTokenOnSameLineAndCanFollowModifier() {
							return this.next(), !this.hasPrecedingLineBreak() && this.tsTokenCanFollowModifier();
						}
						tsNextTokenCanFollowModifier() {
							return this.match(106) ? (this.next(), this.tsTokenCanFollowModifier()) : this.tsNextTokenOnSameLineAndCanFollowModifier();
						}
						tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
							if (!tokenIsIdentifier(this.state.type) && 58 !== this.state.type && 75 !== this.state.type) return;
							const modifier = this.state.value;
							if (allowedModifiers.includes(modifier)) {
								if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) return;
								if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) return modifier;
							}
						}
						tsParseModifiers({ allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }, modified) {
							const enforceOrder = (loc, modifier, before, after) => {
								modifier === before && modified[after] && this.raise(TSErrors.InvalidModifiersOrder, loc, { orderedModifiers: [before, after] });
							}, incompatible = (loc, modifier, mod1, mod2) => {
								(modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) && this.raise(TSErrors.IncompatibleModifiers, loc, { modifiers: [mod1, mod2] });
							};
							for (;;) {
								const { startLoc } = this.state, modifier = this.tsParseModifier(allowedModifiers.concat(null != disallowedModifiers ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
								if (!modifier) break;
								tsIsAccessModifier(modifier) ? modified.accessibility ? this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, { modifier }) : (enforceOrder(startLoc, modifier, modifier, "override"), enforceOrder(startLoc, modifier, modifier, "static"), enforceOrder(startLoc, modifier, modifier, "readonly"), modified.accessibility = modifier) : tsIsVarianceAnnotations(modifier) ? (modified[modifier] && this.raise(TSErrors.DuplicateModifier, startLoc, { modifier }), modified[modifier] = !0, enforceOrder(startLoc, modifier, "in", "out")) : (hasOwnProperty.call(modified, modifier) ? this.raise(TSErrors.DuplicateModifier, startLoc, { modifier }) : (enforceOrder(startLoc, modifier, "static", "readonly"), enforceOrder(startLoc, modifier, "static", "override"), enforceOrder(startLoc, modifier, "override", "readonly"), enforceOrder(startLoc, modifier, "abstract", "override"), incompatible(startLoc, modifier, "declare", "override"), incompatible(startLoc, modifier, "static", "abstract")), modified[modifier] = !0), null != disallowedModifiers && disallowedModifiers.includes(modifier) && this.raise(errorTemplate, startLoc, { modifier });
							}
						}
						tsIsListTerminator(kind) {
							switch (kind) {
								case "EnumMembers":
								case "TypeMembers": return this.match(8);
								case "HeritageClauseElement": return this.match(5);
								case "TupleElementTypes": return this.match(3);
								case "TypeParametersOrArguments": return this.match(48);
							}
						}
						tsParseList(kind, parseElement) {
							const result = [];
							for (; !this.tsIsListTerminator(kind);) result.push(parseElement());
							return result;
						}
						tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
							return function(x$3) {
								if (null == x$3) throw new Error(`Unexpected ${x$3} value.`);
								return x$3;
							}(this.tsParseDelimitedListWorker(kind, parseElement, !0, refTrailingCommaPos));
						}
						tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
							const result = [];
							let trailingCommaPos = -1;
							for (; !this.tsIsListTerminator(kind);) {
								trailingCommaPos = -1;
								const element = parseElement();
								if (null == element) return;
								if (result.push(element), !this.eat(12)) {
									if (this.tsIsListTerminator(kind)) break;
									return void (expectSuccess && this.expect(12));
								}
								trailingCommaPos = this.state.lastTokStartLoc.index;
							}
							return refTrailingCommaPos && (refTrailingCommaPos.value = trailingCommaPos), result;
						}
						tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
							skipFirstToken || (bracket ? this.expect(0) : this.expect(47));
							const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
							return bracket ? this.expect(3) : this.expect(48), result;
						}
						tsParseImportType() {
							const node = this.startNode();
							return this.expect(83), this.expect(10), this.match(134) || this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc), node.argument = super.parseExprAtom(), this.eat(12) && !this.match(11) ? (node.options = super.parseMaybeAssignAllowIn(), this.eat(12)) : node.options = null, this.expect(11), this.eat(16) && (node.qualifier = this.tsParseEntityName()), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSImportType");
						}
						tsParseEntityName(allowReservedWords = !0) {
							let entity = this.parseIdentifier(allowReservedWords);
							for (; this.eat(16);) {
								const node = this.startNodeAtNode(entity);
								node.left = entity, node.right = this.parseIdentifier(allowReservedWords), entity = this.finishNode(node, "TSQualifiedName");
							}
							return entity;
						}
						tsParseTypeReference() {
							const node = this.startNode();
							return node.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeReference");
						}
						tsParseThisTypePredicate(lhs) {
							this.next();
							const node = this.startNodeAtNode(lhs);
							return node.parameterName = lhs, node.typeAnnotation = this.tsParseTypeAnnotation(!1), node.asserts = !1, this.finishNode(node, "TSTypePredicate");
						}
						tsParseThisTypeNode() {
							const node = this.startNode();
							return this.next(), this.finishNode(node, "TSThisType");
						}
						tsParseTypeQuery() {
							const node = this.startNode();
							return this.expect(87), this.match(83) ? node.exprName = this.tsParseImportType() : node.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeQuery");
						}
						tsParseTypeParameter(parseModifiers) {
							const node = this.startNode();
							return parseModifiers(node), node.name = this.tsParseTypeParameterName(), node.constraint = this.tsEatThenParseType(81), node.default = this.tsEatThenParseType(29), this.finishNode(node, "TSTypeParameter");
						}
						tsTryParseTypeParameters(parseModifiers) {
							if (this.match(47)) return this.tsParseTypeParameters(parseModifiers);
						}
						tsParseTypeParameters(parseModifiers) {
							const node = this.startNode();
							this.match(47) || this.match(143) ? this.next() : this.unexpected();
							const refTrailingCommaPos = { value: -1 };
							return node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), !1, !0, refTrailingCommaPos), 0 === node.params.length && this.raise(TSErrors.EmptyTypeParameters, node), -1 !== refTrailingCommaPos.value && this.addExtra(node, "trailingComma", refTrailingCommaPos.value), this.finishNode(node, "TSTypeParameterDeclaration");
						}
						tsFillSignature(returnToken, signature) {
							const returnTokenRequired = 19 === returnToken;
							signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), signature.parameters = this.tsParseBindingListForSignature(), (returnTokenRequired || this.match(returnToken)) && (signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken));
						}
						tsParseBindingListForSignature() {
							const list = super.parseBindingList(11, 41, 2);
							for (const pattern of list) {
								const { type: type$1 } = pattern;
								"AssignmentPattern" !== type$1 && "TSParameterProperty" !== type$1 || this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, { type: type$1 });
							}
							return list;
						}
						tsParseTypeMemberSemicolon() {
							this.eat(12) || this.isLineTerminator() || this.expect(13);
						}
						tsParseSignatureMember(kind, node) {
							return this.tsFillSignature(14, node), this.tsParseTypeMemberSemicolon(), this.finishNode(node, kind);
						}
						tsIsUnambiguouslyIndexSignature() {
							return this.next(), !!tokenIsIdentifier(this.state.type) && (this.next(), this.match(14));
						}
						tsTryParseIndexSignature(node) {
							if (!this.match(0) || !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))) return;
							this.expect(0);
							const id = this.parseIdentifier();
							id.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(id), this.expect(3), node.parameters = [id];
							const type$1 = this.tsTryParseTypeAnnotation();
							return type$1 && (node.typeAnnotation = type$1), this.tsParseTypeMemberSemicolon(), this.finishNode(node, "TSIndexSignature");
						}
						tsParsePropertyOrMethodSignature(node, readonly) {
							this.eat(17) && (node.optional = !0);
							const nodeAny = node;
							if (this.match(10) || this.match(47)) {
								readonly && this.raise(TSErrors.ReadonlyForMethodSignature, node);
								const method = nodeAny;
								method.kind && this.match(47) && this.raise(TSErrors.AccessorCannotHaveTypeParameters, this.state.curPosition()), this.tsFillSignature(14, method), this.tsParseTypeMemberSemicolon();
								const paramsKey = "parameters", returnTypeKey = "typeAnnotation";
								if ("get" === method.kind) method[paramsKey].length > 0 && (this.raise(Errors.BadGetterArity, this.state.curPosition()), this.isThisParam(method[paramsKey][0]) && this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition()));
								else if ("set" === method.kind) {
									if (1 !== method[paramsKey].length) this.raise(Errors.BadSetterArity, this.state.curPosition());
									else {
										const firstParameter = method[paramsKey][0];
										this.isThisParam(firstParameter) && this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition()), "Identifier" === firstParameter.type && firstParameter.optional && this.raise(TSErrors.SetAccessorCannotHaveOptionalParameter, this.state.curPosition()), "RestElement" === firstParameter.type && this.raise(TSErrors.SetAccessorCannotHaveRestParameter, this.state.curPosition());
									}
									method[returnTypeKey] && this.raise(TSErrors.SetAccessorCannotHaveReturnType, method[returnTypeKey]);
								} else method.kind = "method";
								return this.finishNode(method, "TSMethodSignature");
							}
							{
								const property = nodeAny;
								readonly && (property.readonly = !0);
								const type$1 = this.tsTryParseTypeAnnotation();
								return type$1 && (property.typeAnnotation = type$1), this.tsParseTypeMemberSemicolon(), this.finishNode(property, "TSPropertySignature");
							}
						}
						tsParseTypeMember() {
							const node = this.startNode();
							if (this.match(10) || this.match(47)) return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
							if (this.match(77)) {
								const id = this.startNode();
								return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", node) : (node.key = this.createIdentifier(id, "new"), this.tsParsePropertyOrMethodSignature(node, !1));
							}
							this.tsParseModifiers({
								allowedModifiers: ["readonly"],
								disallowedModifiers: [
									"declare",
									"abstract",
									"private",
									"protected",
									"public",
									"static",
									"override"
								]
							}, node);
							const idx = this.tsTryParseIndexSignature(node);
							return idx || (super.parsePropertyName(node), node.computed || "Identifier" !== node.key.type || "get" !== node.key.name && "set" !== node.key.name || !this.tsTokenCanFollowModifier() || (node.kind = node.key.name, super.parsePropertyName(node)), this.tsParsePropertyOrMethodSignature(node, !!node.readonly));
						}
						tsParseTypeLiteral() {
							const node = this.startNode();
							return node.members = this.tsParseObjectTypeMembers(), this.finishNode(node, "TSTypeLiteral");
						}
						tsParseObjectTypeMembers() {
							this.expect(5);
							const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
							return this.expect(8), members;
						}
						tsIsStartOfMappedType() {
							return this.next(), this.eat(53) ? this.isContextual(122) : (this.isContextual(122) && this.next(), !!this.match(0) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(58))));
						}
						tsParseMappedType() {
							const node = this.startNode();
							this.expect(5), this.match(53) ? (node.readonly = this.state.value, this.next(), this.expectContextual(122)) : this.eatContextual(122) && (node.readonly = !0), this.expect(0);
							{
								const typeParameter = this.startNode();
								typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsExpectThenParseType(58), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
							}
							return node.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (node.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (node.optional = !0), node.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(node, "TSMappedType");
						}
						tsParseTupleType() {
							const node = this.startNode();
							node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), !0, !1);
							let seenOptionalElement = !1;
							return node.elementTypes.forEach((elementNode) => {
								const { type: type$1 } = elementNode;
								!seenOptionalElement || "TSRestType" === type$1 || "TSOptionalType" === type$1 || "TSNamedTupleMember" === type$1 && elementNode.optional || this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode), seenOptionalElement || (seenOptionalElement = "TSNamedTupleMember" === type$1 && elementNode.optional || "TSOptionalType" === type$1);
							}), this.finishNode(node, "TSTupleType");
						}
						tsParseTupleElementType() {
							const { startLoc } = this.state, rest = this.eat(21);
							let labeled, label, optional, type$1;
							const chAfterWord = tokenIsKeywordOrIdentifier(this.state.type) ? this.lookaheadCharCode() : null;
							if (58 === chAfterWord) labeled = !0, optional = !1, label = this.parseIdentifier(!0), this.expect(14), type$1 = this.tsParseType();
							else if (63 === chAfterWord) {
								optional = !0;
								const startLoc$1 = this.state.startLoc, wordName = this.state.value, typeOrLabel = this.tsParseNonArrayType();
								58 === this.lookaheadCharCode() ? (labeled = !0, label = this.createIdentifier(this.startNodeAt(startLoc$1), wordName), this.expect(17), this.expect(14), type$1 = this.tsParseType()) : (labeled = !1, type$1 = typeOrLabel, this.expect(17));
							} else type$1 = this.tsParseType(), optional = this.eat(17), labeled = this.eat(14);
							if (labeled) {
								let labeledNode;
								label ? (labeledNode = this.startNodeAtNode(label), labeledNode.optional = optional, labeledNode.label = label, labeledNode.elementType = type$1, this.eat(17) && (labeledNode.optional = !0, this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc))) : (labeledNode = this.startNodeAtNode(type$1), labeledNode.optional = optional, this.raise(TSErrors.InvalidTupleMemberLabel, type$1), labeledNode.label = type$1, labeledNode.elementType = this.tsParseType()), type$1 = this.finishNode(labeledNode, "TSNamedTupleMember");
							} else if (optional) {
								const optionalTypeNode = this.startNodeAtNode(type$1);
								optionalTypeNode.typeAnnotation = type$1, type$1 = this.finishNode(optionalTypeNode, "TSOptionalType");
							}
							if (rest) {
								const restNode = this.startNodeAt(startLoc);
								restNode.typeAnnotation = type$1, type$1 = this.finishNode(restNode, "TSRestType");
							}
							return type$1;
						}
						tsParseParenthesizedType() {
							const node = this.startNode();
							return this.expect(10), node.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(node, "TSParenthesizedType");
						}
						tsParseFunctionOrConstructorType(type$1, abstract) {
							const node = this.startNode();
							return "TSConstructorType" === type$1 && (node.abstract = !!abstract, abstract && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node)), this.finishNode(node, type$1);
						}
						tsParseLiteralTypeNode() {
							const node = this.startNode();
							switch (this.state.type) {
								case 135:
								case 136:
								case 134:
								case 85:
								case 86:
									node.literal = super.parseExprAtom();
									break;
								default: this.unexpected();
							}
							return this.finishNode(node, "TSLiteralType");
						}
						tsParseTemplateLiteralType() {
							const node = this.startNode();
							return node.literal = super.parseTemplate(!1), this.finishNode(node, "TSLiteralType");
						}
						parseTemplateSubstitution() {
							return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
						}
						tsParseThisTypeOrThisTypePredicate() {
							const thisKeyword = this.tsParseThisTypeNode();
							return this.isContextual(116) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(thisKeyword) : thisKeyword;
						}
						tsParseNonArrayType() {
							switch (this.state.type) {
								case 134:
								case 135:
								case 136:
								case 85:
								case 86: return this.tsParseLiteralTypeNode();
								case 53:
									if ("-" === this.state.value) {
										const node = this.startNode(), nextToken = this.lookahead();
										return 135 !== nextToken.type && 136 !== nextToken.type && this.unexpected(), node.literal = this.parseMaybeUnary(), this.finishNode(node, "TSLiteralType");
									}
									break;
								case 78: return this.tsParseThisTypeOrThisTypePredicate();
								case 87: return this.tsParseTypeQuery();
								case 83: return this.tsParseImportType();
								case 5: return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
								case 0: return this.tsParseTupleType();
								case 10: return this.tsParseParenthesizedType();
								case 25:
								case 24: return this.tsParseTemplateLiteralType();
								default: {
									const { type: type$1 } = this.state;
									if (tokenIsIdentifier(type$1) || 88 === type$1 || 84 === type$1) {
										const nodeType = 88 === type$1 ? "TSVoidKeyword" : 84 === type$1 ? "TSNullKeyword" : function(value$1) {
											switch (value$1) {
												case "any": return "TSAnyKeyword";
												case "boolean": return "TSBooleanKeyword";
												case "bigint": return "TSBigIntKeyword";
												case "never": return "TSNeverKeyword";
												case "number": return "TSNumberKeyword";
												case "object": return "TSObjectKeyword";
												case "string": return "TSStringKeyword";
												case "symbol": return "TSSymbolKeyword";
												case "undefined": return "TSUndefinedKeyword";
												case "unknown": return "TSUnknownKeyword";
												default: return;
											}
										}(this.state.value);
										if (void 0 !== nodeType && 46 !== this.lookaheadCharCode()) {
											const node = this.startNode();
											return this.next(), this.finishNode(node, nodeType);
										}
										return this.tsParseTypeReference();
									}
								}
							}
							this.unexpected();
						}
						tsParseArrayTypeOrHigher() {
							let type$1 = this.tsParseNonArrayType();
							for (; !this.hasPrecedingLineBreak() && this.eat(0);) if (this.match(3)) {
								const node = this.startNodeAtNode(type$1);
								node.elementType = type$1, this.expect(3), type$1 = this.finishNode(node, "TSArrayType");
							} else {
								const node = this.startNodeAtNode(type$1);
								node.objectType = type$1, node.indexType = this.tsParseType(), this.expect(3), type$1 = this.finishNode(node, "TSIndexedAccessType");
							}
							return type$1;
						}
						tsParseTypeOperator() {
							const node = this.startNode(), operator = this.state.value;
							return this.next(), node.operator = operator, node.typeAnnotation = this.tsParseTypeOperatorOrHigher(), "readonly" === operator && this.tsCheckTypeAnnotationForReadOnly(node), this.finishNode(node, "TSTypeOperator");
						}
						tsCheckTypeAnnotationForReadOnly(node) {
							switch (node.typeAnnotation.type) {
								case "TSTupleType":
								case "TSArrayType": return;
								default: this.raise(TSErrors.UnexpectedReadonly, node);
							}
						}
						tsParseInferType() {
							const node = this.startNode();
							this.expectContextual(115);
							const typeParameter = this.startNode();
							return typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter"), this.finishNode(node, "TSInferType");
						}
						tsParseConstraintForInferType() {
							if (this.eat(81)) {
								const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
								if (this.state.inDisallowConditionalTypesContext || !this.match(17)) return constraint;
							}
						}
						tsParseTypeOperatorOrHigher() {
							var token;
							return (token = this.state.type) >= 121 && token <= 123 && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
						}
						tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
							const node = this.startNode(), hasLeadingOperator = this.eat(operator), types$8 = [];
							do
								types$8.push(parseConstituentType());
							while (this.eat(operator));
							return 1 !== types$8.length || hasLeadingOperator ? (node.types = types$8, this.finishNode(node, kind)) : types$8[0];
						}
						tsParseIntersectionTypeOrHigher() {
							return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
						}
						tsParseUnionTypeOrHigher() {
							return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
						}
						tsIsStartOfFunctionType() {
							return !!this.match(47) || this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
						}
						tsSkipParameterStart() {
							if (tokenIsIdentifier(this.state.type) || this.match(78)) return this.next(), !0;
							if (this.match(5)) {
								const { errors: errors$1 } = this.state, previousErrorCount = errors$1.length;
								try {
									return this.parseObjectLike(8, !0), errors$1.length === previousErrorCount;
								} catch (_unused) {
									return !1;
								}
							}
							if (this.match(0)) {
								this.next();
								const { errors: errors$1 } = this.state, previousErrorCount = errors$1.length;
								try {
									return super.parseBindingList(3, 93, 1), errors$1.length === previousErrorCount;
								} catch (_unused2) {
									return !1;
								}
							}
							return !1;
						}
						tsIsUnambiguouslyStartOfFunctionType() {
							if (this.next(), this.match(11) || this.match(21)) return !0;
							if (this.tsSkipParameterStart()) {
								if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) return !0;
								if (this.match(11) && (this.next(), this.match(19))) return !0;
							}
							return !1;
						}
						tsParseTypeOrTypePredicateAnnotation(returnToken) {
							return this.tsInType(() => {
								const t = this.startNode();
								this.expect(returnToken);
								const node = this.startNode(), asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
								if (asserts && this.match(78)) {
									let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
									return "TSThisType" === thisTypePredicate.type ? (node.parameterName = thisTypePredicate, node.asserts = !0, node.typeAnnotation = null, thisTypePredicate = this.finishNode(node, "TSTypePredicate")) : (this.resetStartLocationFromNode(thisTypePredicate, node), thisTypePredicate.asserts = !0), t.typeAnnotation = thisTypePredicate, this.finishNode(t, "TSTypeAnnotation");
								}
								const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
								if (!typePredicateVariable) return asserts ? (node.parameterName = this.parseIdentifier(), node.asserts = asserts, node.typeAnnotation = null, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(!1, t);
								const type$1 = this.tsParseTypeAnnotation(!1);
								return node.parameterName = typePredicateVariable, node.typeAnnotation = type$1, node.asserts = asserts, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation");
							});
						}
						tsTryParseTypeOrTypePredicateAnnotation() {
							if (this.match(14)) return this.tsParseTypeOrTypePredicateAnnotation(14);
						}
						tsTryParseTypeAnnotation() {
							if (this.match(14)) return this.tsParseTypeAnnotation();
						}
						tsTryParseType() {
							return this.tsEatThenParseType(14);
						}
						tsParseTypePredicatePrefix() {
							const id = this.parseIdentifier();
							if (this.isContextual(116) && !this.hasPrecedingLineBreak()) return this.next(), id;
						}
						tsParseTypePredicateAsserts() {
							if (109 !== this.state.type) return !1;
							const containsEsc = this.state.containsEsc;
							return this.next(), !(!tokenIsIdentifier(this.state.type) && !this.match(78)) && (containsEsc && this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, { reservedWord: "asserts" }), !0);
						}
						tsParseTypeAnnotation(eatColon = !0, t = this.startNode()) {
							return this.tsInType(() => {
								eatColon && this.expect(14), t.typeAnnotation = this.tsParseType();
							}), this.finishNode(t, "TSTypeAnnotation");
						}
						tsParseType() {
							assert$21(this.state.inType);
							const type$1 = this.tsParseNonConditionalType();
							if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) return type$1;
							const node = this.startNodeAtNode(type$1);
							return node.checkType = type$1, node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(node, "TSConditionalType");
						}
						isAbstractConstructorSignature() {
							return this.isContextual(124) && 77 === this.lookahead().type;
						}
						tsParseNonConditionalType() {
							return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", !0) : this.tsParseUnionTypeOrHigher();
						}
						tsParseTypeAssertion() {
							this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
							const node = this.startNode();
							return node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.expect(48), node.expression = this.parseMaybeUnary(), this.finishNode(node, "TSTypeAssertion");
						}
						tsParseHeritageClause(token) {
							const originalStartLoc = this.state.startLoc, delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
								const node = this.startNode();
								return node.expression = this.tsParseEntityName(), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSExpressionWithTypeArguments");
							});
							return delimitedList.length || this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, { token }), delimitedList;
						}
						tsParseInterfaceDeclaration(node, properties = {}) {
							if (this.hasFollowingLineBreak()) return null;
							this.expectContextual(129), properties.declare && (node.declare = !0), tokenIsIdentifier(this.state.type) ? (node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 130)) : (node.id = null, this.raise(TSErrors.MissingInterfaceName, this.state.startLoc)), node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers), this.eat(81) && (node.extends = this.tsParseHeritageClause("extends"));
							const body = this.startNode();
							return body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), node.body = this.finishNode(body, "TSInterfaceBody"), this.finishNode(node, "TSInterfaceDeclaration");
						}
						tsParseTypeAliasDeclaration(node) {
							return node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 2), node.typeAnnotation = this.tsInType(() => {
								if (node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers), this.expect(29), this.isContextual(114) && 16 !== this.lookahead().type) {
									const node$1 = this.startNode();
									return this.next(), this.finishNode(node$1, "TSIntrinsicKeyword");
								}
								return this.tsParseType();
							}), this.semicolon(), this.finishNode(node, "TSTypeAliasDeclaration");
						}
						tsInNoContext(cb) {
							const oldContext = this.state.context;
							this.state.context = [oldContext[0]];
							try {
								return cb();
							} finally {
								this.state.context = oldContext;
							}
						}
						tsInType(cb) {
							const oldInType = this.state.inType;
							this.state.inType = !0;
							try {
								return cb();
							} finally {
								this.state.inType = oldInType;
							}
						}
						tsInDisallowConditionalTypesContext(cb) {
							const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
							this.state.inDisallowConditionalTypesContext = !0;
							try {
								return cb();
							} finally {
								this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
							}
						}
						tsInAllowConditionalTypesContext(cb) {
							const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
							this.state.inDisallowConditionalTypesContext = !1;
							try {
								return cb();
							} finally {
								this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
							}
						}
						tsEatThenParseType(token) {
							if (this.match(token)) return this.tsNextThenParseType();
						}
						tsExpectThenParseType(token) {
							return this.tsInType(() => (this.expect(token), this.tsParseType()));
						}
						tsNextThenParseType() {
							return this.tsInType(() => (this.next(), this.tsParseType()));
						}
						tsParseEnumMember() {
							const node = this.startNode();
							return node.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(!0), this.eat(29) && (node.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(node, "TSEnumMember");
						}
						tsParseEnumDeclaration(node, properties = {}) {
							return properties.const && (node.const = !0), properties.declare && (node.declare = !0), this.expectContextual(126), node.id = this.parseIdentifier(), this.checkIdentifier(node.id, node.const ? 8971 : 8459), this.expect(5), node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(node, "TSEnumDeclaration");
						}
						tsParseModuleBlock() {
							const node = this.startNode();
							return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(node.body = [], void 0, !0, 8), this.scope.exit(), this.finishNode(node, "TSModuleBlock");
						}
						tsParseModuleOrNamespaceDeclaration(node, nested = !1) {
							if (node.id = this.parseIdentifier(), nested || this.checkIdentifier(node.id, 1024), this.eat(16)) {
								const inner = this.startNode();
								this.tsParseModuleOrNamespaceDeclaration(inner, !0), node.body = inner;
							} else this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
							return this.finishNode(node, "TSModuleDeclaration");
						}
						tsParseAmbientExternalModuleDeclaration(node) {
							return this.isContextual(112) ? (node.kind = "global", node.global = !0, node.id = this.parseIdentifier()) : this.match(134) ? (node.kind = "module", node.id = super.parseStringLiteral(this.state.value)) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(node, "TSModuleDeclaration");
						}
						tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
							node.isExport = isExport || !1, node.id = maybeDefaultIdentifier || this.parseIdentifier(), this.checkIdentifier(node.id, 4096), this.expect(29);
							const moduleReference = this.tsParseModuleReference();
							return "type" === node.importKind && "TSExternalModuleReference" !== moduleReference.type && this.raise(TSErrors.ImportAliasHasImportType, moduleReference), node.moduleReference = moduleReference, this.semicolon(), this.finishNode(node, "TSImportEqualsDeclaration");
						}
						tsIsExternalModuleReference() {
							return this.isContextual(119) && 40 === this.lookaheadCharCode();
						}
						tsParseModuleReference() {
							return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(!1);
						}
						tsParseExternalModuleReference() {
							const node = this.startNode();
							return this.expectContextual(119), this.expect(10), this.match(134) || this.unexpected(), node.expression = super.parseExprAtom(), this.expect(11), this.sawUnambiguousESM = !0, this.finishNode(node, "TSExternalModuleReference");
						}
						tsLookAhead(f) {
							const state = this.state.clone(), res = f();
							return this.state = state, res;
						}
						tsTryParseAndCatch(f) {
							const result = this.tryParse((abort$1) => f() || abort$1());
							if (!result.aborted && result.node) return result.error && (this.state = result.failState), result.node;
						}
						tsTryParse(f) {
							const state = this.state.clone(), result = f();
							if (void 0 !== result && !1 !== result) return result;
							this.state = state;
						}
						tsTryParseDeclare(nany) {
							if (this.isLineTerminator()) return;
							let kind, startType = this.state.type;
							return this.isContextual(100) && (startType = 74, kind = "let"), this.tsInAmbientContext(() => {
								switch (startType) {
									case 68: return nany.declare = !0, super.parseFunctionStatement(nany, !1, !1);
									case 80: return nany.declare = !0, this.parseClass(nany, !0, !1);
									case 126: return this.tsParseEnumDeclaration(nany, { declare: !0 });
									case 112: return this.tsParseAmbientExternalModuleDeclaration(nany);
									case 75:
									case 74: return this.match(75) && this.isLookaheadContextual("enum") ? (this.expect(75), this.tsParseEnumDeclaration(nany, {
										const: !0,
										declare: !0
									})) : (nany.declare = !0, this.parseVarStatement(nany, kind || this.state.value, !0));
									case 129: {
										const result = this.tsParseInterfaceDeclaration(nany, { declare: !0 });
										if (result) return result;
									}
									default: if (tokenIsIdentifier(startType)) return this.tsParseDeclaration(nany, this.state.value, !0, null);
								}
							});
						}
						tsTryParseExportDeclaration() {
							return this.tsParseDeclaration(this.startNode(), this.state.value, !0, null);
						}
						tsParseExpressionStatement(node, expr, decorators) {
							switch (expr.name) {
								case "declare": {
									const declaration = this.tsTryParseDeclare(node);
									return declaration && (declaration.declare = !0), declaration;
								}
								case "global":
									if (this.match(5)) {
										this.scope.enter(256), this.prodParam.enter(0);
										const mod = node;
										return mod.kind = "global", node.global = !0, mod.id = expr, mod.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(mod, "TSModuleDeclaration");
									}
									break;
								default: return this.tsParseDeclaration(node, expr.name, !1, decorators);
							}
						}
						tsParseDeclaration(node, value$1, next, decorators) {
							switch (value$1) {
								case "abstract":
									if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) return this.tsParseAbstractDeclaration(node, decorators);
									break;
								case "module":
									if (this.tsCheckLineTerminator(next)) {
										if (this.match(134)) return this.tsParseAmbientExternalModuleDeclaration(node);
										if (tokenIsIdentifier(this.state.type)) return node.kind = "module", this.tsParseModuleOrNamespaceDeclaration(node);
									}
									break;
								case "namespace":
									if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) return node.kind = "namespace", this.tsParseModuleOrNamespaceDeclaration(node);
									break;
								case "type": if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) return this.tsParseTypeAliasDeclaration(node);
							}
						}
						tsCheckLineTerminator(next) {
							return next ? !this.hasFollowingLineBreak() && (this.next(), !0) : !this.isLineTerminator();
						}
						tsTryParseGenericAsyncArrowFunction(startLoc) {
							if (!this.match(47)) return;
							const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
							this.state.maybeInArrowParameters = !0;
							const res = this.tsTryParseAndCatch(() => {
								const node = this.startNodeAt(startLoc);
								return node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier), super.parseFunctionParams(node), node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), node;
							});
							return this.state.maybeInArrowParameters = oldMaybeInArrowParameters, res ? super.parseArrowExpression(res, null, !0) : void 0;
						}
						tsParseTypeArgumentsInExpression() {
							if (47 === this.reScan_lt()) return this.tsParseTypeArguments();
						}
						tsParseTypeArguments() {
							const node = this.startNode();
							return node.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), 0 === node.params.length ? this.raise(TSErrors.EmptyTypeArguments, node) : this.state.inType || this.curContext() !== types$7.brace || this.reScan_lt_gt(), this.expect(48), this.finishNode(node, "TSTypeParameterInstantiation");
						}
						tsIsDeclarationStart() {
							return (token = this.state.type) >= 124 && token <= 130;
							var token;
						}
						isExportDefaultSpecifier() {
							return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
						}
						parseAssignableListItem(flags, decorators) {
							const startLoc = this.state.startLoc, modified = {};
							this.tsParseModifiers({ allowedModifiers: [
								"public",
								"private",
								"protected",
								"override",
								"readonly"
							] }, modified);
							const accessibility = modified.accessibility, override = modified.override, readonly = modified.readonly;
							4 & flags || !(accessibility || readonly || override) || this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
							const left = this.parseMaybeDefault();
							2 & flags && this.parseFunctionParamType(left);
							const elt = this.parseMaybeDefault(left.loc.start, left);
							if (accessibility || readonly || override) {
								const pp = this.startNodeAt(startLoc);
								return decorators.length && (pp.decorators = decorators), accessibility && (pp.accessibility = accessibility), readonly && (pp.readonly = readonly), override && (pp.override = override), "Identifier" !== elt.type && "AssignmentPattern" !== elt.type && this.raise(TSErrors.UnsupportedParameterPropertyKind, pp), pp.parameter = elt, this.finishNode(pp, "TSParameterProperty");
							}
							return decorators.length && (left.decorators = decorators), elt;
						}
						isSimpleParameter(node) {
							return "TSParameterProperty" === node.type && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
						}
						tsDisallowOptionalPattern(node) {
							for (const param of node.params) "Identifier" !== param.type && param.optional && !this.state.isAmbientContext && this.raise(TSErrors.PatternIsOptional, param);
						}
						setArrowFunctionParameters(node, params, trailingCommaLoc) {
							super.setArrowFunctionParameters(node, params, trailingCommaLoc), this.tsDisallowOptionalPattern(node);
						}
						parseFunctionBodyAndFinish(node, type$1, isMethod = !1) {
							this.match(14) && (node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
							const bodilessType = "FunctionDeclaration" === type$1 ? "TSDeclareFunction" : "ClassMethod" === type$1 || "ClassPrivateMethod" === type$1 ? "TSDeclareMethod" : void 0;
							return bodilessType && !this.match(5) && this.isLineTerminator() ? this.finishNode(node, bodilessType) : "TSDeclareFunction" === bodilessType && this.state.isAmbientContext && (this.raise(TSErrors.DeclareFunctionHasImplementation, node), node.declare) ? super.parseFunctionBodyAndFinish(node, bodilessType, isMethod) : (this.tsDisallowOptionalPattern(node), super.parseFunctionBodyAndFinish(node, type$1, isMethod));
						}
						registerFunctionStatementId(node) {
							!node.body && node.id ? this.checkIdentifier(node.id, 1024) : super.registerFunctionStatementId(node);
						}
						tsCheckForInvalidTypeCasts(items) {
							items.forEach((node) => {
								"TSTypeCastExpression" === (null == node ? void 0 : node.type) && this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);
							});
						}
						toReferencedList(exprList, isInParens) {
							return this.tsCheckForInvalidTypeCasts(exprList), exprList;
						}
						parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
							const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
							return "ArrayExpression" === node.type && this.tsCheckForInvalidTypeCasts(node.elements), node;
						}
						parseSubscript(base, startLoc, noCalls, state) {
							if (!this.hasPrecedingLineBreak() && this.match(35)) {
								this.state.canStartJSXElement = !1, this.next();
								const nonNullExpression = this.startNodeAt(startLoc);
								return nonNullExpression.expression = base, this.finishNode(nonNullExpression, "TSNonNullExpression");
							}
							let isOptionalCall = !1;
							if (this.match(18) && 60 === this.lookaheadCharCode()) {
								if (noCalls) return state.stop = !0, base;
								state.optionalChainMember = isOptionalCall = !0, this.next();
							}
							if (this.match(47) || this.match(51)) {
								let missingParenErrorLoc;
								const result = this.tsTryParseAndCatch(() => {
									if (!noCalls && this.atPossibleAsyncArrow(base)) {
										const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
										if (asyncArrowFn) return asyncArrowFn;
									}
									const typeArguments = this.tsParseTypeArgumentsInExpression();
									if (!typeArguments) return;
									if (isOptionalCall && !this.match(10)) return void (missingParenErrorLoc = this.state.curPosition());
									if (tokenIsTemplate(this.state.type)) {
										const result$1 = super.parseTaggedTemplateExpression(base, startLoc, state);
										return result$1.typeParameters = typeArguments, result$1;
									}
									if (!noCalls && this.eat(10)) {
										const node$1 = this.startNodeAt(startLoc);
										return node$1.callee = base, node$1.arguments = this.parseCallExpressionArguments(11), this.tsCheckForInvalidTypeCasts(node$1.arguments), node$1.typeParameters = typeArguments, state.optionalChainMember && (node$1.optional = isOptionalCall), this.finishCallExpression(node$1, state.optionalChainMember);
									}
									const tokenType = this.state.type;
									if (48 === tokenType || 52 === tokenType || 10 !== tokenType && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) return;
									const node = this.startNodeAt(startLoc);
									return node.expression = base, node.typeParameters = typeArguments, this.finishNode(node, "TSInstantiationExpression");
								});
								if (missingParenErrorLoc && this.unexpected(missingParenErrorLoc, 10), result) return "TSInstantiationExpression" === result.type && (this.match(16) || this.match(18) && 40 !== this.lookaheadCharCode()) && this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc), result;
							}
							return super.parseSubscript(base, startLoc, noCalls, state);
						}
						parseNewCallee(node) {
							var _callee$extra;
							super.parseNewCallee(node);
							const { callee } = node;
							"TSInstantiationExpression" !== callee.type || null != (_callee$extra = callee.extra) && _callee$extra.parenthesized || (node.typeParameters = callee.typeParameters, node.callee = callee.expression);
						}
						parseExprOp(left, leftStartLoc, minPrec) {
							let isSatisfies;
							if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
								const node = this.startNodeAt(leftStartLoc);
								return node.expression = left, node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (isSatisfies && this.raise(Errors.UnexpectedKeyword, this.state.startLoc, { keyword: "const" }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(node, leftStartLoc, minPrec);
							}
							return super.parseExprOp(left, leftStartLoc, minPrec);
						}
						checkReservedWord(word, startLoc, checkKeywords, isBinding) {
							this.state.isAmbientContext || super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
						}
						checkImportReflection(node) {
							super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
						}
						checkDuplicateExports() {}
						isPotentialImportPhase(isExport) {
							if (super.isPotentialImportPhase(isExport)) return !0;
							if (this.isContextual(130)) {
								const ch = this.lookaheadCharCode();
								return isExport ? 123 === ch || 42 === ch : 61 !== ch;
							}
							return !isExport && this.isContextual(87);
						}
						applyImportPhase(node, isExport, phase, loc) {
							super.applyImportPhase(node, isExport, phase, loc), isExport ? node.exportKind = "type" === phase ? "type" : "value" : node.importKind = "type" === phase || "typeof" === phase ? phase : "value";
						}
						parseImport(node) {
							if (this.match(134)) return node.importKind = "value", super.parseImport(node);
							let importNode;
							if (tokenIsIdentifier(this.state.type) && 61 === this.lookaheadCharCode()) return node.importKind = "value", this.tsParseImportEqualsDeclaration(node);
							if (this.isContextual(130)) {
								const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, !1);
								if (61 === this.lookaheadCharCode()) return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
								importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
							} else importNode = super.parseImport(node);
							return "type" === importNode.importKind && importNode.specifiers.length > 1 && "ImportDefaultSpecifier" === importNode.specifiers[0].type && this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode), importNode;
						}
						parseExport(node, decorators) {
							if (this.match(83)) {
								this.next();
								const nodeImportEquals = node;
								let maybeDefaultIdentifier = null;
								return this.isContextual(130) && this.isPotentialImportPhase(!1) ? maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, !1) : nodeImportEquals.importKind = "value", this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, !0);
							}
							if (this.eat(29)) {
								const assign = node;
								return assign.expression = super.parseExpression(), this.semicolon(), this.sawUnambiguousESM = !0, this.finishNode(assign, "TSExportAssignment");
							}
							if (this.eatContextual(93)) {
								const decl = node;
								return this.expectContextual(128), decl.id = this.parseIdentifier(), this.semicolon(), this.finishNode(decl, "TSNamespaceExportDeclaration");
							}
							return super.parseExport(node, decorators);
						}
						isAbstractClass() {
							return this.isContextual(124) && 80 === this.lookahead().type;
						}
						parseExportDefaultExpression() {
							if (this.isAbstractClass()) {
								const cls = this.startNode();
								return this.next(), cls.abstract = !0, this.parseClass(cls, !0, !0);
							}
							if (this.match(129)) {
								const result = this.tsParseInterfaceDeclaration(this.startNode());
								if (result) return result;
							}
							return super.parseExportDefaultExpression();
						}
						parseVarStatement(node, kind, allowMissingInitializer = !1) {
							const { isAmbientContext } = this.state, declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
							if (!isAmbientContext) return declaration;
							for (const { id, init: init$1 } of declaration.declarations) init$1 && ("const" !== kind || id.typeAnnotation ? this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init$1) : isValidAmbientConstInitializer(init$1, this.hasPlugin("estree")) || this.raise(TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, init$1));
							return declaration;
						}
						parseStatementContent(flags, decorators) {
							if (this.match(75) && this.isLookaheadContextual("enum")) {
								const node = this.startNode();
								return this.expect(75), this.tsParseEnumDeclaration(node, { const: !0 });
							}
							if (this.isContextual(126)) return this.tsParseEnumDeclaration(this.startNode());
							if (this.isContextual(129)) {
								const result = this.tsParseInterfaceDeclaration(this.startNode());
								if (result) return result;
							}
							return super.parseStatementContent(flags, decorators);
						}
						parseAccessModifier() {
							return this.tsParseModifier([
								"public",
								"protected",
								"private"
							]);
						}
						tsHasSomeModifiers(member, modifiers) {
							return modifiers.some((modifier) => tsIsAccessModifier(modifier) ? member.accessibility === modifier : !!member[modifier]);
						}
						tsIsStartOfStaticBlocks() {
							return this.isContextual(106) && 123 === this.lookaheadCharCode();
						}
						parseClassMember(classBody, member, state) {
							const modifiers = [
								"declare",
								"private",
								"public",
								"protected",
								"override",
								"abstract",
								"readonly",
								"static"
							];
							this.tsParseModifiers({
								allowedModifiers: modifiers,
								disallowedModifiers: ["in", "out"],
								stopOnStartOfClassStaticBlock: !0,
								errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
							}, member);
							const callParseClassMemberWithIsStatic = () => {
								this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(member, modifiers) && this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition()), super.parseClassStaticBlock(classBody, member)) : this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
							};
							member.declare ? this.tsInAmbientContext(callParseClassMemberWithIsStatic) : callParseClassMemberWithIsStatic();
						}
						parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
							const idx = this.tsTryParseIndexSignature(member);
							if (idx) return classBody.body.push(idx), member.abstract && this.raise(TSErrors.IndexSignatureHasAbstract, member), member.accessibility && this.raise(TSErrors.IndexSignatureHasAccessibility, member, { modifier: member.accessibility }), member.declare && this.raise(TSErrors.IndexSignatureHasDeclare, member), void (member.override && this.raise(TSErrors.IndexSignatureHasOverride, member));
							!this.state.inAbstractClass && member.abstract && this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member), member.override && (state.hadSuperClass || this.raise(TSErrors.OverrideNotInSubClass, member)), super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
						}
						parsePostMemberNameModifiers(methodOrProp) {
							this.eat(17) && (methodOrProp.optional = !0), methodOrProp.readonly && this.match(10) && this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp), methodOrProp.declare && this.match(10) && this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
						}
						parseExpressionStatement(node, expr, decorators) {
							return ("Identifier" === expr.type ? this.tsParseExpressionStatement(node, expr, decorators) : void 0) || super.parseExpressionStatement(node, expr, decorators);
						}
						shouldParseExportDeclaration() {
							return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
						}
						parseConditional(expr, startLoc, refExpressionErrors) {
							if (!this.state.maybeInArrowParameters || !this.match(17)) return super.parseConditional(expr, startLoc, refExpressionErrors);
							const result = this.tryParse(() => super.parseConditional(expr, startLoc));
							return result.node ? (result.error && (this.state = result.failState), result.node) : (result.error && super.setOptionalParametersError(refExpressionErrors, result.error), expr);
						}
						parseParenItem(node, startLoc) {
							const newNode = super.parseParenItem(node, startLoc);
							if (this.eat(17) && (newNode.optional = !0, this.resetEndLocation(node)), this.match(14)) {
								const typeCastNode = this.startNodeAt(startLoc);
								return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(typeCastNode, "TSTypeCastExpression");
							}
							return node;
						}
						parseExportDeclaration(node) {
							if (!this.state.isAmbientContext && this.isContextual(125)) return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
							const startLoc = this.state.startLoc, isDeclare = this.eatContextual(125);
							if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
							const declaration = tokenIsIdentifier(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
							return declaration ? (("TSInterfaceDeclaration" === declaration.type || "TSTypeAliasDeclaration" === declaration.type || isDeclare) && (node.exportKind = "type"), isDeclare && (this.resetStartLocation(declaration, startLoc), declaration.declare = !0), declaration) : null;
						}
						parseClassId(node, isStatement, optionalId, bindingType) {
							if ((!isStatement || optionalId) && this.isContextual(113)) return;
							super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
							const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
							typeParameters && (node.typeParameters = typeParameters);
						}
						parseClassPropertyAnnotation(node) {
							node.optional || (this.eat(35) ? node.definite = !0 : this.eat(17) && (node.optional = !0));
							const type$1 = this.tsTryParseTypeAnnotation();
							type$1 && (node.typeAnnotation = type$1);
						}
						parseClassProperty(node) {
							if (this.parseClassPropertyAnnotation(node), this.state.isAmbientContext && (!node.readonly || node.typeAnnotation) && this.match(29) && this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc), node.abstract && this.match(29)) {
								const { key } = node;
								this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, { propertyName: "Identifier" !== key.type || node.computed ? `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` : key.name });
							}
							return super.parseClassProperty(node);
						}
						parseClassPrivateProperty(node) {
							return node.abstract && this.raise(TSErrors.PrivateElementHasAbstract, node), node.accessibility && this.raise(TSErrors.PrivateElementHasAccessibility, node, { modifier: node.accessibility }), this.parseClassPropertyAnnotation(node), super.parseClassPrivateProperty(node);
						}
						parseClassAccessorProperty(node) {
							return this.parseClassPropertyAnnotation(node), node.optional && this.raise(TSErrors.AccessorCannotBeOptional, node), super.parseClassAccessorProperty(node);
						}
						pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
							const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
							typeParameters && isConstructor && this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
							const { declare = !1, kind } = method;
							!declare || "get" !== kind && "set" !== kind || this.raise(TSErrors.DeclareAccessor, method, { kind }), typeParameters && (method.typeParameters = typeParameters), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
						}
						pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
							const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
							typeParameters && (method.typeParameters = typeParameters), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
						}
						declareClassPrivateMethodInScope(node, kind) {
							"TSDeclareMethod" !== node.type && ("MethodDefinition" !== node.type || hasOwnProperty.call(node.value, "body")) && super.declareClassPrivateMethodInScope(node, kind);
						}
						parseClassSuper(node) {
							super.parseClassSuper(node), node.superClass && (this.match(47) || this.match(51)) && (node.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(113) && (node.implements = this.tsParseHeritageClause("implements"));
						}
						parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
							const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
							return typeParameters && (prop.typeParameters = typeParameters), super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
						}
						parseFunctionParams(node, isConstructor) {
							const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
							typeParameters && (node.typeParameters = typeParameters), super.parseFunctionParams(node, isConstructor);
						}
						parseVarId(decl, kind) {
							super.parseVarId(decl, kind), "Identifier" === decl.id.type && !this.hasPrecedingLineBreak() && this.eat(35) && (decl.definite = !0);
							const type$1 = this.tsTryParseTypeAnnotation();
							type$1 && (decl.id.typeAnnotation = type$1, this.resetEndLocation(decl.id));
						}
						parseAsyncArrowFromCallExpression(node, call) {
							return this.match(14) && (node.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(node, call);
						}
						parseMaybeAssign(refExpressionErrors, afterLeftParse) {
							var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
							let state, jsx, typeCast, typeParameters;
							if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
								if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error) return jsx.node;
								const { context } = this.state, currentContext = context[context.length - 1];
								currentContext !== types$7.j_oTag && currentContext !== types$7.j_expr || context.pop();
							}
							if (!(null != (_jsx = jsx) && _jsx.error || this.match(47))) return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
							state && state !== this.state || (state = this.state.clone());
							const arrow = this.tryParse((abort$1) => {
								var _expr$extra, _typeParameters;
								typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
								const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
								return ("ArrowFunctionExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) && abort$1(), 0 !== (null == (_typeParameters = typeParameters) ? void 0 : _typeParameters.params.length) && this.resetStartLocationFromNode(expr, typeParameters), expr.typeParameters = typeParameters, expr;
							}, state);
							if (!arrow.error && !arrow.aborted) return typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
							if (!jsx && (assert$21(!this.hasPlugin("jsx")), typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !typeCast.error)) return typeCast.node;
							if (null != (_jsx2 = jsx) && _jsx2.node) return this.state = jsx.failState, jsx.node;
							if (arrow.node) return this.state = arrow.failState, typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
							if (null != (_typeCast = typeCast) && _typeCast.node) return this.state = typeCast.failState, typeCast.node;
							throw (null == (_jsx3 = jsx) ? void 0 : _jsx3.error) || arrow.error || (null == (_typeCast2 = typeCast) ? void 0 : _typeCast2.error);
						}
						reportReservedArrowTypeParam(node) {
							var _node$extra;
							1 !== node.params.length || node.params[0].constraint || null != (_node$extra = node.extra) && _node$extra.trailingComma || !this.getPluginOption("typescript", "disallowAmbiguousJSXLike") || this.raise(TSErrors.ReservedArrowTypeParam, node);
						}
						parseMaybeUnary(refExpressionErrors, sawUnary) {
							return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(refExpressionErrors, sawUnary);
						}
						parseArrow(node) {
							if (this.match(14)) {
								const result = this.tryParse((abort$1) => {
									const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
									return !this.canInsertSemicolon() && this.match(19) || abort$1(), returnType;
								});
								if (result.aborted) return;
								result.thrown || (result.error && (this.state = result.failState), node.returnType = result.node);
							}
							return super.parseArrow(node);
						}
						parseFunctionParamType(param) {
							this.eat(17) && (param.optional = !0);
							const type$1 = this.tsTryParseTypeAnnotation();
							return type$1 && (param.typeAnnotation = type$1), this.resetEndLocation(param), param;
						}
						isAssignable(node, isBinding) {
							switch (node.type) {
								case "TSTypeCastExpression": return this.isAssignable(node.expression, isBinding);
								case "TSParameterProperty": return !0;
								default: return super.isAssignable(node, isBinding);
							}
						}
						toAssignable(node, isLHS = !1) {
							switch (node.type) {
								case "ParenthesizedExpression":
									this.toAssignableParenthesizedExpression(node, isLHS);
									break;
								case "TSAsExpression":
								case "TSSatisfiesExpression":
								case "TSNonNullExpression":
								case "TSTypeAssertion":
									isLHS ? this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node) : this.raise(TSErrors.UnexpectedTypeCastInParameter, node), this.toAssignable(node.expression, isLHS);
									break;
								case "AssignmentExpression": isLHS || "TSTypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left));
								default: super.toAssignable(node, isLHS);
							}
						}
						toAssignableParenthesizedExpression(node, isLHS) {
							switch (node.expression.type) {
								case "TSAsExpression":
								case "TSSatisfiesExpression":
								case "TSNonNullExpression":
								case "TSTypeAssertion":
								case "ParenthesizedExpression":
									this.toAssignable(node.expression, isLHS);
									break;
								default: super.toAssignable(node, isLHS);
							}
						}
						checkToRestConversion(node, allowPattern) {
							switch (node.type) {
								case "TSAsExpression":
								case "TSSatisfiesExpression":
								case "TSTypeAssertion":
								case "TSNonNullExpression":
									this.checkToRestConversion(node.expression, !1);
									break;
								default: super.checkToRestConversion(node, allowPattern);
							}
						}
						isValidLVal(type$1, isUnparenthesizedInAssign, binding) {
							switch (type$1) {
								case "TSTypeCastExpression": return !0;
								case "TSParameterProperty": return "parameter";
								case "TSNonNullExpression":
								case "TSInstantiationExpression": return "expression";
								case "TSAsExpression":
								case "TSSatisfiesExpression":
								case "TSTypeAssertion": return (64 !== binding || !isUnparenthesizedInAssign) && ["expression", !0];
								default: return super.isValidLVal(type$1, isUnparenthesizedInAssign, binding);
							}
						}
						parseBindingAtom() {
							return 78 === this.state.type ? this.parseIdentifier(!0) : super.parseBindingAtom();
						}
						parseMaybeDecoratorArguments(expr) {
							if (this.match(47) || this.match(51)) {
								const typeArguments = this.tsParseTypeArgumentsInExpression();
								if (this.match(10)) {
									const call = super.parseMaybeDecoratorArguments(expr);
									return call.typeParameters = typeArguments, call;
								}
								this.unexpected(null, 10);
							}
							return super.parseMaybeDecoratorArguments(expr);
						}
						checkCommaAfterRest(close) {
							return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close ? (this.next(), !1) : super.checkCommaAfterRest(close);
						}
						isClassMethod() {
							return this.match(47) || super.isClassMethod();
						}
						isClassProperty() {
							return this.match(35) || this.match(14) || super.isClassProperty();
						}
						parseMaybeDefault(startLoc, left) {
							const node = super.parseMaybeDefault(startLoc, left);
							return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation), node;
						}
						getTokenFromCode(code$1) {
							if (this.state.inType) {
								if (62 === code$1) return void this.finishOp(48, 1);
								if (60 === code$1) return void this.finishOp(47, 1);
							}
							super.getTokenFromCode(code$1);
						}
						reScan_lt_gt() {
							const { type: type$1 } = this.state;
							47 === type$1 ? (this.state.pos -= 1, this.readToken_lt()) : 48 === type$1 && (this.state.pos -= 1, this.readToken_gt());
						}
						reScan_lt() {
							const { type: type$1 } = this.state;
							return 51 === type$1 ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : type$1;
						}
						toAssignableList(exprList, trailingCommaLoc, isLHS) {
							for (let i = 0; i < exprList.length; i++) {
								const expr = exprList[i];
								"TSTypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
							}
							super.toAssignableList(exprList, trailingCommaLoc, isLHS);
						}
						typeCastToParameter(node) {
							return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
						}
						shouldParseArrow(params) {
							return this.match(14) ? params.every((expr) => this.isAssignable(expr, !0)) : super.shouldParseArrow(params);
						}
						shouldParseAsyncArrow() {
							return this.match(14) || super.shouldParseAsyncArrow();
						}
						canHaveLeadingDecorator() {
							return super.canHaveLeadingDecorator() || this.isAbstractClass();
						}
						jsxParseOpeningElementAfterName(node) {
							if (this.match(47) || this.match(51)) {
								const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
								typeArguments && (node.typeParameters = typeArguments);
							}
							return super.jsxParseOpeningElementAfterName(node);
						}
						getGetterSetterExpectedParamCount(method) {
							const baseCount = super.getGetterSetterExpectedParamCount(method), firstParam = this.getObjectOrClassMethodParams(method)[0];
							return firstParam && this.isThisParam(firstParam) ? baseCount + 1 : baseCount;
						}
						parseCatchClauseParam() {
							const param = super.parseCatchClauseParam(), type$1 = this.tsTryParseTypeAnnotation();
							return type$1 && (param.typeAnnotation = type$1, this.resetEndLocation(param)), param;
						}
						tsInAmbientContext(cb) {
							const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } = this.state;
							this.state.isAmbientContext = !0, this.state.strict = !1;
							try {
								return cb();
							} finally {
								this.state.isAmbientContext = oldIsAmbientContext, this.state.strict = oldStrict;
							}
						}
						parseClass(node, isStatement, optionalId) {
							const oldInAbstractClass = this.state.inAbstractClass;
							this.state.inAbstractClass = !!node.abstract;
							try {
								return super.parseClass(node, isStatement, optionalId);
							} finally {
								this.state.inAbstractClass = oldInAbstractClass;
							}
						}
						tsParseAbstractDeclaration(node, decorators) {
							if (this.match(80)) return node.abstract = !0, this.maybeTakeDecorators(decorators, this.parseClass(node, !0, !1));
							if (this.isContextual(129)) {
								if (!this.hasFollowingLineBreak()) return node.abstract = !0, this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node), this.tsParseInterfaceDeclaration(node);
							} else this.unexpected(null, 80);
						}
						parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type$1, inClassScope) {
							const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type$1, inClassScope);
							if (method.abstract) {
								if (this.hasPlugin("estree") ? !!method.value.body : !!method.body) {
									const { key } = method;
									this.raise(TSErrors.AbstractMethodHasImplementation, method, { methodName: "Identifier" !== key.type || method.computed ? `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` : key.name });
								}
							}
							return method;
						}
						tsParseTypeParameterName() {
							return this.parseIdentifier().name;
						}
						shouldParseAsAmbientContext() {
							return !!this.getPluginOption("typescript", "dts");
						}
						parse() {
							return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = !0), super.parse();
						}
						getExpression() {
							return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = !0), super.getExpression();
						}
						parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
							return !isString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(node, !1, isInTypeExport), this.finishNode(node, "ExportSpecifier")) : (node.exportKind = "value", super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
						}
						parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
							return !importedIsString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(specifier, !0, isInTypeOnlyImport), this.finishNode(specifier, "ImportSpecifier")) : (specifier.importKind = "value", super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096));
						}
						parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
							const leftOfAsKey = isImport ? "imported" : "local", rightOfAsKey = isImport ? "local" : "exported";
							let rightOfAs, leftOfAs = node[leftOfAsKey], hasTypeSpecifier = !1, canParseAsKeyword = !0;
							const loc = leftOfAs.loc.start;
							if (this.isContextual(93)) {
								const firstAs = this.parseIdentifier();
								if (this.isContextual(93)) {
									const secondAs = this.parseIdentifier();
									tokenIsKeywordOrIdentifier(this.state.type) ? (hasTypeSpecifier = !0, leftOfAs = firstAs, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName(), canParseAsKeyword = !1) : (rightOfAs = secondAs, canParseAsKeyword = !1);
								} else tokenIsKeywordOrIdentifier(this.state.type) ? (canParseAsKeyword = !1, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName()) : (hasTypeSpecifier = !0, leftOfAs = firstAs);
							} else tokenIsKeywordOrIdentifier(this.state.type) && (hasTypeSpecifier = !0, isImport ? (leftOfAs = this.parseIdentifier(!0), this.isContextual(93) || this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, !0, !0)) : leftOfAs = this.parseModuleExportName());
							hasTypeSpecifier && isInTypeOnlyImportExport && this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc), node[leftOfAsKey] = leftOfAs, node[rightOfAsKey] = rightOfAs;
							node[isImport ? "importKind" : "exportKind"] = hasTypeSpecifier ? "type" : "value", canParseAsKeyword && this.eatContextual(93) && (node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName()), node[rightOfAsKey] || (node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey])), isImport && this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
						}
					},
					v8intrinsic: (superClass) => class extends superClass {
						parseV8Intrinsic() {
							if (this.match(54)) {
								const v8IntrinsicStartLoc = this.state.startLoc, node = this.startNode();
								if (this.next(), tokenIsIdentifier(this.state.type)) {
									const name = this.parseIdentifierName(), identifier = this.createIdentifier(node, name);
									if (identifier.type = "V8IntrinsicIdentifier", this.match(10)) return identifier;
								}
								this.unexpected(v8IntrinsicStartLoc);
							}
						}
						parseExprAtom(refExpressionErrors) {
							return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
						}
					},
					placeholders: (superClass) => class extends superClass {
						parsePlaceholder(expectedNode) {
							if (this.match(133)) {
								const node = this.startNode();
								return this.next(), this.assertNoSpace(), node.name = super.parseIdentifier(!0), this.assertNoSpace(), this.expect(133), this.finishPlaceholder(node, expectedNode);
							}
						}
						finishPlaceholder(node, expectedNode) {
							let placeholder = node;
							return placeholder.expectedNode && placeholder.type || (placeholder = this.finishNode(placeholder, "Placeholder")), placeholder.expectedNode = expectedNode, placeholder;
						}
						getTokenFromCode(code$1) {
							37 === code$1 && 37 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(133, 2) : super.getTokenFromCode(code$1);
						}
						parseExprAtom(refExpressionErrors) {
							return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
						}
						parseIdentifier(liberal) {
							return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
						}
						checkReservedWord(word, startLoc, checkKeywords, isBinding) {
							void 0 !== word && super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
						}
						parseBindingAtom() {
							return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
						}
						isValidLVal(type$1, isParenthesized, binding) {
							return "Placeholder" === type$1 || super.isValidLVal(type$1, isParenthesized, binding);
						}
						toAssignable(node, isLHS) {
							node && "Placeholder" === node.type && "Expression" === node.expectedNode ? node.expectedNode = "Pattern" : super.toAssignable(node, isLHS);
						}
						chStartsBindingIdentifier(ch, pos) {
							if (super.chStartsBindingIdentifier(ch, pos)) return !0;
							return 133 === this.lookahead().type;
						}
						verifyBreakContinue(node, isBreak) {
							node.label && "Placeholder" === node.label.type || super.verifyBreakContinue(node, isBreak);
						}
						parseExpressionStatement(node, expr) {
							var _expr$extra;
							if ("Placeholder" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) return super.parseExpressionStatement(node, expr);
							if (this.match(14)) {
								const stmt = node;
								return stmt.label = this.finishPlaceholder(expr, "Identifier"), this.next(), stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration(), this.finishNode(stmt, "LabeledStatement");
							}
							this.semicolon();
							const stmtPlaceholder = node;
							return stmtPlaceholder.name = expr.name, this.finishPlaceholder(stmtPlaceholder, "Statement");
						}
						parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
							return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
						}
						parseFunctionId(requireId) {
							return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
						}
						parseClass(node, isStatement, optionalId) {
							const type$1 = isStatement ? "ClassDeclaration" : "ClassExpression";
							this.next();
							const oldStrict = this.state.strict, placeholder = this.parsePlaceholder("Identifier");
							if (placeholder) {
								if (!(this.match(81) || this.match(133) || this.match(5))) {
									if (optionalId || !isStatement) return node.id = null, node.body = this.finishPlaceholder(placeholder, "ClassBody"), this.finishNode(node, type$1);
									throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
								}
								node.id = placeholder;
							} else this.parseClassId(node, isStatement, optionalId);
							return super.parseClassSuper(node), node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, type$1);
						}
						parseExport(node, decorators) {
							const placeholder = this.parsePlaceholder("Identifier");
							if (!placeholder) return super.parseExport(node, decorators);
							const node2 = node;
							if (!this.isContextual(98) && !this.match(12)) return node2.specifiers = [], node2.source = null, node2.declaration = this.finishPlaceholder(placeholder, "Declaration"), this.finishNode(node2, "ExportNamedDeclaration");
							this.expectPlugin("exportDefaultFrom");
							const specifier = this.startNode();
							return specifier.exported = placeholder, node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], super.parseExport(node2, decorators);
						}
						isExportDefaultSpecifier() {
							if (this.match(65)) {
								const next = this.nextTokenStart();
								if (this.isUnparsedContextual(next, "from") && this.input.startsWith(tokenLabelName(133), this.nextTokenStartSince(next + 4))) return !0;
							}
							return super.isExportDefaultSpecifier();
						}
						maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
							var _specifiers;
							return !(null == (_specifiers = node.specifiers) || !_specifiers.length) || super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
						}
						checkExport(node) {
							const { specifiers } = node;
							null != specifiers && specifiers.length && (node.specifiers = specifiers.filter((node$1) => "Placeholder" === node$1.exported.type)), super.checkExport(node), node.specifiers = specifiers;
						}
						parseImport(node) {
							const placeholder = this.parsePlaceholder("Identifier");
							if (!placeholder) return super.parseImport(node);
							if (node.specifiers = [], !this.isContextual(98) && !this.match(12)) return node.source = this.finishPlaceholder(placeholder, "StringLiteral"), this.semicolon(), this.finishNode(node, "ImportDeclaration");
							const specifier = this.startNodeAtNode(placeholder);
							if (specifier.local = placeholder, node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier")), this.eat(12)) this.maybeParseStarImportSpecifier(node) || this.parseNamedImportSpecifiers(node);
							return this.expectContextual(98), node.source = this.parseImportSource(), this.semicolon(), this.finishNode(node, "ImportDeclaration");
						}
						parseImportSource() {
							return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
						}
						assertNoSpace() {
							this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index) && this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
						}
					}
				}, mixinPluginNames = Object.keys(mixinPlugins);
				class ExpressionParser extends LValParser {
					checkProto(prop, isRecord, protoRef, refExpressionErrors) {
						if ("SpreadElement" === prop.type || this.isObjectMethod(prop) || prop.computed || prop.shorthand) return;
						const key = prop.key;
						if ("__proto__" === ("Identifier" === key.type ? key.name : key.value)) {
							if (isRecord) return void this.raise(Errors.RecordNoProto, key);
							protoRef.used && (refExpressionErrors ? null === refExpressionErrors.doubleProtoLoc && (refExpressionErrors.doubleProtoLoc = key.loc.start) : this.raise(Errors.DuplicateProto, key)), protoRef.used = !0;
						}
					}
					shouldExitDescending(expr, potentialArrowAt) {
						return "ArrowFunctionExpression" === expr.type && this.offsetToSourcePos(expr.start) === potentialArrowAt;
					}
					getExpression() {
						this.enterInitialScopes(), this.nextToken();
						const expr = this.parseExpression();
						return this.match(140) || this.unexpected(), this.finalizeRemainingComments(), expr.comments = this.comments, expr.errors = this.state.errors, this.options.tokens && (expr.tokens = this.tokens), expr;
					}
					parseExpression(disallowIn, refExpressionErrors) {
						return disallowIn ? this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors)) : this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
					}
					parseExpressionBase(refExpressionErrors) {
						const startLoc = this.state.startLoc, expr = this.parseMaybeAssign(refExpressionErrors);
						if (this.match(12)) {
							const node = this.startNodeAt(startLoc);
							for (node.expressions = [expr]; this.eat(12);) node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
							return this.toReferencedList(node.expressions), this.finishNode(node, "SequenceExpression");
						}
						return expr;
					}
					parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
						return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
					}
					parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
						return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
					}
					setOptionalParametersError(refExpressionErrors, resultError) {
						var _resultError$loc;
						refExpressionErrors.optionalParametersLoc = null != (_resultError$loc = null == resultError ? void 0 : resultError.loc) ? _resultError$loc : this.state.startLoc;
					}
					parseMaybeAssign(refExpressionErrors, afterLeftParse) {
						const startLoc = this.state.startLoc;
						if (this.isContextual(108) && this.prodParam.hasYield) {
							let left$1 = this.parseYield();
							return afterLeftParse && (left$1 = afterLeftParse.call(this, left$1, startLoc)), left$1;
						}
						let ownExpressionErrors;
						refExpressionErrors ? ownExpressionErrors = !1 : (refExpressionErrors = new ExpressionErrors(), ownExpressionErrors = !0);
						const { type: type$1 } = this.state;
						(10 === type$1 || tokenIsIdentifier(type$1)) && (this.state.potentialArrowAt = this.state.start);
						let left = this.parseMaybeConditional(refExpressionErrors);
						if (afterLeftParse && (left = afterLeftParse.call(this, left, startLoc)), (token = this.state.type) >= 29 && token <= 33) {
							const node = this.startNodeAt(startLoc), operator = this.state.value;
							if (node.operator = operator, this.match(29)) {
								this.toAssignable(left, !0), node.left = left;
								const startIndex = startLoc.index;
								null != refExpressionErrors.doubleProtoLoc && refExpressionErrors.doubleProtoLoc.index >= startIndex && (refExpressionErrors.doubleProtoLoc = null), null != refExpressionErrors.shorthandAssignLoc && refExpressionErrors.shorthandAssignLoc.index >= startIndex && (refExpressionErrors.shorthandAssignLoc = null), null != refExpressionErrors.privateKeyLoc && refExpressionErrors.privateKeyLoc.index >= startIndex && (this.checkDestructuringPrivate(refExpressionErrors), refExpressionErrors.privateKeyLoc = null);
							} else node.left = left;
							return this.next(), node.right = this.parseMaybeAssign(), this.checkLVal(left, this.finishNode(node, "AssignmentExpression")), node;
						}
						var token;
						return ownExpressionErrors && this.checkExpressionErrors(refExpressionErrors, !0), left;
					}
					parseMaybeConditional(refExpressionErrors) {
						const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprOps(refExpressionErrors);
						return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseConditional(expr, startLoc, refExpressionErrors);
					}
					parseConditional(expr, startLoc, refExpressionErrors) {
						if (this.eat(17)) {
							const node = this.startNodeAt(startLoc);
							return node.test = expr, node.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), node.alternate = this.parseMaybeAssign(), this.finishNode(node, "ConditionalExpression");
						}
						return expr;
					}
					parseMaybeUnaryOrPrivate(refExpressionErrors) {
						return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
					}
					parseExprOps(refExpressionErrors) {
						const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
						return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseExprOp(expr, startLoc, -1);
					}
					parseExprOp(left, leftStartLoc, minPrec) {
						if (this.isPrivateName(left)) {
							const value$1 = this.getPrivateNameSV(left);
							(minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(Errors.PrivateInExpectedIn, left, { identifierName: value$1 }), this.classScope.usePrivateName(value$1, left.loc.start);
						}
						const op = this.state.type;
						if ((token = op) >= 39 && token <= 59 && (this.prodParam.hasIn || !this.match(58))) {
							let prec = tokenOperatorPrecedence(op);
							if (prec > minPrec) {
								if (39 === op) {
									if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody) return left;
									this.checkPipelineAtInfixOperator(left, leftStartLoc);
								}
								const node = this.startNodeAt(leftStartLoc);
								node.left = left, node.operator = this.state.value;
								const logical = 41 === op || 42 === op, coalesce = 40 === op;
								if (coalesce && (prec = tokenOperatorPrecedence(42)), this.next(), 39 === op && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && 96 === this.state.type && this.prodParam.hasAwait) throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
								node.right = this.parseExprOpRightExpr(op, prec);
								const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression"), nextOp = this.state.type;
								if (coalesce && (41 === nextOp || 42 === nextOp) || logical && 40 === nextOp) throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
								return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
							}
						}
						var token;
						return left;
					}
					parseExprOpRightExpr(op, prec) {
						const startLoc = this.state.startLoc;
						if (39 === op) switch (this.getPluginOption("pipelineOperator", "proposal")) {
							case "hack": return this.withTopicBindingContext(() => this.parseHackPipeBody());
							case "smart": return this.withTopicBindingContext(() => {
								if (this.prodParam.hasYield && this.isContextual(108)) throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
								return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
							});
							case "fsharp": return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(prec));
						}
						return this.parseExprOpBaseRightExpr(op, prec);
					}
					parseExprOpBaseRightExpr(op, prec) {
						const startLoc = this.state.startLoc;
						return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, 57 === op ? prec - 1 : prec);
					}
					parseHackPipeBody() {
						var _body$extra;
						const { startLoc } = this.state, body = this.parseMaybeAssign();
						return !UnparenthesizedPipeBodyDescriptions.has(body.type) || null != (_body$extra = body.extra) && _body$extra.parenthesized || this.raise(Errors.PipeUnparenthesizedBody, startLoc, { type: body.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipeTopicUnused, startLoc), body;
					}
					checkExponentialAfterUnary(node) {
						this.match(57) && this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);
					}
					parseMaybeUnary(refExpressionErrors, sawUnary) {
						const startLoc = this.state.startLoc, isAwait = this.isContextual(96);
						if (isAwait && this.recordAwaitIfAllowed()) {
							this.next();
							const expr$1 = this.parseAwait(startLoc);
							return sawUnary || this.checkExponentialAfterUnary(expr$1), expr$1;
						}
						const update = this.match(34), node = this.startNode();
						if (token = this.state.type, tokenPrefixes[token]) {
							node.operator = this.state.value, node.prefix = !0, this.match(72) && this.expectPlugin("throwExpressions");
							const isDelete = this.match(89);
							if (this.next(), node.argument = this.parseMaybeUnary(null, !0), this.checkExpressionErrors(refExpressionErrors, !0), this.state.strict && isDelete) {
								const arg = node.argument;
								"Identifier" === arg.type ? this.raise(Errors.StrictDelete, node) : this.hasPropertyAsPrivateName(arg) && this.raise(Errors.DeletePrivateField, node);
							}
							if (!update) return sawUnary || this.checkExponentialAfterUnary(node), this.finishNode(node, "UnaryExpression");
						}
						var token;
						const expr = this.parseUpdate(node, update, refExpressionErrors);
						if (isAwait) {
							const { type: type$1 } = this.state;
							if ((this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type$1) : tokenCanStartExpression(type$1) && !this.match(54)) && !this.isAmbiguousAwait()) return this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc), this.parseAwait(startLoc);
						}
						return expr;
					}
					parseUpdate(node, update, refExpressionErrors) {
						if (update) {
							const updateExpressionNode = node;
							return this.checkLVal(updateExpressionNode.argument, this.finishNode(updateExpressionNode, "UpdateExpression")), node;
						}
						const startLoc = this.state.startLoc;
						let expr = this.parseExprSubscripts(refExpressionErrors);
						if (this.checkExpressionErrors(refExpressionErrors, !1)) return expr;
						for (; 34 === this.state.type && !this.canInsertSemicolon();) {
							const node$1 = this.startNodeAt(startLoc);
							node$1.operator = this.state.value, node$1.prefix = !1, node$1.argument = expr, this.next(), this.checkLVal(expr, expr = this.finishNode(node$1, "UpdateExpression"));
						}
						return expr;
					}
					parseExprSubscripts(refExpressionErrors) {
						const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprAtom(refExpressionErrors);
						return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseSubscripts(expr, startLoc);
					}
					parseSubscripts(base, startLoc, noCalls) {
						const state = {
							optionalChainMember: !1,
							maybeAsyncArrow: this.atPossibleAsyncArrow(base),
							stop: !1
						};
						do
							base = this.parseSubscript(base, startLoc, noCalls, state), state.maybeAsyncArrow = !1;
						while (!state.stop);
						return base;
					}
					parseSubscript(base, startLoc, noCalls, state) {
						const { type: type$1 } = this.state;
						if (!noCalls && 15 === type$1) return this.parseBind(base, startLoc, noCalls, state);
						if (tokenIsTemplate(type$1)) return this.parseTaggedTemplateExpression(base, startLoc, state);
						let optional = !1;
						if (18 === type$1) {
							if (noCalls && (this.raise(Errors.OptionalChainingNoNew, this.state.startLoc), 40 === this.lookaheadCharCode())) return state.stop = !0, base;
							state.optionalChainMember = optional = !0, this.next();
						}
						if (!noCalls && this.match(10)) return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
						{
							const computed = this.eat(0);
							return computed || optional || this.eat(16) ? this.parseMember(base, startLoc, state, computed, optional) : (state.stop = !0, base);
						}
					}
					parseMember(base, startLoc, state, computed, optional) {
						const node = this.startNodeAt(startLoc);
						return node.object = base, node.computed = computed, computed ? (node.property = this.parseExpression(), this.expect(3)) : this.match(139) ? ("Super" === base.type && this.raise(Errors.SuperPrivateField, startLoc), this.classScope.usePrivateName(this.state.value, this.state.startLoc), node.property = this.parsePrivateName()) : node.property = this.parseIdentifier(!0), state.optionalChainMember ? (node.optional = optional, this.finishNode(node, "OptionalMemberExpression")) : this.finishNode(node, "MemberExpression");
					}
					parseBind(base, startLoc, noCalls, state) {
						const node = this.startNodeAt(startLoc);
						return node.object = base, this.next(), node.callee = this.parseNoCallExpr(), state.stop = !0, this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
					}
					parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
						const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
						let refExpressionErrors = null;
						this.state.maybeInArrowParameters = !0, this.next();
						const node = this.startNodeAt(startLoc);
						node.callee = base;
						const { maybeAsyncArrow, optionalChainMember } = state;
						maybeAsyncArrow && (this.expressionScope.enter(new ArrowHeadParsingScope(2)), refExpressionErrors = new ExpressionErrors()), optionalChainMember && (node.optional = optional), node.arguments = optional ? this.parseCallExpressionArguments(11) : this.parseCallExpressionArguments(11, "Super" !== base.type, node, refExpressionErrors);
						let finishedNode = this.finishCallExpression(node, optionalChainMember);
						return maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional ? (state.stop = !0, this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode)) : (maybeAsyncArrow && (this.checkExpressionErrors(refExpressionErrors, !0), this.expressionScope.exit()), this.toReferencedArguments(finishedNode)), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, finishedNode;
					}
					toReferencedArguments(node, isParenthesizedExpr) {
						this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
					}
					parseTaggedTemplateExpression(base, startLoc, state) {
						const node = this.startNodeAt(startLoc);
						return node.tag = base, node.quasi = this.parseTemplate(!0), state.optionalChainMember && this.raise(Errors.OptionalChainingNoTemplate, startLoc), this.finishNode(node, "TaggedTemplateExpression");
					}
					atPossibleAsyncArrow(base) {
						return "Identifier" === base.type && "async" === base.name && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.offsetToSourcePos(base.start) === this.state.potentialArrowAt;
					}
					finishCallExpression(node, optional) {
						if ("Import" === node.callee.type) if (0 === node.arguments.length || node.arguments.length > 2) this.raise(Errors.ImportCallArity, node);
						else for (const arg of node.arguments) "SpreadElement" === arg.type && this.raise(Errors.ImportCallSpreadArgument, arg);
						return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
					}
					parseCallExpressionArguments(close, allowPlaceholder, nodeForExtra, refExpressionErrors) {
						const elts = [];
						let first = !0;
						const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
						for (this.state.inFSharpPipelineDirectBody = !1; !this.eat(close);) {
							if (first) first = !1;
							else if (this.expect(12), this.match(close)) {
								nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
								break;
							}
							elts.push(this.parseExprListItem(!1, refExpressionErrors, allowPlaceholder));
						}
						return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, elts;
					}
					shouldParseAsyncArrow() {
						return this.match(19) && !this.canInsertSemicolon();
					}
					parseAsyncArrowFromCallExpression(node, call) {
						var _call$extra;
						return this.resetPreviousNodeTrailingComments(call), this.expect(19), this.parseArrowExpression(node, call.arguments, !0, null == (_call$extra = call.extra) ? void 0 : _call$extra.trailingCommaLoc), call.innerComments && setInnerComments(node, call.innerComments), call.callee.trailingComments && setInnerComments(node, call.callee.trailingComments), node;
					}
					parseNoCallExpr() {
						const startLoc = this.state.startLoc;
						return this.parseSubscripts(this.parseExprAtom(), startLoc, !0);
					}
					parseExprAtom(refExpressionErrors) {
						let node, decorators = null;
						const { type: type$1 } = this.state;
						switch (type$1) {
							case 79: return this.parseSuper();
							case 83: return node = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(node) : this.match(10) ? this.options.createImportExpressions ? this.parseImportCall(node) : this.finishNode(node, "Import") : (this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc), this.finishNode(node, "Import"));
							case 78: return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
							case 90: return this.parseDo(this.startNode(), !1);
							case 56:
							case 31: return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
							case 135: return this.parseNumericLiteral(this.state.value);
							case 136: return this.parseBigIntLiteral(this.state.value);
							case 134: return this.parseStringLiteral(this.state.value);
							case 84: return this.parseNullLiteral();
							case 85: return this.parseBooleanLiteral(!0);
							case 86: return this.parseBooleanLiteral(!1);
							case 10: {
								const canBeArrow = this.state.potentialArrowAt === this.state.start;
								return this.parseParenAndDistinguishExpression(canBeArrow);
							}
							case 2:
							case 1: return this.parseArrayLike(2 === this.state.type ? 4 : 3, !1, !0);
							case 0: return this.parseArrayLike(3, !0, !1, refExpressionErrors);
							case 6:
							case 7: return this.parseObjectLike(6 === this.state.type ? 9 : 8, !1, !0);
							case 5: return this.parseObjectLike(8, !1, !1, refExpressionErrors);
							case 68: return this.parseFunctionOrFunctionSent();
							case 26: decorators = this.parseDecorators();
							case 80: return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), !1);
							case 77: return this.parseNewOrNewTarget();
							case 25:
							case 24: return this.parseTemplate(!1);
							case 15: {
								node = this.startNode(), this.next(), node.object = null;
								const callee = node.callee = this.parseNoCallExpr();
								if ("MemberExpression" === callee.type) return this.finishNode(node, "BindExpression");
								throw this.raise(Errors.UnsupportedBind, callee);
							}
							case 139: return this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, { identifierName: this.state.value }), this.parsePrivateName();
							case 33: return this.parseTopicReferenceThenEqualsSign(54, "%");
							case 32: return this.parseTopicReferenceThenEqualsSign(44, "^");
							case 37:
							case 38: return this.parseTopicReference("hack");
							case 44:
							case 54:
							case 27: {
								const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
								if (pipeProposal) return this.parseTopicReference(pipeProposal);
								this.unexpected();
								break;
							}
							case 47: {
								const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
								isIdentifierStart(lookaheadCh) || 62 === lookaheadCh ? this.expectOnePlugin([
									"jsx",
									"flow",
									"typescript"
								]) : this.unexpected();
								break;
							}
							default:
								if (137 === type$1) return this.parseDecimalLiteral(this.state.value);
								if (tokenIsIdentifier(type$1)) {
									if (this.isContextual(127) && 123 === this.lookaheadInLineCharCode()) return this.parseModuleExpression();
									const canBeArrow = this.state.potentialArrowAt === this.state.start, containsEsc = this.state.containsEsc, id = this.parseIdentifier();
									if (!containsEsc && "async" === id.name && !this.canInsertSemicolon()) {
										const { type: type$2 } = this.state;
										if (68 === type$2) return this.resetPreviousNodeTrailingComments(id), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
										if (tokenIsIdentifier(type$2)) return 61 === this.lookaheadCharCode() ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id)) : id;
										if (90 === type$2) return this.resetPreviousNodeTrailingComments(id), this.parseDo(this.startNodeAtNode(id), !0);
									}
									return canBeArrow && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(id), [id], !1)) : id;
								}
								this.unexpected();
						}
					}
					parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
						const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
						if (pipeProposal) return this.state.type = topicTokenType, this.state.value = topicTokenValue, this.state.pos--, this.state.end--, this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1), this.parseTopicReference(pipeProposal);
						this.unexpected();
					}
					parseTopicReference(pipeProposal) {
						const node = this.startNode(), startLoc = this.state.startLoc, tokenType = this.state.type;
						return this.next(), this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
					}
					finishTopicReference(node, startLoc, pipeProposal, tokenType) {
						if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
							const nodeType = "smart" === pipeProposal ? "PipelinePrimaryTopicReference" : "TopicReference";
							return this.topicReferenceIsAllowedInCurrentContext() || this.raise("smart" === pipeProposal ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc), this.registerTopicReference(), this.finishNode(node, nodeType);
						}
						throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, { token: tokenLabelName(tokenType) });
					}
					testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
						switch (pipeProposal) {
							case "hack": return this.hasPlugin(["pipelineOperator", { topicToken: tokenLabelName(tokenType) }]);
							case "smart": return 27 === tokenType;
							default: throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
						}
					}
					parseAsyncArrowUnaryFunction(node) {
						this.prodParam.enter(functionFlags(!0, this.prodParam.hasYield));
						const params = [this.parseIdentifier()];
						return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition()), this.expect(19), this.parseArrowExpression(node, params, !0);
					}
					parseDo(node, isAsync) {
						this.expectPlugin("doExpressions"), isAsync && this.expectPlugin("asyncDoExpressions"), node.async = isAsync, this.next();
						const oldLabels = this.state.labels;
						return this.state.labels = [], isAsync ? (this.prodParam.enter(2), node.body = this.parseBlock(), this.prodParam.exit()) : node.body = this.parseBlock(), this.state.labels = oldLabels, this.finishNode(node, "DoExpression");
					}
					parseSuper() {
						const node = this.startNode();
						return this.next(), !this.match(10) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(Errors.UnexpectedSuper, node) : this.raise(Errors.SuperNotAllowed, node), this.match(10) || this.match(0) || this.match(16) || this.raise(Errors.UnsupportedSuper, node), this.finishNode(node, "Super");
					}
					parsePrivateName() {
						const node = this.startNode(), id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1)), name = this.state.value;
						return this.next(), node.id = this.createIdentifier(id, name), this.finishNode(node, "PrivateName");
					}
					parseFunctionOrFunctionSent() {
						const node = this.startNode();
						if (this.next(), this.prodParam.hasYield && this.match(16)) {
							const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
							return this.next(), this.match(103) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(node, meta, "sent");
						}
						return this.parseFunction(node);
					}
					parseMetaProperty(node, meta, propertyName) {
						node.meta = meta;
						const containsEsc = this.state.containsEsc;
						return node.property = this.parseIdentifier(!0), (node.property.name !== propertyName || containsEsc) && this.raise(Errors.UnsupportedMetaProperty, node.property, {
							target: meta.name,
							onlyValidPropertyName: propertyName
						}), this.finishNode(node, "MetaProperty");
					}
					parseImportMetaProperty(node) {
						const id = this.createIdentifier(this.startNodeAtNode(node), "import");
						if (this.next(), this.isContextual(101)) this.inModule || this.raise(Errors.ImportMetaOutsideModule, id), this.sawUnambiguousESM = !0;
						else if (this.isContextual(105) || this.isContextual(97)) {
							const isSource = this.isContextual(105);
							if (isSource || this.unexpected(), this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation"), !this.options.createImportExpressions) throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, { phase: this.state.value });
							return this.next(), node.phase = isSource ? "source" : "defer", this.parseImportCall(node);
						}
						return this.parseMetaProperty(node, id, "meta");
					}
					parseLiteralAtNode(value$1, type$1, node) {
						return this.addExtra(node, "rawValue", value$1), this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end)), node.value = value$1, this.next(), this.finishNode(node, type$1);
					}
					parseLiteral(value$1, type$1) {
						const node = this.startNode();
						return this.parseLiteralAtNode(value$1, type$1, node);
					}
					parseStringLiteral(value$1) {
						return this.parseLiteral(value$1, "StringLiteral");
					}
					parseNumericLiteral(value$1) {
						return this.parseLiteral(value$1, "NumericLiteral");
					}
					parseBigIntLiteral(value$1) {
						return this.parseLiteral(value$1, "BigIntLiteral");
					}
					parseDecimalLiteral(value$1) {
						return this.parseLiteral(value$1, "DecimalLiteral");
					}
					parseRegExpLiteral(value$1) {
						const node = this.startNode();
						return this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end)), node.pattern = value$1.pattern, node.flags = value$1.flags, this.next(), this.finishNode(node, "RegExpLiteral");
					}
					parseBooleanLiteral(value$1) {
						const node = this.startNode();
						return node.value = value$1, this.next(), this.finishNode(node, "BooleanLiteral");
					}
					parseNullLiteral() {
						const node = this.startNode();
						return this.next(), this.finishNode(node, "NullLiteral");
					}
					parseParenAndDistinguishExpression(canBeArrow) {
						const startLoc = this.state.startLoc;
						let val;
						this.next(), this.expressionScope.enter(new ArrowHeadParsingScope(1));
						const oldMaybeInArrowParameters = this.state.maybeInArrowParameters, oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
						this.state.maybeInArrowParameters = !0, this.state.inFSharpPipelineDirectBody = !1;
						const innerStartLoc = this.state.startLoc, exprList = [], refExpressionErrors = new ExpressionErrors();
						let spreadStartLoc, optionalCommaStartLoc, first = !0;
						for (; !this.match(11);) {
							if (first) first = !1;
							else if (this.expect(12, null === refExpressionErrors.optionalParametersLoc ? null : refExpressionErrors.optionalParametersLoc), this.match(11)) {
								optionalCommaStartLoc = this.state.startLoc;
								break;
							}
							if (this.match(21)) {
								const spreadNodeStartLoc = this.state.startLoc;
								if (spreadStartLoc = this.state.startLoc, exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc)), !this.checkCommaAfterRest(41)) break;
							} else exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
						}
						const innerEndLoc = this.state.lastTokEndLoc;
						this.expect(11), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
						let arrowNode = this.startNodeAt(startLoc);
						return canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode)) ? (this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(arrowNode, exprList, !1), arrowNode) : (this.expressionScope.exit(), exprList.length || this.unexpected(this.state.lastTokStartLoc), optionalCommaStartLoc && this.unexpected(optionalCommaStartLoc), spreadStartLoc && this.unexpected(spreadStartLoc), this.checkExpressionErrors(refExpressionErrors, !0), this.toReferencedListDeep(exprList, !0), exprList.length > 1 ? (val = this.startNodeAt(innerStartLoc), val.expressions = exprList, this.finishNode(val, "SequenceExpression"), this.resetEndLocation(val, innerEndLoc)) : val = exprList[0], this.wrapParenthesis(startLoc, val));
					}
					wrapParenthesis(startLoc, expression) {
						if (!this.options.createParenthesizedExpressions) return this.addExtra(expression, "parenthesized", !0), this.addExtra(expression, "parenStart", startLoc.index), this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index), expression;
						const parenExpression = this.startNodeAt(startLoc);
						return parenExpression.expression = expression, this.finishNode(parenExpression, "ParenthesizedExpression");
					}
					shouldParseArrow(params) {
						return !this.canInsertSemicolon();
					}
					parseArrow(node) {
						if (this.eat(19)) return node;
					}
					parseParenItem(node, startLoc) {
						return node;
					}
					parseNewOrNewTarget() {
						const node = this.startNode();
						if (this.next(), this.match(16)) {
							const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
							this.next();
							const metaProp = this.parseMetaProperty(node, meta, "target");
							return this.scope.inNonArrowFunction || this.scope.inClass || this.options.allowNewTargetOutsideFunction || this.raise(Errors.UnexpectedNewTarget, metaProp), metaProp;
						}
						return this.parseNew(node);
					}
					parseNew(node) {
						if (this.parseNewCallee(node), this.eat(10)) {
							const args = this.parseExprList(11);
							this.toReferencedList(args), node.arguments = args;
						} else node.arguments = [];
						return this.finishNode(node, "NewExpression");
					}
					parseNewCallee(node) {
						const isImport = this.match(83), callee = this.parseNoCallExpr();
						node.callee = callee, !isImport || "Import" !== callee.type && "ImportExpression" !== callee.type || this.raise(Errors.ImportCallNotNewExpression, callee);
					}
					parseTemplateElement(isTagged) {
						const { start, startLoc, end, value: value$1 } = this.state, elemStart = start + 1, elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
						null === value$1 && (isTagged || this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)));
						const isTail = this.match(24), endOffset = isTail ? -1 : -2, elemEnd = end + endOffset;
						elem.value = {
							raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
							cooked: null === value$1 ? null : value$1.slice(1, endOffset)
						}, elem.tail = isTail, this.next();
						const finishedNode = this.finishNode(elem, "TemplateElement");
						return this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset)), finishedNode;
					}
					parseTemplate(isTagged) {
						const node = this.startNode();
						let curElt = this.parseTemplateElement(isTagged);
						const quasis = [curElt], substitutions = [];
						for (; !curElt.tail;) substitutions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), quasis.push(curElt = this.parseTemplateElement(isTagged));
						return node.expressions = substitutions, node.quasis = quasis, this.finishNode(node, "TemplateLiteral");
					}
					parseTemplateSubstitution() {
						return this.parseExpression();
					}
					parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
						isRecord && this.expectPlugin("recordAndTuple");
						const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
						this.state.inFSharpPipelineDirectBody = !1;
						const propHash = Object.create(null);
						let first = !0;
						const node = this.startNode();
						for (node.properties = [], this.next(); !this.match(close);) {
							if (first) first = !1;
							else if (this.expect(12), this.match(close)) {
								this.addTrailingCommaExtraToNode(node);
								break;
							}
							let prop;
							isPattern ? prop = this.parseBindingProperty() : (prop = this.parsePropertyDefinition(refExpressionErrors), this.checkProto(prop, isRecord, propHash, refExpressionErrors)), isRecord && !this.isObjectProperty(prop) && "SpreadElement" !== prop.type && this.raise(Errors.InvalidRecordProperty, prop), prop.shorthand && this.addExtra(prop, "shorthand", !0), node.properties.push(prop);
						}
						this.next(), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
						let type$1 = "ObjectExpression";
						return isPattern ? type$1 = "ObjectPattern" : isRecord && (type$1 = "RecordExpression"), this.finishNode(node, type$1);
					}
					addTrailingCommaExtraToNode(node) {
						this.addExtra(node, "trailingComma", this.state.lastTokStartLoc.index), this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, !1);
					}
					maybeAsyncOrAccessorProp(prop) {
						return !prop.computed && "Identifier" === prop.key.type && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
					}
					parsePropertyDefinition(refExpressionErrors) {
						let decorators = [];
						if (this.match(26)) for (this.hasPlugin("decorators") && this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc); this.match(26);) decorators.push(this.parseDecorator());
						const prop = this.startNode();
						let startLoc, isAsync = !1, isAccessor = !1;
						if (this.match(21)) return decorators.length && this.unexpected(), this.parseSpread();
						decorators.length && (prop.decorators = decorators, decorators = []), prop.method = !1, refExpressionErrors && (startLoc = this.state.startLoc);
						let isGenerator = this.eat(55);
						this.parsePropertyNamePrefixOperator(prop);
						const containsEsc = this.state.containsEsc;
						if (this.parsePropertyName(prop, refExpressionErrors), !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
							const { key } = prop, keyName = key.name;
							"async" !== keyName || this.hasPrecedingLineBreak() || (isAsync = !0, this.resetPreviousNodeTrailingComments(key), isGenerator = this.eat(55), this.parsePropertyName(prop)), "get" !== keyName && "set" !== keyName || (isAccessor = !0, this.resetPreviousNodeTrailingComments(key), prop.kind = keyName, this.match(55) && (isGenerator = !0, this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), { kind: keyName }), this.next()), this.parsePropertyName(prop));
						}
						return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, !1, isAccessor, refExpressionErrors);
					}
					getGetterSetterExpectedParamCount(method) {
						return "get" === method.kind ? 0 : 1;
					}
					getObjectOrClassMethodParams(method) {
						return method.params;
					}
					checkGetterSetterParams(method) {
						var _params;
						const paramCount = this.getGetterSetterExpectedParamCount(method), params = this.getObjectOrClassMethodParams(method);
						params.length !== paramCount && this.raise("get" === method.kind ? Errors.BadGetterArity : Errors.BadSetterArity, method), "set" === method.kind && "RestElement" === (null == (_params = params[params.length - 1]) ? void 0 : _params.type) && this.raise(Errors.BadSetterRestParameter, method);
					}
					parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
						if (isAccessor) {
							const finishedProp = this.parseMethod(prop, isGenerator, !1, !1, !1, "ObjectMethod");
							return this.checkGetterSetterParams(finishedProp), finishedProp;
						}
						if (isAsync || isGenerator || this.match(10)) return isPattern && this.unexpected(), prop.kind = "method", prop.method = !0, this.parseMethod(prop, isGenerator, isAsync, !1, !1, "ObjectMethod");
					}
					parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
						if (prop.shorthand = !1, this.eat(14)) return prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors), this.finishNode(prop, "ObjectProperty");
						if (!prop.computed && "Identifier" === prop.key.type) {
							if (this.checkReservedWord(prop.key.name, prop.key.loc.start, !0, !1), isPattern) prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
							else if (this.match(29)) {
								const shorthandAssignLoc = this.state.startLoc;
								null != refExpressionErrors ? null === refExpressionErrors.shorthandAssignLoc && (refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc) : this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc), prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
							} else prop.value = cloneIdentifier(prop.key);
							return prop.shorthand = !0, this.finishNode(prop, "ObjectProperty");
						}
					}
					parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
						const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
						return node || this.unexpected(), node;
					}
					parsePropertyName(prop, refExpressionErrors) {
						if (this.eat(0)) prop.computed = !0, prop.key = this.parseMaybeAssignAllowIn(), this.expect(3);
						else {
							const { type: type$1, value: value$1 } = this.state;
							let key;
							if (tokenIsKeywordOrIdentifier(type$1)) key = this.parseIdentifier(!0);
							else switch (type$1) {
								case 135:
									key = this.parseNumericLiteral(value$1);
									break;
								case 134:
									key = this.parseStringLiteral(value$1);
									break;
								case 136:
									key = this.parseBigIntLiteral(value$1);
									break;
								case 139: {
									const privateKeyLoc = this.state.startLoc;
									null != refExpressionErrors ? null === refExpressionErrors.privateKeyLoc && (refExpressionErrors.privateKeyLoc = privateKeyLoc) : this.raise(Errors.UnexpectedPrivateField, privateKeyLoc), key = this.parsePrivateName();
									break;
								}
								default:
									if (137 === type$1) {
										key = this.parseDecimalLiteral(value$1);
										break;
									}
									this.unexpected();
							}
							prop.key = key, 139 !== type$1 && (prop.computed = !1);
						}
					}
					initFunction(node, isAsync) {
						node.id = null, node.generator = !1, node.async = isAsync;
					}
					parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type$1, inClassScope = !1) {
						this.initFunction(node, isAsync), node.generator = isGenerator, this.scope.enter(18 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0)), this.prodParam.enter(functionFlags(isAsync, node.generator)), this.parseFunctionParams(node, isConstructor);
						const finishedNode = this.parseFunctionBodyAndFinish(node, type$1, !0);
						return this.prodParam.exit(), this.scope.exit(), finishedNode;
					}
					parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
						isTuple && this.expectPlugin("recordAndTuple");
						const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
						this.state.inFSharpPipelineDirectBody = !1;
						const node = this.startNode();
						return this.next(), node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
					}
					parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
						this.scope.enter(6);
						let flags = functionFlags(isAsync, !1);
						!this.match(5) && this.prodParam.hasIn && (flags |= 8), this.prodParam.enter(flags), this.initFunction(node, isAsync);
						const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
						return params && (this.state.maybeInArrowParameters = !0, this.setArrowFunctionParameters(node, params, trailingCommaLoc)), this.state.maybeInArrowParameters = !1, this.parseFunctionBody(node, !0), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.finishNode(node, "ArrowFunctionExpression");
					}
					setArrowFunctionParameters(node, params, trailingCommaLoc) {
						this.toAssignableList(params, trailingCommaLoc, !1), node.params = params;
					}
					parseFunctionBodyAndFinish(node, type$1, isMethod = !1) {
						return this.parseFunctionBody(node, !1, isMethod), this.finishNode(node, type$1);
					}
					parseFunctionBody(node, allowExpression, isMethod = !1) {
						const isExpression = allowExpression && !this.match(5);
						if (this.expressionScope.enter(newExpressionScope()), isExpression) node.body = this.parseMaybeAssign(), this.checkParams(node, !1, allowExpression, !1);
						else {
							const oldStrict = this.state.strict, oldLabels = this.state.labels;
							this.state.labels = [], this.prodParam.enter(4 | this.prodParam.currentFlags()), node.body = this.parseBlock(!0, !1, (hasStrictModeDirective) => {
								const nonSimple = !this.isSimpleParamList(node.params);
								hasStrictModeDirective && nonSimple && this.raise(Errors.IllegalLanguageModeDirective, "method" !== node.kind && "constructor" !== node.kind || !node.key ? node : node.key.loc.end);
								const strictModeChanged = !oldStrict && this.state.strict;
								this.checkParams(node, !(this.state.strict || allowExpression || isMethod || nonSimple), allowExpression, strictModeChanged), this.state.strict && node.id && this.checkIdentifier(node.id, 65, strictModeChanged);
							}), this.prodParam.exit(), this.state.labels = oldLabels;
						}
						this.expressionScope.exit();
					}
					isSimpleParameter(node) {
						return "Identifier" === node.type;
					}
					isSimpleParamList(params) {
						for (let i = 0, len = params.length; i < len; i++) if (!this.isSimpleParameter(params[i])) return !1;
						return !0;
					}
					checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = !0) {
						const checkClashes = !allowDuplicates && new Set(), formalParameters = { type: "FormalParameters" };
						for (const param of node.params) this.checkLVal(param, formalParameters, 5, checkClashes, strictModeChanged);
					}
					parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
						const elts = [];
						let first = !0;
						for (; !this.eat(close);) {
							if (first) first = !1;
							else if (this.expect(12), this.match(close)) {
								nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
								break;
							}
							elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
						}
						return elts;
					}
					parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
						let elt;
						if (this.match(12)) allowEmpty || this.raise(Errors.UnexpectedToken, this.state.curPosition(), { unexpected: "," }), elt = null;
						else if (this.match(21)) {
							const spreadNodeStartLoc = this.state.startLoc;
							elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
						} else if (this.match(17)) {
							this.expectPlugin("partialApplication"), allowPlaceholder || this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
							const node = this.startNode();
							this.next(), elt = this.finishNode(node, "ArgumentPlaceholder");
						} else elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
						return elt;
					}
					parseIdentifier(liberal) {
						const node = this.startNode(), name = this.parseIdentifierName(liberal);
						return this.createIdentifier(node, name);
					}
					createIdentifier(node, name) {
						return node.name = name, node.loc.identifierName = name, this.finishNode(node, "Identifier");
					}
					parseIdentifierName(liberal) {
						let name;
						const { startLoc, type: type$1 } = this.state;
						tokenIsKeywordOrIdentifier(type$1) ? name = this.state.value : this.unexpected();
						const tokenIsKeyword$1 = type$1 <= 92;
						return liberal ? tokenIsKeyword$1 && this.replaceToken(132) : this.checkReservedWord(name, startLoc, tokenIsKeyword$1, !1), this.next(), name;
					}
					checkReservedWord(word, startLoc, checkKeywords, isBinding) {
						if (word.length > 10) return;
						if (!function(word$1) {
							return reservedWordLikeSet.has(word$1);
						}(word)) return;
						if (checkKeywords && function(word$1) {
							return keywords.has(word$1);
						}(word)) return void this.raise(Errors.UnexpectedKeyword, startLoc, { keyword: word });
						if ((this.state.strict ? isBinding ? isStrictBindReservedWord : isStrictReservedWord : isReservedWord)(word, this.inModule)) this.raise(Errors.UnexpectedReservedWord, startLoc, { reservedWord: word });
						else if ("yield" === word) {
							if (this.prodParam.hasYield) return void this.raise(Errors.YieldBindingIdentifier, startLoc);
						} else if ("await" === word) {
							if (this.prodParam.hasAwait) return void this.raise(Errors.AwaitBindingIdentifier, startLoc);
							if (this.scope.inStaticBlock) return void this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
							this.expressionScope.recordAsyncArrowParametersError(startLoc);
						} else if ("arguments" === word && this.scope.inClassAndNotInNonArrowFunction) return void this.raise(Errors.ArgumentsInClass, startLoc);
					}
					recordAwaitIfAllowed() {
						const isAwaitAllowed = this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction;
						return isAwaitAllowed && !this.scope.inFunction && (this.state.hasTopLevelAwait = !0), isAwaitAllowed;
					}
					parseAwait(startLoc) {
						const node = this.startNodeAt(startLoc);
						return this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node), this.eat(55) && this.raise(Errors.ObsoleteAwaitStar, node), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = !0 : this.sawUnambiguousESM = !0), this.state.soloAwait || (node.argument = this.parseMaybeUnary(null, !0)), this.finishNode(node, "AwaitExpression");
					}
					isAmbiguousAwait() {
						if (this.hasPrecedingLineBreak()) return !0;
						const { type: type$1 } = this.state;
						return 53 === type$1 || 10 === type$1 || 0 === type$1 || tokenIsTemplate(type$1) || 102 === type$1 && !this.state.containsEsc || 138 === type$1 || 56 === type$1 || this.hasPlugin("v8intrinsic") && 54 === type$1;
					}
					parseYield() {
						const node = this.startNode();
						this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node), this.next();
						let delegating = !1, argument = null;
						if (!this.hasPrecedingLineBreak()) switch (delegating = this.eat(55), this.state.type) {
							case 13:
							case 140:
							case 8:
							case 11:
							case 3:
							case 9:
							case 14:
							case 12: if (!delegating) break;
							default: argument = this.parseMaybeAssign();
						}
						return node.delegate = delegating, node.argument = argument, this.finishNode(node, "YieldExpression");
					}
					parseImportCall(node) {
						if (this.next(), node.source = this.parseMaybeAssignAllowIn(), node.options = null, this.eat(12) && !this.match(11) && (node.options = this.parseMaybeAssignAllowIn(), this.eat(12) && !this.match(11))) {
							do
								this.parseMaybeAssignAllowIn();
							while (this.eat(12) && !this.match(11));
							this.raise(Errors.ImportCallArity, node);
						}
						return this.expect(11), this.finishNode(node, "ImportExpression");
					}
					checkPipelineAtInfixOperator(left, leftStartLoc) {
						this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && "SequenceExpression" === left.type && this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
					}
					parseSmartPipelineBodyInStyle(childExpr, startLoc) {
						if (this.isSimpleReference(childExpr)) {
							const bodyNode = this.startNodeAt(startLoc);
							return bodyNode.callee = childExpr, this.finishNode(bodyNode, "PipelineBareFunction");
						}
						{
							const bodyNode = this.startNodeAt(startLoc);
							return this.checkSmartPipeTopicBodyEarlyErrors(startLoc), bodyNode.expression = childExpr, this.finishNode(bodyNode, "PipelineTopicExpression");
						}
					}
					isSimpleReference(expression) {
						switch (expression.type) {
							case "MemberExpression": return !expression.computed && this.isSimpleReference(expression.object);
							case "Identifier": return !0;
							default: return !1;
						}
					}
					checkSmartPipeTopicBodyEarlyErrors(startLoc) {
						if (this.match(19)) throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
						this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipelineTopicUnused, startLoc);
					}
					withTopicBindingContext(callback) {
						const outerContextTopicState = this.state.topicContext;
						this.state.topicContext = {
							maxNumOfResolvableTopics: 1,
							maxTopicIndex: null
						};
						try {
							return callback();
						} finally {
							this.state.topicContext = outerContextTopicState;
						}
					}
					withSmartMixTopicForbiddingContext(callback) {
						if (!this.hasPlugin(["pipelineOperator", { proposal: "smart" }])) return callback();
						{
							const outerContextTopicState = this.state.topicContext;
							this.state.topicContext = {
								maxNumOfResolvableTopics: 0,
								maxTopicIndex: null
							};
							try {
								return callback();
							} finally {
								this.state.topicContext = outerContextTopicState;
							}
						}
					}
					withSoloAwaitPermittingContext(callback) {
						const outerContextSoloAwaitState = this.state.soloAwait;
						this.state.soloAwait = !0;
						try {
							return callback();
						} finally {
							this.state.soloAwait = outerContextSoloAwaitState;
						}
					}
					allowInAnd(callback) {
						const flags = this.prodParam.currentFlags();
						if (8 & ~flags) {
							this.prodParam.enter(8 | flags);
							try {
								return callback();
							} finally {
								this.prodParam.exit();
							}
						}
						return callback();
					}
					disallowInAnd(callback) {
						const flags = this.prodParam.currentFlags();
						if (8 & flags) {
							this.prodParam.enter(-9 & flags);
							try {
								return callback();
							} finally {
								this.prodParam.exit();
							}
						}
						return callback();
					}
					registerTopicReference() {
						this.state.topicContext.maxTopicIndex = 0;
					}
					topicReferenceIsAllowedInCurrentContext() {
						return this.state.topicContext.maxNumOfResolvableTopics >= 1;
					}
					topicReferenceWasUsedInCurrentContext() {
						return null != this.state.topicContext.maxTopicIndex && this.state.topicContext.maxTopicIndex >= 0;
					}
					parseFSharpPipelineBody(prec) {
						const startLoc = this.state.startLoc;
						this.state.potentialArrowAt = this.state.start;
						const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
						this.state.inFSharpPipelineDirectBody = !0;
						const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
						return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, ret;
					}
					parseModuleExpression() {
						this.expectPlugin("moduleBlocks");
						const node = this.startNode();
						this.next(), this.match(5) || this.unexpected(null, 5);
						const program = this.startNodeAt(this.state.endLoc);
						this.next();
						const revertScopes = this.initializeScopes(!0);
						this.enterInitialScopes();
						try {
							node.body = this.parseProgram(program, 8, "module");
						} finally {
							revertScopes();
						}
						return this.finishNode(node, "ModuleExpression");
					}
					parsePropertyNamePrefixOperator(prop) {}
				}
				const loopLabel = { kind: 1 }, switchLabel = { kind: 2 }, loneSurrogate = /[\uD800-\uDFFF]/u, keywordRelationalOperator = /in(?:stanceof)?/y;
				class StatementParser extends ExpressionParser {
					parseTopLevel(file, program) {
						return file.program = this.parseProgram(program), file.comments = this.comments, this.options.tokens && (file.tokens = function(tokens, input, startIndex) {
							for (let i = 0; i < tokens.length; i++) {
								const token = tokens[i], { type: type$1 } = token;
								if ("number" == typeof type$1) {
									if (139 === type$1) {
										const { loc, start, value: value$1, end } = token, hashEndPos = start + 1, hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
										tokens.splice(i, 1, new Token({
											type: getExportedToken(27),
											value: "#",
											start,
											end: hashEndPos,
											startLoc: loc.start,
											endLoc: hashEndLoc
										}), new Token({
											type: getExportedToken(132),
											value: value$1,
											start: hashEndPos,
											end,
											startLoc: hashEndLoc,
											endLoc: loc.end
										})), i++;
										continue;
									}
									if (tokenIsTemplate(type$1)) {
										const { loc, start, value: value$1, end } = token, backquoteEnd = start + 1, backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
										let startToken, templateValue, templateElementEnd, templateElementEndLoc, endToken;
										startToken = 96 === input.charCodeAt(start - startIndex) ? new Token({
											type: getExportedToken(22),
											value: "`",
											start,
											end: backquoteEnd,
											startLoc: loc.start,
											endLoc: backquoteEndLoc
										}) : new Token({
											type: getExportedToken(8),
											value: "}",
											start,
											end: backquoteEnd,
											startLoc: loc.start,
											endLoc: backquoteEndLoc
										}), 24 === type$1 ? (templateElementEnd = end - 1, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1), templateValue = null === value$1 ? null : value$1.slice(1, -1), endToken = new Token({
											type: getExportedToken(22),
											value: "`",
											start: templateElementEnd,
											end,
											startLoc: templateElementEndLoc,
											endLoc: loc.end
										})) : (templateElementEnd = end - 2, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2), templateValue = null === value$1 ? null : value$1.slice(1, -2), endToken = new Token({
											type: getExportedToken(23),
											value: "${",
											start: templateElementEnd,
											end,
											startLoc: templateElementEndLoc,
											endLoc: loc.end
										})), tokens.splice(i, 1, startToken, new Token({
											type: getExportedToken(20),
											value: templateValue,
											start: backquoteEnd,
											end: templateElementEnd,
											startLoc: backquoteEndLoc,
											endLoc: templateElementEndLoc
										}), endToken), i += 2;
										continue;
									}
									token.type = getExportedToken(type$1);
								}
							}
							return tokens;
						}(this.tokens, this.input, this.startIndex)), this.finishNode(file, "File");
					}
					parseProgram(program, end = 140, sourceType = this.options.sourceType) {
						if (program.sourceType = sourceType, program.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(program, !0, !0, end), this.inModule) {
							if (!this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) for (const [localName, at] of Array.from(this.scope.undefinedExports)) this.raise(Errors.ModuleExportUndefined, at, { localName });
							this.addExtra(program, "topLevelAwait", this.state.hasTopLevelAwait);
						}
						let finishedProgram;
						return finishedProgram = 140 === end ? this.finishNode(program, "Program") : this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1)), finishedProgram;
					}
					stmtToDirective(stmt) {
						const directive = stmt;
						directive.type = "Directive", directive.value = directive.expression, delete directive.expression;
						const directiveLiteral = directive.value, expressionValue = directiveLiteral.value, raw = this.input.slice(this.offsetToSourcePos(directiveLiteral.start), this.offsetToSourcePos(directiveLiteral.end)), val = directiveLiteral.value = raw.slice(1, -1);
						return this.addExtra(directiveLiteral, "raw", raw), this.addExtra(directiveLiteral, "rawValue", val), this.addExtra(directiveLiteral, "expressionValue", expressionValue), directiveLiteral.type = "DirectiveLiteral", directive;
					}
					parseInterpreterDirective() {
						if (!this.match(28)) return null;
						const node = this.startNode();
						return node.value = this.state.value, this.next(), this.finishNode(node, "InterpreterDirective");
					}
					isLet() {
						return !!this.isContextual(100) && this.hasFollowingBindingAtom();
					}
					chStartsBindingIdentifier(ch, pos) {
						if (isIdentifierStart(ch)) {
							if (keywordRelationalOperator.lastIndex = pos, keywordRelationalOperator.test(this.input)) {
								const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
								if (!isIdentifierChar(endCh) && 92 !== endCh) return !1;
							}
							return !0;
						}
						return 92 === ch;
					}
					chStartsBindingPattern(ch) {
						return 91 === ch || 123 === ch;
					}
					hasFollowingBindingAtom() {
						const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
						return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
					}
					hasInLineFollowingBindingIdentifierOrBrace() {
						const next = this.nextTokenInLineStart(), nextCh = this.codePointAtPos(next);
						return 123 === nextCh || this.chStartsBindingIdentifier(nextCh, next);
					}
					startsUsingForOf() {
						const { type: type$1, containsEsc } = this.lookahead();
						return !(102 === type$1 && !containsEsc) && (tokenIsIdentifier(type$1) && !this.hasFollowingLineBreak() ? (this.expectPlugin("explicitResourceManagement"), !0) : void 0);
					}
					startsAwaitUsing() {
						let next = this.nextTokenInLineStart();
						if (this.isUnparsedContextual(next, "using")) {
							next = this.nextTokenInLineStartSince(next + 5);
							const nextCh = this.codePointAtPos(next);
							if (this.chStartsBindingIdentifier(nextCh, next)) return this.expectPlugin("explicitResourceManagement"), !0;
						}
						return !1;
					}
					parseModuleItem() {
						return this.parseStatementLike(15);
					}
					parseStatementListItem() {
						return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
					}
					parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = !1) {
						let flags = 0;
						return this.options.annexB && !this.state.strict && (flags |= 4, allowLabeledFunction && (flags |= 8)), this.parseStatementLike(flags);
					}
					parseStatement() {
						return this.parseStatementLike(0);
					}
					parseStatementLike(flags) {
						let decorators = null;
						return this.match(26) && (decorators = this.parseDecorators(!0)), this.parseStatementContent(flags, decorators);
					}
					parseStatementContent(flags, decorators) {
						const startType = this.state.type, node = this.startNode(), allowDeclaration = !!(2 & flags), allowFunctionDeclaration = !!(4 & flags), topLevel = 1 & flags;
						switch (startType) {
							case 60: return this.parseBreakContinueStatement(node, !0);
							case 63: return this.parseBreakContinueStatement(node, !1);
							case 64: return this.parseDebuggerStatement(node);
							case 90: return this.parseDoWhileStatement(node);
							case 91: return this.parseForStatement(node);
							case 68:
								if (46 === this.lookaheadCharCode()) break;
								return allowFunctionDeclaration || this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc), this.parseFunctionStatement(node, !1, !allowDeclaration && allowFunctionDeclaration);
							case 80: return allowDeclaration || this.unexpected(), this.parseClass(this.maybeTakeDecorators(decorators, node), !0);
							case 69: return this.parseIfStatement(node);
							case 70: return this.parseReturnStatement(node);
							case 71: return this.parseSwitchStatement(node);
							case 72: return this.parseThrowStatement(node);
							case 73: return this.parseTryStatement(node);
							case 96:
								if (!this.state.containsEsc && this.startsAwaitUsing()) return this.recordAwaitIfAllowed() ? allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, node) : this.raise(Errors.AwaitUsingNotInAsyncContext, node), this.next(), this.parseVarStatement(node, "await using");
								break;
							case 107:
								if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) break;
								return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc) : allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc), this.parseVarStatement(node, "using");
							case 100: {
								if (this.state.containsEsc) break;
								const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
								if (91 !== nextCh) {
									if (!allowDeclaration && this.hasFollowingLineBreak()) break;
									if (!this.chStartsBindingIdentifier(nextCh, next) && 123 !== nextCh) break;
								}
							}
							case 75: allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
							case 74: {
								const kind = this.state.value;
								return this.parseVarStatement(node, kind);
							}
							case 92: return this.parseWhileStatement(node);
							case 76: return this.parseWithStatement(node);
							case 5: return this.parseBlock();
							case 13: return this.parseEmptyStatement(node);
							case 83: {
								const nextTokenCharCode = this.lookaheadCharCode();
								if (40 === nextTokenCharCode || 46 === nextTokenCharCode) break;
							}
							case 82: {
								let result;
								return this.options.allowImportExportEverywhere || topLevel || this.raise(Errors.UnexpectedImportExport, this.state.startLoc), this.next(), 83 === startType ? (result = this.parseImport(node), "ImportDeclaration" !== result.type || result.importKind && "value" !== result.importKind || (this.sawUnambiguousESM = !0)) : (result = this.parseExport(node, decorators), ("ExportNamedDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && ("ExportAllDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && "ExportDefaultDeclaration" !== result.type || (this.sawUnambiguousESM = !0)), this.assertModuleNodeAllowed(result), result;
							}
							default: if (this.isAsyncFunction()) return allowDeclaration || this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc), this.next(), this.parseFunctionStatement(node, !0, !allowDeclaration && allowFunctionDeclaration);
						}
						const maybeName = this.state.value, expr = this.parseExpression();
						return tokenIsIdentifier(startType) && "Identifier" === expr.type && this.eat(14) ? this.parseLabeledStatement(node, maybeName, expr, flags) : this.parseExpressionStatement(node, expr, decorators);
					}
					assertModuleNodeAllowed(node) {
						this.options.allowImportExportEverywhere || this.inModule || this.raise(Errors.ImportOutsideModule, node);
					}
					decoratorsEnabledBeforeExport() {
						return !!this.hasPlugin("decorators-legacy") || this.hasPlugin("decorators") && !1 !== this.getPluginOption("decorators", "decoratorsBeforeExport");
					}
					maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
						return maybeDecorators && (classNode.decorators && classNode.decorators.length > 0 ? ("boolean" != typeof this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]), classNode.decorators.unshift(...maybeDecorators)) : classNode.decorators = maybeDecorators, this.resetStartLocationFromNode(classNode, maybeDecorators[0]), exportNode && this.resetStartLocationFromNode(exportNode, classNode)), classNode;
					}
					canHaveLeadingDecorator() {
						return this.match(80);
					}
					parseDecorators(allowExport) {
						const decorators = [];
						do
							decorators.push(this.parseDecorator());
						while (this.match(26));
						if (this.match(82)) allowExport || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(Errors.DecoratorExportClass, this.state.startLoc);
						else if (!this.canHaveLeadingDecorator()) throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
						return decorators;
					}
					parseDecorator() {
						this.expectOnePlugin(["decorators", "decorators-legacy"]);
						const node = this.startNode();
						if (this.next(), this.hasPlugin("decorators")) {
							const startLoc = this.state.startLoc;
							let expr;
							if (this.match(10)) {
								const startLoc$1 = this.state.startLoc;
								this.next(), expr = this.parseExpression(), this.expect(11), expr = this.wrapParenthesis(startLoc$1, expr);
								const paramsStartLoc = this.state.startLoc;
								node.expression = this.parseMaybeDecoratorArguments(expr), !1 === this.getPluginOption("decorators", "allowCallParenthesized") && node.expression !== expr && this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
							} else {
								for (expr = this.parseIdentifier(!1); this.eat(16);) {
									const node$1 = this.startNodeAt(startLoc);
									node$1.object = expr, this.match(139) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), node$1.property = this.parsePrivateName()) : node$1.property = this.parseIdentifier(!0), node$1.computed = !1, expr = this.finishNode(node$1, "MemberExpression");
								}
								node.expression = this.parseMaybeDecoratorArguments(expr);
							}
						} else node.expression = this.parseExprSubscripts();
						return this.finishNode(node, "Decorator");
					}
					parseMaybeDecoratorArguments(expr) {
						if (this.eat(10)) {
							const node = this.startNodeAtNode(expr);
							return node.callee = expr, node.arguments = this.parseCallExpressionArguments(11), this.toReferencedList(node.arguments), this.finishNode(node, "CallExpression");
						}
						return expr;
					}
					parseBreakContinueStatement(node, isBreak) {
						return this.next(), this.isLineTerminator() ? node.label = null : (node.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(node, isBreak), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
					}
					verifyBreakContinue(node, isBreak) {
						let i;
						for (i = 0; i < this.state.labels.length; ++i) {
							const lab = this.state.labels[i];
							if (null == node.label || lab.name === node.label.name) {
								if (null != lab.kind && (isBreak || 1 === lab.kind)) break;
								if (node.label && isBreak) break;
							}
						}
						if (i === this.state.labels.length) {
							const type$1 = isBreak ? "BreakStatement" : "ContinueStatement";
							this.raise(Errors.IllegalBreakContinue, node, { type: type$1 });
						}
					}
					parseDebuggerStatement(node) {
						return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
					}
					parseHeaderExpression() {
						this.expect(10);
						const val = this.parseExpression();
						return this.expect(11), val;
					}
					parseDoWhileStatement(node) {
						return this.next(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.expect(92), node.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(node, "DoWhileStatement");
					}
					parseForStatement(node) {
						this.next(), this.state.labels.push(loopLabel);
						let awaitAt = null;
						if (this.isContextual(96) && this.recordAwaitIfAllowed() && (awaitAt = this.state.startLoc, this.next()), this.scope.enter(0), this.expect(10), this.match(13)) return null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, null);
						const startsWithLet = this.isContextual(100);
						{
							const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing(), starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf(), isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
							if (this.match(74) || this.match(75) || isLetOrUsing) {
								const initNode = this.startNode();
								let kind;
								startsWithAwaitUsing ? (kind = "await using", this.recordAwaitIfAllowed() || this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc), this.next()) : kind = this.state.value, this.next(), this.parseVar(initNode, !0, kind);
								const init$2 = this.finishNode(initNode, "VariableDeclaration"), isForIn = this.match(58);
								return isForIn && starsWithUsingDeclaration && this.raise(Errors.ForInUsing, init$2), (isForIn || this.isContextual(102)) && 1 === init$2.declarations.length ? this.parseForIn(node, init$2, awaitAt) : (null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init$2));
							}
						}
						const startsWithAsync = this.isContextual(95), refExpressionErrors = new ExpressionErrors(), init$1 = this.parseExpression(!0, refExpressionErrors), isForOf = this.isContextual(102);
						if (isForOf && (startsWithLet && this.raise(Errors.ForOfLet, init$1), null === awaitAt && startsWithAsync && "Identifier" === init$1.type && this.raise(Errors.ForOfAsync, init$1)), isForOf || this.match(58)) {
							this.checkDestructuringPrivate(refExpressionErrors), this.toAssignable(init$1, !0);
							const type$1 = isForOf ? "ForOfStatement" : "ForInStatement";
							return this.checkLVal(init$1, { type: type$1 }), this.parseForIn(node, init$1, awaitAt);
						}
						return this.checkExpressionErrors(refExpressionErrors, !0), null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init$1);
					}
					parseFunctionStatement(node, isAsync, isHangingDeclaration) {
						return this.next(), this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
					}
					parseIfStatement(node) {
						return this.next(), node.test = this.parseHeaderExpression(), node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(node, "IfStatement");
					}
					parseReturnStatement(node) {
						return this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(Errors.IllegalReturn, this.state.startLoc), this.next(), this.isLineTerminator() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
					}
					parseSwitchStatement(node) {
						this.next(), node.discriminant = this.parseHeaderExpression();
						const cases = node.cases = [];
						let cur;
						this.expect(5), this.state.labels.push(switchLabel), this.scope.enter(0);
						for (let sawDefault; !this.match(8);) if (this.match(61) || this.match(65)) {
							const isCase = this.match(61);
							cur && this.finishNode(cur, "SwitchCase"), cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc), sawDefault = !0, cur.test = null), this.expect(14);
						} else cur ? cur.consequent.push(this.parseStatementListItem()) : this.unexpected();
						return this.scope.exit(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(node, "SwitchStatement");
					}
					parseThrowStatement(node) {
						return this.next(), this.hasPrecedingLineBreak() && this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
					}
					parseCatchClauseParam() {
						const param = this.parseBindingAtom();
						return this.scope.enter(this.options.annexB && "Identifier" === param.type ? 8 : 0), this.checkLVal(param, { type: "CatchClause" }, 9), param;
					}
					parseTryStatement(node) {
						if (this.next(), node.block = this.parseBlock(), node.handler = null, this.match(62)) {
							const clause = this.startNode();
							this.next(), this.match(10) ? (this.expect(10), clause.param = this.parseCatchClauseParam(), this.expect(11)) : (clause.param = null, this.scope.enter(0)), clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(!1, !1)), this.scope.exit(), node.handler = this.finishNode(clause, "CatchClause");
						}
						return node.finalizer = this.eat(67) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(Errors.NoCatchOrFinally, node), this.finishNode(node, "TryStatement");
					}
					parseVarStatement(node, kind, allowMissingInitializer = !1) {
						return this.next(), this.parseVar(node, !1, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
					}
					parseWhileStatement(node) {
						return this.next(), node.test = this.parseHeaderExpression(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.finishNode(node, "WhileStatement");
					}
					parseWithStatement(node) {
						return this.state.strict && this.raise(Errors.StrictWith, this.state.startLoc), this.next(), node.object = this.parseHeaderExpression(), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.finishNode(node, "WithStatement");
					}
					parseEmptyStatement(node) {
						return this.next(), this.finishNode(node, "EmptyStatement");
					}
					parseLabeledStatement(node, maybeName, expr, flags) {
						for (const label of this.state.labels) label.name === maybeName && this.raise(Errors.LabelRedeclaration, expr, { labelName: maybeName });
						const kind = (token = this.state.type) >= 90 && token <= 92 ? 1 : this.match(71) ? 2 : null;
						var token;
						for (let i = this.state.labels.length - 1; i >= 0; i--) {
							const label = this.state.labels[i];
							if (label.statementStart !== node.start) break;
							label.statementStart = this.sourceToOffsetPos(this.state.start), label.kind = kind;
						}
						return this.state.labels.push({
							name: maybeName,
							kind,
							statementStart: this.sourceToOffsetPos(this.state.start)
						}), node.body = 8 & flags ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(!0) : this.parseStatement(), this.state.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
					}
					parseExpressionStatement(node, expr, decorators) {
						return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
					}
					parseBlock(allowDirectives = !1, createNewLexicalScope = !0, afterBlockParse) {
						const node = this.startNode();
						return allowDirectives && this.state.strictErrors.clear(), this.expect(5), createNewLexicalScope && this.scope.enter(0), this.parseBlockBody(node, allowDirectives, !1, 8, afterBlockParse), createNewLexicalScope && this.scope.exit(), this.finishNode(node, "BlockStatement");
					}
					isValidDirective(stmt) {
						return "ExpressionStatement" === stmt.type && "StringLiteral" === stmt.expression.type && !stmt.expression.extra.parenthesized;
					}
					parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
						const body = node.body = [], directives = node.directives = [];
						this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
					}
					parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
						const oldStrict = this.state.strict;
						let hasStrictModeDirective = !1, parsedNonDirective = !1;
						for (; !this.match(end);) {
							const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
							if (directives && !parsedNonDirective) {
								if (this.isValidDirective(stmt)) {
									const directive = this.stmtToDirective(stmt);
									directives.push(directive), hasStrictModeDirective || "use strict" !== directive.value.value || (hasStrictModeDirective = !0, this.setStrict(!0));
									continue;
								}
								parsedNonDirective = !0, this.state.strictErrors.clear();
							}
							body.push(stmt);
						}
						afterBlockParse?.call(this, hasStrictModeDirective), oldStrict || this.setStrict(!1), this.next();
					}
					parseFor(node, init$1) {
						return node.init = init$1, this.semicolon(!1), node.test = this.match(13) ? null : this.parseExpression(), this.semicolon(!1), node.update = this.match(11) ? null : this.parseExpression(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, "ForStatement");
					}
					parseForIn(node, init$1, awaitAt) {
						const isForIn = this.match(58);
						return this.next(), isForIn ? null !== awaitAt && this.unexpected(awaitAt) : node.await = null !== awaitAt, "VariableDeclaration" !== init$1.type || null == init$1.declarations[0].init || isForIn && this.options.annexB && !this.state.strict && "var" === init$1.kind && "Identifier" === init$1.declarations[0].id.type || this.raise(Errors.ForInOfLoopInitializer, init$1, { type: isForIn ? "ForInStatement" : "ForOfStatement" }), "AssignmentPattern" === init$1.type && this.raise(Errors.InvalidLhs, init$1, { ancestor: { type: "ForStatement" } }), node.left = init$1, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
					}
					parseVar(node, isFor, kind, allowMissingInitializer = !1) {
						const declarations = node.declarations = [];
						for (node.kind = kind;;) {
							const decl = this.startNode();
							if (this.parseVarId(decl, kind), decl.init = this.eat(29) ? isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, null !== decl.init || allowMissingInitializer || ("Identifier" === decl.id.type || isFor && (this.match(58) || this.isContextual(102)) ? "const" !== kind && "using" !== kind && "await using" !== kind || this.match(58) || this.isContextual(102) || this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind }) : this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind: "destructuring" })), declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(12)) break;
						}
						return node;
					}
					parseVarId(decl, kind) {
						const id = this.parseBindingAtom();
						"using" !== kind && "await using" !== kind || "ArrayPattern" !== id.type && "ObjectPattern" !== id.type || this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start), this.checkLVal(id, { type: "VariableDeclarator" }, "var" === kind ? 5 : 8201), decl.id = id;
					}
					parseAsyncFunctionExpression(node) {
						return this.parseFunction(node, 8);
					}
					parseFunction(node, flags = 0) {
						const hangingDeclaration = 2 & flags, isDeclaration = !!(1 & flags), requireId = isDeclaration && !(4 & flags), isAsync = !!(8 & flags);
						this.initFunction(node, isAsync), this.match(55) && (hangingDeclaration && this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc), this.next(), node.generator = !0), isDeclaration && (node.id = this.parseFunctionId(requireId));
						const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
						return this.state.maybeInArrowParameters = !1, this.scope.enter(2), this.prodParam.enter(functionFlags(isAsync, node.generator)), isDeclaration || (node.id = this.parseFunctionId()), this.parseFunctionParams(node, !1), this.withSmartMixTopicForbiddingContext(() => {
							this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
						}), this.prodParam.exit(), this.scope.exit(), isDeclaration && !hangingDeclaration && this.registerFunctionStatementId(node), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, node;
					}
					parseFunctionId(requireId) {
						return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
					}
					parseFunctionParams(node, isConstructor) {
						this.expect(10), this.expressionScope.enter(new ExpressionScope(3)), node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0)), this.expressionScope.exit();
					}
					registerFunctionStatementId(node) {
						node.id && this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
					}
					parseClass(node, isStatement, optionalId) {
						this.next();
						const oldStrict = this.state.strict;
						return this.state.strict = !0, this.parseClassId(node, isStatement, optionalId), this.parseClassSuper(node), node.body = this.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
					}
					isClassProperty() {
						return this.match(29) || this.match(13) || this.match(8);
					}
					isClassMethod() {
						return this.match(10);
					}
					nameIsConstructor(key) {
						return "Identifier" === key.type && "constructor" === key.name || "StringLiteral" === key.type && "constructor" === key.value;
					}
					isNonstaticConstructor(method) {
						return !method.computed && !method.static && this.nameIsConstructor(method.key);
					}
					parseClassBody(hadSuperClass, oldStrict) {
						this.classScope.enter();
						const state = {
							hadConstructor: !1,
							hadSuperClass
						};
						let decorators = [];
						const classBody = this.startNode();
						if (classBody.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
							for (; !this.match(8);) {
								if (this.eat(13)) {
									if (decorators.length > 0) throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
									continue;
								}
								if (this.match(26)) {
									decorators.push(this.parseDecorator());
									continue;
								}
								const member = this.startNode();
								decorators.length && (member.decorators = decorators, this.resetStartLocationFromNode(member, decorators[0]), decorators = []), this.parseClassMember(classBody, member, state), "constructor" === member.kind && member.decorators && member.decorators.length > 0 && this.raise(Errors.DecoratorConstructor, member);
							}
						}), this.state.strict = oldStrict, this.next(), decorators.length) throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
						return this.classScope.exit(), this.finishNode(classBody, "ClassBody");
					}
					parseClassMemberFromModifier(classBody, member) {
						const key = this.parseIdentifier(!0);
						if (this.isClassMethod()) {
							const method = member;
							return method.kind = "method", method.computed = !1, method.key = key, method.static = !1, this.pushClassMethod(classBody, method, !1, !1, !1, !1), !0;
						}
						if (this.isClassProperty()) {
							const prop = member;
							return prop.computed = !1, prop.key = key, prop.static = !1, classBody.body.push(this.parseClassProperty(prop)), !0;
						}
						return this.resetPreviousNodeTrailingComments(key), !1;
					}
					parseClassMember(classBody, member, state) {
						const isStatic = this.isContextual(106);
						if (isStatic) {
							if (this.parseClassMemberFromModifier(classBody, member)) return;
							if (this.eat(5)) return void this.parseClassStaticBlock(classBody, member);
						}
						this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
					}
					parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
						const publicMethod = member, privateMethod = member, publicProp = member, privateProp = member, accessorProp = member, method = publicMethod, publicMember = publicMethod;
						if (member.static = isStatic, this.parsePropertyNamePrefixOperator(member), this.eat(55)) {
							method.kind = "method";
							const isPrivateName = this.match(139);
							return this.parseClassElementName(method), isPrivateName ? void this.pushClassPrivateMethod(classBody, privateMethod, !0, !1) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsGenerator, publicMethod.key), void this.pushClassMethod(classBody, publicMethod, !0, !1, !1, !1));
						}
						const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type), key = this.parseClassElementName(member), maybeContextualKw = isContextual ? key.name : null, isPrivate = this.isPrivateName(key), maybeQuestionTokenStartLoc = this.state.startLoc;
						if (this.parsePostMemberNameModifiers(publicMember), this.isClassMethod()) {
							if (method.kind = "method", isPrivate) return void this.pushClassPrivateMethod(classBody, privateMethod, !1, !1);
							const isConstructor = this.isNonstaticConstructor(publicMethod);
							let allowsDirectSuper = !1;
							isConstructor && (publicMethod.kind = "constructor", state.hadConstructor && !this.hasPlugin("typescript") && this.raise(Errors.DuplicateConstructor, key), isConstructor && this.hasPlugin("typescript") && member.override && this.raise(Errors.OverrideOnConstructor, key), state.hadConstructor = !0, allowsDirectSuper = state.hadSuperClass), this.pushClassMethod(classBody, publicMethod, !1, !1, isConstructor, allowsDirectSuper);
						} else if (this.isClassProperty()) isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp);
						else if ("async" !== maybeContextualKw || this.isLineTerminator()) if ("get" !== maybeContextualKw && "set" !== maybeContextualKw || this.match(55) && this.isLineTerminator()) if ("accessor" !== maybeContextualKw || this.isLineTerminator()) this.isLineTerminator() ? isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp) : this.unexpected();
						else {
							this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(key);
							const isPrivate$1 = this.match(139);
							this.parseClassElementName(publicProp), this.pushClassAccessorProperty(classBody, accessorProp, isPrivate$1);
						}
						else {
							this.resetPreviousNodeTrailingComments(key), method.kind = maybeContextualKw;
							const isPrivate$1 = this.match(139);
							this.parseClassElementName(publicMethod), isPrivate$1 ? this.pushClassPrivateMethod(classBody, privateMethod, !1, !1) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAccessor, publicMethod.key), this.pushClassMethod(classBody, publicMethod, !1, !1, !1, !1)), this.checkGetterSetterParams(publicMethod);
						}
						else {
							this.resetPreviousNodeTrailingComments(key);
							const isGenerator = this.eat(55);
							publicMember.optional && this.unexpected(maybeQuestionTokenStartLoc), method.kind = "method";
							const isPrivate$1 = this.match(139);
							this.parseClassElementName(method), this.parsePostMemberNameModifiers(publicMember), isPrivate$1 ? this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, !0) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAsync, publicMethod.key), this.pushClassMethod(classBody, publicMethod, isGenerator, !0, !1, !1));
						}
					}
					parseClassElementName(member) {
						const { type: type$1, value: value$1 } = this.state;
						if (132 !== type$1 && 134 !== type$1 || !member.static || "prototype" !== value$1 || this.raise(Errors.StaticPrototype, this.state.startLoc), 139 === type$1) {
							"constructor" === value$1 && this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
							const key = this.parsePrivateName();
							return member.key = key, key;
						}
						return this.parsePropertyName(member), member.key;
					}
					parseClassStaticBlock(classBody, member) {
						var _member$decorators;
						this.scope.enter(208);
						const oldLabels = this.state.labels;
						this.state.labels = [], this.prodParam.enter(0);
						const body = member.body = [];
						this.parseBlockOrModuleBlockBody(body, void 0, !1, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = oldLabels, classBody.body.push(this.finishNode(member, "StaticBlock")), null != (_member$decorators = member.decorators) && _member$decorators.length && this.raise(Errors.DecoratorStaticBlock, member);
					}
					pushClassProperty(classBody, prop) {
						!prop.computed && this.nameIsConstructor(prop.key) && this.raise(Errors.ConstructorClassField, prop.key), classBody.body.push(this.parseClassProperty(prop));
					}
					pushClassPrivateProperty(classBody, prop) {
						const node = this.parseClassPrivateProperty(prop);
						classBody.body.push(node), this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
					}
					pushClassAccessorProperty(classBody, prop, isPrivate) {
						isPrivate || prop.computed || !this.nameIsConstructor(prop.key) || this.raise(Errors.ConstructorClassField, prop.key);
						const node = this.parseClassAccessorProperty(prop);
						classBody.body.push(node), isPrivate && this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
					}
					pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
						classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", !0));
					}
					pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
						const node = this.parseMethod(method, isGenerator, isAsync, !1, !1, "ClassPrivateMethod", !0);
						classBody.body.push(node);
						const kind = "get" === node.kind ? node.static ? 6 : 2 : "set" === node.kind ? node.static ? 5 : 1 : 0;
						this.declareClassPrivateMethodInScope(node, kind);
					}
					declareClassPrivateMethodInScope(node, kind) {
						this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
					}
					parsePostMemberNameModifiers(methodOrProp) {}
					parseClassPrivateProperty(node) {
						return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassPrivateProperty");
					}
					parseClassProperty(node) {
						return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassProperty");
					}
					parseClassAccessorProperty(node) {
						return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassAccessorProperty");
					}
					parseInitializer(node) {
						this.scope.enter(80), this.expressionScope.enter(newExpressionScope()), this.prodParam.enter(0), node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
					}
					parseClassId(node, isStatement, optionalId, bindingType = 8331) {
						if (tokenIsIdentifier(this.state.type)) node.id = this.parseIdentifier(), isStatement && this.declareNameFromIdentifier(node.id, bindingType);
						else {
							if (!optionalId && isStatement) throw this.raise(Errors.MissingClassName, this.state.startLoc);
							node.id = null;
						}
					}
					parseClassSuper(node) {
						node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
					}
					parseExport(node, decorators) {
						const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, !0), hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier), parseAfterDefault = !hasDefault || this.eat(12), hasStar = parseAfterDefault && this.eatExportStar(node), hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node), parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12)), isFromRequired = hasDefault || hasStar;
						if (hasStar && !hasNamespace) {
							if (hasDefault && this.unexpected(), decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
							return this.parseExportFrom(node, !0), this.finishNode(node, "ExportAllDeclaration");
						}
						const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
						let hasDeclaration;
						if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers && this.unexpected(null, 5), hasNamespace && parseAfterNamespace && this.unexpected(null, 98), isFromRequired || hasSpecifiers) {
							if (hasDeclaration = !1, decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
							this.parseExportFrom(node, isFromRequired);
						} else hasDeclaration = this.maybeParseExportDeclaration(node);
						if (isFromRequired || hasSpecifiers || hasDeclaration) {
							var _node2$declaration;
							const node2 = node;
							if (this.checkExport(node2, !0, !1, !!node2.source), "ClassDeclaration" === (null == (_node2$declaration = node2.declaration) ? void 0 : _node2$declaration.type)) this.maybeTakeDecorators(decorators, node2.declaration, node2);
							else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
							return this.finishNode(node2, "ExportNamedDeclaration");
						}
						if (this.eat(65)) {
							const node2 = node, decl = this.parseExportDefaultExpression();
							if (node2.declaration = decl, "ClassDeclaration" === decl.type) this.maybeTakeDecorators(decorators, decl, node2);
							else if (decorators) throw this.raise(Errors.UnsupportedDecoratorExport, node);
							return this.checkExport(node2, !0, !0), this.finishNode(node2, "ExportDefaultDeclaration");
						}
						this.unexpected(null, 5);
					}
					eatExportStar(node) {
						return this.eat(55);
					}
					maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
						if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
							this.expectPlugin("exportDefaultFrom", null == maybeDefaultIdentifier ? void 0 : maybeDefaultIdentifier.loc.start);
							const id = maybeDefaultIdentifier || this.parseIdentifier(!0), specifier = this.startNodeAtNode(id);
							return specifier.exported = id, node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], !0;
						}
						return !1;
					}
					maybeParseExportNamespaceSpecifier(node) {
						if (this.isContextual(93)) {
							var _ref;
							(_ref = node).specifiers ?? (_ref.specifiers = []);
							const specifier = this.startNodeAt(this.state.lastTokStartLoc);
							return this.next(), specifier.exported = this.parseModuleExportName(), node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier")), !0;
						}
						return !1;
					}
					maybeParseExportNamedSpecifiers(node) {
						if (this.match(5)) {
							const node2 = node;
							node2.specifiers || (node2.specifiers = []);
							const isTypeExport = "type" === node2.exportKind;
							return node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport)), node2.source = null, node2.declaration = null, this.hasPlugin("importAssertions") && (node2.assertions = []), !0;
						}
						return !1;
					}
					maybeParseExportDeclaration(node) {
						return !!this.shouldParseExportDeclaration() && (node.specifiers = [], node.source = null, this.hasPlugin("importAssertions") && (node.assertions = []), node.declaration = this.parseExportDeclaration(node), !0);
					}
					isAsyncFunction() {
						if (!this.isContextual(95)) return !1;
						const next = this.nextTokenInLineStart();
						return this.isUnparsedContextual(next, "function");
					}
					parseExportDefaultExpression() {
						const expr = this.startNode();
						if (this.match(68)) return this.next(), this.parseFunction(expr, 5);
						if (this.isAsyncFunction()) return this.next(), this.next(), this.parseFunction(expr, 13);
						if (this.match(80)) return this.parseClass(expr, !0, !0);
						if (this.match(26)) return this.hasPlugin("decorators") && !0 === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, this.state.startLoc), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(!1), this.startNode()), !0, !0);
						if (this.match(75) || this.match(74) || this.isLet()) throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
						const res = this.parseMaybeAssignAllowIn();
						return this.semicolon(), res;
					}
					parseExportDeclaration(node) {
						if (this.match(80)) return this.parseClass(this.startNode(), !0, !1);
						return this.parseStatementListItem();
					}
					isExportDefaultSpecifier() {
						const { type: type$1 } = this.state;
						if (tokenIsIdentifier(type$1)) {
							if (95 === type$1 && !this.state.containsEsc || 100 === type$1) return !1;
							if ((130 === type$1 || 129 === type$1) && !this.state.containsEsc) {
								const { type: nextType } = this.lookahead();
								if (tokenIsIdentifier(nextType) && 98 !== nextType || 5 === nextType) return this.expectOnePlugin(["flow", "typescript"]), !1;
							}
						} else if (!this.match(65)) return !1;
						const next = this.nextTokenStart(), hasFrom = this.isUnparsedContextual(next, "from");
						if (44 === this.input.charCodeAt(next) || tokenIsIdentifier(this.state.type) && hasFrom) return !0;
						if (this.match(65) && hasFrom) {
							const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
							return 34 === nextAfterFrom || 39 === nextAfterFrom;
						}
						return !1;
					}
					parseExportFrom(node, expect) {
						this.eatContextual(98) ? (node.source = this.parseImportSource(), this.checkExport(node), this.maybeParseImportAttributes(node), this.checkJSONModuleImport(node)) : expect && this.unexpected(), this.semicolon();
					}
					shouldParseExportDeclaration() {
						const { type: type$1 } = this.state;
						return 26 === type$1 && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (!0 === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, this.state.startLoc), !0) : this.isContextual(107) || this.isContextual(96) && this.startsAwaitUsing() ? (this.raise(Errors.UsingDeclarationExport, this.state.startLoc), !0) : 74 === type$1 || 75 === type$1 || 68 === type$1 || 80 === type$1 || this.isLet() || this.isAsyncFunction();
					}
					checkExport(node, checkNames, isDefault, isFrom) {
						var _node$specifiers;
						if (checkNames) {
							if (isDefault) {
								if (this.checkDuplicateExports(node, "default"), this.hasPlugin("exportDefaultFrom")) {
									var _declaration$extra;
									const declaration = node.declaration;
									"Identifier" !== declaration.type || "from" !== declaration.name || declaration.end - declaration.start != 4 || null != (_declaration$extra = declaration.extra) && _declaration$extra.parenthesized || this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
								}
							} else if (null != (_node$specifiers = node.specifiers) && _node$specifiers.length) for (const specifier of node.specifiers) {
								const { exported } = specifier, exportName = "Identifier" === exported.type ? exported.name : exported.value;
								if (this.checkDuplicateExports(specifier, exportName), !isFrom && specifier.local) {
									const { local } = specifier;
									"Identifier" !== local.type ? this.raise(Errors.ExportBindingIsString, specifier, {
										localName: local.value,
										exportName
									}) : (this.checkReservedWord(local.name, local.loc.start, !0, !1), this.scope.checkLocalExport(local));
								}
							}
							else if (node.declaration) {
								const decl = node.declaration;
								if ("FunctionDeclaration" === decl.type || "ClassDeclaration" === decl.type) {
									const { id } = decl;
									if (!id) throw new Error("Assertion failure");
									this.checkDuplicateExports(node, id.name);
								} else if ("VariableDeclaration" === decl.type) for (const declaration of decl.declarations) this.checkDeclaration(declaration.id);
							}
						}
					}
					checkDeclaration(node) {
						if ("Identifier" === node.type) this.checkDuplicateExports(node, node.name);
						else if ("ObjectPattern" === node.type) for (const prop of node.properties) this.checkDeclaration(prop);
						else if ("ArrayPattern" === node.type) for (const elem of node.elements) elem && this.checkDeclaration(elem);
						else "ObjectProperty" === node.type ? this.checkDeclaration(node.value) : "RestElement" === node.type ? this.checkDeclaration(node.argument) : "AssignmentPattern" === node.type && this.checkDeclaration(node.left);
					}
					checkDuplicateExports(node, exportName) {
						this.exportedIdentifiers.has(exportName) && ("default" === exportName ? this.raise(Errors.DuplicateDefaultExport, node) : this.raise(Errors.DuplicateExport, node, { exportName })), this.exportedIdentifiers.add(exportName);
					}
					parseExportSpecifiers(isInTypeExport) {
						const nodes = [];
						let first = !0;
						for (this.expect(5); !this.eat(8);) {
							if (first) first = !1;
							else if (this.expect(12), this.eat(8)) break;
							const isMaybeTypeOnly = this.isContextual(130), isString = this.match(134), node = this.startNode();
							node.local = this.parseModuleExportName(), nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
						}
						return nodes;
					}
					parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
						return this.eatContextual(93) ? node.exported = this.parseModuleExportName() : isString ? node.exported = cloneStringLiteral(node.local) : node.exported || (node.exported = cloneIdentifier(node.local)), this.finishNode(node, "ExportSpecifier");
					}
					parseModuleExportName() {
						if (this.match(134)) {
							const result = this.parseStringLiteral(this.state.value), surrogate = loneSurrogate.exec(result.value);
							return surrogate && this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, { surrogateCharCode: surrogate[0].charCodeAt(0) }), result;
						}
						return this.parseIdentifier(!0);
					}
					isJSONModuleImport(node) {
						return null != node.assertions && node.assertions.some(({ key, value: value$1 }) => "json" === value$1.value && ("Identifier" === key.type ? "type" === key.name : "type" === key.value));
					}
					checkImportReflection(node) {
						const { specifiers } = node, singleBindingType = 1 === specifiers.length ? specifiers[0].type : null;
						if ("source" === node.phase) "ImportDefaultSpecifier" !== singleBindingType && this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
						else if ("defer" === node.phase) "ImportNamespaceSpecifier" !== singleBindingType && this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
						else if (node.module) {
							var _node$assertions;
							"ImportDefaultSpecifier" !== singleBindingType && this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start), (null == (_node$assertions = node.assertions) ? void 0 : _node$assertions.length) > 0 && this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
						}
					}
					checkJSONModuleImport(node) {
						if (this.isJSONModuleImport(node) && "ExportAllDeclaration" !== node.type) {
							const { specifiers } = node;
							if (null != specifiers) {
								const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
									let imported;
									if ("ExportSpecifier" === specifier.type ? imported = specifier.local : "ImportSpecifier" === specifier.type && (imported = specifier.imported), void 0 !== imported) return "Identifier" === imported.type ? "default" !== imported.name : "default" !== imported.value;
								});
								void 0 !== nonDefaultNamedSpecifier && this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
							}
						}
					}
					isPotentialImportPhase(isExport) {
						return !isExport && (this.isContextual(105) || this.isContextual(97) || this.isContextual(127));
					}
					applyImportPhase(node, isExport, phase, loc) {
						isExport || ("module" === phase ? (this.expectPlugin("importReflection", loc), node.module = !0) : this.hasPlugin("importReflection") && (node.module = !1), "source" === phase ? (this.expectPlugin("sourcePhaseImports", loc), node.phase = "source") : "defer" === phase ? (this.expectPlugin("deferredImportEvaluation", loc), node.phase = "defer") : this.hasPlugin("sourcePhaseImports") && (node.phase = null));
					}
					parseMaybeImportPhase(node, isExport) {
						if (!this.isPotentialImportPhase(isExport)) return this.applyImportPhase(node, isExport, null), null;
						const phaseIdentifier = this.parseIdentifier(!0), { type: type$1 } = this.state;
						return (tokenIsKeywordOrIdentifier(type$1) ? 98 !== type$1 || 102 === this.lookaheadCharCode() : 12 !== type$1) ? (this.resetPreviousIdentifierLeadingComments(phaseIdentifier), this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start), null) : (this.applyImportPhase(node, isExport, null), phaseIdentifier);
					}
					isPrecedingIdImportPhase(phase) {
						const { type: type$1 } = this.state;
						return tokenIsIdentifier(type$1) ? 98 !== type$1 || 102 === this.lookaheadCharCode() : 12 !== type$1;
					}
					parseImport(node) {
						return this.match(134) ? this.parseImportSourceAndAttributes(node) : this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, !1));
					}
					parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
						node.specifiers = [];
						const parseNext = !this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) || this.eat(12), hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
						return parseNext && !hasStar && this.parseNamedImportSpecifiers(node), this.expectContextual(98), this.parseImportSourceAndAttributes(node);
					}
					parseImportSourceAndAttributes(node) {
						return node.specifiers ??= [], node.source = this.parseImportSource(), this.maybeParseImportAttributes(node), this.checkImportReflection(node), this.checkJSONModuleImport(node), this.semicolon(), this.finishNode(node, "ImportDeclaration");
					}
					parseImportSource() {
						return this.match(134) || this.unexpected(), this.parseExprAtom();
					}
					parseImportSpecifierLocal(node, specifier, type$1) {
						specifier.local = this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type$1));
					}
					finishImportSpecifier(specifier, type$1, bindingType = 8201) {
						return this.checkLVal(specifier.local, { type: type$1 }, bindingType), this.finishNode(specifier, type$1);
					}
					parseImportAttributes() {
						this.expect(5);
						const attrs = [], attrNames = new Set();
						do {
							if (this.match(8)) break;
							const node = this.startNode(), keyName = this.state.value;
							if (attrNames.has(keyName) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, { key: keyName }), attrNames.add(keyName), this.match(134) ? node.key = this.parseStringLiteral(keyName) : node.key = this.parseIdentifier(!0), this.expect(14), !this.match(134)) throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
							node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
						} while (this.eat(12));
						return this.expect(8), attrs;
					}
					parseModuleAttributes() {
						const attrs = [], attributes = new Set();
						do {
							const node = this.startNode();
							if (node.key = this.parseIdentifier(!0), "type" !== node.key.name && this.raise(Errors.ModuleAttributeDifferentFromType, node.key), attributes.has(node.key.name) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, { key: node.key.name }), attributes.add(node.key.name), this.expect(14), !this.match(134)) throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
							node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
						} while (this.eat(12));
						return attrs;
					}
					maybeParseImportAttributes(node) {
						let attributes;
						var useWith = !1;
						if (this.match(76)) {
							if (this.hasPrecedingLineBreak() && 40 === this.lookaheadCharCode()) return;
							this.next(), attributes = this.hasPlugin("moduleAttributes") ? this.parseModuleAttributes() : this.parseImportAttributes(), useWith = !0;
						} else this.isContextual(94) && !this.hasPrecedingLineBreak() ? (this.hasPlugin("deprecatedImportAssert") || this.hasPlugin("importAssertions") || this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc), this.hasPlugin("importAssertions") || this.addExtra(node, "deprecatedAssertSyntax", !0), this.next(), attributes = this.parseImportAttributes()) : attributes = [];
						!useWith && this.hasPlugin("importAssertions") ? node.assertions = attributes : node.attributes = attributes;
					}
					maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
						if (maybeDefaultIdentifier) {
							const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
							return specifier.local = maybeDefaultIdentifier, node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier")), !0;
						}
						return !!tokenIsKeywordOrIdentifier(this.state.type) && (this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier"), !0);
					}
					maybeParseStarImportSpecifier(node) {
						if (this.match(55)) {
							const specifier = this.startNode();
							return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier"), !0;
						}
						return !1;
					}
					parseNamedImportSpecifiers(node) {
						let first = !0;
						for (this.expect(5); !this.eat(8);) {
							if (first) first = !1;
							else {
								if (this.eat(14)) throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
								if (this.expect(12), this.eat(8)) break;
							}
							const specifier = this.startNode(), importedIsString = this.match(134), isMaybeTypeOnly = this.isContextual(130);
							specifier.imported = this.parseModuleExportName();
							const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, "type" === node.importKind || "typeof" === node.importKind, isMaybeTypeOnly, void 0);
							node.specifiers.push(importSpecifier);
						}
					}
					parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
						if (this.eatContextual(93)) specifier.local = this.parseIdentifier();
						else {
							const { imported } = specifier;
							if (importedIsString) throw this.raise(Errors.ImportBindingIsString, specifier, { importName: imported.value });
							this.checkReservedWord(imported.name, specifier.loc.start, !0, !0), specifier.local || (specifier.local = cloneIdentifier(imported));
						}
						return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
					}
					isThisParam(param) {
						return "Identifier" === param.type && "this" === param.name;
					}
				}
				class Parser$1 extends StatementParser {
					constructor(options, input, pluginsMap) {
						super(options = function(opts) {
							const options$1 = {
								sourceType: "script",
								sourceFilename: void 0,
								startIndex: 0,
								startColumn: 0,
								startLine: 1,
								allowAwaitOutsideFunction: !1,
								allowReturnOutsideFunction: !1,
								allowNewTargetOutsideFunction: !1,
								allowImportExportEverywhere: !1,
								allowSuperOutsideMethod: !1,
								allowUndeclaredExports: !1,
								plugins: [],
								strictMode: null,
								ranges: !1,
								tokens: !1,
								createImportExpressions: !1,
								createParenthesizedExpressions: !1,
								errorRecovery: !1,
								attachComment: !0,
								annexB: !0
							};
							if (null == opts) return options$1;
							if (null != opts.annexB && !1 !== opts.annexB) throw new Error("The `annexB` option can only be set to `false`.");
							for (const key of Object.keys(options$1)) null != opts[key] && (options$1[key] = opts[key]);
							if (1 === options$1.startLine) null == opts.startIndex && options$1.startColumn > 0 ? options$1.startIndex = options$1.startColumn : null == opts.startColumn && options$1.startIndex > 0 && (options$1.startColumn = options$1.startIndex);
							else if ((null == opts.startColumn || null == opts.startIndex) && null != opts.startIndex) throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");
							return options$1;
						}(options), input), this.options = options, this.initializeScopes(), this.plugins = pluginsMap, this.filename = options.sourceFilename, this.startIndex = options.startIndex;
					}
					getScopeHandler() {
						return ScopeHandler;
					}
					parse() {
						this.enterInitialScopes();
						const file = this.startNode(), program = this.startNode();
						return this.nextToken(), file.errors = null, this.parseTopLevel(file, program), file.errors = this.state.errors, file.comments.length = this.state.commentsLen, file;
					}
				}
				const tokTypes = function(internalTokenTypes) {
					const tokenTypes$1 = {};
					for (const typeName of Object.keys(internalTokenTypes)) tokenTypes$1[typeName] = getExportedToken(internalTokenTypes[typeName]);
					return tokenTypes$1;
				}(tt);
				function getParser(options, input) {
					let cls = Parser$1;
					const pluginsMap = new Map();
					if (null != options && options.plugins) {
						for (const plugin of options.plugins) {
							let name, opts;
							"string" == typeof plugin ? name = plugin : [name, opts] = plugin, pluginsMap.has(name) || pluginsMap.set(name, opts || {});
						}
						(function(pluginsMap$1) {
							if (pluginsMap$1.has("decorators")) {
								if (pluginsMap$1.has("decorators-legacy")) throw new Error("Cannot use the decorators and decorators-legacy plugin together");
								const decoratorsBeforeExport = pluginsMap$1.get("decorators").decoratorsBeforeExport;
								if (null != decoratorsBeforeExport && "boolean" != typeof decoratorsBeforeExport) throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
								const allowCallParenthesized = pluginsMap$1.get("decorators").allowCallParenthesized;
								if (null != allowCallParenthesized && "boolean" != typeof allowCallParenthesized) throw new Error("'allowCallParenthesized' must be a boolean.");
							}
							if (pluginsMap$1.has("flow") && pluginsMap$1.has("typescript")) throw new Error("Cannot combine flow and typescript plugins.");
							if (pluginsMap$1.has("placeholders") && pluginsMap$1.has("v8intrinsic")) throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
							if (pluginsMap$1.has("pipelineOperator")) {
								var _pluginsMap$get;
								const proposal = pluginsMap$1.get("pipelineOperator").proposal;
								if (!PIPELINE_PROPOSALS.includes(proposal)) {
									const proposalList = PIPELINE_PROPOSALS.map((p$1) => `"${p$1}"`).join(", ");
									throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
								}
								const tupleSyntaxIsHash = "hash" === (null == (_pluginsMap$get = pluginsMap$1.get("recordAndTuple")) ? void 0 : _pluginsMap$get.syntaxType);
								if ("hack" === proposal) {
									if (pluginsMap$1.has("placeholders")) throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
									if (pluginsMap$1.has("v8intrinsic")) throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
									const topicToken = pluginsMap$1.get("pipelineOperator").topicToken;
									if (!TOPIC_TOKENS.includes(topicToken)) {
										const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
										throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
									}
									if ("#" === topicToken && tupleSyntaxIsHash) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap$1.get("recordAndTuple")])}\`.`);
								} else if ("smart" === proposal && tupleSyntaxIsHash) throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap$1.get("recordAndTuple")])}\`.`);
							}
							if (pluginsMap$1.has("moduleAttributes")) {
								if (pluginsMap$1.has("deprecatedImportAssert") || pluginsMap$1.has("importAssertions")) throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");
								if ("may-2020" !== pluginsMap$1.get("moduleAttributes").version) throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
							}
							if (pluginsMap$1.has("importAssertions") && pluginsMap$1.has("deprecatedImportAssert")) throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");
							if (!pluginsMap$1.has("deprecatedImportAssert") && pluginsMap$1.has("importAttributes") && pluginsMap$1.get("importAttributes").deprecatedAssertSyntax && pluginsMap$1.set("deprecatedImportAssert", {}), pluginsMap$1.has("recordAndTuple")) {
								const syntaxType = pluginsMap$1.get("recordAndTuple").syntaxType;
								if (null != syntaxType) {
									const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
									if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p$1) => `'${p$1}'`).join(", "));
								}
							}
							if (pluginsMap$1.has("asyncDoExpressions") && !pluginsMap$1.has("doExpressions")) {
								const error$1 = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
								throw error$1.missingPlugins = "doExpressions", error$1;
							}
							if (pluginsMap$1.has("optionalChainingAssign") && "2023-07" !== pluginsMap$1.get("optionalChainingAssign").version) throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
						})(pluginsMap), cls = function(pluginsMap$1) {
							const pluginList = [];
							for (const name of mixinPluginNames) pluginsMap$1.has(name) && pluginList.push(name);
							const key = pluginList.join("|");
							let cls$1 = parserClassCache.get(key);
							if (!cls$1) {
								cls$1 = Parser$1;
								for (const plugin of pluginList) cls$1 = mixinPlugins[plugin](cls$1);
								parserClassCache.set(key, cls$1);
							}
							return cls$1;
						}(pluginsMap);
					}
					return new cls(options, input, pluginsMap);
				}
				const parserClassCache = new Map();
				exports$1.parse = function(input, options) {
					var _options;
					if ("unambiguous" !== (null == (_options = options) ? void 0 : _options.sourceType)) return getParser(options, input).parse();
					options = Object.assign({}, options);
					try {
						options.sourceType = "module";
						const parser = getParser(options, input), ast = parser.parse();
						if (parser.sawUnambiguousESM) return ast;
						if (parser.ambiguousScriptDifferentAst) try {
							return options.sourceType = "script", getParser(options, input).parse();
						} catch (_unused) {}
						else ast.program.sourceType = "script";
						return ast;
					} catch (moduleError) {
						try {
							return options.sourceType = "script", getParser(options, input).parse();
						} catch (_unused2) {}
						throw moduleError;
					}
				}, exports$1.parseExpression = function(input, options) {
					const parser = getParser(options, input);
					return parser.options.strictMode && (parser.state.strict = !0), parser.getExpression();
				}, exports$1.tokTypes = tokTypes;
			},
			"./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				exports$1.A = void 0;
				var _helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _transformerLegacy = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js");
				exports$1.A = (0, _helperPluginUtils.declare)((api$1, options) => {
					api$1.assertVersion(7);
					var { legacy } = options;
					const { version: version$1 } = options;
					if (legacy || "legacy" === version$1) return {
						name: "proposal-decorators",
						inherits: _pluginSyntaxDecorators.default,
						visitor: _transformerLegacy.default
					};
					if (version$1 && "2018-09" !== version$1 && "2021-12" !== version$1 && "2022-03" !== version$1 && "2023-01" !== version$1 && "2023-05" !== version$1 && "2023-11" !== version$1) throw new Error("The '.version' option must be one of 'legacy', '2023-11', '2023-05', '2023-01', '2022-03', or '2021-12'.");
					return api$1.assertVersion("^7.0.2"), (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({
						name: "proposal-decorators",
						api: api$1,
						feature: _helperCreateClassFeaturesPlugin.FEATURES.decorators,
						inherits: _pluginSyntaxDecorators.default,
						decoratorVersion: version$1
					});
				});
			},
			"./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
				const buildClassDecorator = _core.template.statement("\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\n"), buildClassPrototype = (0, _core.template)("\n  CLASS_REF.prototype;\n"), buildGetDescriptor = (0, _core.template)("\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\n"), buildGetObjectInitializer = (0, _core.template)("\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        initializer: function(){\n            return TEMP;\n        }\n    })\n"), WARNING_CALLS = new WeakSet();
				function applyEnsureOrdering(path$9) {
					const identDecorators = (path$9.isClass() ? [path$9, ...path$9.get("body.body")] : path$9.get("properties")).reduce((acc, prop) => acc.concat(prop.node.decorators || []), []).filter((decorator) => !_core.types.isIdentifier(decorator.expression));
					if (0 !== identDecorators.length) return _core.types.sequenceExpression(identDecorators.map((decorator) => {
						const expression = decorator.expression, id = decorator.expression = path$9.scope.generateDeclaredUidIdentifier("dec");
						return _core.types.assignmentExpression("=", id, expression);
					}).concat([path$9.node]));
				}
				function hasClassDecorators(classNode) {
					var _classNode$decorators;
					return !(null == (_classNode$decorators = classNode.decorators) || !_classNode$decorators.length);
				}
				function hasMethodDecorators(body) {
					return body.some((node) => {
						var _node$decorators;
						return null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length;
					});
				}
				function applyTargetDecorators(path$9, state, decoratedProps) {
					const name = path$9.scope.generateDeclaredUidIdentifier(path$9.isClass() ? "class" : "obj"), exprs = decoratedProps.reduce(function(acc, node) {
						let decorators = [];
						if (null != node.decorators && (decorators = node.decorators, node.decorators = null), 0 === decorators.length) return acc;
						if (node.computed) throw path$9.buildCodeFrameError("Computed method/property decorators are not yet supported.");
						const property = _core.types.isLiteral(node.key) ? node.key : _core.types.stringLiteral(node.key.name), target = path$9.isClass() && !node.static ? buildClassPrototype({ CLASS_REF: name }).expression : name;
						if (_core.types.isClassProperty(node, { static: !1 })) {
							const descriptor = path$9.scope.generateDeclaredUidIdentifier("descriptor"), initializer = node.value ? _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(node.value)])) : _core.types.nullLiteral();
							node.value = _core.types.callExpression(state.addHelper("initializerWarningHelper"), [descriptor, _core.types.thisExpression()]), WARNING_CALLS.add(node.value), acc.push(_core.types.assignmentExpression("=", _core.types.cloneNode(descriptor), _core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [
								_core.types.cloneNode(target),
								_core.types.cloneNode(property),
								_core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))),
								_core.types.objectExpression([
									_core.types.objectProperty(_core.types.identifier("configurable"), _core.types.booleanLiteral(!0)),
									_core.types.objectProperty(_core.types.identifier("enumerable"), _core.types.booleanLiteral(!0)),
									_core.types.objectProperty(_core.types.identifier("writable"), _core.types.booleanLiteral(!0)),
									_core.types.objectProperty(_core.types.identifier("initializer"), initializer)
								])
							])));
						} else acc.push(_core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [
							_core.types.cloneNode(target),
							_core.types.cloneNode(property),
							_core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))),
							_core.types.isObjectProperty(node) || _core.types.isClassProperty(node, { static: !0 }) ? buildGetObjectInitializer({
								TEMP: path$9.scope.generateDeclaredUidIdentifier("init"),
								TARGET: _core.types.cloneNode(target),
								PROPERTY: _core.types.cloneNode(property)
							}).expression : buildGetDescriptor({
								TARGET: _core.types.cloneNode(target),
								PROPERTY: _core.types.cloneNode(property)
							}).expression,
							_core.types.cloneNode(target)
						]));
						return acc;
					}, []);
					return _core.types.sequenceExpression([
						_core.types.assignmentExpression("=", _core.types.cloneNode(name), path$9.node),
						_core.types.sequenceExpression(exprs),
						_core.types.cloneNode(name)
					]);
				}
				function decoratedClassToExpression({ node, scope }) {
					if (!hasClassDecorators(node) && !hasMethodDecorators(node.body.body)) return;
					const ref = node.id ? _core.types.cloneNode(node.id) : scope.generateUidIdentifier("class");
					return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(ref, _core.types.toExpression(node))]);
				}
				const visitor = {
					ExportDefaultDeclaration(path$9) {
						const decl = path$9.get("declaration");
						if (!decl.isClassDeclaration()) return;
						const replacement = decoratedClassToExpression(decl);
						if (replacement) {
							const [varDeclPath] = path$9.replaceWithMultiple([replacement, _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(replacement.declarations[0].id), _core.types.identifier("default"))])]);
							decl.node.id || path$9.scope.registerDeclaration(varDeclPath);
						}
					},
					ClassDeclaration(path$9) {
						const replacement = decoratedClassToExpression(path$9);
						if (replacement) {
							const [newPath] = path$9.replaceWith(replacement), decl = newPath.get("declarations.0"), id = decl.node.id, binding = path$9.scope.getOwnBinding(id.name);
							binding.identifier = id, binding.path = decl;
						}
					},
					ClassExpression(path$9, state) {
						const decoratedClass = applyEnsureOrdering(path$9) || function(classPath) {
							if (!hasClassDecorators(classPath.node)) return;
							const decorators = classPath.node.decorators || [];
							classPath.node.decorators = null;
							const name = classPath.scope.generateDeclaredUidIdentifier("class");
							return decorators.map((dec) => dec.expression).reverse().reduce(function(acc, decorator) {
								return buildClassDecorator({
									CLASS_REF: _core.types.cloneNode(name),
									DECORATOR: _core.types.cloneNode(decorator),
									INNER: acc
								}).expression;
							}, classPath.node);
						}(path$9) || function(path$10, state$1) {
							if (hasMethodDecorators(path$10.node.body.body)) return applyTargetDecorators(path$10, state$1, path$10.node.body.body);
						}(path$9, state);
						decoratedClass && path$9.replaceWith(decoratedClass);
					},
					ObjectExpression(path$9, state) {
						const decoratedObject = applyEnsureOrdering(path$9) || function(path$10, state$1) {
							if (hasMethodDecorators(path$10.node.properties)) return applyTargetDecorators(path$10, state$1, path$10.node.properties.filter((prop) => "SpreadElement" !== prop.type));
						}(path$9, state);
						decoratedObject && path$9.replaceWith(decoratedObject);
					},
					AssignmentExpression(path$9, state) {
						WARNING_CALLS.has(path$9.node.right) && path$9.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [
							_core.types.cloneNode(path$9.get("left.object").node),
							_core.types.stringLiteral(path$9.get("left.property").node.name || path$9.get("left.property").node.value),
							_core.types.cloneNode(path$9.get("right.arguments")[0].node),
							_core.types.cloneNode(path$9.get("right.arguments")[1].node)
						]));
					},
					CallExpression(path$9, state) {
						3 === path$9.node.arguments.length && WARNING_CALLS.has(path$9.node.arguments[2]) && path$9.node.callee.name === state.addHelper("defineProperty").name && path$9.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [
							_core.types.cloneNode(path$9.get("arguments")[0].node),
							_core.types.cloneNode(path$9.get("arguments")[1].node),
							_core.types.cloneNode(path$9.get("arguments.2.arguments")[0].node),
							_core.types.cloneNode(path$9.get("arguments.2.arguments")[1].node)
						]));
					}
				};
				exports$1.default = visitor;
			},
			"./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-decorators/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
				exports$1.default = (0, _helperPluginUtils.declare)((api$1, options) => {
					api$1.assertVersion("^7.0.0-0 || >8.0.0-alpha <8.0.0-beta");
					let { version: version$1 } = options;
					{
						const { legacy } = options;
						if (void 0 !== legacy) {
							if ("boolean" != typeof legacy) throw new Error(".legacy must be a boolean.");
							if (void 0 !== version$1) throw new Error("You can either use the .legacy or the .version option, not both.");
						}
						if (void 0 === version$1) version$1 = legacy ? "legacy" : "2018-09";
						else if ("2023-11" !== version$1 && "2023-05" !== version$1 && "2023-01" !== version$1 && "2022-03" !== version$1 && "2021-12" !== version$1 && "2018-09" !== version$1 && "legacy" !== version$1) throw new Error("Unsupported decorators version: " + version$1);
						var { decoratorsBeforeExport } = options;
						if (void 0 === decoratorsBeforeExport) {
							if ("2021-12" === version$1 || "2022-03" === version$1) decoratorsBeforeExport = !1;
							else if ("2018-09" === version$1) throw new Error("The decorators plugin, when .version is '2018-09' or not specified, requires a 'decoratorsBeforeExport' option, whose value must be a boolean.");
						} else {
							if ("legacy" === version$1 || "2022-03" === version$1 || "2023-01" === version$1) throw new Error(`'decoratorsBeforeExport' can't be used with ${version$1} decorators.`);
							if ("boolean" != typeof decoratorsBeforeExport) throw new Error("'decoratorsBeforeExport' must be a boolean.");
						}
					}
					return {
						name: "syntax-decorators",
						manipulateOptions({ generatorOpts }, parserOpts) {
							"legacy" === version$1 ? parserOpts.plugins.push("decorators-legacy") : "2023-01" === version$1 || "2023-05" === version$1 || "2023-11" === version$1 ? parserOpts.plugins.push(["decorators", { allowCallParenthesized: !1 }], "decoratorAutoAccessors") : "2022-03" === version$1 ? parserOpts.plugins.push(["decorators", {
								decoratorsBeforeExport: !1,
								allowCallParenthesized: !1
							}], "decoratorAutoAccessors") : "2021-12" === version$1 ? (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }], "decoratorAutoAccessors"), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport) : "2018-09" === version$1 && (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }]), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport);
						}
					};
				});
			},
			"./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.26.0_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				exports$1.A = void 0;
				var _helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
				exports$1.A = (0, _helperPluginUtils.declare)((api$1) => {
					api$1.assertVersion(7);
					const isPlugin = (plugin, name) => "plugin" === name || Array.isArray(plugin) && "plugin" === plugin[0], options = (plugin) => Array.isArray(plugin) && plugin.length > 1 ? plugin[1] : {};
					return {
						name: "syntax-import-assertions",
						manipulateOptions(opts, { plugins }) {
							for (let i = 0; i < plugins.length; i++) {
								const plugin = plugins[i];
								if (isPlugin(plugin, "deprecatedImportAssert")) return;
								if (isPlugin(plugin, "importAttributes")) return void plugins.splice(i, 1, "deprecatedImportAssert", ["importAttributes", Object.assign({}, options(plugin), { deprecatedAssertSyntax: !0 })]);
							}
							plugins.push("importAssertions");
						}
					};
				});
			},
			"./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
				exports$1.default = (0, _helperPluginUtils.declare)((api$1) => (api$1.assertVersion(7), {
					name: "syntax-jsx",
					manipulateOptions(opts, parserOpts) {
						parserOpts.plugins.some((p$1) => "typescript" === (Array.isArray(p$1) ? p$1[0] : p$1)) || parserOpts.plugins.push("jsx");
					}
				}));
			},
			"./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-typescript/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), removePlugin = function(plugins, name) {
					const indices = [];
					plugins.forEach((plugin, i) => {
						(Array.isArray(plugin) ? plugin[0] : plugin) === name && indices.unshift(i);
					});
					for (const i of indices) plugins.splice(i, 1);
				};
				exports$1.default = (0, _helperPluginUtils.declare)((api$1, opts) => {
					api$1.assertVersion(7);
					const { disallowAmbiguousJSXLike, dts } = opts;
					var { isTSX } = opts;
					return {
						name: "syntax-typescript",
						manipulateOptions(opts$1, parserOpts) {
							{
								const { plugins } = parserOpts;
								removePlugin(plugins, "flow"), removePlugin(plugins, "jsx"), plugins.push("objectRestSpread", "classProperties"), isTSX && plugins.push("jsx");
							}
							parserOpts.plugins.push(["typescript", {
								disallowAmbiguousJSXLike,
								dts
							}]);
						}
					};
				});
			},
			"./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				exports$1.A = void 0;
				var _helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
				exports$1.A = (0, _helperPluginUtils.declare)((api$1) => (api$1.assertVersion(7), {
					name: "transform-export-namespace-from",
					manipulateOptions: (_$2, parser) => parser.plugins.push("exportNamespaceFrom"),
					visitor: { ExportNamedDeclaration(path$9) {
						var _exported$name;
						const { node, scope } = path$9, { specifiers } = node, index = _core.types.isExportDefaultSpecifier(specifiers[0]) ? 1 : 0;
						if (!_core.types.isExportNamespaceSpecifier(specifiers[index])) return;
						const nodes = [];
						1 === index && nodes.push(_core.types.exportNamedDeclaration(null, [specifiers.shift()], node.source));
						const specifier = specifiers.shift(), { exported } = specifier, uid$2 = scope.generateUidIdentifier(null != (_exported$name = exported.name) ? _exported$name : exported.value);
						nodes.push(_core.types.importDeclaration([_core.types.importNamespaceSpecifier(uid$2)], _core.types.cloneNode(node.source)), _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(uid$2), exported)])), node.specifiers.length >= 1 && nodes.push(node);
						const [importDeclaration] = path$9.replaceWithMultiple(nodes);
						path$9.scope.registerDeclaration(importDeclaration);
					} }
				}));
			},
			"./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.transformDynamicImport = function(path$9, noInterop, file) {
					const buildRequire = noInterop ? requireNoInterop : requireInterop;
					path$9.replaceWith((0, _helperModuleTransforms.buildDynamicImport)(path$9.node, !0, !1, (specifier) => buildRequire(specifier, file)));
				};
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js");
				const requireNoInterop = (source) => _core.template.expression.ast`require(${source})`, requireInterop = (source, file) => _core.types.callExpression(file.addHelper("interopRequireWildcard"), [requireNoInterop(source)]);
			},
			"./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.defineCommonJSHook = function(file, hook) {
					let hooks = file.get(commonJSHooksKey);
					hooks || file.set(commonJSHooksKey, hooks = []);
					hooks.push(hook);
				}, exports$1.makeInvokers = function(file) {
					const hooks = file.get(commonJSHooksKey);
					return {
						getWrapperPayload: (...args) => findMap(hooks, (hook) => null == hook.getWrapperPayload ? void 0 : hook.getWrapperPayload(...args)),
						wrapReference: (...args) => findMap(hooks, (hook) => null == hook.wrapReference ? void 0 : hook.wrapReference(...args)),
						buildRequireWrapper: (...args) => findMap(hooks, (hook) => null == hook.buildRequireWrapper ? void 0 : hook.buildRequireWrapper(...args))
					};
				};
				const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
				function findMap(arr, cb) {
					if (arr) for (const el of arr) {
						const res = cb(el);
						if (null != res) return res;
					}
				}
			},
			"./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0, Object.defineProperty(exports$1, "defineCommonJSHook", {
					enumerable: !0,
					get: function() {
						return _hooks.defineCommonJSHook;
					}
				});
				var _helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _helperModuleTransforms = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js"), _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _dynamicImport = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js"), _lazy = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js"), _hooks = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js");
				exports$1.default = (0, _helperPluginUtils.declare)((api$1, options) => {
					var _api$assumption, _api$assumption2, _api$assumption3;
					api$1.assertVersion(7);
					const { strictNamespace = !1, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = !1, allowCommonJSExports = !0, loose = !1 } = options, constantReexports = null != (_api$assumption = api$1.assumption("constantReexports")) ? _api$assumption : loose, enumerableModuleMeta = null != (_api$assumption2 = api$1.assumption("enumerableModuleMeta")) ? _api$assumption2 : loose, noIncompleteNsImportDetection = null != (_api$assumption3 = api$1.assumption("noIncompleteNsImportDetection")) && _api$assumption3;
					if (!("boolean" == typeof lazy || "function" == typeof lazy || Array.isArray(lazy) && lazy.every((item) => "string" == typeof item))) throw new Error(".lazy must be a boolean, array of strings, or a function");
					if ("boolean" != typeof strictNamespace) throw new Error(".strictNamespace must be a boolean, or undefined");
					if ("boolean" != typeof mjsStrictNamespace) throw new Error(".mjsStrictNamespace must be a boolean, or undefined");
					const getAssertion = (localName) => _core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = {
						ReferencedIdentifier(path$9) {
							const localName = path$9.node.name;
							if ("module" !== localName && "exports" !== localName) return;
							const localBinding = path$9.scope.getBinding(localName);
							this.scope.getBinding(localName) !== localBinding || path$9.parentPath.isObjectProperty({ value: path$9.node }) && path$9.parentPath.parentPath.isObjectPattern() || path$9.parentPath.isAssignmentExpression({ left: path$9.node }) || path$9.isAssignmentExpression({ left: path$9.node }) || path$9.replaceWith(getAssertion(localName));
						},
						UpdateExpression(path$9) {
							const arg = path$9.get("argument");
							if (!arg.isIdentifier()) return;
							const localName = arg.node.name;
							if ("module" !== localName && "exports" !== localName) return;
							const localBinding = path$9.scope.getBinding(localName);
							this.scope.getBinding(localName) === localBinding && path$9.replaceWith(_core.types.assignmentExpression(path$9.node.operator[0] + "=", arg.node, getAssertion(localName)));
						},
						AssignmentExpression(path$9) {
							const left = path$9.get("left");
							if (left.isIdentifier()) {
								const localName = left.node.name;
								if ("module" !== localName && "exports" !== localName) return;
								const localBinding = path$9.scope.getBinding(localName);
								if (this.scope.getBinding(localName) !== localBinding) return;
								const right = path$9.get("right");
								right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
							} else if (left.isPattern()) {
								const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).find((localName$1) => ("module" === localName$1 || "exports" === localName$1) && this.scope.getBinding(localName$1) === path$9.scope.getBinding(localName$1));
								if (localName) {
									const right = path$9.get("right");
									right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
								}
							}
						}
					};
					return {
						name: "transform-modules-commonjs",
						pre() {
							this.file.set("@babel/plugin-transform-modules-*", "commonjs"), lazy && (0, _hooks.defineCommonJSHook)(this.file, (0, _lazy.lazyImportsHook)(lazy));
						},
						visitor: {
							["CallExpression" + (api$1.types.importExpression ? "|ImportExpression" : "")](path$9) {
								if (!this.file.has("@babel/plugin-proposal-dynamic-import")) return;
								if (path$9.isCallExpression() && !_core.types.isImport(path$9.node.callee)) return;
								let { scope } = path$9;
								do
									scope.rename("require");
								while (scope = scope.parent);
								(0, _dynamicImport.transformDynamicImport)(path$9, noInterop, this.file);
							},
							Program: { exit(path$9, state) {
								if (!(0, _helperModuleTransforms.isModule)(path$9)) return;
								path$9.scope.rename("exports"), path$9.scope.rename("module"), path$9.scope.rename("require"), path$9.scope.rename("__filename"), path$9.scope.rename("__dirname"), allowCommonJSExports || path$9.traverse(moduleExportsVisitor, { scope: path$9.scope });
								let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);
								moduleName && (moduleName = _core.types.stringLiteral(moduleName));
								const hooks = (0, _hooks.makeInvokers)(this.file), { meta, headers } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path$9, {
									exportName: "exports",
									constantReexports,
									enumerableModuleMeta,
									strict,
									strictMode,
									allowTopLevelThis,
									noInterop,
									importInterop,
									wrapReference: hooks.wrapReference,
									getWrapperPayload: hooks.getWrapperPayload,
									esNamespaceOnly: "string" == typeof state.filename && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace,
									noIncompleteNsImportDetection,
									filename: this.file.opts.filename
								});
								for (const [source, metadata] of meta.source) {
									const loadExpr = _core.types.callExpression(_core.types.identifier("require"), [_core.types.stringLiteral(source)]);
									let header;
									if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {
										if (lazy && "function" === metadata.wrap) throw new Error("Assertion failure");
										header = _core.types.expressionStatement(loadExpr);
									} else {
										const init$1 = (0, _helperModuleTransforms.wrapInterop)(path$9, loadExpr, metadata.interop) || loadExpr;
										if (metadata.wrap) {
											const res = hooks.buildRequireWrapper(metadata.name, init$1, metadata.wrap, metadata.referenced);
											if (!1 === res) continue;
											header = res;
										}
										header ??= _core.template.statement.ast`
                var ${metadata.name} = ${init$1};
              `;
									}
									header.loc = metadata.loc, headers.push(header), headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks.wrapReference));
								}
								(0, _helperModuleTransforms.ensureStatementsHoisted)(headers), path$9.unshiftContainer("body", headers), path$9.get("body").forEach((path$10) => {
									headers.includes(path$10.node) && path$10.isVariableDeclaration() && path$10.scope.registerDeclaration(path$10);
								});
							} }
						}
					};
				});
			},
			"./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.lazyImportsHook = void 0;
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js");
				exports$1.lazyImportsHook = (lazy) => ({
					name: "@babel/plugin-transform-modules-commonjs/lazy",
					version: "7.26.3",
					getWrapperPayload: (source, metadata) => (0, _helperModuleTransforms.isSideEffectImport)(metadata) || metadata.reexportAll ? null : !0 === lazy ? source.includes(".") ? null : "lazy/function" : Array.isArray(lazy) ? lazy.includes(source) ? "lazy/function" : null : "function" == typeof lazy ? lazy(source) ? "lazy/function" : null : void 0,
					buildRequireWrapper(name, init$1, payload, referenced) {
						if ("lazy/function" === payload) return !!referenced && _core.template.statement.ast`
        function ${name}() {
          const data = ${init$1};
          ${name} = function(){ return data; };
          return data;
        }
      `;
					},
					wrapReference(ref, payload) {
						if ("lazy/function" === payload) return _core.types.callExpression(ref, []);
					}
				});
			},
			"./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function({ name, development }) {
					return (0, _helperPluginUtils.declare)((_$2, options) => {
						const { pure: PURE_ANNOTATION, throwIfNamespace = !0, filter, runtime: RUNTIME_DEFAULT = development ? "automatic" : "classic", importSource: IMPORT_SOURCE_DEFAULT = DEFAULT.importSource, pragma: PRAGMA_DEFAULT = DEFAULT.pragma, pragmaFrag: PRAGMA_FRAG_DEFAULT = DEFAULT.pragmaFrag } = options;
						var { useSpread = !1, useBuiltIns = !1 } = options;
						if ("classic" === RUNTIME_DEFAULT) {
							if ("boolean" != typeof useSpread) throw new Error("transform-react-jsx currently only accepts a boolean option for useSpread (defaults to false)");
							if ("boolean" != typeof useBuiltIns) throw new Error("transform-react-jsx currently only accepts a boolean option for useBuiltIns (defaults to false)");
							if (useSpread && useBuiltIns) throw new Error("transform-react-jsx currently only accepts useBuiltIns or useSpread but not both");
						}
						const injectMetaPropertiesVisitor = { JSXOpeningElement(path$9, state) {
							const attributes = [];
							(function(scope) {
								do {
									const { path: path$10 } = scope;
									if (path$10.isFunctionParent() && !path$10.isArrowFunctionExpression()) return !path$10.isMethod() || "constructor" !== path$10.node.kind || !isDerivedClass(path$10.parentPath.parentPath);
									if (path$10.isTSModuleBlock()) return !1;
								} while (scope = scope.parent);
								return !0;
							})(path$9.scope) && attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier("__self"), _core.types.jsxExpressionContainer(_core.types.thisExpression()))), attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier("__source"), _core.types.jsxExpressionContainer(function(path$10, state$1) {
								const location = path$10.node.loc;
								if (!location) return path$10.scope.buildUndefinedNode();
								if (!state$1.fileNameIdentifier) {
									const { filename = "" } = state$1, fileNameIdentifier = path$10.scope.generateUidIdentifier("_jsxFileName");
									path$10.scope.getProgramParent().push({
										id: fileNameIdentifier,
										init: _core.types.stringLiteral(filename)
									}), state$1.fileNameIdentifier = fileNameIdentifier;
								}
								return function(fileNameIdentifier, lineNumber, column0Based) {
									const fileLineLiteral = null != lineNumber ? _core.types.numericLiteral(lineNumber) : _core.types.nullLiteral(), fileColumnLiteral = null != column0Based ? _core.types.numericLiteral(column0Based + 1) : _core.types.nullLiteral();
									return _core.template.expression.ast`{
    fileName: ${fileNameIdentifier},
    lineNumber: ${fileLineLiteral},
    columnNumber: ${fileColumnLiteral},
  }`;
								}(_core.types.cloneNode(state$1.fileNameIdentifier), location.start.line, location.start.column);
							}(path$9, state)))), path$9.pushContainer("attributes", attributes);
						} };
						return {
							name,
							inherits: _pluginSyntaxJsx.default,
							visitor: {
								JSXNamespacedName(path$9) {
									if (throwIfNamespace) throw path$9.buildCodeFrameError("Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.");
								},
								JSXSpreadChild(path$9) {
									throw path$9.buildCodeFrameError("Spread children are not supported in React.");
								},
								Program: { enter(path$9, state) {
									const { file } = state;
									let runtime = RUNTIME_DEFAULT, source = IMPORT_SOURCE_DEFAULT, pragma = PRAGMA_DEFAULT, pragmaFrag = PRAGMA_FRAG_DEFAULT, sourceSet = !!options.importSource, pragmaSet = !!options.pragma, pragmaFragSet = !!options.pragmaFrag;
									if (file.ast.comments) for (const comment of file.ast.comments) {
										const sourceMatches = JSX_SOURCE_ANNOTATION_REGEX.exec(comment.value);
										sourceMatches && (source = sourceMatches[1], sourceSet = !0);
										const runtimeMatches = JSX_RUNTIME_ANNOTATION_REGEX.exec(comment.value);
										runtimeMatches && (runtime = runtimeMatches[1]);
										const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);
										jsxMatches && (pragma = jsxMatches[1], pragmaSet = !0);
										const jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(comment.value);
										jsxFragMatches && (pragmaFrag = jsxFragMatches[1], pragmaFragSet = !0);
									}
									if (set(state, "runtime", runtime), "classic" === runtime) {
										if (sourceSet) throw path$9.buildCodeFrameError("importSource cannot be set when runtime is classic.");
										const createElement = toMemberExpression(pragma), fragment = toMemberExpression(pragmaFrag);
										set(state, "id/createElement", () => _core.types.cloneNode(createElement)), set(state, "id/fragment", () => _core.types.cloneNode(fragment)), set(state, "defaultPure", pragma === DEFAULT.pragma);
									} else {
										if ("automatic" !== runtime) throw path$9.buildCodeFrameError("Runtime must be either \"classic\" or \"automatic\".");
										{
											if (pragmaSet || pragmaFragSet) throw path$9.buildCodeFrameError("pragma and pragmaFrag cannot be set when runtime is automatic.");
											const define = (name$1, id) => set(state, name$1, function(pass, path$10, importName, source$1) {
												return () => {
													const actualSource = function(source$2, importName$1) {
														switch (importName$1) {
															case "Fragment": return `${source$2}/${development ? "jsx-dev-runtime" : "jsx-runtime"}`;
															case "jsxDEV": return `${source$2}/jsx-dev-runtime`;
															case "jsx":
															case "jsxs": return `${source$2}/jsx-runtime`;
															case "createElement": return source$2;
														}
													}(source$1, importName);
													if ((0, _helperModuleImports.isModule)(path$10)) {
														let reference = get$1(pass, `imports/${importName}`);
														return reference ? _core.types.cloneNode(reference) : (reference = (0, _helperModuleImports.addNamed)(path$10, importName, actualSource, {
															importedInterop: "uncompiled",
															importPosition: "after"
														}), set(pass, `imports/${importName}`, reference), reference);
													}
													{
														let reference = get$1(pass, `requires/${actualSource}`);
														return reference ? reference = _core.types.cloneNode(reference) : (reference = (0, _helperModuleImports.addNamespace)(path$10, actualSource, { importedInterop: "uncompiled" }), set(pass, `requires/${actualSource}`, reference)), _core.types.memberExpression(reference, _core.types.identifier(importName));
													}
												};
											}(state, path$9, id, source));
											define("id/jsx", development ? "jsxDEV" : "jsx"), define("id/jsxs", development ? "jsxDEV" : "jsxs"), define("id/createElement", "createElement"), define("id/fragment", "Fragment"), set(state, "defaultPure", source === DEFAULT.importSource);
										}
									}
									development && path$9.traverse(injectMetaPropertiesVisitor, state);
								} },
								JSXFragment: { exit(path$9, file) {
									let callExpr;
									callExpr = "classic" === get$1(file, "runtime") ? function(path$10, file$1) {
										if (filter && !filter(path$10.node, file$1)) return;
										return call(file$1, "createElement", [
											get$1(file$1, "id/fragment")(),
											_core.types.nullLiteral(),
											..._core.types.react.buildChildren(path$10.node)
										]);
									}(path$9, file) : function(path$10, file$1) {
										const args = [get$1(file$1, "id/fragment")()], children = _core.types.react.buildChildren(path$10.node);
										args.push(_core.types.objectExpression(children.length > 0 ? [buildChildrenProperty(children)] : [])), development && args.push(path$10.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1));
										return call(file$1, children.length > 1 ? "jsxs" : "jsx", args);
									}(path$9, file), path$9.replaceWith(_core.types.inherits(callExpr, path$9.node));
								} },
								JSXElement: { exit(path$9, file) {
									let callExpr;
									callExpr = "classic" === get$1(file, "runtime") || function(path$10) {
										const openingPath = path$10.get("openingElement"), attributes = openingPath.node.attributes;
										let seenPropsSpread = !1;
										for (let i = 0; i < attributes.length; i++) {
											const attr = attributes[i];
											if (seenPropsSpread && _core.types.isJSXAttribute(attr) && "key" === attr.name.name) return !0;
											_core.types.isJSXSpreadAttribute(attr) && (seenPropsSpread = !0);
										}
										return !1;
									}(path$9) ? function(path$10, file$1) {
										const openingPath = path$10.get("openingElement");
										return call(file$1, "createElement", [
											getTag(openingPath),
											buildCreateElementOpeningElementAttributes(file$1, path$10, openingPath.get("attributes")),
											..._core.types.react.buildChildren(path$10.node)
										]);
									}(path$9, file) : function(path$10, file$1) {
										const openingPath = path$10.get("openingElement"), args = [getTag(openingPath)], attribsArray = [], extracted = Object.create(null);
										for (const attr of openingPath.get("attributes")) if (attr.isJSXAttribute() && _core.types.isJSXIdentifier(attr.node.name)) {
											const { name: name$1 } = attr.node.name;
											switch (name$1) {
												case "__source":
												case "__self": if (extracted[name$1]) throw sourceSelfError(path$10, name$1);
												case "key": {
													const keyValue = convertAttributeValue(attr.node.value);
													if (null === keyValue) throw attr.buildCodeFrameError("Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.");
													extracted[name$1] = keyValue;
													break;
												}
												default: attribsArray.push(attr);
											}
										} else attribsArray.push(attr);
										const children = _core.types.react.buildChildren(path$10.node);
										let attribs;
										attribs = attribsArray.length || children.length ? function(attribs$1, children$1) {
											const props = attribs$1.reduce(accumulateAttribute, []);
											(null == children$1 ? void 0 : children$1.length) > 0 && props.push(buildChildrenProperty(children$1));
											return _core.types.objectExpression(props);
										}(attribsArray, children) : _core.types.objectExpression([]);
										if (args.push(attribs), development) {
											var _extracted$key;
											args.push(null != (_extracted$key = extracted.key) ? _extracted$key : path$10.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1)), extracted.__source ? (args.push(extracted.__source), extracted.__self && args.push(extracted.__self)) : extracted.__self && args.push(path$10.scope.buildUndefinedNode(), extracted.__self);
										} else void 0 !== extracted.key && args.push(extracted.key);
										return call(file$1, children.length > 1 ? "jsxs" : "jsx", args);
									}(path$9, file), path$9.replaceWith(_core.types.inherits(callExpr, path$9.node));
								} },
								JSXAttribute(path$9) {
									_core.types.isJSXElement(path$9.node.value) && (path$9.node.value = _core.types.jsxExpressionContainer(path$9.node.value));
								}
							}
						};
						function isDerivedClass(classPath) {
							return null !== classPath.node.superClass;
						}
						function call(pass, name$1, args) {
							const node = _core.types.callExpression(get$1(pass, `id/${name$1}`)(), args);
							return (null != PURE_ANNOTATION ? PURE_ANNOTATION : get$1(pass, "defaultPure")) && (0, _helperAnnotateAsPure.default)(node), node;
						}
						function convertJSXIdentifier(node, parent) {
							return _core.types.isJSXIdentifier(node) ? "this" === node.name && _core.types.isReferenced(node, parent) ? _core.types.thisExpression() : _core.types.isValidIdentifier(node.name, !1) ? (node.type = "Identifier", node) : _core.types.stringLiteral(node.name) : _core.types.isJSXMemberExpression(node) ? _core.types.memberExpression(convertJSXIdentifier(node.object, node), convertJSXIdentifier(node.property, node)) : _core.types.isJSXNamespacedName(node) ? _core.types.stringLiteral(`${node.namespace.name}:${node.name.name}`) : node;
						}
						function convertAttributeValue(node) {
							return _core.types.isJSXExpressionContainer(node) ? node.expression : node;
						}
						function accumulateAttribute(array, attribute) {
							if (_core.types.isJSXSpreadAttribute(attribute.node)) {
								const arg = attribute.node.argument;
								return _core.types.isObjectExpression(arg) && !arg.properties.some((value$2) => _core.types.isObjectProperty(value$2, {
									computed: !1,
									shorthand: !1
								}) && (_core.types.isIdentifier(value$2.key, { name: "__proto__" }) || _core.types.isStringLiteral(value$2.key, { value: "__proto__" }))) ? array.push(...arg.properties) : array.push(_core.types.spreadElement(arg)), array;
							}
							const value$1 = convertAttributeValue("key" !== attribute.node.name.name ? attribute.node.value || _core.types.booleanLiteral(!0) : attribute.node.value);
							if ("key" === attribute.node.name.name && null === value$1) throw attribute.buildCodeFrameError("Please provide an explicit key value. Using \"key\" as a shorthand for \"key={true}\" is not allowed.");
							var _value$extra;
							_core.types.isStringLiteral(value$1) && !_core.types.isJSXExpressionContainer(attribute.node.value) && (value$1.value = value$1.value.replace(/\n\s+/g, " "), null == (_value$extra = value$1.extra) || delete _value$extra.raw);
							return _core.types.isJSXNamespacedName(attribute.node.name) ? attribute.node.name = _core.types.stringLiteral(attribute.node.name.namespace.name + ":" + attribute.node.name.name.name) : _core.types.isValidIdentifier(attribute.node.name.name, !1) ? attribute.node.name.type = "Identifier" : attribute.node.name = _core.types.stringLiteral(attribute.node.name.name), array.push(_core.types.inherits(_core.types.objectProperty(attribute.node.name, value$1), attribute.node)), array;
						}
						function buildChildrenProperty(children) {
							let childrenNode;
							if (1 === children.length) childrenNode = children[0];
							else {
								if (!(children.length > 1)) return;
								childrenNode = _core.types.arrayExpression(children);
							}
							return _core.types.objectProperty(_core.types.identifier("children"), childrenNode);
						}
						function getTag(openingPath) {
							const tagExpr = convertJSXIdentifier(openingPath.node.name, openingPath.node);
							let tagName;
							return _core.types.isIdentifier(tagExpr) ? tagName = tagExpr.name : _core.types.isStringLiteral(tagExpr) && (tagName = tagExpr.value), _core.types.react.isCompatTag(tagName) ? _core.types.stringLiteral(tagName) : tagExpr;
						}
						function buildCreateElementOpeningElementAttributes(file, path$9, attribs) {
							const runtime = get$1(file, "runtime");
							if ("automatic" !== runtime) {
								const objs = [], props$1 = attribs.reduce(accumulateAttribute, []);
								if (useSpread) props$1.length && objs.push(_core.types.objectExpression(props$1));
								else {
									let start = 0;
									props$1.forEach((prop, i) => {
										_core.types.isSpreadElement(prop) && (i > start && objs.push(_core.types.objectExpression(props$1.slice(start, i))), objs.push(prop.argument), start = i + 1);
									}), props$1.length > start && objs.push(_core.types.objectExpression(props$1.slice(start)));
								}
								if (!objs.length) return _core.types.nullLiteral();
								if (!(1 !== objs.length || _core.types.isSpreadElement(props$1[0]) && _core.types.isObjectExpression(props$1[0].argument))) return objs[0];
								_core.types.isObjectExpression(objs[0]) || objs.unshift(_core.types.objectExpression([]));
								const helper = useBuiltIns ? _core.types.memberExpression(_core.types.identifier("Object"), _core.types.identifier("assign")) : file.addHelper("extends");
								return _core.types.callExpression(helper, objs);
							}
							const props = [], found = Object.create(null);
							for (const attr of attribs) {
								const { node } = attr, name$1 = _core.types.isJSXAttribute(node) && _core.types.isJSXIdentifier(node.name) && node.name.name;
								if ("automatic" === runtime && ("__source" === name$1 || "__self" === name$1)) {
									if (found[name$1]) throw sourceSelfError(path$9, name$1);
									found[name$1] = !0;
								}
								accumulateAttribute(props, attr);
							}
							return 1 === props.length && _core.types.isSpreadElement(props[0]) && !_core.types.isObjectExpression(props[0].argument) ? props[0].argument : props.length > 0 ? _core.types.objectExpression(props) : _core.types.nullLiteral();
						}
					});
				};
				var _pluginSyntaxJsx = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js"), _helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleImports = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), _helperAnnotateAsPure = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js");
				const DEFAULT = {
					importSource: "react",
					runtime: "automatic",
					pragma: "React.createElement",
					pragmaFrag: "React.Fragment"
				}, JSX_SOURCE_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsxImportSource\s+(\S+)\s*$/m, JSX_RUNTIME_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsxRuntime\s+(\S+)\s*$/m, JSX_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsx\s+(\S+)\s*$/m, JSX_FRAG_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsxFrag\s+(\S+)\s*$/m, get$1 = (pass, name) => pass.get(`@babel/plugin-react-jsx/${name}`), set = (pass, name, v$1) => pass.set(`@babel/plugin-react-jsx/${name}`, v$1);
				function toMemberExpression(id) {
					return id.split(".").map((name) => _core.types.identifier(name)).reduce((object, property) => _core.types.memberExpression(object, property));
				}
				function sourceSelfError(path$9, name) {
					const pluginName = `transform-react-jsx-${name.slice(2)}`;
					return path$9.buildCodeFrameError(`Duplicate ${name} prop found. You are most likely using the deprecated ${pluginName} Babel plugin. Both __source and __self are automatically set when using the automatic runtime. Please remove transform-react-jsx-source and transform-react-jsx-self from your Babel config.`);
				}
			},
			"./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				exports$1.A = void 0;
				var _createPlugin = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js");
				exports$1.A = (0, _createPlugin.default)({
					name: "transform-react-jsx",
					development: !1
				});
			},
			"./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(path$9, t) {
					const { name } = path$9.node.id, parentIsExport = path$9.parentPath.isExportNamedDeclaration();
					let isExported = parentIsExport;
					!isExported && t.isProgram(path$9.parent) && (isExported = path$9.parent.body.some((stmt) => t.isExportNamedDeclaration(stmt) && "type" !== stmt.exportKind && !stmt.source && stmt.specifiers.some((spec) => t.isExportSpecifier(spec) && "type" !== spec.exportKind && spec.local.name === name)));
					const { enumValues: entries } = (0, _enum.translateEnumValues)(path$9, t);
					if (isExported) {
						const obj = t.objectExpression(entries.map(([name$1, value$1]) => t.objectProperty(t.isValidIdentifier(name$1) ? t.identifier(name$1) : t.stringLiteral(name$1), value$1)));
						return void (path$9.scope.hasOwnBinding(name) ? (parentIsExport ? path$9.parentPath : path$9).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("assign")), [path$9.node.id, obj]))) : (path$9.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path$9.node.id, obj)])), path$9.scope.registerDeclaration(path$9)));
					}
					const entriesMap = new Map(entries);
					path$9.scope.path.traverse({
						Scope(path$10) {
							path$10.scope.hasOwnBinding(name) && path$10.skip();
						},
						MemberExpression(path$10) {
							if (!t.isIdentifier(path$10.node.object, { name })) return;
							let key;
							if (path$10.node.computed) {
								if (!t.isStringLiteral(path$10.node.property)) return;
								key = path$10.node.property.value;
							} else {
								if (!t.isIdentifier(path$10.node.property)) return;
								key = path$10.node.property.name;
							}
							entriesMap.has(key) && path$10.replaceWith(t.cloneNode(entriesMap.get(key)));
						}
					}), path$9.remove();
				};
				var _enum = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js");
			},
			"./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(path$9, t) {
					const { node, parentPath } = path$9;
					if (node.declare) return void path$9.remove();
					const name = node.id.name, { fill: fill$2, data, isPure } = function(path$10, t$1, id) {
						const { enumValues: x$3, data: data$1, isPure: isPure$1 } = translateEnumValues(path$10, t$1), assignments = x$3.map(([memberName, memberValue]) => buildEnumMember(isSyntacticallyString(memberValue), {
							ENUM: t$1.cloneNode(id),
							NAME: memberName,
							VALUE: memberValue
						}));
						return {
							fill: {
								ID: t$1.cloneNode(id),
								ASSIGNMENTS: assignments
							},
							data: data$1,
							isPure: isPure$1
						};
					}(path$9, t, node.id);
					switch (parentPath.type) {
						case "BlockStatement":
						case "ExportNamedDeclaration":
						case "Program": {
							const isGlobal = t.isProgram(path$9.parent), isSeen = function seen(parentPath$1) {
								if (parentPath$1.isExportDeclaration()) return seen(parentPath$1.parentPath);
								return !!parentPath$1.getData(name) || (parentPath$1.setData(name, !0), !1);
							}(parentPath);
							let init$1 = t.objectExpression([]);
							(isSeen || isGlobal) && (init$1 = t.logicalExpression("||", t.cloneNode(fill$2.ID), init$1));
							const enumIIFE = buildEnumWrapper(Object.assign({}, fill$2, { INIT: init$1 }));
							if (isPure && (0, _helperAnnotateAsPure.default)(enumIIFE), isSeen) (parentPath.isExportDeclaration() ? parentPath : path$9).replaceWith(t.expressionStatement(t.assignmentExpression("=", t.cloneNode(node.id), enumIIFE)));
							else path$9.scope.registerDeclaration(path$9.replaceWith(t.variableDeclaration(isGlobal ? "var" : "let", [t.variableDeclarator(node.id, enumIIFE)]))[0]);
							ENUMS.set(path$9.scope.getBindingIdentifier(name), data);
							break;
						}
						default: throw new Error(`Unexpected enum parent '${path$9.parent.type}`);
					}
				}, exports$1.isSyntacticallyString = isSyntacticallyString, exports$1.translateEnumValues = translateEnumValues;
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _assert = __webpack_require__$1("assert"), _helperAnnotateAsPure = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js");
				const ENUMS = new WeakMap(), buildEnumWrapper = _core.template.expression("\n    (function (ID) {\n      ASSIGNMENTS;\n      return ID;\n    })(INIT)\n  ");
				const buildStringAssignment = (0, _core.template)("\n  ENUM[\"NAME\"] = VALUE;\n"), buildNumericAssignment = (0, _core.template)("\n  ENUM[ENUM[\"NAME\"] = VALUE] = \"NAME\";\n"), buildEnumMember = (isString, options) => (isString ? buildStringAssignment : buildNumericAssignment)(options);
				function isSyntacticallyString(expr) {
					switch ((expr = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(expr)).type) {
						case "BinaryExpression": {
							const left = expr.left, right = expr.right;
							return "+" === expr.operator && (isSyntacticallyString(left) || isSyntacticallyString(right));
						}
						case "TemplateLiteral":
						case "StringLiteral": return !0;
					}
					return !1;
				}
				function ReferencedIdentifier(expr, state) {
					const { seen, path: path$9, t } = state, name = expr.node.name;
					seen.has(name) && !expr.scope.hasOwnBinding(name) && (expr.replaceWith(t.memberExpression(t.cloneNode(path$9.node.id), t.cloneNode(expr.node))), expr.skip());
				}
				const enumSelfReferenceVisitor = { ReferencedIdentifier };
				function translateEnumValues(path$9, t) {
					var _ENUMS$get;
					const bindingIdentifier = path$9.scope.getBindingIdentifier(path$9.node.id.name), seen = null != (_ENUMS$get = ENUMS.get(bindingIdentifier)) ? _ENUMS$get : new Map();
					let lastName, constValue = -1, isPure = !0;
					const enumValues = path$9.get("members").map((memberPath) => {
						const member = memberPath.node, name = t.isIdentifier(member.id) ? member.id.name : member.id.value, initializerPath = memberPath.get("initializer");
						let value$1;
						if (member.initializer) constValue = computeConstantValue(initializerPath, seen), void 0 !== constValue ? (seen.set(name, constValue), _assert("number" == typeof constValue || "string" == typeof constValue), value$1 = constValue === Infinity || Number.isNaN(constValue) ? t.identifier(String(constValue)) : constValue === -Infinity ? t.unaryExpression("-", t.identifier("Infinity")) : t.valueToNode(constValue)) : (isPure && (isPure = initializerPath.isPure()), initializerPath.isReferencedIdentifier() ? ReferencedIdentifier(initializerPath, {
							t,
							seen,
							path: path$9
						}) : initializerPath.traverse(enumSelfReferenceVisitor, {
							t,
							seen,
							path: path$9
						}), value$1 = initializerPath.node, seen.set(name, void 0));
						else if ("number" == typeof constValue) constValue += 1, value$1 = t.numericLiteral(constValue), seen.set(name, constValue);
						else {
							if ("string" == typeof constValue) throw path$9.buildCodeFrameError("Enum member must have initializer.");
							{
								const lastRef = t.memberExpression(t.cloneNode(path$9.node.id), t.stringLiteral(lastName), !0);
								value$1 = t.binaryExpression("+", t.numericLiteral(1), lastRef), seen.set(name, void 0);
							}
						}
						return lastName = name, [name, value$1];
					});
					return {
						isPure,
						data: seen,
						enumValues
					};
				}
				function computeConstantValue(path$9, prevMembers, seen = new Set()) {
					return evaluate(path$9);
					function evaluate(path$10) {
						const expr = path$10.node;
						switch (expr.type) {
							case "MemberExpression":
							case "Identifier": return evaluateRef(path$10, prevMembers, seen);
							case "StringLiteral":
							case "NumericLiteral": return expr.value;
							case "UnaryExpression": return function(path$11) {
								const value$1 = evaluate(path$11.get("argument"));
								if (void 0 === value$1) return;
								switch (path$11.node.operator) {
									case "+": return value$1;
									case "-": return -value$1;
									case "~": return ~value$1;
									default: return;
								}
							}(path$10);
							case "BinaryExpression": return function(path$11) {
								const left = evaluate(path$11.get("left"));
								if (void 0 === left) return;
								const right = evaluate(path$11.get("right"));
								if (void 0 === right) return;
								switch (path$11.node.operator) {
									case "|": return left | right;
									case "&": return left & right;
									case ">>": return left >> right;
									case ">>>": return left >>> right;
									case "<<": return left << right;
									case "^": return left ^ right;
									case "*": return left * right;
									case "/": return left / right;
									case "+": return left + right;
									case "-": return left - right;
									case "%": return left % right;
									case "**": return Math.pow(left, right);
									default: return;
								}
							}(path$10);
							case "ParenthesizedExpression": return evaluate(path$10.get("expression"));
							case "TemplateLiteral": {
								if (1 === expr.quasis.length) return expr.quasis[0].value.cooked;
								const paths = path$10.get("expressions"), quasis = expr.quasis;
								let str = "";
								for (let i = 0; i < quasis.length; i++) if (str += quasis[i].value.cooked, i + 1 < quasis.length) {
									const value$1 = evaluateRef(paths[i], prevMembers, seen);
									if (void 0 === value$1) return;
									str += value$1;
								}
								return str;
							}
							default: return;
						}
					}
					function evaluateRef(path$10, prevMembers$1, seen$1) {
						if (path$10.isMemberExpression()) {
							const expr = path$10.node, obj = expr.object, prop = expr.property;
							if (!_core.types.isIdentifier(obj) || (expr.computed ? !_core.types.isStringLiteral(prop) : !_core.types.isIdentifier(prop))) return;
							const bindingIdentifier = path$10.scope.getBindingIdentifier(obj.name), data = ENUMS.get(bindingIdentifier);
							if (!data) return;
							return data.get(prop.computed ? prop.value : prop.name);
						}
						if (path$10.isIdentifier()) {
							const name = path$10.node.name;
							if (["Infinity", "NaN"].includes(name)) return Number(name);
							let value$1 = null == prevMembers$1 ? void 0 : prevMembers$1.get(name);
							if (void 0 !== value$1) return value$1;
							if (seen$1.has(path$10.node)) return;
							return seen$1.add(path$10.node), value$1 = computeConstantValue(path$10.resolve(), prevMembers$1, seen$1), prevMembers$1?.set(name, value$1), value$1;
						}
					}
				}
			},
			"./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.GLOBAL_TYPES = void 0, exports$1.isGlobalType = function({ scope }, name) {
					return !scope.hasBinding(name) && (!!GLOBAL_TYPES.get(scope).has(name) || (console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker\nas a JavaScript value binding, and "@babel/plugin-transform-typescript"\nnever encountered it as a TypeScript type declaration.\nIt will be treated as a JavaScript value.\n\nThis problem is likely caused by another plugin injecting\n"${name}" without registering it in the scope tracker. If you are the author\n of that plugin, please use "scope.registerDeclaration(declarationPath)".`), !1));
				}, exports$1.registerGlobalType = function(programScope, name) {
					GLOBAL_TYPES.get(programScope).add(name);
				};
				const GLOBAL_TYPES = exports$1.GLOBAL_TYPES = new WeakMap();
			},
			"./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxTypescript = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-typescript/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _constEnum = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js"), _enum = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js"), _globalTypes = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js"), _namespace = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/namespace.js");
				function isInType(path$9) {
					switch (path$9.parent.type) {
						case "TSTypeReference":
						case "TSExpressionWithTypeArguments":
						case "TSExpressionWithTypeArguments":
						case "TSTypeQuery": return !0;
						case "TSQualifiedName": return "TSImportEqualsDeclaration" !== path$9.parentPath.findParent((path$10) => "TSQualifiedName" !== path$10.type).type;
						case "ExportSpecifier": return "type" === path$9.parent.exportKind || "type" === path$9.parentPath.parent.exportKind;
						default: return !1;
					}
				}
				const NEEDS_EXPLICIT_ESM = new WeakMap(), PARSED_PARAMS = new WeakSet();
				function safeRemove(path$9) {
					const ids = path$9.getBindingIdentifiers();
					for (const name of Object.keys(ids)) {
						const binding = path$9.scope.getBinding(name);
						binding && binding.identifier === ids[name] && binding.scope.removeBinding(name);
					}
					path$9.opts.noScope = !0, path$9.remove(), path$9.opts.noScope = !1;
				}
				function assertCjsTransformEnabled(path$9, pass, wrong, suggestion, extra = "") {
					if ("commonjs" !== pass.file.get("@babel/plugin-transform-modules-*")) throw path$9.buildCodeFrameError(`\`${wrong}\` is only supported when compiling modules to CommonJS.\nPlease consider using \`${suggestion}\`${extra}, or add @babel/plugin-transform-modules-commonjs to your Babel config.`);
				}
				exports$1.default = (0, _helperPluginUtils.declare)((api$1, opts) => {
					const { types: t, template } = api$1;
					api$1.assertVersion(7);
					const JSX_PRAGMA_REGEX = /\*?\s*@jsx((?:Frag)?)\s+(\S+)/, { allowNamespaces = !0, jsxPragma = "React.createElement", jsxPragmaFrag = "React.Fragment", onlyRemoveTypeImports = !1, optimizeConstEnums = !1 } = opts;
					var { allowDeclareFields = !1 } = opts;
					const classMemberVisitors = {
						field(path$9) {
							const { node } = path$9;
							if (!allowDeclareFields && node.declare) throw path$9.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.");
							if (node.declare) {
								if (node.value) throw path$9.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
								node.decorators || path$9.remove();
							} else if (node.definite) {
								if (node.value) throw path$9.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
								allowDeclareFields || node.decorators || t.isClassPrivateProperty(node) || path$9.remove();
							} else node.abstract ? path$9.remove() : allowDeclareFields || node.value || node.decorators || t.isClassPrivateProperty(node) || path$9.remove();
							node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.readonly && (node.readonly = null), node.optional && (node.optional = null), node.typeAnnotation && (node.typeAnnotation = null), node.definite && (node.definite = null), node.declare && (node.declare = null), node.override && (node.override = null);
						},
						method({ node }) {
							node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.optional && (node.optional = null), node.override && (node.override = null);
						},
						constructor(path$9, classPath) {
							path$9.node.accessibility && (path$9.node.accessibility = null);
							const assigns = [], { scope } = path$9;
							for (const paramPath of path$9.get("params")) {
								const param = paramPath.node;
								if ("TSParameterProperty" === param.type) {
									const parameter = param.parameter;
									if (PARSED_PARAMS.has(parameter)) continue;
									let id;
									if (PARSED_PARAMS.add(parameter), t.isIdentifier(parameter)) id = parameter;
									else {
										if (!t.isAssignmentPattern(parameter) || !t.isIdentifier(parameter.left)) throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
										id = parameter.left;
									}
									assigns.push(template.statement.ast`
              this.${t.cloneNode(id)} = ${t.cloneNode(id)}
            `), paramPath.replaceWith(paramPath.get("parameter")), scope.registerBinding("param", paramPath);
								}
							}
							(0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, path$9, assigns);
						}
					};
					return {
						name: "transform-typescript",
						inherits: _pluginSyntaxTypescript.default,
						visitor: {
							Pattern: visitPattern,
							Identifier: visitPattern,
							RestElement: visitPattern,
							Program: {
								enter(path$9, state) {
									const { file } = state;
									let fileJsxPragma = null, fileJsxPragmaFrag = null;
									const programScope = path$9.scope;
									if (_globalTypes.GLOBAL_TYPES.has(programScope) || _globalTypes.GLOBAL_TYPES.set(programScope, new Set()), file.ast.comments) for (const comment of file.ast.comments) {
										const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);
										jsxMatches && (jsxMatches[1] ? fileJsxPragmaFrag = jsxMatches[2] : fileJsxPragma = jsxMatches[2]);
									}
									let pragmaImportName = fileJsxPragma || jsxPragma;
									pragmaImportName && ([pragmaImportName] = pragmaImportName.split("."));
									let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;
									pragmaFragImportName && ([pragmaFragImportName] = pragmaFragImportName.split("."));
									for (let stmt of path$9.get("body")) if (stmt.isImportDeclaration()) {
										if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, !0), "type" === stmt.node.importKind) {
											for (const specifier of stmt.node.specifiers) (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
											stmt.remove();
											continue;
										}
										const importsToRemove = new Set(), specifiersLength = stmt.node.specifiers.length, isAllSpecifiersElided = () => specifiersLength > 0 && specifiersLength === importsToRemove.size;
										for (const specifier of stmt.node.specifiers) if ("ImportSpecifier" === specifier.type && "type" === specifier.importKind) {
											(0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
											const binding = stmt.scope.getBinding(specifier.local.name);
											binding && importsToRemove.add(binding.path);
										}
										if (onlyRemoveTypeImports) NEEDS_EXPLICIT_ESM.set(path$9.node, !1);
										else {
											if (0 === stmt.node.specifiers.length) {
												NEEDS_EXPLICIT_ESM.set(path$9.node, !1);
												continue;
											}
											for (const specifier of stmt.node.specifiers) {
												const binding = stmt.scope.getBinding(specifier.local.name);
												binding && !importsToRemove.has(binding.path) && (isImportTypeOnly({
													binding,
													programPath: path$9,
													pragmaImportName,
													pragmaFragImportName
												}) ? importsToRemove.add(binding.path) : NEEDS_EXPLICIT_ESM.set(path$9.node, !1));
											}
										}
										if (isAllSpecifiersElided() && !onlyRemoveTypeImports) stmt.remove();
										else for (const importPath of importsToRemove) importPath.remove();
									} else if (stmt.isExportDeclaration() && (stmt = stmt.get("declaration")), stmt.isVariableDeclaration({ declare: !0 })) for (const name of Object.keys(stmt.getBindingIdentifiers())) (0, _globalTypes.registerGlobalType)(programScope, name);
									else (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() && stmt.get("id").isIdentifier() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({ declare: !0 }) || stmt.isTSEnumDeclaration({ declare: !0 }) || stmt.isTSModuleDeclaration({ declare: !0 }) && stmt.get("id").isIdentifier()) && (0, _globalTypes.registerGlobalType)(programScope, stmt.node.id.name);
								},
								exit(path$9) {
									"module" === path$9.node.sourceType && NEEDS_EXPLICIT_ESM.get(path$9.node) && path$9.pushContainer("body", t.exportNamedDeclaration());
								}
							},
							ExportNamedDeclaration(path$9, state) {
								if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, !0), "type" !== path$9.node.exportKind) if (path$9.node.source && path$9.node.specifiers.length > 0 && path$9.node.specifiers.every((specifier) => "ExportSpecifier" === specifier.type && "type" === specifier.exportKind)) path$9.remove();
								else if (!path$9.node.source && path$9.node.specifiers.length > 0 && path$9.node.specifiers.every((specifier) => t.isExportSpecifier(specifier) && (0, _globalTypes.isGlobalType)(path$9, specifier.local.name))) path$9.remove();
								else {
									if (t.isTSModuleDeclaration(path$9.node.declaration)) {
										const namespace = path$9.node.declaration;
										if (!t.isStringLiteral(namespace.id)) {
											const id = (0, _namespace.getFirstIdentifier)(namespace.id);
											if (path$9.scope.hasOwnBinding(id.name)) path$9.replaceWith(namespace);
											else {
												const [newExport] = path$9.replaceWithMultiple([t.exportNamedDeclaration(t.variableDeclaration("let", [t.variableDeclarator(t.cloneNode(id))])), namespace]);
												path$9.scope.registerDeclaration(newExport);
											}
										}
									}
									NEEDS_EXPLICIT_ESM.set(state.file.ast.program, !1);
								}
								else path$9.remove();
							},
							ExportAllDeclaration(path$9) {
								"type" === path$9.node.exportKind && path$9.remove();
							},
							ExportSpecifier(path$9) {
								(!path$9.parent.source && (0, _globalTypes.isGlobalType)(path$9, path$9.node.local.name) || "type" === path$9.node.exportKind) && path$9.remove();
							},
							ExportDefaultDeclaration(path$9, state) {
								NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, !0), t.isIdentifier(path$9.node.declaration) && (0, _globalTypes.isGlobalType)(path$9, path$9.node.declaration.name) ? path$9.remove() : NEEDS_EXPLICIT_ESM.set(state.file.ast.program, !1);
							},
							TSDeclareFunction(path$9) {
								safeRemove(path$9);
							},
							TSDeclareMethod(path$9) {
								safeRemove(path$9);
							},
							VariableDeclaration(path$9) {
								path$9.node.declare && safeRemove(path$9);
							},
							VariableDeclarator({ node }) {
								node.definite && (node.definite = null);
							},
							TSIndexSignature(path$9) {
								path$9.remove();
							},
							ClassDeclaration(path$9) {
								const { node } = path$9;
								node.declare && safeRemove(path$9);
							},
							Class(path$9) {
								const { node } = path$9;
								node.typeParameters && (node.typeParameters = null), node.superTypeParameters && (node.superTypeParameters = null), node.implements && (node.implements = null), node.abstract && (node.abstract = null), path$9.get("body.body").forEach((child$1) => {
									child$1.isClassMethod() || child$1.isClassPrivateMethod() ? "constructor" === child$1.node.kind ? classMemberVisitors.constructor(child$1, path$9) : classMemberVisitors.method(child$1) : (child$1.isClassProperty() || child$1.isClassPrivateProperty() || child$1.isClassAccessorProperty()) && classMemberVisitors.field(child$1);
								});
							},
							Function(path$9) {
								const { node } = path$9;
								node.typeParameters && (node.typeParameters = null), node.returnType && (node.returnType = null);
								const params = node.params;
								params.length > 0 && t.isIdentifier(params[0], { name: "this" }) && params.shift();
							},
							TSModuleDeclaration(path$9) {
								(0, _namespace.default)(path$9, allowNamespaces);
							},
							TSInterfaceDeclaration(path$9) {
								path$9.remove();
							},
							TSTypeAliasDeclaration(path$9) {
								path$9.remove();
							},
							TSEnumDeclaration(path$9) {
								optimizeConstEnums && path$9.node.const ? (0, _constEnum.default)(path$9, t) : (0, _enum.default)(path$9, t);
							},
							TSImportEqualsDeclaration(path$9, pass) {
								const { id, moduleReference, isExport } = path$9.node;
								let init$1, varKind;
								t.isTSExternalModuleReference(moduleReference) ? (assertCjsTransformEnabled(path$9, pass, `import ${id.name} = require(...);`, `import ${id.name} from '...';`, " alongside Typescript's --allowSyntheticDefaultImports option"), init$1 = t.callExpression(t.identifier("require"), [moduleReference.expression]), varKind = "const") : (init$1 = entityNameToExpr(moduleReference), varKind = "var");
								const newNode = t.variableDeclaration(varKind, [t.variableDeclarator(id, init$1)]);
								path$9.replaceWith(isExport ? t.exportNamedDeclaration(newNode) : newNode), path$9.scope.registerDeclaration(path$9);
							},
							TSExportAssignment(path$9, pass) {
								assertCjsTransformEnabled(path$9, pass, "export = <value>;", "export default <value>;"), path$9.replaceWith(template.statement.ast`module.exports = ${path$9.node.expression}`);
							},
							TSTypeAssertion(path$9) {
								path$9.replaceWith(path$9.node.expression);
							},
							["TSAsExpression" + (t.tsSatisfiesExpression ? "|TSSatisfiesExpression" : "")](path$9) {
								let { node } = path$9;
								do
									node = node.expression;
								while (t.isTSAsExpression(node) || null != t.isTSSatisfiesExpression && t.isTSSatisfiesExpression(node));
								path$9.replaceWith(node);
							},
							[api$1.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](path$9) {
								path$9.replaceWith(path$9.node.expression);
							},
							CallExpression(path$9) {
								path$9.node.typeParameters = null;
							},
							OptionalCallExpression(path$9) {
								path$9.node.typeParameters = null;
							},
							NewExpression(path$9) {
								path$9.node.typeParameters = null;
							},
							JSXOpeningElement(path$9) {
								path$9.node.typeParameters = null;
							},
							TaggedTemplateExpression(path$9) {
								path$9.node.typeParameters = null;
							}
						}
					};
					function entityNameToExpr(node) {
						return t.isTSQualifiedName(node) ? t.memberExpression(entityNameToExpr(node.left), node.right) : node;
					}
					function visitPattern({ node }) {
						node.typeAnnotation && (node.typeAnnotation = null), t.isIdentifier(node) && node.optional && (node.optional = null);
					}
					function isImportTypeOnly({ binding, programPath, pragmaImportName, pragmaFragImportName }) {
						for (const path$9 of binding.referencePaths) if (!isInType(path$9)) return !1;
						if (binding.identifier.name !== pragmaImportName && binding.identifier.name !== pragmaFragImportName) return !0;
						let sourceFileHasJsx = !1;
						return programPath.traverse({ "JSXElement|JSXFragment"(path$9) {
							sourceFileHasJsx = !0, path$9.stop();
						} }), !sourceFileHasJsx;
					}
				});
			},
			"./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/namespace.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(path$9, allowNamespaces) {
					if (path$9.node.declare || "StringLiteral" === path$9.node.id.type) return void path$9.remove();
					if (!allowNamespaces) throw path$9.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
					const name = getFirstIdentifier(path$9.node.id).name, value$1 = handleNested(path$9, path$9.node);
					if (null === value$1) {
						const program = path$9.findParent((p$1) => p$1.isProgram());
						(0, _globalTypes.registerGlobalType)(program.scope, name), path$9.remove();
					} else path$9.scope.hasOwnBinding(name) ? path$9.replaceWith(value$1) : path$9.scope.registerDeclaration(path$9.replaceWithMultiple([getDeclaration(name), value$1])[0]);
				}, exports$1.getFirstIdentifier = getFirstIdentifier;
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _globalTypes = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js");
				function getFirstIdentifier(node) {
					return _core.types.isIdentifier(node) ? node : getFirstIdentifier(node.left);
				}
				function getDeclaration(name) {
					return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.identifier(name))]);
				}
				function getMemberExpression(name, itemName) {
					return _core.types.memberExpression(_core.types.identifier(name), _core.types.identifier(itemName));
				}
				function handleVariableDeclaration(node, name, hub) {
					if ("const" !== node.kind) throw hub.file.buildCodeFrameError(node, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
					const { declarations } = node;
					if (declarations.every((declarator) => _core.types.isIdentifier(declarator.id))) {
						for (const declarator of declarations) declarator.init = _core.types.assignmentExpression("=", getMemberExpression(name, declarator.id.name), declarator.init);
						return [node];
					}
					const bindingIdentifiers = _core.types.getBindingIdentifiers(node), assignments = [];
					for (const idName in bindingIdentifiers) assignments.push(_core.types.assignmentExpression("=", getMemberExpression(name, idName), _core.types.cloneNode(bindingIdentifiers[idName])));
					return [node, _core.types.expressionStatement(_core.types.sequenceExpression(assignments))];
				}
				function buildNestedAmbientModuleError(path$9, node) {
					return path$9.hub.buildError(node, "Ambient modules cannot be nested in other modules or namespaces.", Error);
				}
				function handleNested(path$9, node, parentExport) {
					const names = new Set(), realName = node.id, name = path$9.scope.generateUid(realName.name), body = node.body;
					let namespaceTopLevel;
					node.id;
					namespaceTopLevel = _core.types.isTSModuleBlock(body) ? body.body : [_core.types.exportNamedDeclaration(body)];
					let isEmpty = !0;
					for (let i = 0; i < namespaceTopLevel.length; i++) {
						const subNode = namespaceTopLevel[i];
						switch (subNode.type) {
							case "TSModuleDeclaration": {
								if (!_core.types.isIdentifier(subNode.id)) throw buildNestedAmbientModuleError(path$9, subNode);
								const transformed = handleNested(path$9, subNode);
								if (null !== transformed) {
									isEmpty = !1;
									const moduleName = subNode.id.name;
									names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
								}
								continue;
							}
							case "TSEnumDeclaration":
							case "FunctionDeclaration":
							case "ClassDeclaration":
								isEmpty = !1, names.add(subNode.id.name);
								continue;
							case "VariableDeclaration":
								isEmpty = !1;
								for (const name$1 in _core.types.getBindingIdentifiers(subNode)) names.add(name$1);
								continue;
							default:
								isEmpty && (isEmpty = _core.types.isTypeScript(subNode));
								continue;
							case "ExportNamedDeclaration":
						}
						if (!("declare" in subNode.declaration) || !subNode.declaration.declare) switch (subNode.declaration.type) {
							case "TSEnumDeclaration":
							case "FunctionDeclaration":
							case "ClassDeclaration": {
								isEmpty = !1;
								const itemName = subNode.declaration.id.name;
								names.add(itemName), namespaceTopLevel.splice(i++, 1, subNode.declaration, _core.types.expressionStatement(_core.types.assignmentExpression("=", getMemberExpression(name, itemName), _core.types.identifier(itemName))));
								break;
							}
							case "VariableDeclaration": {
								isEmpty = !1;
								const nodes = handleVariableDeclaration(subNode.declaration, name, path$9.hub);
								namespaceTopLevel.splice(i, nodes.length, ...nodes), i += nodes.length - 1;
								break;
							}
							case "TSModuleDeclaration": {
								if (!_core.types.isIdentifier(subNode.declaration.id)) throw buildNestedAmbientModuleError(path$9, subNode.declaration);
								const transformed = handleNested(path$9, subNode.declaration, _core.types.identifier(name));
								if (null !== transformed) {
									isEmpty = !1;
									const moduleName = subNode.declaration.id.name;
									names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
								} else namespaceTopLevel.splice(i, 1), i--;
							}
						}
					}
					if (isEmpty) return null;
					let fallthroughValue = _core.types.objectExpression([]);
					if (parentExport) {
						const memberExpr = _core.types.memberExpression(parentExport, realName);
						fallthroughValue = _core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;
					}
					return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `;
				}
			},
			"./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 });
				var helperPluginUtils = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), transformTypeScript = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js");
				__webpack_require__$1("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js");
				var transformModulesCommonJS = __webpack_require__$1("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"), helperValidatorOption = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/index.js");
				function _interopDefault(e$1) {
					return e$1 && e$1.__esModule ? e$1 : { default: e$1 };
				}
				var transformTypeScript__default = _interopDefault(transformTypeScript), transformModulesCommonJS__default = _interopDefault(transformModulesCommonJS);
				const v$1 = new helperValidatorOption.OptionValidator("@babel/preset-typescript");
				var pluginRewriteTSImports = helperPluginUtils.declare(function({ types: t, template }) {
					function maybeReplace(source, path$9) {
						source && (t.isStringLiteral(source) ? /[\\/]/.test(source.value) && (source.value = source.value.replace(/(\.[mc]?)ts$/, "$1js").replace(/\.tsx$/, ".js")) : path$9.replaceWith(template.expression.ast`(${source} + "").replace(/([\\/].*\.[mc]?)tsx?$/, "$1js")`));
					}
					return {
						name: "preset-typescript/plugin-rewrite-ts-imports",
						visitor: {
							"ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration"(path$9) {
								const node = path$9.node;
								"value" === (t.isImportDeclaration(node) ? node.importKind : node.exportKind) && maybeReplace(node.source, path$9.get("source"));
							},
							CallExpression(path$9) {
								t.isImport(path$9.node.callee) && maybeReplace(path$9.node.arguments[0], path$9.get("arguments.0"));
							},
							ImportExpression(path$9) {
								maybeReplace(path$9.node.source, path$9.get("source"));
							}
						}
					};
				}), index = helperPluginUtils.declarePreset((api$1, opts) => {
					api$1.assertVersion(7);
					const { allExtensions, ignoreExtensions, allowNamespaces, disallowAmbiguousJSXLike, isTSX, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums, rewriteImportExtensions } = function(options = {}) {
						let { allowNamespaces: allowNamespaces$1 = !0, jsxPragma: jsxPragma$1, onlyRemoveTypeImports: onlyRemoveTypeImports$1 } = options;
						const TopLevelOptions_ignoreExtensions = "ignoreExtensions", TopLevelOptions_disallowAmbiguousJSXLike = "disallowAmbiguousJSXLike", TopLevelOptions_jsxPragmaFrag = "jsxPragmaFrag", TopLevelOptions_optimizeConstEnums = "optimizeConstEnums", TopLevelOptions_rewriteImportExtensions = "rewriteImportExtensions", TopLevelOptions_allExtensions = "allExtensions", TopLevelOptions_isTSX = "isTSX", jsxPragmaFrag$1 = v$1.validateStringOption(TopLevelOptions_jsxPragmaFrag, options.jsxPragmaFrag, "React.Fragment");
						var allExtensions$1 = v$1.validateBooleanOption(TopLevelOptions_allExtensions, options.allExtensions, !1), isTSX$1 = v$1.validateBooleanOption(TopLevelOptions_isTSX, options.isTSX, !1);
						isTSX$1 && v$1.invariant(allExtensions$1, "isTSX:true requires allExtensions:true");
						const ignoreExtensions$1 = v$1.validateBooleanOption(TopLevelOptions_ignoreExtensions, options.ignoreExtensions, !1), disallowAmbiguousJSXLike$1 = v$1.validateBooleanOption(TopLevelOptions_disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, !1);
						disallowAmbiguousJSXLike$1 && v$1.invariant(allExtensions$1, "disallowAmbiguousJSXLike:true requires allExtensions:true");
						const normalized = {
							ignoreExtensions: ignoreExtensions$1,
							allowNamespaces: allowNamespaces$1,
							disallowAmbiguousJSXLike: disallowAmbiguousJSXLike$1,
							jsxPragma: jsxPragma$1,
							jsxPragmaFrag: jsxPragmaFrag$1,
							onlyRemoveTypeImports: onlyRemoveTypeImports$1,
							optimizeConstEnums: v$1.validateBooleanOption(TopLevelOptions_optimizeConstEnums, options.optimizeConstEnums, !1),
							rewriteImportExtensions: v$1.validateBooleanOption(TopLevelOptions_rewriteImportExtensions, options.rewriteImportExtensions, !1)
						};
						return normalized.allExtensions = allExtensions$1, normalized.isTSX = isTSX$1, normalized;
					}(opts), pluginOptions = (disallowAmbiguousJSXLike$1) => ({
						allowDeclareFields: opts.allowDeclareFields,
						allowNamespaces,
						disallowAmbiguousJSXLike: disallowAmbiguousJSXLike$1,
						jsxPragma,
						jsxPragmaFrag,
						onlyRemoveTypeImports,
						optimizeConstEnums
					}), getPlugins = (isTSX$1, disallowAmbiguousJSXLike$1) => [[transformTypeScript__default.default, Object.assign({ isTSX: isTSX$1 }, pluginOptions(disallowAmbiguousJSXLike$1))]];
					return {
						plugins: rewriteImportExtensions ? [pluginRewriteTSImports] : [],
						overrides: allExtensions || ignoreExtensions ? [{ plugins: getPlugins(isTSX, disallowAmbiguousJSXLike) }] : [
							{
								test: /\.ts$/,
								plugins: getPlugins(!1, !1)
							},
							{
								test: /\.mts$/,
								sourceType: "module",
								plugins: getPlugins(!1, !0)
							},
							{
								test: /\.cts$/,
								sourceType: "unambiguous",
								plugins: [[transformModulesCommonJS__default.default, { allowTopLevelThis: !0 }], [transformTypeScript__default.default, pluginOptions(!0)]]
							},
							{
								test: /\.tsx$/,
								plugins: getPlugins(!0, !1)
							}
						]
					};
				});
				exports$1.default = index;
			},
			"./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/builder.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function createTemplateBuilder(formatter, defaultOpts) {
					const templateFnCache = new WeakMap(), templateAstCache = new WeakMap(), cachedOpts = defaultOpts || (0, _options.validate)(null);
					return Object.assign((tpl, ...args) => {
						if ("string" == typeof tpl) {
							if (args.length > 1) throw new Error("Unexpected extra params.");
							return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
						}
						if (Array.isArray(tpl)) {
							let builder = templateFnCache.get(tpl);
							return builder || (builder = (0, _literal.default)(formatter, tpl, cachedOpts), templateFnCache.set(tpl, builder)), extendedTrace(builder(args));
						}
						if ("object" == typeof tpl && tpl) {
							if (args.length > 0) throw new Error("Unexpected extra params.");
							return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
						}
						throw new Error("Unexpected template param " + typeof tpl);
					}, { ast: (tpl, ...args) => {
						if ("string" == typeof tpl) {
							if (args.length > 1) throw new Error("Unexpected extra params.");
							return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
						}
						if (Array.isArray(tpl)) {
							let builder = templateAstCache.get(tpl);
							return builder || (builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)), templateAstCache.set(tpl, builder)), builder(args)();
						}
						throw new Error("Unexpected template param " + typeof tpl);
					} });
				};
				var _options = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _string = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/string.js"), _literal = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/literal.js");
				const NO_PLACEHOLDER = (0, _options.validate)({ placeholderPattern: !1 });
				function extendedTrace(fn) {
					let rootStack = "";
					try {
						throw new Error();
					} catch (error$1) {
						error$1.stack && (rootStack = error$1.stack.split("\n").slice(3).join("\n"));
					}
					return (arg) => {
						try {
							return fn(arg);
						} catch (err) {
							throw err.stack += `\n    =============\n${rootStack}`, err;
						}
					};
				}
			},
			"./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/formatters.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.statements = exports$1.statement = exports$1.smart = exports$1.program = exports$1.expression = void 0;
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { assertExpressionStatement } = _t;
				function makeStatementFormatter(fn) {
					return {
						code: (str) => `/* @babel/template */;\n${str}`,
						validate: () => {},
						unwrap: (ast) => fn(ast.program.body.slice(1))
					};
				}
				exports$1.smart = makeStatementFormatter((body) => body.length > 1 ? body : body[0]), exports$1.statements = makeStatementFormatter((body) => body), exports$1.statement = makeStatementFormatter((body) => {
					if (0 === body.length) throw new Error("Found nothing to return.");
					if (body.length > 1) throw new Error("Found multiple statements but wanted one");
					return body[0];
				});
				const expression = exports$1.expression = {
					code: (str) => `(\n${str}\n)`,
					validate: (ast) => {
						if (ast.program.body.length > 1) throw new Error("Found multiple statements but wanted one");
						if (0 === expression.unwrap(ast).start) throw new Error("Parse result included parens.");
					},
					unwrap: ({ program }) => {
						const [stmt] = program.body;
						return assertExpressionStatement(stmt), stmt.expression;
					}
				};
				exports$1.program = {
					code: (str) => str,
					validate: () => {},
					unwrap: (ast) => ast.program
				};
			},
			"./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.statements = exports$1.statement = exports$1.smart = exports$1.program = exports$1.expression = exports$1.default = void 0;
				var formatters = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/formatters.js"), _builder = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/builder.js");
				const smart = exports$1.smart = (0, _builder.default)(formatters.smart), statement = exports$1.statement = (0, _builder.default)(formatters.statement), statements = exports$1.statements = (0, _builder.default)(formatters.statements), expression = exports$1.expression = (0, _builder.default)(formatters.expression), program = exports$1.program = (0, _builder.default)(formatters.program);
				exports$1.default = Object.assign(smart.bind(void 0), {
					smart,
					statement,
					statements,
					expression,
					program,
					ast: smart.ast
				});
			},
			"./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/literal.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(formatter, tpl, opts) {
					const { metadata, names } = function(formatter$1, tpl$1, opts$1) {
						let prefix = "BABEL_TPL$";
						const raw = tpl$1.join("");
						do
							prefix = "$$" + prefix;
						while (raw.includes(prefix));
						const { names: names$1, code } = function(tpl$2, prefix$1) {
							const names$2 = [];
							let code$1 = tpl$2[0];
							for (let i = 1; i < tpl$2.length; i++) {
								const value$1 = `${prefix$1}${i - 1}`;
								names$2.push(value$1), code$1 += value$1 + tpl$2[i];
							}
							return {
								names: names$2,
								code: code$1
							};
						}(tpl$1, prefix), metadata$1 = (0, _parse.default)(formatter$1, formatter$1.code(code), {
							parser: opts$1.parser,
							placeholderWhitelist: new Set(names$1.concat(opts$1.placeholderWhitelist ? Array.from(opts$1.placeholderWhitelist) : [])),
							placeholderPattern: opts$1.placeholderPattern,
							preserveComments: opts$1.preserveComments,
							syntacticPlaceholders: opts$1.syntacticPlaceholders
						});
						return {
							metadata: metadata$1,
							names: names$1
						};
					}(formatter, tpl, opts);
					return (arg) => {
						const defaultReplacements = {};
						return arg.forEach((replacement, i) => {
							defaultReplacements[names[i]] = replacement;
						}), (arg$1) => {
							const replacements = (0, _options.normalizeReplacements)(arg$1);
							return replacements && Object.keys(replacements).forEach((key) => {
								if (hasOwnProperty.call(defaultReplacements, key)) throw new Error("Unexpected replacement overlap.");
							}), formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
						};
					};
				};
				var _options = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js");
			},
			"./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.merge = function(a, b$2) {
					const { placeholderWhitelist = a.placeholderWhitelist, placeholderPattern = a.placeholderPattern, preserveComments = a.preserveComments, syntacticPlaceholders = a.syntacticPlaceholders } = b$2;
					return {
						parser: Object.assign({}, a.parser, b$2.parser),
						placeholderWhitelist,
						placeholderPattern,
						preserveComments,
						syntacticPlaceholders
					};
				}, exports$1.normalizeReplacements = function(replacements) {
					if (Array.isArray(replacements)) return replacements.reduce((acc, replacement, i) => (acc["$" + i] = replacement, acc), {});
					if ("object" == typeof replacements || null == replacements) return replacements || void 0;
					throw new Error("Template replacements must be an array, object, null, or undefined");
				}, exports$1.validate = function(opts) {
					if (null != opts && "object" != typeof opts) throw new Error("Unknown template options.");
					const _ref = opts || {}, { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = _ref, parser = function(r$1, e$1) {
						if (null == r$1) return {};
						var t = {};
						for (var n in r$1) if ({}.hasOwnProperty.call(r$1, n)) {
							if (e$1.includes(n)) continue;
							t[n] = r$1[n];
						}
						return t;
					}(_ref, _excluded);
					if (null != placeholderWhitelist && !(placeholderWhitelist instanceof Set)) throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
					if (null != placeholderPattern && !(placeholderPattern instanceof RegExp) && !1 !== placeholderPattern) throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
					if (null != preserveComments && "boolean" != typeof preserveComments) throw new Error("'.preserveComments' must be a boolean, null, or undefined");
					if (null != syntacticPlaceholders && "boolean" != typeof syntacticPlaceholders) throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
					if (!0 === syntacticPlaceholders && (null != placeholderWhitelist || null != placeholderPattern)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
					return {
						parser,
						placeholderWhitelist: placeholderWhitelist || void 0,
						placeholderPattern: null == placeholderPattern ? void 0 : placeholderPattern,
						preserveComments: null == preserveComments ? void 0 : preserveComments,
						syntacticPlaceholders: null == syntacticPlaceholders ? void 0 : syntacticPlaceholders
					};
				};
				const _excluded = [
					"placeholderWhitelist",
					"placeholderPattern",
					"preserveComments",
					"syntacticPlaceholders"
				];
			},
			"./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(formatter, code, opts) {
					const { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = opts, ast = function(code$1, parserOpts, syntacticPlaceholders$1) {
						const plugins = (parserOpts.plugins || []).slice();
						!1 !== syntacticPlaceholders$1 && plugins.push("placeholders");
						parserOpts = Object.assign({
							allowReturnOutsideFunction: !0,
							allowSuperOutsideMethod: !0,
							sourceType: "module"
						}, parserOpts, { plugins });
						try {
							return (0, _parser.parse)(code$1, parserOpts);
						} catch (err) {
							const loc = err.loc;
							throw loc && (err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code$1, { start: loc }), err.code = "BABEL_TEMPLATE_PARSE_ERROR"), err;
						}
					}(code, opts.parser, syntacticPlaceholders);
					removePropertiesDeep(ast, { preserveComments }), formatter.validate(ast);
					const state = {
						syntactic: {
							placeholders: [],
							placeholderNames: new Set()
						},
						legacy: {
							placeholders: [],
							placeholderNames: new Set()
						},
						placeholderWhitelist,
						placeholderPattern,
						syntacticPlaceholders
					};
					return traverse(ast, placeholderVisitorHandler, state), Object.assign({ ast }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _parser = __webpack_require__$1("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js"), _codeFrame = __webpack_require__$1("./stubs/babel-codeframe.mjs");
				const { isCallExpression, isExpressionStatement, isFunction, isIdentifier, isJSXIdentifier, isNewExpression, isPlaceholder, isStatement, isStringLiteral, removePropertiesDeep, traverse } = _t, PATTERN = /^[_$A-Z0-9]+$/;
				function placeholderVisitorHandler(node, ancestors, state) {
					var _state$placeholderWhi;
					let name, hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;
					if (isPlaceholder(node)) {
						if (!1 === state.syntacticPlaceholders) throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
						name = node.name.name, hasSyntacticPlaceholders = !0;
					} else {
						if (hasSyntacticPlaceholders || state.syntacticPlaceholders) return;
						if (isIdentifier(node) || isJSXIdentifier(node)) name = node.name;
						else {
							if (!isStringLiteral(node)) return;
							name = node.value;
						}
					}
					if (hasSyntacticPlaceholders && (null != state.placeholderPattern || null != state.placeholderWhitelist)) throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
					if (!(hasSyntacticPlaceholders || !1 !== state.placeholderPattern && (state.placeholderPattern || PATTERN).test(name) || null != (_state$placeholderWhi = state.placeholderWhitelist) && _state$placeholderWhi.has(name))) return;
					ancestors = ancestors.slice();
					const { node: parent, key } = ancestors[ancestors.length - 1];
					let type$1;
					isStringLiteral(node) || isPlaceholder(node, { expectedNode: "StringLiteral" }) ? type$1 = "string" : isNewExpression(parent) && "arguments" === key || isCallExpression(parent) && "arguments" === key || isFunction(parent) && "params" === key ? type$1 = "param" : isExpressionStatement(parent) && !isPlaceholder(node) ? (type$1 = "statement", ancestors = ancestors.slice(0, -1)) : type$1 = isStatement(node) && isPlaceholder(node) ? "statement" : "other";
					const { placeholders, placeholderNames } = hasSyntacticPlaceholders ? state.syntactic : state.legacy;
					placeholders.push({
						name,
						type: type$1,
						resolve: (ast) => function(ast$1, ancestors$1) {
							let parent$1 = ast$1;
							for (let i = 0; i < ancestors$1.length - 1; i++) {
								const { key: key$2, index: index$1 } = ancestors$1[i];
								parent$1 = void 0 === index$1 ? parent$1[key$2] : parent$1[key$2][index$1];
							}
							const { key: key$1, index } = ancestors$1[ancestors$1.length - 1];
							return {
								parent: parent$1,
								key: key$1,
								index
							};
						}(ast, ancestors),
						isDuplicate: placeholderNames.has(name)
					}), placeholderNames.add(name);
				}
			},
			"./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(metadata, replacements) {
					const ast = cloneNode(metadata.ast);
					replacements && (metadata.placeholders.forEach((placeholder) => {
						if (!hasOwnProperty.call(replacements, placeholder.name)) {
							const placeholderName = placeholder.name;
							throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}\n            - { placeholderPattern: /^${placeholderName}$/ }`);
						}
					}), Object.keys(replacements).forEach((key) => {
						if (!metadata.placeholderNames.has(key)) throw new Error(`Unknown substitution "${key}" given`);
					}));
					return metadata.placeholders.slice().reverse().forEach((placeholder) => {
						try {
							(function(placeholder$1, ast$1, replacement) {
								placeholder$1.isDuplicate && (Array.isArray(replacement) ? replacement = replacement.map((node) => cloneNode(node)) : "object" == typeof replacement && (replacement = cloneNode(replacement)));
								const { parent, key, index } = placeholder$1.resolve(ast$1);
								if ("string" === placeholder$1.type) {
									if ("string" == typeof replacement && (replacement = stringLiteral(replacement)), !replacement || !isStringLiteral(replacement)) throw new Error("Expected string substitution");
								} else if ("statement" === placeholder$1.type) void 0 === index ? replacement ? Array.isArray(replacement) ? replacement = blockStatement(replacement) : "string" == typeof replacement ? replacement = expressionStatement(identifier(replacement)) : isStatement(replacement) || (replacement = expressionStatement(replacement)) : replacement = emptyStatement() : replacement && !Array.isArray(replacement) && ("string" == typeof replacement && (replacement = identifier(replacement)), isStatement(replacement) || (replacement = expressionStatement(replacement)));
								else if ("param" === placeholder$1.type) {
									if ("string" == typeof replacement && (replacement = identifier(replacement)), void 0 === index) throw new Error("Assertion failure.");
								} else if ("string" == typeof replacement && (replacement = identifier(replacement)), Array.isArray(replacement)) throw new Error("Cannot replace single expression with an array.");
								function set(parent$1, key$1, value$1) {
									const node = parent$1[key$1];
									parent$1[key$1] = value$1, "Identifier" !== node.type && "Placeholder" !== node.type || (node.typeAnnotation && (value$1.typeAnnotation = node.typeAnnotation), node.optional && (value$1.optional = node.optional), node.decorators && (value$1.decorators = node.decorators));
								}
								if (void 0 === index) validate(parent, key, replacement), set(parent, key, replacement);
								else {
									const items = parent[key].slice();
									"statement" === placeholder$1.type || "param" === placeholder$1.type ? null == replacement ? items.splice(index, 1) : Array.isArray(replacement) ? items.splice(index, 1, ...replacement) : set(items, index, replacement) : set(items, index, replacement), validate(parent, key, items), parent[key] = items;
								}
							})(placeholder, ast, replacements && replacements[placeholder.name] || null);
						} catch (e$1) {
							throw e$1.message = `@babel/template placeholder "${placeholder.name}": ${e$1.message}`, e$1;
						}
					}), ast;
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { blockStatement, cloneNode, emptyStatement, expressionStatement, identifier, isStatement, isStringLiteral, stringLiteral, validate } = _t;
			},
			"./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/string.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(formatter, code, opts) {
					let metadata;
					return code = formatter.code(code), (arg) => {
						const replacements = (0, _options.normalizeReplacements)(arg);
						return metadata || (metadata = (0, _parse.default)(formatter, code, opts)), formatter.unwrap((0, _populate.default)(metadata, replacements));
					};
				};
				var _options = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js");
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.clear = function() {
					clearPath(), clearScope();
				}, exports$1.clearPath = clearPath, exports$1.clearScope = clearScope, exports$1.getCachedPaths = function(hub, parent) {
					var _pathsCache$get;
					return null == (_pathsCache$get = pathsCache.get(nullHub)) ? void 0 : _pathsCache$get.get(parent);
				}, exports$1.getOrCreateCachedPaths = function(hub, parent) {
					let parents = pathsCache.get(nullHub);
					parents || pathsCache.set(nullHub, parents = new WeakMap());
					let paths = parents.get(parent);
					paths || parents.set(parent, paths = new Map());
					return paths;
				}, exports$1.scope = exports$1.path = void 0;
				let pathsCache = exports$1.path = new WeakMap(), scope = exports$1.scope = new WeakMap();
				function clearPath() {
					exports$1.path = pathsCache = new WeakMap();
				}
				function clearScope() {
					exports$1.scope = scope = new WeakMap();
				}
				const nullHub = Object.freeze({});
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/context.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
				const { VISITOR_KEYS } = _t;
				exports$1.default = class {
					constructor(scope, opts, state, parentPath) {
						this.queue = null, this.priorityQueue = null, this.parentPath = parentPath, this.scope = scope, this.state = state, this.opts = opts;
					}
					shouldVisit(node) {
						const opts = this.opts;
						if (opts.enter || opts.exit) return !0;
						if (opts[node.type]) return !0;
						const keys = VISITOR_KEYS[node.type];
						if (null == keys || !keys.length) return !1;
						for (const key of keys) if (node[key]) return !0;
						return !1;
					}
					create(node, container, key, listKey) {
						return _index.default.get({
							parentPath: this.parentPath,
							parent: node,
							container,
							key,
							listKey
						});
					}
					maybeQueue(path$9, notPriority) {
						this.queue && (notPriority ? this.queue.push(path$9) : this.priorityQueue.push(path$9));
					}
					visitMultiple(container, parent, listKey) {
						if (0 === container.length) return !1;
						const queue$1 = [];
						for (let key = 0; key < container.length; key++) {
							const node = container[key];
							node && this.shouldVisit(node) && queue$1.push(this.create(parent, container, key, listKey));
						}
						return this.visitQueue(queue$1);
					}
					visitSingle(node, key) {
						return !!this.shouldVisit(node[key]) && this.visitQueue([this.create(node, node, key)]);
					}
					visitQueue(queue$1) {
						this.queue = queue$1, this.priorityQueue = [];
						const visited = new WeakSet();
						let stop = !1, visitIndex = 0;
						for (; visitIndex < queue$1.length;) {
							const path$9 = queue$1[visitIndex];
							if (visitIndex++, _context.resync.call(path$9), 0 !== path$9.contexts.length && path$9.contexts[path$9.contexts.length - 1] === this || _context.pushContext.call(path$9, this), null === path$9.key) continue;
							const { node } = path$9;
							if (!visited.has(node)) {
								if (node && visited.add(node), path$9.visit()) {
									stop = !0;
									break;
								}
								if (this.priorityQueue.length && (stop = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = queue$1, stop)) break;
							}
						}
						for (let i = 0; i < visitIndex; i++) _context.popContext.call(queue$1[i]);
						return this.queue = null, stop;
					}
					visit(node, key) {
						const nodes = node[key];
						return !!nodes && (Array.isArray(nodes) ? this.visitMultiple(nodes, node, key) : this.visitSingle(node, key));
					}
				};
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/hub.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				exports$1.default = class {
					getCode() {}
					getScope() {}
					addHelper() {
						throw new Error("Helpers are not supported by the default hub.");
					}
					buildError(node, msg, Error$1 = TypeError) {
						return new Error$1(msg);
					}
				};
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), Object.defineProperty(exports$1, "Hub", {
					enumerable: !0,
					get: function() {
						return _hub.default;
					}
				}), Object.defineProperty(exports$1, "NodePath", {
					enumerable: !0,
					get: function() {
						return _index.default;
					}
				}), Object.defineProperty(exports$1, "Scope", {
					enumerable: !0,
					get: function() {
						return _index2.default;
					}
				}), exports$1.visitors = exports$1.default = void 0, __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
				var visitors = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js");
				exports$1.visitors = visitors;
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), cache = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _traverseNode = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js"), _hub = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/hub.js");
				const { VISITOR_KEYS, removeProperties, traverseFast } = _t;
				function traverse(parent, opts = {}, scope, state, parentPath, visitSelf) {
					if (parent) {
						if (!opts.noScope && !scope && "Program" !== parent.type && "File" !== parent.type) throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
						if (!parentPath && visitSelf) throw new Error("visitSelf can only be used when providing a NodePath.");
						VISITOR_KEYS[parent.type] && (visitors.explode(opts), (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath, null, visitSelf));
					}
				}
				exports$1.default = traverse;
				function hasDenylistedType(path$9, state) {
					path$9.node.type === state.type && (state.has = !0, path$9.stop());
				}
				traverse.visitors = visitors, traverse.verify = visitors.verify, traverse.explode = visitors.explode, traverse.cheap = function(node, enter) {
					traverseFast(node, enter);
				}, traverse.node = function(node, opts, scope, state, path$9, skipKeys) {
					(0, _traverseNode.traverseNode)(node, opts, scope, state, path$9, skipKeys);
				}, traverse.clearNode = function(node, opts) {
					removeProperties(node, opts);
				}, traverse.removeProperties = function(tree, opts) {
					return traverseFast(tree, traverse.clearNode, opts), tree;
				}, traverse.hasType = function(tree, type$1, denylistTypes) {
					if (null != denylistTypes && denylistTypes.includes(tree.type)) return !1;
					if (tree.type === type$1) return !0;
					const state = {
						has: !1,
						type: type$1
					};
					return traverse(tree, {
						noScope: !0,
						denylist: denylistTypes,
						enter: hasDenylistedType
					}, null, state), state.has;
				}, traverse.cache = cache;
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/ancestry.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.find = function(callback) {
					let path$9 = this;
					do
						if (callback(path$9)) return path$9;
					while (path$9 = path$9.parentPath);
					return null;
				}, exports$1.findParent = function(callback) {
					let path$9 = this;
					for (; path$9 = path$9.parentPath;) if (callback(path$9)) return path$9;
					return null;
				}, exports$1.getAncestry = function() {
					let path$9 = this;
					const paths = [];
					do
						paths.push(path$9);
					while (path$9 = path$9.parentPath);
					return paths;
				}, exports$1.getDeepestCommonAncestorFrom = function(paths, filter) {
					if (!paths.length) return this;
					if (1 === paths.length) return paths[0];
					let lastCommonIndex, lastCommon, minDepth = Infinity;
					const ancestries = paths.map((path$9) => {
						const ancestry = [];
						do
							ancestry.unshift(path$9);
						while ((path$9 = path$9.parentPath) && path$9 !== this);
						return ancestry.length < minDepth && (minDepth = ancestry.length), ancestry;
					}), first = ancestries[0];
					depthLoop: for (let i = 0; i < minDepth; i++) {
						const shouldMatch = first[i];
						for (const ancestry of ancestries) if (ancestry[i] !== shouldMatch) break depthLoop;
						lastCommonIndex = i, lastCommon = shouldMatch;
					}
					if (lastCommon) return filter ? filter(lastCommon, lastCommonIndex, ancestries) : lastCommon;
					throw new Error("Couldn't find intersection");
				}, exports$1.getEarliestCommonAncestorFrom = function(paths) {
					return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
						let earliest;
						const keys = VISITOR_KEYS[deepest.type];
						for (const ancestry of ancestries) {
							const path$9 = ancestry[i + 1];
							if (!earliest) {
								earliest = path$9;
								continue;
							}
							if (path$9.listKey && earliest.listKey === path$9.listKey && path$9.key < earliest.key) {
								earliest = path$9;
								continue;
							}
							keys.indexOf(earliest.parentKey) > keys.indexOf(path$9.parentKey) && (earliest = path$9);
						}
						return earliest;
					});
				}, exports$1.getFunctionParent = function() {
					return this.findParent((p$1) => p$1.isFunction());
				}, exports$1.getStatementParent = function() {
					let path$9 = this;
					do {
						if (!path$9.parentPath || Array.isArray(path$9.container) && path$9.isStatement()) break;
						path$9 = path$9.parentPath;
					} while (path$9);
					if (path$9 && (path$9.isProgram() || path$9.isFile())) throw new Error("File/Program node, we can't possibly find a statement parent to this");
					return path$9;
				}, exports$1.inType = function(...candidateTypes) {
					let path$9 = this;
					for (; path$9;) {
						for (const type$1 of candidateTypes) if (path$9.node.type === type$1) return !0;
						path$9 = path$9.parentPath;
					}
					return !1;
				}, exports$1.isAncestor = function(maybeDescendant) {
					return maybeDescendant.isDescendant(this);
				}, exports$1.isDescendant = function(maybeAncestor) {
					return !!this.findParent((parent) => parent === maybeAncestor);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { VISITOR_KEYS } = _t;
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/comments.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.addComment = function(type$1, content, line) {
					_addComment(this.node, type$1, content, line);
				}, exports$1.addComments = function(type$1, comments) {
					_addComments(this.node, type$1, comments);
				}, exports$1.shareCommentsWithSiblings = function() {
					if ("string" == typeof this.key) return;
					const node = this.node;
					if (!node) return;
					const trailing = node.trailingComments, leading = node.leadingComments;
					if (!trailing && !leading) return;
					const prev = this.getSibling(this.key - 1), next = this.getSibling(this.key + 1), hasPrev = Boolean(prev.node), hasNext = Boolean(next.node);
					hasPrev && (leading && prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments)), trailing && !hasNext && prev.addComments("trailing", trailing));
					hasNext && (trailing && next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments)), leading && !hasPrev && next.addComments("leading", leading));
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { addComment: _addComment, addComments: _addComments } = _t;
				function removeIfExisting(list, toRemove) {
					if (null == toRemove || !toRemove.length) return list;
					const set = new Set(toRemove);
					return list.filter((el) => !set.has(el));
				}
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1._call = _call, exports$1._getQueueContexts = function() {
					let path$9 = this, contexts = this.contexts;
					for (; !contexts.length && (path$9 = path$9.parentPath, path$9);) contexts = path$9.contexts;
					return contexts;
				}, exports$1._resyncKey = _resyncKey, exports$1._resyncList = _resyncList, exports$1._resyncParent = _resyncParent, exports$1._resyncRemoved = function() {
					null != this.key && this.container && this.container[this.key] === this.node || _removal._markRemoved.call(this);
				}, exports$1.call = call, exports$1.isDenylisted = isDenylisted, exports$1.popContext = function() {
					this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
				}, exports$1.pushContext = function(context) {
					this.contexts.push(context), this.setContext(context);
				}, exports$1.requeue = function(pathToQueue = this) {
					if (pathToQueue.removed) return;
					const contexts = this.contexts;
					for (const context of contexts) context.maybeQueue(pathToQueue);
				}, exports$1.requeueComputedKeyAndDecorators = function() {
					const { context, node } = this;
					!t.isPrivate(node) && node.computed && context.maybeQueue(this.get("key"));
					if (node.decorators) for (const decorator of this.get("decorators")) context.maybeQueue(decorator);
				}, exports$1.resync = function() {
					if (this.removed) return;
					_resyncParent.call(this), _resyncList.call(this), _resyncKey.call(this);
				}, exports$1.setContext = function(context) {
					null != this.skipKeys && (this.skipKeys = {});
					this._traverseFlags = 0, context && (this.context = context, this.state = context.state, this.opts = context.opts);
					return setScope.call(this), this;
				}, exports$1.setKey = setKey, exports$1.setScope = setScope, exports$1.setup = function(parentPath, container, listKey, key) {
					this.listKey = listKey, this.container = container, this.parentPath = parentPath || this.parentPath, setKey.call(this, key);
				}, exports$1.skip = function() {
					this.shouldSkip = !0;
				}, exports$1.skipKey = function(key) {
					this.skipKeys ??= {};
					this.skipKeys[key] = !0;
				}, exports$1.stop = function() {
					this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
				}, exports$1.visit = function() {
					var _this$opts$shouldSkip, _this$opts;
					if (!this.node) return !1;
					if (this.isDenylisted()) return !1;
					if (null != (_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) && _this$opts$shouldSkip.call(_this$opts, this)) return !1;
					const currentContext = this.context;
					if (this.shouldSkip || call.call(this, "enter")) return this.debug("Skip..."), this.shouldStop;
					return restoreContext(this, currentContext), this.debug("Recursing into..."), this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), restoreContext(this, currentContext), call.call(this, "exit"), this.shouldStop;
				};
				var _traverseNode = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _removal = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				function call(key) {
					const opts = this.opts;
					return this.debug(key), !(!this.node || !_call.call(this, opts[key])) || !!this.node && _call.call(this, null == (_opts$this$node$type = opts[this.node.type]) ? void 0 : _opts$this$node$type[key]);
					var _opts$this$node$type;
				}
				function _call(fns) {
					if (!fns) return !1;
					for (const fn of fns) {
						if (!fn) continue;
						const node = this.node;
						if (!node) return !0;
						const ret = fn.call(this.state, this, this.state);
						if (ret && "object" == typeof ret && "function" == typeof ret.then) throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
						if (ret) throw new Error(`Unexpected return value from visitor method ${fn}`);
						if (this.node !== node) return !0;
						if (this._traverseFlags > 0) return !0;
					}
					return !1;
				}
				function isDenylisted() {
					var _this$opts$denylist;
					const denylist = null != (_this$opts$denylist = this.opts.denylist) ? _this$opts$denylist : this.opts.blacklist;
					return null == denylist ? void 0 : denylist.includes(this.node.type);
				}
				function restoreContext(path$9, context) {
					path$9.context !== context && (path$9.context = context, path$9.state = context.state, path$9.opts = context.opts);
				}
				function setScope() {
					var _this$opts2, _this$scope;
					if (null != (_this$opts2 = this.opts) && _this$opts2.noScope) return;
					let target, path$9 = this.parentPath;
					for ((("key" === this.key || "decorators" === this.listKey) && path$9.isMethod() || "discriminant" === this.key && path$9.isSwitchStatement()) && (path$9 = path$9.parentPath); path$9 && !target;) {
						var _path$opts;
						if (null != (_path$opts = path$9.opts) && _path$opts.noScope) return;
						target = path$9.scope, path$9 = path$9.parentPath;
					}
					this.scope = this.getScope(target), null == (_this$scope = this.scope) || _this$scope.init();
				}
				function _resyncParent() {
					this.parentPath && (this.parent = this.parentPath.node);
				}
				function _resyncKey() {
					if (this.container && this.node !== this.container[this.key]) {
						if (Array.isArray(this.container)) {
							for (let i = 0; i < this.container.length; i++) if (this.container[i] === this.node) return void setKey.call(this, i);
						} else for (const key of Object.keys(this.container)) if (this.container[key] === this.node) return void setKey.call(this, key);
						this.key = null;
					}
				}
				function _resyncList() {
					if (!this.parent || !this.inList) return;
					const newContainer = this.parent[this.listKey];
					this.container !== newContainer && (this.container = newContainer || null);
				}
				function setKey(key) {
					var _this$node;
					this.key = key, this.node = this.container[this.key], this.type = null == (_this$node = this.node) ? void 0 : _this$node.type;
				}
				exports$1.isBlacklisted = isDenylisted;
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/conversion.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.arrowFunctionToExpression = function({ allowInsertArrow = !0, allowInsertArrowWithRest = allowInsertArrow, noNewArrows = !((_arguments$) => null == (_arguments$ = arguments[0]) ? void 0 : _arguments$.specCompliant)() } = {}) {
					if (!this.isArrowFunctionExpression()) throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
					let self$1 = this;
					var _self$ensureFunctionN;
					noNewArrows || (self$1 = null != (_self$ensureFunctionN = self$1.ensureFunctionName(!1)) ? _self$ensureFunctionN : self$1);
					const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(self$1, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
					if (fn.ensureBlock(), function(path$9, type$1) {
						path$9.node.type = type$1;
					}(fn, "FunctionExpression"), !noNewArrows) {
						const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
						return checkBinding && fn.parentPath.scope.push({
							id: checkBinding,
							init: objectExpression([])
						}), fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), identifier(checkBinding ? checkBinding.name : thisBinding)]))), fn.replaceWith(callExpression(memberExpression(fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()])), fn.get("callee.object");
					}
					return fn;
				}, exports$1.ensureBlock = function() {
					const body = this.get("body"), bodyNode = body.node;
					if (Array.isArray(body)) throw new Error("Can't convert array path to a block statement");
					if (!bodyNode) throw new Error("Can't convert node without a body");
					if (body.isBlockStatement()) return bodyNode;
					const statements = [];
					let key, listKey, stringPath = "body";
					body.isStatement() ? (listKey = "body", key = 0, statements.push(body.node)) : (stringPath += ".body.0", this.isFunction() ? (key = "argument", statements.push(returnStatement(body.node))) : (key = "expression", statements.push(expressionStatement(body.node))));
					this.node.body = blockStatement(statements);
					const parentPath = this.get(stringPath);
					return _context.setup.call(body, parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key), this.node;
				}, exports$1.ensureFunctionName = function(supportUnicodeId) {
					if (this.node.id) return this;
					const res = getFunctionName(this.node, this.parent);
					if (null == res) return this;
					let { name } = res;
					if (!supportUnicodeId && /[\uD800-\uDFFF]/.test(name)) return null;
					if (name.startsWith("get ") || name.startsWith("set ")) return null;
					name = toBindingIdentifierName(name.replace(/[/ ]/g, "_"));
					const id = identifier(name);
					inherits$6(id, res.originalNode);
					const state = {
						needsRename: !1,
						name
					}, { scope } = this, binding = scope.getOwnBinding(name);
					binding ? "param" === binding.kind && (state.needsRename = !0) : (scope.parent.hasBinding(name) || scope.hasGlobal(name)) && this.traverse(refersOuterBindingVisitor, state);
					if (!state.needsRename) return this.node.id = id, scope.getProgramParent().references[id.name] = !0, this;
					if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) return scope.rename(id.name), this.node.id = id, scope.getProgramParent().references[id.name] = !0, this;
					if (!isFunction(this.node)) return null;
					const key = scope.generateUidIdentifier(id.name), params = [];
					for (let i = 0, len = function(node) {
						const count = node.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
						return -1 === count ? node.params.length : count;
					}(this.node); i < len; i++) params.push(scope.generateUidIdentifier("x"));
					const call = _template.default.expression.ast`
    (function (${key}) {
      function ${id}(${params}) {
        return ${cloneNode(key)}.apply(this, arguments);
      }

      ${cloneNode(id)}.toString = function () {
        return ${cloneNode(key)}.toString();
      }

      return ${cloneNode(id)};
    })(${toExpression(this.node)})
  `;
					return this.replaceWith(call)[0].get("arguments.0");
				}, exports$1.splitExportDeclaration = function() {
					if (!this.isExportDeclaration() || this.isExportAllDeclaration()) throw new Error("Only default and named export declarations can be split.");
					if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
					const declaration = this.get("declaration");
					if (this.isExportDefaultDeclaration()) {
						const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration(), exportExpr = declaration.isFunctionExpression() || declaration.isClassExpression(), scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;
						let id = declaration.node.id, needBindingRegistration = !1;
						id ? exportExpr && scope.hasBinding(id.name) && (needBindingRegistration = !0, id = scope.generateUidIdentifier(id.name)) : (needBindingRegistration = !0, id = scope.generateUidIdentifier("default"), (standaloneDeclaration || exportExpr) && (declaration.node.id = cloneNode(id)));
						const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration.node)]), updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
						return this.insertAfter(updatedExportDeclaration), this.replaceWith(updatedDeclaration), needBindingRegistration && scope.registerDeclaration(this), this;
					}
					if (this.get("specifiers").length > 0) throw new Error("It doesn't make sense to split exported specifiers.");
					const bindingIdentifiers = declaration.getOuterBindingIdentifiers(), specifiers = Object.keys(bindingIdentifiers).map((name) => exportSpecifier(identifier(name), identifier(name))), aliasDeclar = exportNamedDeclaration(null, specifiers);
					return this.insertAfter(aliasDeclar), this.replaceWith(declaration.node), this;
				}, exports$1.toComputedKey = function() {
					let key;
					if (this.isMemberExpression()) key = this.node.property;
					else {
						if (!this.isProperty() && !this.isMethod()) throw new ReferenceError("todo");
						key = this.node.key;
					}
					this.node.computed || isIdentifier(key) && (key = stringLiteral(key.name));
					return key;
				}, exports$1.unwrapFunctionEnvironment = function() {
					if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
					hoistFunctionEnvironment(this);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__$1("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js"), _visitors = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js"), _context = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
				const { arrowFunctionExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, conditionalExpression, expressionStatement, identifier, isIdentifier, jsxIdentifier, logicalExpression, LOGICAL_OPERATORS, memberExpression, metaProperty, numericLiteral, objectExpression, restElement, returnStatement, sequenceExpression, spreadElement, stringLiteral, super: _super, thisExpression, toExpression, unaryExpression, toBindingIdentifierName, isFunction, isAssignmentPattern, isRestElement, getFunctionName, cloneNode, variableDeclaration, variableDeclarator, exportNamedDeclaration, exportSpecifier, inherits: inherits$6 } = _t;
				exports$1.arrowFunctionToShadowed = function() {
					this.isArrowFunctionExpression() && this.arrowFunctionToExpression();
				};
				const getSuperCallsVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child$1, { allSuperCalls }) {
					child$1.get("callee").isSuper() && allSuperCalls.push(child$1);
				} });
				function hoistFunctionEnvironment(fnPath, noNewArrows = !0, allowInsertArrow = !0, allowInsertArrowWithRest = !0) {
					let arrowParent, thisEnvFn = fnPath.findParent((p$1) => p$1.isArrowFunctionExpression() ? (arrowParent ??= p$1, !1) : p$1.isFunction() || p$1.isProgram() || p$1.isClassProperty({ static: !1 }) || p$1.isClassPrivateProperty({ static: !1 }));
					const inConstructor = thisEnvFn.isClassMethod({ kind: "constructor" });
					if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) if (arrowParent) thisEnvFn = arrowParent;
					else {
						if (!allowInsertArrow) throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
						fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), [])), thisEnvFn = fnPath.get("callee"), fnPath = thisEnvFn.get("body");
					}
					const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } = function(fnPath$1) {
						const thisPaths$1 = [], argumentsPaths$1 = [], newTargetPaths$1 = [], superProps$1 = [], superCalls$1 = [];
						return fnPath$1.traverse(getScopeInformationVisitor, {
							thisPaths: thisPaths$1,
							argumentsPaths: argumentsPaths$1,
							newTargetPaths: newTargetPaths$1,
							superProps: superProps$1,
							superCalls: superCalls$1
						}), {
							thisPaths: thisPaths$1,
							argumentsPaths: argumentsPaths$1,
							newTargetPaths: newTargetPaths$1,
							superProps: superProps$1,
							superCalls: superCalls$1
						};
					}(fnPath);
					if (inConstructor && superCalls.length > 0) {
						if (!allowInsertArrow) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
						if (!allowInsertArrowWithRest) throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
						const allSuperCalls = [];
						thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });
						const superBinding = function(thisEnvFn$1) {
							return getBinding(thisEnvFn$1, "supercall", () => {
								const argsBinding = thisEnvFn$1.scope.generateUidIdentifier("args");
								return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
							});
						}(thisEnvFn);
						allSuperCalls.forEach((superCall) => {
							const callee = identifier(superBinding);
							callee.loc = superCall.node.callee.loc, superCall.get("callee").replaceWith(callee);
						});
					}
					if (argumentsPaths.length > 0) {
						const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
							const args = () => identifier("arguments");
							return thisEnvFn.scope.path.isProgram() ? conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args()) : args();
						});
						argumentsPaths.forEach((argumentsChild) => {
							const argsRef = identifier(argumentsBinding);
							argsRef.loc = argumentsChild.node.loc, argumentsChild.replaceWith(argsRef);
						});
					}
					if (newTargetPaths.length > 0) {
						const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
						newTargetPaths.forEach((targetChild) => {
							const targetRef = identifier(newTargetBinding);
							targetRef.loc = targetChild.node.loc, targetChild.replaceWith(targetRef);
						});
					}
					if (superProps.length > 0) {
						if (!allowInsertArrow) throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
						superProps.reduce((acc, superProp) => acc.concat(function(superProp$1) {
							if (superProp$1.parentPath.isAssignmentExpression() && "=" !== superProp$1.parentPath.node.operator) {
								const assignmentPath = superProp$1.parentPath, op = assignmentPath.node.operator.slice(0, -1), value$1 = assignmentPath.node.right, isLogicalAssignment = function(op$1) {
									return LOGICAL_OPERATORS.includes(op$1);
								}(op);
								if (superProp$1.node.computed) {
									const tmp = superProp$1.scope.generateDeclaredUidIdentifier("tmp"), object = superProp$1.node.object, property = superProp$1.node.property;
									assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), !0)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), !0), value$1));
								} else {
									const object = superProp$1.node.object, property = superProp$1.node.property;
									assignmentPath.get("left").replaceWith(memberExpression(object, property)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value$1));
								}
								return isLogicalAssignment ? assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right)) : assignmentPath.node.operator = "=", [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
							}
							if (superProp$1.parentPath.isUpdateExpression()) {
								const updateExpr = superProp$1.parentPath, tmp = superProp$1.scope.generateDeclaredUidIdentifier("tmp"), computedKey = superProp$1.node.computed ? superProp$1.scope.generateDeclaredUidIdentifier("prop") : null, parts = [assignmentExpression("=", tmp, memberExpression(superProp$1.node.object, computedKey ? assignmentExpression("=", computedKey, superProp$1.node.property) : superProp$1.node.property, superProp$1.node.computed)), assignmentExpression("=", memberExpression(superProp$1.node.object, computedKey ? identifier(computedKey.name) : superProp$1.node.property, superProp$1.node.computed), binaryExpression(superProp$1.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
								superProp$1.parentPath.node.prefix || parts.push(identifier(tmp.name)), updateExpr.replaceWith(sequenceExpression(parts));
								return [updateExpr.get("expressions.0.right"), updateExpr.get("expressions.1.left")];
							}
							return [superProp$1];
							function rightExpression(op, left, right) {
								return "=" === op ? assignmentExpression("=", left, right) : binaryExpression(op, left, right);
							}
						}(superProp)), []).forEach((superProp) => {
							const key = superProp.node.computed ? "" : superProp.get("property").node.name, superParentPath = superProp.parentPath, isAssignment = superParentPath.isAssignmentExpression({ left: superProp.node }), isCall = superParentPath.isCallExpression({ callee: superProp.node }), isTaggedTemplate = superParentPath.isTaggedTemplateExpression({ tag: superProp.node }), superBinding = function(thisEnvFn$1, isAssignment$1, propName) {
								const op = isAssignment$1 ? "set" : "get";
								return getBinding(thisEnvFn$1, `superprop_${op}:${propName || ""}`, () => {
									const argsList = [];
									let fnBody;
									if (propName) fnBody = memberExpression(_super(), identifier(propName));
									else {
										const method = thisEnvFn$1.scope.generateUidIdentifier("prop");
										argsList.unshift(method), fnBody = memberExpression(_super(), identifier(method.name), !0);
									}
									if (isAssignment$1) {
										const valueIdent = thisEnvFn$1.scope.generateUidIdentifier("value");
										argsList.push(valueIdent), fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
									}
									return arrowFunctionExpression(argsList, fnBody);
								});
							}(thisEnvFn, isAssignment, key), args = [];
							if (superProp.node.computed && args.push(superProp.get("property").node), isAssignment) {
								const value$1 = superParentPath.node.right;
								args.push(value$1);
							}
							const call = callExpression(identifier(superBinding), args);
							isCall ? (superParentPath.unshiftContainer("arguments", thisExpression()), superProp.replaceWith(memberExpression(call, identifier("call"))), thisPaths.push(superParentPath.get("arguments.0"))) : isAssignment ? superParentPath.replaceWith(call) : isTaggedTemplate ? (superProp.replaceWith(callExpression(memberExpression(call, identifier("bind"), !1), [thisExpression()])), thisPaths.push(superProp.get("arguments.0"))) : superProp.replaceWith(call);
						});
					}
					let thisBinding;
					return (thisPaths.length > 0 || !noNewArrows) && (thisBinding = function(thisEnvFn$1, inConstructor$1) {
						return getBinding(thisEnvFn$1, "this", (thisBinding$1) => {
							if (!inConstructor$1 || !hasSuperClass(thisEnvFn$1)) return thisExpression();
							thisEnvFn$1.traverse(assignSuperThisVisitor, {
								supers: new WeakSet(),
								thisBinding: thisBinding$1
							});
						});
					}(thisEnvFn, inConstructor), (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) && (thisPaths.forEach((thisChild) => {
						const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
						thisRef.loc = thisChild.node.loc, thisChild.replaceWith(thisRef);
					}), noNewArrows || (thisBinding = null))), {
						thisBinding,
						fnPath
					};
				}
				function hasSuperClass(thisEnvFn) {
					return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
				}
				const assignSuperThisVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child$1, { supers, thisBinding }) {
					child$1.get("callee").isSuper() && (supers.has(child$1.node) || (supers.add(child$1.node), child$1.replaceWithMultiple([child$1.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))])));
				} });
				function getBinding(thisEnvFn, key, init$1) {
					const cacheKey = "binding:" + key;
					let data = thisEnvFn.getData(cacheKey);
					if (!data) {
						const id = thisEnvFn.scope.generateUidIdentifier(key);
						data = id.name, thisEnvFn.setData(cacheKey, data), thisEnvFn.scope.push({
							id,
							init: init$1(data)
						});
					}
					return data;
				}
				const getScopeInformationVisitor = (0, _visitors.environmentVisitor)({
					ThisExpression(child$1, { thisPaths }) {
						thisPaths.push(child$1);
					},
					JSXIdentifier(child$1, { thisPaths }) {
						"this" === child$1.node.name && (child$1.parentPath.isJSXMemberExpression({ object: child$1.node }) || child$1.parentPath.isJSXOpeningElement({ name: child$1.node })) && thisPaths.push(child$1);
					},
					CallExpression(child$1, { superCalls }) {
						child$1.get("callee").isSuper() && superCalls.push(child$1);
					},
					MemberExpression(child$1, { superProps }) {
						child$1.get("object").isSuper() && superProps.push(child$1);
					},
					Identifier(child$1, { argumentsPaths }) {
						if (!child$1.isReferencedIdentifier({ name: "arguments" })) return;
						let curr = child$1.scope;
						do {
							if (curr.hasOwnBinding("arguments")) return void curr.rename("arguments");
							if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) break;
						} while (curr = curr.parent);
						argumentsPaths.push(child$1);
					},
					MetaProperty(child$1, { newTargetPaths }) {
						child$1.get("meta").isIdentifier({ name: "new" }) && child$1.get("property").isIdentifier({ name: "target" }) && newTargetPaths.push(child$1);
					}
				});
				const refersOuterBindingVisitor = {
					"ReferencedIdentifier|BindingIdentifier"(path$9, state) {
						path$9.node.name === state.name && (state.needsRename = !0, path$9.stop());
					},
					Scope(path$9, state) {
						path$9.scope.hasOwnBinding(state.name) && path$9.skip();
					}
				};
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/evaluation.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.evaluate = function() {
					const state = {
						confident: !0,
						deoptPath: null,
						seen: new Map()
					};
					let value$1 = evaluateCached(this, state);
					state.confident || (value$1 = void 0);
					return {
						confident: state.confident,
						deopt: state.deoptPath,
						value: value$1
					};
				}, exports$1.evaluateTruthy = function() {
					const res = this.evaluate();
					if (res.confident) return !!res.value;
				};
				const VALID_OBJECT_CALLEES = [
					"Number",
					"String",
					"Math"
				], VALID_IDENTIFIER_CALLEES = [
					"isFinite",
					"isNaN",
					"parseFloat",
					"parseInt",
					"decodeURI",
					"decodeURIComponent",
					"encodeURI",
					"encodeURIComponent",
					null,
					null
				], INVALID_METHODS = ["random"];
				function isValidObjectCallee(val) {
					return VALID_OBJECT_CALLEES.includes(val);
				}
				function deopt(path$9, state) {
					state.confident && (state.deoptPath = path$9, state.confident = !1);
				}
				const Globals = new Map([
					["undefined", void 0],
					["Infinity", Infinity],
					["NaN", NaN]
				]);
				function evaluateCached(path$9, state) {
					const { node } = path$9, { seen } = state;
					if (seen.has(node)) {
						const existing = seen.get(node);
						return existing.resolved ? existing.value : void deopt(path$9, state);
					}
					{
						const item = { resolved: !1 };
						seen.set(node, item);
						const val = function(path$10, state$1) {
							if (!state$1.confident) return;
							if (path$10.isSequenceExpression()) {
								const exprs = path$10.get("expressions");
								return evaluateCached(exprs[exprs.length - 1], state$1);
							}
							if (path$10.isStringLiteral() || path$10.isNumericLiteral() || path$10.isBooleanLiteral()) return path$10.node.value;
							if (path$10.isNullLiteral()) return null;
							if (path$10.isTemplateLiteral()) return evaluateQuasis(path$10, path$10.node.quasis, state$1);
							if (path$10.isTaggedTemplateExpression() && path$10.get("tag").isMemberExpression()) {
								const object = path$10.get("tag.object"), { node: { name } } = object, property = path$10.get("tag.property");
								if (object.isIdentifier() && "String" === name && !path$10.scope.getBinding(name) && property.isIdentifier() && "raw" === property.node.name) return evaluateQuasis(path$10, path$10.node.quasi.quasis, state$1, !0);
							}
							if (path$10.isConditionalExpression()) {
								const testResult = evaluateCached(path$10.get("test"), state$1);
								if (!state$1.confident) return;
								return evaluateCached(testResult ? path$10.get("consequent") : path$10.get("alternate"), state$1);
							}
							if (path$10.isExpressionWrapper()) return evaluateCached(path$10.get("expression"), state$1);
							if (path$10.isMemberExpression() && !path$10.parentPath.isCallExpression({ callee: path$10.node })) {
								const property = path$10.get("property"), object = path$10.get("object");
								if (object.isLiteral()) {
									const value$1 = object.node.value, type$1 = typeof value$1;
									let key = null;
									if (path$10.node.computed) {
										if (key = evaluateCached(property, state$1), !state$1.confident) return;
									} else property.isIdentifier() && (key = property.node.name);
									if (!("number" !== type$1 && "string" !== type$1 || null == key || "number" != typeof key && "string" != typeof key)) return value$1[key];
								}
							}
							if (path$10.isReferencedIdentifier()) {
								const binding = path$10.scope.getBinding(path$10.node.name);
								if (binding) {
									if (binding.constantViolations.length > 0 || path$10.node.start < binding.path.node.end) return void deopt(binding.path, state$1);
									if (binding.hasValue) return binding.value;
								}
								const name = path$10.node.name;
								if (Globals.has(name)) return binding ? void deopt(binding.path, state$1) : Globals.get(name);
								const resolved = path$10.resolve();
								return resolved === path$10 ? void deopt(path$10, state$1) : evaluateCached(resolved, state$1);
							}
							if (path$10.isUnaryExpression({ prefix: !0 })) {
								if ("void" === path$10.node.operator) return;
								const argument = path$10.get("argument");
								if ("typeof" === path$10.node.operator && (argument.isFunction() || argument.isClass())) return "function";
								const arg = evaluateCached(argument, state$1);
								if (!state$1.confident) return;
								switch (path$10.node.operator) {
									case "!": return !arg;
									case "+": return +arg;
									case "-": return -arg;
									case "~": return ~arg;
									case "typeof": return typeof arg;
								}
							}
							if (path$10.isArrayExpression()) {
								const arr = [], elems = path$10.get("elements");
								for (const elem of elems) {
									const elemValue = elem.evaluate();
									if (!elemValue.confident) return void deopt(elemValue.deopt, state$1);
									arr.push(elemValue.value);
								}
								return arr;
							}
							if (path$10.isObjectExpression()) {
								const obj = {}, props = path$10.get("properties");
								for (const prop of props) {
									if (prop.isObjectMethod() || prop.isSpreadElement()) return void deopt(prop, state$1);
									const keyPath = prop.get("key");
									let key;
									if (prop.node.computed) {
										if (key = keyPath.evaluate(), !key.confident) return void deopt(key.deopt, state$1);
										key = key.value;
									} else key = keyPath.isIdentifier() ? keyPath.node.name : keyPath.node.value;
									let value$1 = prop.get("value").evaluate();
									if (!value$1.confident) return void deopt(value$1.deopt, state$1);
									value$1 = value$1.value, obj[key] = value$1;
								}
								return obj;
							}
							if (path$10.isLogicalExpression()) {
								const wasConfident = state$1.confident, left = evaluateCached(path$10.get("left"), state$1), leftConfident = state$1.confident;
								state$1.confident = wasConfident;
								const right = evaluateCached(path$10.get("right"), state$1), rightConfident = state$1.confident;
								switch (path$10.node.operator) {
									case "||":
										if (state$1.confident = leftConfident && (!!left || rightConfident), !state$1.confident) return;
										return left || right;
									case "&&":
										if (state$1.confident = leftConfident && (!left || rightConfident), !state$1.confident) return;
										return left && right;
									case "??":
										if (state$1.confident = leftConfident && (null != left || rightConfident), !state$1.confident) return;
										return null != left ? left : right;
								}
							}
							if (path$10.isBinaryExpression()) {
								const left = evaluateCached(path$10.get("left"), state$1);
								if (!state$1.confident) return;
								const right = evaluateCached(path$10.get("right"), state$1);
								if (!state$1.confident) return;
								switch (path$10.node.operator) {
									case "-": return left - right;
									case "+": return left + right;
									case "/": return left / right;
									case "*": return left * right;
									case "%": return left % right;
									case "**": return Math.pow(left, right);
									case "<": return left < right;
									case ">": return left > right;
									case "<=": return left <= right;
									case ">=": return left >= right;
									case "==": return left == right;
									case "!=": return left != right;
									case "===": return left === right;
									case "!==": return left !== right;
									case "|": return left | right;
									case "&": return left & right;
									case "^": return left ^ right;
									case "<<": return left << right;
									case ">>": return left >> right;
									case ">>>": return left >>> right;
								}
							}
							if (path$10.isCallExpression()) {
								const callee = path$10.get("callee");
								let context, func;
								if (callee.isIdentifier() && !path$10.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || function(val$1) {
									return VALID_IDENTIFIER_CALLEES.includes(val$1);
								}(callee.node.name)) && (func = global[callee.node.name]), callee.isMemberExpression()) {
									const object = callee.get("object"), property = callee.get("property");
									if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !function(val$1) {
										return INVALID_METHODS.includes(val$1);
									}(property.node.name)) {
										context = global[object.node.name];
										const key = property.node.name;
										hasOwnProperty.call(context, key) && (func = context[key]);
									}
									if (object.isLiteral() && property.isIdentifier()) {
										const type$1 = typeof object.node.value;
										"string" !== type$1 && "number" !== type$1 || (context = object.node.value, func = context[property.node.name]);
									}
								}
								if (func) {
									const args = path$10.get("arguments").map((arg) => evaluateCached(arg, state$1));
									if (!state$1.confident) return;
									return func.apply(context, args);
								}
							}
							deopt(path$10, state$1);
						}(path$9, state);
						return state.confident && (item.resolved = !0, item.value = val), val;
					}
				}
				function evaluateQuasis(path$9, quasis, state, raw = !1) {
					let str = "", i = 0;
					const exprs = path$9.isTemplateLiteral() ? path$9.get("expressions") : path$9.get("quasi.expressions");
					for (const elem of quasis) {
						if (!state.confident) break;
						str += raw ? elem.value.raw : elem.value.cooked;
						const expr = exprs[i++];
						expr && (str += String(evaluateCached(expr, state)));
					}
					if (state.confident) return str;
				}
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/family.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1._getKey = _getKey, exports$1._getPattern = _getPattern, exports$1.get = function(key, context = !0) {
					!0 === context && (context = this.context);
					const parts = key.split(".");
					return 1 === parts.length ? _getKey.call(this, key, context) : _getPattern.call(this, parts, context);
				}, exports$1.getAllNextSiblings = function() {
					let _key = this.key, sibling = this.getSibling(++_key);
					const siblings = [];
					for (; sibling.node;) siblings.push(sibling), sibling = this.getSibling(++_key);
					return siblings;
				}, exports$1.getAllPrevSiblings = function() {
					let _key = this.key, sibling = this.getSibling(--_key);
					const siblings = [];
					for (; sibling.node;) siblings.push(sibling), sibling = this.getSibling(--_key);
					return siblings;
				}, exports$1.getAssignmentIdentifiers = function() {
					return _getAssignmentIdentifiers(this.node);
				}, exports$1.getBindingIdentifierPaths = function(duplicates = !1, outerOnly = !1) {
					const search = [this], ids = Object.create(null);
					for (; search.length;) {
						const id = search.shift();
						if (!id) continue;
						if (!id.node) continue;
						const keys = _getBindingIdentifiers.keys[id.node.type];
						if (id.isIdentifier()) if (duplicates) (ids[id.node.name] = ids[id.node.name] || []).push(id);
						else ids[id.node.name] = id;
						else if (id.isExportDeclaration()) {
							const declaration = id.get("declaration");
							declaration.isDeclaration() && search.push(declaration);
						} else {
							if (outerOnly) {
								if (id.isFunctionDeclaration()) {
									search.push(id.get("id"));
									continue;
								}
								if (id.isFunctionExpression()) continue;
							}
							if (keys) for (let i = 0; i < keys.length; i++) {
								const key = keys[i], child$1 = id.get(key);
								Array.isArray(child$1) ? search.push(...child$1) : child$1.node && search.push(child$1);
							}
						}
					}
					return ids;
				}, exports$1.getBindingIdentifiers = function(duplicates) {
					return _getBindingIdentifiers(this.node, duplicates);
				}, exports$1.getCompletionRecords = function() {
					return _getCompletionRecords(this, {
						canHaveBreak: !1,
						shouldPopulateBreak: !1,
						inCaseClause: !1
					}).map((r$1) => r$1.path);
				}, exports$1.getNextSibling = function() {
					return this.getSibling(this.key + 1);
				}, exports$1.getOpposite = function() {
					if ("left" === this.key) return this.getSibling("right");
					if ("right" === this.key) return this.getSibling("left");
					return null;
				}, exports$1.getOuterBindingIdentifierPaths = function(duplicates = !1) {
					return this.getBindingIdentifierPaths(duplicates, !0);
				}, exports$1.getOuterBindingIdentifiers = function(duplicates) {
					return _getOuterBindingIdentifiers(this.node, duplicates);
				}, exports$1.getPrevSibling = function() {
					return this.getSibling(this.key - 1);
				}, exports$1.getSibling = function(key) {
					return _index.default.get({
						parentPath: this.parentPath,
						parent: this.parent,
						container: this.container,
						listKey: this.listKey,
						key
					}).setContext(this.context);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { getAssignmentIdentifiers: _getAssignmentIdentifiers, getBindingIdentifiers: _getBindingIdentifiers, getOuterBindingIdentifiers: _getOuterBindingIdentifiers, numericLiteral, unaryExpression } = _t, NORMAL_COMPLETION = 0, BREAK_COMPLETION = 1;
				function addCompletionRecords(path$9, records, context) {
					return path$9 && records.push(..._getCompletionRecords(path$9, context)), records;
				}
				function normalCompletionToBreak(completions) {
					completions.forEach((c) => {
						c.type = BREAK_COMPLETION;
					});
				}
				function replaceBreakStatementInBreakCompletion(completions, reachable) {
					completions.forEach((c) => {
						c.path.isBreakStatement({ label: null }) && (reachable ? c.path.replaceWith(unaryExpression("void", numericLiteral(0))) : c.path.remove());
					});
				}
				function getStatementListCompletion(paths, context) {
					const completions = [];
					if (context.canHaveBreak) {
						let lastNormalCompletions = [];
						for (let i = 0; i < paths.length; i++) {
							const path$9 = paths[i], newContext = Object.assign({}, context, { inCaseClause: !1 });
							path$9.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak) ? newContext.shouldPopulateBreak = !0 : newContext.shouldPopulateBreak = !1;
							const statementCompletions = _getCompletionRecords(path$9, newContext);
							if (statementCompletions.length > 0 && statementCompletions.every((c) => c.type === BREAK_COMPLETION)) {
								lastNormalCompletions.length > 0 && statementCompletions.every((c) => c.path.isBreakStatement({ label: null })) ? (normalCompletionToBreak(lastNormalCompletions), completions.push(...lastNormalCompletions), lastNormalCompletions.some((c) => c.path.isDeclaration()) && (completions.push(...statementCompletions), replaceBreakStatementInBreakCompletion(statementCompletions, !0)), replaceBreakStatementInBreakCompletion(statementCompletions, !1)) : (completions.push(...statementCompletions), context.shouldPopulateBreak || replaceBreakStatementInBreakCompletion(statementCompletions, !0));
								break;
							}
							if (i === paths.length - 1) completions.push(...statementCompletions);
							else {
								lastNormalCompletions = [];
								for (let i$1 = 0; i$1 < statementCompletions.length; i$1++) {
									const c = statementCompletions[i$1];
									c.type === BREAK_COMPLETION && completions.push(c), c.type === NORMAL_COMPLETION && lastNormalCompletions.push(c);
								}
							}
						}
					} else if (paths.length) for (let i = paths.length - 1; i >= 0; i--) {
						const pathCompletions = _getCompletionRecords(paths[i], context);
						if (pathCompletions.length > 1 || 1 === pathCompletions.length && !pathCompletions[0].path.isVariableDeclaration()) {
							completions.push(...pathCompletions);
							break;
						}
					}
					return completions;
				}
				function _getCompletionRecords(path$9, context) {
					let records = [];
					if (path$9.isIfStatement()) records = addCompletionRecords(path$9.get("consequent"), records, context), records = addCompletionRecords(path$9.get("alternate"), records, context);
					else {
						if (path$9.isDoExpression() || path$9.isFor() || path$9.isWhile() || path$9.isLabeledStatement()) return addCompletionRecords(path$9.get("body"), records, context);
						if (path$9.isProgram() || path$9.isBlockStatement()) return getStatementListCompletion(path$9.get("body"), context);
						if (path$9.isFunction()) return _getCompletionRecords(path$9.get("body"), context);
						if (path$9.isTryStatement()) records = addCompletionRecords(path$9.get("block"), records, context), records = addCompletionRecords(path$9.get("handler"), records, context);
						else {
							if (path$9.isCatchClause()) return addCompletionRecords(path$9.get("body"), records, context);
							if (path$9.isSwitchStatement()) return function(cases, records$1, context$1) {
								let lastNormalCompletions = [];
								for (let i = 0; i < cases.length; i++) {
									const caseCompletions = _getCompletionRecords(cases[i], context$1), normalCompletions = [], breakCompletions = [];
									for (const c of caseCompletions) c.type === NORMAL_COMPLETION && normalCompletions.push(c), c.type === BREAK_COMPLETION && breakCompletions.push(c);
									normalCompletions.length && (lastNormalCompletions = normalCompletions), records$1.push(...breakCompletions);
								}
								return records$1.push(...lastNormalCompletions), records$1;
							}(path$9.get("cases"), records, context);
							if (path$9.isSwitchCase()) return getStatementListCompletion(path$9.get("consequent"), {
								canHaveBreak: !0,
								shouldPopulateBreak: !1,
								inCaseClause: !0
							});
							path$9.isBreakStatement() ? records.push(function(path$10) {
								return {
									type: BREAK_COMPLETION,
									path: path$10
								};
							}(path$9)) : records.push(function(path$10) {
								return {
									type: NORMAL_COMPLETION,
									path: path$10
								};
							}(path$9));
						}
					}
					return records;
				}
				function _getKey(key, context) {
					const node = this.node, container = node[key];
					return Array.isArray(container) ? container.map((_$2, i) => _index.default.get({
						listKey: key,
						parentPath: this,
						parent: node,
						container,
						key: i
					}).setContext(context)) : _index.default.get({
						parentPath: this,
						parent: node,
						container: node,
						key
					}).setContext(context);
				}
				function _getPattern(parts, context) {
					let path$9 = this;
					for (const part of parts) path$9 = "." === part ? path$9.parentPath : Array.isArray(path$9) ? path$9[part] : path$9.get(part, context);
					return path$9;
				}
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = exports$1.SHOULD_STOP = exports$1.SHOULD_SKIP = exports$1.REMOVED = void 0;
				var virtualTypes = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _debug$1 = __webpack_require__$1("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), t = _t, cache = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _generator = __webpack_require__$1("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js"), NodePath_ancestry = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/ancestry.js"), NodePath_inference = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/index.js"), NodePath_replacement = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js"), NodePath_evaluation = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/evaluation.js"), NodePath_conversion = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/conversion.js"), NodePath_introspection = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/introspection.js"), _context = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js"), NodePath_context = _context, NodePath_removal = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), NodePath_modification = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), NodePath_family = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/family.js"), NodePath_comments = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/comments.js"), NodePath_virtual_types_validator = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js");
				const { validate } = _t, debug$5 = _debug$1("babel"), NodePath_Final = (exports$1.REMOVED = 1, exports$1.SHOULD_STOP = 2, exports$1.SHOULD_SKIP = 4, exports$1.default = class NodePath {
					constructor(hub, parent) {
						this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container = null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = parent, this.hub = hub, this.data = null, this.context = null, this.scope = null;
					}
					get removed() {
						return (1 & this._traverseFlags) > 0;
					}
					set removed(v$1) {
						v$1 ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
					}
					get shouldStop() {
						return (2 & this._traverseFlags) > 0;
					}
					set shouldStop(v$1) {
						v$1 ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
					}
					get shouldSkip() {
						return (4 & this._traverseFlags) > 0;
					}
					set shouldSkip(v$1) {
						v$1 ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
					}
					static get({ hub, parentPath, parent, container, listKey, key }) {
						if (!hub && parentPath && (hub = parentPath.hub), !parent) throw new Error("To get a node path the parent needs to exist");
						const targetNode = container[key], paths = cache.getOrCreateCachedPaths(hub, parent);
						let path$9 = paths.get(targetNode);
						return path$9 || (path$9 = new NodePath(hub, parent), targetNode && paths.set(targetNode, path$9)), _context.setup.call(path$9, parentPath, container, listKey, key), path$9;
					}
					getScope(scope) {
						return this.isScope() ? new _index2.default(this) : scope;
					}
					setData(key, val) {
						return this.data ??= Object.create(null), this.data[key] = val;
					}
					getData(key, def) {
						this.data ??= Object.create(null);
						let val = this.data[key];
						return void 0 === val && void 0 !== def && (val = this.data[key] = def), val;
					}
					hasNode() {
						return null != this.node;
					}
					buildCodeFrameError(msg, Error$1 = SyntaxError) {
						return this.hub.buildError(this.node, msg, Error$1);
					}
					traverse(visitor, state) {
						(0, _index.default)(this.node, visitor, this.scope, state, this);
					}
					set(key, node) {
						validate(this.node, key, node), this.node[key] = node;
					}
					getPathLocation() {
						const parts = [];
						let path$9 = this;
						do {
							let key = path$9.key;
							path$9.inList && (key = `${path$9.listKey}[${key}]`), parts.unshift(key);
						} while (path$9 = path$9.parentPath);
						return parts.join(".");
					}
					debug(message) {
						debug$5.enabled && debug$5(`${this.getPathLocation()} ${this.type}: ${message}`);
					}
					toString() {
						return (0, _generator.default)(this.node).code;
					}
					get inList() {
						return !!this.listKey;
					}
					set inList(inList) {
						inList || (this.listKey = null);
					}
					get parentKey() {
						return this.listKey || this.key;
					}
				}), methods = {
					findParent: NodePath_ancestry.findParent,
					find: NodePath_ancestry.find,
					getFunctionParent: NodePath_ancestry.getFunctionParent,
					getStatementParent: NodePath_ancestry.getStatementParent,
					getEarliestCommonAncestorFrom: NodePath_ancestry.getEarliestCommonAncestorFrom,
					getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom,
					getAncestry: NodePath_ancestry.getAncestry,
					isAncestor: NodePath_ancestry.isAncestor,
					isDescendant: NodePath_ancestry.isDescendant,
					inType: NodePath_ancestry.inType,
					getTypeAnnotation: NodePath_inference.getTypeAnnotation,
					isBaseType: NodePath_inference.isBaseType,
					couldBeBaseType: NodePath_inference.couldBeBaseType,
					baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches,
					isGenericType: NodePath_inference.isGenericType,
					replaceWithMultiple: NodePath_replacement.replaceWithMultiple,
					replaceWithSourceString: NodePath_replacement.replaceWithSourceString,
					replaceWith: NodePath_replacement.replaceWith,
					replaceExpressionWithStatements: NodePath_replacement.replaceExpressionWithStatements,
					replaceInline: NodePath_replacement.replaceInline,
					evaluateTruthy: NodePath_evaluation.evaluateTruthy,
					evaluate: NodePath_evaluation.evaluate,
					toComputedKey: NodePath_conversion.toComputedKey,
					ensureBlock: NodePath_conversion.ensureBlock,
					unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment,
					arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression,
					splitExportDeclaration: NodePath_conversion.splitExportDeclaration,
					ensureFunctionName: NodePath_conversion.ensureFunctionName,
					matchesPattern: NodePath_introspection.matchesPattern,
					isStatic: NodePath_introspection.isStatic,
					isNodeType: NodePath_introspection.isNodeType,
					canHaveVariableDeclarationOrExpression: NodePath_introspection.canHaveVariableDeclarationOrExpression,
					canSwapBetweenExpressionAndStatement: NodePath_introspection.canSwapBetweenExpressionAndStatement,
					isCompletionRecord: NodePath_introspection.isCompletionRecord,
					isStatementOrBlock: NodePath_introspection.isStatementOrBlock,
					referencesImport: NodePath_introspection.referencesImport,
					getSource: NodePath_introspection.getSource,
					willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore,
					_guessExecutionStatusRelativeTo: NodePath_introspection._guessExecutionStatusRelativeTo,
					resolve: NodePath_introspection.resolve,
					isConstantExpression: NodePath_introspection.isConstantExpression,
					isInStrictMode: NodePath_introspection.isInStrictMode,
					isDenylisted: NodePath_context.isDenylisted,
					visit: NodePath_context.visit,
					skip: NodePath_context.skip,
					skipKey: NodePath_context.skipKey,
					stop: NodePath_context.stop,
					setContext: NodePath_context.setContext,
					requeue: NodePath_context.requeue,
					requeueComputedKeyAndDecorators: NodePath_context.requeueComputedKeyAndDecorators,
					remove: NodePath_removal.remove,
					insertBefore: NodePath_modification.insertBefore,
					insertAfter: NodePath_modification.insertAfter,
					unshiftContainer: NodePath_modification.unshiftContainer,
					pushContainer: NodePath_modification.pushContainer,
					getOpposite: NodePath_family.getOpposite,
					getCompletionRecords: NodePath_family.getCompletionRecords,
					getSibling: NodePath_family.getSibling,
					getPrevSibling: NodePath_family.getPrevSibling,
					getNextSibling: NodePath_family.getNextSibling,
					getAllNextSiblings: NodePath_family.getAllNextSiblings,
					getAllPrevSiblings: NodePath_family.getAllPrevSiblings,
					get: NodePath_family.get,
					getAssignmentIdentifiers: NodePath_family.getAssignmentIdentifiers,
					getBindingIdentifiers: NodePath_family.getBindingIdentifiers,
					getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers,
					getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths,
					getOuterBindingIdentifierPaths: NodePath_family.getOuterBindingIdentifierPaths,
					shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings,
					addComment: NodePath_comments.addComment,
					addComments: NodePath_comments.addComments
				};
				Object.assign(NodePath_Final.prototype, methods), NodePath_Final.prototype.arrowFunctionToShadowed = NodePath_conversion[String("arrowFunctionToShadowed")], Object.assign(NodePath_Final.prototype, {
					has: NodePath_introspection[String("has")],
					is: NodePath_introspection[String("is")],
					isnt: NodePath_introspection[String("isnt")],
					equals: NodePath_introspection[String("equals")],
					hoist: NodePath_modification[String("hoist")],
					updateSiblingKeys: NodePath_modification.updateSiblingKeys,
					call: NodePath_context.call,
					isBlacklisted: NodePath_context[String("isBlacklisted")],
					setScope: NodePath_context.setScope,
					resync: NodePath_context.resync,
					popContext: NodePath_context.popContext,
					pushContext: NodePath_context.pushContext,
					setup: NodePath_context.setup,
					setKey: NodePath_context.setKey
				}), NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo, NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo, Object.assign(NodePath_Final.prototype, {
					_getTypeAnnotation: NodePath_inference._getTypeAnnotation,
					_replaceWith: NodePath_replacement._replaceWith,
					_resolve: NodePath_introspection._resolve,
					_call: NodePath_context._call,
					_resyncParent: NodePath_context._resyncParent,
					_resyncKey: NodePath_context._resyncKey,
					_resyncList: NodePath_context._resyncList,
					_resyncRemoved: NodePath_context._resyncRemoved,
					_getQueueContexts: NodePath_context._getQueueContexts,
					_removeFromScope: NodePath_removal._removeFromScope,
					_callRemovalHooks: NodePath_removal._callRemovalHooks,
					_remove: NodePath_removal._remove,
					_markRemoved: NodePath_removal._markRemoved,
					_assertUnremoved: NodePath_removal._assertUnremoved,
					_containerInsert: NodePath_modification._containerInsert,
					_containerInsertBefore: NodePath_modification._containerInsertBefore,
					_containerInsertAfter: NodePath_modification._containerInsertAfter,
					_verifyNodeList: NodePath_modification._verifyNodeList,
					_getKey: NodePath_family._getKey,
					_getPattern: NodePath_family._getPattern
				});
				for (const type$1 of t.TYPES) {
					const typeKey = `is${type$1}`, fn = t[typeKey];
					NodePath_Final.prototype[typeKey] = function(opts) {
						return fn(this.node, opts);
					}, NodePath_Final.prototype[`assert${type$1}`] = function(opts) {
						if (!fn(this.node, opts)) throw new TypeError(`Expected node path of type ${type$1}`);
					};
				}
				Object.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);
				for (const type$1 of Object.keys(virtualTypes)) "_" !== type$1[0] && (t.TYPES.includes(type$1) || t.TYPES.push(type$1));
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1._getTypeAnnotation = _getTypeAnnotation, exports$1.baseTypeStrictlyMatches = function(rightArg) {
					const left = this.getTypeAnnotation(), right = rightArg.getTypeAnnotation();
					if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) return right.type === left.type;
					return !1;
				}, exports$1.couldBeBaseType = function(name) {
					const type$1 = this.getTypeAnnotation();
					if (isAnyTypeAnnotation(type$1)) return !0;
					if (isUnionTypeAnnotation(type$1)) {
						for (const type2 of type$1.types) if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, !0)) return !0;
						return !1;
					}
					return _isBaseType(name, type$1, !0);
				}, exports$1.getTypeAnnotation = function() {
					let type$1 = this.getData("typeAnnotation");
					if (null != type$1) return type$1;
					type$1 = _getTypeAnnotation.call(this) || anyTypeAnnotation(), (isTypeAnnotation(type$1) || isTSTypeAnnotation(type$1)) && (type$1 = type$1.typeAnnotation);
					return this.setData("typeAnnotation", type$1), type$1;
				}, exports$1.isBaseType = function(baseName, soft) {
					return _isBaseType(baseName, this.getTypeAnnotation(), soft);
				}, exports$1.isGenericType = function(genericName) {
					const type$1 = this.getTypeAnnotation();
					if ("Array" === genericName && (isTSArrayType(type$1) || isArrayTypeAnnotation(type$1) || isTupleTypeAnnotation(type$1))) return !0;
					return isGenericTypeAnnotation(type$1) && isIdentifier(type$1.id, { name: genericName }) || isTSTypeReference(type$1) && isIdentifier(type$1.typeName, { name: genericName });
				};
				var inferers = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferers.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { anyTypeAnnotation, isAnyTypeAnnotation, isArrayTypeAnnotation, isBooleanTypeAnnotation, isEmptyTypeAnnotation, isFlowBaseAnnotation, isGenericTypeAnnotation, isIdentifier, isMixedTypeAnnotation, isNumberTypeAnnotation, isStringTypeAnnotation, isTSArrayType, isTSTypeAnnotation, isTSTypeReference, isTupleTypeAnnotation, isTypeAnnotation, isUnionTypeAnnotation, isVoidTypeAnnotation, stringTypeAnnotation, voidTypeAnnotation } = _t;
				const typeAnnotationInferringNodes = new WeakSet();
				function _getTypeAnnotation() {
					const node = this.node;
					if (node) {
						if (node.typeAnnotation) return node.typeAnnotation;
						if (!typeAnnotationInferringNodes.has(node)) {
							typeAnnotationInferringNodes.add(node);
							try {
								var _inferer;
								let inferer = inferers[node.type];
								if (inferer) return inferer.call(this, node);
								if (inferer = inferers[this.parentPath.type], null != (_inferer = inferer) && _inferer.validParent) return this.parentPath.getTypeAnnotation();
							} finally {
								typeAnnotationInferringNodes.delete(node);
							}
						}
					} else if ("init" === this.key && this.parentPath.isVariableDeclarator()) {
						const declar = this.parentPath.parentPath, declarParent = declar.parentPath;
						return "left" === declar.key && declarParent.isForInStatement() ? stringTypeAnnotation() : "left" === declar.key && declarParent.isForOfStatement() ? anyTypeAnnotation() : voidTypeAnnotation();
					}
				}
				function _isBaseType(baseName, type$1, soft) {
					if ("string" === baseName) return isStringTypeAnnotation(type$1);
					if ("number" === baseName) return isNumberTypeAnnotation(type$1);
					if ("boolean" === baseName) return isBooleanTypeAnnotation(type$1);
					if ("any" === baseName) return isAnyTypeAnnotation(type$1);
					if ("mixed" === baseName) return isMixedTypeAnnotation(type$1);
					if ("empty" === baseName) return isEmptyTypeAnnotation(type$1);
					if ("void" === baseName) return isVoidTypeAnnotation(type$1);
					if (soft) return !1;
					throw new Error(`Unknown base type ${baseName}`);
				}
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					if (!this.isReferenced()) return;
					const binding = this.scope.getBinding(node.name);
					if (binding) return binding.identifier.typeAnnotation ? binding.identifier.typeAnnotation : function(binding$1, path$9, name) {
						const types$7 = [], functionConstantViolations = [];
						let constantViolations = getConstantViolationsBefore(binding$1, path$9, functionConstantViolations);
						const testType = getConditionalAnnotation(binding$1, path$9, name);
						if (testType) {
							const testConstantViolations = getConstantViolationsBefore(binding$1, testType.ifStatement);
							constantViolations = constantViolations.filter((path$10) => !testConstantViolations.includes(path$10)), types$7.push(testType.typeAnnotation);
						}
						if (constantViolations.length) {
							constantViolations.push(...functionConstantViolations);
							for (const violation of constantViolations) types$7.push(violation.getTypeAnnotation());
						}
						if (!types$7.length) return;
						return (0, _util.createUnionType)(types$7);
					}(binding, this, node.name);
					if ("undefined" === node.name) return voidTypeAnnotation();
					if ("NaN" === node.name || "Infinity" === node.name) return numberTypeAnnotation();
					node.name;
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _util = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js");
				const { BOOLEAN_NUMBER_BINARY_OPERATORS, createTypeAnnotationBasedOnTypeof, numberTypeAnnotation, voidTypeAnnotation } = _t;
				function getConstantViolationsBefore(binding, path$9, functions) {
					const violations = binding.constantViolations.slice();
					return violations.unshift(binding.path), violations.filter((violation) => {
						const status = (violation = violation.resolve())._guessExecutionStatusRelativeTo(path$9);
						return functions && "unknown" === status && functions.push(violation), "before" === status;
					});
				}
				function inferAnnotationFromBinaryExpression(name, path$9) {
					const operator = path$9.node.operator, right = path$9.get("right").resolve(), left = path$9.get("left").resolve();
					let target, typeofPath, typePath;
					if (left.isIdentifier({ name }) ? target = right : right.isIdentifier({ name }) && (target = left), target) return "===" === operator ? target.getTypeAnnotation() : BOOLEAN_NUMBER_BINARY_OPERATORS.includes(operator) ? numberTypeAnnotation() : void 0;
					if ("===" !== operator && "==" !== operator) return;
					if (left.isUnaryExpression({ operator: "typeof" }) ? (typeofPath = left, typePath = right) : right.isUnaryExpression({ operator: "typeof" }) && (typeofPath = right, typePath = left), !typeofPath) return;
					if (!typeofPath.get("argument").isIdentifier({ name })) return;
					if (typePath = typePath.resolve(), !typePath.isLiteral()) return;
					const typeValue = typePath.node.value;
					return "string" == typeof typeValue ? createTypeAnnotationBasedOnTypeof(typeValue) : void 0;
				}
				function getConditionalAnnotation(binding, path$9, name) {
					const ifStatement = function(binding$1, path$10, name$1) {
						let parentPath;
						for (; parentPath = path$10.parentPath;) {
							if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
								if ("test" === path$10.key) return;
								return parentPath;
							}
							if (parentPath.isFunction() && parentPath.parentPath.scope.getBinding(name$1) !== binding$1) return;
							path$10 = parentPath;
						}
					}(binding, path$9, name);
					if (!ifStatement) return;
					const paths = [ifStatement.get("test")], types$7 = [];
					for (let i = 0; i < paths.length; i++) {
						const path$10 = paths[i];
						if (path$10.isLogicalExpression()) "&&" === path$10.node.operator && (paths.push(path$10.get("left")), paths.push(path$10.get("right")));
						else if (path$10.isBinaryExpression()) {
							const type$1 = inferAnnotationFromBinaryExpression(name, path$10);
							type$1 && types$7.push(type$1);
						}
					}
					return types$7.length ? {
						typeAnnotation: (0, _util.createUnionType)(types$7),
						ifStatement
					} : getConditionalAnnotation(binding, ifStatement, name);
				}
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferers.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.ArrayExpression = ArrayExpression, exports$1.AssignmentExpression = function() {
					return this.get("right").getTypeAnnotation();
				}, exports$1.BinaryExpression = function(node) {
					const operator = node.operator;
					if (NUMBER_BINARY_OPERATORS.includes(operator)) return numberTypeAnnotation();
					if (BOOLEAN_BINARY_OPERATORS.includes(operator)) return booleanTypeAnnotation();
					if ("+" === operator) {
						const right = this.get("right"), left = this.get("left");
						return left.isBaseType("number") && right.isBaseType("number") ? numberTypeAnnotation() : left.isBaseType("string") || right.isBaseType("string") ? stringTypeAnnotation() : unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
					}
				}, exports$1.BooleanLiteral = function() {
					return booleanTypeAnnotation();
				}, exports$1.CallExpression = function() {
					const { callee } = this.node;
					if (isObjectKeys(callee)) return arrayTypeAnnotation(stringTypeAnnotation());
					if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, { name: "Array" })) return arrayTypeAnnotation(anyTypeAnnotation());
					if (isObjectEntries(callee)) return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
					return resolveCall(this.get("callee"));
				}, exports$1.ConditionalExpression = function() {
					const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
					return (0, _util.createUnionType)(argumentTypes);
				}, exports$1.ClassDeclaration = exports$1.ClassExpression = exports$1.FunctionDeclaration = exports$1.ArrowFunctionExpression = exports$1.FunctionExpression = function() {
					return genericTypeAnnotation(identifier("Function"));
				}, Object.defineProperty(exports$1, "Identifier", {
					enumerable: !0,
					get: function() {
						return _infererReference.default;
					}
				}), exports$1.LogicalExpression = function() {
					const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
					return (0, _util.createUnionType)(argumentTypes);
				}, exports$1.NewExpression = function(node) {
					if ("Identifier" === node.callee.type) return genericTypeAnnotation(node.callee);
				}, exports$1.NullLiteral = function() {
					return nullLiteralTypeAnnotation();
				}, exports$1.NumericLiteral = function() {
					return numberTypeAnnotation();
				}, exports$1.ObjectExpression = function() {
					return genericTypeAnnotation(identifier("Object"));
				}, exports$1.ParenthesizedExpression = function() {
					return this.get("expression").getTypeAnnotation();
				}, exports$1.RegExpLiteral = function() {
					return genericTypeAnnotation(identifier("RegExp"));
				}, exports$1.RestElement = RestElement, exports$1.SequenceExpression = function() {
					return this.get("expressions").pop().getTypeAnnotation();
				}, exports$1.StringLiteral = function() {
					return stringTypeAnnotation();
				}, exports$1.TSAsExpression = TSAsExpression, exports$1.TSNonNullExpression = function() {
					return this.get("expression").getTypeAnnotation();
				}, exports$1.TaggedTemplateExpression = function() {
					return resolveCall(this.get("tag"));
				}, exports$1.TemplateLiteral = function() {
					return stringTypeAnnotation();
				}, exports$1.TypeCastExpression = TypeCastExpression, exports$1.UnaryExpression = function(node) {
					const operator = node.operator;
					if ("void" === operator) return voidTypeAnnotation();
					if (NUMBER_UNARY_OPERATORS.includes(operator)) return numberTypeAnnotation();
					if (STRING_UNARY_OPERATORS.includes(operator)) return stringTypeAnnotation();
					if (BOOLEAN_UNARY_OPERATORS.includes(operator)) return booleanTypeAnnotation();
				}, exports$1.UpdateExpression = function(node) {
					const operator = node.operator;
					if ("++" === operator || "--" === operator) return numberTypeAnnotation();
				}, exports$1.VariableDeclarator = function() {
					if (!this.get("id").isIdentifier()) return;
					return this.get("init").getTypeAnnotation();
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _infererReference = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"), _util = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js");
				const { BOOLEAN_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS, anyTypeAnnotation, arrayTypeAnnotation, booleanTypeAnnotation, buildMatchMemberExpression, genericTypeAnnotation, identifier, nullLiteralTypeAnnotation, numberTypeAnnotation, stringTypeAnnotation, tupleTypeAnnotation, unionTypeAnnotation, voidTypeAnnotation, isIdentifier } = _t;
				function TypeCastExpression(node) {
					return node.typeAnnotation;
				}
				function TSAsExpression(node) {
					return node.typeAnnotation;
				}
				function ArrayExpression() {
					return genericTypeAnnotation(identifier("Array"));
				}
				function RestElement() {
					return ArrayExpression();
				}
				TypeCastExpression.validParent = !0, TSAsExpression.validParent = !0, RestElement.validParent = !0;
				const isArrayFrom = buildMatchMemberExpression("Array.from"), isObjectKeys = buildMatchMemberExpression("Object.keys"), isObjectValues = buildMatchMemberExpression("Object.values"), isObjectEntries = buildMatchMemberExpression("Object.entries");
				function resolveCall(callee) {
					if ((callee = callee.resolve()).isFunction()) {
						const { node } = callee;
						if (node.async) return node.generator ? genericTypeAnnotation(identifier("AsyncIterator")) : genericTypeAnnotation(identifier("Promise"));
						if (node.generator) return genericTypeAnnotation(identifier("Iterator"));
						if (callee.node.returnType) return callee.node.returnType;
					}
				}
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.createUnionType = function(types$7) {
					if (types$7.every((v$1) => isFlowType(v$1))) return createFlowUnionType ? createFlowUnionType(types$7) : createUnionTypeAnnotation(types$7);
					if (types$7.every((v$1) => isTSType(v$1)) && createTSUnionType) return createTSUnionType(types$7);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { createFlowUnionType, createTSUnionType, createUnionTypeAnnotation, isFlowType, isTSType } = _t;
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/introspection.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1._guessExecutionStatusRelativeTo = function(target) {
					return _guessExecutionStatusRelativeToCached(this, target, new Map());
				}, exports$1._resolve = _resolve, exports$1.canHaveVariableDeclarationOrExpression = function() {
					return ("init" === this.key || "left" === this.key) && this.parentPath.isFor();
				}, exports$1.canSwapBetweenExpressionAndStatement = function(replacement) {
					if ("body" !== this.key || !this.parentPath.isArrowFunctionExpression()) return !1;
					if (this.isExpression()) return isBlockStatement(replacement);
					if (this.isBlockStatement()) return isExpression(replacement);
					return !1;
				}, exports$1.getSource = function() {
					const node = this.node;
					if (node.end) {
						const code = this.hub.getCode();
						if (code) return code.slice(node.start, node.end);
					}
					return "";
				}, exports$1.isCompletionRecord = function(allowInsideFunction) {
					let path$9 = this, first = !0;
					do {
						const { type: type$1, container } = path$9;
						if (!first && (path$9.isFunction() || "StaticBlock" === type$1)) return !!allowInsideFunction;
						if (first = !1, Array.isArray(container) && path$9.key !== container.length - 1) return !1;
					} while ((path$9 = path$9.parentPath) && !path$9.isProgram() && !path$9.isDoExpression());
					return !0;
				}, exports$1.isConstantExpression = function() {
					if (this.isIdentifier()) {
						const binding = this.scope.getBinding(this.node.name);
						return !!binding && binding.constant;
					}
					if (this.isLiteral()) return !this.isRegExpLiteral() && (!this.isTemplateLiteral() || this.get("expressions").every((expression) => expression.isConstantExpression()));
					if (this.isUnaryExpression()) return "void" === this.node.operator && this.get("argument").isConstantExpression();
					if (this.isBinaryExpression()) {
						const { operator } = this.node;
						return "in" !== operator && "instanceof" !== operator && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
					}
					if (this.isMemberExpression()) return !this.node.computed && this.get("object").isIdentifier({ name: "Symbol" }) && !this.scope.hasBinding("Symbol", { noGlobals: !0 });
					if (this.isCallExpression()) return 1 === this.node.arguments.length && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding("Symbol", { noGlobals: !0 }) && this.get("arguments")[0].isStringLiteral();
					return !1;
				}, exports$1.isInStrictMode = function() {
					const start = this.isProgram() ? this : this.parentPath;
					return !!start.find((path$9) => {
						if (path$9.isProgram({ sourceType: "module" })) return !0;
						if (path$9.isClass()) return !0;
						if (path$9.isArrowFunctionExpression() && !path$9.get("body").isBlockStatement()) return !1;
						let body;
						if (path$9.isFunction()) body = path$9.node.body;
						else {
							if (!path$9.isProgram()) return !1;
							body = path$9.node;
						}
						for (const directive of body.directives) if ("use strict" === directive.value.value) return !0;
					});
				}, exports$1.isNodeType = function(type$1) {
					return isType(this.type, type$1);
				}, exports$1.isStatementOrBlock = function() {
					return !this.parentPath.isLabeledStatement() && !isBlockStatement(this.container) && STATEMENT_OR_BLOCK_KEYS.includes(this.key);
				}, exports$1.isStatic = function() {
					return this.scope.isStatic(this.node);
				}, exports$1.matchesPattern = function(pattern, allowPartial) {
					return _matchesPattern(this.node, pattern, allowPartial);
				}, exports$1.referencesImport = function(moduleSource, importName) {
					if (!this.isReferencedIdentifier()) {
						if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, { value: importName }) : this.node.property.name === importName)) {
							const object = this.get("object");
							return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
						}
						return !1;
					}
					const binding = this.scope.getBinding(this.node.name);
					if (!binding || "module" !== binding.kind) return !1;
					const path$9 = binding.path, parent = path$9.parentPath;
					if (!parent.isImportDeclaration()) return !1;
					if (parent.node.source.value !== moduleSource) return !1;
					if (!importName) return !0;
					if (path$9.isImportDefaultSpecifier() && "default" === importName) return !0;
					if (path$9.isImportNamespaceSpecifier() && "*" === importName) return !0;
					if (path$9.isImportSpecifier() && isIdentifier(path$9.node.imported, { name: importName })) return !0;
					return !1;
				}, exports$1.resolve = function(dangerous, resolved) {
					return _resolve.call(this, dangerous, resolved) || this;
				}, exports$1.willIMaybeExecuteBefore = function(target) {
					return "after" !== this._guessExecutionStatusRelativeTo(target);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { STATEMENT_OR_BLOCK_KEYS, VISITOR_KEYS, isBlockStatement, isExpression, isIdentifier, isLiteral, isStringLiteral, isType, matchesPattern: _matchesPattern } = _t;
				function getOuterFunction(path$9) {
					return path$9.isProgram() ? path$9 : (path$9.parentPath.scope.getFunctionParent() || path$9.parentPath.scope.getProgramParent()).path;
				}
				function isExecutionUncertain(type$1, key) {
					switch (type$1) {
						case "LogicalExpression":
						case "AssignmentPattern": return "right" === key;
						case "ConditionalExpression":
						case "IfStatement": return "consequent" === key || "alternate" === key;
						case "WhileStatement":
						case "DoWhileStatement":
						case "ForInStatement":
						case "ForOfStatement": return "body" === key;
						case "ForStatement": return "body" === key || "update" === key;
						case "SwitchStatement": return "cases" === key;
						case "TryStatement": return "handler" === key;
						case "OptionalMemberExpression": return "property" === key;
						case "OptionalCallExpression": return "arguments" === key;
						default: return !1;
					}
				}
				function isExecutionUncertainInList(paths, maxIndex) {
					for (let i = 0; i < maxIndex; i++) {
						const path$9 = paths[i];
						if (isExecutionUncertain(path$9.parent.type, path$9.parentKey)) return !0;
					}
					return !1;
				}
				exports$1.has = function(key) {
					var _this$node;
					const val = null == (_this$node = this.node) ? void 0 : _this$node[key];
					return val && Array.isArray(val) ? !!val.length : !!val;
				}, exports$1.is = exports$1.has, exports$1.isnt = function(key) {
					return !this.has(key);
				}, exports$1.equals = function(key, value$1) {
					return this.node[key] === value$1;
				};
				const SYMBOL_CHECKING = Symbol();
				function _guessExecutionStatusRelativeToCached(base, target, cache) {
					const funcParent = {
						this: getOuterFunction(base),
						target: getOuterFunction(target)
					};
					if (funcParent.target.node !== funcParent.this.node) return function(base$1, target$1, cache$1) {
						let cached, nodeMap = cache$1.get(base$1.node);
						if (nodeMap) {
							if (cached = nodeMap.get(target$1.node)) return cached === SYMBOL_CHECKING ? "unknown" : cached;
						} else cache$1.set(base$1.node, nodeMap = new Map());
						nodeMap.set(target$1.node, SYMBOL_CHECKING);
						const result = function(base$2, target$2, cache$2) {
							if (!target$2.isFunctionDeclaration()) return "before" === _guessExecutionStatusRelativeToCached(base$2, target$2, cache$2) ? "before" : "unknown";
							if (target$2.parentPath.isExportDeclaration()) return "unknown";
							const binding = target$2.scope.getBinding(target$2.node.id.name);
							if (!binding.references) return "before";
							const referencePaths = binding.referencePaths;
							let allStatus;
							for (const path$9 of referencePaths) {
								if (!!path$9.find((path$10) => path$10.node === target$2.node)) continue;
								if ("callee" !== path$9.key || !path$9.parentPath.isCallExpression()) return "unknown";
								const status = _guessExecutionStatusRelativeToCached(base$2, path$9, cache$2);
								if (allStatus && allStatus !== status) return "unknown";
								allStatus = status;
							}
							return allStatus;
						}(base$1, target$1, cache$1);
						return nodeMap.set(target$1.node, result), result;
					}(base, funcParent.target, cache);
					const paths = {
						target: target.getAncestry(),
						this: base.getAncestry()
					};
					if (paths.target.includes(base)) return "after";
					if (paths.this.includes(target)) return "before";
					let commonPath;
					const commonIndex = {
						target: 0,
						this: 0
					};
					for (; !commonPath && commonIndex.this < paths.this.length;) {
						const path$9 = paths.this[commonIndex.this];
						commonIndex.target = paths.target.indexOf(path$9), commonIndex.target >= 0 ? commonPath = path$9 : commonIndex.this++;
					}
					if (!commonPath) throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
					if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) return "unknown";
					const divergence = {
						this: paths.this[commonIndex.this - 1],
						target: paths.target[commonIndex.target - 1]
					};
					if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) return divergence.target.key > divergence.this.key ? "before" : "after";
					const keys = VISITOR_KEYS[commonPath.type], keyPosition_this = keys.indexOf(divergence.this.parentKey);
					return keys.indexOf(divergence.target.parentKey) > keyPosition_this ? "before" : "after";
				}
				function _resolve(dangerous, resolved) {
					var _resolved;
					if (null == (_resolved = resolved) || !_resolved.includes(this)) if ((resolved = resolved || []).push(this), this.isVariableDeclarator()) {
						if (this.get("id").isIdentifier()) return this.get("init").resolve(dangerous, resolved);
					} else if (this.isReferencedIdentifier()) {
						const binding = this.scope.getBinding(this.node.name);
						if (!binding) return;
						if (!binding.constant) return;
						if ("module" === binding.kind) return;
						if (binding.path !== this) {
							const ret = binding.path.resolve(dangerous, resolved);
							if (this.find((parent) => parent.node === ret.node)) return;
							return ret;
						}
					} else {
						if (this.isTypeCastExpression()) return this.get("expression").resolve(dangerous, resolved);
						if (dangerous && this.isMemberExpression()) {
							const targetKey = this.toComputedKey();
							if (!isLiteral(targetKey)) return;
							const targetName = targetKey.value, target = this.get("object").resolve(dangerous, resolved);
							if (target.isObjectExpression()) {
								const props = target.get("properties");
								for (const prop of props) {
									if (!prop.isProperty()) continue;
									const key = prop.get("key");
									let match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
									if (match = match || key.isLiteral({ value: targetName }), match) return prop.get("value").resolve(dangerous, resolved);
								}
							} else if (target.isArrayExpression() && !isNaN(+targetName)) {
								const elem = target.get("elements")[targetName];
								if (elem) return elem.resolve(dangerous, resolved);
							}
						}
					}
				}
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/hoister.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _t2 = _t;
				const { react } = _t, { cloneNode, jsxExpressionContainer, variableDeclaration, variableDeclarator } = _t2, referenceVisitor = { ReferencedIdentifier(path$9, state) {
					if (path$9.isJSXIdentifier() && react.isCompatTag(path$9.node.name) && !path$9.parentPath.isJSXMemberExpression()) return;
					if ("this" === path$9.node.name) {
						let scope = path$9.scope;
						do
							if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) break;
						while (scope = scope.parent);
						scope && state.breakOnScopePaths.push(scope.path);
					}
					const binding = path$9.scope.getBinding(path$9.node.name);
					if (binding) {
						for (const violation of binding.constantViolations) if (violation.scope !== binding.path.scope) return state.mutableBinding = !0, void path$9.stop();
						binding === state.scope.getBinding(path$9.node.name) && (state.bindings[path$9.node.name] = binding);
					}
				} };
				exports$1.default = class {
					constructor(path$9, scope) {
						this.breakOnScopePaths = void 0, this.bindings = void 0, this.mutableBinding = void 0, this.scopes = void 0, this.scope = void 0, this.path = void 0, this.attachAfter = void 0, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = !1, this.scopes = [], this.scope = scope, this.path = path$9, this.attachAfter = !1;
					}
					isCompatibleScope(scope) {
						for (const key of Object.keys(this.bindings)) {
							const binding = this.bindings[key];
							if (!scope.bindingIdentifierEquals(key, binding.identifier)) return !1;
						}
						return !0;
					}
					getCompatibleScopes() {
						let scope = this.path.scope;
						do {
							if (!this.isCompatibleScope(scope)) break;
							if (this.scopes.push(scope), this.breakOnScopePaths.includes(scope.path)) break;
						} while (scope = scope.parent);
					}
					getAttachmentPath() {
						let path$9 = this._getAttachmentPath();
						if (!path$9) return;
						let targetScope = path$9.scope;
						if (targetScope.path === path$9 && (targetScope = path$9.scope.parent), targetScope.path.isProgram() || targetScope.path.isFunction()) for (const name of Object.keys(this.bindings)) {
							if (!targetScope.hasOwnBinding(name)) continue;
							const binding = this.bindings[name];
							if ("param" === binding.kind || "params" === binding.path.parentKey) continue;
							if (this.getAttachmentParentForPath(binding.path).key >= path$9.key) {
								this.attachAfter = !0, path$9 = binding.path;
								for (const violationPath of binding.constantViolations) this.getAttachmentParentForPath(violationPath).key > path$9.key && (path$9 = violationPath);
							}
						}
						return path$9;
					}
					_getAttachmentPath() {
						const scope = this.scopes.pop();
						if (scope) {
							if (scope.path.isFunction()) {
								if (!this.hasOwnParamBindings(scope)) return this.getNextScopeAttachmentParent();
								{
									if (this.scope === scope) return;
									const bodies = scope.path.get("body").get("body");
									for (let i = 0; i < bodies.length; i++) if (!bodies[i].node._blockHoist) return bodies[i];
								}
							} else if (scope.path.isProgram()) return this.getNextScopeAttachmentParent();
						}
					}
					getNextScopeAttachmentParent() {
						const scope = this.scopes.pop();
						if (scope) return this.getAttachmentParentForPath(scope.path);
					}
					getAttachmentParentForPath(path$9) {
						do
							if (!path$9.parentPath || Array.isArray(path$9.container) && path$9.isStatement()) return path$9;
						while (path$9 = path$9.parentPath);
					}
					hasOwnParamBindings(scope) {
						for (const name of Object.keys(this.bindings)) {
							if (!scope.hasOwnBinding(name)) continue;
							const binding = this.bindings[name];
							if ("param" === binding.kind && binding.constant) return !0;
						}
						return !1;
					}
					run() {
						if (this.path.traverse(referenceVisitor, this), this.mutableBinding) return;
						this.getCompatibleScopes();
						const attachTo = this.getAttachmentPath();
						if (!attachTo) return;
						if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
						let uid$2 = attachTo.scope.generateUidIdentifier("ref");
						const declarator = variableDeclarator(uid$2, this.path.node), insertFn = this.attachAfter ? "insertAfter" : "insertBefore", [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]), parent = this.path.parentPath;
						return parent.isJSXElement() && this.path.container === parent.node.children && (uid$2 = jsxExpressionContainer(uid$2)), this.path.replaceWith(cloneNode(uid$2)), attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
					}
				};
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.hooks = void 0;
				exports$1.hooks = [
					function(self$1, parent) {
						if ("test" === self$1.key && (parent.isWhile() || parent.isSwitchCase()) || "declaration" === self$1.key && parent.isExportDeclaration() || "body" === self$1.key && parent.isLabeledStatement() || "declarations" === self$1.listKey && parent.isVariableDeclaration() && 1 === parent.node.declarations.length || "expression" === self$1.key && parent.isExpressionStatement()) return parent.remove(), !0;
					},
					function(self$1, parent) {
						if (parent.isSequenceExpression() && 1 === parent.node.expressions.length) return parent.replaceWith(parent.node.expressions[0]), !0;
					},
					function(self$1, parent) {
						if (parent.isBinary()) return "left" === self$1.key ? parent.replaceWith(parent.node.right) : parent.replaceWith(parent.node.left), !0;
					},
					function(self$1, parent) {
						if (parent.isIfStatement() && "consequent" === self$1.key || "body" === self$1.key && (parent.isLoop() || parent.isArrowFunctionExpression())) return self$1.replaceWith({
							type: "BlockStatement",
							body: []
						}), !0;
					}
				];
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.isBindingIdentifier = function() {
					const { node, parent } = this, grandparent = this.parentPath.parent;
					return isIdentifier(node) && isBinding(node, parent, grandparent);
				}, exports$1.isBlockScoped = function() {
					return nodeIsBlockScoped(this.node);
				}, exports$1.isExpression = function() {
					return this.isIdentifier() ? this.isReferencedIdentifier() : nodeIsExpression(this.node);
				}, exports$1.isFlow = function() {
					const { node } = this;
					return !!nodeIsFlow(node) || (isImportDeclaration(node) ? "type" === node.importKind || "typeof" === node.importKind : isExportDeclaration(node) ? "type" === node.exportKind : !!isImportSpecifier(node) && ("type" === node.importKind || "typeof" === node.importKind));
				}, exports$1.isForAwaitStatement = function() {
					return isForOfStatement(this.node, { await: !0 });
				}, exports$1.isGenerated = function() {
					return !this.isUser();
				}, exports$1.isPure = function(constantsOnly) {
					return this.scope.isPure(this.node, constantsOnly);
				}, exports$1.isReferenced = function() {
					return nodeIsReferenced(this.node, this.parent);
				}, exports$1.isReferencedIdentifier = function(opts) {
					const { node, parent } = this;
					if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
						if (!isJSXIdentifier(node, opts)) return !1;
						if (isCompatTag(node.name)) return !1;
					}
					return nodeIsReferenced(node, parent, this.parentPath.parent);
				}, exports$1.isReferencedMemberExpression = function() {
					const { node, parent } = this;
					return isMemberExpression(node) && nodeIsReferenced(node, parent);
				}, exports$1.isRestProperty = function() {
					var _this$parentPath;
					return nodeIsRestElement(this.node) && (null == (_this$parentPath = this.parentPath) ? void 0 : _this$parentPath.isObjectPattern());
				}, exports$1.isScope = function() {
					return nodeIsScope(this.node, this.parent);
				}, exports$1.isSpreadProperty = function() {
					var _this$parentPath2;
					return nodeIsRestElement(this.node) && (null == (_this$parentPath2 = this.parentPath) ? void 0 : _this$parentPath2.isObjectExpression());
				}, exports$1.isStatement = function() {
					const { node, parent } = this;
					if (nodeIsStatement(node)) {
						if (isVariableDeclaration(node)) {
							if (isForXStatement(parent, { left: node })) return !1;
							if (isForStatement(parent, { init: node })) return !1;
						}
						return !0;
					}
					return !1;
				}, exports$1.isUser = function() {
					return this.node && !!this.node.loc;
				}, exports$1.isVar = function() {
					return nodeIsVar(this.node);
				};
				var _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { isBinding, isBlockScoped: nodeIsBlockScoped, isExportDeclaration, isExpression: nodeIsExpression, isFlow: nodeIsFlow, isForStatement, isForXStatement, isIdentifier, isImportDeclaration, isImportSpecifier, isJSXIdentifier, isJSXMemberExpression, isMemberExpression, isRestElement: nodeIsRestElement, isReferenced: nodeIsReferenced, isScope: nodeIsScope, isStatement: nodeIsStatement, isVar: nodeIsVar, isVariableDeclaration, react, isForOfStatement } = _t, { isCompatTag } = react;
				exports$1.isExistentialTypeParam = function() {
					throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
				}, exports$1.isNumericLiteralTypeAnnotation = function() {
					throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
				};
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.Var = exports$1.User = exports$1.Statement = exports$1.SpreadProperty = exports$1.Scope = exports$1.RestProperty = exports$1.ReferencedMemberExpression = exports$1.ReferencedIdentifier = exports$1.Referenced = exports$1.Pure = exports$1.NumericLiteralTypeAnnotation = exports$1.Generated = exports$1.ForAwaitStatement = exports$1.Flow = exports$1.Expression = exports$1.ExistentialTypeParam = exports$1.BlockScoped = exports$1.BindingIdentifier = void 0;
				exports$1.ReferencedIdentifier = ["Identifier", "JSXIdentifier"], exports$1.ReferencedMemberExpression = ["MemberExpression"], exports$1.BindingIdentifier = ["Identifier"], exports$1.Statement = ["Statement"], exports$1.Expression = ["Expression"], exports$1.Scope = ["Scopable", "Pattern"], exports$1.Referenced = null, exports$1.BlockScoped = null, exports$1.Var = ["VariableDeclaration"], exports$1.User = null, exports$1.Generated = null, exports$1.Pure = null, exports$1.Flow = [
					"Flow",
					"ImportDeclaration",
					"ExportDeclaration",
					"ImportSpecifier"
				], exports$1.RestProperty = ["RestElement"], exports$1.SpreadProperty = ["RestElement"], exports$1.ExistentialTypeParam = ["ExistsTypeAnnotation"], exports$1.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"], exports$1.ForAwaitStatement = ["ForOfStatement"];
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1._containerInsert = _containerInsert, exports$1._containerInsertAfter = _containerInsertAfter, exports$1._containerInsertBefore = _containerInsertBefore, exports$1._verifyNodeList = _verifyNodeList, exports$1.insertAfter = function(nodes_) {
					if (_removal._assertUnremoved.call(this), this.isSequenceExpression()) return last(this.get("expressions")).insertAfter(nodes_);
					const nodes = _verifyNodeList.call(this, nodes_), { parentPath, parent } = this;
					if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertAfter(nodes.map((node) => isExpression(node) ? expressionStatement(node) : node));
					if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && "init" === this.key) {
						const self$1 = this;
						if (self$1.node) {
							const node = self$1.node;
							let { scope } = this;
							if (scope.path.isPattern()) return assertExpression(node), self$1.replaceWith(callExpression(arrowFunctionExpression([], node), [])), self$1.get("callee.body").insertAfter(nodes), [self$1];
							if (isHiddenInSequenceExpression(self$1)) nodes.unshift(node);
							else if (isCallExpression(node) && isSuper(node.callee)) nodes.unshift(node), nodes.push(thisExpression());
							else if (function(node$1, scope$1) {
								if (!isAssignmentExpression(node$1) || !isIdentifier(node$1.left)) return !1;
								const blockScope = scope$1.getBlockParent();
								return blockScope.hasOwnBinding(node$1.left.name) && blockScope.getOwnBinding(node$1.left.name).constantViolations.length <= 1;
							}(node, scope)) nodes.unshift(node), nodes.push(cloneNode(node.left));
							else if (scope.isPure(node, !0)) nodes.push(node);
							else {
								parentPath.isMethod({
									computed: !0,
									key: node
								}) && (scope = scope.parent);
								const temp = scope.generateDeclaredUidIdentifier();
								nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node))), nodes.push(expressionStatement(cloneNode(temp)));
							}
						}
						return this.replaceExpressionWithStatements(nodes);
					}
					if (Array.isArray(this.container)) return _containerInsertAfter.call(this, nodes);
					if (this.isStatementOrBlock()) {
						const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
						return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.pushContainer("body", nodes);
					}
					throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
				}, exports$1.insertBefore = function(nodes_) {
					_removal._assertUnremoved.call(this);
					const nodes = _verifyNodeList.call(this, nodes_), { parentPath, parent } = this;
					if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) return parentPath.insertBefore(nodes);
					if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && "init" === this.key) return this.node && nodes.push(this.node), this.replaceExpressionWithStatements(nodes);
					if (Array.isArray(this.container)) return _containerInsertBefore.call(this, nodes);
					if (this.isStatementOrBlock()) {
						const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
						return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.unshiftContainer("body", nodes);
					}
					throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
				}, exports$1.pushContainer = function(listKey, nodes) {
					_removal._assertUnremoved.call(this);
					const verifiedNodes = _verifyNodeList.call(this, nodes), container = this.node[listKey];
					return _index.default.get({
						parentPath: this,
						parent: this.node,
						container,
						listKey,
						key: container.length
					}).setContext(this.context).replaceWithMultiple(verifiedNodes);
				}, exports$1.unshiftContainer = function(listKey, nodes) {
					_removal._assertUnremoved.call(this), nodes = _verifyNodeList.call(this, nodes);
					const path$9 = _index.default.get({
						parentPath: this,
						parent: this.node,
						container: this.node[listKey],
						listKey,
						key: 0
					}).setContext(this.context);
					return _containerInsertBefore.call(path$9, nodes);
				}, exports$1.updateSiblingKeys = updateSiblingKeys;
				var _cache = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _hoister = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/hoister.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _context = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js"), _removal = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { arrowFunctionExpression, assertExpression, assignmentExpression, blockStatement, callExpression, cloneNode, expressionStatement, isAssignmentExpression, isCallExpression, isExportNamedDeclaration, isExpression, isIdentifier, isSequenceExpression, isSuper, thisExpression } = _t;
				function _containerInsert(from, nodes) {
					updateSiblingKeys.call(this, from, nodes.length);
					const paths = [];
					this.container.splice(from, 0, ...nodes);
					for (let i = 0; i < nodes.length; i++) {
						var _this$context;
						const to = from + i, path$9 = this.getSibling(to);
						paths.push(path$9), null != (_this$context = this.context) && _this$context.queue && _context.pushContext.call(path$9, this.context);
					}
					const contexts = _context._getQueueContexts.call(this);
					for (const path$9 of paths) {
						_context.setScope.call(path$9), path$9.debug("Inserted.");
						for (const context of contexts) context.maybeQueue(path$9, !0);
					}
					return paths;
				}
				function _containerInsertBefore(nodes) {
					return _containerInsert.call(this, this.key, nodes);
				}
				function _containerInsertAfter(nodes) {
					return _containerInsert.call(this, this.key + 1, nodes);
				}
				const last = (arr) => arr[arr.length - 1];
				function isHiddenInSequenceExpression(path$9) {
					return isSequenceExpression(path$9.parent) && (last(path$9.parent.expressions) !== path$9.node || isHiddenInSequenceExpression(path$9.parentPath));
				}
				function updateSiblingKeys(fromIndex, incrementBy) {
					if (!this.parent) return;
					const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];
					for (const [, path$9] of paths) "number" == typeof path$9.key && path$9.container === this.container && path$9.key >= fromIndex && (path$9.key += incrementBy);
				}
				function _verifyNodeList(nodes) {
					if (!nodes) return [];
					Array.isArray(nodes) || (nodes = [nodes]);
					for (let i = 0; i < nodes.length; i++) {
						const node = nodes[i];
						let msg;
						if (node ? "object" != typeof node ? msg = "contains a non-object node" : node.type ? node instanceof _index.default && (msg = "has a NodePath when it expected a raw object") : msg = "without a type" : msg = "has falsy node", msg) {
							const type$1 = Array.isArray(node) ? "array" : typeof node;
							throw new Error(`Node list ${msg} with the index of ${i} and type of ${type$1}`);
						}
					}
					return nodes;
				}
				exports$1.hoist = function(scope = this.scope) {
					return new _hoister.default(this, scope).run();
				};
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1._assertUnremoved = _assertUnremoved, exports$1._callRemovalHooks = _callRemovalHooks, exports$1._markRemoved = _markRemoved, exports$1._remove = _remove, exports$1._removeFromScope = _removeFromScope, exports$1.remove = function() {
					var _this$opts;
					if (_assertUnremoved.call(this), _context.resync.call(this), _callRemovalHooks.call(this)) return void _markRemoved.call(this);
					null != (_this$opts = this.opts) && _this$opts.noScope || _removeFromScope.call(this);
					this.shareCommentsWithSiblings(), _remove.call(this), _markRemoved.call(this);
				};
				var _removalHooks = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"), _cache = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _replacement = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _modification = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), _context = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
				const { getBindingIdentifiers } = _t;
				function _removeFromScope() {
					const bindings = getBindingIdentifiers(this.node, !1, !1, !0);
					Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
				}
				function _callRemovalHooks() {
					if (this.parentPath) {
						for (const fn of _removalHooks.hooks) if (fn(this, this.parentPath)) return !0;
					}
				}
				function _remove() {
					Array.isArray(this.container) ? (this.container.splice(this.key, 1), _modification.updateSiblingKeys.call(this, this.key, -1)) : _replacement._replaceWith.call(this, null);
				}
				function _markRemoved() {
					this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED, this.parent && (0, _cache.getCachedPaths)(this.hub, this.parent).delete(this.node), this.node = null;
				}
				function _assertUnremoved() {
					if (this.removed) throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
				}
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1._replaceWith = _replaceWith, exports$1.replaceExpressionWithStatements = function(nodes) {
					_context.resync.call(this);
					const declars = [], nodesAsSingleExpression = gatherSequenceExpressions(nodes, declars);
					if (nodesAsSingleExpression) {
						for (const id of declars) this.scope.push({ id });
						return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");
					}
					const functionParent = this.getFunctionParent(), isParentAsync = null == functionParent ? void 0 : functionParent.node.async, isParentGenerator = null == functionParent ? void 0 : functionParent.node.generator, container = arrowFunctionExpression([], blockStatement(nodes));
					this.replaceWith(callExpression(container, []));
					const callee = this.get("callee");
					callee.get("body").scope.hoistVariables((id) => this.scope.push({ id }));
					const completionRecords = callee.getCompletionRecords();
					for (const path$9 of completionRecords) {
						if (!path$9.isExpressionStatement()) continue;
						const loop = path$9.findParent((path$10) => path$10.isLoop());
						if (loop) {
							let uid$2 = loop.getData("expressionReplacementReturnUid");
							uid$2 ? uid$2 = identifier(uid$2.name) : (uid$2 = callee.scope.generateDeclaredUidIdentifier("ret"), callee.get("body").pushContainer("body", returnStatement(cloneNode(uid$2))), loop.setData("expressionReplacementReturnUid", uid$2)), path$9.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid$2), path$9.node.expression));
						} else path$9.replaceWith(returnStatement(path$9.node.expression));
					}
					callee.arrowFunctionToExpression();
					const newCallee = callee, needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES), needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
					needToAwaitFunction && (newCallee.set("async", !0), needToYieldFunction || this.replaceWith(awaitExpression(this.node)));
					needToYieldFunction && (newCallee.set("generator", !0), this.replaceWith(yieldExpression(this.node, !0)));
					return newCallee.get("body.body");
				}, exports$1.replaceInline = function(nodes) {
					if (_context.resync.call(this), Array.isArray(nodes)) {
						if (Array.isArray(this.container)) {
							nodes = _modification._verifyNodeList.call(this, nodes);
							const paths = _modification._containerInsertAfter.call(this, nodes);
							return this.remove(), paths;
						}
						return this.replaceWithMultiple(nodes);
					}
					return this.replaceWith(nodes);
				}, exports$1.replaceWith = function(replacementPath) {
					if (_context.resync.call(this), this.removed) throw new Error("You can't replace this node, we've already removed it");
					let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
					if (!replacement) throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
					if (this.node === replacement) return [this];
					if (this.isProgram() && !isProgram(replacement)) throw new Error("You can only replace a Program root node with another Program node");
					if (Array.isArray(replacement)) throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
					if ("string" == typeof replacement) throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
					let nodePath = "";
					this.isNodeType("Statement") && isExpression(replacement) && (this.canHaveVariableDeclarationOrExpression() || this.canSwapBetweenExpressionAndStatement(replacement) || this.parentPath.isExportDefaultDeclaration() || (replacement = expressionStatement(replacement), nodePath = "expression"));
					if (this.isNodeType("Expression") && isStatement(replacement) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) return this.replaceExpressionWithStatements([replacement]);
					const oldNode = this.node;
					oldNode && (inheritsComments(replacement, oldNode), removeComments(oldNode));
					return _replaceWith.call(this, replacement), this.type = replacement.type, _context.setScope.call(this), this.requeue(), [nodePath ? this.get(nodePath) : this];
				}, exports$1.replaceWithMultiple = function(nodes) {
					var _getCachedPaths;
					_context.resync.call(this), nodes = _modification._verifyNodeList.call(this, nodes), inheritLeadingComments(nodes[0], this.node), inheritTrailingComments(nodes[nodes.length - 1], this.node), null == (_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) || _getCachedPaths.delete(this.node), this.node = this.container[this.key] = null;
					const paths = this.insertAfter(nodes);
					this.node ? this.requeue() : this.remove();
					return paths;
				}, exports$1.replaceWithSourceString = function(replacement) {
					let ast;
					_context.resync.call(this);
					try {
						replacement = `(${replacement})`, ast = (0, _parser.parse)(replacement);
					} catch (err) {
						const loc = err.loc;
						throw loc && (err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement, { start: {
							line: loc.line,
							column: loc.column + 1
						} }), err.code = "BABEL_REPLACE_SOURCE_ERROR"), err;
					}
					const expressionAST = ast.program.body[0].expression;
					return _index.default.removeProperties(expressionAST), this.replaceWith(expressionAST);
				};
				var _codeFrame = __webpack_require__$1("./stubs/babel-codeframe.mjs"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _cache = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _modification = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), _parser = __webpack_require__$1("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
				const { FUNCTION_TYPES, arrowFunctionExpression, assignmentExpression, awaitExpression, blockStatement, buildUndefinedNode, callExpression, cloneNode, conditionalExpression, expressionStatement, getBindingIdentifiers, identifier, inheritLeadingComments, inheritTrailingComments, inheritsComments, isBlockStatement, isEmptyStatement, isExpression, isExpressionStatement, isIfStatement, isProgram, isStatement, isVariableDeclaration, removeComments, returnStatement, sequenceExpression, validate, yieldExpression } = _t;
				function _replaceWith(node) {
					var _getCachedPaths2;
					if (!this.container) throw new ReferenceError("Container is falsy");
					this.inList ? validate(this.parent, this.key, [node]) : validate(this.parent, this.key, node), this.debug(`Replace with ${null == node ? void 0 : node.type}`), null == (_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) || _getCachedPaths2.set(node, this).delete(this.node), this.node = this.container[this.key] = node;
				}
				function gatherSequenceExpressions(nodes, declars) {
					const exprs = [];
					let ensureLastUndefined = !0;
					for (const node of nodes) if (isEmptyStatement(node) || (ensureLastUndefined = !1), isExpression(node)) exprs.push(node);
					else if (isExpressionStatement(node)) exprs.push(node.expression);
					else if (isVariableDeclaration(node)) {
						if ("var" !== node.kind) return;
						for (const declar of node.declarations) {
							const bindings = getBindingIdentifiers(declar);
							for (const key of Object.keys(bindings)) declars.push(cloneNode(bindings[key]));
							declar.init && exprs.push(assignmentExpression("=", declar.id, declar.init));
						}
						ensureLastUndefined = !0;
					} else if (isIfStatement(node)) {
						const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : buildUndefinedNode(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : buildUndefinedNode();
						if (!consequent || !alternate) return;
						exprs.push(conditionalExpression(node.test, consequent, alternate));
					} else if (isBlockStatement(node)) {
						const body = gatherSequenceExpressions(node.body, declars);
						if (!body) return;
						exprs.push(body);
					} else {
						if (!isEmptyStatement(node)) return;
						0 === nodes.indexOf(node) && (ensureLastUndefined = !0);
					}
					return ensureLastUndefined && exprs.push(buildUndefinedNode()), 1 === exprs.length ? exprs[0] : sequenceExpression(exprs);
				}
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/binding.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				exports$1.default = class {
					constructor({ identifier, scope, path: path$9, kind }) {
						this.identifier = void 0, this.scope = void 0, this.path = void 0, this.kind = void 0, this.constantViolations = [], this.constant = !0, this.referencePaths = [], this.referenced = !1, this.references = 0, this.identifier = identifier, this.scope = scope, this.path = path$9, this.kind = kind, "var" !== kind && "hoisted" !== kind || !function(path$10) {
							for (let { parentPath, key } = path$10; parentPath; {parentPath, key} = parentPath) {
								if (parentPath.isFunctionParent()) return !1;
								if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && "body" === key) return !0;
							}
							return !1;
						}(path$9) || this.reassign(path$9), this.clearValue();
					}
					deoptValue() {
						this.clearValue(), this.hasDeoptedValue = !0;
					}
					setValue(value$1) {
						this.hasDeoptedValue || (this.hasValue = !0, this.value = value$1);
					}
					clearValue() {
						this.hasDeoptedValue = !1, this.hasValue = !1, this.value = null;
					}
					reassign(path$9) {
						this.constant = !1, this.constantViolations.includes(path$9) || this.constantViolations.push(path$9);
					}
					reference(path$9) {
						this.referencePaths.includes(path$9) || (this.referenced = !0, this.references++, this.referencePaths.push(path$9));
					}
					dereference() {
						this.references--, this.referenced = !!this.references;
					}
				};
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _renamer = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/lib/renamer.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _binding = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/binding.js"), _globals = __webpack_require__$1("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), t = _t, _cache = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _visitors = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js");
				const { NOT_LOCAL_BINDING, assignmentExpression, callExpression, cloneNode, getBindingIdentifiers, identifier, isArrayExpression, isBinary, isCallExpression, isClass, isClassBody, isClassDeclaration, isExportAllDeclaration, isExportDefaultDeclaration, isExportNamedDeclaration, isFunctionDeclaration, isIdentifier, isImportDeclaration, isLiteral, isMemberExpression, isMethod, isModuleSpecifier, isNullLiteral, isObjectExpression, isProperty, isPureish, isRegExpLiteral, isSuper, isTaggedTemplateExpression, isTemplateLiteral, isThisExpression, isUnaryExpression, isVariableDeclaration, expressionStatement, matchesPattern, memberExpression, numericLiteral, toIdentifier, variableDeclaration, variableDeclarator, isRecordExpression, isTupleExpression, isObjectProperty, isTopicReference, isMetaProperty, isPrivateName, isExportDeclaration, buildUndefinedNode, sequenceExpression } = _t;
				function gatherNodeParts(node, parts) {
					switch (null == node ? void 0 : node.type) {
						default:
							var _node$specifiers;
							if (isImportDeclaration(node) || isExportDeclaration(node)) if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source) gatherNodeParts(node.source, parts);
							else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && null != (_node$specifiers = node.specifiers) && _node$specifiers.length) for (const e$1 of node.specifiers) gatherNodeParts(e$1, parts);
							else (isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration && gatherNodeParts(node.declaration, parts);
							else isModuleSpecifier(node) ? gatherNodeParts(node.local, parts) : !isLiteral(node) || isNullLiteral(node) || isRegExpLiteral(node) || isTemplateLiteral(node) || parts.push(node.value);
							break;
						case "MemberExpression":
						case "OptionalMemberExpression":
						case "JSXMemberExpression":
							gatherNodeParts(node.object, parts), gatherNodeParts(node.property, parts);
							break;
						case "Identifier":
						case "JSXIdentifier":
							parts.push(node.name);
							break;
						case "CallExpression":
						case "OptionalCallExpression":
						case "NewExpression":
							gatherNodeParts(node.callee, parts);
							break;
						case "ObjectExpression":
						case "ObjectPattern":
							for (const e$1 of node.properties) gatherNodeParts(e$1, parts);
							break;
						case "SpreadElement":
						case "RestElement":
						case "UnaryExpression":
						case "UpdateExpression":
							gatherNodeParts(node.argument, parts);
							break;
						case "ObjectProperty":
						case "ObjectMethod":
						case "ClassProperty":
						case "ClassMethod":
						case "ClassPrivateProperty":
						case "ClassPrivateMethod":
							gatherNodeParts(node.key, parts);
							break;
						case "ThisExpression":
							parts.push("this");
							break;
						case "Super":
							parts.push("super");
							break;
						case "Import":
							parts.push("import");
							break;
						case "DoExpression":
							parts.push("do");
							break;
						case "YieldExpression":
							parts.push("yield"), gatherNodeParts(node.argument, parts);
							break;
						case "AwaitExpression":
							parts.push("await"), gatherNodeParts(node.argument, parts);
							break;
						case "AssignmentExpression":
							gatherNodeParts(node.left, parts);
							break;
						case "VariableDeclarator":
						case "FunctionExpression":
						case "FunctionDeclaration":
						case "ClassExpression":
						case "ClassDeclaration":
						case "PrivateName":
							gatherNodeParts(node.id, parts);
							break;
						case "ParenthesizedExpression":
							gatherNodeParts(node.expression, parts);
							break;
						case "MetaProperty":
							gatherNodeParts(node.meta, parts), gatherNodeParts(node.property, parts);
							break;
						case "JSXElement":
							gatherNodeParts(node.openingElement, parts);
							break;
						case "JSXOpeningElement":
							gatherNodeParts(node.name, parts);
							break;
						case "JSXFragment":
							gatherNodeParts(node.openingFragment, parts);
							break;
						case "JSXOpeningFragment":
							parts.push("Fragment");
							break;
						case "JSXNamespacedName": gatherNodeParts(node.namespace, parts), gatherNodeParts(node.name, parts);
					}
				}
				const collectorVisitor = {
					ForStatement(path$9) {
						const declar = path$9.get("init");
						if (declar.isVar()) {
							const { scope } = path$9;
							(scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", declar);
						}
					},
					Declaration(path$9) {
						if (path$9.isBlockScoped()) return;
						if (path$9.isImportDeclaration()) return;
						if (path$9.isExportDeclaration()) return;
						(path$9.scope.getFunctionParent() || path$9.scope.getProgramParent()).registerDeclaration(path$9);
					},
					ImportDeclaration(path$9) {
						path$9.scope.getBlockParent().registerDeclaration(path$9);
					},
					ReferencedIdentifier(path$9, state) {
						state.references.push(path$9);
					},
					ForXStatement(path$9, state) {
						const left = path$9.get("left");
						if (left.isPattern() || left.isIdentifier()) state.constantViolations.push(path$9);
						else if (left.isVar()) {
							const { scope } = path$9;
							(scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", left);
						}
					},
					ExportDeclaration: { exit(path$9) {
						const { node, scope } = path$9;
						if (isExportAllDeclaration(node)) return;
						const declar = node.declaration;
						if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
							const id = declar.id;
							if (!id) return;
							const binding = scope.getBinding(id.name);
							binding?.reference(path$9);
						} else if (isVariableDeclaration(declar)) for (const decl of declar.declarations) for (const name of Object.keys(getBindingIdentifiers(decl))) {
							const binding = scope.getBinding(name);
							binding?.reference(path$9);
						}
					} },
					LabeledStatement(path$9) {
						path$9.scope.getBlockParent().registerDeclaration(path$9);
					},
					AssignmentExpression(path$9, state) {
						state.assignments.push(path$9);
					},
					UpdateExpression(path$9, state) {
						state.constantViolations.push(path$9);
					},
					UnaryExpression(path$9, state) {
						"delete" === path$9.node.operator && state.constantViolations.push(path$9);
					},
					BlockScoped(path$9) {
						let scope = path$9.scope;
						scope.path === path$9 && (scope = scope.parent);
						if (scope.getBlockParent().registerDeclaration(path$9), path$9.isClassDeclaration() && path$9.node.id) {
							const name = path$9.node.id.name;
							path$9.scope.bindings[name] = path$9.scope.parent.getBinding(name);
						}
					},
					CatchClause(path$9) {
						path$9.scope.registerBinding("let", path$9);
					},
					Function(path$9) {
						const params = path$9.get("params");
						for (const param of params) path$9.scope.registerBinding("param", param);
						path$9.isFunctionExpression() && path$9.node.id && !path$9.node.id[NOT_LOCAL_BINDING] && path$9.scope.registerBinding("local", path$9.get("id"), path$9);
					},
					ClassExpression(path$9) {
						path$9.node.id && !path$9.node.id[NOT_LOCAL_BINDING] && path$9.scope.registerBinding("local", path$9.get("id"), path$9);
					},
					TSTypeAnnotation(path$9) {
						path$9.skip();
					}
				};
				let uid$2 = 0;
				class Scope {
					constructor(path$9) {
						this.uid = void 0, this.path = void 0, this.block = void 0, this.inited = void 0, this.labels = void 0, this.bindings = void 0, this.references = void 0, this.globals = void 0, this.uids = void 0, this.data = void 0, this.crawling = void 0;
						const { node } = path$9, cached = _cache.scope.get(node);
						if ((null == cached ? void 0 : cached.path) === path$9) return cached;
						_cache.scope.set(node, this), this.uid = uid$2++, this.block = node, this.path = path$9, this.labels = new Map(), this.inited = !1;
					}
					get parent() {
						var _parent;
						let parent, path$9 = this.path;
						do {
							var _path;
							const shouldSkip = "key" === path$9.key || "decorators" === path$9.listKey;
							path$9 = path$9.parentPath, shouldSkip && path$9.isMethod() && (path$9 = path$9.parentPath), null != (_path = path$9) && _path.isScope() && (parent = path$9);
						} while (path$9 && !parent);
						return null == (_parent = parent) ? void 0 : _parent.scope;
					}
					generateDeclaredUidIdentifier(name) {
						const id = this.generateUidIdentifier(name);
						return this.push({ id }), cloneNode(id);
					}
					generateUidIdentifier(name) {
						return identifier(this.generateUid(name));
					}
					generateUid(name = "temp") {
						let uid$3;
						name = toIdentifier(name).replace(/^_+/, "").replace(/\d+$/g, "");
						let i = 1;
						do
							uid$3 = `_${name}`, i > 1 && (uid$3 += i), i++;
						while (this.hasLabel(uid$3) || this.hasBinding(uid$3) || this.hasGlobal(uid$3) || this.hasReference(uid$3));
						const program = this.getProgramParent();
						return program.references[uid$3] = !0, program.uids[uid$3] = !0, uid$3;
					}
					generateUidBasedOnNode(node, defaultName) {
						const parts = [];
						gatherNodeParts(node, parts);
						let id = parts.join("$");
						return id = id.replace(/^_/, "") || defaultName || "ref", this.generateUid(id.slice(0, 20));
					}
					generateUidIdentifierBasedOnNode(node, defaultName) {
						return identifier(this.generateUidBasedOnNode(node, defaultName));
					}
					isStatic(node) {
						if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) return !0;
						if (isIdentifier(node)) {
							const binding = this.getBinding(node.name);
							return binding ? binding.constant : this.hasBinding(node.name);
						}
						return !1;
					}
					maybeGenerateMemoised(node, dontPush) {
						if (this.isStatic(node)) return null;
						{
							const id = this.generateUidIdentifierBasedOnNode(node);
							return dontPush ? id : (this.push({ id }), cloneNode(id));
						}
					}
					checkBlockScopedCollisions(local, kind, name, id) {
						if ("param" === kind) return;
						if ("local" === local.kind) return;
						if ("let" === kind || "let" === local.kind || "const" === local.kind || "module" === local.kind || "param" === local.kind && "const" === kind) throw this.path.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
					}
					rename(oldName, newName) {
						const binding = this.getBinding(oldName);
						if (binding) {
							newName || (newName = this.generateUidIdentifier(oldName).name);
							new _renamer.default(binding, oldName, newName).rename(arguments[2]);
						}
					}
					dump() {
						const sep$1 = "-".repeat(60);
						console.log(sep$1);
						let scope = this;
						do {
							console.log("#", scope.block.type);
							for (const name of Object.keys(scope.bindings)) {
								const binding = scope.bindings[name];
								console.log(" -", name, {
									constant: binding.constant,
									references: binding.references,
									violations: binding.constantViolations.length,
									kind: binding.kind
								});
							}
						} while (scope = scope.parent);
						console.log(sep$1);
					}
					hasLabel(name) {
						return !!this.getLabel(name);
					}
					getLabel(name) {
						return this.labels.get(name);
					}
					registerLabel(path$9) {
						this.labels.set(path$9.node.label.name, path$9);
					}
					registerDeclaration(path$9) {
						if (path$9.isLabeledStatement()) this.registerLabel(path$9);
						else if (path$9.isFunctionDeclaration()) this.registerBinding("hoisted", path$9.get("id"), path$9);
						else if (path$9.isVariableDeclaration()) {
							const declarations = path$9.get("declarations"), { kind } = path$9.node;
							for (const declar of declarations) this.registerBinding("using" === kind || "await using" === kind ? "const" : kind, declar);
						} else if (path$9.isClassDeclaration()) {
							if (path$9.node.declare) return;
							this.registerBinding("let", path$9);
						} else if (path$9.isImportDeclaration()) {
							const isTypeDeclaration = "type" === path$9.node.importKind || "typeof" === path$9.node.importKind, specifiers = path$9.get("specifiers");
							for (const specifier of specifiers) {
								const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && ("type" === specifier.node.importKind || "typeof" === specifier.node.importKind);
								this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
							}
						} else if (path$9.isExportDeclaration()) {
							const declar = path$9.get("declaration");
							(declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) && this.registerDeclaration(declar);
						} else this.registerBinding("unknown", path$9);
					}
					buildUndefinedNode() {
						return buildUndefinedNode();
					}
					registerConstantViolation(path$9) {
						const ids = path$9.getAssignmentIdentifiers();
						for (const name of Object.keys(ids)) {
							var _this$getBinding;
							null == (_this$getBinding = this.getBinding(name)) || _this$getBinding.reassign(path$9);
						}
					}
					registerBinding(kind, path$9, bindingPath = path$9) {
						if (!kind) throw new ReferenceError("no `kind`");
						if (path$9.isVariableDeclaration()) {
							const declarators = path$9.get("declarations");
							for (const declar of declarators) this.registerBinding(kind, declar);
							return;
						}
						const parent = this.getProgramParent(), ids = path$9.getOuterBindingIdentifiers(!0);
						for (const name of Object.keys(ids)) {
							parent.references[name] = !0;
							for (const id of ids[name]) {
								const local = this.getOwnBinding(name);
								if (local) {
									if (local.identifier === id) continue;
									this.checkBlockScopedCollisions(local, kind, name, id);
								}
								local ? local.reassign(bindingPath) : this.bindings[name] = new _binding.default({
									identifier: id,
									scope: this,
									path: bindingPath,
									kind
								});
							}
						}
					}
					addGlobal(node) {
						this.globals[node.name] = node;
					}
					hasUid(name) {
						let scope = this;
						do
							if (scope.uids[name]) return !0;
						while (scope = scope.parent);
						return !1;
					}
					hasGlobal(name) {
						let scope = this;
						do
							if (scope.globals[name]) return !0;
						while (scope = scope.parent);
						return !1;
					}
					hasReference(name) {
						return !!this.getProgramParent().references[name];
					}
					isPure(node, constantsOnly) {
						if (isIdentifier(node)) {
							const binding = this.getBinding(node.name);
							return !!binding && (!constantsOnly || binding.constant);
						}
						if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node)) return !0;
						var _node$decorators, _node$decorators2, _node$decorators3;
						if (isClass(node)) return !(node.superClass && !this.isPure(node.superClass, constantsOnly)) && !((null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length) > 0) && this.isPure(node.body, constantsOnly);
						if (isClassBody(node)) {
							for (const method of node.body) if (!this.isPure(method, constantsOnly)) return !1;
							return !0;
						}
						if (isBinary(node)) return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
						if (isArrayExpression(node) || isTupleExpression(node)) {
							for (const elem of node.elements) if (null !== elem && !this.isPure(elem, constantsOnly)) return !1;
							return !0;
						}
						if (isObjectExpression(node) || isRecordExpression(node)) {
							for (const prop of node.properties) if (!this.isPure(prop, constantsOnly)) return !1;
							return !0;
						}
						if (isMethod(node)) return !(node.computed && !this.isPure(node.key, constantsOnly)) && !((null == (_node$decorators2 = node.decorators) ? void 0 : _node$decorators2.length) > 0);
						if (isProperty(node)) return !(node.computed && !this.isPure(node.key, constantsOnly)) && !((null == (_node$decorators3 = node.decorators) ? void 0 : _node$decorators3.length) > 0) && !((isObjectProperty(node) || node.static) && null !== node.value && !this.isPure(node.value, constantsOnly));
						if (isUnaryExpression(node)) return this.isPure(node.argument, constantsOnly);
						if (isTemplateLiteral(node)) {
							for (const expression of node.expressions) if (!this.isPure(expression, constantsOnly)) return !1;
							return !0;
						}
						return isTaggedTemplateExpression(node) ? matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", { noGlobals: !0 }) && this.isPure(node.quasi, constantsOnly) : isMemberExpression(node) ? !node.computed && isIdentifier(node.object) && "Symbol" === node.object.name && isIdentifier(node.property) && "for" !== node.property.name && !this.hasBinding("Symbol", { noGlobals: !0 }) : isCallExpression(node) ? matchesPattern(node.callee, "Symbol.for") && !this.hasBinding("Symbol", { noGlobals: !0 }) && 1 === node.arguments.length && t.isStringLiteral(node.arguments[0]) : isPureish(node);
					}
					setData(key, val) {
						return this.data[key] = val;
					}
					getData(key) {
						let scope = this;
						do {
							const data = scope.data[key];
							if (null != data) return data;
						} while (scope = scope.parent);
					}
					removeData(key) {
						let scope = this;
						do
							null != scope.data[key] && (scope.data[key] = null);
						while (scope = scope.parent);
					}
					init() {
						this.inited || (this.inited = !0, this.crawl());
					}
					crawl() {
						const path$9 = this.path;
						this.references = Object.create(null), this.bindings = Object.create(null), this.globals = Object.create(null), this.uids = Object.create(null), this.data = Object.create(null);
						let scope = this;
						do {
							if (scope.crawling) return;
							if (scope.path.isProgram()) break;
						} while (scope = scope.parent);
						const programParent = scope, state = {
							references: [],
							constantViolations: [],
							assignments: []
						};
						if (this.crawling = !0, "Program" !== path$9.type && (0, _visitors.isExplodedVisitor)(collectorVisitor)) {
							for (const visit of collectorVisitor.enter) visit.call(state, path$9, state);
							const typeVisitors = collectorVisitor[path$9.type];
							if (typeVisitors) for (const visit of typeVisitors.enter) visit.call(state, path$9, state);
						}
						path$9.traverse(collectorVisitor, state), this.crawling = !1;
						for (const path$10 of state.assignments) {
							const ids = path$10.getAssignmentIdentifiers();
							for (const name of Object.keys(ids)) path$10.scope.getBinding(name) || programParent.addGlobal(ids[name]);
							path$10.scope.registerConstantViolation(path$10);
						}
						for (const ref of state.references) {
							const binding = ref.scope.getBinding(ref.node.name);
							binding ? binding.reference(ref) : programParent.addGlobal(ref.node);
						}
						for (const path$10 of state.constantViolations) path$10.scope.registerConstantViolation(path$10);
					}
					push(opts) {
						let path$9 = this.path;
						path$9.isPattern() ? path$9 = this.getPatternParent().path : path$9.isBlockStatement() || path$9.isProgram() || (path$9 = this.getBlockParent().path), path$9.isSwitchStatement() && (path$9 = (this.getFunctionParent() || this.getProgramParent()).path);
						const { init: init$1, unique, kind = "var", id } = opts;
						if (!init$1 && !unique && ("var" === kind || "let" === kind) && path$9.isFunction() && !path$9.node.name && isCallExpression(path$9.parent, { callee: path$9.node }) && path$9.parent.arguments.length <= path$9.node.params.length && isIdentifier(id)) return path$9.pushContainer("params", id), void path$9.scope.registerBinding("param", path$9.get("params")[path$9.node.params.length - 1]);
						(path$9.isLoop() || path$9.isCatchClause() || path$9.isFunction()) && (path$9.ensureBlock(), path$9 = path$9.get("body"));
						const blockHoist = null == opts._blockHoist ? 2 : opts._blockHoist, dataKey = `declaration:${kind}:${blockHoist}`;
						let declarPath = !unique && path$9.getData(dataKey);
						if (!declarPath) {
							const declar = variableDeclaration(kind, []);
							declar._blockHoist = blockHoist, [declarPath] = path$9.unshiftContainer("body", [declar]), unique || path$9.setData(dataKey, declarPath);
						}
						const declarator = variableDeclarator(id, init$1), len = declarPath.node.declarations.push(declarator);
						path$9.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
					}
					getProgramParent() {
						let scope = this;
						do
							if (scope.path.isProgram()) return scope;
						while (scope = scope.parent);
						throw new Error("Couldn't find a Program");
					}
					getFunctionParent() {
						let scope = this;
						do
							if (scope.path.isFunctionParent()) return scope;
						while (scope = scope.parent);
						return null;
					}
					getBlockParent() {
						let scope = this;
						do
							if (scope.path.isBlockParent()) return scope;
						while (scope = scope.parent);
						throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
					}
					getPatternParent() {
						let scope = this;
						do
							if (!scope.path.isPattern()) return scope.getBlockParent();
						while (scope = scope.parent.parent);
						throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
					}
					getAllBindings() {
						const ids = Object.create(null);
						let scope = this;
						do {
							for (const key of Object.keys(scope.bindings)) key in ids == !1 && (ids[key] = scope.bindings[key]);
							scope = scope.parent;
						} while (scope);
						return ids;
					}
					bindingIdentifierEquals(name, node) {
						return this.getBindingIdentifier(name) === node;
					}
					getBinding(name) {
						let previousPath, scope = this;
						do {
							const binding = scope.getOwnBinding(name);
							var _previousPath;
							if (binding) {
								if (null == (_previousPath = previousPath) || !_previousPath.isPattern() || "param" === binding.kind || "local" === binding.kind) return binding;
							} else if (!binding && "arguments" === name && scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) break;
							previousPath = scope.path;
						} while (scope = scope.parent);
					}
					getOwnBinding(name) {
						return this.bindings[name];
					}
					getBindingIdentifier(name) {
						var _this$getBinding2;
						return null == (_this$getBinding2 = this.getBinding(name)) ? void 0 : _this$getBinding2.identifier;
					}
					getOwnBindingIdentifier(name) {
						const binding = this.bindings[name];
						return null == binding ? void 0 : binding.identifier;
					}
					hasOwnBinding(name) {
						return !!this.getOwnBinding(name);
					}
					hasBinding(name, opts) {
						if (!name) return !1;
						let noGlobals, noUids, scope = this;
						do
							if (scope.hasOwnBinding(name)) return !0;
						while (scope = scope.parent);
						return "object" == typeof opts ? (noGlobals = opts.noGlobals, noUids = opts.noUids) : "boolean" == typeof opts && (noGlobals = opts), !(noUids || !this.hasUid(name)) || !(noGlobals || !Scope.globals.includes(name)) || !(noGlobals || !Scope.contextVariables.includes(name));
					}
					parentHasBinding(name, opts) {
						var _this$parent;
						return null == (_this$parent = this.parent) ? void 0 : _this$parent.hasBinding(name, opts);
					}
					moveBindingTo(name, scope) {
						const info$1 = this.getBinding(name);
						info$1 && (info$1.scope.removeOwnBinding(name), info$1.scope = scope, scope.bindings[name] = info$1);
					}
					removeOwnBinding(name) {
						delete this.bindings[name];
					}
					removeBinding(name) {
						var _this$getBinding3;
						null == (_this$getBinding3 = this.getBinding(name)) || _this$getBinding3.scope.removeOwnBinding(name);
						let scope = this;
						do
							scope.uids[name] && (scope.uids[name] = !1);
						while (scope = scope.parent);
					}
					hoistVariables(emit = (id) => this.push({ id })) {
						this.crawl();
						const seen = new Set();
						for (const name of Object.keys(this.bindings)) {
							const binding = this.bindings[name];
							if (!binding) continue;
							const { path: path$9 } = binding;
							if (!path$9.isVariableDeclarator()) continue;
							const { parent, parentPath } = path$9;
							if ("var" !== parent.kind || seen.has(parent)) continue;
							let firstId;
							seen.add(path$9.parent);
							const init$1 = [];
							for (const decl of parent.declarations) {
								firstId ??= decl.id, decl.init && init$1.push(assignmentExpression("=", decl.id, decl.init));
								const ids = Object.keys(getBindingIdentifiers(decl, !1, !0, !0));
								for (const name$1 of ids) emit(identifier(name$1), null != decl.init);
							}
							if (parentPath.parentPath.isFor({ left: parent })) parentPath.replaceWith(firstId);
							else if (0 === init$1.length) parentPath.remove();
							else {
								const expr = 1 === init$1.length ? init$1[0] : sequenceExpression(init$1);
								parentPath.parentPath.isForStatement({ init: parent }) ? parentPath.replaceWith(expr) : parentPath.replaceWith(expressionStatement(expr));
							}
						}
					}
				}
				exports$1.default = Scope, Scope.globals = Object.keys(_globals.builtin), Scope.contextVariables = [
					"arguments",
					"undefined",
					"Infinity",
					"NaN"
				], Scope.prototype._renameFromMap = function(map, oldName, newName, value$1) {
					map[oldName] && (map[newName] = value$1, map[oldName] = null);
				}, Scope.prototype.traverse = function(node, opts, state) {
					(0, _index.default)(node, opts, this, state, this.path);
				}, Scope.prototype._generateUid = function(name, i) {
					let id = name;
					return i > 1 && (id += i), `_${id}`;
				}, Scope.prototype.toArray = function(node, i, arrayLikeIsIterable) {
					if (isIdentifier(node)) {
						const binding = this.getBinding(node.name);
						if (null != binding && binding.constant && binding.path.isGenericType("Array")) return node;
					}
					if (isArrayExpression(node)) return node;
					if (isIdentifier(node, { name: "arguments" })) return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
					let helperName;
					const args = [node];
					return !0 === i ? helperName = "toConsumableArray" : "number" == typeof i ? (args.push(numericLiteral(i)), helperName = "slicedToArray") : helperName = "toArray", arrayLikeIsIterable && (args.unshift(this.path.hub.addHelper(helperName)), helperName = "maybeArrayLike"), callExpression(this.path.hub.addHelper(helperName), args);
				}, Scope.prototype.getAllBindingsOfKind = function(...kinds) {
					const ids = Object.create(null);
					for (const kind of kinds) {
						let scope = this;
						do {
							for (const name of Object.keys(scope.bindings)) {
								const binding = scope.bindings[name];
								binding.kind === kind && (ids[name] = binding);
							}
							scope = scope.parent;
						} while (scope);
					}
					return ids;
				}, Object.defineProperties(Scope.prototype, {
					parentBlock: {
						configurable: !0,
						enumerable: !0,
						get() {
							return this.path.parent;
						}
					},
					hub: {
						configurable: !0,
						enumerable: !0,
						get() {
							return this.path.hub;
						}
					}
				});
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/lib/renamer.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _t = t, _traverseNode = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _visitors = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js"), _context = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
				const { getAssignmentIdentifiers } = _t, renameVisitor = {
					ReferencedIdentifier({ node }, state) {
						node.name === state.oldName && (node.name = state.newName);
					},
					Scope(path$9, state) {
						path$9.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier) || (path$9.skip(), path$9.isMethod() && (path$9.requeueComputedKeyAndDecorators ? path$9.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path$9)));
					},
					ObjectProperty({ node, scope }, state) {
						const { name } = node.key;
						var _node$extra;
						!node.shorthand || name !== state.oldName && name !== state.newName || scope.getBindingIdentifier(name) !== state.binding.identifier || (node.shorthand = !1, null != (_node$extra = node.extra) && _node$extra.shorthand && (node.extra.shorthand = !1));
					},
					"AssignmentExpression|Declaration|VariableDeclarator"(path$9, state) {
						if (path$9.isVariableDeclaration()) return;
						const ids = path$9.isAssignmentExpression() ? getAssignmentIdentifiers(path$9.node) : path$9.getOuterBindingIdentifiers();
						for (const name in ids) name === state.oldName && (ids[name].name = state.newName);
					}
				};
				exports$1.default = class {
					constructor(binding, oldName, newName) {
						this.newName = newName, this.oldName = oldName, this.binding = binding;
					}
					maybeConvertFromExportDeclaration(parentDeclar) {
						const maybeExportDeclar = parentDeclar.parentPath;
						if (maybeExportDeclar.isExportDeclaration()) {
							if (maybeExportDeclar.isExportDefaultDeclaration()) {
								const { declaration } = maybeExportDeclar.node;
								if (t.isDeclaration(declaration) && !declaration.id) return;
							}
							maybeExportDeclar.isExportAllDeclaration() || maybeExportDeclar.splitExportDeclaration();
						}
					}
					maybeConvertFromClassFunctionDeclaration(path$9) {
						return path$9;
					}
					maybeConvertFromClassFunctionExpression(path$9) {
						return path$9;
					}
					rename() {
						const { binding, oldName, newName } = this, { scope, path: path$9 } = binding, parentDeclar = path$9.find((path$10) => path$10.isDeclaration() || path$10.isFunctionExpression() || path$10.isClassExpression());
						if (parentDeclar) parentDeclar.getOuterBindingIdentifiers()[oldName] === binding.identifier && this.maybeConvertFromExportDeclaration(parentDeclar);
						const blockToTraverse = arguments[0] || scope.block, skipKeys = { discriminant: !0 };
						t.isMethod(blockToTraverse) && (blockToTraverse.computed && (skipKeys.key = !0), t.isObjectMethod(blockToTraverse) || (skipKeys.decorators = !0)), (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, skipKeys), arguments[0] || (scope.removeOwnBinding(oldName), scope.bindings[newName] = binding, this.binding.identifier.name = newName), parentDeclar && (this.maybeConvertFromClassFunctionDeclaration(path$9), this.maybeConvertFromClassFunctionExpression(path$9));
					}
				};
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.traverseNode = function(node, opts, scope, state, path$9, skipKeys, visitSelf) {
					const keys = VISITOR_KEYS[node.type];
					if (!keys) return !1;
					const context = new _context.default(scope, opts, state, path$9);
					if (visitSelf) return (null == skipKeys || !skipKeys[path$9.parentKey]) && context.visitQueue([path$9]);
					for (const key of keys) if ((null == skipKeys || !skipKeys[key]) && context.visit(node, key)) return !0;
					return !1;
				};
				var _context = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/context.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
				const { VISITOR_KEYS } = _t;
			},
			"./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.environmentVisitor = function(visitor) {
					return merge([_environmentVisitor, visitor]);
				}, exports$1.explode = explode$1, exports$1.isExplodedVisitor = isExplodedVisitor, exports$1.merge = merge, exports$1.verify = verify$1;
				var virtualTypes = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), virtualTypesValidators = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js"), _t = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__$1("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
				const { DEPRECATED_KEYS, DEPRECATED_ALIASES, FLIPPED_ALIAS_KEYS, TYPES, __internal__deprecationWarning: deprecationWarning } = _t;
				function isExplodedVisitor(visitor) {
					return null == visitor ? void 0 : visitor._exploded;
				}
				function explode$1(visitor) {
					if (isExplodedVisitor(visitor)) return visitor;
					visitor._exploded = !0;
					for (const nodeType of Object.keys(visitor)) {
						if (shouldIgnoreKey(nodeType)) continue;
						const parts = nodeType.split("|");
						if (1 === parts.length) continue;
						const fns = visitor[nodeType];
						delete visitor[nodeType];
						for (const part of parts) visitor[part] = fns;
					}
					verify$1(visitor), delete visitor.__esModule, function(obj) {
						for (const key of Object.keys(obj)) {
							if (shouldIgnoreKey(key)) continue;
							const fns = obj[key];
							"function" == typeof fns && (obj[key] = { enter: fns });
						}
					}(visitor), ensureCallbackArrays(visitor);
					for (const nodeType of Object.keys(visitor)) {
						if (shouldIgnoreKey(nodeType)) continue;
						if (!(nodeType in virtualTypes)) continue;
						const fns = visitor[nodeType];
						for (const type$1 of Object.keys(fns)) fns[type$1] = wrapCheck(nodeType, fns[type$1]);
						delete visitor[nodeType];
						const types$7 = virtualTypes[nodeType];
						if (null !== types$7) for (const type$1 of types$7) visitor[type$1] ? mergePair(visitor[type$1], fns) : visitor[type$1] = fns;
						else mergePair(visitor, fns);
					}
					for (const nodeType of Object.keys(visitor)) {
						if (shouldIgnoreKey(nodeType)) continue;
						let aliases = FLIPPED_ALIAS_KEYS[nodeType];
						if (nodeType in DEPRECATED_KEYS) {
							const deprecatedKey = DEPRECATED_KEYS[nodeType];
							deprecationWarning(nodeType, deprecatedKey, "Visitor "), aliases = [deprecatedKey];
						} else if (nodeType in DEPRECATED_ALIASES) {
							const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
							deprecationWarning(nodeType, deprecatedAlias, "Visitor "), aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];
						}
						if (!aliases) continue;
						const fns = visitor[nodeType];
						delete visitor[nodeType];
						for (const alias of aliases) {
							const existing = visitor[alias];
							existing ? mergePair(existing, fns) : visitor[alias] = Object.assign({}, fns);
						}
					}
					for (const nodeType of Object.keys(visitor)) shouldIgnoreKey(nodeType) || ensureCallbackArrays(visitor[nodeType]);
					return visitor;
				}
				function verify$1(visitor) {
					if (!visitor._verified) {
						if ("function" == typeof visitor) throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
						for (const nodeType of Object.keys(visitor)) {
							if ("enter" !== nodeType && "exit" !== nodeType || validateVisitorMethods(nodeType, visitor[nodeType]), shouldIgnoreKey(nodeType)) continue;
							if (!TYPES.includes(nodeType)) throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type in @babel/traverse 7.26.4`);
							const visitors = visitor[nodeType];
							if ("object" == typeof visitors) for (const visitorKey of Object.keys(visitors)) {
								if ("enter" !== visitorKey && "exit" !== visitorKey) throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
								validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
							}
						}
						visitor._verified = !0;
					}
				}
				function validateVisitorMethods(path$9, val) {
					const fns = [].concat(val);
					for (const fn of fns) if ("function" != typeof fn) throw new TypeError(`Non-function found defined in ${path$9} with type ${typeof fn}`);
				}
				function merge(visitors, states$5 = [], wrapper) {
					const mergedVisitor = {
						_verified: !0,
						_exploded: !0
					};
					Object.defineProperty(mergedVisitor, "_exploded", { enumerable: !1 }), Object.defineProperty(mergedVisitor, "_verified", { enumerable: !1 });
					for (let i = 0; i < visitors.length; i++) {
						const visitor = explode$1(visitors[i]), state = states$5[i];
						let topVisitor = visitor;
						(state || wrapper) && (topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper)), mergePair(mergedVisitor, topVisitor);
						for (const key of Object.keys(visitor)) {
							if (shouldIgnoreKey(key)) continue;
							let typeVisitor = visitor[key];
							(state || wrapper) && (typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper));
							mergePair(mergedVisitor[key] || (mergedVisitor[key] = {}), typeVisitor);
						}
					}
					return mergedVisitor;
				}
				function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
					const newVisitor = {};
					for (const phase of ["enter", "exit"]) {
						let fns = oldVisitor[phase];
						Array.isArray(fns) && (fns = fns.map(function(fn) {
							let newFn = fn;
							return state && (newFn = function(path$9) {
								fn.call(state, path$9, state);
							}), wrapper && (newFn = wrapper(null == state ? void 0 : state.key, phase, newFn)), newFn !== fn && (newFn.toString = () => fn.toString()), newFn;
						}), newVisitor[phase] = fns);
					}
					return newVisitor;
				}
				function ensureCallbackArrays(obj) {
					obj.enter && !Array.isArray(obj.enter) && (obj.enter = [obj.enter]), obj.exit && !Array.isArray(obj.exit) && (obj.exit = [obj.exit]);
				}
				function wrapCheck(nodeType, fn) {
					const validator = virtualTypesValidators[`is${nodeType}`], newFn = function(path$9) {
						if (validator.call(path$9)) return fn.apply(this, arguments);
					};
					return newFn.toString = () => fn.toString(), newFn;
				}
				function shouldIgnoreKey(key) {
					return "_" === key[0] || "enter" === key || "exit" === key || "shouldSkip" === key || "denylist" === key || "noScope" === key || "skipKeys" === key || "blacklist" === key;
				}
				function mergePair(dest, src) {
					for (const phase of ["enter", "exit"]) src[phase] && (dest[phase] = [].concat(dest[phase] || [], src[phase]));
				}
				const _environmentVisitor = {
					FunctionParent(path$9) {
						path$9.isArrowFunctionExpression() || (path$9.skip(), path$9.isMethod() && (path$9.requeueComputedKeyAndDecorators ? path$9.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path$9)));
					},
					Property(path$9) {
						path$9.isObjectProperty() || (path$9.skip(), path$9.requeueComputedKeyAndDecorators ? path$9.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path$9));
					}
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/assertNode.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					if (!(0, _isNode.default)(node)) {
						var _node$type;
						const type$1 = null != (_node$type = null == node ? void 0 : node.type) ? _node$type : JSON.stringify(node);
						throw new TypeError(`Not a valid node of type "${type$1}"`);
					}
				};
				var _isNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/generated/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.assertAccessor = function(node, opts) {
					assert$21("Accessor", node, opts);
				}, exports$1.assertAnyTypeAnnotation = function(node, opts) {
					assert$21("AnyTypeAnnotation", node, opts);
				}, exports$1.assertArgumentPlaceholder = function(node, opts) {
					assert$21("ArgumentPlaceholder", node, opts);
				}, exports$1.assertArrayExpression = function(node, opts) {
					assert$21("ArrayExpression", node, opts);
				}, exports$1.assertArrayPattern = function(node, opts) {
					assert$21("ArrayPattern", node, opts);
				}, exports$1.assertArrayTypeAnnotation = function(node, opts) {
					assert$21("ArrayTypeAnnotation", node, opts);
				}, exports$1.assertArrowFunctionExpression = function(node, opts) {
					assert$21("ArrowFunctionExpression", node, opts);
				}, exports$1.assertAssignmentExpression = function(node, opts) {
					assert$21("AssignmentExpression", node, opts);
				}, exports$1.assertAssignmentPattern = function(node, opts) {
					assert$21("AssignmentPattern", node, opts);
				}, exports$1.assertAwaitExpression = function(node, opts) {
					assert$21("AwaitExpression", node, opts);
				}, exports$1.assertBigIntLiteral = function(node, opts) {
					assert$21("BigIntLiteral", node, opts);
				}, exports$1.assertBinary = function(node, opts) {
					assert$21("Binary", node, opts);
				}, exports$1.assertBinaryExpression = function(node, opts) {
					assert$21("BinaryExpression", node, opts);
				}, exports$1.assertBindExpression = function(node, opts) {
					assert$21("BindExpression", node, opts);
				}, exports$1.assertBlock = function(node, opts) {
					assert$21("Block", node, opts);
				}, exports$1.assertBlockParent = function(node, opts) {
					assert$21("BlockParent", node, opts);
				}, exports$1.assertBlockStatement = function(node, opts) {
					assert$21("BlockStatement", node, opts);
				}, exports$1.assertBooleanLiteral = function(node, opts) {
					assert$21("BooleanLiteral", node, opts);
				}, exports$1.assertBooleanLiteralTypeAnnotation = function(node, opts) {
					assert$21("BooleanLiteralTypeAnnotation", node, opts);
				}, exports$1.assertBooleanTypeAnnotation = function(node, opts) {
					assert$21("BooleanTypeAnnotation", node, opts);
				}, exports$1.assertBreakStatement = function(node, opts) {
					assert$21("BreakStatement", node, opts);
				}, exports$1.assertCallExpression = function(node, opts) {
					assert$21("CallExpression", node, opts);
				}, exports$1.assertCatchClause = function(node, opts) {
					assert$21("CatchClause", node, opts);
				}, exports$1.assertClass = function(node, opts) {
					assert$21("Class", node, opts);
				}, exports$1.assertClassAccessorProperty = function(node, opts) {
					assert$21("ClassAccessorProperty", node, opts);
				}, exports$1.assertClassBody = function(node, opts) {
					assert$21("ClassBody", node, opts);
				}, exports$1.assertClassDeclaration = function(node, opts) {
					assert$21("ClassDeclaration", node, opts);
				}, exports$1.assertClassExpression = function(node, opts) {
					assert$21("ClassExpression", node, opts);
				}, exports$1.assertClassImplements = function(node, opts) {
					assert$21("ClassImplements", node, opts);
				}, exports$1.assertClassMethod = function(node, opts) {
					assert$21("ClassMethod", node, opts);
				}, exports$1.assertClassPrivateMethod = function(node, opts) {
					assert$21("ClassPrivateMethod", node, opts);
				}, exports$1.assertClassPrivateProperty = function(node, opts) {
					assert$21("ClassPrivateProperty", node, opts);
				}, exports$1.assertClassProperty = function(node, opts) {
					assert$21("ClassProperty", node, opts);
				}, exports$1.assertCompletionStatement = function(node, opts) {
					assert$21("CompletionStatement", node, opts);
				}, exports$1.assertConditional = function(node, opts) {
					assert$21("Conditional", node, opts);
				}, exports$1.assertConditionalExpression = function(node, opts) {
					assert$21("ConditionalExpression", node, opts);
				}, exports$1.assertContinueStatement = function(node, opts) {
					assert$21("ContinueStatement", node, opts);
				}, exports$1.assertDebuggerStatement = function(node, opts) {
					assert$21("DebuggerStatement", node, opts);
				}, exports$1.assertDecimalLiteral = function(node, opts) {
					assert$21("DecimalLiteral", node, opts);
				}, exports$1.assertDeclaration = function(node, opts) {
					assert$21("Declaration", node, opts);
				}, exports$1.assertDeclareClass = function(node, opts) {
					assert$21("DeclareClass", node, opts);
				}, exports$1.assertDeclareExportAllDeclaration = function(node, opts) {
					assert$21("DeclareExportAllDeclaration", node, opts);
				}, exports$1.assertDeclareExportDeclaration = function(node, opts) {
					assert$21("DeclareExportDeclaration", node, opts);
				}, exports$1.assertDeclareFunction = function(node, opts) {
					assert$21("DeclareFunction", node, opts);
				}, exports$1.assertDeclareInterface = function(node, opts) {
					assert$21("DeclareInterface", node, opts);
				}, exports$1.assertDeclareModule = function(node, opts) {
					assert$21("DeclareModule", node, opts);
				}, exports$1.assertDeclareModuleExports = function(node, opts) {
					assert$21("DeclareModuleExports", node, opts);
				}, exports$1.assertDeclareOpaqueType = function(node, opts) {
					assert$21("DeclareOpaqueType", node, opts);
				}, exports$1.assertDeclareTypeAlias = function(node, opts) {
					assert$21("DeclareTypeAlias", node, opts);
				}, exports$1.assertDeclareVariable = function(node, opts) {
					assert$21("DeclareVariable", node, opts);
				}, exports$1.assertDeclaredPredicate = function(node, opts) {
					assert$21("DeclaredPredicate", node, opts);
				}, exports$1.assertDecorator = function(node, opts) {
					assert$21("Decorator", node, opts);
				}, exports$1.assertDirective = function(node, opts) {
					assert$21("Directive", node, opts);
				}, exports$1.assertDirectiveLiteral = function(node, opts) {
					assert$21("DirectiveLiteral", node, opts);
				}, exports$1.assertDoExpression = function(node, opts) {
					assert$21("DoExpression", node, opts);
				}, exports$1.assertDoWhileStatement = function(node, opts) {
					assert$21("DoWhileStatement", node, opts);
				}, exports$1.assertEmptyStatement = function(node, opts) {
					assert$21("EmptyStatement", node, opts);
				}, exports$1.assertEmptyTypeAnnotation = function(node, opts) {
					assert$21("EmptyTypeAnnotation", node, opts);
				}, exports$1.assertEnumBody = function(node, opts) {
					assert$21("EnumBody", node, opts);
				}, exports$1.assertEnumBooleanBody = function(node, opts) {
					assert$21("EnumBooleanBody", node, opts);
				}, exports$1.assertEnumBooleanMember = function(node, opts) {
					assert$21("EnumBooleanMember", node, opts);
				}, exports$1.assertEnumDeclaration = function(node, opts) {
					assert$21("EnumDeclaration", node, opts);
				}, exports$1.assertEnumDefaultedMember = function(node, opts) {
					assert$21("EnumDefaultedMember", node, opts);
				}, exports$1.assertEnumMember = function(node, opts) {
					assert$21("EnumMember", node, opts);
				}, exports$1.assertEnumNumberBody = function(node, opts) {
					assert$21("EnumNumberBody", node, opts);
				}, exports$1.assertEnumNumberMember = function(node, opts) {
					assert$21("EnumNumberMember", node, opts);
				}, exports$1.assertEnumStringBody = function(node, opts) {
					assert$21("EnumStringBody", node, opts);
				}, exports$1.assertEnumStringMember = function(node, opts) {
					assert$21("EnumStringMember", node, opts);
				}, exports$1.assertEnumSymbolBody = function(node, opts) {
					assert$21("EnumSymbolBody", node, opts);
				}, exports$1.assertExistsTypeAnnotation = function(node, opts) {
					assert$21("ExistsTypeAnnotation", node, opts);
				}, exports$1.assertExportAllDeclaration = function(node, opts) {
					assert$21("ExportAllDeclaration", node, opts);
				}, exports$1.assertExportDeclaration = function(node, opts) {
					assert$21("ExportDeclaration", node, opts);
				}, exports$1.assertExportDefaultDeclaration = function(node, opts) {
					assert$21("ExportDefaultDeclaration", node, opts);
				}, exports$1.assertExportDefaultSpecifier = function(node, opts) {
					assert$21("ExportDefaultSpecifier", node, opts);
				}, exports$1.assertExportNamedDeclaration = function(node, opts) {
					assert$21("ExportNamedDeclaration", node, opts);
				}, exports$1.assertExportNamespaceSpecifier = function(node, opts) {
					assert$21("ExportNamespaceSpecifier", node, opts);
				}, exports$1.assertExportSpecifier = function(node, opts) {
					assert$21("ExportSpecifier", node, opts);
				}, exports$1.assertExpression = function(node, opts) {
					assert$21("Expression", node, opts);
				}, exports$1.assertExpressionStatement = function(node, opts) {
					assert$21("ExpressionStatement", node, opts);
				}, exports$1.assertExpressionWrapper = function(node, opts) {
					assert$21("ExpressionWrapper", node, opts);
				}, exports$1.assertFile = function(node, opts) {
					assert$21("File", node, opts);
				}, exports$1.assertFlow = function(node, opts) {
					assert$21("Flow", node, opts);
				}, exports$1.assertFlowBaseAnnotation = function(node, opts) {
					assert$21("FlowBaseAnnotation", node, opts);
				}, exports$1.assertFlowDeclaration = function(node, opts) {
					assert$21("FlowDeclaration", node, opts);
				}, exports$1.assertFlowPredicate = function(node, opts) {
					assert$21("FlowPredicate", node, opts);
				}, exports$1.assertFlowType = function(node, opts) {
					assert$21("FlowType", node, opts);
				}, exports$1.assertFor = function(node, opts) {
					assert$21("For", node, opts);
				}, exports$1.assertForInStatement = function(node, opts) {
					assert$21("ForInStatement", node, opts);
				}, exports$1.assertForOfStatement = function(node, opts) {
					assert$21("ForOfStatement", node, opts);
				}, exports$1.assertForStatement = function(node, opts) {
					assert$21("ForStatement", node, opts);
				}, exports$1.assertForXStatement = function(node, opts) {
					assert$21("ForXStatement", node, opts);
				}, exports$1.assertFunction = function(node, opts) {
					assert$21("Function", node, opts);
				}, exports$1.assertFunctionDeclaration = function(node, opts) {
					assert$21("FunctionDeclaration", node, opts);
				}, exports$1.assertFunctionExpression = function(node, opts) {
					assert$21("FunctionExpression", node, opts);
				}, exports$1.assertFunctionParent = function(node, opts) {
					assert$21("FunctionParent", node, opts);
				}, exports$1.assertFunctionTypeAnnotation = function(node, opts) {
					assert$21("FunctionTypeAnnotation", node, opts);
				}, exports$1.assertFunctionTypeParam = function(node, opts) {
					assert$21("FunctionTypeParam", node, opts);
				}, exports$1.assertGenericTypeAnnotation = function(node, opts) {
					assert$21("GenericTypeAnnotation", node, opts);
				}, exports$1.assertIdentifier = function(node, opts) {
					assert$21("Identifier", node, opts);
				}, exports$1.assertIfStatement = function(node, opts) {
					assert$21("IfStatement", node, opts);
				}, exports$1.assertImmutable = function(node, opts) {
					assert$21("Immutable", node, opts);
				}, exports$1.assertImport = function(node, opts) {
					assert$21("Import", node, opts);
				}, exports$1.assertImportAttribute = function(node, opts) {
					assert$21("ImportAttribute", node, opts);
				}, exports$1.assertImportDeclaration = function(node, opts) {
					assert$21("ImportDeclaration", node, opts);
				}, exports$1.assertImportDefaultSpecifier = function(node, opts) {
					assert$21("ImportDefaultSpecifier", node, opts);
				}, exports$1.assertImportExpression = function(node, opts) {
					assert$21("ImportExpression", node, opts);
				}, exports$1.assertImportNamespaceSpecifier = function(node, opts) {
					assert$21("ImportNamespaceSpecifier", node, opts);
				}, exports$1.assertImportOrExportDeclaration = function(node, opts) {
					assert$21("ImportOrExportDeclaration", node, opts);
				}, exports$1.assertImportSpecifier = function(node, opts) {
					assert$21("ImportSpecifier", node, opts);
				}, exports$1.assertIndexedAccessType = function(node, opts) {
					assert$21("IndexedAccessType", node, opts);
				}, exports$1.assertInferredPredicate = function(node, opts) {
					assert$21("InferredPredicate", node, opts);
				}, exports$1.assertInterfaceDeclaration = function(node, opts) {
					assert$21("InterfaceDeclaration", node, opts);
				}, exports$1.assertInterfaceExtends = function(node, opts) {
					assert$21("InterfaceExtends", node, opts);
				}, exports$1.assertInterfaceTypeAnnotation = function(node, opts) {
					assert$21("InterfaceTypeAnnotation", node, opts);
				}, exports$1.assertInterpreterDirective = function(node, opts) {
					assert$21("InterpreterDirective", node, opts);
				}, exports$1.assertIntersectionTypeAnnotation = function(node, opts) {
					assert$21("IntersectionTypeAnnotation", node, opts);
				}, exports$1.assertJSX = function(node, opts) {
					assert$21("JSX", node, opts);
				}, exports$1.assertJSXAttribute = function(node, opts) {
					assert$21("JSXAttribute", node, opts);
				}, exports$1.assertJSXClosingElement = function(node, opts) {
					assert$21("JSXClosingElement", node, opts);
				}, exports$1.assertJSXClosingFragment = function(node, opts) {
					assert$21("JSXClosingFragment", node, opts);
				}, exports$1.assertJSXElement = function(node, opts) {
					assert$21("JSXElement", node, opts);
				}, exports$1.assertJSXEmptyExpression = function(node, opts) {
					assert$21("JSXEmptyExpression", node, opts);
				}, exports$1.assertJSXExpressionContainer = function(node, opts) {
					assert$21("JSXExpressionContainer", node, opts);
				}, exports$1.assertJSXFragment = function(node, opts) {
					assert$21("JSXFragment", node, opts);
				}, exports$1.assertJSXIdentifier = function(node, opts) {
					assert$21("JSXIdentifier", node, opts);
				}, exports$1.assertJSXMemberExpression = function(node, opts) {
					assert$21("JSXMemberExpression", node, opts);
				}, exports$1.assertJSXNamespacedName = function(node, opts) {
					assert$21("JSXNamespacedName", node, opts);
				}, exports$1.assertJSXOpeningElement = function(node, opts) {
					assert$21("JSXOpeningElement", node, opts);
				}, exports$1.assertJSXOpeningFragment = function(node, opts) {
					assert$21("JSXOpeningFragment", node, opts);
				}, exports$1.assertJSXSpreadAttribute = function(node, opts) {
					assert$21("JSXSpreadAttribute", node, opts);
				}, exports$1.assertJSXSpreadChild = function(node, opts) {
					assert$21("JSXSpreadChild", node, opts);
				}, exports$1.assertJSXText = function(node, opts) {
					assert$21("JSXText", node, opts);
				}, exports$1.assertLVal = function(node, opts) {
					assert$21("LVal", node, opts);
				}, exports$1.assertLabeledStatement = function(node, opts) {
					assert$21("LabeledStatement", node, opts);
				}, exports$1.assertLiteral = function(node, opts) {
					assert$21("Literal", node, opts);
				}, exports$1.assertLogicalExpression = function(node, opts) {
					assert$21("LogicalExpression", node, opts);
				}, exports$1.assertLoop = function(node, opts) {
					assert$21("Loop", node, opts);
				}, exports$1.assertMemberExpression = function(node, opts) {
					assert$21("MemberExpression", node, opts);
				}, exports$1.assertMetaProperty = function(node, opts) {
					assert$21("MetaProperty", node, opts);
				}, exports$1.assertMethod = function(node, opts) {
					assert$21("Method", node, opts);
				}, exports$1.assertMiscellaneous = function(node, opts) {
					assert$21("Miscellaneous", node, opts);
				}, exports$1.assertMixedTypeAnnotation = function(node, opts) {
					assert$21("MixedTypeAnnotation", node, opts);
				}, exports$1.assertModuleDeclaration = function(node, opts) {
					(0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration"), assert$21("ModuleDeclaration", node, opts);
				}, exports$1.assertModuleExpression = function(node, opts) {
					assert$21("ModuleExpression", node, opts);
				}, exports$1.assertModuleSpecifier = function(node, opts) {
					assert$21("ModuleSpecifier", node, opts);
				}, exports$1.assertNewExpression = function(node, opts) {
					assert$21("NewExpression", node, opts);
				}, exports$1.assertNoop = function(node, opts) {
					assert$21("Noop", node, opts);
				}, exports$1.assertNullLiteral = function(node, opts) {
					assert$21("NullLiteral", node, opts);
				}, exports$1.assertNullLiteralTypeAnnotation = function(node, opts) {
					assert$21("NullLiteralTypeAnnotation", node, opts);
				}, exports$1.assertNullableTypeAnnotation = function(node, opts) {
					assert$21("NullableTypeAnnotation", node, opts);
				}, exports$1.assertNumberLiteral = function(node, opts) {
					(0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral"), assert$21("NumberLiteral", node, opts);
				}, exports$1.assertNumberLiteralTypeAnnotation = function(node, opts) {
					assert$21("NumberLiteralTypeAnnotation", node, opts);
				}, exports$1.assertNumberTypeAnnotation = function(node, opts) {
					assert$21("NumberTypeAnnotation", node, opts);
				}, exports$1.assertNumericLiteral = function(node, opts) {
					assert$21("NumericLiteral", node, opts);
				}, exports$1.assertObjectExpression = function(node, opts) {
					assert$21("ObjectExpression", node, opts);
				}, exports$1.assertObjectMember = function(node, opts) {
					assert$21("ObjectMember", node, opts);
				}, exports$1.assertObjectMethod = function(node, opts) {
					assert$21("ObjectMethod", node, opts);
				}, exports$1.assertObjectPattern = function(node, opts) {
					assert$21("ObjectPattern", node, opts);
				}, exports$1.assertObjectProperty = function(node, opts) {
					assert$21("ObjectProperty", node, opts);
				}, exports$1.assertObjectTypeAnnotation = function(node, opts) {
					assert$21("ObjectTypeAnnotation", node, opts);
				}, exports$1.assertObjectTypeCallProperty = function(node, opts) {
					assert$21("ObjectTypeCallProperty", node, opts);
				}, exports$1.assertObjectTypeIndexer = function(node, opts) {
					assert$21("ObjectTypeIndexer", node, opts);
				}, exports$1.assertObjectTypeInternalSlot = function(node, opts) {
					assert$21("ObjectTypeInternalSlot", node, opts);
				}, exports$1.assertObjectTypeProperty = function(node, opts) {
					assert$21("ObjectTypeProperty", node, opts);
				}, exports$1.assertObjectTypeSpreadProperty = function(node, opts) {
					assert$21("ObjectTypeSpreadProperty", node, opts);
				}, exports$1.assertOpaqueType = function(node, opts) {
					assert$21("OpaqueType", node, opts);
				}, exports$1.assertOptionalCallExpression = function(node, opts) {
					assert$21("OptionalCallExpression", node, opts);
				}, exports$1.assertOptionalIndexedAccessType = function(node, opts) {
					assert$21("OptionalIndexedAccessType", node, opts);
				}, exports$1.assertOptionalMemberExpression = function(node, opts) {
					assert$21("OptionalMemberExpression", node, opts);
				}, exports$1.assertParenthesizedExpression = function(node, opts) {
					assert$21("ParenthesizedExpression", node, opts);
				}, exports$1.assertPattern = function(node, opts) {
					assert$21("Pattern", node, opts);
				}, exports$1.assertPatternLike = function(node, opts) {
					assert$21("PatternLike", node, opts);
				}, exports$1.assertPipelineBareFunction = function(node, opts) {
					assert$21("PipelineBareFunction", node, opts);
				}, exports$1.assertPipelinePrimaryTopicReference = function(node, opts) {
					assert$21("PipelinePrimaryTopicReference", node, opts);
				}, exports$1.assertPipelineTopicExpression = function(node, opts) {
					assert$21("PipelineTopicExpression", node, opts);
				}, exports$1.assertPlaceholder = function(node, opts) {
					assert$21("Placeholder", node, opts);
				}, exports$1.assertPrivate = function(node, opts) {
					assert$21("Private", node, opts);
				}, exports$1.assertPrivateName = function(node, opts) {
					assert$21("PrivateName", node, opts);
				}, exports$1.assertProgram = function(node, opts) {
					assert$21("Program", node, opts);
				}, exports$1.assertProperty = function(node, opts) {
					assert$21("Property", node, opts);
				}, exports$1.assertPureish = function(node, opts) {
					assert$21("Pureish", node, opts);
				}, exports$1.assertQualifiedTypeIdentifier = function(node, opts) {
					assert$21("QualifiedTypeIdentifier", node, opts);
				}, exports$1.assertRecordExpression = function(node, opts) {
					assert$21("RecordExpression", node, opts);
				}, exports$1.assertRegExpLiteral = function(node, opts) {
					assert$21("RegExpLiteral", node, opts);
				}, exports$1.assertRegexLiteral = function(node, opts) {
					(0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral"), assert$21("RegexLiteral", node, opts);
				}, exports$1.assertRestElement = function(node, opts) {
					assert$21("RestElement", node, opts);
				}, exports$1.assertRestProperty = function(node, opts) {
					(0, _deprecationWarning.default)("assertRestProperty", "assertRestElement"), assert$21("RestProperty", node, opts);
				}, exports$1.assertReturnStatement = function(node, opts) {
					assert$21("ReturnStatement", node, opts);
				}, exports$1.assertScopable = function(node, opts) {
					assert$21("Scopable", node, opts);
				}, exports$1.assertSequenceExpression = function(node, opts) {
					assert$21("SequenceExpression", node, opts);
				}, exports$1.assertSpreadElement = function(node, opts) {
					assert$21("SpreadElement", node, opts);
				}, exports$1.assertSpreadProperty = function(node, opts) {
					(0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement"), assert$21("SpreadProperty", node, opts);
				}, exports$1.assertStandardized = function(node, opts) {
					assert$21("Standardized", node, opts);
				}, exports$1.assertStatement = function(node, opts) {
					assert$21("Statement", node, opts);
				}, exports$1.assertStaticBlock = function(node, opts) {
					assert$21("StaticBlock", node, opts);
				}, exports$1.assertStringLiteral = function(node, opts) {
					assert$21("StringLiteral", node, opts);
				}, exports$1.assertStringLiteralTypeAnnotation = function(node, opts) {
					assert$21("StringLiteralTypeAnnotation", node, opts);
				}, exports$1.assertStringTypeAnnotation = function(node, opts) {
					assert$21("StringTypeAnnotation", node, opts);
				}, exports$1.assertSuper = function(node, opts) {
					assert$21("Super", node, opts);
				}, exports$1.assertSwitchCase = function(node, opts) {
					assert$21("SwitchCase", node, opts);
				}, exports$1.assertSwitchStatement = function(node, opts) {
					assert$21("SwitchStatement", node, opts);
				}, exports$1.assertSymbolTypeAnnotation = function(node, opts) {
					assert$21("SymbolTypeAnnotation", node, opts);
				}, exports$1.assertTSAnyKeyword = function(node, opts) {
					assert$21("TSAnyKeyword", node, opts);
				}, exports$1.assertTSArrayType = function(node, opts) {
					assert$21("TSArrayType", node, opts);
				}, exports$1.assertTSAsExpression = function(node, opts) {
					assert$21("TSAsExpression", node, opts);
				}, exports$1.assertTSBaseType = function(node, opts) {
					assert$21("TSBaseType", node, opts);
				}, exports$1.assertTSBigIntKeyword = function(node, opts) {
					assert$21("TSBigIntKeyword", node, opts);
				}, exports$1.assertTSBooleanKeyword = function(node, opts) {
					assert$21("TSBooleanKeyword", node, opts);
				}, exports$1.assertTSCallSignatureDeclaration = function(node, opts) {
					assert$21("TSCallSignatureDeclaration", node, opts);
				}, exports$1.assertTSConditionalType = function(node, opts) {
					assert$21("TSConditionalType", node, opts);
				}, exports$1.assertTSConstructSignatureDeclaration = function(node, opts) {
					assert$21("TSConstructSignatureDeclaration", node, opts);
				}, exports$1.assertTSConstructorType = function(node, opts) {
					assert$21("TSConstructorType", node, opts);
				}, exports$1.assertTSDeclareFunction = function(node, opts) {
					assert$21("TSDeclareFunction", node, opts);
				}, exports$1.assertTSDeclareMethod = function(node, opts) {
					assert$21("TSDeclareMethod", node, opts);
				}, exports$1.assertTSEntityName = function(node, opts) {
					assert$21("TSEntityName", node, opts);
				}, exports$1.assertTSEnumDeclaration = function(node, opts) {
					assert$21("TSEnumDeclaration", node, opts);
				}, exports$1.assertTSEnumMember = function(node, opts) {
					assert$21("TSEnumMember", node, opts);
				}, exports$1.assertTSExportAssignment = function(node, opts) {
					assert$21("TSExportAssignment", node, opts);
				}, exports$1.assertTSExpressionWithTypeArguments = function(node, opts) {
					assert$21("TSExpressionWithTypeArguments", node, opts);
				}, exports$1.assertTSExternalModuleReference = function(node, opts) {
					assert$21("TSExternalModuleReference", node, opts);
				}, exports$1.assertTSFunctionType = function(node, opts) {
					assert$21("TSFunctionType", node, opts);
				}, exports$1.assertTSImportEqualsDeclaration = function(node, opts) {
					assert$21("TSImportEqualsDeclaration", node, opts);
				}, exports$1.assertTSImportType = function(node, opts) {
					assert$21("TSImportType", node, opts);
				}, exports$1.assertTSIndexSignature = function(node, opts) {
					assert$21("TSIndexSignature", node, opts);
				}, exports$1.assertTSIndexedAccessType = function(node, opts) {
					assert$21("TSIndexedAccessType", node, opts);
				}, exports$1.assertTSInferType = function(node, opts) {
					assert$21("TSInferType", node, opts);
				}, exports$1.assertTSInstantiationExpression = function(node, opts) {
					assert$21("TSInstantiationExpression", node, opts);
				}, exports$1.assertTSInterfaceBody = function(node, opts) {
					assert$21("TSInterfaceBody", node, opts);
				}, exports$1.assertTSInterfaceDeclaration = function(node, opts) {
					assert$21("TSInterfaceDeclaration", node, opts);
				}, exports$1.assertTSIntersectionType = function(node, opts) {
					assert$21("TSIntersectionType", node, opts);
				}, exports$1.assertTSIntrinsicKeyword = function(node, opts) {
					assert$21("TSIntrinsicKeyword", node, opts);
				}, exports$1.assertTSLiteralType = function(node, opts) {
					assert$21("TSLiteralType", node, opts);
				}, exports$1.assertTSMappedType = function(node, opts) {
					assert$21("TSMappedType", node, opts);
				}, exports$1.assertTSMethodSignature = function(node, opts) {
					assert$21("TSMethodSignature", node, opts);
				}, exports$1.assertTSModuleBlock = function(node, opts) {
					assert$21("TSModuleBlock", node, opts);
				}, exports$1.assertTSModuleDeclaration = function(node, opts) {
					assert$21("TSModuleDeclaration", node, opts);
				}, exports$1.assertTSNamedTupleMember = function(node, opts) {
					assert$21("TSNamedTupleMember", node, opts);
				}, exports$1.assertTSNamespaceExportDeclaration = function(node, opts) {
					assert$21("TSNamespaceExportDeclaration", node, opts);
				}, exports$1.assertTSNeverKeyword = function(node, opts) {
					assert$21("TSNeverKeyword", node, opts);
				}, exports$1.assertTSNonNullExpression = function(node, opts) {
					assert$21("TSNonNullExpression", node, opts);
				}, exports$1.assertTSNullKeyword = function(node, opts) {
					assert$21("TSNullKeyword", node, opts);
				}, exports$1.assertTSNumberKeyword = function(node, opts) {
					assert$21("TSNumberKeyword", node, opts);
				}, exports$1.assertTSObjectKeyword = function(node, opts) {
					assert$21("TSObjectKeyword", node, opts);
				}, exports$1.assertTSOptionalType = function(node, opts) {
					assert$21("TSOptionalType", node, opts);
				}, exports$1.assertTSParameterProperty = function(node, opts) {
					assert$21("TSParameterProperty", node, opts);
				}, exports$1.assertTSParenthesizedType = function(node, opts) {
					assert$21("TSParenthesizedType", node, opts);
				}, exports$1.assertTSPropertySignature = function(node, opts) {
					assert$21("TSPropertySignature", node, opts);
				}, exports$1.assertTSQualifiedName = function(node, opts) {
					assert$21("TSQualifiedName", node, opts);
				}, exports$1.assertTSRestType = function(node, opts) {
					assert$21("TSRestType", node, opts);
				}, exports$1.assertTSSatisfiesExpression = function(node, opts) {
					assert$21("TSSatisfiesExpression", node, opts);
				}, exports$1.assertTSStringKeyword = function(node, opts) {
					assert$21("TSStringKeyword", node, opts);
				}, exports$1.assertTSSymbolKeyword = function(node, opts) {
					assert$21("TSSymbolKeyword", node, opts);
				}, exports$1.assertTSThisType = function(node, opts) {
					assert$21("TSThisType", node, opts);
				}, exports$1.assertTSTupleType = function(node, opts) {
					assert$21("TSTupleType", node, opts);
				}, exports$1.assertTSType = function(node, opts) {
					assert$21("TSType", node, opts);
				}, exports$1.assertTSTypeAliasDeclaration = function(node, opts) {
					assert$21("TSTypeAliasDeclaration", node, opts);
				}, exports$1.assertTSTypeAnnotation = function(node, opts) {
					assert$21("TSTypeAnnotation", node, opts);
				}, exports$1.assertTSTypeAssertion = function(node, opts) {
					assert$21("TSTypeAssertion", node, opts);
				}, exports$1.assertTSTypeElement = function(node, opts) {
					assert$21("TSTypeElement", node, opts);
				}, exports$1.assertTSTypeLiteral = function(node, opts) {
					assert$21("TSTypeLiteral", node, opts);
				}, exports$1.assertTSTypeOperator = function(node, opts) {
					assert$21("TSTypeOperator", node, opts);
				}, exports$1.assertTSTypeParameter = function(node, opts) {
					assert$21("TSTypeParameter", node, opts);
				}, exports$1.assertTSTypeParameterDeclaration = function(node, opts) {
					assert$21("TSTypeParameterDeclaration", node, opts);
				}, exports$1.assertTSTypeParameterInstantiation = function(node, opts) {
					assert$21("TSTypeParameterInstantiation", node, opts);
				}, exports$1.assertTSTypePredicate = function(node, opts) {
					assert$21("TSTypePredicate", node, opts);
				}, exports$1.assertTSTypeQuery = function(node, opts) {
					assert$21("TSTypeQuery", node, opts);
				}, exports$1.assertTSTypeReference = function(node, opts) {
					assert$21("TSTypeReference", node, opts);
				}, exports$1.assertTSUndefinedKeyword = function(node, opts) {
					assert$21("TSUndefinedKeyword", node, opts);
				}, exports$1.assertTSUnionType = function(node, opts) {
					assert$21("TSUnionType", node, opts);
				}, exports$1.assertTSUnknownKeyword = function(node, opts) {
					assert$21("TSUnknownKeyword", node, opts);
				}, exports$1.assertTSVoidKeyword = function(node, opts) {
					assert$21("TSVoidKeyword", node, opts);
				}, exports$1.assertTaggedTemplateExpression = function(node, opts) {
					assert$21("TaggedTemplateExpression", node, opts);
				}, exports$1.assertTemplateElement = function(node, opts) {
					assert$21("TemplateElement", node, opts);
				}, exports$1.assertTemplateLiteral = function(node, opts) {
					assert$21("TemplateLiteral", node, opts);
				}, exports$1.assertTerminatorless = function(node, opts) {
					assert$21("Terminatorless", node, opts);
				}, exports$1.assertThisExpression = function(node, opts) {
					assert$21("ThisExpression", node, opts);
				}, exports$1.assertThisTypeAnnotation = function(node, opts) {
					assert$21("ThisTypeAnnotation", node, opts);
				}, exports$1.assertThrowStatement = function(node, opts) {
					assert$21("ThrowStatement", node, opts);
				}, exports$1.assertTopicReference = function(node, opts) {
					assert$21("TopicReference", node, opts);
				}, exports$1.assertTryStatement = function(node, opts) {
					assert$21("TryStatement", node, opts);
				}, exports$1.assertTupleExpression = function(node, opts) {
					assert$21("TupleExpression", node, opts);
				}, exports$1.assertTupleTypeAnnotation = function(node, opts) {
					assert$21("TupleTypeAnnotation", node, opts);
				}, exports$1.assertTypeAlias = function(node, opts) {
					assert$21("TypeAlias", node, opts);
				}, exports$1.assertTypeAnnotation = function(node, opts) {
					assert$21("TypeAnnotation", node, opts);
				}, exports$1.assertTypeCastExpression = function(node, opts) {
					assert$21("TypeCastExpression", node, opts);
				}, exports$1.assertTypeParameter = function(node, opts) {
					assert$21("TypeParameter", node, opts);
				}, exports$1.assertTypeParameterDeclaration = function(node, opts) {
					assert$21("TypeParameterDeclaration", node, opts);
				}, exports$1.assertTypeParameterInstantiation = function(node, opts) {
					assert$21("TypeParameterInstantiation", node, opts);
				}, exports$1.assertTypeScript = function(node, opts) {
					assert$21("TypeScript", node, opts);
				}, exports$1.assertTypeofTypeAnnotation = function(node, opts) {
					assert$21("TypeofTypeAnnotation", node, opts);
				}, exports$1.assertUnaryExpression = function(node, opts) {
					assert$21("UnaryExpression", node, opts);
				}, exports$1.assertUnaryLike = function(node, opts) {
					assert$21("UnaryLike", node, opts);
				}, exports$1.assertUnionTypeAnnotation = function(node, opts) {
					assert$21("UnionTypeAnnotation", node, opts);
				}, exports$1.assertUpdateExpression = function(node, opts) {
					assert$21("UpdateExpression", node, opts);
				}, exports$1.assertUserWhitespacable = function(node, opts) {
					assert$21("UserWhitespacable", node, opts);
				}, exports$1.assertV8IntrinsicIdentifier = function(node, opts) {
					assert$21("V8IntrinsicIdentifier", node, opts);
				}, exports$1.assertVariableDeclaration = function(node, opts) {
					assert$21("VariableDeclaration", node, opts);
				}, exports$1.assertVariableDeclarator = function(node, opts) {
					assert$21("VariableDeclarator", node, opts);
				}, exports$1.assertVariance = function(node, opts) {
					assert$21("Variance", node, opts);
				}, exports$1.assertVoidTypeAnnotation = function(node, opts) {
					assert$21("VoidTypeAnnotation", node, opts);
				}, exports$1.assertWhile = function(node, opts) {
					assert$21("While", node, opts);
				}, exports$1.assertWhileStatement = function(node, opts) {
					assert$21("WhileStatement", node, opts);
				}, exports$1.assertWithStatement = function(node, opts) {
					assert$21("WithStatement", node, opts);
				}, exports$1.assertYieldExpression = function(node, opts) {
					assert$21("YieldExpression", node, opts);
				};
				var _is = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _deprecationWarning = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
				function assert$21(type$1, node, opts) {
					if (!(0, _is.default)(type$1, node, opts)) throw new Error(`Expected type "${type$1}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
				}
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(types$7) {
					const flattened = (0, _removeTypeDuplicates.default)(types$7);
					return 1 === flattened.length ? flattened[0] : (0, _index.unionTypeAnnotation)(flattened);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
				exports$1.default = function(type$1) {
					switch (type$1) {
						case "string": return (0, _index.stringTypeAnnotation)();
						case "number": return (0, _index.numberTypeAnnotation)();
						case "undefined": return (0, _index.voidTypeAnnotation)();
						case "boolean": return (0, _index.booleanTypeAnnotation)();
						case "function": return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
						case "object": return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
						case "symbol": return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
						case "bigint": return (0, _index.anyTypeAnnotation)();
					}
					throw new Error("Invalid typeof value: " + type$1);
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.anyTypeAnnotation = function() {
					return { type: "AnyTypeAnnotation" };
				}, exports$1.argumentPlaceholder = function() {
					return { type: "ArgumentPlaceholder" };
				}, exports$1.arrayExpression = function(elements = []) {
					const node = {
						type: "ArrayExpression",
						elements
					}, defs = NODE_FIELDS.ArrayExpression;
					return validate(defs.elements, node, "elements", elements, 1), node;
				}, exports$1.arrayPattern = function(elements) {
					const node = {
						type: "ArrayPattern",
						elements
					}, defs = NODE_FIELDS.ArrayPattern;
					return validate(defs.elements, node, "elements", elements, 1), node;
				}, exports$1.arrayTypeAnnotation = function(elementType) {
					const node = {
						type: "ArrayTypeAnnotation",
						elementType
					}, defs = NODE_FIELDS.ArrayTypeAnnotation;
					return validate(defs.elementType, node, "elementType", elementType, 1), node;
				}, exports$1.arrowFunctionExpression = function(params, body, async = !1) {
					const node = {
						type: "ArrowFunctionExpression",
						params,
						body,
						async,
						expression: null
					}, defs = NODE_FIELDS.ArrowFunctionExpression;
					return validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.async, node, "async", async), node;
				}, exports$1.assignmentExpression = function(operator, left, right) {
					const node = {
						type: "AssignmentExpression",
						operator,
						left,
						right
					}, defs = NODE_FIELDS.AssignmentExpression;
					return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
				}, exports$1.assignmentPattern = function(left, right) {
					const node = {
						type: "AssignmentPattern",
						left,
						right
					}, defs = NODE_FIELDS.AssignmentPattern;
					return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
				}, exports$1.awaitExpression = function(argument) {
					const node = {
						type: "AwaitExpression",
						argument
					}, defs = NODE_FIELDS.AwaitExpression;
					return validate(defs.argument, node, "argument", argument, 1), node;
				}, exports$1.bigIntLiteral = function(value$1) {
					const node = {
						type: "BigIntLiteral",
						value: value$1
					}, defs = NODE_FIELDS.BigIntLiteral;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.binaryExpression = function(operator, left, right) {
					const node = {
						type: "BinaryExpression",
						operator,
						left,
						right
					}, defs = NODE_FIELDS.BinaryExpression;
					return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
				}, exports$1.bindExpression = function(object, callee) {
					const node = {
						type: "BindExpression",
						object,
						callee
					}, defs = NODE_FIELDS.BindExpression;
					return validate(defs.object, node, "object", object, 1), validate(defs.callee, node, "callee", callee, 1), node;
				}, exports$1.blockStatement = function(body, directives = []) {
					const node = {
						type: "BlockStatement",
						body,
						directives
					}, defs = NODE_FIELDS.BlockStatement;
					return validate(defs.body, node, "body", body, 1), validate(defs.directives, node, "directives", directives, 1), node;
				}, exports$1.booleanLiteral = function(value$1) {
					const node = {
						type: "BooleanLiteral",
						value: value$1
					}, defs = NODE_FIELDS.BooleanLiteral;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.booleanLiteralTypeAnnotation = function(value$1) {
					const node = {
						type: "BooleanLiteralTypeAnnotation",
						value: value$1
					}, defs = NODE_FIELDS.BooleanLiteralTypeAnnotation;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.booleanTypeAnnotation = function() {
					return { type: "BooleanTypeAnnotation" };
				}, exports$1.breakStatement = function(label = null) {
					const node = {
						type: "BreakStatement",
						label
					}, defs = NODE_FIELDS.BreakStatement;
					return validate(defs.label, node, "label", label, 1), node;
				}, exports$1.callExpression = function(callee, _arguments) {
					const node = {
						type: "CallExpression",
						callee,
						arguments: _arguments
					}, defs = NODE_FIELDS.CallExpression;
					return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), node;
				}, exports$1.catchClause = function(param = null, body) {
					const node = {
						type: "CatchClause",
						param,
						body
					}, defs = NODE_FIELDS.CatchClause;
					return validate(defs.param, node, "param", param, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.classAccessorProperty = function(key, value$1 = null, typeAnnotation = null, decorators = null, computed = !1, _static = !1) {
					const node = {
						type: "ClassAccessorProperty",
						key,
						value: value$1,
						typeAnnotation,
						decorators,
						computed,
						static: _static
					}, defs = NODE_FIELDS.ClassAccessorProperty;
					return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value$1, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), node;
				}, exports$1.classBody = function(body) {
					const node = {
						type: "ClassBody",
						body
					}, defs = NODE_FIELDS.ClassBody;
					return validate(defs.body, node, "body", body, 1), node;
				}, exports$1.classDeclaration = function(id = null, superClass = null, body, decorators = null) {
					const node = {
						type: "ClassDeclaration",
						id,
						superClass,
						body,
						decorators
					}, defs = NODE_FIELDS.ClassDeclaration;
					return validate(defs.id, node, "id", id, 1), validate(defs.superClass, node, "superClass", superClass, 1), validate(defs.body, node, "body", body, 1), validate(defs.decorators, node, "decorators", decorators, 1), node;
				}, exports$1.classExpression = function(id = null, superClass = null, body, decorators = null) {
					const node = {
						type: "ClassExpression",
						id,
						superClass,
						body,
						decorators
					}, defs = NODE_FIELDS.ClassExpression;
					return validate(defs.id, node, "id", id, 1), validate(defs.superClass, node, "superClass", superClass, 1), validate(defs.body, node, "body", body, 1), validate(defs.decorators, node, "decorators", decorators, 1), node;
				}, exports$1.classImplements = function(id, typeParameters = null) {
					const node = {
						type: "ClassImplements",
						id,
						typeParameters
					}, defs = NODE_FIELDS.ClassImplements;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
				}, exports$1.classMethod = function(kind = "method", key, params, body, computed = !1, _static = !1, generator = !1, async = !1) {
					const node = {
						type: "ClassMethod",
						kind,
						key,
						params,
						body,
						computed,
						static: _static,
						generator,
						async
					}, defs = NODE_FIELDS.ClassMethod;
					return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
				}, exports$1.classPrivateMethod = function(kind = "method", key, params, body, _static = !1) {
					const node = {
						type: "ClassPrivateMethod",
						kind,
						key,
						params,
						body,
						static: _static
					}, defs = NODE_FIELDS.ClassPrivateMethod;
					return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.static, node, "static", _static), node;
				}, exports$1.classPrivateProperty = function(key, value$1 = null, decorators = null, _static = !1) {
					const node = {
						type: "ClassPrivateProperty",
						key,
						value: value$1,
						decorators,
						static: _static
					}, defs = NODE_FIELDS.ClassPrivateProperty;
					return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value$1, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.static, node, "static", _static), node;
				}, exports$1.classProperty = function(key, value$1 = null, typeAnnotation = null, decorators = null, computed = !1, _static = !1) {
					const node = {
						type: "ClassProperty",
						key,
						value: value$1,
						typeAnnotation,
						decorators,
						computed,
						static: _static
					}, defs = NODE_FIELDS.ClassProperty;
					return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value$1, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), node;
				}, exports$1.conditionalExpression = function(test, consequent, alternate) {
					const node = {
						type: "ConditionalExpression",
						test,
						consequent,
						alternate
					}, defs = NODE_FIELDS.ConditionalExpression;
					return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), validate(defs.alternate, node, "alternate", alternate, 1), node;
				}, exports$1.continueStatement = function(label = null) {
					const node = {
						type: "ContinueStatement",
						label
					}, defs = NODE_FIELDS.ContinueStatement;
					return validate(defs.label, node, "label", label, 1), node;
				}, exports$1.debuggerStatement = function() {
					return { type: "DebuggerStatement" };
				}, exports$1.decimalLiteral = function(value$1) {
					const node = {
						type: "DecimalLiteral",
						value: value$1
					}, defs = NODE_FIELDS.DecimalLiteral;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.declareClass = function(id, typeParameters = null, _extends = null, body) {
					const node = {
						type: "DeclareClass",
						id,
						typeParameters,
						extends: _extends,
						body
					}, defs = NODE_FIELDS.DeclareClass;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.declareExportAllDeclaration = function(source, attributes = null) {
					const node = {
						type: "DeclareExportAllDeclaration",
						source,
						attributes
					}, defs = NODE_FIELDS.DeclareExportAllDeclaration;
					return validate(defs.source, node, "source", source, 1), validate(defs.attributes, node, "attributes", attributes, 1), node;
				}, exports$1.declareExportDeclaration = function(declaration = null, specifiers = null, source = null, attributes = null) {
					const node = {
						type: "DeclareExportDeclaration",
						declaration,
						specifiers,
						source,
						attributes
					}, defs = NODE_FIELDS.DeclareExportDeclaration;
					return validate(defs.declaration, node, "declaration", declaration, 1), validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), validate(defs.attributes, node, "attributes", attributes, 1), node;
				}, exports$1.declareFunction = function(id) {
					const node = {
						type: "DeclareFunction",
						id
					}, defs = NODE_FIELDS.DeclareFunction;
					return validate(defs.id, node, "id", id, 1), node;
				}, exports$1.declareInterface = function(id, typeParameters = null, _extends = null, body) {
					const node = {
						type: "DeclareInterface",
						id,
						typeParameters,
						extends: _extends,
						body
					}, defs = NODE_FIELDS.DeclareInterface;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.declareModule = function(id, body, kind = null) {
					const node = {
						type: "DeclareModule",
						id,
						body,
						kind
					}, defs = NODE_FIELDS.DeclareModule;
					return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), validate(defs.kind, node, "kind", kind), node;
				}, exports$1.declareModuleExports = function(typeAnnotation) {
					const node = {
						type: "DeclareModuleExports",
						typeAnnotation
					}, defs = NODE_FIELDS.DeclareModuleExports;
					return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.declareOpaqueType = function(id, typeParameters = null, supertype = null) {
					const node = {
						type: "DeclareOpaqueType",
						id,
						typeParameters,
						supertype
					}, defs = NODE_FIELDS.DeclareOpaqueType;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.supertype, node, "supertype", supertype, 1), node;
				}, exports$1.declareTypeAlias = function(id, typeParameters = null, right) {
					const node = {
						type: "DeclareTypeAlias",
						id,
						typeParameters,
						right
					}, defs = NODE_FIELDS.DeclareTypeAlias;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.right, node, "right", right, 1), node;
				}, exports$1.declareVariable = function(id) {
					const node = {
						type: "DeclareVariable",
						id
					}, defs = NODE_FIELDS.DeclareVariable;
					return validate(defs.id, node, "id", id, 1), node;
				}, exports$1.declaredPredicate = function(value$1) {
					const node = {
						type: "DeclaredPredicate",
						value: value$1
					}, defs = NODE_FIELDS.DeclaredPredicate;
					return validate(defs.value, node, "value", value$1, 1), node;
				}, exports$1.decorator = function(expression) {
					const node = {
						type: "Decorator",
						expression
					}, defs = NODE_FIELDS.Decorator;
					return validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.directive = function(value$1) {
					const node = {
						type: "Directive",
						value: value$1
					}, defs = NODE_FIELDS.Directive;
					return validate(defs.value, node, "value", value$1, 1), node;
				}, exports$1.directiveLiteral = function(value$1) {
					const node = {
						type: "DirectiveLiteral",
						value: value$1
					}, defs = NODE_FIELDS.DirectiveLiteral;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.doExpression = function(body, async = !1) {
					const node = {
						type: "DoExpression",
						body,
						async
					}, defs = NODE_FIELDS.DoExpression;
					return validate(defs.body, node, "body", body, 1), validate(defs.async, node, "async", async), node;
				}, exports$1.doWhileStatement = function(test, body) {
					const node = {
						type: "DoWhileStatement",
						test,
						body
					}, defs = NODE_FIELDS.DoWhileStatement;
					return validate(defs.test, node, "test", test, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.emptyStatement = function() {
					return { type: "EmptyStatement" };
				}, exports$1.emptyTypeAnnotation = function() {
					return { type: "EmptyTypeAnnotation" };
				}, exports$1.enumBooleanBody = function(members) {
					const node = {
						type: "EnumBooleanBody",
						members,
						explicitType: null,
						hasUnknownMembers: null
					}, defs = NODE_FIELDS.EnumBooleanBody;
					return validate(defs.members, node, "members", members, 1), node;
				}, exports$1.enumBooleanMember = function(id) {
					const node = {
						type: "EnumBooleanMember",
						id,
						init: null
					}, defs = NODE_FIELDS.EnumBooleanMember;
					return validate(defs.id, node, "id", id, 1), node;
				}, exports$1.enumDeclaration = function(id, body) {
					const node = {
						type: "EnumDeclaration",
						id,
						body
					}, defs = NODE_FIELDS.EnumDeclaration;
					return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.enumDefaultedMember = function(id) {
					const node = {
						type: "EnumDefaultedMember",
						id
					}, defs = NODE_FIELDS.EnumDefaultedMember;
					return validate(defs.id, node, "id", id, 1), node;
				}, exports$1.enumNumberBody = function(members) {
					const node = {
						type: "EnumNumberBody",
						members,
						explicitType: null,
						hasUnknownMembers: null
					}, defs = NODE_FIELDS.EnumNumberBody;
					return validate(defs.members, node, "members", members, 1), node;
				}, exports$1.enumNumberMember = function(id, init$1) {
					const node = {
						type: "EnumNumberMember",
						id,
						init: init$1
					}, defs = NODE_FIELDS.EnumNumberMember;
					return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init$1, 1), node;
				}, exports$1.enumStringBody = function(members) {
					const node = {
						type: "EnumStringBody",
						members,
						explicitType: null,
						hasUnknownMembers: null
					}, defs = NODE_FIELDS.EnumStringBody;
					return validate(defs.members, node, "members", members, 1), node;
				}, exports$1.enumStringMember = function(id, init$1) {
					const node = {
						type: "EnumStringMember",
						id,
						init: init$1
					}, defs = NODE_FIELDS.EnumStringMember;
					return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init$1, 1), node;
				}, exports$1.enumSymbolBody = function(members) {
					const node = {
						type: "EnumSymbolBody",
						members,
						hasUnknownMembers: null
					}, defs = NODE_FIELDS.EnumSymbolBody;
					return validate(defs.members, node, "members", members, 1), node;
				}, exports$1.existsTypeAnnotation = function() {
					return { type: "ExistsTypeAnnotation" };
				}, exports$1.exportAllDeclaration = function(source) {
					const node = {
						type: "ExportAllDeclaration",
						source
					}, defs = NODE_FIELDS.ExportAllDeclaration;
					return validate(defs.source, node, "source", source, 1), node;
				}, exports$1.exportDefaultDeclaration = function(declaration) {
					const node = {
						type: "ExportDefaultDeclaration",
						declaration
					}, defs = NODE_FIELDS.ExportDefaultDeclaration;
					return validate(defs.declaration, node, "declaration", declaration, 1), node;
				}, exports$1.exportDefaultSpecifier = function(exported) {
					const node = {
						type: "ExportDefaultSpecifier",
						exported
					}, defs = NODE_FIELDS.ExportDefaultSpecifier;
					return validate(defs.exported, node, "exported", exported, 1), node;
				}, exports$1.exportNamedDeclaration = function(declaration = null, specifiers = [], source = null) {
					const node = {
						type: "ExportNamedDeclaration",
						declaration,
						specifiers,
						source
					}, defs = NODE_FIELDS.ExportNamedDeclaration;
					return validate(defs.declaration, node, "declaration", declaration, 1), validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), node;
				}, exports$1.exportNamespaceSpecifier = function(exported) {
					const node = {
						type: "ExportNamespaceSpecifier",
						exported
					}, defs = NODE_FIELDS.ExportNamespaceSpecifier;
					return validate(defs.exported, node, "exported", exported, 1), node;
				}, exports$1.exportSpecifier = function(local, exported) {
					const node = {
						type: "ExportSpecifier",
						local,
						exported
					}, defs = NODE_FIELDS.ExportSpecifier;
					return validate(defs.local, node, "local", local, 1), validate(defs.exported, node, "exported", exported, 1), node;
				}, exports$1.expressionStatement = function(expression) {
					const node = {
						type: "ExpressionStatement",
						expression
					}, defs = NODE_FIELDS.ExpressionStatement;
					return validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.file = function(program, comments = null, tokens = null) {
					const node = {
						type: "File",
						program,
						comments,
						tokens
					}, defs = NODE_FIELDS.File;
					return validate(defs.program, node, "program", program, 1), validate(defs.comments, node, "comments", comments, 1), validate(defs.tokens, node, "tokens", tokens), node;
				}, exports$1.forInStatement = function(left, right, body) {
					const node = {
						type: "ForInStatement",
						left,
						right,
						body
					}, defs = NODE_FIELDS.ForInStatement;
					return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.forOfStatement = function(left, right, body, _await = !1) {
					const node = {
						type: "ForOfStatement",
						left,
						right,
						body,
						await: _await
					}, defs = NODE_FIELDS.ForOfStatement;
					return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), validate(defs.body, node, "body", body, 1), validate(defs.await, node, "await", _await), node;
				}, exports$1.forStatement = function(init$1 = null, test = null, update = null, body) {
					const node = {
						type: "ForStatement",
						init: init$1,
						test,
						update,
						body
					}, defs = NODE_FIELDS.ForStatement;
					return validate(defs.init, node, "init", init$1, 1), validate(defs.test, node, "test", test, 1), validate(defs.update, node, "update", update, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.functionDeclaration = function(id = null, params, body, generator = !1, async = !1) {
					const node = {
						type: "FunctionDeclaration",
						id,
						params,
						body,
						generator,
						async
					}, defs = NODE_FIELDS.FunctionDeclaration;
					return validate(defs.id, node, "id", id, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
				}, exports$1.functionExpression = function(id = null, params, body, generator = !1, async = !1) {
					const node = {
						type: "FunctionExpression",
						id,
						params,
						body,
						generator,
						async
					}, defs = NODE_FIELDS.FunctionExpression;
					return validate(defs.id, node, "id", id, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
				}, exports$1.functionTypeAnnotation = function(typeParameters = null, params, rest = null, returnType) {
					const node = {
						type: "FunctionTypeAnnotation",
						typeParameters,
						params,
						rest,
						returnType
					}, defs = NODE_FIELDS.FunctionTypeAnnotation;
					return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.rest, node, "rest", rest, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
				}, exports$1.functionTypeParam = function(name = null, typeAnnotation) {
					const node = {
						type: "FunctionTypeParam",
						name,
						typeAnnotation
					}, defs = NODE_FIELDS.FunctionTypeParam;
					return validate(defs.name, node, "name", name, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.genericTypeAnnotation = function(id, typeParameters = null) {
					const node = {
						type: "GenericTypeAnnotation",
						id,
						typeParameters
					}, defs = NODE_FIELDS.GenericTypeAnnotation;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
				}, exports$1.identifier = function(name) {
					const node = {
						type: "Identifier",
						name
					}, defs = NODE_FIELDS.Identifier;
					return validate(defs.name, node, "name", name), node;
				}, exports$1.ifStatement = function(test, consequent, alternate = null) {
					const node = {
						type: "IfStatement",
						test,
						consequent,
						alternate
					}, defs = NODE_FIELDS.IfStatement;
					return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), validate(defs.alternate, node, "alternate", alternate, 1), node;
				}, exports$1.import = function() {
					return { type: "Import" };
				}, exports$1.importAttribute = function(key, value$1) {
					const node = {
						type: "ImportAttribute",
						key,
						value: value$1
					}, defs = NODE_FIELDS.ImportAttribute;
					return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value$1, 1), node;
				}, exports$1.importDeclaration = function(specifiers, source) {
					const node = {
						type: "ImportDeclaration",
						specifiers,
						source
					}, defs = NODE_FIELDS.ImportDeclaration;
					return validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), node;
				}, exports$1.importDefaultSpecifier = function(local) {
					const node = {
						type: "ImportDefaultSpecifier",
						local
					}, defs = NODE_FIELDS.ImportDefaultSpecifier;
					return validate(defs.local, node, "local", local, 1), node;
				}, exports$1.importExpression = function(source, options = null) {
					const node = {
						type: "ImportExpression",
						source,
						options
					}, defs = NODE_FIELDS.ImportExpression;
					return validate(defs.source, node, "source", source, 1), validate(defs.options, node, "options", options, 1), node;
				}, exports$1.importNamespaceSpecifier = function(local) {
					const node = {
						type: "ImportNamespaceSpecifier",
						local
					}, defs = NODE_FIELDS.ImportNamespaceSpecifier;
					return validate(defs.local, node, "local", local, 1), node;
				}, exports$1.importSpecifier = function(local, imported) {
					const node = {
						type: "ImportSpecifier",
						local,
						imported
					}, defs = NODE_FIELDS.ImportSpecifier;
					return validate(defs.local, node, "local", local, 1), validate(defs.imported, node, "imported", imported, 1), node;
				}, exports$1.indexedAccessType = function(objectType, indexType) {
					const node = {
						type: "IndexedAccessType",
						objectType,
						indexType
					}, defs = NODE_FIELDS.IndexedAccessType;
					return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
				}, exports$1.inferredPredicate = function() {
					return { type: "InferredPredicate" };
				}, exports$1.interfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
					const node = {
						type: "InterfaceDeclaration",
						id,
						typeParameters,
						extends: _extends,
						body
					}, defs = NODE_FIELDS.InterfaceDeclaration;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.interfaceExtends = function(id, typeParameters = null) {
					const node = {
						type: "InterfaceExtends",
						id,
						typeParameters
					}, defs = NODE_FIELDS.InterfaceExtends;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
				}, exports$1.interfaceTypeAnnotation = function(_extends = null, body) {
					const node = {
						type: "InterfaceTypeAnnotation",
						extends: _extends,
						body
					}, defs = NODE_FIELDS.InterfaceTypeAnnotation;
					return validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.interpreterDirective = function(value$1) {
					const node = {
						type: "InterpreterDirective",
						value: value$1
					}, defs = NODE_FIELDS.InterpreterDirective;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.intersectionTypeAnnotation = function(types$7) {
					const node = {
						type: "IntersectionTypeAnnotation",
						types: types$7
					}, defs = NODE_FIELDS.IntersectionTypeAnnotation;
					return validate(defs.types, node, "types", types$7, 1), node;
				}, exports$1.jSXAttribute = exports$1.jsxAttribute = function(name, value$1 = null) {
					const node = {
						type: "JSXAttribute",
						name,
						value: value$1
					}, defs = NODE_FIELDS.JSXAttribute;
					return validate(defs.name, node, "name", name, 1), validate(defs.value, node, "value", value$1, 1), node;
				}, exports$1.jSXClosingElement = exports$1.jsxClosingElement = function(name) {
					const node = {
						type: "JSXClosingElement",
						name
					}, defs = NODE_FIELDS.JSXClosingElement;
					return validate(defs.name, node, "name", name, 1), node;
				}, exports$1.jSXClosingFragment = exports$1.jsxClosingFragment = function() {
					return { type: "JSXClosingFragment" };
				}, exports$1.jSXElement = exports$1.jsxElement = function(openingElement, closingElement = null, children, selfClosing = null) {
					const node = {
						type: "JSXElement",
						openingElement,
						closingElement,
						children,
						selfClosing
					}, defs = NODE_FIELDS.JSXElement;
					return validate(defs.openingElement, node, "openingElement", openingElement, 1), validate(defs.closingElement, node, "closingElement", closingElement, 1), validate(defs.children, node, "children", children, 1), validate(defs.selfClosing, node, "selfClosing", selfClosing), node;
				}, exports$1.jSXEmptyExpression = exports$1.jsxEmptyExpression = function() {
					return { type: "JSXEmptyExpression" };
				}, exports$1.jSXExpressionContainer = exports$1.jsxExpressionContainer = function(expression) {
					const node = {
						type: "JSXExpressionContainer",
						expression
					}, defs = NODE_FIELDS.JSXExpressionContainer;
					return validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.jSXFragment = exports$1.jsxFragment = function(openingFragment, closingFragment, children) {
					const node = {
						type: "JSXFragment",
						openingFragment,
						closingFragment,
						children
					}, defs = NODE_FIELDS.JSXFragment;
					return validate(defs.openingFragment, node, "openingFragment", openingFragment, 1), validate(defs.closingFragment, node, "closingFragment", closingFragment, 1), validate(defs.children, node, "children", children, 1), node;
				}, exports$1.jSXIdentifier = exports$1.jsxIdentifier = function(name) {
					const node = {
						type: "JSXIdentifier",
						name
					}, defs = NODE_FIELDS.JSXIdentifier;
					return validate(defs.name, node, "name", name), node;
				}, exports$1.jSXMemberExpression = exports$1.jsxMemberExpression = function(object, property) {
					const node = {
						type: "JSXMemberExpression",
						object,
						property
					}, defs = NODE_FIELDS.JSXMemberExpression;
					return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), node;
				}, exports$1.jSXNamespacedName = exports$1.jsxNamespacedName = function(namespace, name) {
					const node = {
						type: "JSXNamespacedName",
						namespace,
						name
					}, defs = NODE_FIELDS.JSXNamespacedName;
					return validate(defs.namespace, node, "namespace", namespace, 1), validate(defs.name, node, "name", name, 1), node;
				}, exports$1.jSXOpeningElement = exports$1.jsxOpeningElement = function(name, attributes, selfClosing = !1) {
					const node = {
						type: "JSXOpeningElement",
						name,
						attributes,
						selfClosing
					}, defs = NODE_FIELDS.JSXOpeningElement;
					return validate(defs.name, node, "name", name, 1), validate(defs.attributes, node, "attributes", attributes, 1), validate(defs.selfClosing, node, "selfClosing", selfClosing), node;
				}, exports$1.jSXOpeningFragment = exports$1.jsxOpeningFragment = function() {
					return { type: "JSXOpeningFragment" };
				}, exports$1.jSXSpreadAttribute = exports$1.jsxSpreadAttribute = function(argument) {
					const node = {
						type: "JSXSpreadAttribute",
						argument
					}, defs = NODE_FIELDS.JSXSpreadAttribute;
					return validate(defs.argument, node, "argument", argument, 1), node;
				}, exports$1.jSXSpreadChild = exports$1.jsxSpreadChild = function(expression) {
					const node = {
						type: "JSXSpreadChild",
						expression
					}, defs = NODE_FIELDS.JSXSpreadChild;
					return validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.jSXText = exports$1.jsxText = function(value$1) {
					const node = {
						type: "JSXText",
						value: value$1
					}, defs = NODE_FIELDS.JSXText;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.labeledStatement = function(label, body) {
					const node = {
						type: "LabeledStatement",
						label,
						body
					}, defs = NODE_FIELDS.LabeledStatement;
					return validate(defs.label, node, "label", label, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.logicalExpression = function(operator, left, right) {
					const node = {
						type: "LogicalExpression",
						operator,
						left,
						right
					}, defs = NODE_FIELDS.LogicalExpression;
					return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
				}, exports$1.memberExpression = function(object, property, computed = !1, optional = null) {
					const node = {
						type: "MemberExpression",
						object,
						property,
						computed,
						optional
					}, defs = NODE_FIELDS.MemberExpression;
					return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), validate(defs.computed, node, "computed", computed), validate(defs.optional, node, "optional", optional), node;
				}, exports$1.metaProperty = function(meta, property) {
					const node = {
						type: "MetaProperty",
						meta,
						property
					}, defs = NODE_FIELDS.MetaProperty;
					return validate(defs.meta, node, "meta", meta, 1), validate(defs.property, node, "property", property, 1), node;
				}, exports$1.mixedTypeAnnotation = function() {
					return { type: "MixedTypeAnnotation" };
				}, exports$1.moduleExpression = function(body) {
					const node = {
						type: "ModuleExpression",
						body
					}, defs = NODE_FIELDS.ModuleExpression;
					return validate(defs.body, node, "body", body, 1), node;
				}, exports$1.newExpression = function(callee, _arguments) {
					const node = {
						type: "NewExpression",
						callee,
						arguments: _arguments
					}, defs = NODE_FIELDS.NewExpression;
					return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), node;
				}, exports$1.noop = function() {
					return { type: "Noop" };
				}, exports$1.nullLiteral = function() {
					return { type: "NullLiteral" };
				}, exports$1.nullLiteralTypeAnnotation = function() {
					return { type: "NullLiteralTypeAnnotation" };
				}, exports$1.nullableTypeAnnotation = function(typeAnnotation) {
					const node = {
						type: "NullableTypeAnnotation",
						typeAnnotation
					}, defs = NODE_FIELDS.NullableTypeAnnotation;
					return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.numberLiteral = function(value$1) {
					return (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type "), numericLiteral(value$1);
				}, exports$1.numberLiteralTypeAnnotation = function(value$1) {
					const node = {
						type: "NumberLiteralTypeAnnotation",
						value: value$1
					}, defs = NODE_FIELDS.NumberLiteralTypeAnnotation;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.numberTypeAnnotation = function() {
					return { type: "NumberTypeAnnotation" };
				}, exports$1.numericLiteral = numericLiteral, exports$1.objectExpression = function(properties) {
					const node = {
						type: "ObjectExpression",
						properties
					}, defs = NODE_FIELDS.ObjectExpression;
					return validate(defs.properties, node, "properties", properties, 1), node;
				}, exports$1.objectMethod = function(kind = "method", key, params, body, computed = !1, generator = !1, async = !1) {
					const node = {
						type: "ObjectMethod",
						kind,
						key,
						params,
						body,
						computed,
						generator,
						async
					}, defs = NODE_FIELDS.ObjectMethod;
					return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.computed, node, "computed", computed), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
				}, exports$1.objectPattern = function(properties) {
					const node = {
						type: "ObjectPattern",
						properties
					}, defs = NODE_FIELDS.ObjectPattern;
					return validate(defs.properties, node, "properties", properties, 1), node;
				}, exports$1.objectProperty = function(key, value$1, computed = !1, shorthand = !1, decorators = null) {
					const node = {
						type: "ObjectProperty",
						key,
						value: value$1,
						computed,
						shorthand,
						decorators
					}, defs = NODE_FIELDS.ObjectProperty;
					return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value$1, 1), validate(defs.computed, node, "computed", computed), validate(defs.shorthand, node, "shorthand", shorthand), validate(defs.decorators, node, "decorators", decorators, 1), node;
				}, exports$1.objectTypeAnnotation = function(properties, indexers = [], callProperties = [], internalSlots = [], exact = !1) {
					const node = {
						type: "ObjectTypeAnnotation",
						properties,
						indexers,
						callProperties,
						internalSlots,
						exact
					}, defs = NODE_FIELDS.ObjectTypeAnnotation;
					return validate(defs.properties, node, "properties", properties, 1), validate(defs.indexers, node, "indexers", indexers, 1), validate(defs.callProperties, node, "callProperties", callProperties, 1), validate(defs.internalSlots, node, "internalSlots", internalSlots, 1), validate(defs.exact, node, "exact", exact), node;
				}, exports$1.objectTypeCallProperty = function(value$1) {
					const node = {
						type: "ObjectTypeCallProperty",
						value: value$1,
						static: null
					}, defs = NODE_FIELDS.ObjectTypeCallProperty;
					return validate(defs.value, node, "value", value$1, 1), node;
				}, exports$1.objectTypeIndexer = function(id = null, key, value$1, variance = null) {
					const node = {
						type: "ObjectTypeIndexer",
						id,
						key,
						value: value$1,
						variance,
						static: null
					}, defs = NODE_FIELDS.ObjectTypeIndexer;
					return validate(defs.id, node, "id", id, 1), validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value$1, 1), validate(defs.variance, node, "variance", variance, 1), node;
				}, exports$1.objectTypeInternalSlot = function(id, value$1, optional, _static, method) {
					const node = {
						type: "ObjectTypeInternalSlot",
						id,
						value: value$1,
						optional,
						static: _static,
						method
					}, defs = NODE_FIELDS.ObjectTypeInternalSlot;
					return validate(defs.id, node, "id", id, 1), validate(defs.value, node, "value", value$1, 1), validate(defs.optional, node, "optional", optional), validate(defs.static, node, "static", _static), validate(defs.method, node, "method", method), node;
				}, exports$1.objectTypeProperty = function(key, value$1, variance = null) {
					const node = {
						type: "ObjectTypeProperty",
						key,
						value: value$1,
						variance,
						kind: null,
						method: null,
						optional: null,
						proto: null,
						static: null
					}, defs = NODE_FIELDS.ObjectTypeProperty;
					return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value$1, 1), validate(defs.variance, node, "variance", variance, 1), node;
				}, exports$1.objectTypeSpreadProperty = function(argument) {
					const node = {
						type: "ObjectTypeSpreadProperty",
						argument
					}, defs = NODE_FIELDS.ObjectTypeSpreadProperty;
					return validate(defs.argument, node, "argument", argument, 1), node;
				}, exports$1.opaqueType = function(id, typeParameters = null, supertype = null, impltype) {
					const node = {
						type: "OpaqueType",
						id,
						typeParameters,
						supertype,
						impltype
					}, defs = NODE_FIELDS.OpaqueType;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.supertype, node, "supertype", supertype, 1), validate(defs.impltype, node, "impltype", impltype, 1), node;
				}, exports$1.optionalCallExpression = function(callee, _arguments, optional) {
					const node = {
						type: "OptionalCallExpression",
						callee,
						arguments: _arguments,
						optional
					}, defs = NODE_FIELDS.OptionalCallExpression;
					return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), validate(defs.optional, node, "optional", optional), node;
				}, exports$1.optionalIndexedAccessType = function(objectType, indexType) {
					const node = {
						type: "OptionalIndexedAccessType",
						objectType,
						indexType,
						optional: null
					}, defs = NODE_FIELDS.OptionalIndexedAccessType;
					return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
				}, exports$1.optionalMemberExpression = function(object, property, computed = !1, optional) {
					const node = {
						type: "OptionalMemberExpression",
						object,
						property,
						computed,
						optional
					}, defs = NODE_FIELDS.OptionalMemberExpression;
					return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), validate(defs.computed, node, "computed", computed), validate(defs.optional, node, "optional", optional), node;
				}, exports$1.parenthesizedExpression = function(expression) {
					const node = {
						type: "ParenthesizedExpression",
						expression
					}, defs = NODE_FIELDS.ParenthesizedExpression;
					return validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.pipelineBareFunction = function(callee) {
					const node = {
						type: "PipelineBareFunction",
						callee
					}, defs = NODE_FIELDS.PipelineBareFunction;
					return validate(defs.callee, node, "callee", callee, 1), node;
				}, exports$1.pipelinePrimaryTopicReference = function() {
					return { type: "PipelinePrimaryTopicReference" };
				}, exports$1.pipelineTopicExpression = function(expression) {
					const node = {
						type: "PipelineTopicExpression",
						expression
					}, defs = NODE_FIELDS.PipelineTopicExpression;
					return validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.placeholder = function(expectedNode, name) {
					const node = {
						type: "Placeholder",
						expectedNode,
						name
					}, defs = NODE_FIELDS.Placeholder;
					return validate(defs.expectedNode, node, "expectedNode", expectedNode), validate(defs.name, node, "name", name, 1), node;
				}, exports$1.privateName = function(id) {
					const node = {
						type: "PrivateName",
						id
					}, defs = NODE_FIELDS.PrivateName;
					return validate(defs.id, node, "id", id, 1), node;
				}, exports$1.program = function(body, directives = [], sourceType = "script", interpreter = null) {
					const node = {
						type: "Program",
						body,
						directives,
						sourceType,
						interpreter
					}, defs = NODE_FIELDS.Program;
					return validate(defs.body, node, "body", body, 1), validate(defs.directives, node, "directives", directives, 1), validate(defs.sourceType, node, "sourceType", sourceType), validate(defs.interpreter, node, "interpreter", interpreter, 1), node;
				}, exports$1.qualifiedTypeIdentifier = function(id, qualification) {
					const node = {
						type: "QualifiedTypeIdentifier",
						id,
						qualification
					}, defs = NODE_FIELDS.QualifiedTypeIdentifier;
					return validate(defs.id, node, "id", id, 1), validate(defs.qualification, node, "qualification", qualification, 1), node;
				}, exports$1.recordExpression = function(properties) {
					const node = {
						type: "RecordExpression",
						properties
					}, defs = NODE_FIELDS.RecordExpression;
					return validate(defs.properties, node, "properties", properties, 1), node;
				}, exports$1.regExpLiteral = regExpLiteral, exports$1.regexLiteral = function(pattern, flags = "") {
					return (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type "), regExpLiteral(pattern, flags);
				}, exports$1.restElement = restElement, exports$1.restProperty = function(argument) {
					return (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type "), restElement(argument);
				}, exports$1.returnStatement = function(argument = null) {
					const node = {
						type: "ReturnStatement",
						argument
					}, defs = NODE_FIELDS.ReturnStatement;
					return validate(defs.argument, node, "argument", argument, 1), node;
				}, exports$1.sequenceExpression = function(expressions) {
					const node = {
						type: "SequenceExpression",
						expressions
					}, defs = NODE_FIELDS.SequenceExpression;
					return validate(defs.expressions, node, "expressions", expressions, 1), node;
				}, exports$1.spreadElement = spreadElement, exports$1.spreadProperty = function(argument) {
					return (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type "), spreadElement(argument);
				}, exports$1.staticBlock = function(body) {
					const node = {
						type: "StaticBlock",
						body
					}, defs = NODE_FIELDS.StaticBlock;
					return validate(defs.body, node, "body", body, 1), node;
				}, exports$1.stringLiteral = function(value$1) {
					const node = {
						type: "StringLiteral",
						value: value$1
					}, defs = NODE_FIELDS.StringLiteral;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.stringLiteralTypeAnnotation = function(value$1) {
					const node = {
						type: "StringLiteralTypeAnnotation",
						value: value$1
					}, defs = NODE_FIELDS.StringLiteralTypeAnnotation;
					return validate(defs.value, node, "value", value$1), node;
				}, exports$1.stringTypeAnnotation = function() {
					return { type: "StringTypeAnnotation" };
				}, exports$1.super = function() {
					return { type: "Super" };
				}, exports$1.switchCase = function(test = null, consequent) {
					const node = {
						type: "SwitchCase",
						test,
						consequent
					}, defs = NODE_FIELDS.SwitchCase;
					return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), node;
				}, exports$1.switchStatement = function(discriminant, cases) {
					const node = {
						type: "SwitchStatement",
						discriminant,
						cases
					}, defs = NODE_FIELDS.SwitchStatement;
					return validate(defs.discriminant, node, "discriminant", discriminant, 1), validate(defs.cases, node, "cases", cases, 1), node;
				}, exports$1.symbolTypeAnnotation = function() {
					return { type: "SymbolTypeAnnotation" };
				}, exports$1.taggedTemplateExpression = function(tag, quasi) {
					const node = {
						type: "TaggedTemplateExpression",
						tag,
						quasi
					}, defs = NODE_FIELDS.TaggedTemplateExpression;
					return validate(defs.tag, node, "tag", tag, 1), validate(defs.quasi, node, "quasi", quasi, 1), node;
				}, exports$1.templateElement = function(value$1, tail = !1) {
					const node = {
						type: "TemplateElement",
						value: value$1,
						tail
					}, defs = NODE_FIELDS.TemplateElement;
					return validate(defs.value, node, "value", value$1), validate(defs.tail, node, "tail", tail), node;
				}, exports$1.templateLiteral = function(quasis, expressions) {
					const node = {
						type: "TemplateLiteral",
						quasis,
						expressions
					}, defs = NODE_FIELDS.TemplateLiteral;
					return validate(defs.quasis, node, "quasis", quasis, 1), validate(defs.expressions, node, "expressions", expressions, 1), node;
				}, exports$1.thisExpression = function() {
					return { type: "ThisExpression" };
				}, exports$1.thisTypeAnnotation = function() {
					return { type: "ThisTypeAnnotation" };
				}, exports$1.throwStatement = function(argument) {
					const node = {
						type: "ThrowStatement",
						argument
					}, defs = NODE_FIELDS.ThrowStatement;
					return validate(defs.argument, node, "argument", argument, 1), node;
				}, exports$1.topicReference = function() {
					return { type: "TopicReference" };
				}, exports$1.tryStatement = function(block, handler = null, finalizer = null) {
					const node = {
						type: "TryStatement",
						block,
						handler,
						finalizer
					}, defs = NODE_FIELDS.TryStatement;
					return validate(defs.block, node, "block", block, 1), validate(defs.handler, node, "handler", handler, 1), validate(defs.finalizer, node, "finalizer", finalizer, 1), node;
				}, exports$1.tSAnyKeyword = exports$1.tsAnyKeyword = function() {
					return { type: "TSAnyKeyword" };
				}, exports$1.tSArrayType = exports$1.tsArrayType = function(elementType) {
					const node = {
						type: "TSArrayType",
						elementType
					}, defs = NODE_FIELDS.TSArrayType;
					return validate(defs.elementType, node, "elementType", elementType, 1), node;
				}, exports$1.tSAsExpression = exports$1.tsAsExpression = function(expression, typeAnnotation) {
					const node = {
						type: "TSAsExpression",
						expression,
						typeAnnotation
					}, defs = NODE_FIELDS.TSAsExpression;
					return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSBigIntKeyword = exports$1.tsBigIntKeyword = function() {
					return { type: "TSBigIntKeyword" };
				}, exports$1.tSBooleanKeyword = exports$1.tsBooleanKeyword = function() {
					return { type: "TSBooleanKeyword" };
				}, exports$1.tSCallSignatureDeclaration = exports$1.tsCallSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
					const node = {
						type: "TSCallSignatureDeclaration",
						typeParameters,
						parameters,
						typeAnnotation
					}, defs = NODE_FIELDS.TSCallSignatureDeclaration;
					return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSConditionalType = exports$1.tsConditionalType = function(checkType, extendsType, trueType, falseType) {
					const node = {
						type: "TSConditionalType",
						checkType,
						extendsType,
						trueType,
						falseType
					}, defs = NODE_FIELDS.TSConditionalType;
					return validate(defs.checkType, node, "checkType", checkType, 1), validate(defs.extendsType, node, "extendsType", extendsType, 1), validate(defs.trueType, node, "trueType", trueType, 1), validate(defs.falseType, node, "falseType", falseType, 1), node;
				}, exports$1.tSConstructSignatureDeclaration = exports$1.tsConstructSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
					const node = {
						type: "TSConstructSignatureDeclaration",
						typeParameters,
						parameters,
						typeAnnotation
					}, defs = NODE_FIELDS.TSConstructSignatureDeclaration;
					return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSConstructorType = exports$1.tsConstructorType = function(typeParameters = null, parameters, typeAnnotation = null) {
					const node = {
						type: "TSConstructorType",
						typeParameters,
						parameters,
						typeAnnotation
					}, defs = NODE_FIELDS.TSConstructorType;
					return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSDeclareFunction = exports$1.tsDeclareFunction = function(id = null, typeParameters = null, params, returnType = null) {
					const node = {
						type: "TSDeclareFunction",
						id,
						typeParameters,
						params,
						returnType
					}, defs = NODE_FIELDS.TSDeclareFunction;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
				}, exports$1.tSDeclareMethod = exports$1.tsDeclareMethod = function(decorators = null, key, typeParameters = null, params, returnType = null) {
					const node = {
						type: "TSDeclareMethod",
						decorators,
						key,
						typeParameters,
						params,
						returnType
					}, defs = NODE_FIELDS.TSDeclareMethod;
					return validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.key, node, "key", key, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
				}, exports$1.tSEnumDeclaration = exports$1.tsEnumDeclaration = function(id, members) {
					const node = {
						type: "TSEnumDeclaration",
						id,
						members
					}, defs = NODE_FIELDS.TSEnumDeclaration;
					return validate(defs.id, node, "id", id, 1), validate(defs.members, node, "members", members, 1), node;
				}, exports$1.tSEnumMember = exports$1.tsEnumMember = function(id, initializer = null) {
					const node = {
						type: "TSEnumMember",
						id,
						initializer
					}, defs = NODE_FIELDS.TSEnumMember;
					return validate(defs.id, node, "id", id, 1), validate(defs.initializer, node, "initializer", initializer, 1), node;
				}, exports$1.tSExportAssignment = exports$1.tsExportAssignment = function(expression) {
					const node = {
						type: "TSExportAssignment",
						expression
					}, defs = NODE_FIELDS.TSExportAssignment;
					return validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.tSExpressionWithTypeArguments = exports$1.tsExpressionWithTypeArguments = function(expression, typeParameters = null) {
					const node = {
						type: "TSExpressionWithTypeArguments",
						expression,
						typeParameters
					}, defs = NODE_FIELDS.TSExpressionWithTypeArguments;
					return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
				}, exports$1.tSExternalModuleReference = exports$1.tsExternalModuleReference = function(expression) {
					const node = {
						type: "TSExternalModuleReference",
						expression
					}, defs = NODE_FIELDS.TSExternalModuleReference;
					return validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.tSFunctionType = exports$1.tsFunctionType = function(typeParameters = null, parameters, typeAnnotation = null) {
					const node = {
						type: "TSFunctionType",
						typeParameters,
						parameters,
						typeAnnotation
					}, defs = NODE_FIELDS.TSFunctionType;
					return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSImportEqualsDeclaration = exports$1.tsImportEqualsDeclaration = function(id, moduleReference) {
					const node = {
						type: "TSImportEqualsDeclaration",
						id,
						moduleReference,
						isExport: null
					}, defs = NODE_FIELDS.TSImportEqualsDeclaration;
					return validate(defs.id, node, "id", id, 1), validate(defs.moduleReference, node, "moduleReference", moduleReference, 1), node;
				}, exports$1.tSImportType = exports$1.tsImportType = function(argument, qualifier = null, typeParameters = null) {
					const node = {
						type: "TSImportType",
						argument,
						qualifier,
						typeParameters
					}, defs = NODE_FIELDS.TSImportType;
					return validate(defs.argument, node, "argument", argument, 1), validate(defs.qualifier, node, "qualifier", qualifier, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
				}, exports$1.tSIndexSignature = exports$1.tsIndexSignature = function(parameters, typeAnnotation = null) {
					const node = {
						type: "TSIndexSignature",
						parameters,
						typeAnnotation
					}, defs = NODE_FIELDS.TSIndexSignature;
					return validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSIndexedAccessType = exports$1.tsIndexedAccessType = function(objectType, indexType) {
					const node = {
						type: "TSIndexedAccessType",
						objectType,
						indexType
					}, defs = NODE_FIELDS.TSIndexedAccessType;
					return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
				}, exports$1.tSInferType = exports$1.tsInferType = function(typeParameter) {
					const node = {
						type: "TSInferType",
						typeParameter
					}, defs = NODE_FIELDS.TSInferType;
					return validate(defs.typeParameter, node, "typeParameter", typeParameter, 1), node;
				}, exports$1.tSInstantiationExpression = exports$1.tsInstantiationExpression = function(expression, typeParameters = null) {
					const node = {
						type: "TSInstantiationExpression",
						expression,
						typeParameters
					}, defs = NODE_FIELDS.TSInstantiationExpression;
					return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
				}, exports$1.tSInterfaceBody = exports$1.tsInterfaceBody = function(body) {
					const node = {
						type: "TSInterfaceBody",
						body
					}, defs = NODE_FIELDS.TSInterfaceBody;
					return validate(defs.body, node, "body", body, 1), node;
				}, exports$1.tSInterfaceDeclaration = exports$1.tsInterfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
					const node = {
						type: "TSInterfaceDeclaration",
						id,
						typeParameters,
						extends: _extends,
						body
					}, defs = NODE_FIELDS.TSInterfaceDeclaration;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.tSIntersectionType = exports$1.tsIntersectionType = function(types$7) {
					const node = {
						type: "TSIntersectionType",
						types: types$7
					}, defs = NODE_FIELDS.TSIntersectionType;
					return validate(defs.types, node, "types", types$7, 1), node;
				}, exports$1.tSIntrinsicKeyword = exports$1.tsIntrinsicKeyword = function() {
					return { type: "TSIntrinsicKeyword" };
				}, exports$1.tSLiteralType = exports$1.tsLiteralType = function(literal) {
					const node = {
						type: "TSLiteralType",
						literal
					}, defs = NODE_FIELDS.TSLiteralType;
					return validate(defs.literal, node, "literal", literal, 1), node;
				}, exports$1.tSMappedType = exports$1.tsMappedType = function(typeParameter, typeAnnotation = null, nameType = null) {
					const node = {
						type: "TSMappedType",
						typeParameter,
						typeAnnotation,
						nameType
					}, defs = NODE_FIELDS.TSMappedType;
					return validate(defs.typeParameter, node, "typeParameter", typeParameter, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.nameType, node, "nameType", nameType, 1), node;
				}, exports$1.tSMethodSignature = exports$1.tsMethodSignature = function(key, typeParameters = null, parameters, typeAnnotation = null) {
					const node = {
						type: "TSMethodSignature",
						key,
						typeParameters,
						parameters,
						typeAnnotation,
						kind: null
					}, defs = NODE_FIELDS.TSMethodSignature;
					return validate(defs.key, node, "key", key, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSModuleBlock = exports$1.tsModuleBlock = function(body) {
					const node = {
						type: "TSModuleBlock",
						body
					}, defs = NODE_FIELDS.TSModuleBlock;
					return validate(defs.body, node, "body", body, 1), node;
				}, exports$1.tSModuleDeclaration = exports$1.tsModuleDeclaration = function(id, body) {
					const node = {
						type: "TSModuleDeclaration",
						id,
						body,
						kind: null
					}, defs = NODE_FIELDS.TSModuleDeclaration;
					return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.tSNamedTupleMember = exports$1.tsNamedTupleMember = function(label, elementType, optional = !1) {
					const node = {
						type: "TSNamedTupleMember",
						label,
						elementType,
						optional
					}, defs = NODE_FIELDS.TSNamedTupleMember;
					return validate(defs.label, node, "label", label, 1), validate(defs.elementType, node, "elementType", elementType, 1), validate(defs.optional, node, "optional", optional), node;
				}, exports$1.tSNamespaceExportDeclaration = exports$1.tsNamespaceExportDeclaration = function(id) {
					const node = {
						type: "TSNamespaceExportDeclaration",
						id
					}, defs = NODE_FIELDS.TSNamespaceExportDeclaration;
					return validate(defs.id, node, "id", id, 1), node;
				}, exports$1.tSNeverKeyword = exports$1.tsNeverKeyword = function() {
					return { type: "TSNeverKeyword" };
				}, exports$1.tSNonNullExpression = exports$1.tsNonNullExpression = function(expression) {
					const node = {
						type: "TSNonNullExpression",
						expression
					}, defs = NODE_FIELDS.TSNonNullExpression;
					return validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.tSNullKeyword = exports$1.tsNullKeyword = function() {
					return { type: "TSNullKeyword" };
				}, exports$1.tSNumberKeyword = exports$1.tsNumberKeyword = function() {
					return { type: "TSNumberKeyword" };
				}, exports$1.tSObjectKeyword = exports$1.tsObjectKeyword = function() {
					return { type: "TSObjectKeyword" };
				}, exports$1.tSOptionalType = exports$1.tsOptionalType = function(typeAnnotation) {
					const node = {
						type: "TSOptionalType",
						typeAnnotation
					}, defs = NODE_FIELDS.TSOptionalType;
					return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSParameterProperty = exports$1.tsParameterProperty = function(parameter) {
					const node = {
						type: "TSParameterProperty",
						parameter
					}, defs = NODE_FIELDS.TSParameterProperty;
					return validate(defs.parameter, node, "parameter", parameter, 1), node;
				}, exports$1.tSParenthesizedType = exports$1.tsParenthesizedType = function(typeAnnotation) {
					const node = {
						type: "TSParenthesizedType",
						typeAnnotation
					}, defs = NODE_FIELDS.TSParenthesizedType;
					return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSPropertySignature = exports$1.tsPropertySignature = function(key, typeAnnotation = null) {
					const node = {
						type: "TSPropertySignature",
						key,
						typeAnnotation,
						kind: null
					}, defs = NODE_FIELDS.TSPropertySignature;
					return validate(defs.key, node, "key", key, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSQualifiedName = exports$1.tsQualifiedName = function(left, right) {
					const node = {
						type: "TSQualifiedName",
						left,
						right
					}, defs = NODE_FIELDS.TSQualifiedName;
					return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
				}, exports$1.tSRestType = exports$1.tsRestType = function(typeAnnotation) {
					const node = {
						type: "TSRestType",
						typeAnnotation
					}, defs = NODE_FIELDS.TSRestType;
					return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSSatisfiesExpression = exports$1.tsSatisfiesExpression = function(expression, typeAnnotation) {
					const node = {
						type: "TSSatisfiesExpression",
						expression,
						typeAnnotation
					}, defs = NODE_FIELDS.TSSatisfiesExpression;
					return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSStringKeyword = exports$1.tsStringKeyword = function() {
					return { type: "TSStringKeyword" };
				}, exports$1.tSSymbolKeyword = exports$1.tsSymbolKeyword = function() {
					return { type: "TSSymbolKeyword" };
				}, exports$1.tSThisType = exports$1.tsThisType = function() {
					return { type: "TSThisType" };
				}, exports$1.tSTupleType = exports$1.tsTupleType = function(elementTypes) {
					const node = {
						type: "TSTupleType",
						elementTypes
					}, defs = NODE_FIELDS.TSTupleType;
					return validate(defs.elementTypes, node, "elementTypes", elementTypes, 1), node;
				}, exports$1.tSTypeAliasDeclaration = exports$1.tsTypeAliasDeclaration = function(id, typeParameters = null, typeAnnotation) {
					const node = {
						type: "TSTypeAliasDeclaration",
						id,
						typeParameters,
						typeAnnotation
					}, defs = NODE_FIELDS.TSTypeAliasDeclaration;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSTypeAnnotation = exports$1.tsTypeAnnotation = function(typeAnnotation) {
					const node = {
						type: "TSTypeAnnotation",
						typeAnnotation
					}, defs = NODE_FIELDS.TSTypeAnnotation;
					return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSTypeAssertion = exports$1.tsTypeAssertion = function(typeAnnotation, expression) {
					const node = {
						type: "TSTypeAssertion",
						typeAnnotation,
						expression
					}, defs = NODE_FIELDS.TSTypeAssertion;
					return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.expression, node, "expression", expression, 1), node;
				}, exports$1.tSTypeLiteral = exports$1.tsTypeLiteral = function(members) {
					const node = {
						type: "TSTypeLiteral",
						members
					}, defs = NODE_FIELDS.TSTypeLiteral;
					return validate(defs.members, node, "members", members, 1), node;
				}, exports$1.tSTypeOperator = exports$1.tsTypeOperator = function(typeAnnotation) {
					const node = {
						type: "TSTypeOperator",
						typeAnnotation,
						operator: null
					}, defs = NODE_FIELDS.TSTypeOperator;
					return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.tSTypeParameter = exports$1.tsTypeParameter = function(constraint = null, _default = null, name) {
					const node = {
						type: "TSTypeParameter",
						constraint,
						default: _default,
						name
					}, defs = NODE_FIELDS.TSTypeParameter;
					return validate(defs.constraint, node, "constraint", constraint, 1), validate(defs.default, node, "default", _default, 1), validate(defs.name, node, "name", name), node;
				}, exports$1.tSTypeParameterDeclaration = exports$1.tsTypeParameterDeclaration = function(params) {
					const node = {
						type: "TSTypeParameterDeclaration",
						params
					}, defs = NODE_FIELDS.TSTypeParameterDeclaration;
					return validate(defs.params, node, "params", params, 1), node;
				}, exports$1.tSTypeParameterInstantiation = exports$1.tsTypeParameterInstantiation = function(params) {
					const node = {
						type: "TSTypeParameterInstantiation",
						params
					}, defs = NODE_FIELDS.TSTypeParameterInstantiation;
					return validate(defs.params, node, "params", params, 1), node;
				}, exports$1.tSTypePredicate = exports$1.tsTypePredicate = function(parameterName, typeAnnotation = null, asserts = null) {
					const node = {
						type: "TSTypePredicate",
						parameterName,
						typeAnnotation,
						asserts
					}, defs = NODE_FIELDS.TSTypePredicate;
					return validate(defs.parameterName, node, "parameterName", parameterName, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.asserts, node, "asserts", asserts), node;
				}, exports$1.tSTypeQuery = exports$1.tsTypeQuery = function(exprName, typeParameters = null) {
					const node = {
						type: "TSTypeQuery",
						exprName,
						typeParameters
					}, defs = NODE_FIELDS.TSTypeQuery;
					return validate(defs.exprName, node, "exprName", exprName, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
				}, exports$1.tSTypeReference = exports$1.tsTypeReference = function(typeName, typeParameters = null) {
					const node = {
						type: "TSTypeReference",
						typeName,
						typeParameters
					}, defs = NODE_FIELDS.TSTypeReference;
					return validate(defs.typeName, node, "typeName", typeName, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
				}, exports$1.tSUndefinedKeyword = exports$1.tsUndefinedKeyword = function() {
					return { type: "TSUndefinedKeyword" };
				}, exports$1.tSUnionType = exports$1.tsUnionType = function(types$7) {
					const node = {
						type: "TSUnionType",
						types: types$7
					}, defs = NODE_FIELDS.TSUnionType;
					return validate(defs.types, node, "types", types$7, 1), node;
				}, exports$1.tSUnknownKeyword = exports$1.tsUnknownKeyword = function() {
					return { type: "TSUnknownKeyword" };
				}, exports$1.tSVoidKeyword = exports$1.tsVoidKeyword = function() {
					return { type: "TSVoidKeyword" };
				}, exports$1.tupleExpression = function(elements = []) {
					const node = {
						type: "TupleExpression",
						elements
					}, defs = NODE_FIELDS.TupleExpression;
					return validate(defs.elements, node, "elements", elements, 1), node;
				}, exports$1.tupleTypeAnnotation = function(types$7) {
					const node = {
						type: "TupleTypeAnnotation",
						types: types$7
					}, defs = NODE_FIELDS.TupleTypeAnnotation;
					return validate(defs.types, node, "types", types$7, 1), node;
				}, exports$1.typeAlias = function(id, typeParameters = null, right) {
					const node = {
						type: "TypeAlias",
						id,
						typeParameters,
						right
					}, defs = NODE_FIELDS.TypeAlias;
					return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.right, node, "right", right, 1), node;
				}, exports$1.typeAnnotation = function(typeAnnotation) {
					const node = {
						type: "TypeAnnotation",
						typeAnnotation
					}, defs = NODE_FIELDS.TypeAnnotation;
					return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.typeCastExpression = function(expression, typeAnnotation) {
					const node = {
						type: "TypeCastExpression",
						expression,
						typeAnnotation
					}, defs = NODE_FIELDS.TypeCastExpression;
					return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
				}, exports$1.typeParameter = function(bound = null, _default = null, variance = null) {
					const node = {
						type: "TypeParameter",
						bound,
						default: _default,
						variance,
						name: null
					}, defs = NODE_FIELDS.TypeParameter;
					return validate(defs.bound, node, "bound", bound, 1), validate(defs.default, node, "default", _default, 1), validate(defs.variance, node, "variance", variance, 1), node;
				}, exports$1.typeParameterDeclaration = function(params) {
					const node = {
						type: "TypeParameterDeclaration",
						params
					}, defs = NODE_FIELDS.TypeParameterDeclaration;
					return validate(defs.params, node, "params", params, 1), node;
				}, exports$1.typeParameterInstantiation = function(params) {
					const node = {
						type: "TypeParameterInstantiation",
						params
					}, defs = NODE_FIELDS.TypeParameterInstantiation;
					return validate(defs.params, node, "params", params, 1), node;
				}, exports$1.typeofTypeAnnotation = function(argument) {
					const node = {
						type: "TypeofTypeAnnotation",
						argument
					}, defs = NODE_FIELDS.TypeofTypeAnnotation;
					return validate(defs.argument, node, "argument", argument, 1), node;
				}, exports$1.unaryExpression = function(operator, argument, prefix = !0) {
					const node = {
						type: "UnaryExpression",
						operator,
						argument,
						prefix
					}, defs = NODE_FIELDS.UnaryExpression;
					return validate(defs.operator, node, "operator", operator), validate(defs.argument, node, "argument", argument, 1), validate(defs.prefix, node, "prefix", prefix), node;
				}, exports$1.unionTypeAnnotation = function(types$7) {
					const node = {
						type: "UnionTypeAnnotation",
						types: types$7
					}, defs = NODE_FIELDS.UnionTypeAnnotation;
					return validate(defs.types, node, "types", types$7, 1), node;
				}, exports$1.updateExpression = function(operator, argument, prefix = !1) {
					const node = {
						type: "UpdateExpression",
						operator,
						argument,
						prefix
					}, defs = NODE_FIELDS.UpdateExpression;
					return validate(defs.operator, node, "operator", operator), validate(defs.argument, node, "argument", argument, 1), validate(defs.prefix, node, "prefix", prefix), node;
				}, exports$1.v8IntrinsicIdentifier = function(name) {
					const node = {
						type: "V8IntrinsicIdentifier",
						name
					}, defs = NODE_FIELDS.V8IntrinsicIdentifier;
					return validate(defs.name, node, "name", name), node;
				}, exports$1.variableDeclaration = function(kind, declarations) {
					const node = {
						type: "VariableDeclaration",
						kind,
						declarations
					}, defs = NODE_FIELDS.VariableDeclaration;
					return validate(defs.kind, node, "kind", kind), validate(defs.declarations, node, "declarations", declarations, 1), node;
				}, exports$1.variableDeclarator = function(id, init$1 = null) {
					const node = {
						type: "VariableDeclarator",
						id,
						init: init$1
					}, defs = NODE_FIELDS.VariableDeclarator;
					return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init$1, 1), node;
				}, exports$1.variance = function(kind) {
					const node = {
						type: "Variance",
						kind
					}, defs = NODE_FIELDS.Variance;
					return validate(defs.kind, node, "kind", kind), node;
				}, exports$1.voidTypeAnnotation = function() {
					return { type: "VoidTypeAnnotation" };
				}, exports$1.whileStatement = function(test, body) {
					const node = {
						type: "WhileStatement",
						test,
						body
					}, defs = NODE_FIELDS.WhileStatement;
					return validate(defs.test, node, "test", test, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.withStatement = function(object, body) {
					const node = {
						type: "WithStatement",
						object,
						body
					}, defs = NODE_FIELDS.WithStatement;
					return validate(defs.object, node, "object", object, 1), validate(defs.body, node, "body", body, 1), node;
				}, exports$1.yieldExpression = function(argument = null, delegate = !1) {
					const node = {
						type: "YieldExpression",
						argument,
						delegate
					}, defs = NODE_FIELDS.YieldExpression;
					return validate(defs.argument, node, "argument", argument, 1), validate(defs.delegate, node, "delegate", delegate), node;
				};
				var _validate = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js"), _deprecationWarning = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js"), utils$3 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
				const { validateInternal: validate } = _validate, { NODE_FIELDS } = utils$3;
				function numericLiteral(value$1) {
					const node = {
						type: "NumericLiteral",
						value: value$1
					}, defs = NODE_FIELDS.NumericLiteral;
					return validate(defs.value, node, "value", value$1), node;
				}
				function regExpLiteral(pattern, flags = "") {
					const node = {
						type: "RegExpLiteral",
						pattern,
						flags
					}, defs = NODE_FIELDS.RegExpLiteral;
					return validate(defs.pattern, node, "pattern", pattern), validate(defs.flags, node, "flags", flags), node;
				}
				function restElement(argument) {
					const node = {
						type: "RestElement",
						argument
					}, defs = NODE_FIELDS.RestElement;
					return validate(defs.argument, node, "argument", argument, 1), node;
				}
				function spreadElement(argument) {
					const node = {
						type: "SpreadElement",
						argument
					}, defs = NODE_FIELDS.SpreadElement;
					return validate(defs.argument, node, "argument", argument, 1), node;
				}
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/uppercase.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), Object.defineProperty(exports$1, "AnyTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.anyTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "ArgumentPlaceholder", {
					enumerable: !0,
					get: function() {
						return _index.argumentPlaceholder;
					}
				}), Object.defineProperty(exports$1, "ArrayExpression", {
					enumerable: !0,
					get: function() {
						return _index.arrayExpression;
					}
				}), Object.defineProperty(exports$1, "ArrayPattern", {
					enumerable: !0,
					get: function() {
						return _index.arrayPattern;
					}
				}), Object.defineProperty(exports$1, "ArrayTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.arrayTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "ArrowFunctionExpression", {
					enumerable: !0,
					get: function() {
						return _index.arrowFunctionExpression;
					}
				}), Object.defineProperty(exports$1, "AssignmentExpression", {
					enumerable: !0,
					get: function() {
						return _index.assignmentExpression;
					}
				}), Object.defineProperty(exports$1, "AssignmentPattern", {
					enumerable: !0,
					get: function() {
						return _index.assignmentPattern;
					}
				}), Object.defineProperty(exports$1, "AwaitExpression", {
					enumerable: !0,
					get: function() {
						return _index.awaitExpression;
					}
				}), Object.defineProperty(exports$1, "BigIntLiteral", {
					enumerable: !0,
					get: function() {
						return _index.bigIntLiteral;
					}
				}), Object.defineProperty(exports$1, "BinaryExpression", {
					enumerable: !0,
					get: function() {
						return _index.binaryExpression;
					}
				}), Object.defineProperty(exports$1, "BindExpression", {
					enumerable: !0,
					get: function() {
						return _index.bindExpression;
					}
				}), Object.defineProperty(exports$1, "BlockStatement", {
					enumerable: !0,
					get: function() {
						return _index.blockStatement;
					}
				}), Object.defineProperty(exports$1, "BooleanLiteral", {
					enumerable: !0,
					get: function() {
						return _index.booleanLiteral;
					}
				}), Object.defineProperty(exports$1, "BooleanLiteralTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.booleanLiteralTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "BooleanTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.booleanTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "BreakStatement", {
					enumerable: !0,
					get: function() {
						return _index.breakStatement;
					}
				}), Object.defineProperty(exports$1, "CallExpression", {
					enumerable: !0,
					get: function() {
						return _index.callExpression;
					}
				}), Object.defineProperty(exports$1, "CatchClause", {
					enumerable: !0,
					get: function() {
						return _index.catchClause;
					}
				}), Object.defineProperty(exports$1, "ClassAccessorProperty", {
					enumerable: !0,
					get: function() {
						return _index.classAccessorProperty;
					}
				}), Object.defineProperty(exports$1, "ClassBody", {
					enumerable: !0,
					get: function() {
						return _index.classBody;
					}
				}), Object.defineProperty(exports$1, "ClassDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.classDeclaration;
					}
				}), Object.defineProperty(exports$1, "ClassExpression", {
					enumerable: !0,
					get: function() {
						return _index.classExpression;
					}
				}), Object.defineProperty(exports$1, "ClassImplements", {
					enumerable: !0,
					get: function() {
						return _index.classImplements;
					}
				}), Object.defineProperty(exports$1, "ClassMethod", {
					enumerable: !0,
					get: function() {
						return _index.classMethod;
					}
				}), Object.defineProperty(exports$1, "ClassPrivateMethod", {
					enumerable: !0,
					get: function() {
						return _index.classPrivateMethod;
					}
				}), Object.defineProperty(exports$1, "ClassPrivateProperty", {
					enumerable: !0,
					get: function() {
						return _index.classPrivateProperty;
					}
				}), Object.defineProperty(exports$1, "ClassProperty", {
					enumerable: !0,
					get: function() {
						return _index.classProperty;
					}
				}), Object.defineProperty(exports$1, "ConditionalExpression", {
					enumerable: !0,
					get: function() {
						return _index.conditionalExpression;
					}
				}), Object.defineProperty(exports$1, "ContinueStatement", {
					enumerable: !0,
					get: function() {
						return _index.continueStatement;
					}
				}), Object.defineProperty(exports$1, "DebuggerStatement", {
					enumerable: !0,
					get: function() {
						return _index.debuggerStatement;
					}
				}), Object.defineProperty(exports$1, "DecimalLiteral", {
					enumerable: !0,
					get: function() {
						return _index.decimalLiteral;
					}
				}), Object.defineProperty(exports$1, "DeclareClass", {
					enumerable: !0,
					get: function() {
						return _index.declareClass;
					}
				}), Object.defineProperty(exports$1, "DeclareExportAllDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.declareExportAllDeclaration;
					}
				}), Object.defineProperty(exports$1, "DeclareExportDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.declareExportDeclaration;
					}
				}), Object.defineProperty(exports$1, "DeclareFunction", {
					enumerable: !0,
					get: function() {
						return _index.declareFunction;
					}
				}), Object.defineProperty(exports$1, "DeclareInterface", {
					enumerable: !0,
					get: function() {
						return _index.declareInterface;
					}
				}), Object.defineProperty(exports$1, "DeclareModule", {
					enumerable: !0,
					get: function() {
						return _index.declareModule;
					}
				}), Object.defineProperty(exports$1, "DeclareModuleExports", {
					enumerable: !0,
					get: function() {
						return _index.declareModuleExports;
					}
				}), Object.defineProperty(exports$1, "DeclareOpaqueType", {
					enumerable: !0,
					get: function() {
						return _index.declareOpaqueType;
					}
				}), Object.defineProperty(exports$1, "DeclareTypeAlias", {
					enumerable: !0,
					get: function() {
						return _index.declareTypeAlias;
					}
				}), Object.defineProperty(exports$1, "DeclareVariable", {
					enumerable: !0,
					get: function() {
						return _index.declareVariable;
					}
				}), Object.defineProperty(exports$1, "DeclaredPredicate", {
					enumerable: !0,
					get: function() {
						return _index.declaredPredicate;
					}
				}), Object.defineProperty(exports$1, "Decorator", {
					enumerable: !0,
					get: function() {
						return _index.decorator;
					}
				}), Object.defineProperty(exports$1, "Directive", {
					enumerable: !0,
					get: function() {
						return _index.directive;
					}
				}), Object.defineProperty(exports$1, "DirectiveLiteral", {
					enumerable: !0,
					get: function() {
						return _index.directiveLiteral;
					}
				}), Object.defineProperty(exports$1, "DoExpression", {
					enumerable: !0,
					get: function() {
						return _index.doExpression;
					}
				}), Object.defineProperty(exports$1, "DoWhileStatement", {
					enumerable: !0,
					get: function() {
						return _index.doWhileStatement;
					}
				}), Object.defineProperty(exports$1, "EmptyStatement", {
					enumerable: !0,
					get: function() {
						return _index.emptyStatement;
					}
				}), Object.defineProperty(exports$1, "EmptyTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.emptyTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "EnumBooleanBody", {
					enumerable: !0,
					get: function() {
						return _index.enumBooleanBody;
					}
				}), Object.defineProperty(exports$1, "EnumBooleanMember", {
					enumerable: !0,
					get: function() {
						return _index.enumBooleanMember;
					}
				}), Object.defineProperty(exports$1, "EnumDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.enumDeclaration;
					}
				}), Object.defineProperty(exports$1, "EnumDefaultedMember", {
					enumerable: !0,
					get: function() {
						return _index.enumDefaultedMember;
					}
				}), Object.defineProperty(exports$1, "EnumNumberBody", {
					enumerable: !0,
					get: function() {
						return _index.enumNumberBody;
					}
				}), Object.defineProperty(exports$1, "EnumNumberMember", {
					enumerable: !0,
					get: function() {
						return _index.enumNumberMember;
					}
				}), Object.defineProperty(exports$1, "EnumStringBody", {
					enumerable: !0,
					get: function() {
						return _index.enumStringBody;
					}
				}), Object.defineProperty(exports$1, "EnumStringMember", {
					enumerable: !0,
					get: function() {
						return _index.enumStringMember;
					}
				}), Object.defineProperty(exports$1, "EnumSymbolBody", {
					enumerable: !0,
					get: function() {
						return _index.enumSymbolBody;
					}
				}), Object.defineProperty(exports$1, "ExistsTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.existsTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "ExportAllDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.exportAllDeclaration;
					}
				}), Object.defineProperty(exports$1, "ExportDefaultDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.exportDefaultDeclaration;
					}
				}), Object.defineProperty(exports$1, "ExportDefaultSpecifier", {
					enumerable: !0,
					get: function() {
						return _index.exportDefaultSpecifier;
					}
				}), Object.defineProperty(exports$1, "ExportNamedDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.exportNamedDeclaration;
					}
				}), Object.defineProperty(exports$1, "ExportNamespaceSpecifier", {
					enumerable: !0,
					get: function() {
						return _index.exportNamespaceSpecifier;
					}
				}), Object.defineProperty(exports$1, "ExportSpecifier", {
					enumerable: !0,
					get: function() {
						return _index.exportSpecifier;
					}
				}), Object.defineProperty(exports$1, "ExpressionStatement", {
					enumerable: !0,
					get: function() {
						return _index.expressionStatement;
					}
				}), Object.defineProperty(exports$1, "File", {
					enumerable: !0,
					get: function() {
						return _index.file;
					}
				}), Object.defineProperty(exports$1, "ForInStatement", {
					enumerable: !0,
					get: function() {
						return _index.forInStatement;
					}
				}), Object.defineProperty(exports$1, "ForOfStatement", {
					enumerable: !0,
					get: function() {
						return _index.forOfStatement;
					}
				}), Object.defineProperty(exports$1, "ForStatement", {
					enumerable: !0,
					get: function() {
						return _index.forStatement;
					}
				}), Object.defineProperty(exports$1, "FunctionDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.functionDeclaration;
					}
				}), Object.defineProperty(exports$1, "FunctionExpression", {
					enumerable: !0,
					get: function() {
						return _index.functionExpression;
					}
				}), Object.defineProperty(exports$1, "FunctionTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.functionTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "FunctionTypeParam", {
					enumerable: !0,
					get: function() {
						return _index.functionTypeParam;
					}
				}), Object.defineProperty(exports$1, "GenericTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.genericTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "Identifier", {
					enumerable: !0,
					get: function() {
						return _index.identifier;
					}
				}), Object.defineProperty(exports$1, "IfStatement", {
					enumerable: !0,
					get: function() {
						return _index.ifStatement;
					}
				}), Object.defineProperty(exports$1, "Import", {
					enumerable: !0,
					get: function() {
						return _index.import;
					}
				}), Object.defineProperty(exports$1, "ImportAttribute", {
					enumerable: !0,
					get: function() {
						return _index.importAttribute;
					}
				}), Object.defineProperty(exports$1, "ImportDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.importDeclaration;
					}
				}), Object.defineProperty(exports$1, "ImportDefaultSpecifier", {
					enumerable: !0,
					get: function() {
						return _index.importDefaultSpecifier;
					}
				}), Object.defineProperty(exports$1, "ImportExpression", {
					enumerable: !0,
					get: function() {
						return _index.importExpression;
					}
				}), Object.defineProperty(exports$1, "ImportNamespaceSpecifier", {
					enumerable: !0,
					get: function() {
						return _index.importNamespaceSpecifier;
					}
				}), Object.defineProperty(exports$1, "ImportSpecifier", {
					enumerable: !0,
					get: function() {
						return _index.importSpecifier;
					}
				}), Object.defineProperty(exports$1, "IndexedAccessType", {
					enumerable: !0,
					get: function() {
						return _index.indexedAccessType;
					}
				}), Object.defineProperty(exports$1, "InferredPredicate", {
					enumerable: !0,
					get: function() {
						return _index.inferredPredicate;
					}
				}), Object.defineProperty(exports$1, "InterfaceDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.interfaceDeclaration;
					}
				}), Object.defineProperty(exports$1, "InterfaceExtends", {
					enumerable: !0,
					get: function() {
						return _index.interfaceExtends;
					}
				}), Object.defineProperty(exports$1, "InterfaceTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.interfaceTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "InterpreterDirective", {
					enumerable: !0,
					get: function() {
						return _index.interpreterDirective;
					}
				}), Object.defineProperty(exports$1, "IntersectionTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.intersectionTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "JSXAttribute", {
					enumerable: !0,
					get: function() {
						return _index.jsxAttribute;
					}
				}), Object.defineProperty(exports$1, "JSXClosingElement", {
					enumerable: !0,
					get: function() {
						return _index.jsxClosingElement;
					}
				}), Object.defineProperty(exports$1, "JSXClosingFragment", {
					enumerable: !0,
					get: function() {
						return _index.jsxClosingFragment;
					}
				}), Object.defineProperty(exports$1, "JSXElement", {
					enumerable: !0,
					get: function() {
						return _index.jsxElement;
					}
				}), Object.defineProperty(exports$1, "JSXEmptyExpression", {
					enumerable: !0,
					get: function() {
						return _index.jsxEmptyExpression;
					}
				}), Object.defineProperty(exports$1, "JSXExpressionContainer", {
					enumerable: !0,
					get: function() {
						return _index.jsxExpressionContainer;
					}
				}), Object.defineProperty(exports$1, "JSXFragment", {
					enumerable: !0,
					get: function() {
						return _index.jsxFragment;
					}
				}), Object.defineProperty(exports$1, "JSXIdentifier", {
					enumerable: !0,
					get: function() {
						return _index.jsxIdentifier;
					}
				}), Object.defineProperty(exports$1, "JSXMemberExpression", {
					enumerable: !0,
					get: function() {
						return _index.jsxMemberExpression;
					}
				}), Object.defineProperty(exports$1, "JSXNamespacedName", {
					enumerable: !0,
					get: function() {
						return _index.jsxNamespacedName;
					}
				}), Object.defineProperty(exports$1, "JSXOpeningElement", {
					enumerable: !0,
					get: function() {
						return _index.jsxOpeningElement;
					}
				}), Object.defineProperty(exports$1, "JSXOpeningFragment", {
					enumerable: !0,
					get: function() {
						return _index.jsxOpeningFragment;
					}
				}), Object.defineProperty(exports$1, "JSXSpreadAttribute", {
					enumerable: !0,
					get: function() {
						return _index.jsxSpreadAttribute;
					}
				}), Object.defineProperty(exports$1, "JSXSpreadChild", {
					enumerable: !0,
					get: function() {
						return _index.jsxSpreadChild;
					}
				}), Object.defineProperty(exports$1, "JSXText", {
					enumerable: !0,
					get: function() {
						return _index.jsxText;
					}
				}), Object.defineProperty(exports$1, "LabeledStatement", {
					enumerable: !0,
					get: function() {
						return _index.labeledStatement;
					}
				}), Object.defineProperty(exports$1, "LogicalExpression", {
					enumerable: !0,
					get: function() {
						return _index.logicalExpression;
					}
				}), Object.defineProperty(exports$1, "MemberExpression", {
					enumerable: !0,
					get: function() {
						return _index.memberExpression;
					}
				}), Object.defineProperty(exports$1, "MetaProperty", {
					enumerable: !0,
					get: function() {
						return _index.metaProperty;
					}
				}), Object.defineProperty(exports$1, "MixedTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.mixedTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "ModuleExpression", {
					enumerable: !0,
					get: function() {
						return _index.moduleExpression;
					}
				}), Object.defineProperty(exports$1, "NewExpression", {
					enumerable: !0,
					get: function() {
						return _index.newExpression;
					}
				}), Object.defineProperty(exports$1, "Noop", {
					enumerable: !0,
					get: function() {
						return _index.noop;
					}
				}), Object.defineProperty(exports$1, "NullLiteral", {
					enumerable: !0,
					get: function() {
						return _index.nullLiteral;
					}
				}), Object.defineProperty(exports$1, "NullLiteralTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.nullLiteralTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "NullableTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.nullableTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "NumberLiteral", {
					enumerable: !0,
					get: function() {
						return _index.numberLiteral;
					}
				}), Object.defineProperty(exports$1, "NumberLiteralTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.numberLiteralTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "NumberTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.numberTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "NumericLiteral", {
					enumerable: !0,
					get: function() {
						return _index.numericLiteral;
					}
				}), Object.defineProperty(exports$1, "ObjectExpression", {
					enumerable: !0,
					get: function() {
						return _index.objectExpression;
					}
				}), Object.defineProperty(exports$1, "ObjectMethod", {
					enumerable: !0,
					get: function() {
						return _index.objectMethod;
					}
				}), Object.defineProperty(exports$1, "ObjectPattern", {
					enumerable: !0,
					get: function() {
						return _index.objectPattern;
					}
				}), Object.defineProperty(exports$1, "ObjectProperty", {
					enumerable: !0,
					get: function() {
						return _index.objectProperty;
					}
				}), Object.defineProperty(exports$1, "ObjectTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.objectTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "ObjectTypeCallProperty", {
					enumerable: !0,
					get: function() {
						return _index.objectTypeCallProperty;
					}
				}), Object.defineProperty(exports$1, "ObjectTypeIndexer", {
					enumerable: !0,
					get: function() {
						return _index.objectTypeIndexer;
					}
				}), Object.defineProperty(exports$1, "ObjectTypeInternalSlot", {
					enumerable: !0,
					get: function() {
						return _index.objectTypeInternalSlot;
					}
				}), Object.defineProperty(exports$1, "ObjectTypeProperty", {
					enumerable: !0,
					get: function() {
						return _index.objectTypeProperty;
					}
				}), Object.defineProperty(exports$1, "ObjectTypeSpreadProperty", {
					enumerable: !0,
					get: function() {
						return _index.objectTypeSpreadProperty;
					}
				}), Object.defineProperty(exports$1, "OpaqueType", {
					enumerable: !0,
					get: function() {
						return _index.opaqueType;
					}
				}), Object.defineProperty(exports$1, "OptionalCallExpression", {
					enumerable: !0,
					get: function() {
						return _index.optionalCallExpression;
					}
				}), Object.defineProperty(exports$1, "OptionalIndexedAccessType", {
					enumerable: !0,
					get: function() {
						return _index.optionalIndexedAccessType;
					}
				}), Object.defineProperty(exports$1, "OptionalMemberExpression", {
					enumerable: !0,
					get: function() {
						return _index.optionalMemberExpression;
					}
				}), Object.defineProperty(exports$1, "ParenthesizedExpression", {
					enumerable: !0,
					get: function() {
						return _index.parenthesizedExpression;
					}
				}), Object.defineProperty(exports$1, "PipelineBareFunction", {
					enumerable: !0,
					get: function() {
						return _index.pipelineBareFunction;
					}
				}), Object.defineProperty(exports$1, "PipelinePrimaryTopicReference", {
					enumerable: !0,
					get: function() {
						return _index.pipelinePrimaryTopicReference;
					}
				}), Object.defineProperty(exports$1, "PipelineTopicExpression", {
					enumerable: !0,
					get: function() {
						return _index.pipelineTopicExpression;
					}
				}), Object.defineProperty(exports$1, "Placeholder", {
					enumerable: !0,
					get: function() {
						return _index.placeholder;
					}
				}), Object.defineProperty(exports$1, "PrivateName", {
					enumerable: !0,
					get: function() {
						return _index.privateName;
					}
				}), Object.defineProperty(exports$1, "Program", {
					enumerable: !0,
					get: function() {
						return _index.program;
					}
				}), Object.defineProperty(exports$1, "QualifiedTypeIdentifier", {
					enumerable: !0,
					get: function() {
						return _index.qualifiedTypeIdentifier;
					}
				}), Object.defineProperty(exports$1, "RecordExpression", {
					enumerable: !0,
					get: function() {
						return _index.recordExpression;
					}
				}), Object.defineProperty(exports$1, "RegExpLiteral", {
					enumerable: !0,
					get: function() {
						return _index.regExpLiteral;
					}
				}), Object.defineProperty(exports$1, "RegexLiteral", {
					enumerable: !0,
					get: function() {
						return _index.regexLiteral;
					}
				}), Object.defineProperty(exports$1, "RestElement", {
					enumerable: !0,
					get: function() {
						return _index.restElement;
					}
				}), Object.defineProperty(exports$1, "RestProperty", {
					enumerable: !0,
					get: function() {
						return _index.restProperty;
					}
				}), Object.defineProperty(exports$1, "ReturnStatement", {
					enumerable: !0,
					get: function() {
						return _index.returnStatement;
					}
				}), Object.defineProperty(exports$1, "SequenceExpression", {
					enumerable: !0,
					get: function() {
						return _index.sequenceExpression;
					}
				}), Object.defineProperty(exports$1, "SpreadElement", {
					enumerable: !0,
					get: function() {
						return _index.spreadElement;
					}
				}), Object.defineProperty(exports$1, "SpreadProperty", {
					enumerable: !0,
					get: function() {
						return _index.spreadProperty;
					}
				}), Object.defineProperty(exports$1, "StaticBlock", {
					enumerable: !0,
					get: function() {
						return _index.staticBlock;
					}
				}), Object.defineProperty(exports$1, "StringLiteral", {
					enumerable: !0,
					get: function() {
						return _index.stringLiteral;
					}
				}), Object.defineProperty(exports$1, "StringLiteralTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.stringLiteralTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "StringTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.stringTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "Super", {
					enumerable: !0,
					get: function() {
						return _index.super;
					}
				}), Object.defineProperty(exports$1, "SwitchCase", {
					enumerable: !0,
					get: function() {
						return _index.switchCase;
					}
				}), Object.defineProperty(exports$1, "SwitchStatement", {
					enumerable: !0,
					get: function() {
						return _index.switchStatement;
					}
				}), Object.defineProperty(exports$1, "SymbolTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.symbolTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "TSAnyKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsAnyKeyword;
					}
				}), Object.defineProperty(exports$1, "TSArrayType", {
					enumerable: !0,
					get: function() {
						return _index.tsArrayType;
					}
				}), Object.defineProperty(exports$1, "TSAsExpression", {
					enumerable: !0,
					get: function() {
						return _index.tsAsExpression;
					}
				}), Object.defineProperty(exports$1, "TSBigIntKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsBigIntKeyword;
					}
				}), Object.defineProperty(exports$1, "TSBooleanKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsBooleanKeyword;
					}
				}), Object.defineProperty(exports$1, "TSCallSignatureDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.tsCallSignatureDeclaration;
					}
				}), Object.defineProperty(exports$1, "TSConditionalType", {
					enumerable: !0,
					get: function() {
						return _index.tsConditionalType;
					}
				}), Object.defineProperty(exports$1, "TSConstructSignatureDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.tsConstructSignatureDeclaration;
					}
				}), Object.defineProperty(exports$1, "TSConstructorType", {
					enumerable: !0,
					get: function() {
						return _index.tsConstructorType;
					}
				}), Object.defineProperty(exports$1, "TSDeclareFunction", {
					enumerable: !0,
					get: function() {
						return _index.tsDeclareFunction;
					}
				}), Object.defineProperty(exports$1, "TSDeclareMethod", {
					enumerable: !0,
					get: function() {
						return _index.tsDeclareMethod;
					}
				}), Object.defineProperty(exports$1, "TSEnumDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.tsEnumDeclaration;
					}
				}), Object.defineProperty(exports$1, "TSEnumMember", {
					enumerable: !0,
					get: function() {
						return _index.tsEnumMember;
					}
				}), Object.defineProperty(exports$1, "TSExportAssignment", {
					enumerable: !0,
					get: function() {
						return _index.tsExportAssignment;
					}
				}), Object.defineProperty(exports$1, "TSExpressionWithTypeArguments", {
					enumerable: !0,
					get: function() {
						return _index.tsExpressionWithTypeArguments;
					}
				}), Object.defineProperty(exports$1, "TSExternalModuleReference", {
					enumerable: !0,
					get: function() {
						return _index.tsExternalModuleReference;
					}
				}), Object.defineProperty(exports$1, "TSFunctionType", {
					enumerable: !0,
					get: function() {
						return _index.tsFunctionType;
					}
				}), Object.defineProperty(exports$1, "TSImportEqualsDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.tsImportEqualsDeclaration;
					}
				}), Object.defineProperty(exports$1, "TSImportType", {
					enumerable: !0,
					get: function() {
						return _index.tsImportType;
					}
				}), Object.defineProperty(exports$1, "TSIndexSignature", {
					enumerable: !0,
					get: function() {
						return _index.tsIndexSignature;
					}
				}), Object.defineProperty(exports$1, "TSIndexedAccessType", {
					enumerable: !0,
					get: function() {
						return _index.tsIndexedAccessType;
					}
				}), Object.defineProperty(exports$1, "TSInferType", {
					enumerable: !0,
					get: function() {
						return _index.tsInferType;
					}
				}), Object.defineProperty(exports$1, "TSInstantiationExpression", {
					enumerable: !0,
					get: function() {
						return _index.tsInstantiationExpression;
					}
				}), Object.defineProperty(exports$1, "TSInterfaceBody", {
					enumerable: !0,
					get: function() {
						return _index.tsInterfaceBody;
					}
				}), Object.defineProperty(exports$1, "TSInterfaceDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.tsInterfaceDeclaration;
					}
				}), Object.defineProperty(exports$1, "TSIntersectionType", {
					enumerable: !0,
					get: function() {
						return _index.tsIntersectionType;
					}
				}), Object.defineProperty(exports$1, "TSIntrinsicKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsIntrinsicKeyword;
					}
				}), Object.defineProperty(exports$1, "TSLiteralType", {
					enumerable: !0,
					get: function() {
						return _index.tsLiteralType;
					}
				}), Object.defineProperty(exports$1, "TSMappedType", {
					enumerable: !0,
					get: function() {
						return _index.tsMappedType;
					}
				}), Object.defineProperty(exports$1, "TSMethodSignature", {
					enumerable: !0,
					get: function() {
						return _index.tsMethodSignature;
					}
				}), Object.defineProperty(exports$1, "TSModuleBlock", {
					enumerable: !0,
					get: function() {
						return _index.tsModuleBlock;
					}
				}), Object.defineProperty(exports$1, "TSModuleDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.tsModuleDeclaration;
					}
				}), Object.defineProperty(exports$1, "TSNamedTupleMember", {
					enumerable: !0,
					get: function() {
						return _index.tsNamedTupleMember;
					}
				}), Object.defineProperty(exports$1, "TSNamespaceExportDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.tsNamespaceExportDeclaration;
					}
				}), Object.defineProperty(exports$1, "TSNeverKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsNeverKeyword;
					}
				}), Object.defineProperty(exports$1, "TSNonNullExpression", {
					enumerable: !0,
					get: function() {
						return _index.tsNonNullExpression;
					}
				}), Object.defineProperty(exports$1, "TSNullKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsNullKeyword;
					}
				}), Object.defineProperty(exports$1, "TSNumberKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsNumberKeyword;
					}
				}), Object.defineProperty(exports$1, "TSObjectKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsObjectKeyword;
					}
				}), Object.defineProperty(exports$1, "TSOptionalType", {
					enumerable: !0,
					get: function() {
						return _index.tsOptionalType;
					}
				}), Object.defineProperty(exports$1, "TSParameterProperty", {
					enumerable: !0,
					get: function() {
						return _index.tsParameterProperty;
					}
				}), Object.defineProperty(exports$1, "TSParenthesizedType", {
					enumerable: !0,
					get: function() {
						return _index.tsParenthesizedType;
					}
				}), Object.defineProperty(exports$1, "TSPropertySignature", {
					enumerable: !0,
					get: function() {
						return _index.tsPropertySignature;
					}
				}), Object.defineProperty(exports$1, "TSQualifiedName", {
					enumerable: !0,
					get: function() {
						return _index.tsQualifiedName;
					}
				}), Object.defineProperty(exports$1, "TSRestType", {
					enumerable: !0,
					get: function() {
						return _index.tsRestType;
					}
				}), Object.defineProperty(exports$1, "TSSatisfiesExpression", {
					enumerable: !0,
					get: function() {
						return _index.tsSatisfiesExpression;
					}
				}), Object.defineProperty(exports$1, "TSStringKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsStringKeyword;
					}
				}), Object.defineProperty(exports$1, "TSSymbolKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsSymbolKeyword;
					}
				}), Object.defineProperty(exports$1, "TSThisType", {
					enumerable: !0,
					get: function() {
						return _index.tsThisType;
					}
				}), Object.defineProperty(exports$1, "TSTupleType", {
					enumerable: !0,
					get: function() {
						return _index.tsTupleType;
					}
				}), Object.defineProperty(exports$1, "TSTypeAliasDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeAliasDeclaration;
					}
				}), Object.defineProperty(exports$1, "TSTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "TSTypeAssertion", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeAssertion;
					}
				}), Object.defineProperty(exports$1, "TSTypeLiteral", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeLiteral;
					}
				}), Object.defineProperty(exports$1, "TSTypeOperator", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeOperator;
					}
				}), Object.defineProperty(exports$1, "TSTypeParameter", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeParameter;
					}
				}), Object.defineProperty(exports$1, "TSTypeParameterDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeParameterDeclaration;
					}
				}), Object.defineProperty(exports$1, "TSTypeParameterInstantiation", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeParameterInstantiation;
					}
				}), Object.defineProperty(exports$1, "TSTypePredicate", {
					enumerable: !0,
					get: function() {
						return _index.tsTypePredicate;
					}
				}), Object.defineProperty(exports$1, "TSTypeQuery", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeQuery;
					}
				}), Object.defineProperty(exports$1, "TSTypeReference", {
					enumerable: !0,
					get: function() {
						return _index.tsTypeReference;
					}
				}), Object.defineProperty(exports$1, "TSUndefinedKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsUndefinedKeyword;
					}
				}), Object.defineProperty(exports$1, "TSUnionType", {
					enumerable: !0,
					get: function() {
						return _index.tsUnionType;
					}
				}), Object.defineProperty(exports$1, "TSUnknownKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsUnknownKeyword;
					}
				}), Object.defineProperty(exports$1, "TSVoidKeyword", {
					enumerable: !0,
					get: function() {
						return _index.tsVoidKeyword;
					}
				}), Object.defineProperty(exports$1, "TaggedTemplateExpression", {
					enumerable: !0,
					get: function() {
						return _index.taggedTemplateExpression;
					}
				}), Object.defineProperty(exports$1, "TemplateElement", {
					enumerable: !0,
					get: function() {
						return _index.templateElement;
					}
				}), Object.defineProperty(exports$1, "TemplateLiteral", {
					enumerable: !0,
					get: function() {
						return _index.templateLiteral;
					}
				}), Object.defineProperty(exports$1, "ThisExpression", {
					enumerable: !0,
					get: function() {
						return _index.thisExpression;
					}
				}), Object.defineProperty(exports$1, "ThisTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.thisTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "ThrowStatement", {
					enumerable: !0,
					get: function() {
						return _index.throwStatement;
					}
				}), Object.defineProperty(exports$1, "TopicReference", {
					enumerable: !0,
					get: function() {
						return _index.topicReference;
					}
				}), Object.defineProperty(exports$1, "TryStatement", {
					enumerable: !0,
					get: function() {
						return _index.tryStatement;
					}
				}), Object.defineProperty(exports$1, "TupleExpression", {
					enumerable: !0,
					get: function() {
						return _index.tupleExpression;
					}
				}), Object.defineProperty(exports$1, "TupleTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.tupleTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "TypeAlias", {
					enumerable: !0,
					get: function() {
						return _index.typeAlias;
					}
				}), Object.defineProperty(exports$1, "TypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.typeAnnotation;
					}
				}), Object.defineProperty(exports$1, "TypeCastExpression", {
					enumerable: !0,
					get: function() {
						return _index.typeCastExpression;
					}
				}), Object.defineProperty(exports$1, "TypeParameter", {
					enumerable: !0,
					get: function() {
						return _index.typeParameter;
					}
				}), Object.defineProperty(exports$1, "TypeParameterDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.typeParameterDeclaration;
					}
				}), Object.defineProperty(exports$1, "TypeParameterInstantiation", {
					enumerable: !0,
					get: function() {
						return _index.typeParameterInstantiation;
					}
				}), Object.defineProperty(exports$1, "TypeofTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.typeofTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "UnaryExpression", {
					enumerable: !0,
					get: function() {
						return _index.unaryExpression;
					}
				}), Object.defineProperty(exports$1, "UnionTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.unionTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "UpdateExpression", {
					enumerable: !0,
					get: function() {
						return _index.updateExpression;
					}
				}), Object.defineProperty(exports$1, "V8IntrinsicIdentifier", {
					enumerable: !0,
					get: function() {
						return _index.v8IntrinsicIdentifier;
					}
				}), Object.defineProperty(exports$1, "VariableDeclaration", {
					enumerable: !0,
					get: function() {
						return _index.variableDeclaration;
					}
				}), Object.defineProperty(exports$1, "VariableDeclarator", {
					enumerable: !0,
					get: function() {
						return _index.variableDeclarator;
					}
				}), Object.defineProperty(exports$1, "Variance", {
					enumerable: !0,
					get: function() {
						return _index.variance;
					}
				}), Object.defineProperty(exports$1, "VoidTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _index.voidTypeAnnotation;
					}
				}), Object.defineProperty(exports$1, "WhileStatement", {
					enumerable: !0,
					get: function() {
						return _index.whileStatement;
					}
				}), Object.defineProperty(exports$1, "WithStatement", {
					enumerable: !0,
					get: function() {
						return _index.withStatement;
					}
				}), Object.defineProperty(exports$1, "YieldExpression", {
					enumerable: !0,
					get: function() {
						return _index.yieldExpression;
					}
				});
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.buildUndefinedNode = function() {
					return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), !0);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/react/buildChildren.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					const elements = [];
					for (let i = 0; i < node.children.length; i++) {
						let child$1 = node.children[i];
						(0, _index.isJSXText)(child$1) ? (0, _cleanJSXElementLiteralChild.default)(child$1, elements) : ((0, _index.isJSXExpressionContainer)(child$1) && (child$1 = child$1.expression), (0, _index.isJSXEmptyExpression)(child$1) || elements.push(child$1));
					}
					return elements;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cleanJSXElementLiteralChild = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(typeAnnotations) {
					const types$7 = typeAnnotations.map((type$1) => (0, _index2.isTSTypeAnnotation)(type$1) ? type$1.typeAnnotation : type$1), flattened = (0, _removeTypeDuplicates.default)(types$7);
					return 1 === flattened.length ? flattened[0] : (0, _index.tsUnionType)(flattened);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/clone.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					return (0, _cloneNode.default)(node, !1);
				};
				var _cloneNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeep.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					return (0, _cloneNode.default)(node);
				};
				var _cloneNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					return (0, _cloneNode.default)(node, !0, !0);
				};
				var _cloneNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, deep = !0, withoutLoc = !1) {
					return cloneNodeInternal(node, deep, withoutLoc, new Map());
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
				const { hasOwn: hasOwn$2 } = { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };
				function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
					return obj && "string" == typeof obj.type ? cloneNodeInternal(obj, deep, withoutLoc, commentsCache) : obj;
				}
				function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
					return Array.isArray(obj) ? obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache)) : cloneIfNode(obj, deep, withoutLoc, commentsCache);
				}
				function cloneNodeInternal(node, deep = !0, withoutLoc = !1, commentsCache) {
					if (!node) return node;
					const { type: type$1 } = node, newNode = { type: node.type };
					if ((0, _index2.isIdentifier)(node)) newNode.name = node.name, hasOwn$2(node, "optional") && "boolean" == typeof node.optional && (newNode.optional = node.optional), hasOwn$2(node, "typeAnnotation") && (newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, !0, withoutLoc, commentsCache) : node.typeAnnotation), hasOwn$2(node, "decorators") && (newNode.decorators = deep ? cloneIfNodeOrArray(node.decorators, !0, withoutLoc, commentsCache) : node.decorators);
					else {
						if (!hasOwn$2(_index.NODE_FIELDS, type$1)) throw new Error(`Unknown node type: "${type$1}"`);
						for (const field of Object.keys(_index.NODE_FIELDS[type$1])) hasOwn$2(node, field) && (newNode[field] = deep ? (0, _index2.isFile)(node) && "comments" === field ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], !0, withoutLoc, commentsCache) : node[field]);
					}
					return hasOwn$2(node, "loc") && (newNode.loc = withoutLoc ? null : node.loc), hasOwn$2(node, "leadingComments") && (newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache)), hasOwn$2(node, "innerComments") && (newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache)), hasOwn$2(node, "trailingComments") && (newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache)), hasOwn$2(node, "extra") && (newNode.extra = Object.assign({}, node.extra)), newNode;
				}
				function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
					return comments && deep ? comments.map((comment) => {
						const cache = commentsCache.get(comment);
						if (cache) return cache;
						const { type: type$1, value: value$1, loc } = comment, ret = {
							type: type$1,
							value: value$1,
							loc
						};
						return withoutLoc && (ret.loc = null), commentsCache.set(comment, ret), ret;
					}) : comments;
				}
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					return (0, _cloneNode.default)(node, !1, !0);
				};
				var _cloneNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComment.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, type$1, content, line) {
					return (0, _addComments.default)(node, type$1, [{
						type: line ? "CommentLine" : "CommentBlock",
						value: content
					}]);
				};
				var _addComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, type$1, comments) {
					if (!comments || !node) return node;
					const key = `${type$1}Comments`;
					node[key] ? "leading" === type$1 ? node[key] = comments.concat(node[key]) : node[key].push(...comments) : node[key] = comments;
					return node;
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(child$1, parent) {
					(0, _inherit.default)("innerComments", child$1, parent);
				};
				var _inherit = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(child$1, parent) {
					(0, _inherit.default)("leadingComments", child$1, parent);
				};
				var _inherit = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(child$1, parent) {
					(0, _inherit.default)("trailingComments", child$1, parent);
				};
				var _inherit = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(child$1, parent) {
					return (0, _inheritTrailingComments.default)(child$1, parent), (0, _inheritLeadingComments.default)(child$1, parent), (0, _inheritInnerComments.default)(child$1, parent), child$1;
				};
				var _inheritTrailingComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _inheritLeadingComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritInnerComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/removeComments.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					return _index.COMMENT_KEYS.forEach((key) => {
						node[key] = null;
					}), node;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/generated/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.WHILE_TYPES = exports$1.USERWHITESPACABLE_TYPES = exports$1.UNARYLIKE_TYPES = exports$1.TYPESCRIPT_TYPES = exports$1.TSTYPE_TYPES = exports$1.TSTYPEELEMENT_TYPES = exports$1.TSENTITYNAME_TYPES = exports$1.TSBASETYPE_TYPES = exports$1.TERMINATORLESS_TYPES = exports$1.STATEMENT_TYPES = exports$1.STANDARDIZED_TYPES = exports$1.SCOPABLE_TYPES = exports$1.PUREISH_TYPES = exports$1.PROPERTY_TYPES = exports$1.PRIVATE_TYPES = exports$1.PATTERN_TYPES = exports$1.PATTERNLIKE_TYPES = exports$1.OBJECTMEMBER_TYPES = exports$1.MODULESPECIFIER_TYPES = exports$1.MODULEDECLARATION_TYPES = exports$1.MISCELLANEOUS_TYPES = exports$1.METHOD_TYPES = exports$1.LVAL_TYPES = exports$1.LOOP_TYPES = exports$1.LITERAL_TYPES = exports$1.JSX_TYPES = exports$1.IMPORTOREXPORTDECLARATION_TYPES = exports$1.IMMUTABLE_TYPES = exports$1.FUNCTION_TYPES = exports$1.FUNCTIONPARENT_TYPES = exports$1.FOR_TYPES = exports$1.FORXSTATEMENT_TYPES = exports$1.FLOW_TYPES = exports$1.FLOWTYPE_TYPES = exports$1.FLOWPREDICATE_TYPES = exports$1.FLOWDECLARATION_TYPES = exports$1.FLOWBASEANNOTATION_TYPES = exports$1.EXPRESSION_TYPES = exports$1.EXPRESSIONWRAPPER_TYPES = exports$1.EXPORTDECLARATION_TYPES = exports$1.ENUMMEMBER_TYPES = exports$1.ENUMBODY_TYPES = exports$1.DECLARATION_TYPES = exports$1.CONDITIONAL_TYPES = exports$1.COMPLETIONSTATEMENT_TYPES = exports$1.CLASS_TYPES = exports$1.BLOCK_TYPES = exports$1.BLOCKPARENT_TYPES = exports$1.BINARY_TYPES = exports$1.ACCESSOR_TYPES = void 0;
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
				exports$1.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS.Standardized, exports$1.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS.Expression, exports$1.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS.Binary, exports$1.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Scopable, exports$1.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.BlockParent, exports$1.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS.Block, exports$1.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.Statement, exports$1.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS.Terminatorless, exports$1.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.CompletionStatement, exports$1.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Conditional, exports$1.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS.Loop, exports$1.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS.While, exports$1.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS.ExpressionWrapper, exports$1.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS.For, exports$1.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.ForXStatement, exports$1.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS.Function, exports$1.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.FunctionParent, exports$1.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS.Pureish, exports$1.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.Declaration, exports$1.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.PatternLike, exports$1.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS.LVal, exports$1.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS.TSEntityName, exports$1.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Literal, exports$1.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Immutable, exports$1.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.UserWhitespacable, exports$1.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS.Method, exports$1.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.ObjectMember, exports$1.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS.Property, exports$1.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.UnaryLike, exports$1.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS.Pattern, exports$1.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS.Class;
				const IMPORTOREXPORTDECLARATION_TYPES = exports$1.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ImportOrExportDeclaration;
				exports$1.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ExportDeclaration, exports$1.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS.ModuleSpecifier, exports$1.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS.Accessor, exports$1.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS.Private, exports$1.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS.Flow, exports$1.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowType, exports$1.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation, exports$1.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowDeclaration, exports$1.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowPredicate, exports$1.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumBody, exports$1.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumMember, exports$1.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS.JSX, exports$1.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS.Miscellaneous, exports$1.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS.TypeScript, exports$1.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.TSTypeElement, exports$1.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSType, exports$1.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSBaseType, exports$1.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.UPDATE_OPERATORS = exports$1.UNARY_OPERATORS = exports$1.STRING_UNARY_OPERATORS = exports$1.STATEMENT_OR_BLOCK_KEYS = exports$1.NUMBER_UNARY_OPERATORS = exports$1.NUMBER_BINARY_OPERATORS = exports$1.NOT_LOCAL_BINDING = exports$1.LOGICAL_OPERATORS = exports$1.INHERIT_KEYS = exports$1.FOR_INIT_KEYS = exports$1.FLATTENABLE_KEYS = exports$1.EQUALITY_BINARY_OPERATORS = exports$1.COMPARISON_BINARY_OPERATORS = exports$1.COMMENT_KEYS = exports$1.BOOLEAN_UNARY_OPERATORS = exports$1.BOOLEAN_NUMBER_BINARY_OPERATORS = exports$1.BOOLEAN_BINARY_OPERATORS = exports$1.BLOCK_SCOPED_SYMBOL = exports$1.BINARY_OPERATORS = exports$1.ASSIGNMENT_OPERATORS = void 0;
				exports$1.STATEMENT_OR_BLOCK_KEYS = [
					"consequent",
					"body",
					"alternate"
				], exports$1.FLATTENABLE_KEYS = ["body", "expressions"], exports$1.FOR_INIT_KEYS = ["left", "init"], exports$1.COMMENT_KEYS = [
					"leadingComments",
					"trailingComments",
					"innerComments"
				];
				const LOGICAL_OPERATORS = exports$1.LOGICAL_OPERATORS = [
					"||",
					"&&",
					"??"
				], BOOLEAN_NUMBER_BINARY_OPERATORS = (exports$1.UPDATE_OPERATORS = ["++", "--"], exports$1.BOOLEAN_NUMBER_BINARY_OPERATORS = [
					">",
					"<",
					">=",
					"<="
				]), EQUALITY_BINARY_OPERATORS = exports$1.EQUALITY_BINARY_OPERATORS = [
					"==",
					"===",
					"!=",
					"!=="
				], COMPARISON_BINARY_OPERATORS = exports$1.COMPARISON_BINARY_OPERATORS = [
					...EQUALITY_BINARY_OPERATORS,
					"in",
					"instanceof"
				], BOOLEAN_BINARY_OPERATORS = exports$1.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS], NUMBER_BINARY_OPERATORS = exports$1.NUMBER_BINARY_OPERATORS = [
					"-",
					"/",
					"%",
					"*",
					"**",
					"&",
					"|",
					">>",
					">>>",
					"<<",
					"^"
				], BOOLEAN_UNARY_OPERATORS = (exports$1.BINARY_OPERATORS = [
					"+",
					...NUMBER_BINARY_OPERATORS,
					...BOOLEAN_BINARY_OPERATORS,
					"|>"
				], exports$1.ASSIGNMENT_OPERATORS = [
					"=",
					"+=",
					...NUMBER_BINARY_OPERATORS.map((op) => op + "="),
					...LOGICAL_OPERATORS.map((op) => op + "=")
				], exports$1.BOOLEAN_UNARY_OPERATORS = ["delete", "!"]), NUMBER_UNARY_OPERATORS = exports$1.NUMBER_UNARY_OPERATORS = [
					"+",
					"-",
					"~"
				], STRING_UNARY_OPERATORS = exports$1.STRING_UNARY_OPERATORS = ["typeof"];
				exports$1.UNARY_OPERATORS = [
					"void",
					"throw",
					...BOOLEAN_UNARY_OPERATORS,
					...NUMBER_UNARY_OPERATORS,
					...STRING_UNARY_OPERATORS
				], exports$1.INHERIT_KEYS = {
					optional: [
						"typeAnnotation",
						"typeParameters",
						"returnType"
					],
					force: [
						"start",
						"loc",
						"end"
					]
				}, exports$1.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped"), exports$1.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/ensureBlock.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, key = "body") {
					const result = (0, _toBlock.default)(node[key], node);
					return node[key] = result, result;
				};
				var _toBlock = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function gatherSequenceExpressions(nodes, declars) {
					const exprs = [];
					let ensureLastUndefined = !0;
					for (const node of nodes) if ((0, _index.isEmptyStatement)(node) || (ensureLastUndefined = !1), (0, _index.isExpression)(node)) exprs.push(node);
					else if ((0, _index.isExpressionStatement)(node)) exprs.push(node.expression);
					else if ((0, _index.isVariableDeclaration)(node)) {
						if ("var" !== node.kind) return;
						for (const declar of node.declarations) {
							const bindings = (0, _getBindingIdentifiers.default)(declar);
							for (const key of Object.keys(bindings)) declars.push({
								kind: node.kind,
								id: (0, _cloneNode.default)(bindings[key])
							});
							declar.init && exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
						}
						ensureLastUndefined = !0;
					} else if ((0, _index.isIfStatement)(node)) {
						const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : (0, _productions.buildUndefinedNode)(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : (0, _productions.buildUndefinedNode)();
						if (!consequent || !alternate) return;
						exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));
					} else if ((0, _index.isBlockStatement)(node)) {
						const body = gatherSequenceExpressions(node.body, declars);
						if (!body) return;
						exprs.push(body);
					} else {
						if (!(0, _index.isEmptyStatement)(node)) return;
						0 === nodes.indexOf(node) && (ensureLastUndefined = !0);
					}
					ensureLastUndefined && exprs.push((0, _productions.buildUndefinedNode)());
					return 1 === exprs.length ? exprs[0] : (0, _index2.sequenceExpression)(exprs);
				};
				var _getBindingIdentifiers = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _productions = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js"), _cloneNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(name) {
					"eval" !== (name = (0, _toIdentifier.default)(name)) && "arguments" !== name || (name = "_" + name);
					return name;
				};
				var _toIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, parent) {
					if ((0, _index.isBlockStatement)(node)) return node;
					let blockNodes = [];
					(0, _index.isEmptyStatement)(node) ? blockNodes = [] : ((0, _index.isStatement)(node) || (node = (0, _index.isFunction)(parent) ? (0, _index2.returnStatement)(node) : (0, _index2.expressionStatement)(node)), blockNodes = [node]);
					return (0, _index2.blockStatement)(blockNodes);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toComputedKey.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, key = node.key || node.property) {
					!node.computed && (0, _index.isIdentifier)(key) && (key = (0, _index2.stringLiteral)(key.name));
					return key;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toExpression.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
				exports$1.default = function(node) {
					(0, _index.isExpressionStatement)(node) && (node = node.expression);
					if ((0, _index.isExpression)(node)) return node;
					(0, _index.isClass)(node) ? node.type = "ClassExpression" : (0, _index.isFunction)(node) && (node.type = "FunctionExpression");
					if (!(0, _index.isExpression)(node)) throw new Error(`cannot turn ${node.type} to an expression`);
					return node;
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(input) {
					input += "";
					let name = "";
					for (const c of input) name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
					name = name.replace(/^[-0-9]+/, ""), name = name.replace(/[-\s]+(.)?/g, function(match, c) {
						return c ? c.toUpperCase() : "";
					}), (0, _isValidIdentifier.default)(name) || (name = `_${name}`);
					return name || "_";
				};
				var _isValidIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toKeyAlias.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = toKeyAlias;
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cloneNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _removePropertiesDeep = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");
				function toKeyAlias(node, key = node.key) {
					let alias;
					return "method" === node.kind ? toKeyAlias.increment() + "" : (alias = (0, _index.isIdentifier)(key) ? key.name : (0, _index.isStringLiteral)(key) ? JSON.stringify(key.value) : JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))), node.computed && (alias = `[${alias}]`), node.static && (alias = `static:${alias}`), alias);
				}
				toKeyAlias.uid = 0, toKeyAlias.increment = function() {
					return toKeyAlias.uid >= Number.MAX_SAFE_INTEGER ? toKeyAlias.uid = 0 : toKeyAlias.uid++;
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				exports$1.default = function(nodes, scope) {
					if (null == nodes || !nodes.length) return;
					const declars = [], result = (0, _gatherSequenceExpressions.default)(nodes, declars);
					if (!result) return;
					for (const declar of declars) scope.push(declar);
					return result;
				};
				var _gatherSequenceExpressions = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toStatement.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
				exports$1.default = function(node, ignore) {
					if ((0, _index.isStatement)(node)) return node;
					let newType, mustHaveId = !1;
					if ((0, _index.isClass)(node)) mustHaveId = !0, newType = "ClassDeclaration";
					else if ((0, _index.isFunction)(node)) mustHaveId = !0, newType = "FunctionDeclaration";
					else if ((0, _index.isAssignmentExpression)(node)) return (0, _index2.expressionStatement)(node);
					mustHaveId && !node.id && (newType = !1);
					if (!newType) {
						if (ignore) return !1;
						throw new Error(`cannot turn ${node.type} to a statement`);
					}
					return node.type = newType, node;
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/valueToNode.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _isValidIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
				exports$1.default = function valueToNode(value$1) {
					if (void 0 === value$1) return (0, _index.identifier)("undefined");
					if (!0 === value$1 || !1 === value$1) return (0, _index.booleanLiteral)(value$1);
					if (null === value$1) return (0, _index.nullLiteral)();
					if ("string" == typeof value$1) return (0, _index.stringLiteral)(value$1);
					if ("number" == typeof value$1) {
						let result;
						if (Number.isFinite(value$1)) result = (0, _index.numericLiteral)(Math.abs(value$1));
						else {
							let numerator;
							numerator = Number.isNaN(value$1) ? (0, _index.numericLiteral)(0) : (0, _index.numericLiteral)(1), result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
						}
						return (value$1 < 0 || Object.is(value$1, -0)) && (result = (0, _index.unaryExpression)("-", result)), result;
					}
					if (function(value$2) {
						return "[object RegExp]" === objectToString(value$2);
					}(value$1)) {
						const pattern = value$1.source, flags = /\/([a-z]*)$/.exec(value$1.toString())[1];
						return (0, _index.regExpLiteral)(pattern, flags);
					}
					if (Array.isArray(value$1)) return (0, _index.arrayExpression)(value$1.map(valueToNode));
					if (function(value$2) {
						if ("object" != typeof value$2 || null === value$2 || "[object Object]" !== Object.prototype.toString.call(value$2)) return !1;
						const proto = Object.getPrototypeOf(value$2);
						return null === proto || null === Object.getPrototypeOf(proto);
					}(value$1)) {
						const props = [];
						for (const key of Object.keys(value$1)) {
							let nodeKey;
							nodeKey = (0, _isValidIdentifier.default)(key) ? (0, _index.identifier)(key) : (0, _index.stringLiteral)(key), props.push((0, _index.objectProperty)(nodeKey, valueToNode(value$1[key])));
						}
						return (0, _index.objectExpression)(props);
					}
					throw new Error("don't know how to turn this value into a node");
				};
				const objectToString = Function.call.bind(Object.prototype.toString);
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.patternLikeCommon = exports$1.importAttributes = exports$1.functionTypeAnnotationCommon = exports$1.functionDeclarationCommon = exports$1.functionCommon = exports$1.classMethodOrPropertyCommon = exports$1.classMethodOrDeclareMethodCommon = void 0;
				var _is = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _isValidIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperStringParser = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-string-parser@7.25.9/node_modules/@babel/helper-string-parser/lib/index.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js"), _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
				const defineType = (0, _utils.defineAliasedType)("Standardized");
				defineType("ArrayExpression", {
					fields: { elements: {
						validate: (0, _utils.arrayOf)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement")),
						default: process.env.BABEL_TYPES_8_BREAKING ? void 0 : []
					} },
					visitor: ["elements"],
					aliases: ["Expression"]
				}), defineType("AssignmentExpression", {
					fields: {
						operator: { validate: process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function() {
							const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS), pattern = (0, _utils.assertOneOf)("=");
							return function(node, key, val) {
								((0, _is.default)("Pattern", node.left) ? pattern : identifier)(node, key, val);
							};
						}(), { type: "string" }) : (0, _utils.assertValueType)("string") },
						left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") },
						right: { validate: (0, _utils.assertNodeType)("Expression") }
					},
					builder: [
						"operator",
						"left",
						"right"
					],
					visitor: ["left", "right"],
					aliases: ["Expression"]
				}), defineType("BinaryExpression", {
					builder: [
						"operator",
						"left",
						"right"
					],
					fields: {
						operator: { validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS) },
						left: { validate: function() {
							const expression = (0, _utils.assertNodeType)("Expression"), inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
							return Object.assign(function(node, key, val) {
								("in" === node.operator ? inOp : expression)(node, key, val);
							}, { oneOfNodeTypes: ["Expression", "PrivateName"] });
						}() },
						right: { validate: (0, _utils.assertNodeType)("Expression") }
					},
					visitor: ["left", "right"],
					aliases: ["Binary", "Expression"]
				}), defineType("InterpreterDirective", {
					builder: ["value"],
					fields: { value: { validate: (0, _utils.assertValueType)("string") } }
				}), defineType("Directive", {
					visitor: ["value"],
					fields: { value: { validate: (0, _utils.assertNodeType)("DirectiveLiteral") } }
				}), defineType("DirectiveLiteral", {
					builder: ["value"],
					fields: { value: { validate: (0, _utils.assertValueType)("string") } }
				}), defineType("BlockStatement", {
					builder: ["body", "directives"],
					visitor: ["directives", "body"],
					fields: {
						directives: {
							validate: (0, _utils.arrayOfType)("Directive"),
							default: []
						},
						body: (0, _utils.validateArrayOfType)("Statement")
					},
					aliases: [
						"Scopable",
						"BlockParent",
						"Block",
						"Statement"
					]
				}), defineType("BreakStatement", {
					visitor: ["label"],
					fields: { label: {
						validate: (0, _utils.assertNodeType)("Identifier"),
						optional: !0
					} },
					aliases: [
						"Statement",
						"Terminatorless",
						"CompletionStatement"
					]
				}), defineType("CallExpression", {
					visitor: [
						"callee",
						"arguments",
						"typeParameters",
						"typeArguments"
					],
					builder: ["callee", "arguments"],
					aliases: ["Expression"],
					fields: Object.assign({
						callee: { validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier") },
						arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder")
					}, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: {
						validate: (0, _utils.assertValueType)("boolean"),
						optional: !0
					} }, {
						typeArguments: {
							validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
							optional: !0
						},
						typeParameters: {
							validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
							optional: !0
						}
					})
				}), defineType("CatchClause", {
					visitor: ["param", "body"],
					fields: {
						param: {
							validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
							optional: !0
						},
						body: { validate: (0, _utils.assertNodeType)("BlockStatement") }
					},
					aliases: ["Scopable", "BlockParent"]
				}), defineType("ConditionalExpression", {
					visitor: [
						"test",
						"consequent",
						"alternate"
					],
					fields: {
						test: { validate: (0, _utils.assertNodeType)("Expression") },
						consequent: { validate: (0, _utils.assertNodeType)("Expression") },
						alternate: { validate: (0, _utils.assertNodeType)("Expression") }
					},
					aliases: ["Expression", "Conditional"]
				}), defineType("ContinueStatement", {
					visitor: ["label"],
					fields: { label: {
						validate: (0, _utils.assertNodeType)("Identifier"),
						optional: !0
					} },
					aliases: [
						"Statement",
						"Terminatorless",
						"CompletionStatement"
					]
				}), defineType("DebuggerStatement", { aliases: ["Statement"] }), defineType("DoWhileStatement", {
					builder: ["test", "body"],
					visitor: ["body", "test"],
					fields: {
						test: { validate: (0, _utils.assertNodeType)("Expression") },
						body: { validate: (0, _utils.assertNodeType)("Statement") }
					},
					aliases: [
						"Statement",
						"BlockParent",
						"Loop",
						"While",
						"Scopable"
					]
				}), defineType("EmptyStatement", { aliases: ["Statement"] }), defineType("ExpressionStatement", {
					visitor: ["expression"],
					fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } },
					aliases: ["Statement", "ExpressionWrapper"]
				}), defineType("File", {
					builder: [
						"program",
						"comments",
						"tokens"
					],
					visitor: ["program"],
					fields: {
						program: { validate: (0, _utils.assertNodeType)("Program") },
						comments: {
							validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(() => {}, { each: { oneOfNodeTypes: ["CommentBlock", "CommentLine"] } }),
							optional: !0
						},
						tokens: {
							validate: (0, _utils.assertEach)(Object.assign(() => {}, { type: "any" })),
							optional: !0
						}
					}
				}), defineType("ForInStatement", {
					visitor: [
						"left",
						"right",
						"body"
					],
					aliases: [
						"Scopable",
						"Statement",
						"For",
						"BlockParent",
						"Loop",
						"ForXStatement"
					],
					fields: {
						left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("VariableDeclaration", "LVal") },
						right: { validate: (0, _utils.assertNodeType)("Expression") },
						body: { validate: (0, _utils.assertNodeType)("Statement") }
					}
				}), defineType("ForStatement", {
					visitor: [
						"init",
						"test",
						"update",
						"body"
					],
					aliases: [
						"Scopable",
						"Statement",
						"For",
						"BlockParent",
						"Loop"
					],
					fields: {
						init: {
							validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"),
							optional: !0
						},
						test: {
							validate: (0, _utils.assertNodeType)("Expression"),
							optional: !0
						},
						update: {
							validate: (0, _utils.assertNodeType)("Expression"),
							optional: !0
						},
						body: { validate: (0, _utils.assertNodeType)("Statement") }
					}
				});
				const functionCommon = () => ({
					params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement"),
					generator: { default: !1 },
					async: { default: !1 }
				});
				exports$1.functionCommon = functionCommon;
				const functionTypeAnnotationCommon = () => ({
					returnType: {
						validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
						optional: !0
					},
					typeParameters: {
						validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
						optional: !0
					}
				});
				exports$1.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
				const functionDeclarationCommon = () => Object.assign({}, functionCommon(), {
					declare: {
						validate: (0, _utils.assertValueType)("boolean"),
						optional: !0
					},
					id: {
						validate: (0, _utils.assertNodeType)("Identifier"),
						optional: !0
					}
				});
				exports$1.functionDeclarationCommon = functionDeclarationCommon, defineType("FunctionDeclaration", {
					builder: [
						"id",
						"params",
						"body",
						"generator",
						"async"
					],
					visitor: [
						"id",
						"typeParameters",
						"params",
						"returnType",
						"body"
					],
					fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), {
						body: { validate: (0, _utils.assertNodeType)("BlockStatement") },
						predicate: {
							validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
							optional: !0
						}
					}),
					aliases: [
						"Scopable",
						"Function",
						"BlockParent",
						"FunctionParent",
						"Statement",
						"Pureish",
						"Declaration"
					],
					validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
						const identifier = (0, _utils.assertNodeType)("Identifier");
						return function(parent, key, node) {
							(0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
						};
					}() : void 0
				}), defineType("FunctionExpression", {
					inherits: "FunctionDeclaration",
					aliases: [
						"Scopable",
						"Function",
						"BlockParent",
						"FunctionParent",
						"Expression",
						"Pureish"
					],
					fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
						id: {
							validate: (0, _utils.assertNodeType)("Identifier"),
							optional: !0
						},
						body: { validate: (0, _utils.assertNodeType)("BlockStatement") },
						predicate: {
							validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
							optional: !0
						}
					})
				});
				const patternLikeCommon = () => ({
					typeAnnotation: {
						validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
						optional: !0
					},
					optional: {
						validate: (0, _utils.assertValueType)("boolean"),
						optional: !0
					},
					decorators: {
						validate: (0, _utils.arrayOfType)("Decorator"),
						optional: !0
					}
				});
				exports$1.patternLikeCommon = patternLikeCommon, defineType("Identifier", {
					builder: ["name"],
					visitor: ["typeAnnotation", "decorators"],
					aliases: [
						"Expression",
						"PatternLike",
						"LVal",
						"TSEntityName"
					],
					fields: Object.assign({}, patternLikeCommon(), { name: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
						if (!(0, _isValidIdentifier.default)(val, !1)) throw new TypeError(`"${val}" is not a valid identifier name`);
					}, { type: "string" })) : (0, _utils.assertValueType)("string") } }),
					validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key, node) {
						const match = /\.(\w+)$/.exec(key);
						if (!match) return;
						const [, parentKey] = match, nonComp = { computed: !1 };
						if ("property" === parentKey) {
							if ((0, _is.default)("MemberExpression", parent, nonComp)) return;
							if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;
						} else if ("key" === parentKey) {
							if ((0, _is.default)("Property", parent, nonComp)) return;
							if ((0, _is.default)("Method", parent, nonComp)) return;
						} else if ("exported" === parentKey) {
							if ((0, _is.default)("ExportSpecifier", parent)) return;
						} else if ("imported" === parentKey) {
							if ((0, _is.default)("ImportSpecifier", parent, { imported: node })) return;
						} else if ("meta" === parentKey && (0, _is.default)("MetaProperty", parent, { meta: node })) return;
						if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, !1)) && "this" !== node.name) throw new TypeError(`"${node.name}" is not a valid identifier`);
					} : void 0
				}), defineType("IfStatement", {
					visitor: [
						"test",
						"consequent",
						"alternate"
					],
					aliases: ["Statement", "Conditional"],
					fields: {
						test: { validate: (0, _utils.assertNodeType)("Expression") },
						consequent: { validate: (0, _utils.assertNodeType)("Statement") },
						alternate: {
							optional: !0,
							validate: (0, _utils.assertNodeType)("Statement")
						}
					}
				}), defineType("LabeledStatement", {
					visitor: ["label", "body"],
					aliases: ["Statement"],
					fields: {
						label: { validate: (0, _utils.assertNodeType)("Identifier") },
						body: { validate: (0, _utils.assertNodeType)("Statement") }
					}
				}), defineType("StringLiteral", {
					builder: ["value"],
					fields: { value: { validate: (0, _utils.assertValueType)("string") } },
					aliases: [
						"Expression",
						"Pureish",
						"Literal",
						"Immutable"
					]
				}), defineType("NumericLiteral", {
					builder: ["value"],
					deprecatedAlias: "NumberLiteral",
					fields: { value: { validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function(node, key, val) {
						if (1 / val < 0 || !Number.isFinite(val)) new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${val}) instead.`);
					}, { type: "number" })) } },
					aliases: [
						"Expression",
						"Pureish",
						"Literal",
						"Immutable"
					]
				}), defineType("NullLiteral", { aliases: [
					"Expression",
					"Pureish",
					"Literal",
					"Immutable"
				] }), defineType("BooleanLiteral", {
					builder: ["value"],
					fields: { value: { validate: (0, _utils.assertValueType)("boolean") } },
					aliases: [
						"Expression",
						"Pureish",
						"Literal",
						"Immutable"
					]
				}), defineType("RegExpLiteral", {
					builder: ["pattern", "flags"],
					deprecatedAlias: "RegexLiteral",
					aliases: [
						"Expression",
						"Pureish",
						"Literal"
					],
					fields: {
						pattern: { validate: (0, _utils.assertValueType)("string") },
						flags: {
							validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
								const invalid = /[^gimsuy]/.exec(val);
								if (invalid) throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
							}, { type: "string" })) : (0, _utils.assertValueType)("string"),
							default: ""
						}
					}
				}), defineType("LogicalExpression", {
					builder: [
						"operator",
						"left",
						"right"
					],
					visitor: ["left", "right"],
					aliases: ["Binary", "Expression"],
					fields: {
						operator: { validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS) },
						left: { validate: (0, _utils.assertNodeType)("Expression") },
						right: { validate: (0, _utils.assertNodeType)("Expression") }
					}
				}), defineType("MemberExpression", {
					builder: [
						"object",
						"property",
						"computed",
						...process.env.BABEL_TYPES_8_BREAKING ? [] : ["optional"]
					],
					visitor: ["object", "property"],
					aliases: ["Expression", "LVal"],
					fields: Object.assign({
						object: { validate: (0, _utils.assertNodeType)("Expression", "Super") },
						property: { validate: function() {
							const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
								(node.computed ? computed : normal)(node, key, val);
							};
							return validator.oneOfNodeTypes = [
								"Expression",
								"Identifier",
								"PrivateName"
							], validator;
						}() },
						computed: { default: !1 }
					}, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: {
						validate: (0, _utils.assertValueType)("boolean"),
						optional: !0
					} })
				}), defineType("NewExpression", { inherits: "CallExpression" }), defineType("Program", {
					visitor: ["directives", "body"],
					builder: [
						"body",
						"directives",
						"sourceType",
						"interpreter"
					],
					fields: {
						sourceType: {
							validate: (0, _utils.assertOneOf)("script", "module"),
							default: "script"
						},
						interpreter: {
							validate: (0, _utils.assertNodeType)("InterpreterDirective"),
							default: null,
							optional: !0
						},
						directives: {
							validate: (0, _utils.arrayOfType)("Directive"),
							default: []
						},
						body: (0, _utils.validateArrayOfType)("Statement")
					},
					aliases: [
						"Scopable",
						"BlockParent",
						"Block"
					]
				}), defineType("ObjectExpression", {
					visitor: ["properties"],
					aliases: ["Expression"],
					fields: { properties: (0, _utils.validateArrayOfType)("ObjectMethod", "ObjectProperty", "SpreadElement") }
				}), defineType("ObjectMethod", {
					builder: [
						"kind",
						"key",
						"params",
						"body",
						"computed",
						"generator",
						"async"
					],
					visitor: [
						"decorators",
						"key",
						"typeParameters",
						"params",
						"returnType",
						"body"
					],
					fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
						kind: Object.assign({ validate: (0, _utils.assertOneOf)("method", "get", "set") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { default: "method" }),
						computed: { default: !1 },
						key: { validate: function() {
							const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
								(node.computed ? computed : normal)(node, key, val);
							};
							return validator.oneOfNodeTypes = [
								"Expression",
								"Identifier",
								"StringLiteral",
								"NumericLiteral",
								"BigIntLiteral"
							], validator;
						}() },
						decorators: {
							validate: (0, _utils.arrayOfType)("Decorator"),
							optional: !0
						},
						body: { validate: (0, _utils.assertNodeType)("BlockStatement") }
					}),
					aliases: [
						"UserWhitespacable",
						"Function",
						"Scopable",
						"BlockParent",
						"FunctionParent",
						"Method",
						"ObjectMember"
					]
				}), defineType("ObjectProperty", {
					builder: [
						"key",
						"value",
						"computed",
						"shorthand",
						...process.env.BABEL_TYPES_8_BREAKING ? [] : ["decorators"]
					],
					fields: {
						computed: { default: !1 },
						key: { validate: function() {
							const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
							return Object.assign(function(node, key, val) {
								(node.computed ? computed : normal)(node, key, val);
							}, { oneOfNodeTypes: [
								"Expression",
								"Identifier",
								"StringLiteral",
								"NumericLiteral",
								"BigIntLiteral",
								"DecimalLiteral",
								"PrivateName"
							] });
						}() },
						value: { validate: (0, _utils.assertNodeType)("Expression", "PatternLike") },
						shorthand: {
							validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, shorthand) {
								if (shorthand) {
									if (node.computed) throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
									if (!(0, _is.default)("Identifier", node.key)) throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
								}
							}, { type: "boolean" })) : (0, _utils.assertValueType)("boolean"),
							default: !1
						},
						decorators: {
							validate: (0, _utils.arrayOfType)("Decorator"),
							optional: !0
						}
					},
					visitor: [
						"key",
						"value",
						"decorators"
					],
					aliases: [
						"UserWhitespacable",
						"Property",
						"ObjectMember"
					],
					validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
						const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion"), expression = (0, _utils.assertNodeType)("Expression");
						return function(parent, key, node) {
							((0, _is.default)("ObjectPattern", parent) ? pattern : expression)(node, "value", node.value);
						};
					}() : void 0
				}), defineType("RestElement", {
					visitor: ["argument", "typeAnnotation"],
					builder: ["argument"],
					aliases: ["LVal", "PatternLike"],
					deprecatedAlias: "RestProperty",
					fields: Object.assign({}, patternLikeCommon(), { argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal") } }),
					validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key) {
						const match = /(\w+)\[(\d+)\]/.exec(key);
						if (!match) throw new Error("Internal Babel error: malformed key.");
						const [, listKey, index] = match;
						if (parent[listKey].length > +index + 1) throw new TypeError(`RestElement must be last element of ${listKey}`);
					} : void 0
				}), defineType("ReturnStatement", {
					visitor: ["argument"],
					aliases: [
						"Statement",
						"Terminatorless",
						"CompletionStatement"
					],
					fields: { argument: {
						validate: (0, _utils.assertNodeType)("Expression"),
						optional: !0
					} }
				}), defineType("SequenceExpression", {
					visitor: ["expressions"],
					fields: { expressions: (0, _utils.validateArrayOfType)("Expression") },
					aliases: ["Expression"]
				}), defineType("ParenthesizedExpression", {
					visitor: ["expression"],
					aliases: ["Expression", "ExpressionWrapper"],
					fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }
				}), defineType("SwitchCase", {
					visitor: ["test", "consequent"],
					fields: {
						test: {
							validate: (0, _utils.assertNodeType)("Expression"),
							optional: !0
						},
						consequent: (0, _utils.validateArrayOfType)("Statement")
					}
				}), defineType("SwitchStatement", {
					visitor: ["discriminant", "cases"],
					aliases: [
						"Statement",
						"BlockParent",
						"Scopable"
					],
					fields: {
						discriminant: { validate: (0, _utils.assertNodeType)("Expression") },
						cases: (0, _utils.validateArrayOfType)("SwitchCase")
					}
				}), defineType("ThisExpression", { aliases: ["Expression"] }), defineType("ThrowStatement", {
					visitor: ["argument"],
					aliases: [
						"Statement",
						"Terminatorless",
						"CompletionStatement"
					],
					fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } }
				}), defineType("TryStatement", {
					visitor: [
						"block",
						"handler",
						"finalizer"
					],
					aliases: ["Statement"],
					fields: {
						block: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node) {
							if (!node.handler && !node.finalizer) throw new TypeError("TryStatement expects either a handler or finalizer, or both");
						}, { oneOfNodeTypes: ["BlockStatement"] })) : (0, _utils.assertNodeType)("BlockStatement") },
						handler: {
							optional: !0,
							validate: (0, _utils.assertNodeType)("CatchClause")
						},
						finalizer: {
							optional: !0,
							validate: (0, _utils.assertNodeType)("BlockStatement")
						}
					}
				}), defineType("UnaryExpression", {
					builder: [
						"operator",
						"argument",
						"prefix"
					],
					fields: {
						prefix: { default: !0 },
						argument: { validate: (0, _utils.assertNodeType)("Expression") },
						operator: { validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS) }
					},
					visitor: ["argument"],
					aliases: ["UnaryLike", "Expression"]
				}), defineType("UpdateExpression", {
					builder: [
						"operator",
						"argument",
						"prefix"
					],
					fields: {
						prefix: { default: !1 },
						argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression") : (0, _utils.assertNodeType)("Expression") },
						operator: { validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS) }
					},
					visitor: ["argument"],
					aliases: ["Expression"]
				}), defineType("VariableDeclaration", {
					builder: ["kind", "declarations"],
					visitor: ["declarations"],
					aliases: ["Statement", "Declaration"],
					fields: {
						declare: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						kind: { validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using") },
						declarations: (0, _utils.validateArrayOfType)("VariableDeclarator")
					},
					validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {
						const withoutInit = (0, _utils.assertNodeType)("Identifier");
						return function(parent, key, node) {
							if ((0, _is.default)("ForXStatement", parent, { left: node })) {
								if (1 !== node.declarations.length) throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
							} else node.declarations.forEach((decl) => {
								decl.init || withoutInit(decl, "id", decl.id);
							});
						};
					})() : void 0
				}), defineType("VariableDeclarator", {
					visitor: ["id", "init"],
					fields: {
						id: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern") : (0, _utils.assertNodeType)("LVal") },
						definite: {
							optional: !0,
							validate: (0, _utils.assertValueType)("boolean")
						},
						init: {
							optional: !0,
							validate: (0, _utils.assertNodeType)("Expression")
						}
					}
				}), defineType("WhileStatement", {
					visitor: ["test", "body"],
					aliases: [
						"Statement",
						"BlockParent",
						"Loop",
						"While",
						"Scopable"
					],
					fields: {
						test: { validate: (0, _utils.assertNodeType)("Expression") },
						body: { validate: (0, _utils.assertNodeType)("Statement") }
					}
				}), defineType("WithStatement", {
					visitor: ["object", "body"],
					aliases: ["Statement"],
					fields: {
						object: { validate: (0, _utils.assertNodeType)("Expression") },
						body: { validate: (0, _utils.assertNodeType)("Statement") }
					}
				}), defineType("AssignmentPattern", {
					visitor: [
						"left",
						"right",
						"decorators"
					],
					builder: ["left", "right"],
					aliases: [
						"Pattern",
						"PatternLike",
						"LVal"
					],
					fields: Object.assign({}, patternLikeCommon(), {
						left: { validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") },
						right: { validate: (0, _utils.assertNodeType)("Expression") },
						decorators: {
							validate: (0, _utils.arrayOfType)("Decorator"),
							optional: !0
						}
					})
				}), defineType("ArrayPattern", {
					visitor: ["elements", "typeAnnotation"],
					builder: ["elements"],
					aliases: [
						"Pattern",
						"PatternLike",
						"LVal"
					],
					fields: Object.assign({}, patternLikeCommon(), { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal"))) } })
				}), defineType("ArrowFunctionExpression", {
					builder: [
						"params",
						"body",
						"async"
					],
					visitor: [
						"typeParameters",
						"params",
						"returnType",
						"body"
					],
					aliases: [
						"Scopable",
						"Function",
						"BlockParent",
						"FunctionParent",
						"Expression",
						"Pureish"
					],
					fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
						expression: { validate: (0, _utils.assertValueType)("boolean") },
						body: { validate: (0, _utils.assertNodeType)("BlockStatement", "Expression") },
						predicate: {
							validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
							optional: !0
						}
					})
				}), defineType("ClassBody", {
					visitor: ["body"],
					fields: { body: (0, _utils.validateArrayOfType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock") }
				}), defineType("ClassExpression", {
					builder: [
						"id",
						"superClass",
						"body",
						"decorators"
					],
					visitor: [
						"decorators",
						"id",
						"typeParameters",
						"superClass",
						"superTypeParameters",
						"mixins",
						"implements",
						"body"
					],
					aliases: [
						"Scopable",
						"Class",
						"Expression"
					],
					fields: {
						id: {
							validate: (0, _utils.assertNodeType)("Identifier"),
							optional: !0
						},
						typeParameters: {
							validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
							optional: !0
						},
						body: { validate: (0, _utils.assertNodeType)("ClassBody") },
						superClass: {
							optional: !0,
							validate: (0, _utils.assertNodeType)("Expression")
						},
						superTypeParameters: {
							validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
							optional: !0
						},
						implements: {
							validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
							optional: !0
						},
						decorators: {
							validate: (0, _utils.arrayOfType)("Decorator"),
							optional: !0
						},
						mixins: {
							validate: (0, _utils.assertNodeType)("InterfaceExtends"),
							optional: !0
						}
					}
				}), defineType("ClassDeclaration", {
					inherits: "ClassExpression",
					aliases: [
						"Scopable",
						"Class",
						"Statement",
						"Declaration"
					],
					fields: {
						id: {
							validate: (0, _utils.assertNodeType)("Identifier"),
							optional: !0
						},
						typeParameters: {
							validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
							optional: !0
						},
						body: { validate: (0, _utils.assertNodeType)("ClassBody") },
						superClass: {
							optional: !0,
							validate: (0, _utils.assertNodeType)("Expression")
						},
						superTypeParameters: {
							validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
							optional: !0
						},
						implements: {
							validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"),
							optional: !0
						},
						decorators: {
							validate: (0, _utils.arrayOfType)("Decorator"),
							optional: !0
						},
						mixins: {
							validate: (0, _utils.assertNodeType)("InterfaceExtends"),
							optional: !0
						},
						declare: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						abstract: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						}
					},
					validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
						const identifier = (0, _utils.assertNodeType)("Identifier");
						return function(parent, key, node) {
							(0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
						};
					}() : void 0
				});
				const importAttributes = exports$1.importAttributes = {
					attributes: {
						optional: !0,
						validate: (0, _utils.arrayOfType)("ImportAttribute")
					},
					assertions: {
						deprecated: !0,
						optional: !0,
						validate: (0, _utils.arrayOfType)("ImportAttribute")
					}
				};
				defineType("ExportAllDeclaration", {
					builder: ["source"],
					visitor: [
						"source",
						"attributes",
						"assertions"
					],
					aliases: [
						"Statement",
						"Declaration",
						"ImportOrExportDeclaration",
						"ExportDeclaration"
					],
					fields: Object.assign({
						source: { validate: (0, _utils.assertNodeType)("StringLiteral") },
						exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
					}, importAttributes)
				}), defineType("ExportDefaultDeclaration", {
					visitor: ["declaration"],
					aliases: [
						"Statement",
						"Declaration",
						"ImportOrExportDeclaration",
						"ExportDeclaration"
					],
					fields: {
						declaration: (0, _utils.validateType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression"),
						exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value"))
					}
				}), defineType("ExportNamedDeclaration", {
					builder: [
						"declaration",
						"specifiers",
						"source"
					],
					visitor: process.env ? [
						"declaration",
						"specifiers",
						"source",
						"attributes"
					] : [
						"declaration",
						"specifiers",
						"source",
						"attributes",
						"assertions"
					],
					aliases: [
						"Statement",
						"Declaration",
						"ImportOrExportDeclaration",
						"ExportDeclaration"
					],
					fields: Object.assign({ declaration: {
						optional: !0,
						validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
							if (val && node.specifiers.length) throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
							if (val && node.source) throw new TypeError("Cannot export a declaration from a source");
						}, { oneOfNodeTypes: ["Declaration"] })) : (0, _utils.assertNodeType)("Declaration")
					} }, importAttributes, {
						specifiers: {
							default: [],
							validate: (0, _utils.arrayOf)(function() {
								const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"), sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
								return process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function(node, key, val) {
									(node.source ? sourced : sourceless)(node, key, val);
								}, { oneOfNodeTypes: [
									"ExportSpecifier",
									"ExportDefaultSpecifier",
									"ExportNamespaceSpecifier"
								] }) : sourced;
							}())
						},
						source: {
							validate: (0, _utils.assertNodeType)("StringLiteral"),
							optional: !0
						},
						exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
					})
				}), defineType("ExportSpecifier", {
					visitor: ["local", "exported"],
					aliases: ["ModuleSpecifier"],
					fields: {
						local: { validate: (0, _utils.assertNodeType)("Identifier") },
						exported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") },
						exportKind: {
							validate: (0, _utils.assertOneOf)("type", "value"),
							optional: !0
						}
					}
				}), defineType("ForOfStatement", {
					visitor: [
						"left",
						"right",
						"body"
					],
					builder: [
						"left",
						"right",
						"body",
						"await"
					],
					aliases: [
						"Scopable",
						"Statement",
						"For",
						"BlockParent",
						"Loop",
						"ForXStatement"
					],
					fields: {
						left: { validate: function() {
							if (!process.env.BABEL_TYPES_8_BREAKING) return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
							const declaration = (0, _utils.assertNodeType)("VariableDeclaration"), lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
							return Object.assign(function(node, key, val) {
								(0, _is.default)("VariableDeclaration", val) ? declaration(node, key, val) : lval(node, key, val);
							}, { oneOfNodeTypes: [
								"VariableDeclaration",
								"Identifier",
								"MemberExpression",
								"ArrayPattern",
								"ObjectPattern",
								"TSAsExpression",
								"TSSatisfiesExpression",
								"TSTypeAssertion",
								"TSNonNullExpression"
							] });
						}() },
						right: { validate: (0, _utils.assertNodeType)("Expression") },
						body: { validate: (0, _utils.assertNodeType)("Statement") },
						await: { default: !1 }
					}
				}), defineType("ImportDeclaration", {
					builder: ["specifiers", "source"],
					visitor: [
						"specifiers",
						"source",
						"attributes",
						"assertions"
					],
					aliases: [
						"Statement",
						"Declaration",
						"ImportOrExportDeclaration"
					],
					fields: Object.assign({}, importAttributes, {
						module: {
							optional: !0,
							validate: (0, _utils.assertValueType)("boolean")
						},
						phase: {
							default: null,
							validate: (0, _utils.assertOneOf)("source", "defer")
						},
						specifiers: (0, _utils.validateArrayOfType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"),
						source: { validate: (0, _utils.assertNodeType)("StringLiteral") },
						importKind: {
							validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
							optional: !0
						}
					})
				}), defineType("ImportDefaultSpecifier", {
					visitor: ["local"],
					aliases: ["ModuleSpecifier"],
					fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } }
				}), defineType("ImportNamespaceSpecifier", {
					visitor: ["local"],
					aliases: ["ModuleSpecifier"],
					fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } }
				}), defineType("ImportSpecifier", {
					visitor: ["imported", "local"],
					builder: ["local", "imported"],
					aliases: ["ModuleSpecifier"],
					fields: {
						local: { validate: (0, _utils.assertNodeType)("Identifier") },
						imported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") },
						importKind: {
							validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
							optional: !0
						}
					}
				}), defineType("ImportExpression", {
					visitor: ["source", "options"],
					aliases: ["Expression"],
					fields: {
						phase: {
							default: null,
							validate: (0, _utils.assertOneOf)("source", "defer")
						},
						source: { validate: (0, _utils.assertNodeType)("Expression") },
						options: {
							validate: (0, _utils.assertNodeType)("Expression"),
							optional: !0
						}
					}
				}), defineType("MetaProperty", {
					visitor: ["meta", "property"],
					aliases: ["Expression"],
					fields: {
						meta: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
							let property;
							switch (val.name) {
								case "function":
									property = "sent";
									break;
								case "new":
									property = "target";
									break;
								case "import": property = "meta";
							}
							if (!(0, _is.default)("Identifier", node.property, { name: property })) throw new TypeError("Unrecognised MetaProperty");
						}, { oneOfNodeTypes: ["Identifier"] })) : (0, _utils.assertNodeType)("Identifier") },
						property: { validate: (0, _utils.assertNodeType)("Identifier") }
					}
				});
				const classMethodOrPropertyCommon = () => ({
					abstract: {
						validate: (0, _utils.assertValueType)("boolean"),
						optional: !0
					},
					accessibility: {
						validate: (0, _utils.assertOneOf)("public", "private", "protected"),
						optional: !0
					},
					static: { default: !1 },
					override: { default: !1 },
					computed: { default: !1 },
					optional: {
						validate: (0, _utils.assertValueType)("boolean"),
						optional: !0
					},
					key: { validate: (0, _utils.chain)(function() {
						const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression");
						return function(node, key, val) {
							(node.computed ? computed : normal)(node, key, val);
						};
					}(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression")) }
				});
				exports$1.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
				const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), {
					params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"),
					kind: {
						validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"),
						default: "method"
					},
					access: {
						validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")),
						optional: !0
					},
					decorators: {
						validate: (0, _utils.arrayOfType)("Decorator"),
						optional: !0
					}
				});
				exports$1.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon, defineType("ClassMethod", {
					aliases: [
						"Function",
						"Scopable",
						"BlockParent",
						"FunctionParent",
						"Method"
					],
					builder: [
						"kind",
						"key",
						"params",
						"body",
						"computed",
						"static",
						"generator",
						"async"
					],
					visitor: [
						"decorators",
						"key",
						"typeParameters",
						"params",
						"returnType",
						"body"
					],
					fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") } })
				}), defineType("ObjectPattern", {
					visitor: [
						"properties",
						"typeAnnotation",
						"decorators"
					],
					builder: ["properties"],
					aliases: [
						"Pattern",
						"PatternLike",
						"LVal"
					],
					fields: Object.assign({}, patternLikeCommon(), { properties: (0, _utils.validateArrayOfType)("RestElement", "ObjectProperty") })
				}), defineType("SpreadElement", {
					visitor: ["argument"],
					aliases: ["UnaryLike"],
					deprecatedAlias: "SpreadProperty",
					fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } }
				}), defineType("Super", { aliases: ["Expression"] }), defineType("TaggedTemplateExpression", {
					visitor: [
						"tag",
						"typeParameters",
						"quasi"
					],
					builder: ["tag", "quasi"],
					aliases: ["Expression"],
					fields: {
						tag: { validate: (0, _utils.assertNodeType)("Expression") },
						quasi: { validate: (0, _utils.assertNodeType)("TemplateLiteral") },
						typeParameters: {
							validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
							optional: !0
						}
					}
				}), defineType("TemplateElement", {
					builder: ["value", "tail"],
					fields: {
						value: { validate: (0, _utils.chain)((0, _utils.assertShape)({
							raw: { validate: (0, _utils.assertValueType)("string") },
							cooked: {
								validate: (0, _utils.assertValueType)("string"),
								optional: !0
							}
						}), function(node) {
							const raw = node.value.raw;
							let unterminatedCalled = !1;
							const error$1 = () => {
								throw new Error("Internal @babel/types error.");
							}, { str, firstInvalidLoc } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, {
								unterminated() {
									unterminatedCalled = !0;
								},
								strictNumericEscape: error$1,
								invalidEscapeSequence: error$1,
								numericSeparatorInEscapeSequence: error$1,
								unexpectedNumericSeparator: error$1,
								invalidDigit: error$1,
								invalidCodePoint: error$1
							});
							if (!unterminatedCalled) throw new Error("Invalid raw");
							node.value.cooked = firstInvalidLoc ? null : str;
						}) },
						tail: { default: !1 }
					}
				}), defineType("TemplateLiteral", {
					visitor: ["quasis", "expressions"],
					aliases: ["Expression", "Literal"],
					fields: {
						quasis: (0, _utils.validateArrayOfType)("TemplateElement"),
						expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node, key, val) {
							if (node.quasis.length !== val.length + 1) throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);
						}) }
					}
				}), defineType("YieldExpression", {
					builder: ["argument", "delegate"],
					visitor: ["argument"],
					aliases: ["Expression", "Terminatorless"],
					fields: {
						delegate: {
							validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
								if (val && !node.argument) throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
							}, { type: "boolean" })) : (0, _utils.assertValueType)("boolean"),
							default: !1
						},
						argument: {
							optional: !0,
							validate: (0, _utils.assertNodeType)("Expression")
						}
					}
				}), defineType("AwaitExpression", {
					builder: ["argument"],
					visitor: ["argument"],
					aliases: ["Expression", "Terminatorless"],
					fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } }
				}), defineType("Import", { aliases: ["Expression"] }), defineType("BigIntLiteral", {
					builder: ["value"],
					fields: { value: { validate: (0, _utils.assertValueType)("string") } },
					aliases: [
						"Expression",
						"Pureish",
						"Literal",
						"Immutable"
					]
				}), defineType("ExportNamespaceSpecifier", {
					visitor: ["exported"],
					aliases: ["ModuleSpecifier"],
					fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } }
				}), defineType("OptionalMemberExpression", {
					builder: [
						"object",
						"property",
						"computed",
						"optional"
					],
					visitor: ["object", "property"],
					aliases: ["Expression"],
					fields: {
						object: { validate: (0, _utils.assertNodeType)("Expression") },
						property: { validate: function() {
							const normal = (0, _utils.assertNodeType)("Identifier"), computed = (0, _utils.assertNodeType)("Expression");
							return Object.assign(function(node, key, val) {
								(node.computed ? computed : normal)(node, key, val);
							}, { oneOfNodeTypes: ["Expression", "Identifier"] });
						}() },
						computed: { default: !1 },
						optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") }
					}
				}), defineType("OptionalCallExpression", {
					visitor: [
						"callee",
						"arguments",
						"typeParameters",
						"typeArguments"
					],
					builder: [
						"callee",
						"arguments",
						"optional"
					],
					aliases: ["Expression"],
					fields: {
						callee: { validate: (0, _utils.assertNodeType)("Expression") },
						arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"),
						optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") },
						typeArguments: {
							validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
							optional: !0
						},
						typeParameters: {
							validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
							optional: !0
						}
					}
				}), defineType("ClassProperty", {
					visitor: [
						"decorators",
						"key",
						"typeAnnotation",
						"value"
					],
					builder: [
						"key",
						"value",
						"typeAnnotation",
						"decorators",
						"computed",
						"static"
					],
					aliases: ["Property"],
					fields: Object.assign({}, classMethodOrPropertyCommon(), {
						value: {
							validate: (0, _utils.assertNodeType)("Expression"),
							optional: !0
						},
						definite: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						typeAnnotation: {
							validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
							optional: !0
						},
						decorators: {
							validate: (0, _utils.arrayOfType)("Decorator"),
							optional: !0
						},
						readonly: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						declare: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						variance: {
							validate: (0, _utils.assertNodeType)("Variance"),
							optional: !0
						}
					})
				}), defineType("ClassAccessorProperty", {
					visitor: [
						"decorators",
						"key",
						"typeAnnotation",
						"value"
					],
					builder: [
						"key",
						"value",
						"typeAnnotation",
						"decorators",
						"computed",
						"static"
					],
					aliases: ["Property", "Accessor"],
					fields: Object.assign({}, classMethodOrPropertyCommon(), {
						key: { validate: (0, _utils.chain)(function() {
							const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
							return function(node, key, val) {
								(node.computed ? computed : normal)(node, key, val);
							};
						}(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName")) },
						value: {
							validate: (0, _utils.assertNodeType)("Expression"),
							optional: !0
						},
						definite: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						typeAnnotation: {
							validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
							optional: !0
						},
						decorators: {
							validate: (0, _utils.arrayOfType)("Decorator"),
							optional: !0
						},
						readonly: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						declare: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						variance: {
							validate: (0, _utils.assertNodeType)("Variance"),
							optional: !0
						}
					})
				}), defineType("ClassPrivateProperty", {
					visitor: [
						"decorators",
						"key",
						"typeAnnotation",
						"value"
					],
					builder: [
						"key",
						"value",
						"decorators",
						"static"
					],
					aliases: ["Property", "Private"],
					fields: {
						key: { validate: (0, _utils.assertNodeType)("PrivateName") },
						value: {
							validate: (0, _utils.assertNodeType)("Expression"),
							optional: !0
						},
						typeAnnotation: {
							validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
							optional: !0
						},
						decorators: {
							validate: (0, _utils.arrayOfType)("Decorator"),
							optional: !0
						},
						static: {
							validate: (0, _utils.assertValueType)("boolean"),
							default: !1
						},
						readonly: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						definite: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						variance: {
							validate: (0, _utils.assertNodeType)("Variance"),
							optional: !0
						}
					}
				}), defineType("ClassPrivateMethod", {
					builder: [
						"kind",
						"key",
						"params",
						"body",
						"static"
					],
					visitor: [
						"decorators",
						"key",
						"typeParameters",
						"params",
						"returnType",
						"body"
					],
					aliases: [
						"Function",
						"Scopable",
						"BlockParent",
						"FunctionParent",
						"Method",
						"Private"
					],
					fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
						kind: {
							validate: (0, _utils.assertOneOf)("get", "set", "method"),
							default: "method"
						},
						key: { validate: (0, _utils.assertNodeType)("PrivateName") },
						body: { validate: (0, _utils.assertNodeType)("BlockStatement") }
					})
				}), defineType("PrivateName", {
					visitor: ["id"],
					aliases: ["Private"],
					fields: { id: { validate: (0, _utils.assertNodeType)("Identifier") } }
				}), defineType("StaticBlock", {
					visitor: ["body"],
					fields: { body: (0, _utils.validateArrayOfType)("Statement") },
					aliases: [
						"Scopable",
						"BlockParent",
						"FunctionParent"
					]
				});
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.DEPRECATED_ALIASES = void 0;
				exports$1.DEPRECATED_ALIASES = { ModuleDeclaration: "ImportOrExportDeclaration" };
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/experimental.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__$1) => {
				"use strict";
				var _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
				(0, _utils.default)("ArgumentPlaceholder", {}), (0, _utils.default)("BindExpression", {
					visitor: ["object", "callee"],
					aliases: ["Expression"],
					fields: process.env.BABEL_TYPES_8_BREAKING ? {
						object: { validate: (0, _utils.assertNodeType)("Expression") },
						callee: { validate: (0, _utils.assertNodeType)("Expression") }
					} : {
						object: { validate: Object.assign(() => {}, { oneOfNodeTypes: ["Expression"] }) },
						callee: { validate: Object.assign(() => {}, { oneOfNodeTypes: ["Expression"] }) }
					}
				}), (0, _utils.default)("ImportAttribute", {
					visitor: ["key", "value"],
					fields: {
						key: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") },
						value: { validate: (0, _utils.assertNodeType)("StringLiteral") }
					}
				}), (0, _utils.default)("Decorator", {
					visitor: ["expression"],
					fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }
				}), (0, _utils.default)("DoExpression", {
					visitor: ["body"],
					builder: ["body", "async"],
					aliases: ["Expression"],
					fields: {
						body: { validate: (0, _utils.assertNodeType)("BlockStatement") },
						async: {
							validate: (0, _utils.assertValueType)("boolean"),
							default: !1
						}
					}
				}), (0, _utils.default)("ExportDefaultSpecifier", {
					visitor: ["exported"],
					aliases: ["ModuleSpecifier"],
					fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } }
				}), (0, _utils.default)("RecordExpression", {
					visitor: ["properties"],
					aliases: ["Expression"],
					fields: { properties: (0, _utils.validateArrayOfType)("ObjectProperty", "SpreadElement") }
				}), (0, _utils.default)("TupleExpression", {
					fields: { elements: {
						validate: (0, _utils.arrayOfType)("Expression", "SpreadElement"),
						default: []
					} },
					visitor: ["elements"],
					aliases: ["Expression"]
				}), (0, _utils.default)("DecimalLiteral", {
					builder: ["value"],
					fields: { value: { validate: (0, _utils.assertValueType)("string") } },
					aliases: [
						"Expression",
						"Pureish",
						"Literal",
						"Immutable"
					]
				}), (0, _utils.default)("ModuleExpression", {
					visitor: ["body"],
					fields: { body: { validate: (0, _utils.assertNodeType)("Program") } },
					aliases: ["Expression"]
				}), (0, _utils.default)("TopicReference", { aliases: ["Expression"] }), (0, _utils.default)("PipelineTopicExpression", {
					builder: ["expression"],
					visitor: ["expression"],
					fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } },
					aliases: ["Expression"]
				}), (0, _utils.default)("PipelineBareFunction", {
					builder: ["callee"],
					visitor: ["callee"],
					fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") } },
					aliases: ["Expression"]
				}), (0, _utils.default)("PipelinePrimaryTopicReference", { aliases: ["Expression"] });
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/flow.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__$1) => {
				"use strict";
				var _core = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
				const defineType = (0, _utils.defineAliasedType)("Flow"), defineInterfaceishType = (name) => {
					const isDeclareClass = "DeclareClass" === name;
					defineType(name, {
						builder: [
							"id",
							"typeParameters",
							"extends",
							"body"
						],
						visitor: [
							"id",
							"typeParameters",
							"extends",
							...isDeclareClass ? ["mixins", "implements"] : [],
							"body"
						],
						aliases: [
							"FlowDeclaration",
							"Statement",
							"Declaration"
						],
						fields: Object.assign({
							id: (0, _utils.validateType)("Identifier"),
							typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
							extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends"))
						}, isDeclareClass ? {
							mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
							implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements"))
						} : {}, { body: (0, _utils.validateType)("ObjectTypeAnnotation") })
					});
				};
				defineType("AnyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ArrayTypeAnnotation", {
					visitor: ["elementType"],
					aliases: ["FlowType"],
					fields: { elementType: (0, _utils.validateType)("FlowType") }
				}), defineType("BooleanTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("BooleanLiteralTypeAnnotation", {
					builder: ["value"],
					aliases: ["FlowType"],
					fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) }
				}), defineType("NullLiteralTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ClassImplements", {
					visitor: ["id", "typeParameters"],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
					}
				}), defineInterfaceishType("DeclareClass"), defineType("DeclareFunction", {
					visitor: ["id"],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")
					}
				}), defineInterfaceishType("DeclareInterface"), defineType("DeclareModule", {
					builder: [
						"id",
						"body",
						"kind"
					],
					visitor: ["id", "body"],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: {
						id: (0, _utils.validateType)("Identifier", "StringLiteral"),
						body: (0, _utils.validateType)("BlockStatement"),
						kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES"))
					}
				}), defineType("DeclareModuleExports", {
					visitor: ["typeAnnotation"],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: { typeAnnotation: (0, _utils.validateType)("TypeAnnotation") }
				}), defineType("DeclareTypeAlias", {
					visitor: [
						"id",
						"typeParameters",
						"right"
					],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
						right: (0, _utils.validateType)("FlowType")
					}
				}), defineType("DeclareOpaqueType", {
					visitor: [
						"id",
						"typeParameters",
						"supertype"
					],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
						supertype: (0, _utils.validateOptionalType)("FlowType"),
						impltype: (0, _utils.validateOptionalType)("FlowType")
					}
				}), defineType("DeclareVariable", {
					visitor: ["id"],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: { id: (0, _utils.validateType)("Identifier") }
				}), defineType("DeclareExportDeclaration", {
					visitor: [
						"declaration",
						"specifiers",
						"source",
						"attributes"
					],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: Object.assign({
						declaration: (0, _utils.validateOptionalType)("Flow"),
						specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ExportSpecifier", "ExportNamespaceSpecifier")),
						source: (0, _utils.validateOptionalType)("StringLiteral"),
						default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
					}, _core.importAttributes)
				}), defineType("DeclareExportAllDeclaration", {
					visitor: ["source", "attributes"],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: Object.assign({
						source: (0, _utils.validateType)("StringLiteral"),
						exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
					}, _core.importAttributes)
				}), defineType("DeclaredPredicate", {
					visitor: ["value"],
					aliases: ["FlowPredicate"],
					fields: { value: (0, _utils.validateType)("Flow") }
				}), defineType("ExistsTypeAnnotation", { aliases: ["FlowType"] }), defineType("FunctionTypeAnnotation", {
					visitor: [
						"typeParameters",
						"params",
						"rest",
						"returnType"
					],
					aliases: ["FlowType"],
					fields: {
						typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
						params: (0, _utils.validateArrayOfType)("FunctionTypeParam"),
						rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
						this: (0, _utils.validateOptionalType)("FunctionTypeParam"),
						returnType: (0, _utils.validateType)("FlowType")
					}
				}), defineType("FunctionTypeParam", {
					visitor: ["name", "typeAnnotation"],
					fields: {
						name: (0, _utils.validateOptionalType)("Identifier"),
						typeAnnotation: (0, _utils.validateType)("FlowType"),
						optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
					}
				}), defineType("GenericTypeAnnotation", {
					visitor: ["id", "typeParameters"],
					aliases: ["FlowType"],
					fields: {
						id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"),
						typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
					}
				}), defineType("InferredPredicate", { aliases: ["FlowPredicate"] }), defineType("InterfaceExtends", {
					visitor: ["id", "typeParameters"],
					fields: {
						id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"),
						typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
					}
				}), defineInterfaceishType("InterfaceDeclaration"), defineType("InterfaceTypeAnnotation", {
					visitor: ["extends", "body"],
					aliases: ["FlowType"],
					fields: {
						extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
						body: (0, _utils.validateType)("ObjectTypeAnnotation")
					}
				}), defineType("IntersectionTypeAnnotation", {
					visitor: ["types"],
					aliases: ["FlowType"],
					fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) }
				}), defineType("MixedTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EmptyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("NullableTypeAnnotation", {
					visitor: ["typeAnnotation"],
					aliases: ["FlowType"],
					fields: { typeAnnotation: (0, _utils.validateType)("FlowType") }
				}), defineType("NumberLiteralTypeAnnotation", {
					builder: ["value"],
					aliases: ["FlowType"],
					fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("number")) }
				}), defineType("NumberTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ObjectTypeAnnotation", {
					visitor: [
						"properties",
						"indexers",
						"callProperties",
						"internalSlots"
					],
					aliases: ["FlowType"],
					builder: [
						"properties",
						"indexers",
						"callProperties",
						"internalSlots",
						"exact"
					],
					fields: {
						properties: (0, _utils.validate)((0, _utils.arrayOfType)("ObjectTypeProperty", "ObjectTypeSpreadProperty")),
						indexers: {
							validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"),
							optional: !0,
							default: []
						},
						callProperties: {
							validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"),
							optional: !0,
							default: []
						},
						internalSlots: {
							validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"),
							optional: !0,
							default: []
						},
						exact: {
							validate: (0, _utils.assertValueType)("boolean"),
							default: !1
						},
						inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
					}
				}), defineType("ObjectTypeInternalSlot", {
					visitor: ["id", "value"],
					builder: [
						"id",
						"value",
						"optional",
						"static",
						"method"
					],
					aliases: ["UserWhitespacable"],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						value: (0, _utils.validateType)("FlowType"),
						optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
						static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
						method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
					}
				}), defineType("ObjectTypeCallProperty", {
					visitor: ["value"],
					aliases: ["UserWhitespacable"],
					fields: {
						value: (0, _utils.validateType)("FlowType"),
						static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
					}
				}), defineType("ObjectTypeIndexer", {
					visitor: [
						"variance",
						"id",
						"key",
						"value"
					],
					builder: [
						"id",
						"key",
						"value",
						"variance"
					],
					aliases: ["UserWhitespacable"],
					fields: {
						id: (0, _utils.validateOptionalType)("Identifier"),
						key: (0, _utils.validateType)("FlowType"),
						value: (0, _utils.validateType)("FlowType"),
						static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
						variance: (0, _utils.validateOptionalType)("Variance")
					}
				}), defineType("ObjectTypeProperty", {
					visitor: [
						"key",
						"value",
						"variance"
					],
					aliases: ["UserWhitespacable"],
					fields: {
						key: (0, _utils.validateType)("Identifier", "StringLiteral"),
						value: (0, _utils.validateType)("FlowType"),
						kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")),
						static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
						proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
						optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
						variance: (0, _utils.validateOptionalType)("Variance"),
						method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
					}
				}), defineType("ObjectTypeSpreadProperty", {
					visitor: ["argument"],
					aliases: ["UserWhitespacable"],
					fields: { argument: (0, _utils.validateType)("FlowType") }
				}), defineType("OpaqueType", {
					visitor: [
						"id",
						"typeParameters",
						"supertype",
						"impltype"
					],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
						supertype: (0, _utils.validateOptionalType)("FlowType"),
						impltype: (0, _utils.validateType)("FlowType")
					}
				}), defineType("QualifiedTypeIdentifier", {
					visitor: ["qualification", "id"],
					builder: ["id", "qualification"],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						qualification: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier")
					}
				}), defineType("StringLiteralTypeAnnotation", {
					builder: ["value"],
					aliases: ["FlowType"],
					fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("string")) }
				}), defineType("StringTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("SymbolTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ThisTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("TupleTypeAnnotation", {
					visitor: ["types"],
					aliases: ["FlowType"],
					fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) }
				}), defineType("TypeofTypeAnnotation", {
					visitor: ["argument"],
					aliases: ["FlowType"],
					fields: { argument: (0, _utils.validateType)("FlowType") }
				}), defineType("TypeAlias", {
					visitor: [
						"id",
						"typeParameters",
						"right"
					],
					aliases: [
						"FlowDeclaration",
						"Statement",
						"Declaration"
					],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
						right: (0, _utils.validateType)("FlowType")
					}
				}), defineType("TypeAnnotation", {
					visitor: ["typeAnnotation"],
					fields: { typeAnnotation: (0, _utils.validateType)("FlowType") }
				}), defineType("TypeCastExpression", {
					visitor: ["expression", "typeAnnotation"],
					aliases: ["ExpressionWrapper", "Expression"],
					fields: {
						expression: (0, _utils.validateType)("Expression"),
						typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
					}
				}), defineType("TypeParameter", {
					visitor: [
						"bound",
						"default",
						"variance"
					],
					fields: {
						name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
						bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
						default: (0, _utils.validateOptionalType)("FlowType"),
						variance: (0, _utils.validateOptionalType)("Variance")
					}
				}), defineType("TypeParameterDeclaration", {
					visitor: ["params"],
					fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter")) }
				}), defineType("TypeParameterInstantiation", {
					visitor: ["params"],
					fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) }
				}), defineType("UnionTypeAnnotation", {
					visitor: ["types"],
					aliases: ["FlowType"],
					fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) }
				}), defineType("Variance", {
					builder: ["kind"],
					fields: { kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus")) }
				}), defineType("VoidTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EnumDeclaration", {
					aliases: ["Statement", "Declaration"],
					visitor: ["id", "body"],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						body: (0, _utils.validateType)("EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody")
					}
				}), defineType("EnumBooleanBody", {
					aliases: ["EnumBody"],
					visitor: ["members"],
					fields: {
						explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
						members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),
						hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
					}
				}), defineType("EnumNumberBody", {
					aliases: ["EnumBody"],
					visitor: ["members"],
					fields: {
						explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
						members: (0, _utils.validateArrayOfType)("EnumNumberMember"),
						hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
					}
				}), defineType("EnumStringBody", {
					aliases: ["EnumBody"],
					visitor: ["members"],
					fields: {
						explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
						members: (0, _utils.validateArrayOfType)("EnumStringMember", "EnumDefaultedMember"),
						hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
					}
				}), defineType("EnumSymbolBody", {
					aliases: ["EnumBody"],
					visitor: ["members"],
					fields: {
						members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),
						hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
					}
				}), defineType("EnumBooleanMember", {
					aliases: ["EnumMember"],
					visitor: ["id"],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						init: (0, _utils.validateType)("BooleanLiteral")
					}
				}), defineType("EnumNumberMember", {
					aliases: ["EnumMember"],
					visitor: ["id", "init"],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						init: (0, _utils.validateType)("NumericLiteral")
					}
				}), defineType("EnumStringMember", {
					aliases: ["EnumMember"],
					visitor: ["id", "init"],
					fields: {
						id: (0, _utils.validateType)("Identifier"),
						init: (0, _utils.validateType)("StringLiteral")
					}
				}), defineType("EnumDefaultedMember", {
					aliases: ["EnumMember"],
					visitor: ["id"],
					fields: { id: (0, _utils.validateType)("Identifier") }
				}), defineType("IndexedAccessType", {
					visitor: ["objectType", "indexType"],
					aliases: ["FlowType"],
					fields: {
						objectType: (0, _utils.validateType)("FlowType"),
						indexType: (0, _utils.validateType)("FlowType")
					}
				}), defineType("OptionalIndexedAccessType", {
					visitor: ["objectType", "indexType"],
					aliases: ["FlowType"],
					fields: {
						objectType: (0, _utils.validateType)("FlowType"),
						indexType: (0, _utils.validateType)("FlowType"),
						optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
					}
				});
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), Object.defineProperty(exports$1, "ALIAS_KEYS", {
					enumerable: !0,
					get: function() {
						return _utils.ALIAS_KEYS;
					}
				}), Object.defineProperty(exports$1, "BUILDER_KEYS", {
					enumerable: !0,
					get: function() {
						return _utils.BUILDER_KEYS;
					}
				}), Object.defineProperty(exports$1, "DEPRECATED_ALIASES", {
					enumerable: !0,
					get: function() {
						return _deprecatedAliases.DEPRECATED_ALIASES;
					}
				}), Object.defineProperty(exports$1, "DEPRECATED_KEYS", {
					enumerable: !0,
					get: function() {
						return _utils.DEPRECATED_KEYS;
					}
				}), Object.defineProperty(exports$1, "FLIPPED_ALIAS_KEYS", {
					enumerable: !0,
					get: function() {
						return _utils.FLIPPED_ALIAS_KEYS;
					}
				}), Object.defineProperty(exports$1, "NODE_FIELDS", {
					enumerable: !0,
					get: function() {
						return _utils.NODE_FIELDS;
					}
				}), Object.defineProperty(exports$1, "NODE_PARENT_VALIDATIONS", {
					enumerable: !0,
					get: function() {
						return _utils.NODE_PARENT_VALIDATIONS;
					}
				}), Object.defineProperty(exports$1, "PLACEHOLDERS", {
					enumerable: !0,
					get: function() {
						return _placeholders.PLACEHOLDERS;
					}
				}), Object.defineProperty(exports$1, "PLACEHOLDERS_ALIAS", {
					enumerable: !0,
					get: function() {
						return _placeholders.PLACEHOLDERS_ALIAS;
					}
				}), Object.defineProperty(exports$1, "PLACEHOLDERS_FLIPPED_ALIAS", {
					enumerable: !0,
					get: function() {
						return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
					}
				}), exports$1.TYPES = void 0, Object.defineProperty(exports$1, "VISITOR_KEYS", {
					enumerable: !0,
					get: function() {
						return _utils.VISITOR_KEYS;
					}
				}), __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/flow.js"), __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/jsx.js"), __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/misc.js"), __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/experimental.js"), __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/typescript.js");
				var _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js"), _deprecatedAliases = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js");
				Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
					_utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
				});
				exports$1.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/jsx.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__$1) => {
				"use strict";
				var _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
				const defineType = (0, _utils.defineAliasedType)("JSX");
				defineType("JSXAttribute", {
					visitor: ["name", "value"],
					aliases: ["Immutable"],
					fields: {
						name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName") },
						value: {
							optional: !0,
							validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
						}
					}
				}), defineType("JSXClosingElement", {
					visitor: ["name"],
					aliases: ["Immutable"],
					fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") } }
				}), defineType("JSXElement", {
					builder: [
						"openingElement",
						"closingElement",
						"children",
						"selfClosing"
					],
					visitor: [
						"openingElement",
						"children",
						"closingElement"
					],
					aliases: ["Immutable", "Expression"],
					fields: Object.assign({
						openingElement: { validate: (0, _utils.assertNodeType)("JSXOpeningElement") },
						closingElement: {
							optional: !0,
							validate: (0, _utils.assertNodeType)("JSXClosingElement")
						},
						children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
					}, { selfClosing: {
						validate: (0, _utils.assertValueType)("boolean"),
						optional: !0
					} })
				}), defineType("JSXEmptyExpression", {}), defineType("JSXExpressionContainer", {
					visitor: ["expression"],
					aliases: ["Immutable"],
					fields: { expression: { validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression") } }
				}), defineType("JSXSpreadChild", {
					visitor: ["expression"],
					aliases: ["Immutable"],
					fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }
				}), defineType("JSXIdentifier", {
					builder: ["name"],
					fields: { name: { validate: (0, _utils.assertValueType)("string") } }
				}), defineType("JSXMemberExpression", {
					visitor: ["object", "property"],
					fields: {
						object: { validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier") },
						property: { validate: (0, _utils.assertNodeType)("JSXIdentifier") }
					}
				}), defineType("JSXNamespacedName", {
					visitor: ["namespace", "name"],
					fields: {
						namespace: { validate: (0, _utils.assertNodeType)("JSXIdentifier") },
						name: { validate: (0, _utils.assertNodeType)("JSXIdentifier") }
					}
				}), defineType("JSXOpeningElement", {
					builder: [
						"name",
						"attributes",
						"selfClosing"
					],
					visitor: ["name", "attributes"],
					aliases: ["Immutable"],
					fields: {
						name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") },
						selfClosing: { default: !1 },
						attributes: (0, _utils.validateArrayOfType)("JSXAttribute", "JSXSpreadAttribute"),
						typeParameters: {
							validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
							optional: !0
						}
					}
				}), defineType("JSXSpreadAttribute", {
					visitor: ["argument"],
					fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } }
				}), defineType("JSXText", {
					aliases: ["Immutable"],
					builder: ["value"],
					fields: { value: { validate: (0, _utils.assertValueType)("string") } }
				}), defineType("JSXFragment", {
					builder: [
						"openingFragment",
						"closingFragment",
						"children"
					],
					visitor: [
						"openingFragment",
						"children",
						"closingFragment"
					],
					aliases: ["Immutable", "Expression"],
					fields: {
						openingFragment: { validate: (0, _utils.assertNodeType)("JSXOpeningFragment") },
						closingFragment: { validate: (0, _utils.assertNodeType)("JSXClosingFragment") },
						children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")
					}
				}), defineType("JSXOpeningFragment", { aliases: ["Immutable"] }), defineType("JSXClosingFragment", { aliases: ["Immutable"] });
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/misc.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__$1) => {
				"use strict";
				var _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js"), _core = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js");
				const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
				defineType("Noop", { visitor: [] }), defineType("Placeholder", {
					visitor: [],
					builder: ["expectedNode", "name"],
					fields: Object.assign({
						name: { validate: (0, _utils.assertNodeType)("Identifier") },
						expectedNode: { validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS) }
					}, (0, _core.patternLikeCommon)())
				}), defineType("V8IntrinsicIdentifier", {
					builder: ["name"],
					fields: { name: { validate: (0, _utils.assertValueType)("string") } }
				});
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.PLACEHOLDERS_FLIPPED_ALIAS = exports$1.PLACEHOLDERS_ALIAS = exports$1.PLACEHOLDERS = void 0;
				var _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
				const PLACEHOLDERS = exports$1.PLACEHOLDERS = [
					"Identifier",
					"StringLiteral",
					"Expression",
					"Statement",
					"Declaration",
					"BlockStatement",
					"ClassBody",
					"Pattern"
				], PLACEHOLDERS_ALIAS = exports$1.PLACEHOLDERS_ALIAS = {
					Declaration: ["Statement"],
					Pattern: ["PatternLike", "LVal"]
				};
				for (const type$1 of PLACEHOLDERS) {
					const alias = _utils.ALIAS_KEYS[type$1];
					null != alias && alias.length && (PLACEHOLDERS_ALIAS[type$1] = alias);
				}
				const PLACEHOLDERS_FLIPPED_ALIAS = exports$1.PLACEHOLDERS_FLIPPED_ALIAS = {};
				Object.keys(PLACEHOLDERS_ALIAS).forEach((type$1) => {
					PLACEHOLDERS_ALIAS[type$1].forEach((alias) => {
						hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias) || (PLACEHOLDERS_FLIPPED_ALIAS[alias] = []), PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type$1);
					});
				});
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/typescript.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__$1) => {
				"use strict";
				var _utils = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _core = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), _is = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js");
				const defineType = (0, _utils.defineAliasedType)("TypeScript"), bool = (0, _utils.assertValueType)("boolean"), tSFunctionTypeAnnotationCommon = () => ({
					returnType: {
						validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
						optional: !0
					},
					typeParameters: {
						validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
						optional: !0
					}
				});
				defineType("TSParameterProperty", {
					aliases: ["LVal"],
					visitor: ["parameter"],
					fields: {
						accessibility: {
							validate: (0, _utils.assertOneOf)("public", "private", "protected"),
							optional: !0
						},
						readonly: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						parameter: { validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern") },
						override: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						decorators: {
							validate: (0, _utils.arrayOfType)("Decorator"),
							optional: !0
						}
					}
				}), defineType("TSDeclareFunction", {
					aliases: ["Statement", "Declaration"],
					visitor: [
						"id",
						"typeParameters",
						"params",
						"returnType"
					],
					fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon())
				}), defineType("TSDeclareMethod", {
					visitor: [
						"decorators",
						"key",
						"typeParameters",
						"params",
						"returnType"
					],
					fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon())
				}), defineType("TSQualifiedName", {
					aliases: ["TSEntityName"],
					visitor: ["left", "right"],
					fields: {
						left: (0, _utils.validateType)("TSEntityName"),
						right: (0, _utils.validateType)("Identifier")
					}
				});
				const signatureDeclarationCommon = () => ({
					typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
					parameters: (0, _utils.validateArrayOfType)("ArrayPattern", "Identifier", "ObjectPattern", "RestElement"),
					typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
				}), callConstructSignatureDeclaration = {
					aliases: ["TSTypeElement"],
					visitor: [
						"typeParameters",
						"parameters",
						"typeAnnotation"
					],
					fields: signatureDeclarationCommon()
				};
				defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration), defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
				const namedTypeElementCommon = () => ({
					key: (0, _utils.validateType)("Expression"),
					computed: { default: !1 },
					optional: (0, _utils.validateOptional)(bool)
				});
				defineType("TSPropertySignature", {
					aliases: ["TSTypeElement"],
					visitor: ["key", "typeAnnotation"],
					fields: Object.assign({}, namedTypeElementCommon(), {
						readonly: (0, _utils.validateOptional)(bool),
						typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
						kind: { validate: (0, _utils.assertOneOf)("get", "set") }
					})
				}), defineType("TSMethodSignature", {
					aliases: ["TSTypeElement"],
					visitor: [
						"key",
						"typeParameters",
						"parameters",
						"typeAnnotation"
					],
					fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), { kind: { validate: (0, _utils.assertOneOf)("method", "get", "set") } })
				}), defineType("TSIndexSignature", {
					aliases: ["TSTypeElement"],
					visitor: ["parameters", "typeAnnotation"],
					fields: {
						readonly: (0, _utils.validateOptional)(bool),
						static: (0, _utils.validateOptional)(bool),
						parameters: (0, _utils.validateArrayOfType)("Identifier"),
						typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
					}
				});
				const tsKeywordTypes = [
					"TSAnyKeyword",
					"TSBooleanKeyword",
					"TSBigIntKeyword",
					"TSIntrinsicKeyword",
					"TSNeverKeyword",
					"TSNullKeyword",
					"TSNumberKeyword",
					"TSObjectKeyword",
					"TSStringKeyword",
					"TSSymbolKeyword",
					"TSUndefinedKeyword",
					"TSUnknownKeyword",
					"TSVoidKeyword"
				];
				for (const type$1 of tsKeywordTypes) defineType(type$1, {
					aliases: ["TSType", "TSBaseType"],
					visitor: [],
					fields: {}
				});
				defineType("TSThisType", {
					aliases: ["TSType", "TSBaseType"],
					visitor: [],
					fields: {}
				});
				const fnOrCtrBase = {
					aliases: ["TSType"],
					visitor: [
						"typeParameters",
						"parameters",
						"typeAnnotation"
					]
				};
				defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, { fields: signatureDeclarationCommon() })), defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, { fields: Object.assign({}, signatureDeclarationCommon(), { abstract: (0, _utils.validateOptional)(bool) }) })), defineType("TSTypeReference", {
					aliases: ["TSType"],
					visitor: ["typeName", "typeParameters"],
					fields: {
						typeName: (0, _utils.validateType)("TSEntityName"),
						typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
					}
				}), defineType("TSTypePredicate", {
					aliases: ["TSType"],
					visitor: ["parameterName", "typeAnnotation"],
					builder: [
						"parameterName",
						"typeAnnotation",
						"asserts"
					],
					fields: {
						parameterName: (0, _utils.validateType)("Identifier", "TSThisType"),
						typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
						asserts: (0, _utils.validateOptional)(bool)
					}
				}), defineType("TSTypeQuery", {
					aliases: ["TSType"],
					visitor: ["exprName", "typeParameters"],
					fields: {
						exprName: (0, _utils.validateType)("TSEntityName", "TSImportType"),
						typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
					}
				}), defineType("TSTypeLiteral", {
					aliases: ["TSType"],
					visitor: ["members"],
					fields: { members: (0, _utils.validateArrayOfType)("TSTypeElement") }
				}), defineType("TSArrayType", {
					aliases: ["TSType"],
					visitor: ["elementType"],
					fields: { elementType: (0, _utils.validateType)("TSType") }
				}), defineType("TSTupleType", {
					aliases: ["TSType"],
					visitor: ["elementTypes"],
					fields: { elementTypes: (0, _utils.validateArrayOfType)("TSType", "TSNamedTupleMember") }
				}), defineType("TSOptionalType", {
					aliases: ["TSType"],
					visitor: ["typeAnnotation"],
					fields: { typeAnnotation: (0, _utils.validateType)("TSType") }
				}), defineType("TSRestType", {
					aliases: ["TSType"],
					visitor: ["typeAnnotation"],
					fields: { typeAnnotation: (0, _utils.validateType)("TSType") }
				}), defineType("TSNamedTupleMember", {
					visitor: ["label", "elementType"],
					builder: [
						"label",
						"elementType",
						"optional"
					],
					fields: {
						label: (0, _utils.validateType)("Identifier"),
						optional: {
							validate: bool,
							default: !1
						},
						elementType: (0, _utils.validateType)("TSType")
					}
				});
				const unionOrIntersection = {
					aliases: ["TSType"],
					visitor: ["types"],
					fields: { types: (0, _utils.validateArrayOfType)("TSType") }
				};
				defineType("TSUnionType", unionOrIntersection), defineType("TSIntersectionType", unionOrIntersection), defineType("TSConditionalType", {
					aliases: ["TSType"],
					visitor: [
						"checkType",
						"extendsType",
						"trueType",
						"falseType"
					],
					fields: {
						checkType: (0, _utils.validateType)("TSType"),
						extendsType: (0, _utils.validateType)("TSType"),
						trueType: (0, _utils.validateType)("TSType"),
						falseType: (0, _utils.validateType)("TSType")
					}
				}), defineType("TSInferType", {
					aliases: ["TSType"],
					visitor: ["typeParameter"],
					fields: { typeParameter: (0, _utils.validateType)("TSTypeParameter") }
				}), defineType("TSParenthesizedType", {
					aliases: ["TSType"],
					visitor: ["typeAnnotation"],
					fields: { typeAnnotation: (0, _utils.validateType)("TSType") }
				}), defineType("TSTypeOperator", {
					aliases: ["TSType"],
					visitor: ["typeAnnotation"],
					fields: {
						operator: (0, _utils.validate)((0, _utils.assertValueType)("string")),
						typeAnnotation: (0, _utils.validateType)("TSType")
					}
				}), defineType("TSIndexedAccessType", {
					aliases: ["TSType"],
					visitor: ["objectType", "indexType"],
					fields: {
						objectType: (0, _utils.validateType)("TSType"),
						indexType: (0, _utils.validateType)("TSType")
					}
				}), defineType("TSMappedType", {
					aliases: ["TSType"],
					visitor: [
						"typeParameter",
						"nameType",
						"typeAnnotation"
					],
					builder: [
						"typeParameter",
						"typeAnnotation",
						"nameType"
					],
					fields: Object.assign({}, { typeParameter: (0, _utils.validateType)("TSTypeParameter") }, {
						readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(!0, !1, "+", "-")),
						optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(!0, !1, "+", "-")),
						typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
						nameType: (0, _utils.validateOptionalType)("TSType")
					})
				}), defineType("TSLiteralType", {
					aliases: ["TSType", "TSBaseType"],
					visitor: ["literal"],
					fields: { literal: { validate: function() {
						const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral"), unaryOperator = (0, _utils.assertOneOf)("-"), literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
						function validator(parent, key, node) {
							(0, _is.default)("UnaryExpression", node) ? (unaryOperator(node, "operator", node.operator), unaryExpression(node, "argument", node.argument)) : literal(parent, key, node);
						}
						return validator.oneOfNodeTypes = [
							"NumericLiteral",
							"StringLiteral",
							"BooleanLiteral",
							"BigIntLiteral",
							"TemplateLiteral",
							"UnaryExpression"
						], validator;
					}() } }
				});
				defineType("TSExpressionWithTypeArguments", {
					aliases: ["TSType"],
					visitor: ["expression", "typeParameters"],
					fields: {
						expression: (0, _utils.validateType)("TSEntityName"),
						typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
					}
				}), defineType("TSInterfaceDeclaration", {
					aliases: ["Statement", "Declaration"],
					visitor: [
						"id",
						"typeParameters",
						"extends",
						"body"
					],
					fields: {
						declare: (0, _utils.validateOptional)(bool),
						id: (0, _utils.validateType)("Identifier"),
						typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
						extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),
						body: (0, _utils.validateType)("TSInterfaceBody")
					}
				}), defineType("TSInterfaceBody", {
					visitor: ["body"],
					fields: { body: (0, _utils.validateArrayOfType)("TSTypeElement") }
				}), defineType("TSTypeAliasDeclaration", {
					aliases: ["Statement", "Declaration"],
					visitor: [
						"id",
						"typeParameters",
						"typeAnnotation"
					],
					fields: {
						declare: (0, _utils.validateOptional)(bool),
						id: (0, _utils.validateType)("Identifier"),
						typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
						typeAnnotation: (0, _utils.validateType)("TSType")
					}
				}), defineType("TSInstantiationExpression", {
					aliases: ["Expression"],
					visitor: ["expression", "typeParameters"],
					fields: {
						expression: (0, _utils.validateType)("Expression"),
						typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
					}
				});
				const TSTypeExpression = {
					aliases: [
						"Expression",
						"LVal",
						"PatternLike"
					],
					visitor: ["expression", "typeAnnotation"],
					fields: {
						expression: (0, _utils.validateType)("Expression"),
						typeAnnotation: (0, _utils.validateType)("TSType")
					}
				};
				defineType("TSAsExpression", TSTypeExpression), defineType("TSSatisfiesExpression", TSTypeExpression), defineType("TSTypeAssertion", {
					aliases: [
						"Expression",
						"LVal",
						"PatternLike"
					],
					visitor: ["typeAnnotation", "expression"],
					fields: {
						typeAnnotation: (0, _utils.validateType)("TSType"),
						expression: (0, _utils.validateType)("Expression")
					}
				}), defineType("TSEnumDeclaration", {
					aliases: ["Statement", "Declaration"],
					visitor: ["id", "members"],
					fields: {
						declare: (0, _utils.validateOptional)(bool),
						const: (0, _utils.validateOptional)(bool),
						id: (0, _utils.validateType)("Identifier"),
						members: (0, _utils.validateArrayOfType)("TSEnumMember"),
						initializer: (0, _utils.validateOptionalType)("Expression")
					}
				}), defineType("TSEnumMember", {
					visitor: ["id", "initializer"],
					fields: {
						id: (0, _utils.validateType)("Identifier", "StringLiteral"),
						initializer: (0, _utils.validateOptionalType)("Expression")
					}
				}), defineType("TSModuleDeclaration", {
					aliases: ["Statement", "Declaration"],
					visitor: ["id", "body"],
					fields: Object.assign({
						kind: { validate: (0, _utils.assertOneOf)("global", "module", "namespace") },
						declare: (0, _utils.validateOptional)(bool)
					}, { global: (0, _utils.validateOptional)(bool) }, {
						id: (0, _utils.validateType)("Identifier", "StringLiteral"),
						body: (0, _utils.validateType)("TSModuleBlock", "TSModuleDeclaration")
					})
				}), defineType("TSModuleBlock", {
					aliases: [
						"Scopable",
						"Block",
						"BlockParent",
						"FunctionParent"
					],
					visitor: ["body"],
					fields: { body: (0, _utils.validateArrayOfType)("Statement") }
				}), defineType("TSImportType", {
					aliases: ["TSType"],
					visitor: [
						"argument",
						"qualifier",
						"typeParameters"
					],
					fields: {
						argument: (0, _utils.validateType)("StringLiteral"),
						qualifier: (0, _utils.validateOptionalType)("TSEntityName"),
						typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation"),
						options: {
							validate: (0, _utils.assertNodeType)("Expression"),
							optional: !0
						}
					}
				}), defineType("TSImportEqualsDeclaration", {
					aliases: ["Statement"],
					visitor: ["id", "moduleReference"],
					fields: {
						isExport: (0, _utils.validate)(bool),
						id: (0, _utils.validateType)("Identifier"),
						moduleReference: (0, _utils.validateType)("TSEntityName", "TSExternalModuleReference"),
						importKind: {
							validate: (0, _utils.assertOneOf)("type", "value"),
							optional: !0
						}
					}
				}), defineType("TSExternalModuleReference", {
					visitor: ["expression"],
					fields: { expression: (0, _utils.validateType)("StringLiteral") }
				}), defineType("TSNonNullExpression", {
					aliases: [
						"Expression",
						"LVal",
						"PatternLike"
					],
					visitor: ["expression"],
					fields: { expression: (0, _utils.validateType)("Expression") }
				}), defineType("TSExportAssignment", {
					aliases: ["Statement"],
					visitor: ["expression"],
					fields: { expression: (0, _utils.validateType)("Expression") }
				}), defineType("TSNamespaceExportDeclaration", {
					aliases: ["Statement"],
					visitor: ["id"],
					fields: { id: (0, _utils.validateType)("Identifier") }
				}), defineType("TSTypeAnnotation", {
					visitor: ["typeAnnotation"],
					fields: { typeAnnotation: { validate: (0, _utils.assertNodeType)("TSType") } }
				}), defineType("TSTypeParameterInstantiation", {
					visitor: ["params"],
					fields: { params: (0, _utils.validateArrayOfType)("TSType") }
				}), defineType("TSTypeParameterDeclaration", {
					visitor: ["params"],
					fields: { params: (0, _utils.validateArrayOfType)("TSTypeParameter") }
				}), defineType("TSTypeParameter", {
					builder: [
						"constraint",
						"default",
						"name"
					],
					visitor: ["constraint", "default"],
					fields: {
						name: { validate: (0, _utils.assertValueType)("string") },
						in: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						out: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						const: {
							validate: (0, _utils.assertValueType)("boolean"),
							optional: !0
						},
						constraint: {
							validate: (0, _utils.assertNodeType)("TSType"),
							optional: !0
						},
						default: {
							validate: (0, _utils.assertNodeType)("TSType"),
							optional: !0
						}
					}
				});
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.VISITOR_KEYS = exports$1.NODE_PARENT_VALIDATIONS = exports$1.NODE_FIELDS = exports$1.FLIPPED_ALIAS_KEYS = exports$1.DEPRECATED_KEYS = exports$1.BUILDER_KEYS = exports$1.ALIAS_KEYS = void 0, exports$1.arrayOf = arrayOf, exports$1.arrayOfType = arrayOfType, exports$1.assertEach = assertEach, exports$1.assertNodeOrValueType = function(...types$7) {
					function validate$1(node, key, val) {
						for (const type$1 of types$7) if (getType(val) === type$1 || (0, _is.default)(type$1, val)) return void (0, _validate.validateChild)(node, key, val);
						throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types$7)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
					}
					return validate$1.oneOfNodeOrValueTypes = types$7, validate$1;
				}, exports$1.assertNodeType = assertNodeType, exports$1.assertOneOf = function(...values) {
					function validate$1(node, key, val) {
						if (!values.includes(val)) throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
					}
					return validate$1.oneOf = values, validate$1;
				}, exports$1.assertOptionalChainStart = function() {
					return function(node) {
						var _current;
						let current = node;
						for (; node;) {
							const { type: type$1 } = current;
							if ("OptionalCallExpression" !== type$1) {
								if ("OptionalMemberExpression" !== type$1) break;
								if (current.optional) return;
								current = current.object;
							} else {
								if (current.optional) return;
								current = current.callee;
							}
						}
						throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${null == (_current = current) ? void 0 : _current.type}`);
					};
				}, exports$1.assertShape = function(shape) {
					function validate$1(node, key, val) {
						const errors$1 = [];
						for (const property of Object.keys(shape)) try {
							(0, _validate.validateField)(node, property, val[property], shape[property]);
						} catch (error$1) {
							if (error$1 instanceof TypeError) {
								errors$1.push(error$1.message);
								continue;
							}
							throw error$1;
						}
						if (errors$1.length) throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\n${errors$1.join("\n")}`);
					}
					return validate$1.shapeOf = shape, validate$1;
				}, exports$1.assertValueType = assertValueType, exports$1.chain = chain, exports$1.default = defineType, exports$1.defineAliasedType = function(...aliases) {
					return (type$1, opts = {}) => {
						let defined = opts.aliases;
						var _store$opts$inherits$;
						defined || (opts.inherits && (defined = null == (_store$opts$inherits$ = store[opts.inherits].aliases) ? void 0 : _store$opts$inherits$.slice()), defined ??= [], opts.aliases = defined);
						const additional = aliases.filter((a) => !defined.includes(a));
						defined.unshift(...additional), defineType(type$1, opts);
					};
				}, exports$1.validate = validate, exports$1.validateArrayOfType = function(...typeNames) {
					return validate(arrayOfType(...typeNames));
				}, exports$1.validateOptional = function(validate$1) {
					return {
						validate: validate$1,
						optional: !0
					};
				}, exports$1.validateOptionalType = function(...typeNames) {
					return {
						validate: assertNodeType(...typeNames),
						optional: !0
					};
				}, exports$1.validateType = function(...typeNames) {
					return validate(assertNodeType(...typeNames));
				};
				var _is = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _validate = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js");
				const VISITOR_KEYS = exports$1.VISITOR_KEYS = {}, ALIAS_KEYS = exports$1.ALIAS_KEYS = {}, FLIPPED_ALIAS_KEYS = exports$1.FLIPPED_ALIAS_KEYS = {}, NODE_FIELDS = exports$1.NODE_FIELDS = {}, BUILDER_KEYS = exports$1.BUILDER_KEYS = {}, DEPRECATED_KEYS = exports$1.DEPRECATED_KEYS = {}, NODE_PARENT_VALIDATIONS = exports$1.NODE_PARENT_VALIDATIONS = {};
				function getType(val) {
					return Array.isArray(val) ? "array" : null === val ? "null" : typeof val;
				}
				function validate(validate$1) {
					return { validate: validate$1 };
				}
				function arrayOf(elementType) {
					return chain(assertValueType("array"), assertEach(elementType));
				}
				function arrayOfType(...typeNames) {
					return arrayOf(assertNodeType(...typeNames));
				}
				function assertEach(callback) {
					const childValidator = process.env.BABEL_TYPES_8_BREAKING ? _validate.validateChild : () => {};
					function validator(node, key, val) {
						if (Array.isArray(val)) for (let i = 0; i < val.length; i++) {
							const subkey = `${key}[${i}]`, v$1 = val[i];
							callback(node, subkey, v$1), childValidator(node, subkey, v$1);
						}
					}
					return validator.each = callback, validator;
				}
				function assertNodeType(...types$7) {
					function validate$1(node, key, val) {
						for (const type$1 of types$7) if ((0, _is.default)(type$1, val)) return void (0, _validate.validateChild)(node, key, val);
						throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types$7)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
					}
					return validate$1.oneOfNodeTypes = types$7, validate$1;
				}
				function assertValueType(type$1) {
					function validate$1(node, key, val) {
						if (!(getType(val) === type$1)) throw new TypeError(`Property ${key} expected type of ${type$1} but got ${getType(val)}`);
					}
					return validate$1.type = type$1, validate$1;
				}
				function chain(...fns) {
					function validate$1(...args) {
						for (const fn of fns) fn(...args);
					}
					if (validate$1.chainOf = fns, fns.length >= 2 && "type" in fns[0] && "array" === fns[0].type && !("each" in fns[1])) throw new Error("An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.");
					return validate$1;
				}
				const validTypeOpts = new Set([
					"aliases",
					"builder",
					"deprecatedAlias",
					"fields",
					"inherits",
					"visitor",
					"validate"
				]), validFieldKeys = new Set([
					"default",
					"optional",
					"deprecated",
					"validate"
				]), store = {};
				function defineType(type$1, opts = {}) {
					const inherits$6 = opts.inherits && store[opts.inherits] || {};
					let fields = opts.fields;
					if (!fields && (fields = {}, inherits$6.fields)) {
						const keys = Object.getOwnPropertyNames(inherits$6.fields);
						for (const key of keys) {
							const field = inherits$6.fields[key], def = field.default;
							if (Array.isArray(def) ? def.length > 0 : def && "object" == typeof def) throw new Error("field defaults can only be primitives or empty arrays currently");
							fields[key] = {
								default: Array.isArray(def) ? [] : def,
								optional: field.optional,
								deprecated: field.deprecated,
								validate: field.validate
							};
						}
					}
					const visitor = opts.visitor || inherits$6.visitor || [], aliases = opts.aliases || inherits$6.aliases || [], builder = opts.builder || inherits$6.builder || opts.visitor || [];
					for (const k$2 of Object.keys(opts)) if (!validTypeOpts.has(k$2)) throw new Error(`Unknown type option "${k$2}" on ${type$1}`);
					opts.deprecatedAlias && (DEPRECATED_KEYS[opts.deprecatedAlias] = type$1);
					for (const key of visitor.concat(builder)) fields[key] = fields[key] || {};
					for (const key of Object.keys(fields)) {
						const field = fields[key];
						void 0 === field.default || builder.includes(key) || (field.optional = !0), void 0 === field.default ? field.default = null : field.validate || null == field.default || (field.validate = assertValueType(getType(field.default)));
						for (const k$2 of Object.keys(field)) if (!validFieldKeys.has(k$2)) throw new Error(`Unknown field key "${k$2}" on ${type$1}.${key}`);
					}
					VISITOR_KEYS[type$1] = opts.visitor = visitor, BUILDER_KEYS[type$1] = opts.builder = builder, NODE_FIELDS[type$1] = opts.fields = fields, ALIAS_KEYS[type$1] = opts.aliases = aliases, aliases.forEach((alias) => {
						FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [], FLIPPED_ALIAS_KEYS[alias].push(type$1);
					}), opts.validate && (NODE_PARENT_VALIDATIONS[type$1] = opts.validate), store[type$1] = opts;
				}
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 });
				var _exportNames = {
					react: !0,
					assertNode: !0,
					createTypeAnnotationBasedOnTypeof: !0,
					createUnionTypeAnnotation: !0,
					createFlowUnionType: !0,
					createTSUnionType: !0,
					cloneNode: !0,
					clone: !0,
					cloneDeep: !0,
					cloneDeepWithoutLoc: !0,
					cloneWithoutLoc: !0,
					addComment: !0,
					addComments: !0,
					inheritInnerComments: !0,
					inheritLeadingComments: !0,
					inheritsComments: !0,
					inheritTrailingComments: !0,
					removeComments: !0,
					ensureBlock: !0,
					toBindingIdentifierName: !0,
					toBlock: !0,
					toComputedKey: !0,
					toExpression: !0,
					toIdentifier: !0,
					toKeyAlias: !0,
					toStatement: !0,
					valueToNode: !0,
					appendToMemberExpression: !0,
					inherits: !0,
					prependToMemberExpression: !0,
					removeProperties: !0,
					removePropertiesDeep: !0,
					removeTypeDuplicates: !0,
					getAssignmentIdentifiers: !0,
					getBindingIdentifiers: !0,
					getOuterBindingIdentifiers: !0,
					getFunctionName: !0,
					traverse: !0,
					traverseFast: !0,
					shallowEqual: !0,
					is: !0,
					isBinding: !0,
					isBlockScoped: !0,
					isImmutable: !0,
					isLet: !0,
					isNode: !0,
					isNodesEquivalent: !0,
					isPlaceholderType: !0,
					isReferenced: !0,
					isScope: !0,
					isSpecifierDefault: !0,
					isType: !0,
					isValidES3Identifier: !0,
					isValidIdentifier: !0,
					isVar: !0,
					matchesPattern: !0,
					validate: !0,
					buildMatchMemberExpression: !0,
					__internal__deprecationWarning: !0
				};
				Object.defineProperty(exports$1, "__internal__deprecationWarning", {
					enumerable: !0,
					get: function() {
						return _deprecationWarning.default;
					}
				}), Object.defineProperty(exports$1, "addComment", {
					enumerable: !0,
					get: function() {
						return _addComment.default;
					}
				}), Object.defineProperty(exports$1, "addComments", {
					enumerable: !0,
					get: function() {
						return _addComments.default;
					}
				}), Object.defineProperty(exports$1, "appendToMemberExpression", {
					enumerable: !0,
					get: function() {
						return _appendToMemberExpression.default;
					}
				}), Object.defineProperty(exports$1, "assertNode", {
					enumerable: !0,
					get: function() {
						return _assertNode.default;
					}
				}), Object.defineProperty(exports$1, "buildMatchMemberExpression", {
					enumerable: !0,
					get: function() {
						return _buildMatchMemberExpression.default;
					}
				}), Object.defineProperty(exports$1, "clone", {
					enumerable: !0,
					get: function() {
						return _clone.default;
					}
				}), Object.defineProperty(exports$1, "cloneDeep", {
					enumerable: !0,
					get: function() {
						return _cloneDeep.default;
					}
				}), Object.defineProperty(exports$1, "cloneDeepWithoutLoc", {
					enumerable: !0,
					get: function() {
						return _cloneDeepWithoutLoc.default;
					}
				}), Object.defineProperty(exports$1, "cloneNode", {
					enumerable: !0,
					get: function() {
						return _cloneNode.default;
					}
				}), Object.defineProperty(exports$1, "cloneWithoutLoc", {
					enumerable: !0,
					get: function() {
						return _cloneWithoutLoc.default;
					}
				}), Object.defineProperty(exports$1, "createFlowUnionType", {
					enumerable: !0,
					get: function() {
						return _createFlowUnionType.default;
					}
				}), Object.defineProperty(exports$1, "createTSUnionType", {
					enumerable: !0,
					get: function() {
						return _createTSUnionType.default;
					}
				}), Object.defineProperty(exports$1, "createTypeAnnotationBasedOnTypeof", {
					enumerable: !0,
					get: function() {
						return _createTypeAnnotationBasedOnTypeof.default;
					}
				}), Object.defineProperty(exports$1, "createUnionTypeAnnotation", {
					enumerable: !0,
					get: function() {
						return _createFlowUnionType.default;
					}
				}), Object.defineProperty(exports$1, "ensureBlock", {
					enumerable: !0,
					get: function() {
						return _ensureBlock.default;
					}
				}), Object.defineProperty(exports$1, "getAssignmentIdentifiers", {
					enumerable: !0,
					get: function() {
						return _getAssignmentIdentifiers.default;
					}
				}), Object.defineProperty(exports$1, "getBindingIdentifiers", {
					enumerable: !0,
					get: function() {
						return _getBindingIdentifiers.default;
					}
				}), Object.defineProperty(exports$1, "getFunctionName", {
					enumerable: !0,
					get: function() {
						return _getFunctionName.default;
					}
				}), Object.defineProperty(exports$1, "getOuterBindingIdentifiers", {
					enumerable: !0,
					get: function() {
						return _getOuterBindingIdentifiers.default;
					}
				}), Object.defineProperty(exports$1, "inheritInnerComments", {
					enumerable: !0,
					get: function() {
						return _inheritInnerComments.default;
					}
				}), Object.defineProperty(exports$1, "inheritLeadingComments", {
					enumerable: !0,
					get: function() {
						return _inheritLeadingComments.default;
					}
				}), Object.defineProperty(exports$1, "inheritTrailingComments", {
					enumerable: !0,
					get: function() {
						return _inheritTrailingComments.default;
					}
				}), Object.defineProperty(exports$1, "inherits", {
					enumerable: !0,
					get: function() {
						return _inherits.default;
					}
				}), Object.defineProperty(exports$1, "inheritsComments", {
					enumerable: !0,
					get: function() {
						return _inheritsComments.default;
					}
				}), Object.defineProperty(exports$1, "is", {
					enumerable: !0,
					get: function() {
						return _is.default;
					}
				}), Object.defineProperty(exports$1, "isBinding", {
					enumerable: !0,
					get: function() {
						return _isBinding.default;
					}
				}), Object.defineProperty(exports$1, "isBlockScoped", {
					enumerable: !0,
					get: function() {
						return _isBlockScoped.default;
					}
				}), Object.defineProperty(exports$1, "isImmutable", {
					enumerable: !0,
					get: function() {
						return _isImmutable.default;
					}
				}), Object.defineProperty(exports$1, "isLet", {
					enumerable: !0,
					get: function() {
						return _isLet.default;
					}
				}), Object.defineProperty(exports$1, "isNode", {
					enumerable: !0,
					get: function() {
						return _isNode.default;
					}
				}), Object.defineProperty(exports$1, "isNodesEquivalent", {
					enumerable: !0,
					get: function() {
						return _isNodesEquivalent.default;
					}
				}), Object.defineProperty(exports$1, "isPlaceholderType", {
					enumerable: !0,
					get: function() {
						return _isPlaceholderType.default;
					}
				}), Object.defineProperty(exports$1, "isReferenced", {
					enumerable: !0,
					get: function() {
						return _isReferenced.default;
					}
				}), Object.defineProperty(exports$1, "isScope", {
					enumerable: !0,
					get: function() {
						return _isScope.default;
					}
				}), Object.defineProperty(exports$1, "isSpecifierDefault", {
					enumerable: !0,
					get: function() {
						return _isSpecifierDefault.default;
					}
				}), Object.defineProperty(exports$1, "isType", {
					enumerable: !0,
					get: function() {
						return _isType.default;
					}
				}), Object.defineProperty(exports$1, "isValidES3Identifier", {
					enumerable: !0,
					get: function() {
						return _isValidES3Identifier.default;
					}
				}), Object.defineProperty(exports$1, "isValidIdentifier", {
					enumerable: !0,
					get: function() {
						return _isValidIdentifier.default;
					}
				}), Object.defineProperty(exports$1, "isVar", {
					enumerable: !0,
					get: function() {
						return _isVar.default;
					}
				}), Object.defineProperty(exports$1, "matchesPattern", {
					enumerable: !0,
					get: function() {
						return _matchesPattern.default;
					}
				}), Object.defineProperty(exports$1, "prependToMemberExpression", {
					enumerable: !0,
					get: function() {
						return _prependToMemberExpression.default;
					}
				}), exports$1.react = void 0, Object.defineProperty(exports$1, "removeComments", {
					enumerable: !0,
					get: function() {
						return _removeComments.default;
					}
				}), Object.defineProperty(exports$1, "removeProperties", {
					enumerable: !0,
					get: function() {
						return _removeProperties.default;
					}
				}), Object.defineProperty(exports$1, "removePropertiesDeep", {
					enumerable: !0,
					get: function() {
						return _removePropertiesDeep.default;
					}
				}), Object.defineProperty(exports$1, "removeTypeDuplicates", {
					enumerable: !0,
					get: function() {
						return _removeTypeDuplicates.default;
					}
				}), Object.defineProperty(exports$1, "shallowEqual", {
					enumerable: !0,
					get: function() {
						return _shallowEqual.default;
					}
				}), Object.defineProperty(exports$1, "toBindingIdentifierName", {
					enumerable: !0,
					get: function() {
						return _toBindingIdentifierName.default;
					}
				}), Object.defineProperty(exports$1, "toBlock", {
					enumerable: !0,
					get: function() {
						return _toBlock.default;
					}
				}), Object.defineProperty(exports$1, "toComputedKey", {
					enumerable: !0,
					get: function() {
						return _toComputedKey.default;
					}
				}), Object.defineProperty(exports$1, "toExpression", {
					enumerable: !0,
					get: function() {
						return _toExpression.default;
					}
				}), Object.defineProperty(exports$1, "toIdentifier", {
					enumerable: !0,
					get: function() {
						return _toIdentifier.default;
					}
				}), Object.defineProperty(exports$1, "toKeyAlias", {
					enumerable: !0,
					get: function() {
						return _toKeyAlias.default;
					}
				}), Object.defineProperty(exports$1, "toStatement", {
					enumerable: !0,
					get: function() {
						return _toStatement.default;
					}
				}), Object.defineProperty(exports$1, "traverse", {
					enumerable: !0,
					get: function() {
						return _traverse.default;
					}
				}), Object.defineProperty(exports$1, "traverseFast", {
					enumerable: !0,
					get: function() {
						return _traverseFast.default;
					}
				}), Object.defineProperty(exports$1, "validate", {
					enumerable: !0,
					get: function() {
						return _validate.default;
					}
				}), Object.defineProperty(exports$1, "valueToNode", {
					enumerable: !0,
					get: function() {
						return _valueToNode.default;
					}
				});
				var _isReactComponent = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js"), _isCompatTag = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js"), _buildChildren = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/react/buildChildren.js"), _assertNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/assertNode.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/generated/index.js");
				Object.keys(_index).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports$1 && exports$1[key] === _index[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _index[key];
						}
					}));
				});
				var _createTypeAnnotationBasedOnTypeof = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"), _createFlowUnionType = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"), _createTSUnionType = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
				Object.keys(_index2).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports$1 && exports$1[key] === _index2[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _index2[key];
						}
					}));
				});
				var _uppercase = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/uppercase.js");
				Object.keys(_uppercase).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports$1 && exports$1[key] === _uppercase[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _uppercase[key];
						}
					}));
				});
				var _productions = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js");
				Object.keys(_productions).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports$1 && exports$1[key] === _productions[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _productions[key];
						}
					}));
				});
				var _cloneNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _clone = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/clone.js"), _cloneDeep = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeep.js"), _cloneDeepWithoutLoc = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"), _cloneWithoutLoc = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"), _addComment = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComment.js"), _addComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js"), _inheritInnerComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js"), _inheritLeadingComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritsComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js"), _inheritTrailingComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _removeComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/removeComments.js"), _index3 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/generated/index.js");
				Object.keys(_index3).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports$1 && exports$1[key] === _index3[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _index3[key];
						}
					}));
				});
				var _index4 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
				Object.keys(_index4).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports$1 && exports$1[key] === _index4[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _index4[key];
						}
					}));
				});
				var _ensureBlock = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/ensureBlock.js"), _toBindingIdentifierName = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"), _toBlock = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js"), _toComputedKey = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toComputedKey.js"), _toExpression = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toExpression.js"), _toIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js"), _toKeyAlias = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toKeyAlias.js"), _toStatement = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toStatement.js"), _valueToNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/valueToNode.js"), _index5 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
				Object.keys(_index5).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports$1 && exports$1[key] === _index5[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _index5[key];
						}
					}));
				});
				var _appendToMemberExpression = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"), _inherits = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/inherits.js"), _prependToMemberExpression = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"), _removeProperties = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js"), _removePropertiesDeep = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"), _removeTypeDuplicates = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"), _getAssignmentIdentifiers = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js"), _getBindingIdentifiers = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _getOuterBindingIdentifiers = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"), _getFunctionName = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getFunctionName.js"), _traverse = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverse.js");
				Object.keys(_traverse).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports$1 && exports$1[key] === _traverse[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _traverse[key];
						}
					}));
				});
				var _traverseFast = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _shallowEqual = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _is = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _isBinding = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBinding.js"), _isBlockScoped = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBlockScoped.js"), _isImmutable = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isImmutable.js"), _isLet = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js"), _isNode = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js"), _isNodesEquivalent = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"), _isPlaceholderType = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _isReferenced = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isReferenced.js"), _isScope = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isScope.js"), _isSpecifierDefault = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js"), _isType = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _isValidES3Identifier = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js"), _isValidIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _isVar = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isVar.js"), _matchesPattern = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js"), _validate = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js"), _buildMatchMemberExpression = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"), _index6 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
				Object.keys(_index6).forEach(function(key) {
					"default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports$1 && exports$1[key] === _index6[key] || Object.defineProperty(exports$1, key, {
						enumerable: !0,
						get: function() {
							return _index6[key];
						}
					}));
				});
				var _deprecationWarning = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
				exports$1.react = {
					isReactComponent: _isReactComponent.default,
					isCompatTag: _isCompatTag.default,
					buildChildren: _buildChildren.default
				};
				exports$1.toSequenceExpression = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js").default, process.env.BABEL_TYPES_8_BREAKING && console.warn("BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-release instead!");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(member, append, computed = !1) {
					return member.object = (0, _index.memberExpression)(member.object, member.property, member.computed), member.property = append, member.computed = !!computed, member;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function removeTypeDuplicates(nodesIn) {
					const nodes = Array.from(nodesIn), generics = new Map(), bases = new Map(), typeGroups = new Set(), types$7 = [];
					for (let i = 0; i < nodes.length; i++) {
						const node = nodes[i];
						if (node && !types$7.includes(node)) {
							if ((0, _index.isAnyTypeAnnotation)(node)) return [node];
							if ((0, _index.isFlowBaseAnnotation)(node)) bases.set(node.type, node);
							else if ((0, _index.isUnionTypeAnnotation)(node)) typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
							else if ((0, _index.isGenericTypeAnnotation)(node)) {
								const name = getQualifiedName(node.id);
								if (generics.has(name)) {
									let existing = generics.get(name);
									existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
								} else generics.set(name, node);
							} else types$7.push(node);
						}
					}
					for (const [, baseType] of bases) types$7.push(baseType);
					for (const [, genericName] of generics) types$7.push(genericName);
					return types$7;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
				function getQualifiedName(node) {
					return (0, _index.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
				}
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/inherits.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(child$1, parent) {
					if (!child$1 || !parent) return child$1;
					for (const key of _index.INHERIT_KEYS.optional) child$1[key] ?? (child$1[key] = parent[key]);
					for (const key of Object.keys(parent)) "_" === key[0] && "__clone" !== key && (child$1[key] = parent[key]);
					for (const key of _index.INHERIT_KEYS.force) child$1[key] = parent[key];
					return (0, _inheritsComments.default)(child$1, parent), child$1;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js"), _inheritsComments = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(member, prepend) {
					if ((0, _index2.isSuper)(member.object)) throw new Error("Cannot prepend node to super property access (`super.foo`).");
					return member.object = (0, _index.memberExpression)(prepend, member.object), member;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, opts = {}) {
					const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
					for (const key of map) null != node[key] && (node[key] = void 0);
					for (const key of Object.keys(node)) "_" === key[0] && null != node[key] && (node[key] = void 0);
					const symbols = Object.getOwnPropertySymbols(node);
					for (const sym of symbols) node[sym] = null;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
				const CLEAR_KEYS = [
					"tokens",
					"start",
					"end",
					"loc",
					"raw",
					"rawValue"
				], CLEAR_KEYS_PLUS_COMMENTS = [
					..._index.COMMENT_KEYS,
					"comments",
					...CLEAR_KEYS
				];
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(tree, opts) {
					return (0, _traverseFast.default)(tree, _removeProperties.default, opts), tree;
				};
				var _traverseFast = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _removeProperties = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function removeTypeDuplicates(nodesIn) {
					const nodes = Array.from(nodesIn), generics = new Map(), bases = new Map(), typeGroups = new Set(), types$7 = [];
					for (let i = 0; i < nodes.length; i++) {
						const node = nodes[i];
						if (node && !types$7.includes(node)) {
							if ((0, _index.isTSAnyKeyword)(node)) return [node];
							if ((0, _index.isTSBaseType)(node)) bases.set(node.type, node);
							else if ((0, _index.isTSUnionType)(node)) typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
							else if ((0, _index.isTSTypeReference)(node) && node.typeParameters) {
								const name = getQualifiedName(node.typeName);
								if (generics.has(name)) {
									let existing = generics.get(name);
									existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
								} else generics.set(name, node);
							} else types$7.push(node);
						}
					}
					for (const [, baseType] of bases) types$7.push(baseType);
					for (const [, genericName] of generics) types$7.push(genericName);
					return types$7;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
				function getQualifiedName(node) {
					return (0, _index.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;
				}
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					const search = [].concat(node), ids = Object.create(null);
					for (; search.length;) {
						const id = search.pop();
						if (id) switch (id.type) {
							case "ArrayPattern":
								search.push(...id.elements);
								break;
							case "AssignmentExpression":
							case "AssignmentPattern":
							case "ForInStatement":
							case "ForOfStatement":
								search.push(id.left);
								break;
							case "ObjectPattern":
								search.push(...id.properties);
								break;
							case "ObjectProperty":
								search.push(id.value);
								break;
							case "RestElement":
							case "UpdateExpression":
								search.push(id.argument);
								break;
							case "UnaryExpression":
								"delete" === id.operator && search.push(id.argument);
								break;
							case "Identifier": ids[id.name] = id;
						}
					}
					return ids;
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = getBindingIdentifiers;
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
				function getBindingIdentifiers(node, duplicates, outerOnly, newBindingsOnly) {
					const search = [].concat(node), ids = Object.create(null);
					for (; search.length;) {
						const id = search.shift();
						if (!id) continue;
						if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id) || (0, _index.isUpdateExpression)(id))) continue;
						if ((0, _index.isIdentifier)(id)) {
							if (duplicates) (ids[id.name] = ids[id.name] || []).push(id);
							else ids[id.name] = id;
							continue;
						}
						if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {
							(0, _index.isDeclaration)(id.declaration) && search.push(id.declaration);
							continue;
						}
						if (outerOnly) {
							if ((0, _index.isFunctionDeclaration)(id)) {
								search.push(id.id);
								continue;
							}
							if ((0, _index.isFunctionExpression)(id)) continue;
						}
						const keys = getBindingIdentifiers.keys[id.type];
						if (keys) for (let i = 0; i < keys.length; i++) {
							const nodes = id[keys[i]];
							nodes && (Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes));
						}
					}
					return ids;
				}
				getBindingIdentifiers.keys = {
					DeclareClass: ["id"],
					DeclareFunction: ["id"],
					DeclareModule: ["id"],
					DeclareVariable: ["id"],
					DeclareInterface: ["id"],
					DeclareTypeAlias: ["id"],
					DeclareOpaqueType: ["id"],
					InterfaceDeclaration: ["id"],
					TypeAlias: ["id"],
					OpaqueType: ["id"],
					CatchClause: ["param"],
					LabeledStatement: ["label"],
					UnaryExpression: ["argument"],
					AssignmentExpression: ["left"],
					ImportSpecifier: ["local"],
					ImportNamespaceSpecifier: ["local"],
					ImportDefaultSpecifier: ["local"],
					ImportDeclaration: ["specifiers"],
					ExportSpecifier: ["exported"],
					ExportNamespaceSpecifier: ["exported"],
					ExportDefaultSpecifier: ["exported"],
					FunctionDeclaration: ["id", "params"],
					FunctionExpression: ["id", "params"],
					ArrowFunctionExpression: ["params"],
					ObjectMethod: ["params"],
					ClassMethod: ["params"],
					ClassPrivateMethod: ["params"],
					ForInStatement: ["left"],
					ForOfStatement: ["left"],
					ClassDeclaration: ["id"],
					ClassExpression: ["id"],
					RestElement: ["argument"],
					UpdateExpression: ["argument"],
					ObjectProperty: ["value"],
					AssignmentPattern: ["left"],
					ArrayPattern: ["elements"],
					ObjectPattern: ["properties"],
					VariableDeclaration: ["declarations"],
					VariableDeclarator: ["id"]
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getFunctionName.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, parent) {
					if ("id" in node && node.id) return {
						name: node.id.name,
						originalNode: node.id
					};
					let id, prefix = "";
					(0, _index.isObjectProperty)(parent, { value: node }) ? id = getObjectMemberKey(parent) : (0, _index.isObjectMethod)(node) || (0, _index.isClassMethod)(node) ? (id = getObjectMemberKey(node), "get" === node.kind ? prefix = "get " : "set" === node.kind && (prefix = "set ")) : (0, _index.isVariableDeclarator)(parent, { init: node }) ? id = parent.id : (0, _index.isAssignmentExpression)(parent, {
						operator: "=",
						right: node
					}) && (id = parent.left);
					if (!id) return null;
					const name = (0, _index.isLiteral)(id) ? function(id$1) {
						if ((0, _index.isNullLiteral)(id$1)) return "null";
						if ((0, _index.isRegExpLiteral)(id$1)) return `/${id$1.pattern}/${id$1.flags}`;
						if ((0, _index.isTemplateLiteral)(id$1)) return id$1.quasis.map((quasi) => quasi.value.raw).join("");
						if (void 0 !== id$1.value) return String(id$1.value);
						return null;
					}(id) : (0, _index.isIdentifier)(id) ? id.name : (0, _index.isPrivateName)(id) ? id.id.name : null;
					return null == name ? null : {
						name: prefix + name,
						originalNode: id
					};
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
				function getObjectMemberKey(node) {
					if (!node.computed || (0, _index.isLiteral)(node.key)) return node.key;
				}
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				var _getBindingIdentifiers = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
				exports$1.default = function(node, duplicates) {
					return (0, _getBindingIdentifiers.default)(node, duplicates, !0);
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverse.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, handlers, state) {
					"function" == typeof handlers && (handlers = { enter: handlers });
					const { enter, exit } = handlers;
					traverseSimpleImpl(node, enter, exit, state, []);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
				function traverseSimpleImpl(node, enter, exit, state, ancestors) {
					const keys = _index.VISITOR_KEYS[node.type];
					if (keys) {
						enter && enter(node, ancestors, state);
						for (const key of keys) {
							const subNode = node[key];
							if (Array.isArray(subNode)) for (let i = 0; i < subNode.length; i++) {
								const child$1 = subNode[i];
								child$1 && (ancestors.push({
									node,
									key,
									index: i
								}), traverseSimpleImpl(child$1, enter, exit, state, ancestors), ancestors.pop());
							}
							else subNode && (ancestors.push({
								node,
								key
							}), traverseSimpleImpl(subNode, enter, exit, state, ancestors), ancestors.pop());
						}
						exit && exit(node, ancestors, state);
					}
				}
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function traverseFast(node, enter, opts) {
					if (!node) return;
					const keys = _index.VISITOR_KEYS[node.type];
					if (!keys) return;
					enter(node, opts = opts || {});
					for (const key of keys) {
						const subNode = node[key];
						if (Array.isArray(subNode)) for (const node$1 of subNode) traverseFast(node$1, enter, opts);
						else traverseFast(subNode, enter, opts);
					}
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(oldName, newName, prefix = "") {
					if (warnings.has(oldName)) return;
					warnings.add(oldName);
					const { internal, trace } = function(skip, length) {
						const { stackTraceLimit, prepareStackTrace } = Error;
						let stackTrace;
						if (Error.stackTraceLimit = 1 + skip + length, Error.prepareStackTrace = function(err, stack) {
							stackTrace = stack;
						}, new Error().stack, Error.stackTraceLimit = stackTraceLimit, Error.prepareStackTrace = prepareStackTrace, !stackTrace) return {
							internal: !1,
							trace: ""
						};
						const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
						return {
							internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()),
							trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n")
						};
					}(1, 2);
					if (internal) return;
					console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`\n${trace}`);
				};
				const warnings = new Set();
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(key, child$1, parent) {
					child$1 && parent && (child$1[key] = Array.from(new Set([].concat(child$1[key], parent[key]).filter(Boolean))));
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(child$1, args) {
					const lines = child$1.value.split(/\r\n|\n|\r/);
					let lastNonEmptyLine = 0;
					for (let i = 0; i < lines.length; i++) /[^ \t]/.exec(lines[i]) && (lastNonEmptyLine = i);
					let str = "";
					for (let i = 0; i < lines.length; i++) {
						const line = lines[i], isFirstLine = 0 === i, isLastLine = i === lines.length - 1, isLastNonEmptyLine = i === lastNonEmptyLine;
						let trimmedLine = line.replace(/\t/g, " ");
						isFirstLine || (trimmedLine = trimmedLine.replace(/^ +/, "")), isLastLine || (trimmedLine = trimmedLine.replace(/ +$/, "")), trimmedLine && (isLastNonEmptyLine || (trimmedLine += " "), str += trimmedLine);
					}
					str && args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child$1));
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(actual, expected) {
					const keys = Object.keys(expected);
					for (const key of keys) if (actual[key] !== expected[key]) return !1;
					return !0;
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(match, allowPartial) {
					const parts = match.split(".");
					return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
				};
				var _matchesPattern = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.isAccessor = function(node, opts) {
					if (!node) return !1;
					if ("ClassAccessorProperty" !== node.type) return !1;
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isAnyTypeAnnotation = function(node, opts) {
					return !!node && "AnyTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isArgumentPlaceholder = function(node, opts) {
					return !!node && "ArgumentPlaceholder" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isArrayExpression = function(node, opts) {
					return !!node && "ArrayExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isArrayPattern = function(node, opts) {
					return !!node && "ArrayPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isArrayTypeAnnotation = function(node, opts) {
					return !!node && "ArrayTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isArrowFunctionExpression = function(node, opts) {
					return !!node && "ArrowFunctionExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isAssignmentExpression = function(node, opts) {
					return !!node && "AssignmentExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isAssignmentPattern = function(node, opts) {
					return !!node && "AssignmentPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isAwaitExpression = function(node, opts) {
					return !!node && "AwaitExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isBigIntLiteral = function(node, opts) {
					return !!node && "BigIntLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isBinary = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "BinaryExpression":
						case "LogicalExpression": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isBinaryExpression = function(node, opts) {
					return !!node && "BinaryExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isBindExpression = function(node, opts) {
					return !!node && "BindExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isBlock = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "BlockStatement":
						case "Program":
						case "TSModuleBlock": break;
						case "Placeholder": if ("BlockStatement" === node.expectedNode) break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isBlockParent = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "BlockStatement":
						case "CatchClause":
						case "DoWhileStatement":
						case "ForInStatement":
						case "ForStatement":
						case "FunctionDeclaration":
						case "FunctionExpression":
						case "Program":
						case "ObjectMethod":
						case "SwitchStatement":
						case "WhileStatement":
						case "ArrowFunctionExpression":
						case "ForOfStatement":
						case "ClassMethod":
						case "ClassPrivateMethod":
						case "StaticBlock":
						case "TSModuleBlock": break;
						case "Placeholder": if ("BlockStatement" === node.expectedNode) break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isBlockStatement = function(node, opts) {
					return !!node && "BlockStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isBooleanLiteral = function(node, opts) {
					return !!node && "BooleanLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isBooleanLiteralTypeAnnotation = function(node, opts) {
					return !!node && "BooleanLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isBooleanTypeAnnotation = function(node, opts) {
					return !!node && "BooleanTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isBreakStatement = function(node, opts) {
					return !!node && "BreakStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isCallExpression = function(node, opts) {
					return !!node && "CallExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isCatchClause = function(node, opts) {
					return !!node && "CatchClause" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isClass = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ClassExpression":
						case "ClassDeclaration": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isClassAccessorProperty = function(node, opts) {
					return !!node && "ClassAccessorProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isClassBody = function(node, opts) {
					return !!node && "ClassBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isClassDeclaration = function(node, opts) {
					return !!node && "ClassDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isClassExpression = function(node, opts) {
					return !!node && "ClassExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isClassImplements = function(node, opts) {
					return !!node && "ClassImplements" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isClassMethod = function(node, opts) {
					return !!node && "ClassMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isClassPrivateMethod = function(node, opts) {
					return !!node && "ClassPrivateMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isClassPrivateProperty = function(node, opts) {
					return !!node && "ClassPrivateProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isClassProperty = function(node, opts) {
					return !!node && "ClassProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isCompletionStatement = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "BreakStatement":
						case "ContinueStatement":
						case "ReturnStatement":
						case "ThrowStatement": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isConditional = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ConditionalExpression":
						case "IfStatement": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isConditionalExpression = function(node, opts) {
					return !!node && "ConditionalExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isContinueStatement = function(node, opts) {
					return !!node && "ContinueStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDebuggerStatement = function(node, opts) {
					return !!node && "DebuggerStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDecimalLiteral = function(node, opts) {
					return !!node && "DecimalLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclaration = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "FunctionDeclaration":
						case "VariableDeclaration":
						case "ClassDeclaration":
						case "ExportAllDeclaration":
						case "ExportDefaultDeclaration":
						case "ExportNamedDeclaration":
						case "ImportDeclaration":
						case "DeclareClass":
						case "DeclareFunction":
						case "DeclareInterface":
						case "DeclareModule":
						case "DeclareModuleExports":
						case "DeclareTypeAlias":
						case "DeclareOpaqueType":
						case "DeclareVariable":
						case "DeclareExportDeclaration":
						case "DeclareExportAllDeclaration":
						case "InterfaceDeclaration":
						case "OpaqueType":
						case "TypeAlias":
						case "EnumDeclaration":
						case "TSDeclareFunction":
						case "TSInterfaceDeclaration":
						case "TSTypeAliasDeclaration":
						case "TSEnumDeclaration":
						case "TSModuleDeclaration": break;
						case "Placeholder": if ("Declaration" === node.expectedNode) break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isDeclareClass = function(node, opts) {
					return !!node && "DeclareClass" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclareExportAllDeclaration = function(node, opts) {
					return !!node && "DeclareExportAllDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclareExportDeclaration = function(node, opts) {
					return !!node && "DeclareExportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclareFunction = function(node, opts) {
					return !!node && "DeclareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclareInterface = function(node, opts) {
					return !!node && "DeclareInterface" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclareModule = function(node, opts) {
					return !!node && "DeclareModule" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclareModuleExports = function(node, opts) {
					return !!node && "DeclareModuleExports" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclareOpaqueType = function(node, opts) {
					return !!node && "DeclareOpaqueType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclareTypeAlias = function(node, opts) {
					return !!node && "DeclareTypeAlias" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclareVariable = function(node, opts) {
					return !!node && "DeclareVariable" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDeclaredPredicate = function(node, opts) {
					return !!node && "DeclaredPredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDecorator = function(node, opts) {
					return !!node && "Decorator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDirective = function(node, opts) {
					return !!node && "Directive" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDirectiveLiteral = function(node, opts) {
					return !!node && "DirectiveLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDoExpression = function(node, opts) {
					return !!node && "DoExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isDoWhileStatement = function(node, opts) {
					return !!node && "DoWhileStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEmptyStatement = function(node, opts) {
					return !!node && "EmptyStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEmptyTypeAnnotation = function(node, opts) {
					return !!node && "EmptyTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEnumBody = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "EnumBooleanBody":
						case "EnumNumberBody":
						case "EnumStringBody":
						case "EnumSymbolBody": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isEnumBooleanBody = function(node, opts) {
					return !!node && "EnumBooleanBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEnumBooleanMember = function(node, opts) {
					return !!node && "EnumBooleanMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEnumDeclaration = function(node, opts) {
					return !!node && "EnumDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEnumDefaultedMember = function(node, opts) {
					return !!node && "EnumDefaultedMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEnumMember = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "EnumBooleanMember":
						case "EnumNumberMember":
						case "EnumStringMember":
						case "EnumDefaultedMember": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isEnumNumberBody = function(node, opts) {
					return !!node && "EnumNumberBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEnumNumberMember = function(node, opts) {
					return !!node && "EnumNumberMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEnumStringBody = function(node, opts) {
					return !!node && "EnumStringBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEnumStringMember = function(node, opts) {
					return !!node && "EnumStringMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isEnumSymbolBody = function(node, opts) {
					return !!node && "EnumSymbolBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isExistsTypeAnnotation = function(node, opts) {
					return !!node && "ExistsTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isExportAllDeclaration = function(node, opts) {
					return !!node && "ExportAllDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isExportDeclaration = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ExportAllDeclaration":
						case "ExportDefaultDeclaration":
						case "ExportNamedDeclaration": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isExportDefaultDeclaration = function(node, opts) {
					return !!node && "ExportDefaultDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isExportDefaultSpecifier = function(node, opts) {
					return !!node && "ExportDefaultSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isExportNamedDeclaration = function(node, opts) {
					return !!node && "ExportNamedDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isExportNamespaceSpecifier = function(node, opts) {
					return !!node && "ExportNamespaceSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isExportSpecifier = function(node, opts) {
					return !!node && "ExportSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isExpression = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ArrayExpression":
						case "AssignmentExpression":
						case "BinaryExpression":
						case "CallExpression":
						case "ConditionalExpression":
						case "FunctionExpression":
						case "Identifier":
						case "StringLiteral":
						case "NumericLiteral":
						case "NullLiteral":
						case "BooleanLiteral":
						case "RegExpLiteral":
						case "LogicalExpression":
						case "MemberExpression":
						case "NewExpression":
						case "ObjectExpression":
						case "SequenceExpression":
						case "ParenthesizedExpression":
						case "ThisExpression":
						case "UnaryExpression":
						case "UpdateExpression":
						case "ArrowFunctionExpression":
						case "ClassExpression":
						case "ImportExpression":
						case "MetaProperty":
						case "Super":
						case "TaggedTemplateExpression":
						case "TemplateLiteral":
						case "YieldExpression":
						case "AwaitExpression":
						case "Import":
						case "BigIntLiteral":
						case "OptionalMemberExpression":
						case "OptionalCallExpression":
						case "TypeCastExpression":
						case "JSXElement":
						case "JSXFragment":
						case "BindExpression":
						case "DoExpression":
						case "RecordExpression":
						case "TupleExpression":
						case "DecimalLiteral":
						case "ModuleExpression":
						case "TopicReference":
						case "PipelineTopicExpression":
						case "PipelineBareFunction":
						case "PipelinePrimaryTopicReference":
						case "TSInstantiationExpression":
						case "TSAsExpression":
						case "TSSatisfiesExpression":
						case "TSTypeAssertion":
						case "TSNonNullExpression": break;
						case "Placeholder":
							switch (node.expectedNode) {
								case "Expression":
								case "Identifier":
								case "StringLiteral": break;
								default: return !1;
							}
							break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isExpressionStatement = function(node, opts) {
					return !!node && "ExpressionStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isExpressionWrapper = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ExpressionStatement":
						case "ParenthesizedExpression":
						case "TypeCastExpression": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isFile = function(node, opts) {
					return !!node && "File" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isFlow = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "AnyTypeAnnotation":
						case "ArrayTypeAnnotation":
						case "BooleanTypeAnnotation":
						case "BooleanLiteralTypeAnnotation":
						case "NullLiteralTypeAnnotation":
						case "ClassImplements":
						case "DeclareClass":
						case "DeclareFunction":
						case "DeclareInterface":
						case "DeclareModule":
						case "DeclareModuleExports":
						case "DeclareTypeAlias":
						case "DeclareOpaqueType":
						case "DeclareVariable":
						case "DeclareExportDeclaration":
						case "DeclareExportAllDeclaration":
						case "DeclaredPredicate":
						case "ExistsTypeAnnotation":
						case "FunctionTypeAnnotation":
						case "FunctionTypeParam":
						case "GenericTypeAnnotation":
						case "InferredPredicate":
						case "InterfaceExtends":
						case "InterfaceDeclaration":
						case "InterfaceTypeAnnotation":
						case "IntersectionTypeAnnotation":
						case "MixedTypeAnnotation":
						case "EmptyTypeAnnotation":
						case "NullableTypeAnnotation":
						case "NumberLiteralTypeAnnotation":
						case "NumberTypeAnnotation":
						case "ObjectTypeAnnotation":
						case "ObjectTypeInternalSlot":
						case "ObjectTypeCallProperty":
						case "ObjectTypeIndexer":
						case "ObjectTypeProperty":
						case "ObjectTypeSpreadProperty":
						case "OpaqueType":
						case "QualifiedTypeIdentifier":
						case "StringLiteralTypeAnnotation":
						case "StringTypeAnnotation":
						case "SymbolTypeAnnotation":
						case "ThisTypeAnnotation":
						case "TupleTypeAnnotation":
						case "TypeofTypeAnnotation":
						case "TypeAlias":
						case "TypeAnnotation":
						case "TypeCastExpression":
						case "TypeParameter":
						case "TypeParameterDeclaration":
						case "TypeParameterInstantiation":
						case "UnionTypeAnnotation":
						case "Variance":
						case "VoidTypeAnnotation":
						case "EnumDeclaration":
						case "EnumBooleanBody":
						case "EnumNumberBody":
						case "EnumStringBody":
						case "EnumSymbolBody":
						case "EnumBooleanMember":
						case "EnumNumberMember":
						case "EnumStringMember":
						case "EnumDefaultedMember":
						case "IndexedAccessType":
						case "OptionalIndexedAccessType": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isFlowBaseAnnotation = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "AnyTypeAnnotation":
						case "BooleanTypeAnnotation":
						case "NullLiteralTypeAnnotation":
						case "MixedTypeAnnotation":
						case "EmptyTypeAnnotation":
						case "NumberTypeAnnotation":
						case "StringTypeAnnotation":
						case "SymbolTypeAnnotation":
						case "ThisTypeAnnotation":
						case "VoidTypeAnnotation": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isFlowDeclaration = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "DeclareClass":
						case "DeclareFunction":
						case "DeclareInterface":
						case "DeclareModule":
						case "DeclareModuleExports":
						case "DeclareTypeAlias":
						case "DeclareOpaqueType":
						case "DeclareVariable":
						case "DeclareExportDeclaration":
						case "DeclareExportAllDeclaration":
						case "InterfaceDeclaration":
						case "OpaqueType":
						case "TypeAlias": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isFlowPredicate = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "DeclaredPredicate":
						case "InferredPredicate": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isFlowType = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "AnyTypeAnnotation":
						case "ArrayTypeAnnotation":
						case "BooleanTypeAnnotation":
						case "BooleanLiteralTypeAnnotation":
						case "NullLiteralTypeAnnotation":
						case "ExistsTypeAnnotation":
						case "FunctionTypeAnnotation":
						case "GenericTypeAnnotation":
						case "InterfaceTypeAnnotation":
						case "IntersectionTypeAnnotation":
						case "MixedTypeAnnotation":
						case "EmptyTypeAnnotation":
						case "NullableTypeAnnotation":
						case "NumberLiteralTypeAnnotation":
						case "NumberTypeAnnotation":
						case "ObjectTypeAnnotation":
						case "StringLiteralTypeAnnotation":
						case "StringTypeAnnotation":
						case "SymbolTypeAnnotation":
						case "ThisTypeAnnotation":
						case "TupleTypeAnnotation":
						case "TypeofTypeAnnotation":
						case "UnionTypeAnnotation":
						case "VoidTypeAnnotation":
						case "IndexedAccessType":
						case "OptionalIndexedAccessType": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isFor = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ForInStatement":
						case "ForStatement":
						case "ForOfStatement": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isForInStatement = function(node, opts) {
					return !!node && "ForInStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isForOfStatement = function(node, opts) {
					return !!node && "ForOfStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isForStatement = function(node, opts) {
					return !!node && "ForStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isForXStatement = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ForInStatement":
						case "ForOfStatement": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isFunction = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "FunctionDeclaration":
						case "FunctionExpression":
						case "ObjectMethod":
						case "ArrowFunctionExpression":
						case "ClassMethod":
						case "ClassPrivateMethod": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isFunctionDeclaration = function(node, opts) {
					return !!node && "FunctionDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isFunctionExpression = function(node, opts) {
					return !!node && "FunctionExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isFunctionParent = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "FunctionDeclaration":
						case "FunctionExpression":
						case "ObjectMethod":
						case "ArrowFunctionExpression":
						case "ClassMethod":
						case "ClassPrivateMethod":
						case "StaticBlock":
						case "TSModuleBlock": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isFunctionTypeAnnotation = function(node, opts) {
					return !!node && "FunctionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isFunctionTypeParam = function(node, opts) {
					return !!node && "FunctionTypeParam" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isGenericTypeAnnotation = function(node, opts) {
					return !!node && "GenericTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isIdentifier = function(node, opts) {
					return !!node && "Identifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isIfStatement = function(node, opts) {
					return !!node && "IfStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isImmutable = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "StringLiteral":
						case "NumericLiteral":
						case "NullLiteral":
						case "BooleanLiteral":
						case "BigIntLiteral":
						case "JSXAttribute":
						case "JSXClosingElement":
						case "JSXElement":
						case "JSXExpressionContainer":
						case "JSXSpreadChild":
						case "JSXOpeningElement":
						case "JSXText":
						case "JSXFragment":
						case "JSXOpeningFragment":
						case "JSXClosingFragment":
						case "DecimalLiteral": break;
						case "Placeholder": if ("StringLiteral" === node.expectedNode) break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isImport = function(node, opts) {
					return !!node && "Import" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isImportAttribute = function(node, opts) {
					return !!node && "ImportAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isImportDeclaration = function(node, opts) {
					return !!node && "ImportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isImportDefaultSpecifier = function(node, opts) {
					return !!node && "ImportDefaultSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isImportExpression = function(node, opts) {
					return !!node && "ImportExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isImportNamespaceSpecifier = function(node, opts) {
					return !!node && "ImportNamespaceSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isImportOrExportDeclaration = isImportOrExportDeclaration, exports$1.isImportSpecifier = function(node, opts) {
					return !!node && "ImportSpecifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isIndexedAccessType = function(node, opts) {
					return !!node && "IndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isInferredPredicate = function(node, opts) {
					return !!node && "InferredPredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isInterfaceDeclaration = function(node, opts) {
					return !!node && "InterfaceDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isInterfaceExtends = function(node, opts) {
					return !!node && "InterfaceExtends" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isInterfaceTypeAnnotation = function(node, opts) {
					return !!node && "InterfaceTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isInterpreterDirective = function(node, opts) {
					return !!node && "InterpreterDirective" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isIntersectionTypeAnnotation = function(node, opts) {
					return !!node && "IntersectionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSX = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "JSXAttribute":
						case "JSXClosingElement":
						case "JSXElement":
						case "JSXEmptyExpression":
						case "JSXExpressionContainer":
						case "JSXSpreadChild":
						case "JSXIdentifier":
						case "JSXMemberExpression":
						case "JSXNamespacedName":
						case "JSXOpeningElement":
						case "JSXSpreadAttribute":
						case "JSXText":
						case "JSXFragment":
						case "JSXOpeningFragment":
						case "JSXClosingFragment": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isJSXAttribute = function(node, opts) {
					return !!node && "JSXAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXClosingElement = function(node, opts) {
					return !!node && "JSXClosingElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXClosingFragment = function(node, opts) {
					return !!node && "JSXClosingFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXElement = function(node, opts) {
					return !!node && "JSXElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXEmptyExpression = function(node, opts) {
					return !!node && "JSXEmptyExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXExpressionContainer = function(node, opts) {
					return !!node && "JSXExpressionContainer" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXFragment = function(node, opts) {
					return !!node && "JSXFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXIdentifier = function(node, opts) {
					return !!node && "JSXIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXMemberExpression = function(node, opts) {
					return !!node && "JSXMemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXNamespacedName = function(node, opts) {
					return !!node && "JSXNamespacedName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXOpeningElement = function(node, opts) {
					return !!node && "JSXOpeningElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXOpeningFragment = function(node, opts) {
					return !!node && "JSXOpeningFragment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXSpreadAttribute = function(node, opts) {
					return !!node && "JSXSpreadAttribute" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXSpreadChild = function(node, opts) {
					return !!node && "JSXSpreadChild" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isJSXText = function(node, opts) {
					return !!node && "JSXText" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isLVal = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "Identifier":
						case "MemberExpression":
						case "RestElement":
						case "AssignmentPattern":
						case "ArrayPattern":
						case "ObjectPattern":
						case "TSParameterProperty":
						case "TSAsExpression":
						case "TSSatisfiesExpression":
						case "TSTypeAssertion":
						case "TSNonNullExpression": break;
						case "Placeholder":
							switch (node.expectedNode) {
								case "Pattern":
								case "Identifier": break;
								default: return !1;
							}
							break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isLabeledStatement = function(node, opts) {
					return !!node && "LabeledStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isLiteral = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "StringLiteral":
						case "NumericLiteral":
						case "NullLiteral":
						case "BooleanLiteral":
						case "RegExpLiteral":
						case "TemplateLiteral":
						case "BigIntLiteral":
						case "DecimalLiteral": break;
						case "Placeholder": if ("StringLiteral" === node.expectedNode) break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isLogicalExpression = function(node, opts) {
					return !!node && "LogicalExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isLoop = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "DoWhileStatement":
						case "ForInStatement":
						case "ForStatement":
						case "WhileStatement":
						case "ForOfStatement": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isMemberExpression = function(node, opts) {
					return !!node && "MemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isMetaProperty = function(node, opts) {
					return !!node && "MetaProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isMethod = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ObjectMethod":
						case "ClassMethod":
						case "ClassPrivateMethod": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isMiscellaneous = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "Noop":
						case "Placeholder":
						case "V8IntrinsicIdentifier": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isMixedTypeAnnotation = function(node, opts) {
					return !!node && "MixedTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isModuleDeclaration = function(node, opts) {
					return (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration"), isImportOrExportDeclaration(node, opts);
				}, exports$1.isModuleExpression = function(node, opts) {
					return !!node && "ModuleExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isModuleSpecifier = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ExportSpecifier":
						case "ImportDefaultSpecifier":
						case "ImportNamespaceSpecifier":
						case "ImportSpecifier":
						case "ExportNamespaceSpecifier":
						case "ExportDefaultSpecifier": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isNewExpression = function(node, opts) {
					return !!node && "NewExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isNoop = function(node, opts) {
					return !!node && "Noop" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isNullLiteral = function(node, opts) {
					return !!node && "NullLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isNullLiteralTypeAnnotation = function(node, opts) {
					return !!node && "NullLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isNullableTypeAnnotation = function(node, opts) {
					return !!node && "NullableTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isNumberLiteral = function(node, opts) {
					return (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral"), !!node && "NumberLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isNumberLiteralTypeAnnotation = function(node, opts) {
					return !!node && "NumberLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isNumberTypeAnnotation = function(node, opts) {
					return !!node && "NumberTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isNumericLiteral = function(node, opts) {
					return !!node && "NumericLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectExpression = function(node, opts) {
					return !!node && "ObjectExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectMember = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ObjectMethod":
						case "ObjectProperty": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isObjectMethod = function(node, opts) {
					return !!node && "ObjectMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectPattern = function(node, opts) {
					return !!node && "ObjectPattern" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectProperty = function(node, opts) {
					return !!node && "ObjectProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectTypeAnnotation = function(node, opts) {
					return !!node && "ObjectTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectTypeCallProperty = function(node, opts) {
					return !!node && "ObjectTypeCallProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectTypeIndexer = function(node, opts) {
					return !!node && "ObjectTypeIndexer" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectTypeInternalSlot = function(node, opts) {
					return !!node && "ObjectTypeInternalSlot" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectTypeProperty = function(node, opts) {
					return !!node && "ObjectTypeProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isObjectTypeSpreadProperty = function(node, opts) {
					return !!node && "ObjectTypeSpreadProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isOpaqueType = function(node, opts) {
					return !!node && "OpaqueType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isOptionalCallExpression = function(node, opts) {
					return !!node && "OptionalCallExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isOptionalIndexedAccessType = function(node, opts) {
					return !!node && "OptionalIndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isOptionalMemberExpression = function(node, opts) {
					return !!node && "OptionalMemberExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isParenthesizedExpression = function(node, opts) {
					return !!node && "ParenthesizedExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isPattern = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "AssignmentPattern":
						case "ArrayPattern":
						case "ObjectPattern": break;
						case "Placeholder": if ("Pattern" === node.expectedNode) break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isPatternLike = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "Identifier":
						case "RestElement":
						case "AssignmentPattern":
						case "ArrayPattern":
						case "ObjectPattern":
						case "TSAsExpression":
						case "TSSatisfiesExpression":
						case "TSTypeAssertion":
						case "TSNonNullExpression": break;
						case "Placeholder":
							switch (node.expectedNode) {
								case "Pattern":
								case "Identifier": break;
								default: return !1;
							}
							break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isPipelineBareFunction = function(node, opts) {
					return !!node && "PipelineBareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isPipelinePrimaryTopicReference = function(node, opts) {
					return !!node && "PipelinePrimaryTopicReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isPipelineTopicExpression = function(node, opts) {
					return !!node && "PipelineTopicExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isPlaceholder = function(node, opts) {
					return !!node && "Placeholder" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isPrivate = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ClassPrivateProperty":
						case "ClassPrivateMethod":
						case "PrivateName": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isPrivateName = function(node, opts) {
					return !!node && "PrivateName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isProgram = function(node, opts) {
					return !!node && "Program" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isProperty = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ObjectProperty":
						case "ClassProperty":
						case "ClassAccessorProperty":
						case "ClassPrivateProperty": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isPureish = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "FunctionDeclaration":
						case "FunctionExpression":
						case "StringLiteral":
						case "NumericLiteral":
						case "NullLiteral":
						case "BooleanLiteral":
						case "RegExpLiteral":
						case "ArrowFunctionExpression":
						case "BigIntLiteral":
						case "DecimalLiteral": break;
						case "Placeholder": if ("StringLiteral" === node.expectedNode) break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isQualifiedTypeIdentifier = function(node, opts) {
					return !!node && "QualifiedTypeIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isRecordExpression = function(node, opts) {
					return !!node && "RecordExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isRegExpLiteral = function(node, opts) {
					return !!node && "RegExpLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isRegexLiteral = function(node, opts) {
					return (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral"), !!node && "RegexLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isRestElement = function(node, opts) {
					return !!node && "RestElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isRestProperty = function(node, opts) {
					return (0, _deprecationWarning.default)("isRestProperty", "isRestElement"), !!node && "RestProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isReturnStatement = function(node, opts) {
					return !!node && "ReturnStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isScopable = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "BlockStatement":
						case "CatchClause":
						case "DoWhileStatement":
						case "ForInStatement":
						case "ForStatement":
						case "FunctionDeclaration":
						case "FunctionExpression":
						case "Program":
						case "ObjectMethod":
						case "SwitchStatement":
						case "WhileStatement":
						case "ArrowFunctionExpression":
						case "ClassExpression":
						case "ClassDeclaration":
						case "ForOfStatement":
						case "ClassMethod":
						case "ClassPrivateMethod":
						case "StaticBlock":
						case "TSModuleBlock": break;
						case "Placeholder": if ("BlockStatement" === node.expectedNode) break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isSequenceExpression = function(node, opts) {
					return !!node && "SequenceExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isSpreadElement = function(node, opts) {
					return !!node && "SpreadElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isSpreadProperty = function(node, opts) {
					return (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement"), !!node && "SpreadProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isStandardized = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ArrayExpression":
						case "AssignmentExpression":
						case "BinaryExpression":
						case "InterpreterDirective":
						case "Directive":
						case "DirectiveLiteral":
						case "BlockStatement":
						case "BreakStatement":
						case "CallExpression":
						case "CatchClause":
						case "ConditionalExpression":
						case "ContinueStatement":
						case "DebuggerStatement":
						case "DoWhileStatement":
						case "EmptyStatement":
						case "ExpressionStatement":
						case "File":
						case "ForInStatement":
						case "ForStatement":
						case "FunctionDeclaration":
						case "FunctionExpression":
						case "Identifier":
						case "IfStatement":
						case "LabeledStatement":
						case "StringLiteral":
						case "NumericLiteral":
						case "NullLiteral":
						case "BooleanLiteral":
						case "RegExpLiteral":
						case "LogicalExpression":
						case "MemberExpression":
						case "NewExpression":
						case "Program":
						case "ObjectExpression":
						case "ObjectMethod":
						case "ObjectProperty":
						case "RestElement":
						case "ReturnStatement":
						case "SequenceExpression":
						case "ParenthesizedExpression":
						case "SwitchCase":
						case "SwitchStatement":
						case "ThisExpression":
						case "ThrowStatement":
						case "TryStatement":
						case "UnaryExpression":
						case "UpdateExpression":
						case "VariableDeclaration":
						case "VariableDeclarator":
						case "WhileStatement":
						case "WithStatement":
						case "AssignmentPattern":
						case "ArrayPattern":
						case "ArrowFunctionExpression":
						case "ClassBody":
						case "ClassExpression":
						case "ClassDeclaration":
						case "ExportAllDeclaration":
						case "ExportDefaultDeclaration":
						case "ExportNamedDeclaration":
						case "ExportSpecifier":
						case "ForOfStatement":
						case "ImportDeclaration":
						case "ImportDefaultSpecifier":
						case "ImportNamespaceSpecifier":
						case "ImportSpecifier":
						case "ImportExpression":
						case "MetaProperty":
						case "ClassMethod":
						case "ObjectPattern":
						case "SpreadElement":
						case "Super":
						case "TaggedTemplateExpression":
						case "TemplateElement":
						case "TemplateLiteral":
						case "YieldExpression":
						case "AwaitExpression":
						case "Import":
						case "BigIntLiteral":
						case "ExportNamespaceSpecifier":
						case "OptionalMemberExpression":
						case "OptionalCallExpression":
						case "ClassProperty":
						case "ClassAccessorProperty":
						case "ClassPrivateProperty":
						case "ClassPrivateMethod":
						case "PrivateName":
						case "StaticBlock": break;
						case "Placeholder":
							switch (node.expectedNode) {
								case "Identifier":
								case "StringLiteral":
								case "BlockStatement":
								case "ClassBody": break;
								default: return !1;
							}
							break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isStatement = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "BlockStatement":
						case "BreakStatement":
						case "ContinueStatement":
						case "DebuggerStatement":
						case "DoWhileStatement":
						case "EmptyStatement":
						case "ExpressionStatement":
						case "ForInStatement":
						case "ForStatement":
						case "FunctionDeclaration":
						case "IfStatement":
						case "LabeledStatement":
						case "ReturnStatement":
						case "SwitchStatement":
						case "ThrowStatement":
						case "TryStatement":
						case "VariableDeclaration":
						case "WhileStatement":
						case "WithStatement":
						case "ClassDeclaration":
						case "ExportAllDeclaration":
						case "ExportDefaultDeclaration":
						case "ExportNamedDeclaration":
						case "ForOfStatement":
						case "ImportDeclaration":
						case "DeclareClass":
						case "DeclareFunction":
						case "DeclareInterface":
						case "DeclareModule":
						case "DeclareModuleExports":
						case "DeclareTypeAlias":
						case "DeclareOpaqueType":
						case "DeclareVariable":
						case "DeclareExportDeclaration":
						case "DeclareExportAllDeclaration":
						case "InterfaceDeclaration":
						case "OpaqueType":
						case "TypeAlias":
						case "EnumDeclaration":
						case "TSDeclareFunction":
						case "TSInterfaceDeclaration":
						case "TSTypeAliasDeclaration":
						case "TSEnumDeclaration":
						case "TSModuleDeclaration":
						case "TSImportEqualsDeclaration":
						case "TSExportAssignment":
						case "TSNamespaceExportDeclaration": break;
						case "Placeholder":
							switch (node.expectedNode) {
								case "Statement":
								case "Declaration":
								case "BlockStatement": break;
								default: return !1;
							}
							break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isStaticBlock = function(node, opts) {
					return !!node && "StaticBlock" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isStringLiteral = function(node, opts) {
					return !!node && "StringLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isStringLiteralTypeAnnotation = function(node, opts) {
					return !!node && "StringLiteralTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isStringTypeAnnotation = function(node, opts) {
					return !!node && "StringTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isSuper = function(node, opts) {
					return !!node && "Super" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isSwitchCase = function(node, opts) {
					return !!node && "SwitchCase" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isSwitchStatement = function(node, opts) {
					return !!node && "SwitchStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isSymbolTypeAnnotation = function(node, opts) {
					return !!node && "SymbolTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSAnyKeyword = function(node, opts) {
					return !!node && "TSAnyKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSArrayType = function(node, opts) {
					return !!node && "TSArrayType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSAsExpression = function(node, opts) {
					return !!node && "TSAsExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSBaseType = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "TSAnyKeyword":
						case "TSBooleanKeyword":
						case "TSBigIntKeyword":
						case "TSIntrinsicKeyword":
						case "TSNeverKeyword":
						case "TSNullKeyword":
						case "TSNumberKeyword":
						case "TSObjectKeyword":
						case "TSStringKeyword":
						case "TSSymbolKeyword":
						case "TSUndefinedKeyword":
						case "TSUnknownKeyword":
						case "TSVoidKeyword":
						case "TSThisType":
						case "TSLiteralType": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isTSBigIntKeyword = function(node, opts) {
					return !!node && "TSBigIntKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSBooleanKeyword = function(node, opts) {
					return !!node && "TSBooleanKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSCallSignatureDeclaration = function(node, opts) {
					return !!node && "TSCallSignatureDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSConditionalType = function(node, opts) {
					return !!node && "TSConditionalType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSConstructSignatureDeclaration = function(node, opts) {
					return !!node && "TSConstructSignatureDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSConstructorType = function(node, opts) {
					return !!node && "TSConstructorType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSDeclareFunction = function(node, opts) {
					return !!node && "TSDeclareFunction" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSDeclareMethod = function(node, opts) {
					return !!node && "TSDeclareMethod" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSEntityName = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "Identifier":
						case "TSQualifiedName": break;
						case "Placeholder": if ("Identifier" === node.expectedNode) break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isTSEnumDeclaration = function(node, opts) {
					return !!node && "TSEnumDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSEnumMember = function(node, opts) {
					return !!node && "TSEnumMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSExportAssignment = function(node, opts) {
					return !!node && "TSExportAssignment" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSExpressionWithTypeArguments = function(node, opts) {
					return !!node && "TSExpressionWithTypeArguments" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSExternalModuleReference = function(node, opts) {
					return !!node && "TSExternalModuleReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSFunctionType = function(node, opts) {
					return !!node && "TSFunctionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSImportEqualsDeclaration = function(node, opts) {
					return !!node && "TSImportEqualsDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSImportType = function(node, opts) {
					return !!node && "TSImportType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSIndexSignature = function(node, opts) {
					return !!node && "TSIndexSignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSIndexedAccessType = function(node, opts) {
					return !!node && "TSIndexedAccessType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSInferType = function(node, opts) {
					return !!node && "TSInferType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSInstantiationExpression = function(node, opts) {
					return !!node && "TSInstantiationExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSInterfaceBody = function(node, opts) {
					return !!node && "TSInterfaceBody" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSInterfaceDeclaration = function(node, opts) {
					return !!node && "TSInterfaceDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSIntersectionType = function(node, opts) {
					return !!node && "TSIntersectionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSIntrinsicKeyword = function(node, opts) {
					return !!node && "TSIntrinsicKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSLiteralType = function(node, opts) {
					return !!node && "TSLiteralType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSMappedType = function(node, opts) {
					return !!node && "TSMappedType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSMethodSignature = function(node, opts) {
					return !!node && "TSMethodSignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSModuleBlock = function(node, opts) {
					return !!node && "TSModuleBlock" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSModuleDeclaration = function(node, opts) {
					return !!node && "TSModuleDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSNamedTupleMember = function(node, opts) {
					return !!node && "TSNamedTupleMember" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSNamespaceExportDeclaration = function(node, opts) {
					return !!node && "TSNamespaceExportDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSNeverKeyword = function(node, opts) {
					return !!node && "TSNeverKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSNonNullExpression = function(node, opts) {
					return !!node && "TSNonNullExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSNullKeyword = function(node, opts) {
					return !!node && "TSNullKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSNumberKeyword = function(node, opts) {
					return !!node && "TSNumberKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSObjectKeyword = function(node, opts) {
					return !!node && "TSObjectKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSOptionalType = function(node, opts) {
					return !!node && "TSOptionalType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSParameterProperty = function(node, opts) {
					return !!node && "TSParameterProperty" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSParenthesizedType = function(node, opts) {
					return !!node && "TSParenthesizedType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSPropertySignature = function(node, opts) {
					return !!node && "TSPropertySignature" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSQualifiedName = function(node, opts) {
					return !!node && "TSQualifiedName" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSRestType = function(node, opts) {
					return !!node && "TSRestType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSSatisfiesExpression = function(node, opts) {
					return !!node && "TSSatisfiesExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSStringKeyword = function(node, opts) {
					return !!node && "TSStringKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSSymbolKeyword = function(node, opts) {
					return !!node && "TSSymbolKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSThisType = function(node, opts) {
					return !!node && "TSThisType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTupleType = function(node, opts) {
					return !!node && "TSTupleType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSType = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "TSAnyKeyword":
						case "TSBooleanKeyword":
						case "TSBigIntKeyword":
						case "TSIntrinsicKeyword":
						case "TSNeverKeyword":
						case "TSNullKeyword":
						case "TSNumberKeyword":
						case "TSObjectKeyword":
						case "TSStringKeyword":
						case "TSSymbolKeyword":
						case "TSUndefinedKeyword":
						case "TSUnknownKeyword":
						case "TSVoidKeyword":
						case "TSThisType":
						case "TSFunctionType":
						case "TSConstructorType":
						case "TSTypeReference":
						case "TSTypePredicate":
						case "TSTypeQuery":
						case "TSTypeLiteral":
						case "TSArrayType":
						case "TSTupleType":
						case "TSOptionalType":
						case "TSRestType":
						case "TSUnionType":
						case "TSIntersectionType":
						case "TSConditionalType":
						case "TSInferType":
						case "TSParenthesizedType":
						case "TSTypeOperator":
						case "TSIndexedAccessType":
						case "TSMappedType":
						case "TSLiteralType":
						case "TSExpressionWithTypeArguments":
						case "TSImportType": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isTSTypeAliasDeclaration = function(node, opts) {
					return !!node && "TSTypeAliasDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypeAnnotation = function(node, opts) {
					return !!node && "TSTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypeAssertion = function(node, opts) {
					return !!node && "TSTypeAssertion" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypeElement = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "TSCallSignatureDeclaration":
						case "TSConstructSignatureDeclaration":
						case "TSPropertySignature":
						case "TSMethodSignature":
						case "TSIndexSignature": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isTSTypeLiteral = function(node, opts) {
					return !!node && "TSTypeLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypeOperator = function(node, opts) {
					return !!node && "TSTypeOperator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypeParameter = function(node, opts) {
					return !!node && "TSTypeParameter" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypeParameterDeclaration = function(node, opts) {
					return !!node && "TSTypeParameterDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypeParameterInstantiation = function(node, opts) {
					return !!node && "TSTypeParameterInstantiation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypePredicate = function(node, opts) {
					return !!node && "TSTypePredicate" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypeQuery = function(node, opts) {
					return !!node && "TSTypeQuery" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSTypeReference = function(node, opts) {
					return !!node && "TSTypeReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSUndefinedKeyword = function(node, opts) {
					return !!node && "TSUndefinedKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSUnionType = function(node, opts) {
					return !!node && "TSUnionType" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSUnknownKeyword = function(node, opts) {
					return !!node && "TSUnknownKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTSVoidKeyword = function(node, opts) {
					return !!node && "TSVoidKeyword" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTaggedTemplateExpression = function(node, opts) {
					return !!node && "TaggedTemplateExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTemplateElement = function(node, opts) {
					return !!node && "TemplateElement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTemplateLiteral = function(node, opts) {
					return !!node && "TemplateLiteral" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTerminatorless = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "BreakStatement":
						case "ContinueStatement":
						case "ReturnStatement":
						case "ThrowStatement":
						case "YieldExpression":
						case "AwaitExpression": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isThisExpression = function(node, opts) {
					return !!node && "ThisExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isThisTypeAnnotation = function(node, opts) {
					return !!node && "ThisTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isThrowStatement = function(node, opts) {
					return !!node && "ThrowStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTopicReference = function(node, opts) {
					return !!node && "TopicReference" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTryStatement = function(node, opts) {
					return !!node && "TryStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTupleExpression = function(node, opts) {
					return !!node && "TupleExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTupleTypeAnnotation = function(node, opts) {
					return !!node && "TupleTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTypeAlias = function(node, opts) {
					return !!node && "TypeAlias" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTypeAnnotation = function(node, opts) {
					return !!node && "TypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTypeCastExpression = function(node, opts) {
					return !!node && "TypeCastExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTypeParameter = function(node, opts) {
					return !!node && "TypeParameter" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTypeParameterDeclaration = function(node, opts) {
					return !!node && "TypeParameterDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTypeParameterInstantiation = function(node, opts) {
					return !!node && "TypeParameterInstantiation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isTypeScript = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "TSParameterProperty":
						case "TSDeclareFunction":
						case "TSDeclareMethod":
						case "TSQualifiedName":
						case "TSCallSignatureDeclaration":
						case "TSConstructSignatureDeclaration":
						case "TSPropertySignature":
						case "TSMethodSignature":
						case "TSIndexSignature":
						case "TSAnyKeyword":
						case "TSBooleanKeyword":
						case "TSBigIntKeyword":
						case "TSIntrinsicKeyword":
						case "TSNeverKeyword":
						case "TSNullKeyword":
						case "TSNumberKeyword":
						case "TSObjectKeyword":
						case "TSStringKeyword":
						case "TSSymbolKeyword":
						case "TSUndefinedKeyword":
						case "TSUnknownKeyword":
						case "TSVoidKeyword":
						case "TSThisType":
						case "TSFunctionType":
						case "TSConstructorType":
						case "TSTypeReference":
						case "TSTypePredicate":
						case "TSTypeQuery":
						case "TSTypeLiteral":
						case "TSArrayType":
						case "TSTupleType":
						case "TSOptionalType":
						case "TSRestType":
						case "TSNamedTupleMember":
						case "TSUnionType":
						case "TSIntersectionType":
						case "TSConditionalType":
						case "TSInferType":
						case "TSParenthesizedType":
						case "TSTypeOperator":
						case "TSIndexedAccessType":
						case "TSMappedType":
						case "TSLiteralType":
						case "TSExpressionWithTypeArguments":
						case "TSInterfaceDeclaration":
						case "TSInterfaceBody":
						case "TSTypeAliasDeclaration":
						case "TSInstantiationExpression":
						case "TSAsExpression":
						case "TSSatisfiesExpression":
						case "TSTypeAssertion":
						case "TSEnumDeclaration":
						case "TSEnumMember":
						case "TSModuleDeclaration":
						case "TSModuleBlock":
						case "TSImportType":
						case "TSImportEqualsDeclaration":
						case "TSExternalModuleReference":
						case "TSNonNullExpression":
						case "TSExportAssignment":
						case "TSNamespaceExportDeclaration":
						case "TSTypeAnnotation":
						case "TSTypeParameterInstantiation":
						case "TSTypeParameterDeclaration":
						case "TSTypeParameter": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isTypeofTypeAnnotation = function(node, opts) {
					return !!node && "TypeofTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isUnaryExpression = function(node, opts) {
					return !!node && "UnaryExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isUnaryLike = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "UnaryExpression":
						case "SpreadElement": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isUnionTypeAnnotation = function(node, opts) {
					return !!node && "UnionTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isUpdateExpression = function(node, opts) {
					return !!node && "UpdateExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isUserWhitespacable = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ObjectMethod":
						case "ObjectProperty":
						case "ObjectTypeInternalSlot":
						case "ObjectTypeCallProperty":
						case "ObjectTypeIndexer":
						case "ObjectTypeProperty":
						case "ObjectTypeSpreadProperty": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isV8IntrinsicIdentifier = function(node, opts) {
					return !!node && "V8IntrinsicIdentifier" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isVariableDeclaration = function(node, opts) {
					return !!node && "VariableDeclaration" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isVariableDeclarator = function(node, opts) {
					return !!node && "VariableDeclarator" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isVariance = function(node, opts) {
					return !!node && "Variance" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isVoidTypeAnnotation = function(node, opts) {
					return !!node && "VoidTypeAnnotation" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isWhile = function(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "DoWhileStatement":
						case "WhileStatement": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}, exports$1.isWhileStatement = function(node, opts) {
					return !!node && "WhileStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isWithStatement = function(node, opts) {
					return !!node && "WithStatement" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				}, exports$1.isYieldExpression = function(node, opts) {
					return !!node && "YieldExpression" === node.type && (null == opts || (0, _shallowEqual.default)(node, opts));
				};
				var _shallowEqual = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _deprecationWarning = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
				function isImportOrExportDeclaration(node, opts) {
					if (!node) return !1;
					switch (node.type) {
						case "ExportAllDeclaration":
						case "ExportDefaultDeclaration":
						case "ExportNamedDeclaration":
						case "ImportDeclaration": break;
						default: return !1;
					}
					return null == opts || (0, _shallowEqual.default)(node, opts);
				}
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(type$1, node, opts) {
					if (!node) return !1;
					if (!(0, _isType.default)(node.type, type$1)) return !opts && "Placeholder" === node.type && type$1 in _index.FLIPPED_ALIAS_KEYS && (0, _isPlaceholderType.default)(node.expectedNode, type$1);
					return void 0 === opts || (0, _shallowEqual.default)(node, opts);
				};
				var _shallowEqual = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _isType = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _isPlaceholderType = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBinding.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, parent, grandparent) {
					if (grandparent && "Identifier" === node.type && "ObjectProperty" === parent.type && "ObjectExpression" === grandparent.type) return !1;
					const keys = _getBindingIdentifiers.default.keys[parent.type];
					if (keys) for (let i = 0; i < keys.length; i++) {
						const val = parent[keys[i]];
						if (Array.isArray(val)) {
							if (val.includes(node)) return !0;
						} else if (val === node) return !0;
					}
					return !1;
				};
				var _getBindingIdentifiers = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBlockScoped.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					return (0, _index.isFunctionDeclaration)(node) || (0, _index.isClassDeclaration)(node) || (0, _isLet.default)(node);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _isLet = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isImmutable.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					if ((0, _isType.default)(node.type, "Immutable")) return !0;
					if ((0, _index.isIdentifier)(node)) return "undefined" === node.name;
					return !1;
				};
				var _isType = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					return (0, _index.isVariableDeclaration)(node) && ("var" !== node.kind || node[_index2.BLOCK_SCOPED_SYMBOL]);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					return !(!node || !_index.VISITOR_KEYS[node.type]);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function isNodesEquivalent(a, b$2) {
					if ("object" != typeof a || "object" != typeof b$2 || null == a || null == b$2) return a === b$2;
					if (a.type !== b$2.type) return !1;
					const fields = Object.keys(_index.NODE_FIELDS[a.type] || a.type), visitorKeys = _index.VISITOR_KEYS[a.type];
					for (const field of fields) {
						const val_a = a[field], val_b = b$2[field];
						if (typeof val_a != typeof val_b) return !1;
						if (null != val_a || null != val_b) {
							if (null == val_a || null == val_b) return !1;
							if (Array.isArray(val_a)) {
								if (!Array.isArray(val_b)) return !1;
								if (val_a.length !== val_b.length) return !1;
								for (let i = 0; i < val_a.length; i++) if (!isNodesEquivalent(val_a[i], val_b[i])) return !1;
							} else if ("object" != typeof val_a || null != visitorKeys && visitorKeys.includes(field)) {
								if (!isNodesEquivalent(val_a, val_b)) return !1;
							} else for (const key of Object.keys(val_a)) if (val_a[key] !== val_b[key]) return !1;
						}
					}
					return !0;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(placeholderType, targetType) {
					if (placeholderType === targetType) return !0;
					const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];
					if (aliases) {
						for (const alias of aliases) if (targetType === alias) return !0;
					}
					return !1;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isReferenced.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, parent, grandparent) {
					switch (parent.type) {
						case "MemberExpression":
						case "OptionalMemberExpression": return parent.property === node ? !!parent.computed : parent.object === node;
						case "JSXMemberExpression": return parent.object === node;
						case "VariableDeclarator": return parent.init === node;
						case "ArrowFunctionExpression": return parent.body === node;
						case "PrivateName":
						case "LabeledStatement":
						case "CatchClause":
						case "RestElement":
						case "BreakStatement":
						case "ContinueStatement":
						case "FunctionDeclaration":
						case "FunctionExpression":
						case "ExportNamespaceSpecifier":
						case "ExportDefaultSpecifier":
						case "ImportDefaultSpecifier":
						case "ImportNamespaceSpecifier":
						case "ImportSpecifier":
						case "ImportAttribute":
						case "JSXAttribute":
						case "ObjectPattern":
						case "ArrayPattern":
						case "MetaProperty": return !1;
						case "ClassMethod":
						case "ClassPrivateMethod":
						case "ObjectMethod": return parent.key === node && !!parent.computed;
						case "ObjectProperty": return parent.key === node ? !!parent.computed : !grandparent || "ObjectPattern" !== grandparent.type;
						case "ClassProperty":
						case "ClassAccessorProperty":
						case "TSPropertySignature": return parent.key !== node || !!parent.computed;
						case "ClassPrivateProperty":
						case "ObjectTypeProperty": return parent.key !== node;
						case "ClassDeclaration":
						case "ClassExpression": return parent.superClass === node;
						case "AssignmentExpression":
						case "AssignmentPattern": return parent.right === node;
						case "ExportSpecifier": return (null == grandparent || !grandparent.source) && parent.local === node;
						case "TSEnumMember": return parent.id !== node;
					}
					return !0;
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isScope.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, parent) {
					if ((0, _index.isBlockStatement)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) return !1;
					if ((0, _index.isPattern)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) return !0;
					return (0, _index.isScopable)(node);
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(specifier) {
					return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, { name: "default" });
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(nodeType, targetType) {
					if (nodeType === targetType) return !0;
					if (null == nodeType) return !1;
					if (_index.ALIAS_KEYS[targetType]) return !1;
					const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];
					if (aliases) {
						if (aliases[0] === nodeType) return !0;
						for (const alias of aliases) if (nodeType === alias) return !0;
					}
					return !1;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(name) {
					return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
				};
				var _isValidIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js");
				const RESERVED_WORDS_ES3_ONLY = new Set([
					"abstract",
					"boolean",
					"byte",
					"char",
					"double",
					"enum",
					"final",
					"float",
					"goto",
					"implements",
					"int",
					"interface",
					"long",
					"native",
					"package",
					"private",
					"protected",
					"public",
					"short",
					"static",
					"synchronized",
					"throws",
					"transient",
					"volatile"
				]);
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(name, reserved = !0) {
					if ("string" != typeof name) return !1;
					if (reserved && ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, !0))) return !1;
					return (0, _helperValidatorIdentifier.isIdentifierName)(name);
				};
				var _helperValidatorIdentifier = __webpack_require__$1("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isVar.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node) {
					return (0, _index.isVariableDeclaration)(node, { kind: "var" }) && !node[_index2.BLOCK_SCOPED_SYMBOL];
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(member, match, allowPartial) {
					if (!(0, _index.isMemberExpression)(member)) return !1;
					const parts = Array.isArray(match) ? match : match.split("."), nodes = [];
					let node;
					for (node = member; (0, _index.isMemberExpression)(node); node = node.object) nodes.push(node.property);
					if (nodes.push(node), nodes.length < parts.length) return !1;
					if (!allowPartial && nodes.length > parts.length) return !1;
					for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
						const node$1 = nodes[j];
						let value$1;
						if ((0, _index.isIdentifier)(node$1)) value$1 = node$1.name;
						else if ((0, _index.isStringLiteral)(node$1)) value$1 = node$1.value;
						else {
							if (!(0, _index.isThisExpression)(node$1)) return !1;
							value$1 = "this";
						}
						if (parts[i] !== value$1) return !1;
					}
					return !0;
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js": (__unused_webpack_module, exports$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(tagName) {
					return !!tagName && /^[a-z]/.test(tagName);
				};
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = void 0;
				const isReactComponent = (0, __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js").default)("React.Component");
				exports$1.default = isReactComponent;
			},
			"./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js": (__unused_webpack_module, exports$1, __webpack_require__$1) => {
				"use strict";
				Object.defineProperty(exports$1, "__esModule", { value: !0 }), exports$1.default = function(node, key, val) {
					if (!node) return;
					const fields = _index.NODE_FIELDS[node.type];
					if (!fields) return;
					const field = fields[key];
					validateField(node, key, val, field), validateChild(node, key, val);
				}, exports$1.validateChild = validateChild, exports$1.validateField = validateField, exports$1.validateInternal = function(field, node, key, val, maybeNode) {
					if (null == field || !field.validate) return;
					if (field.optional && null == val) return;
					if (field.validate(node, key, val), maybeNode) {
						var _NODE_PARENT_VALIDATI;
						const type$1 = val.type;
						if (null == type$1) return;
						null == (_NODE_PARENT_VALIDATI = _index.NODE_PARENT_VALIDATIONS[type$1]) || _NODE_PARENT_VALIDATI.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);
					}
				};
				var _index = __webpack_require__$1("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
				function validateField(node, key, val, field) {
					null != field && field.validate && (field.optional && null == val || field.validate(node, key, val));
				}
				function validateChild(node, key, val) {
					var _NODE_PARENT_VALIDATI2;
					const type$1 = null == val ? void 0 : val.type;
					null != type$1 && (null == (_NODE_PARENT_VALIDATI2 = _index.NODE_PARENT_VALIDATIONS[type$1]) || _NODE_PARENT_VALIDATI2.call(_index.NODE_PARENT_VALIDATIONS, node, key, val));
				}
			},
			"./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs": (__unused_webpack___webpack_module__, __webpack_exports__$1, __webpack_require__$1) => {
				"use strict";
				__webpack_require__$1.r(__webpack_exports__$1), __webpack_require__$1.d(__webpack_exports__$1, { default: () => __WEBPACK_DEFAULT_EXPORT__ });
				var unicode = {
					Space_Separator: /[\u1680\u2000-\u200A\u202F\u205F\u3000]/,
					ID_Start: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/,
					ID_Continue: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
				}, util$18 = {
					isSpaceSeparator: (c$1) => "string" == typeof c$1 && unicode.Space_Separator.test(c$1),
					isIdStartChar: (c$1) => "string" == typeof c$1 && (c$1 >= "a" && c$1 <= "z" || c$1 >= "A" && c$1 <= "Z" || "$" === c$1 || "_" === c$1 || unicode.ID_Start.test(c$1)),
					isIdContinueChar: (c$1) => "string" == typeof c$1 && (c$1 >= "a" && c$1 <= "z" || c$1 >= "A" && c$1 <= "Z" || c$1 >= "0" && c$1 <= "9" || "$" === c$1 || "_" === c$1 || "‌" === c$1 || "‍" === c$1 || unicode.ID_Continue.test(c$1)),
					isDigit: (c$1) => "string" == typeof c$1 && /[0-9]/.test(c$1),
					isHexDigit: (c$1) => "string" == typeof c$1 && /[0-9A-Fa-f]/.test(c$1)
				};
				let source, parseState, stack, pos, line, column, token, key, root;
				function internalize(holder, name, reviver) {
					const value$1 = holder[name];
					if (null != value$1 && "object" == typeof value$1) if (Array.isArray(value$1)) for (let i = 0; i < value$1.length; i++) {
						const key$1 = String(i), replacement = internalize(value$1, key$1, reviver);
						void 0 === replacement ? delete value$1[key$1] : Object.defineProperty(value$1, key$1, {
							value: replacement,
							writable: !0,
							enumerable: !0,
							configurable: !0
						});
					}
					else for (const key$1 in value$1) {
						const replacement = internalize(value$1, key$1, reviver);
						void 0 === replacement ? delete value$1[key$1] : Object.defineProperty(value$1, key$1, {
							value: replacement,
							writable: !0,
							enumerable: !0,
							configurable: !0
						});
					}
					return reviver.call(holder, name, value$1);
				}
				let lexState, buffer, doubleQuote, sign, c;
				function lex() {
					for (lexState = "default", buffer = "", doubleQuote = !1, sign = 1;;) {
						c = peek();
						const token$1 = lexStates[lexState]();
						if (token$1) return token$1;
					}
				}
				function peek() {
					if (source[pos]) return String.fromCodePoint(source.codePointAt(pos));
				}
				function read$1() {
					const c$1 = peek();
					return "\n" === c$1 ? (line++, column = 0) : c$1 ? column += c$1.length : column++, c$1 && (pos += c$1.length), c$1;
				}
				const lexStates = {
					default() {
						switch (c) {
							case "	":
							case "\v":
							case "\f":
							case " ":
							case "\xA0":
							case "﻿":
							case "\n":
							case "\r":
							case "\u2028":
							case "\u2029": return void read$1();
							case "/": return read$1(), void (lexState = "comment");
							case void 0: return read$1(), newToken("eof");
						}
						if (!util$18.isSpaceSeparator(c)) return lexStates[parseState]();
						read$1();
					},
					comment() {
						switch (c) {
							case "*": return read$1(), void (lexState = "multiLineComment");
							case "/": return read$1(), void (lexState = "singleLineComment");
						}
						throw invalidChar(read$1());
					},
					multiLineComment() {
						switch (c) {
							case "*": return read$1(), void (lexState = "multiLineCommentAsterisk");
							case void 0: throw invalidChar(read$1());
						}
						read$1();
					},
					multiLineCommentAsterisk() {
						switch (c) {
							case "*": return void read$1();
							case "/": return read$1(), void (lexState = "default");
							case void 0: throw invalidChar(read$1());
						}
						read$1(), lexState = "multiLineComment";
					},
					singleLineComment() {
						switch (c) {
							case "\n":
							case "\r":
							case "\u2028":
							case "\u2029": return read$1(), void (lexState = "default");
							case void 0: return read$1(), newToken("eof");
						}
						read$1();
					},
					value() {
						switch (c) {
							case "{":
							case "[": return newToken("punctuator", read$1());
							case "n": return read$1(), literal("ull"), newToken("null", null);
							case "t": return read$1(), literal("rue"), newToken("boolean", !0);
							case "f": return read$1(), literal("alse"), newToken("boolean", !1);
							case "-":
							case "+": return "-" === read$1() && (sign = -1), void (lexState = "sign");
							case ".": return buffer = read$1(), void (lexState = "decimalPointLeading");
							case "0": return buffer = read$1(), void (lexState = "zero");
							case "1":
							case "2":
							case "3":
							case "4":
							case "5":
							case "6":
							case "7":
							case "8":
							case "9": return buffer = read$1(), void (lexState = "decimalInteger");
							case "I": return read$1(), literal("nfinity"), newToken("numeric", Infinity);
							case "N": return read$1(), literal("aN"), newToken("numeric", NaN);
							case "\"":
							case "'": return doubleQuote = "\"" === read$1(), buffer = "", void (lexState = "string");
						}
						throw invalidChar(read$1());
					},
					identifierNameStartEscape() {
						if ("u" !== c) throw invalidChar(read$1());
						read$1();
						const u$1 = unicodeEscape();
						switch (u$1) {
							case "$":
							case "_": break;
							default: if (!util$18.isIdStartChar(u$1)) throw invalidIdentifier();
						}
						buffer += u$1, lexState = "identifierName";
					},
					identifierName() {
						switch (c) {
							case "$":
							case "_":
							case "‌":
							case "‍": return void (buffer += read$1());
							case "\\": return read$1(), void (lexState = "identifierNameEscape");
						}
						if (!util$18.isIdContinueChar(c)) return newToken("identifier", buffer);
						buffer += read$1();
					},
					identifierNameEscape() {
						if ("u" !== c) throw invalidChar(read$1());
						read$1();
						const u$1 = unicodeEscape();
						switch (u$1) {
							case "$":
							case "_":
							case "‌":
							case "‍": break;
							default: if (!util$18.isIdContinueChar(u$1)) throw invalidIdentifier();
						}
						buffer += u$1, lexState = "identifierName";
					},
					sign() {
						switch (c) {
							case ".": return buffer = read$1(), void (lexState = "decimalPointLeading");
							case "0": return buffer = read$1(), void (lexState = "zero");
							case "1":
							case "2":
							case "3":
							case "4":
							case "5":
							case "6":
							case "7":
							case "8":
							case "9": return buffer = read$1(), void (lexState = "decimalInteger");
							case "I": return read$1(), literal("nfinity"), newToken("numeric", sign * Infinity);
							case "N": return read$1(), literal("aN"), newToken("numeric", NaN);
						}
						throw invalidChar(read$1());
					},
					zero() {
						switch (c) {
							case ".": return buffer += read$1(), void (lexState = "decimalPoint");
							case "e":
							case "E": return buffer += read$1(), void (lexState = "decimalExponent");
							case "x":
							case "X": return buffer += read$1(), void (lexState = "hexadecimal");
						}
						return newToken("numeric", 0 * sign);
					},
					decimalInteger() {
						switch (c) {
							case ".": return buffer += read$1(), void (lexState = "decimalPoint");
							case "e":
							case "E": return buffer += read$1(), void (lexState = "decimalExponent");
						}
						if (!util$18.isDigit(c)) return newToken("numeric", sign * Number(buffer));
						buffer += read$1();
					},
					decimalPointLeading() {
						if (util$18.isDigit(c)) return buffer += read$1(), void (lexState = "decimalFraction");
						throw invalidChar(read$1());
					},
					decimalPoint() {
						switch (c) {
							case "e":
							case "E": return buffer += read$1(), void (lexState = "decimalExponent");
						}
						return util$18.isDigit(c) ? (buffer += read$1(), void (lexState = "decimalFraction")) : newToken("numeric", sign * Number(buffer));
					},
					decimalFraction() {
						switch (c) {
							case "e":
							case "E": return buffer += read$1(), void (lexState = "decimalExponent");
						}
						if (!util$18.isDigit(c)) return newToken("numeric", sign * Number(buffer));
						buffer += read$1();
					},
					decimalExponent() {
						switch (c) {
							case "+":
							case "-": return buffer += read$1(), void (lexState = "decimalExponentSign");
						}
						if (util$18.isDigit(c)) return buffer += read$1(), void (lexState = "decimalExponentInteger");
						throw invalidChar(read$1());
					},
					decimalExponentSign() {
						if (util$18.isDigit(c)) return buffer += read$1(), void (lexState = "decimalExponentInteger");
						throw invalidChar(read$1());
					},
					decimalExponentInteger() {
						if (!util$18.isDigit(c)) return newToken("numeric", sign * Number(buffer));
						buffer += read$1();
					},
					hexadecimal() {
						if (util$18.isHexDigit(c)) return buffer += read$1(), void (lexState = "hexadecimalInteger");
						throw invalidChar(read$1());
					},
					hexadecimalInteger() {
						if (!util$18.isHexDigit(c)) return newToken("numeric", sign * Number(buffer));
						buffer += read$1();
					},
					string() {
						switch (c) {
							case "\\": return read$1(), void (buffer += function() {
								switch (peek()) {
									case "b": return read$1(), "\b";
									case "f": return read$1(), "\f";
									case "n": return read$1(), "\n";
									case "r": return read$1(), "\r";
									case "t": return read$1(), "	";
									case "v": return read$1(), "\v";
									case "0":
										if (read$1(), util$18.isDigit(peek())) throw invalidChar(read$1());
										return "\0";
									case "x": return read$1(), function() {
										let buffer$1 = "", c$1 = peek();
										if (!util$18.isHexDigit(c$1)) throw invalidChar(read$1());
										if (buffer$1 += read$1(), c$1 = peek(), !util$18.isHexDigit(c$1)) throw invalidChar(read$1());
										return buffer$1 += read$1(), String.fromCodePoint(parseInt(buffer$1, 16));
									}();
									case "u": return read$1(), unicodeEscape();
									case "\n":
									case "\u2028":
									case "\u2029": return read$1(), "";
									case "\r": return read$1(), "\n" === peek() && read$1(), "";
									case "1":
									case "2":
									case "3":
									case "4":
									case "5":
									case "6":
									case "7":
									case "8":
									case "9":
									case void 0: throw invalidChar(read$1());
								}
								return read$1();
							}());
							case "\"": return doubleQuote ? (read$1(), newToken("string", buffer)) : void (buffer += read$1());
							case "'": return doubleQuote ? void (buffer += read$1()) : (read$1(), newToken("string", buffer));
							case "\n":
							case "\r": throw invalidChar(read$1());
							case "\u2028":
							case "\u2029":
								(function(c$1) {
									console.warn(`JSON5: '${formatChar(c$1)}' in strings is not valid ECMAScript; consider escaping`);
								})(c);
								break;
							case void 0: throw invalidChar(read$1());
						}
						buffer += read$1();
					},
					start() {
						switch (c) {
							case "{":
							case "[": return newToken("punctuator", read$1());
						}
						lexState = "value";
					},
					beforePropertyName() {
						switch (c) {
							case "$":
							case "_": return buffer = read$1(), void (lexState = "identifierName");
							case "\\": return read$1(), void (lexState = "identifierNameStartEscape");
							case "}": return newToken("punctuator", read$1());
							case "\"":
							case "'": return doubleQuote = "\"" === read$1(), void (lexState = "string");
						}
						if (util$18.isIdStartChar(c)) return buffer += read$1(), void (lexState = "identifierName");
						throw invalidChar(read$1());
					},
					afterPropertyName() {
						if (":" === c) return newToken("punctuator", read$1());
						throw invalidChar(read$1());
					},
					beforePropertyValue() {
						lexState = "value";
					},
					afterPropertyValue() {
						switch (c) {
							case ",":
							case "}": return newToken("punctuator", read$1());
						}
						throw invalidChar(read$1());
					},
					beforeArrayValue() {
						if ("]" === c) return newToken("punctuator", read$1());
						lexState = "value";
					},
					afterArrayValue() {
						switch (c) {
							case ",":
							case "]": return newToken("punctuator", read$1());
						}
						throw invalidChar(read$1());
					},
					end() {
						throw invalidChar(read$1());
					}
				};
				function newToken(type$1, value$1) {
					return {
						type: type$1,
						value: value$1,
						line,
						column
					};
				}
				function literal(s) {
					for (const c$1 of s) {
						if (peek() !== c$1) throw invalidChar(read$1());
						read$1();
					}
				}
				function unicodeEscape() {
					let buffer$1 = "", count = 4;
					for (; count-- > 0;) {
						const c$1 = peek();
						if (!util$18.isHexDigit(c$1)) throw invalidChar(read$1());
						buffer$1 += read$1();
					}
					return String.fromCodePoint(parseInt(buffer$1, 16));
				}
				const parseStates = {
					start() {
						if ("eof" === token.type) throw invalidEOF();
						push();
					},
					beforePropertyName() {
						switch (token.type) {
							case "identifier":
							case "string": return key = token.value, void (parseState = "afterPropertyName");
							case "punctuator": return void pop();
							case "eof": throw invalidEOF();
						}
					},
					afterPropertyName() {
						if ("eof" === token.type) throw invalidEOF();
						parseState = "beforePropertyValue";
					},
					beforePropertyValue() {
						if ("eof" === token.type) throw invalidEOF();
						push();
					},
					beforeArrayValue() {
						if ("eof" === token.type) throw invalidEOF();
						"punctuator" !== token.type || "]" !== token.value ? push() : pop();
					},
					afterPropertyValue() {
						if ("eof" === token.type) throw invalidEOF();
						switch (token.value) {
							case ",": return void (parseState = "beforePropertyName");
							case "}": pop();
						}
					},
					afterArrayValue() {
						if ("eof" === token.type) throw invalidEOF();
						switch (token.value) {
							case ",": return void (parseState = "beforeArrayValue");
							case "]": pop();
						}
					},
					end() {}
				};
				function push() {
					let value$1;
					switch (token.type) {
						case "punctuator":
							switch (token.value) {
								case "{":
									value$1 = {};
									break;
								case "[": value$1 = [];
							}
							break;
						case "null":
						case "boolean":
						case "numeric":
						case "string": value$1 = token.value;
					}
					if (void 0 === root) root = value$1;
					else {
						const parent = stack[stack.length - 1];
						Array.isArray(parent) ? parent.push(value$1) : Object.defineProperty(parent, key, {
							value: value$1,
							writable: !0,
							enumerable: !0,
							configurable: !0
						});
					}
					if (null !== value$1 && "object" == typeof value$1) stack.push(value$1), parseState = Array.isArray(value$1) ? "beforeArrayValue" : "beforePropertyName";
					else {
						const current = stack[stack.length - 1];
						parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
					}
				}
				function pop() {
					stack.pop();
					const current = stack[stack.length - 1];
					parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
				}
				function invalidChar(c$1) {
					return syntaxError$1(void 0 === c$1 ? `JSON5: invalid end of input at ${line}:${column}` : `JSON5: invalid character '${formatChar(c$1)}' at ${line}:${column}`);
				}
				function invalidEOF() {
					return syntaxError$1(`JSON5: invalid end of input at ${line}:${column}`);
				}
				function invalidIdentifier() {
					return column -= 5, syntaxError$1(`JSON5: invalid identifier character at ${line}:${column}`);
				}
				function formatChar(c$1) {
					const replacements = {
						"'": "\\'",
						"\"": "\\\"",
						"\\": "\\\\",
						"\b": "\\b",
						"\f": "\\f",
						"\n": "\\n",
						"\r": "\\r",
						"	": "\\t",
						"\v": "\\v",
						"\0": "\\0",
						"\u2028": "\\u2028",
						"\u2029": "\\u2029"
					};
					if (replacements[c$1]) return replacements[c$1];
					if (c$1 < " ") {
						const hexString = c$1.charCodeAt(0).toString(16);
						return "\\x" + ("00" + hexString).substring(hexString.length);
					}
					return c$1;
				}
				function syntaxError$1(message) {
					const err = new SyntaxError(message);
					return err.lineNumber = line, err.columnNumber = column, err;
				}
				const JSON5 = {
					parse: function(text, reviver) {
						source = String(text), parseState = "start", stack = [], pos = 0, line = 1, column = 0, token = void 0, key = void 0, root = void 0;
						do
							token = lex(), parseStates[parseState]();
						while ("eof" !== token.type);
						return "function" == typeof reviver ? internalize({ "": root }, "", reviver) : root;
					},
					stringify: function(value$1, replacer, space) {
						const stack$1 = [];
						let propertyList, replacerFunc, quote, indent = "", gap = "";
						if (null == replacer || "object" != typeof replacer || Array.isArray(replacer) || (space = replacer.space, quote = replacer.quote, replacer = replacer.replacer), "function" == typeof replacer) replacerFunc = replacer;
						else if (Array.isArray(replacer)) {
							propertyList = [];
							for (const v$1 of replacer) {
								let item;
								"string" == typeof v$1 ? item = v$1 : ("number" == typeof v$1 || v$1 instanceof String || v$1 instanceof Number) && (item = String(v$1)), void 0 !== item && propertyList.indexOf(item) < 0 && propertyList.push(item);
							}
						}
						return space instanceof Number ? space = Number(space) : space instanceof String && (space = String(space)), "number" == typeof space ? space > 0 && (space = Math.min(10, Math.floor(space)), gap = "          ".substr(0, space)) : "string" == typeof space && (gap = space.substr(0, 10)), serializeProperty("", { "": value$1 });
						function serializeProperty(key$1, holder) {
							let value$2 = holder[key$1];
							switch (null != value$2 && ("function" == typeof value$2.toJSON5 ? value$2 = value$2.toJSON5(key$1) : "function" == typeof value$2.toJSON && (value$2 = value$2.toJSON(key$1))), replacerFunc && (value$2 = replacerFunc.call(holder, key$1, value$2)), value$2 instanceof Number ? value$2 = Number(value$2) : value$2 instanceof String ? value$2 = String(value$2) : value$2 instanceof Boolean && (value$2 = value$2.valueOf()), value$2) {
								case null: return "null";
								case !0: return "true";
								case !1: return "false";
							}
							return "string" == typeof value$2 ? quoteString(value$2) : "number" == typeof value$2 ? String(value$2) : "object" == typeof value$2 ? Array.isArray(value$2) ? function(value$3) {
								if (stack$1.indexOf(value$3) >= 0) throw TypeError("Converting circular structure to JSON5");
								stack$1.push(value$3);
								let stepback = indent;
								indent += gap;
								let final, partial = [];
								for (let i = 0; i < value$3.length; i++) {
									const propertyString = serializeProperty(String(i), value$3);
									partial.push(void 0 !== propertyString ? propertyString : "null");
								}
								if (0 === partial.length) final = "[]";
								else if ("" === gap) final = "[" + partial.join(",") + "]";
								else {
									let separator = ",\n" + indent, properties = partial.join(separator);
									final = "[\n" + indent + properties + ",\n" + stepback + "]";
								}
								return stack$1.pop(), indent = stepback, final;
							}(value$2) : function(value$3) {
								if (stack$1.indexOf(value$3) >= 0) throw TypeError("Converting circular structure to JSON5");
								stack$1.push(value$3);
								let stepback = indent;
								indent += gap;
								let final, keys = propertyList || Object.keys(value$3), partial = [];
								for (const key$2 of keys) {
									const propertyString = serializeProperty(key$2, value$3);
									if (void 0 !== propertyString) {
										let member = serializeKey(key$2) + ":";
										"" !== gap && (member += " "), member += propertyString, partial.push(member);
									}
								}
								if (0 === partial.length) final = "{}";
								else {
									let properties;
									if ("" === gap) properties = partial.join(","), final = "{" + properties + "}";
									else {
										let separator = ",\n" + indent;
										properties = partial.join(separator), final = "{\n" + indent + properties + ",\n" + stepback + "}";
									}
								}
								return stack$1.pop(), indent = stepback, final;
							}(value$2) : void 0;
						}
						function quoteString(value$2) {
							const quotes = {
								"'": .1,
								"\"": .2
							}, replacements = {
								"'": "\\'",
								"\"": "\\\"",
								"\\": "\\\\",
								"\b": "\\b",
								"\f": "\\f",
								"\n": "\\n",
								"\r": "\\r",
								"	": "\\t",
								"\v": "\\v",
								"\0": "\\0",
								"\u2028": "\\u2028",
								"\u2029": "\\u2029"
							};
							let product = "";
							for (let i = 0; i < value$2.length; i++) {
								const c$1 = value$2[i];
								switch (c$1) {
									case "'":
									case "\"":
										quotes[c$1]++, product += c$1;
										continue;
									case "\0": if (util$18.isDigit(value$2[i + 1])) {
										product += "\\x00";
										continue;
									}
								}
								if (replacements[c$1]) product += replacements[c$1];
								else if (c$1 < " ") {
									let hexString = c$1.charCodeAt(0).toString(16);
									product += "\\x" + ("00" + hexString).substring(hexString.length);
								} else product += c$1;
							}
							const quoteChar = quote || Object.keys(quotes).reduce((a, b$2) => quotes[a] < quotes[b$2] ? a : b$2);
							return product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]), quoteChar + product + quoteChar;
						}
						function serializeKey(key$1) {
							if (0 === key$1.length) return quoteString(key$1);
							const firstChar = String.fromCodePoint(key$1.codePointAt(0));
							if (!util$18.isIdStartChar(firstChar)) return quoteString(key$1);
							for (let i = firstChar.length; i < key$1.length; i++) if (!util$18.isIdContinueChar(String.fromCodePoint(key$1.codePointAt(i)))) return quoteString(key$1);
							return key$1;
						}
					}
				};
				const __WEBPACK_DEFAULT_EXPORT__ = JSON5;
			},
			"./stubs/babel-codeframe.mjs": (__unused_webpack___webpack_module__, __webpack_exports__$1, __webpack_require__$1) => {
				"use strict";
				function codeFrameColumns() {
					return "";
				}
				__webpack_require__$1.r(__webpack_exports__$1), __webpack_require__$1.d(__webpack_exports__$1, { codeFrameColumns: () => codeFrameColumns });
			},
			"./stubs/helper-compilation-targets.mjs": (__unused_webpack___webpack_module__, __webpack_exports__$1, __webpack_require__$1) => {
				"use strict";
				function getTargets() {
					return {};
				}
				__webpack_require__$1.r(__webpack_exports__$1), __webpack_require__$1.d(__webpack_exports__$1, { default: () => getTargets });
			},
			"./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/package.json": (module$1) => {
				"use strict";
				module$1.exports = JSON.parse("{\"name\":\"@babel/preset-typescript\",\"version\":\"7.26.0\",\"description\":\"Babel preset for TypeScript.\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/babel/babel.git\",\"directory\":\"packages/babel-preset-typescript\"},\"license\":\"MIT\",\"publishConfig\":{\"access\":\"public\"},\"main\":\"./lib/index.js\",\"keywords\":[\"babel-preset\",\"typescript\"],\"dependencies\":{\"@babel/helper-plugin-utils\":\"^7.25.9\",\"@babel/helper-validator-option\":\"^7.25.9\",\"@babel/plugin-syntax-jsx\":\"^7.25.9\",\"@babel/plugin-transform-modules-commonjs\":\"^7.25.9\",\"@babel/plugin-transform-typescript\":\"^7.25.9\"},\"peerDependencies\":{\"@babel/core\":\"^7.0.0-0\"},\"devDependencies\":{\"@babel/core\":\"^7.26.0\",\"@babel/helper-plugin-test-runner\":\"^7.25.9\"},\"homepage\":\"https://babel.dev/docs/en/next/babel-preset-typescript\",\"bugs\":\"https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22area%3A%20typescript%22+is%3Aopen\",\"engines\":{\"node\":\">=6.9.0\"},\"author\":\"The Babel Team (https://babel.dev/team)\",\"type\":\"commonjs\"}");
			},
			"./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json": (module$1) => {
				"use strict";
				module$1.exports = JSON.parse("{\"builtin\":{\"Array\":false,\"ArrayBuffer\":false,\"Atomics\":false,\"BigInt\":false,\"BigInt64Array\":false,\"BigUint64Array\":false,\"Boolean\":false,\"constructor\":false,\"DataView\":false,\"Date\":false,\"decodeURI\":false,\"decodeURIComponent\":false,\"encodeURI\":false,\"encodeURIComponent\":false,\"Error\":false,\"escape\":false,\"eval\":false,\"EvalError\":false,\"Float32Array\":false,\"Float64Array\":false,\"Function\":false,\"globalThis\":false,\"hasOwnProperty\":false,\"Infinity\":false,\"Int16Array\":false,\"Int32Array\":false,\"Int8Array\":false,\"isFinite\":false,\"isNaN\":false,\"isPrototypeOf\":false,\"JSON\":false,\"Map\":false,\"Math\":false,\"NaN\":false,\"Number\":false,\"Object\":false,\"parseFloat\":false,\"parseInt\":false,\"Promise\":false,\"propertyIsEnumerable\":false,\"Proxy\":false,\"RangeError\":false,\"ReferenceError\":false,\"Reflect\":false,\"RegExp\":false,\"Set\":false,\"SharedArrayBuffer\":false,\"String\":false,\"Symbol\":false,\"SyntaxError\":false,\"toLocaleString\":false,\"toString\":false,\"TypeError\":false,\"Uint16Array\":false,\"Uint32Array\":false,\"Uint8Array\":false,\"Uint8ClampedArray\":false,\"undefined\":false,\"unescape\":false,\"URIError\":false,\"valueOf\":false,\"WeakMap\":false,\"WeakSet\":false},\"es5\":{\"Array\":false,\"Boolean\":false,\"constructor\":false,\"Date\":false,\"decodeURI\":false,\"decodeURIComponent\":false,\"encodeURI\":false,\"encodeURIComponent\":false,\"Error\":false,\"escape\":false,\"eval\":false,\"EvalError\":false,\"Function\":false,\"hasOwnProperty\":false,\"Infinity\":false,\"isFinite\":false,\"isNaN\":false,\"isPrototypeOf\":false,\"JSON\":false,\"Math\":false,\"NaN\":false,\"Number\":false,\"Object\":false,\"parseFloat\":false,\"parseInt\":false,\"propertyIsEnumerable\":false,\"RangeError\":false,\"ReferenceError\":false,\"RegExp\":false,\"String\":false,\"SyntaxError\":false,\"toLocaleString\":false,\"toString\":false,\"TypeError\":false,\"undefined\":false,\"unescape\":false,\"URIError\":false,\"valueOf\":false},\"es2015\":{\"Array\":false,\"ArrayBuffer\":false,\"Boolean\":false,\"constructor\":false,\"DataView\":false,\"Date\":false,\"decodeURI\":false,\"decodeURIComponent\":false,\"encodeURI\":false,\"encodeURIComponent\":false,\"Error\":false,\"escape\":false,\"eval\":false,\"EvalError\":false,\"Float32Array\":false,\"Float64Array\":false,\"Function\":false,\"hasOwnProperty\":false,\"Infinity\":false,\"Int16Array\":false,\"Int32Array\":false,\"Int8Array\":false,\"isFinite\":false,\"isNaN\":false,\"isPrototypeOf\":false,\"JSON\":false,\"Map\":false,\"Math\":false,\"NaN\":false,\"Number\":false,\"Object\":false,\"parseFloat\":false,\"parseInt\":false,\"Promise\":false,\"propertyIsEnumerable\":false,\"Proxy\":false,\"RangeError\":false,\"ReferenceError\":false,\"Reflect\":false,\"RegExp\":false,\"Set\":false,\"String\":false,\"Symbol\":false,\"SyntaxError\":false,\"toLocaleString\":false,\"toString\":false,\"TypeError\":false,\"Uint16Array\":false,\"Uint32Array\":false,\"Uint8Array\":false,\"Uint8ClampedArray\":false,\"undefined\":false,\"unescape\":false,\"URIError\":false,\"valueOf\":false,\"WeakMap\":false,\"WeakSet\":false},\"es2017\":{\"Array\":false,\"ArrayBuffer\":false,\"Atomics\":false,\"Boolean\":false,\"constructor\":false,\"DataView\":false,\"Date\":false,\"decodeURI\":false,\"decodeURIComponent\":false,\"encodeURI\":false,\"encodeURIComponent\":false,\"Error\":false,\"escape\":false,\"eval\":false,\"EvalError\":false,\"Float32Array\":false,\"Float64Array\":false,\"Function\":false,\"hasOwnProperty\":false,\"Infinity\":false,\"Int16Array\":false,\"Int32Array\":false,\"Int8Array\":false,\"isFinite\":false,\"isNaN\":false,\"isPrototypeOf\":false,\"JSON\":false,\"Map\":false,\"Math\":false,\"NaN\":false,\"Number\":false,\"Object\":false,\"parseFloat\":false,\"parseInt\":false,\"Promise\":false,\"propertyIsEnumerable\":false,\"Proxy\":false,\"RangeError\":false,\"ReferenceError\":false,\"Reflect\":false,\"RegExp\":false,\"Set\":false,\"SharedArrayBuffer\":false,\"String\":false,\"Symbol\":false,\"SyntaxError\":false,\"toLocaleString\":false,\"toString\":false,\"TypeError\":false,\"Uint16Array\":false,\"Uint32Array\":false,\"Uint8Array\":false,\"Uint8ClampedArray\":false,\"undefined\":false,\"unescape\":false,\"URIError\":false,\"valueOf\":false,\"WeakMap\":false,\"WeakSet\":false},\"browser\":{\"AbortController\":false,\"AbortSignal\":false,\"addEventListener\":false,\"alert\":false,\"AnalyserNode\":false,\"Animation\":false,\"AnimationEffectReadOnly\":false,\"AnimationEffectTiming\":false,\"AnimationEffectTimingReadOnly\":false,\"AnimationEvent\":false,\"AnimationPlaybackEvent\":false,\"AnimationTimeline\":false,\"applicationCache\":false,\"ApplicationCache\":false,\"ApplicationCacheErrorEvent\":false,\"atob\":false,\"Attr\":false,\"Audio\":false,\"AudioBuffer\":false,\"AudioBufferSourceNode\":false,\"AudioContext\":false,\"AudioDestinationNode\":false,\"AudioListener\":false,\"AudioNode\":false,\"AudioParam\":false,\"AudioProcessingEvent\":false,\"AudioScheduledSourceNode\":false,\"AudioWorkletGlobalScope \":false,\"AudioWorkletNode\":false,\"AudioWorkletProcessor\":false,\"BarProp\":false,\"BaseAudioContext\":false,\"BatteryManager\":false,\"BeforeUnloadEvent\":false,\"BiquadFilterNode\":false,\"Blob\":false,\"BlobEvent\":false,\"blur\":false,\"BroadcastChannel\":false,\"btoa\":false,\"BudgetService\":false,\"ByteLengthQueuingStrategy\":false,\"Cache\":false,\"caches\":false,\"CacheStorage\":false,\"cancelAnimationFrame\":false,\"cancelIdleCallback\":false,\"CanvasCaptureMediaStreamTrack\":false,\"CanvasGradient\":false,\"CanvasPattern\":false,\"CanvasRenderingContext2D\":false,\"ChannelMergerNode\":false,\"ChannelSplitterNode\":false,\"CharacterData\":false,\"clearInterval\":false,\"clearTimeout\":false,\"clientInformation\":false,\"ClipboardEvent\":false,\"close\":false,\"closed\":false,\"CloseEvent\":false,\"Comment\":false,\"CompositionEvent\":false,\"confirm\":false,\"console\":false,\"ConstantSourceNode\":false,\"ConvolverNode\":false,\"CountQueuingStrategy\":false,\"createImageBitmap\":false,\"Credential\":false,\"CredentialsContainer\":false,\"crypto\":false,\"Crypto\":false,\"CryptoKey\":false,\"CSS\":false,\"CSSConditionRule\":false,\"CSSFontFaceRule\":false,\"CSSGroupingRule\":false,\"CSSImportRule\":false,\"CSSKeyframeRule\":false,\"CSSKeyframesRule\":false,\"CSSMediaRule\":false,\"CSSNamespaceRule\":false,\"CSSPageRule\":false,\"CSSRule\":false,\"CSSRuleList\":false,\"CSSStyleDeclaration\":false,\"CSSStyleRule\":false,\"CSSStyleSheet\":false,\"CSSSupportsRule\":false,\"CustomElementRegistry\":false,\"customElements\":false,\"CustomEvent\":false,\"DataTransfer\":false,\"DataTransferItem\":false,\"DataTransferItemList\":false,\"defaultstatus\":false,\"defaultStatus\":false,\"DelayNode\":false,\"DeviceMotionEvent\":false,\"DeviceOrientationEvent\":false,\"devicePixelRatio\":false,\"dispatchEvent\":false,\"document\":false,\"Document\":false,\"DocumentFragment\":false,\"DocumentType\":false,\"DOMError\":false,\"DOMException\":false,\"DOMImplementation\":false,\"DOMMatrix\":false,\"DOMMatrixReadOnly\":false,\"DOMParser\":false,\"DOMPoint\":false,\"DOMPointReadOnly\":false,\"DOMQuad\":false,\"DOMRect\":false,\"DOMRectReadOnly\":false,\"DOMStringList\":false,\"DOMStringMap\":false,\"DOMTokenList\":false,\"DragEvent\":false,\"DynamicsCompressorNode\":false,\"Element\":false,\"ErrorEvent\":false,\"event\":false,\"Event\":false,\"EventSource\":false,\"EventTarget\":false,\"external\":false,\"fetch\":false,\"File\":false,\"FileList\":false,\"FileReader\":false,\"find\":false,\"focus\":false,\"FocusEvent\":false,\"FontFace\":false,\"FontFaceSetLoadEvent\":false,\"FormData\":false,\"frameElement\":false,\"frames\":false,\"GainNode\":false,\"Gamepad\":false,\"GamepadButton\":false,\"GamepadEvent\":false,\"getComputedStyle\":false,\"getSelection\":false,\"HashChangeEvent\":false,\"Headers\":false,\"history\":false,\"History\":false,\"HTMLAllCollection\":false,\"HTMLAnchorElement\":false,\"HTMLAreaElement\":false,\"HTMLAudioElement\":false,\"HTMLBaseElement\":false,\"HTMLBodyElement\":false,\"HTMLBRElement\":false,\"HTMLButtonElement\":false,\"HTMLCanvasElement\":false,\"HTMLCollection\":false,\"HTMLContentElement\":false,\"HTMLDataElement\":false,\"HTMLDataListElement\":false,\"HTMLDetailsElement\":false,\"HTMLDialogElement\":false,\"HTMLDirectoryElement\":false,\"HTMLDivElement\":false,\"HTMLDListElement\":false,\"HTMLDocument\":false,\"HTMLElement\":false,\"HTMLEmbedElement\":false,\"HTMLFieldSetElement\":false,\"HTMLFontElement\":false,\"HTMLFormControlsCollection\":false,\"HTMLFormElement\":false,\"HTMLFrameElement\":false,\"HTMLFrameSetElement\":false,\"HTMLHeadElement\":false,\"HTMLHeadingElement\":false,\"HTMLHRElement\":false,\"HTMLHtmlElement\":false,\"HTMLIFrameElement\":false,\"HTMLImageElement\":false,\"HTMLInputElement\":false,\"HTMLLabelElement\":false,\"HTMLLegendElement\":false,\"HTMLLIElement\":false,\"HTMLLinkElement\":false,\"HTMLMapElement\":false,\"HTMLMarqueeElement\":false,\"HTMLMediaElement\":false,\"HTMLMenuElement\":false,\"HTMLMetaElement\":false,\"HTMLMeterElement\":false,\"HTMLModElement\":false,\"HTMLObjectElement\":false,\"HTMLOListElement\":false,\"HTMLOptGroupElement\":false,\"HTMLOptionElement\":false,\"HTMLOptionsCollection\":false,\"HTMLOutputElement\":false,\"HTMLParagraphElement\":false,\"HTMLParamElement\":false,\"HTMLPictureElement\":false,\"HTMLPreElement\":false,\"HTMLProgressElement\":false,\"HTMLQuoteElement\":false,\"HTMLScriptElement\":false,\"HTMLSelectElement\":false,\"HTMLShadowElement\":false,\"HTMLSlotElement\":false,\"HTMLSourceElement\":false,\"HTMLSpanElement\":false,\"HTMLStyleElement\":false,\"HTMLTableCaptionElement\":false,\"HTMLTableCellElement\":false,\"HTMLTableColElement\":false,\"HTMLTableElement\":false,\"HTMLTableRowElement\":false,\"HTMLTableSectionElement\":false,\"HTMLTemplateElement\":false,\"HTMLTextAreaElement\":false,\"HTMLTimeElement\":false,\"HTMLTitleElement\":false,\"HTMLTrackElement\":false,\"HTMLUListElement\":false,\"HTMLUnknownElement\":false,\"HTMLVideoElement\":false,\"IDBCursor\":false,\"IDBCursorWithValue\":false,\"IDBDatabase\":false,\"IDBFactory\":false,\"IDBIndex\":false,\"IDBKeyRange\":false,\"IDBObjectStore\":false,\"IDBOpenDBRequest\":false,\"IDBRequest\":false,\"IDBTransaction\":false,\"IDBVersionChangeEvent\":false,\"IdleDeadline\":false,\"IIRFilterNode\":false,\"Image\":false,\"ImageBitmap\":false,\"ImageBitmapRenderingContext\":false,\"ImageCapture\":false,\"ImageData\":false,\"indexedDB\":false,\"innerHeight\":false,\"innerWidth\":false,\"InputEvent\":false,\"IntersectionObserver\":false,\"IntersectionObserverEntry\":false,\"Intl\":false,\"isSecureContext\":false,\"KeyboardEvent\":false,\"KeyframeEffect\":false,\"KeyframeEffectReadOnly\":false,\"length\":false,\"localStorage\":false,\"location\":true,\"Location\":false,\"locationbar\":false,\"matchMedia\":false,\"MediaDeviceInfo\":false,\"MediaDevices\":false,\"MediaElementAudioSourceNode\":false,\"MediaEncryptedEvent\":false,\"MediaError\":false,\"MediaKeyMessageEvent\":false,\"MediaKeySession\":false,\"MediaKeyStatusMap\":false,\"MediaKeySystemAccess\":false,\"MediaList\":false,\"MediaQueryList\":false,\"MediaQueryListEvent\":false,\"MediaRecorder\":false,\"MediaSettingsRange\":false,\"MediaSource\":false,\"MediaStream\":false,\"MediaStreamAudioDestinationNode\":false,\"MediaStreamAudioSourceNode\":false,\"MediaStreamEvent\":false,\"MediaStreamTrack\":false,\"MediaStreamTrackEvent\":false,\"menubar\":false,\"MessageChannel\":false,\"MessageEvent\":false,\"MessagePort\":false,\"MIDIAccess\":false,\"MIDIConnectionEvent\":false,\"MIDIInput\":false,\"MIDIInputMap\":false,\"MIDIMessageEvent\":false,\"MIDIOutput\":false,\"MIDIOutputMap\":false,\"MIDIPort\":false,\"MimeType\":false,\"MimeTypeArray\":false,\"MouseEvent\":false,\"moveBy\":false,\"moveTo\":false,\"MutationEvent\":false,\"MutationObserver\":false,\"MutationRecord\":false,\"name\":false,\"NamedNodeMap\":false,\"NavigationPreloadManager\":false,\"navigator\":false,\"Navigator\":false,\"NetworkInformation\":false,\"Node\":false,\"NodeFilter\":false,\"NodeIterator\":false,\"NodeList\":false,\"Notification\":false,\"OfflineAudioCompletionEvent\":false,\"OfflineAudioContext\":false,\"offscreenBuffering\":false,\"OffscreenCanvas\":true,\"onabort\":true,\"onafterprint\":true,\"onanimationend\":true,\"onanimationiteration\":true,\"onanimationstart\":true,\"onappinstalled\":true,\"onauxclick\":true,\"onbeforeinstallprompt\":true,\"onbeforeprint\":true,\"onbeforeunload\":true,\"onblur\":true,\"oncancel\":true,\"oncanplay\":true,\"oncanplaythrough\":true,\"onchange\":true,\"onclick\":true,\"onclose\":true,\"oncontextmenu\":true,\"oncuechange\":true,\"ondblclick\":true,\"ondevicemotion\":true,\"ondeviceorientation\":true,\"ondeviceorientationabsolute\":true,\"ondrag\":true,\"ondragend\":true,\"ondragenter\":true,\"ondragleave\":true,\"ondragover\":true,\"ondragstart\":true,\"ondrop\":true,\"ondurationchange\":true,\"onemptied\":true,\"onended\":true,\"onerror\":true,\"onfocus\":true,\"ongotpointercapture\":true,\"onhashchange\":true,\"oninput\":true,\"oninvalid\":true,\"onkeydown\":true,\"onkeypress\":true,\"onkeyup\":true,\"onlanguagechange\":true,\"onload\":true,\"onloadeddata\":true,\"onloadedmetadata\":true,\"onloadstart\":true,\"onlostpointercapture\":true,\"onmessage\":true,\"onmessageerror\":true,\"onmousedown\":true,\"onmouseenter\":true,\"onmouseleave\":true,\"onmousemove\":true,\"onmouseout\":true,\"onmouseover\":true,\"onmouseup\":true,\"onmousewheel\":true,\"onoffline\":true,\"ononline\":true,\"onpagehide\":true,\"onpageshow\":true,\"onpause\":true,\"onplay\":true,\"onplaying\":true,\"onpointercancel\":true,\"onpointerdown\":true,\"onpointerenter\":true,\"onpointerleave\":true,\"onpointermove\":true,\"onpointerout\":true,\"onpointerover\":true,\"onpointerup\":true,\"onpopstate\":true,\"onprogress\":true,\"onratechange\":true,\"onrejectionhandled\":true,\"onreset\":true,\"onresize\":true,\"onscroll\":true,\"onsearch\":true,\"onseeked\":true,\"onseeking\":true,\"onselect\":true,\"onstalled\":true,\"onstorage\":true,\"onsubmit\":true,\"onsuspend\":true,\"ontimeupdate\":true,\"ontoggle\":true,\"ontransitionend\":true,\"onunhandledrejection\":true,\"onunload\":true,\"onvolumechange\":true,\"onwaiting\":true,\"onwheel\":true,\"open\":false,\"openDatabase\":false,\"opener\":false,\"Option\":false,\"origin\":false,\"OscillatorNode\":false,\"outerHeight\":false,\"outerWidth\":false,\"PageTransitionEvent\":false,\"pageXOffset\":false,\"pageYOffset\":false,\"PannerNode\":false,\"parent\":false,\"Path2D\":false,\"PaymentAddress\":false,\"PaymentRequest\":false,\"PaymentRequestUpdateEvent\":false,\"PaymentResponse\":false,\"performance\":false,\"Performance\":false,\"PerformanceEntry\":false,\"PerformanceLongTaskTiming\":false,\"PerformanceMark\":false,\"PerformanceMeasure\":false,\"PerformanceNavigation\":false,\"PerformanceNavigationTiming\":false,\"PerformanceObserver\":false,\"PerformanceObserverEntryList\":false,\"PerformancePaintTiming\":false,\"PerformanceResourceTiming\":false,\"PerformanceTiming\":false,\"PeriodicWave\":false,\"Permissions\":false,\"PermissionStatus\":false,\"personalbar\":false,\"PhotoCapabilities\":false,\"Plugin\":false,\"PluginArray\":false,\"PointerEvent\":false,\"PopStateEvent\":false,\"postMessage\":false,\"Presentation\":false,\"PresentationAvailability\":false,\"PresentationConnection\":false,\"PresentationConnectionAvailableEvent\":false,\"PresentationConnectionCloseEvent\":false,\"PresentationConnectionList\":false,\"PresentationReceiver\":false,\"PresentationRequest\":false,\"print\":false,\"ProcessingInstruction\":false,\"ProgressEvent\":false,\"PromiseRejectionEvent\":false,\"prompt\":false,\"PushManager\":false,\"PushSubscription\":false,\"PushSubscriptionOptions\":false,\"queueMicrotask\":false,\"RadioNodeList\":false,\"Range\":false,\"ReadableStream\":false,\"registerProcessor\":false,\"RemotePlayback\":false,\"removeEventListener\":false,\"Request\":false,\"requestAnimationFrame\":false,\"requestIdleCallback\":false,\"resizeBy\":false,\"ResizeObserver\":false,\"ResizeObserverEntry\":false,\"resizeTo\":false,\"Response\":false,\"RTCCertificate\":false,\"RTCDataChannel\":false,\"RTCDataChannelEvent\":false,\"RTCDtlsTransport\":false,\"RTCIceCandidate\":false,\"RTCIceGatherer\":false,\"RTCIceTransport\":false,\"RTCPeerConnection\":false,\"RTCPeerConnectionIceEvent\":false,\"RTCRtpContributingSource\":false,\"RTCRtpReceiver\":false,\"RTCRtpSender\":false,\"RTCSctpTransport\":false,\"RTCSessionDescription\":false,\"RTCStatsReport\":false,\"RTCTrackEvent\":false,\"screen\":false,\"Screen\":false,\"screenLeft\":false,\"ScreenOrientation\":false,\"screenTop\":false,\"screenX\":false,\"screenY\":false,\"ScriptProcessorNode\":false,\"scroll\":false,\"scrollbars\":false,\"scrollBy\":false,\"scrollTo\":false,\"scrollX\":false,\"scrollY\":false,\"SecurityPolicyViolationEvent\":false,\"Selection\":false,\"self\":false,\"ServiceWorker\":false,\"ServiceWorkerContainer\":false,\"ServiceWorkerRegistration\":false,\"sessionStorage\":false,\"setInterval\":false,\"setTimeout\":false,\"ShadowRoot\":false,\"SharedWorker\":false,\"SourceBuffer\":false,\"SourceBufferList\":false,\"speechSynthesis\":false,\"SpeechSynthesisEvent\":false,\"SpeechSynthesisUtterance\":false,\"StaticRange\":false,\"status\":false,\"statusbar\":false,\"StereoPannerNode\":false,\"stop\":false,\"Storage\":false,\"StorageEvent\":false,\"StorageManager\":false,\"styleMedia\":false,\"StyleSheet\":false,\"StyleSheetList\":false,\"SubtleCrypto\":false,\"SVGAElement\":false,\"SVGAngle\":false,\"SVGAnimatedAngle\":false,\"SVGAnimatedBoolean\":false,\"SVGAnimatedEnumeration\":false,\"SVGAnimatedInteger\":false,\"SVGAnimatedLength\":false,\"SVGAnimatedLengthList\":false,\"SVGAnimatedNumber\":false,\"SVGAnimatedNumberList\":false,\"SVGAnimatedPreserveAspectRatio\":false,\"SVGAnimatedRect\":false,\"SVGAnimatedString\":false,\"SVGAnimatedTransformList\":false,\"SVGAnimateElement\":false,\"SVGAnimateMotionElement\":false,\"SVGAnimateTransformElement\":false,\"SVGAnimationElement\":false,\"SVGCircleElement\":false,\"SVGClipPathElement\":false,\"SVGComponentTransferFunctionElement\":false,\"SVGDefsElement\":false,\"SVGDescElement\":false,\"SVGDiscardElement\":false,\"SVGElement\":false,\"SVGEllipseElement\":false,\"SVGFEBlendElement\":false,\"SVGFEColorMatrixElement\":false,\"SVGFEComponentTransferElement\":false,\"SVGFECompositeElement\":false,\"SVGFEConvolveMatrixElement\":false,\"SVGFEDiffuseLightingElement\":false,\"SVGFEDisplacementMapElement\":false,\"SVGFEDistantLightElement\":false,\"SVGFEDropShadowElement\":false,\"SVGFEFloodElement\":false,\"SVGFEFuncAElement\":false,\"SVGFEFuncBElement\":false,\"SVGFEFuncGElement\":false,\"SVGFEFuncRElement\":false,\"SVGFEGaussianBlurElement\":false,\"SVGFEImageElement\":false,\"SVGFEMergeElement\":false,\"SVGFEMergeNodeElement\":false,\"SVGFEMorphologyElement\":false,\"SVGFEOffsetElement\":false,\"SVGFEPointLightElement\":false,\"SVGFESpecularLightingElement\":false,\"SVGFESpotLightElement\":false,\"SVGFETileElement\":false,\"SVGFETurbulenceElement\":false,\"SVGFilterElement\":false,\"SVGForeignObjectElement\":false,\"SVGGElement\":false,\"SVGGeometryElement\":false,\"SVGGradientElement\":false,\"SVGGraphicsElement\":false,\"SVGImageElement\":false,\"SVGLength\":false,\"SVGLengthList\":false,\"SVGLinearGradientElement\":false,\"SVGLineElement\":false,\"SVGMarkerElement\":false,\"SVGMaskElement\":false,\"SVGMatrix\":false,\"SVGMetadataElement\":false,\"SVGMPathElement\":false,\"SVGNumber\":false,\"SVGNumberList\":false,\"SVGPathElement\":false,\"SVGPatternElement\":false,\"SVGPoint\":false,\"SVGPointList\":false,\"SVGPolygonElement\":false,\"SVGPolylineElement\":false,\"SVGPreserveAspectRatio\":false,\"SVGRadialGradientElement\":false,\"SVGRect\":false,\"SVGRectElement\":false,\"SVGScriptElement\":false,\"SVGSetElement\":false,\"SVGStopElement\":false,\"SVGStringList\":false,\"SVGStyleElement\":false,\"SVGSVGElement\":false,\"SVGSwitchElement\":false,\"SVGSymbolElement\":false,\"SVGTextContentElement\":false,\"SVGTextElement\":false,\"SVGTextPathElement\":false,\"SVGTextPositioningElement\":false,\"SVGTitleElement\":false,\"SVGTransform\":false,\"SVGTransformList\":false,\"SVGTSpanElement\":false,\"SVGUnitTypes\":false,\"SVGUseElement\":false,\"SVGViewElement\":false,\"TaskAttributionTiming\":false,\"Text\":false,\"TextDecoder\":false,\"TextEncoder\":false,\"TextEvent\":false,\"TextMetrics\":false,\"TextTrack\":false,\"TextTrackCue\":false,\"TextTrackCueList\":false,\"TextTrackList\":false,\"TimeRanges\":false,\"toolbar\":false,\"top\":false,\"Touch\":false,\"TouchEvent\":false,\"TouchList\":false,\"TrackEvent\":false,\"TransitionEvent\":false,\"TreeWalker\":false,\"UIEvent\":false,\"URL\":false,\"URLSearchParams\":false,\"ValidityState\":false,\"visualViewport\":false,\"VisualViewport\":false,\"VTTCue\":false,\"WaveShaperNode\":false,\"WebAssembly\":false,\"WebGL2RenderingContext\":false,\"WebGLActiveInfo\":false,\"WebGLBuffer\":false,\"WebGLContextEvent\":false,\"WebGLFramebuffer\":false,\"WebGLProgram\":false,\"WebGLQuery\":false,\"WebGLRenderbuffer\":false,\"WebGLRenderingContext\":false,\"WebGLSampler\":false,\"WebGLShader\":false,\"WebGLShaderPrecisionFormat\":false,\"WebGLSync\":false,\"WebGLTexture\":false,\"WebGLTransformFeedback\":false,\"WebGLUniformLocation\":false,\"WebGLVertexArrayObject\":false,\"WebSocket\":false,\"WheelEvent\":false,\"window\":false,\"Window\":false,\"Worker\":false,\"WritableStream\":false,\"XMLDocument\":false,\"XMLHttpRequest\":false,\"XMLHttpRequestEventTarget\":false,\"XMLHttpRequestUpload\":false,\"XMLSerializer\":false,\"XPathEvaluator\":false,\"XPathExpression\":false,\"XPathResult\":false,\"XSLTProcessor\":false},\"worker\":{\"addEventListener\":false,\"applicationCache\":false,\"atob\":false,\"Blob\":false,\"BroadcastChannel\":false,\"btoa\":false,\"Cache\":false,\"caches\":false,\"clearInterval\":false,\"clearTimeout\":false,\"close\":true,\"console\":false,\"fetch\":false,\"FileReaderSync\":false,\"FormData\":false,\"Headers\":false,\"IDBCursor\":false,\"IDBCursorWithValue\":false,\"IDBDatabase\":false,\"IDBFactory\":false,\"IDBIndex\":false,\"IDBKeyRange\":false,\"IDBObjectStore\":false,\"IDBOpenDBRequest\":false,\"IDBRequest\":false,\"IDBTransaction\":false,\"IDBVersionChangeEvent\":false,\"ImageData\":false,\"importScripts\":true,\"indexedDB\":false,\"location\":false,\"MessageChannel\":false,\"MessagePort\":false,\"name\":false,\"navigator\":false,\"Notification\":false,\"onclose\":true,\"onconnect\":true,\"onerror\":true,\"onlanguagechange\":true,\"onmessage\":true,\"onoffline\":true,\"ononline\":true,\"onrejectionhandled\":true,\"onunhandledrejection\":true,\"performance\":false,\"Performance\":false,\"PerformanceEntry\":false,\"PerformanceMark\":false,\"PerformanceMeasure\":false,\"PerformanceNavigation\":false,\"PerformanceResourceTiming\":false,\"PerformanceTiming\":false,\"postMessage\":true,\"Promise\":false,\"queueMicrotask\":false,\"removeEventListener\":false,\"Request\":false,\"Response\":false,\"self\":true,\"ServiceWorkerRegistration\":false,\"setInterval\":false,\"setTimeout\":false,\"TextDecoder\":false,\"TextEncoder\":false,\"URL\":false,\"URLSearchParams\":false,\"WebSocket\":false,\"Worker\":false,\"WorkerGlobalScope\":false,\"XMLHttpRequest\":false},\"node\":{\"__dirname\":false,\"__filename\":false,\"Buffer\":false,\"clearImmediate\":false,\"clearInterval\":false,\"clearTimeout\":false,\"console\":false,\"exports\":true,\"global\":false,\"Intl\":false,\"module\":false,\"process\":false,\"queueMicrotask\":false,\"require\":false,\"setImmediate\":false,\"setInterval\":false,\"setTimeout\":false,\"TextDecoder\":false,\"TextEncoder\":false,\"URL\":false,\"URLSearchParams\":false},\"commonjs\":{\"exports\":true,\"global\":false,\"module\":false,\"require\":false},\"amd\":{\"define\":false,\"require\":false},\"mocha\":{\"after\":false,\"afterEach\":false,\"before\":false,\"beforeEach\":false,\"context\":false,\"describe\":false,\"it\":false,\"mocha\":false,\"run\":false,\"setup\":false,\"specify\":false,\"suite\":false,\"suiteSetup\":false,\"suiteTeardown\":false,\"teardown\":false,\"test\":false,\"xcontext\":false,\"xdescribe\":false,\"xit\":false,\"xspecify\":false},\"jasmine\":{\"afterAll\":false,\"afterEach\":false,\"beforeAll\":false,\"beforeEach\":false,\"describe\":false,\"expect\":false,\"fail\":false,\"fdescribe\":false,\"fit\":false,\"it\":false,\"jasmine\":false,\"pending\":false,\"runs\":false,\"spyOn\":false,\"spyOnProperty\":false,\"waits\":false,\"waitsFor\":false,\"xdescribe\":false,\"xit\":false},\"jest\":{\"afterAll\":false,\"afterEach\":false,\"beforeAll\":false,\"beforeEach\":false,\"describe\":false,\"expect\":false,\"fdescribe\":false,\"fit\":false,\"it\":false,\"jest\":false,\"pit\":false,\"require\":false,\"test\":false,\"xdescribe\":false,\"xit\":false,\"xtest\":false},\"qunit\":{\"asyncTest\":false,\"deepEqual\":false,\"equal\":false,\"expect\":false,\"module\":false,\"notDeepEqual\":false,\"notEqual\":false,\"notOk\":false,\"notPropEqual\":false,\"notStrictEqual\":false,\"ok\":false,\"propEqual\":false,\"QUnit\":false,\"raises\":false,\"start\":false,\"stop\":false,\"strictEqual\":false,\"test\":false,\"throws\":false},\"phantomjs\":{\"console\":true,\"exports\":true,\"phantom\":true,\"require\":true,\"WebPage\":true},\"couch\":{\"emit\":false,\"exports\":false,\"getRow\":false,\"log\":false,\"module\":false,\"provides\":false,\"require\":false,\"respond\":false,\"send\":false,\"start\":false,\"sum\":false},\"rhino\":{\"defineClass\":false,\"deserialize\":false,\"gc\":false,\"help\":false,\"importClass\":false,\"importPackage\":false,\"java\":false,\"load\":false,\"loadClass\":false,\"Packages\":false,\"print\":false,\"quit\":false,\"readFile\":false,\"readUrl\":false,\"runCommand\":false,\"seal\":false,\"serialize\":false,\"spawn\":false,\"sync\":false,\"toint32\":false,\"version\":false},\"nashorn\":{\"__DIR__\":false,\"__FILE__\":false,\"__LINE__\":false,\"com\":false,\"edu\":false,\"exit\":false,\"java\":false,\"Java\":false,\"javafx\":false,\"JavaImporter\":false,\"javax\":false,\"JSAdapter\":false,\"load\":false,\"loadWithNewGlobal\":false,\"org\":false,\"Packages\":false,\"print\":false,\"quit\":false},\"wsh\":{\"ActiveXObject\":true,\"Enumerator\":true,\"GetObject\":true,\"ScriptEngine\":true,\"ScriptEngineBuildVersion\":true,\"ScriptEngineMajorVersion\":true,\"ScriptEngineMinorVersion\":true,\"VBArray\":true,\"WScript\":true,\"WSH\":true,\"XDomainRequest\":true},\"jquery\":{\"$\":false,\"jQuery\":false},\"yui\":{\"YAHOO\":false,\"YAHOO_config\":false,\"YUI\":false,\"YUI_config\":false},\"shelljs\":{\"cat\":false,\"cd\":false,\"chmod\":false,\"config\":false,\"cp\":false,\"dirs\":false,\"echo\":false,\"env\":false,\"error\":false,\"exec\":false,\"exit\":false,\"find\":false,\"grep\":false,\"ln\":false,\"ls\":false,\"mkdir\":false,\"mv\":false,\"popd\":false,\"pushd\":false,\"pwd\":false,\"rm\":false,\"sed\":false,\"set\":false,\"target\":false,\"tempdir\":false,\"test\":false,\"touch\":false,\"which\":false},\"prototypejs\":{\"$\":false,\"$$\":false,\"$A\":false,\"$break\":false,\"$continue\":false,\"$F\":false,\"$H\":false,\"$R\":false,\"$w\":false,\"Abstract\":false,\"Ajax\":false,\"Autocompleter\":false,\"Builder\":false,\"Class\":false,\"Control\":false,\"Draggable\":false,\"Draggables\":false,\"Droppables\":false,\"Effect\":false,\"Element\":false,\"Enumerable\":false,\"Event\":false,\"Field\":false,\"Form\":false,\"Hash\":false,\"Insertion\":false,\"ObjectRange\":false,\"PeriodicalExecuter\":false,\"Position\":false,\"Prototype\":false,\"Scriptaculous\":false,\"Selector\":false,\"Sortable\":false,\"SortableObserver\":false,\"Sound\":false,\"Template\":false,\"Toggle\":false,\"Try\":false},\"meteor\":{\"_\":false,\"$\":false,\"Accounts\":false,\"AccountsClient\":false,\"AccountsCommon\":false,\"AccountsServer\":false,\"App\":false,\"Assets\":false,\"Blaze\":false,\"check\":false,\"Cordova\":false,\"DDP\":false,\"DDPRateLimiter\":false,\"DDPServer\":false,\"Deps\":false,\"EJSON\":false,\"Email\":false,\"HTTP\":false,\"Log\":false,\"Match\":false,\"Meteor\":false,\"Mongo\":false,\"MongoInternals\":false,\"Npm\":false,\"Package\":false,\"Plugin\":false,\"process\":false,\"Random\":false,\"ReactiveDict\":false,\"ReactiveVar\":false,\"Router\":false,\"ServiceConfiguration\":false,\"Session\":false,\"share\":false,\"Spacebars\":false,\"Template\":false,\"Tinytest\":false,\"Tracker\":false,\"UI\":false,\"Utils\":false,\"WebApp\":false,\"WebAppInternals\":false},\"mongo\":{\"_isWindows\":false,\"_rand\":false,\"BulkWriteResult\":false,\"cat\":false,\"cd\":false,\"connect\":false,\"db\":false,\"getHostName\":false,\"getMemInfo\":false,\"hostname\":false,\"ISODate\":false,\"listFiles\":false,\"load\":false,\"ls\":false,\"md5sumFile\":false,\"mkdir\":false,\"Mongo\":false,\"NumberInt\":false,\"NumberLong\":false,\"ObjectId\":false,\"PlanCache\":false,\"print\":false,\"printjson\":false,\"pwd\":false,\"quit\":false,\"removeFile\":false,\"rs\":false,\"sh\":false,\"UUID\":false,\"version\":false,\"WriteResult\":false},\"applescript\":{\"$\":false,\"Application\":false,\"Automation\":false,\"console\":false,\"delay\":false,\"Library\":false,\"ObjC\":false,\"ObjectSpecifier\":false,\"Path\":false,\"Progress\":false,\"Ref\":false},\"serviceworker\":{\"addEventListener\":false,\"applicationCache\":false,\"atob\":false,\"Blob\":false,\"BroadcastChannel\":false,\"btoa\":false,\"Cache\":false,\"caches\":false,\"CacheStorage\":false,\"clearInterval\":false,\"clearTimeout\":false,\"Client\":false,\"clients\":false,\"Clients\":false,\"close\":true,\"console\":false,\"ExtendableEvent\":false,\"ExtendableMessageEvent\":false,\"fetch\":false,\"FetchEvent\":false,\"FileReaderSync\":false,\"FormData\":false,\"Headers\":false,\"IDBCursor\":false,\"IDBCursorWithValue\":false,\"IDBDatabase\":false,\"IDBFactory\":false,\"IDBIndex\":false,\"IDBKeyRange\":false,\"IDBObjectStore\":false,\"IDBOpenDBRequest\":false,\"IDBRequest\":false,\"IDBTransaction\":false,\"IDBVersionChangeEvent\":false,\"ImageData\":false,\"importScripts\":false,\"indexedDB\":false,\"location\":false,\"MessageChannel\":false,\"MessagePort\":false,\"name\":false,\"navigator\":false,\"Notification\":false,\"onclose\":true,\"onconnect\":true,\"onerror\":true,\"onfetch\":true,\"oninstall\":true,\"onlanguagechange\":true,\"onmessage\":true,\"onmessageerror\":true,\"onnotificationclick\":true,\"onnotificationclose\":true,\"onoffline\":true,\"ononline\":true,\"onpush\":true,\"onpushsubscriptionchange\":true,\"onrejectionhandled\":true,\"onsync\":true,\"onunhandledrejection\":true,\"performance\":false,\"Performance\":false,\"PerformanceEntry\":false,\"PerformanceMark\":false,\"PerformanceMeasure\":false,\"PerformanceNavigation\":false,\"PerformanceResourceTiming\":false,\"PerformanceTiming\":false,\"postMessage\":true,\"Promise\":false,\"queueMicrotask\":false,\"registration\":false,\"removeEventListener\":false,\"Request\":false,\"Response\":false,\"self\":false,\"ServiceWorker\":false,\"ServiceWorkerContainer\":false,\"ServiceWorkerGlobalScope\":false,\"ServiceWorkerMessageEvent\":false,\"ServiceWorkerRegistration\":false,\"setInterval\":false,\"setTimeout\":false,\"skipWaiting\":false,\"TextDecoder\":false,\"TextEncoder\":false,\"URL\":false,\"URLSearchParams\":false,\"WebSocket\":false,\"WindowClient\":false,\"Worker\":false,\"WorkerGlobalScope\":false,\"XMLHttpRequest\":false},\"atomtest\":{\"advanceClock\":false,\"fakeClearInterval\":false,\"fakeClearTimeout\":false,\"fakeSetInterval\":false,\"fakeSetTimeout\":false,\"resetTimeouts\":false,\"waitsForPromise\":false},\"embertest\":{\"andThen\":false,\"click\":false,\"currentPath\":false,\"currentRouteName\":false,\"currentURL\":false,\"fillIn\":false,\"find\":false,\"findAll\":false,\"findWithAssert\":false,\"keyEvent\":false,\"pauseTest\":false,\"resumeTest\":false,\"triggerEvent\":false,\"visit\":false,\"wait\":false},\"protractor\":{\"$\":false,\"$$\":false,\"browser\":false,\"by\":false,\"By\":false,\"DartObject\":false,\"element\":false,\"protractor\":false},\"shared-node-browser\":{\"clearInterval\":false,\"clearTimeout\":false,\"console\":false,\"setInterval\":false,\"setTimeout\":false,\"URL\":false,\"URLSearchParams\":false},\"webextensions\":{\"browser\":false,\"chrome\":false,\"opr\":false},\"greasemonkey\":{\"cloneInto\":false,\"createObjectIn\":false,\"exportFunction\":false,\"GM\":false,\"GM_addStyle\":false,\"GM_deleteValue\":false,\"GM_getResourceText\":false,\"GM_getResourceURL\":false,\"GM_getValue\":false,\"GM_info\":false,\"GM_listValues\":false,\"GM_log\":false,\"GM_openInTab\":false,\"GM_registerMenuCommand\":false,\"GM_setClipboard\":false,\"GM_setValue\":false,\"GM_xmlhttpRequest\":false,\"unsafeWindow\":false},\"devtools\":{\"$\":false,\"$_\":false,\"$$\":false,\"$0\":false,\"$1\":false,\"$2\":false,\"$3\":false,\"$4\":false,\"$x\":false,\"chrome\":false,\"clear\":false,\"copy\":false,\"debug\":false,\"dir\":false,\"dirxml\":false,\"getEventListeners\":false,\"inspect\":false,\"keys\":false,\"monitor\":false,\"monitorEvents\":false,\"profile\":false,\"profileEnd\":false,\"queryObjects\":false,\"table\":false,\"undebug\":false,\"unmonitor\":false,\"unmonitorEvents\":false,\"values\":false}}");
			}
		}, __webpack_module_cache__ = {};
		function __webpack_require__(moduleId) {
			var cachedModule = __webpack_module_cache__[moduleId];
			if (void 0 !== cachedModule) return cachedModule.exports;
			var module$1 = __webpack_module_cache__[moduleId] = { exports: {} };
			return __webpack_modules__[moduleId].call(module$1.exports, module$1, module$1.exports, __webpack_require__), module$1.exports;
		}
		__webpack_require__.n = (module$1) => {
			var getter = module$1 && module$1.__esModule ? () => module$1.default : () => module$1;
			return __webpack_require__.d(getter, { a: getter }), getter;
		}, __webpack_require__.d = (exports$1, definition) => {
			for (var key in definition) __webpack_require__.o(definition, key) && !__webpack_require__.o(exports$1, key) && Object.defineProperty(exports$1, key, {
				enumerable: !0,
				get: definition[key]
			});
		}, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.r = (exports$1) => {
			"undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports$1, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(exports$1, "__esModule", { value: !0 });
		};
		var __webpack_exports__ = {};
		(() => {
			"use strict";
			__webpack_require__.d(__webpack_exports__, { default: () => transform$1 });
			var lib = __webpack_require__("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), plugin_proposal_decorators_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/index.js"), plugin_syntax_class_properties_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-class-properties/lib/index.js"), plugin_syntax_import_assertions_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.26.0_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js"), plugin_syntax_jsx_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js"), plugin_transform_export_namespace_from_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js"), plugin_transform_react_jsx_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/index.js"), plugin_transform_typescript_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js"), babel_plugin_parameter_decorator_lib = __webpack_require__("./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js"), babel_plugin_parameter_decorator_lib_default = __webpack_require__.n(babel_plugin_parameter_decorator_lib), helper_plugin_utils_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
			function createParamDecorator(paramIndex, decoratorExpression, isConstructor = !1) {
				return lib.types.decorator(lib.types.functionExpression(null, [lib.types.identifier("target"), lib.types.identifier("key")], lib.types.blockStatement([lib.types.returnStatement(lib.types.callExpression(decoratorExpression, [
					lib.types.identifier("target"),
					lib.types.identifier(isConstructor ? "undefined" : "key"),
					lib.types.numericLiteral(paramIndex)
				]))])));
			}
			function parameterVisitor(classPath, path$9) {
				if ("ClassMethod" !== path$9.type) return;
				if ("ClassMethod" !== path$9.node.type) return;
				if ("Identifier" !== path$9.node.key.type) return;
				const methodPath = path$9, params = methodPath.get("params") || [];
				for (const param of params) {
					if (null == ("Identifier" === param.node.type || "ObjectPattern" === param.node.type ? param.node : "TSParameterProperty" === param.node.type && "Identifier" === param.node.parameter.type ? param.node.parameter : null)) continue;
					let resultantDecorator;
					for (const decorator of param.node.decorators || []) "constructor" === methodPath.node.kind ? (resultantDecorator = createParamDecorator(param.key, decorator.expression, !0), classPath.node.decorators || (classPath.node.decorators = []), classPath.node.decorators.push(resultantDecorator)) : (resultantDecorator = createParamDecorator(param.key, decorator.expression, !1), methodPath.node.decorators || (methodPath.node.decorators = []), methodPath.node.decorators.push(resultantDecorator));
					resultantDecorator && (param.node.decorators = null);
				}
			}
			function createVoidZero() {
				return lib.types.unaryExpression("void", lib.types.numericLiteral(0));
			}
			function getTypedNode(param) {
				return null == param ? null : "ClassProperty" === param.type || "Identifier" === param.type || "ObjectPattern" === param.type ? param : "AssignmentPattern" === param.type && "Identifier" === param.left.type ? param.left : "TSParameterProperty" === param.type ? getTypedNode(param.parameter) : null;
			}
			function serializeType(classPath, param) {
				const node = getTypedNode(param);
				if (null == node) return createVoidZero();
				if (!node.typeAnnotation || "TSTypeAnnotation" !== node.typeAnnotation.type) return createVoidZero();
				const annotation = node.typeAnnotation.typeAnnotation;
				return serializeTypeNode(classPath.node.id ? classPath.node.id.name : "", annotation);
			}
			function serializeTypeReferenceNode(className, node) {
				const reference = serializeReference(node.typeName);
				return isClassType(className, reference) ? lib.types.identifier("Object") : lib.types.conditionalExpression(lib.types.binaryExpression("===", lib.types.unaryExpression("typeof", reference), lib.types.stringLiteral("undefined")), lib.types.identifier("Object"), lib.types.cloneDeep(reference));
			}
			function isClassType(className, node) {
				switch (node.type) {
					case "Identifier": return node.name === className;
					case "MemberExpression": return isClassType(className, node.object);
					default: throw new Error(`The property expression at ${node.start} is not valid as a Type to be used in Reflect.metadata`);
				}
			}
			function serializeReference(typeName) {
				return "Identifier" === typeName.type ? lib.types.identifier(typeName.name) : lib.types.memberExpression(serializeReference(typeName.left), typeName.right);
			}
			function serializeTypeNode(className, node) {
				if (void 0 === node) return lib.types.identifier("Object");
				switch (node.type) {
					case "TSVoidKeyword":
					case "TSUndefinedKeyword":
					case "TSNullKeyword":
					case "TSNeverKeyword": return createVoidZero();
					case "TSParenthesizedType": return serializeTypeNode(className, node.typeAnnotation);
					case "TSFunctionType":
					case "TSConstructorType": return lib.types.identifier("Function");
					case "TSArrayType":
					case "TSTupleType": return lib.types.identifier("Array");
					case "TSTypePredicate":
					case "TSBooleanKeyword": return lib.types.identifier("Boolean");
					case "TSStringKeyword": return lib.types.identifier("String");
					case "TSObjectKeyword": return lib.types.identifier("Object");
					case "TSLiteralType": switch (node.literal.type) {
						case "StringLiteral": return lib.types.identifier("String");
						case "NumericLiteral": return lib.types.identifier("Number");
						case "BooleanLiteral": return lib.types.identifier("Boolean");
						default: throw new Error("Bad type for decorator" + node.literal);
					}
					case "TSNumberKeyword":
					case "TSBigIntKeyword": return lib.types.identifier("Number");
					case "TSSymbolKeyword": return lib.types.identifier("Symbol");
					case "TSTypeReference": return serializeTypeReferenceNode(className, node);
					case "TSIntersectionType":
					case "TSUnionType": return serializeTypeList(className, node.types);
					case "TSConditionalType": return serializeTypeList(className, [node.trueType, node.falseType]);
					case "TSTypeQuery":
					case "TSTypeOperator":
					case "TSIndexedAccessType":
					case "TSMappedType":
					case "TSTypeLiteral":
					case "TSAnyKeyword":
					case "TSUnknownKeyword":
					case "TSThisType": break;
					default: throw new Error("Bad type for decorator");
				}
				return lib.types.identifier("Object");
			}
			function serializeTypeList(className, types$8) {
				let serializedUnion;
				for (let typeNode of types$8) {
					for (; "TSParenthesizedType" === typeNode.type;) typeNode = typeNode.typeAnnotation;
					if ("TSNeverKeyword" === typeNode.type) continue;
					if ("TSNullKeyword" === typeNode.type || "TSUndefinedKeyword" === typeNode.type) continue;
					const serializedIndividual = serializeTypeNode(className, typeNode);
					if (lib.types.isIdentifier(serializedIndividual) && "Object" === serializedIndividual.name) return serializedIndividual;
					if (serializedUnion) {
						if (!lib.types.isIdentifier(serializedUnion) || !lib.types.isIdentifier(serializedIndividual) || serializedUnion.name !== serializedIndividual.name) return lib.types.identifier("Object");
					} else serializedUnion = serializedIndividual;
				}
				return serializedUnion || createVoidZero();
			}
			function createMetadataDesignDecorator(design, typeArg) {
				return lib.types.decorator(lib.types.logicalExpression("||", lib.types.optionalCallExpression(lib.types.memberExpression(lib.types.identifier("Reflect"), lib.types.identifier("metadata")), [lib.types.stringLiteral(design), typeArg], !0), lib.types.arrowFunctionExpression([lib.types.identifier("t")], lib.types.identifier("t"))));
			}
			function metadataVisitor(classPath, path$9) {
				const field = path$9.node, classNode = classPath.node;
				switch (field.type) {
					case "ClassMethod": {
						const decorators = "constructor" === field.kind ? classNode.decorators : field.decorators;
						if (!decorators || 0 === decorators.length) return;
						decorators.push(createMetadataDesignDecorator("design:type", lib.types.identifier("Function"))), decorators.push(createMetadataDesignDecorator("design:paramtypes", lib.types.arrayExpression(field.params.map((param) => serializeType(classPath, param)))));
						break;
					}
					case "ClassProperty":
						if (!field.decorators || 0 === field.decorators.length) return;
						if (!field.typeAnnotation || "TSTypeAnnotation" !== field.typeAnnotation.type) return;
						field.decorators.push(createMetadataDesignDecorator("design:type", serializeType(classPath, field)));
				}
			}
			const babel_plugin_transform_typescript_metadata = (0, helper_plugin_utils_lib.declare)((api$1) => (api$1.assertVersion(7), { visitor: { Program(programPath) {
				programPath.traverse({ ClassDeclaration(path$9) {
					for (const field of path$9.get("body").get("body")) "ClassMethod" !== field.type && "ClassProperty" !== field.type || (parameterVisitor(path$9, field), metadataVisitor(path$9, field));
					path$9.parentPath.scope.crawl();
				} });
			} } }));
			function importMetaEnvPlugin({ template, types: types$8 }) {
				return {
					name: "@import-meta-env/babel",
					visitor: { Identifier(path$9) {
						if (!types$8.isIdentifier(path$9)) return;
						if (!types$8.isMemberExpression(path$9.parentPath) && !types$8.isOptionalMemberExpression(path$9.parentPath)) return;
						if (!types$8.isMemberExpression(path$9.parentPath.node)) return;
						const parentNode = path$9.parentPath.node;
						if (!types$8.isMetaProperty(parentNode.object)) return;
						const parentNodeObjMeta = parentNode.object;
						"import" === parentNodeObjMeta.meta.name && "meta" === parentNodeObjMeta.property.name && "env" === parentNode.property.name && path$9.parentPath.replaceWith(template.expression.ast("process.env"));
					} }
				};
			}
			function importMetaResolvePlugin(_ctx) {
				return {
					name: "import-meta-resolve",
					visitor: { Program(path$9) {
						const metas = [];
						if (path$9.traverse({ MemberExpression(memberExpPath) {
							const { node } = memberExpPath;
							"MetaProperty" === node.object.type && "import" === node.object.meta.name && "meta" === node.object.property.name && "Identifier" === node.property.type && "resolve" === node.property.name && metas.push(memberExpPath);
						} }), 0 !== metas.length) for (const meta of metas) meta.replaceWith({
							type: "ExpressionStatement",
							expression: {
								type: "Identifier",
								name: "jitiESMResolve"
							}
						});
					} }
				};
			}
			var template_lib = __webpack_require__("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
			const _DRIVE_LETTER_START_RE$1 = /^[A-Za-z]:\//;
			function normalizeWindowsPath$1(input = "") {
				return input ? input.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE$1, (r$1) => r$1.toUpperCase()) : input;
			}
			const _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/;
			const pathe_ff20891b_isAbsolute = function(p$1) {
				return _IS_ABSOLUTE_RE.test(p$1);
			}, pathe_ff20891b_dirname = function(p$1) {
				const segments = normalizeWindowsPath$1(p$1).replace(/\/$/, "").split("/").slice(0, -1);
				return 1 === segments.length && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (pathe_ff20891b_isAbsolute(p$1) ? "/" : ".");
			};
			var astralIdentifierCodes = [
				509,
				0,
				227,
				0,
				150,
				4,
				294,
				9,
				1368,
				2,
				2,
				1,
				6,
				3,
				41,
				2,
				5,
				0,
				166,
				1,
				574,
				3,
				9,
				9,
				7,
				9,
				32,
				4,
				318,
				1,
				80,
				3,
				71,
				10,
				50,
				3,
				123,
				2,
				54,
				14,
				32,
				10,
				3,
				1,
				11,
				3,
				46,
				10,
				8,
				0,
				46,
				9,
				7,
				2,
				37,
				13,
				2,
				9,
				6,
				1,
				45,
				0,
				13,
				2,
				49,
				13,
				9,
				3,
				2,
				11,
				83,
				11,
				7,
				0,
				3,
				0,
				158,
				11,
				6,
				9,
				7,
				3,
				56,
				1,
				2,
				6,
				3,
				1,
				3,
				2,
				10,
				0,
				11,
				1,
				3,
				6,
				4,
				4,
				68,
				8,
				2,
				0,
				3,
				0,
				2,
				3,
				2,
				4,
				2,
				0,
				15,
				1,
				83,
				17,
				10,
				9,
				5,
				0,
				82,
				19,
				13,
				9,
				214,
				6,
				3,
				8,
				28,
				1,
				83,
				16,
				16,
				9,
				82,
				12,
				9,
				9,
				7,
				19,
				58,
				14,
				5,
				9,
				243,
				14,
				166,
				9,
				71,
				5,
				2,
				1,
				3,
				3,
				2,
				0,
				2,
				1,
				13,
				9,
				120,
				6,
				3,
				6,
				4,
				0,
				29,
				9,
				41,
				6,
				2,
				3,
				9,
				0,
				10,
				10,
				47,
				15,
				343,
				9,
				54,
				7,
				2,
				7,
				17,
				9,
				57,
				21,
				2,
				13,
				123,
				5,
				4,
				0,
				2,
				1,
				2,
				6,
				2,
				0,
				9,
				9,
				49,
				4,
				2,
				1,
				2,
				4,
				9,
				9,
				330,
				3,
				10,
				1,
				2,
				0,
				49,
				6,
				4,
				4,
				14,
				10,
				5350,
				0,
				7,
				14,
				11465,
				27,
				2343,
				9,
				87,
				9,
				39,
				4,
				60,
				6,
				26,
				9,
				535,
				9,
				470,
				0,
				2,
				54,
				8,
				3,
				82,
				0,
				12,
				1,
				19628,
				1,
				4178,
				9,
				519,
				45,
				3,
				22,
				543,
				4,
				4,
				5,
				9,
				7,
				3,
				6,
				31,
				3,
				149,
				2,
				1418,
				49,
				513,
				54,
				5,
				49,
				9,
				0,
				15,
				0,
				23,
				4,
				2,
				14,
				1361,
				6,
				2,
				16,
				3,
				6,
				2,
				1,
				2,
				4,
				101,
				0,
				161,
				6,
				10,
				9,
				357,
				0,
				62,
				13,
				499,
				13,
				245,
				1,
				2,
				9,
				726,
				6,
				110,
				6,
				6,
				9,
				4759,
				9,
				787719,
				239
			], astralIdentifierStartCodes = [
				0,
				11,
				2,
				25,
				2,
				18,
				2,
				1,
				2,
				14,
				3,
				13,
				35,
				122,
				70,
				52,
				268,
				28,
				4,
				48,
				48,
				31,
				14,
				29,
				6,
				37,
				11,
				29,
				3,
				35,
				5,
				7,
				2,
				4,
				43,
				157,
				19,
				35,
				5,
				35,
				5,
				39,
				9,
				51,
				13,
				10,
				2,
				14,
				2,
				6,
				2,
				1,
				2,
				10,
				2,
				14,
				2,
				6,
				2,
				1,
				4,
				51,
				13,
				310,
				10,
				21,
				11,
				7,
				25,
				5,
				2,
				41,
				2,
				8,
				70,
				5,
				3,
				0,
				2,
				43,
				2,
				1,
				4,
				0,
				3,
				22,
				11,
				22,
				10,
				30,
				66,
				18,
				2,
				1,
				11,
				21,
				11,
				25,
				71,
				55,
				7,
				1,
				65,
				0,
				16,
				3,
				2,
				2,
				2,
				28,
				43,
				28,
				4,
				28,
				36,
				7,
				2,
				27,
				28,
				53,
				11,
				21,
				11,
				18,
				14,
				17,
				111,
				72,
				56,
				50,
				14,
				50,
				14,
				35,
				39,
				27,
				10,
				22,
				251,
				41,
				7,
				1,
				17,
				2,
				60,
				28,
				11,
				0,
				9,
				21,
				43,
				17,
				47,
				20,
				28,
				22,
				13,
				52,
				58,
				1,
				3,
				0,
				14,
				44,
				33,
				24,
				27,
				35,
				30,
				0,
				3,
				0,
				9,
				34,
				4,
				0,
				13,
				47,
				15,
				3,
				22,
				0,
				2,
				0,
				36,
				17,
				2,
				24,
				20,
				1,
				64,
				6,
				2,
				0,
				2,
				3,
				2,
				14,
				2,
				9,
				8,
				46,
				39,
				7,
				3,
				1,
				3,
				21,
				2,
				6,
				2,
				1,
				2,
				4,
				4,
				0,
				19,
				0,
				13,
				4,
				31,
				9,
				2,
				0,
				3,
				0,
				2,
				37,
				2,
				0,
				26,
				0,
				2,
				0,
				45,
				52,
				19,
				3,
				21,
				2,
				31,
				47,
				21,
				1,
				2,
				0,
				185,
				46,
				42,
				3,
				37,
				47,
				21,
				0,
				60,
				42,
				14,
				0,
				72,
				26,
				38,
				6,
				186,
				43,
				117,
				63,
				32,
				7,
				3,
				0,
				3,
				7,
				2,
				1,
				2,
				23,
				16,
				0,
				2,
				0,
				95,
				7,
				3,
				38,
				17,
				0,
				2,
				0,
				29,
				0,
				11,
				39,
				8,
				0,
				22,
				0,
				12,
				45,
				20,
				0,
				19,
				72,
				200,
				32,
				32,
				8,
				2,
				36,
				18,
				0,
				50,
				29,
				113,
				6,
				2,
				1,
				2,
				37,
				22,
				0,
				26,
				5,
				2,
				1,
				2,
				31,
				15,
				0,
				328,
				18,
				16,
				0,
				2,
				12,
				2,
				33,
				125,
				0,
				80,
				921,
				103,
				110,
				18,
				195,
				2637,
				96,
				16,
				1071,
				18,
				5,
				26,
				3994,
				6,
				582,
				6842,
				29,
				1763,
				568,
				8,
				30,
				18,
				78,
				18,
				29,
				19,
				47,
				17,
				3,
				32,
				20,
				6,
				18,
				433,
				44,
				212,
				63,
				129,
				74,
				6,
				0,
				67,
				12,
				65,
				1,
				2,
				0,
				29,
				6135,
				9,
				1237,
				42,
				9,
				8936,
				3,
				2,
				6,
				2,
				1,
				2,
				290,
				16,
				0,
				30,
				2,
				3,
				0,
				15,
				3,
				9,
				395,
				2309,
				106,
				6,
				12,
				4,
				8,
				8,
				9,
				5991,
				84,
				2,
				70,
				2,
				1,
				3,
				0,
				3,
				1,
				3,
				3,
				2,
				11,
				2,
				0,
				2,
				6,
				2,
				64,
				2,
				3,
				3,
				7,
				2,
				6,
				2,
				27,
				2,
				3,
				2,
				4,
				2,
				0,
				4,
				6,
				2,
				339,
				3,
				24,
				2,
				24,
				2,
				30,
				2,
				24,
				2,
				30,
				2,
				24,
				2,
				30,
				2,
				24,
				2,
				30,
				2,
				24,
				2,
				7,
				1845,
				30,
				7,
				5,
				262,
				61,
				147,
				44,
				11,
				6,
				17,
				0,
				322,
				29,
				19,
				43,
				485,
				27,
				229,
				29,
				3,
				0,
				496,
				6,
				2,
				3,
				2,
				1,
				2,
				14,
				2,
				196,
				60,
				67,
				8,
				0,
				1205,
				3,
				2,
				26,
				2,
				1,
				2,
				0,
				3,
				0,
				2,
				9,
				2,
				3,
				2,
				0,
				2,
				0,
				7,
				0,
				5,
				0,
				2,
				0,
				2,
				0,
				2,
				2,
				2,
				1,
				2,
				0,
				3,
				0,
				2,
				0,
				2,
				0,
				2,
				0,
				2,
				0,
				2,
				1,
				2,
				0,
				3,
				3,
				2,
				6,
				2,
				3,
				2,
				3,
				2,
				0,
				2,
				9,
				2,
				16,
				6,
				2,
				2,
				4,
				2,
				16,
				4421,
				42719,
				33,
				4153,
				7,
				221,
				3,
				5761,
				15,
				7472,
				16,
				621,
				2467,
				541,
				1507,
				4938,
				6,
				4191
			], nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲊᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟍꟐꟑꟓꟕ-Ƛꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ", reservedWords = {
				3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
				5: "class enum extends super const export import",
				6: "enum",
				strict: "implements interface let package private protected public static yield",
				strictBind: "eval arguments"
			}, ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$1 = {
				5: ecma5AndLessKeywords,
				"5module": ecma5AndLessKeywords + " export import",
				6: ecma5AndLessKeywords + " const class extends export import super"
			}, keywordRelationalOperator = /^in(stanceof)?$/, nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࢗ-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･]");
			function isInAstralSet(code, set) {
				for (var pos = 65536, i$1 = 0; i$1 < set.length; i$1 += 2) {
					if ((pos += set[i$1]) > code) return !1;
					if ((pos += set[i$1 + 1]) >= code) return !0;
				}
				return !1;
			}
			function isIdentifierStart(code, astral) {
				return code < 65 ? 36 === code : code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : !1 !== astral && isInAstralSet(code, astralIdentifierStartCodes)));
			}
			function isIdentifierChar(code, astral) {
				return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : !1 !== astral && (isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)))));
			}
			var TokenType = function(label, conf) {
				void 0 === conf && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
			};
			function binop(name, prec) {
				return new TokenType(name, {
					beforeExpr: !0,
					binop: prec
				});
			}
			var beforeExpr = { beforeExpr: !0 }, startsExpr = { startsExpr: !0 }, keywords = {};
			function kw(name, options) {
				return void 0 === options && (options = {}), options.keyword = name, keywords[name] = new TokenType(name, options);
			}
			var types$1$1 = {
				num: new TokenType("num", startsExpr),
				regexp: new TokenType("regexp", startsExpr),
				string: new TokenType("string", startsExpr),
				name: new TokenType("name", startsExpr),
				privateId: new TokenType("privateId", startsExpr),
				eof: new TokenType("eof"),
				bracketL: new TokenType("[", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				bracketR: new TokenType("]"),
				braceL: new TokenType("{", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				braceR: new TokenType("}"),
				parenL: new TokenType("(", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				parenR: new TokenType(")"),
				comma: new TokenType(",", beforeExpr),
				semi: new TokenType(";", beforeExpr),
				colon: new TokenType(":", beforeExpr),
				dot: new TokenType("."),
				question: new TokenType("?", beforeExpr),
				questionDot: new TokenType("?."),
				arrow: new TokenType("=>", beforeExpr),
				template: new TokenType("template"),
				invalidTemplate: new TokenType("invalidTemplate"),
				ellipsis: new TokenType("...", beforeExpr),
				backQuote: new TokenType("`", startsExpr),
				dollarBraceL: new TokenType("${", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				eq: new TokenType("=", {
					beforeExpr: !0,
					isAssign: !0
				}),
				assign: new TokenType("_=", {
					beforeExpr: !0,
					isAssign: !0
				}),
				incDec: new TokenType("++/--", {
					prefix: !0,
					postfix: !0,
					startsExpr: !0
				}),
				prefix: new TokenType("!/~", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				}),
				logicalOR: binop("||", 1),
				logicalAND: binop("&&", 2),
				bitwiseOR: binop("|", 3),
				bitwiseXOR: binop("^", 4),
				bitwiseAND: binop("&", 5),
				equality: binop("==/!=/===/!==", 6),
				relational: binop("</>/<=/>=", 7),
				bitShift: binop("<</>>/>>>", 8),
				plusMin: new TokenType("+/-", {
					beforeExpr: !0,
					binop: 9,
					prefix: !0,
					startsExpr: !0
				}),
				modulo: binop("%", 10),
				star: binop("*", 10),
				slash: binop("/", 10),
				starstar: new TokenType("**", { beforeExpr: !0 }),
				coalesce: binop("??", 1),
				_break: kw("break"),
				_case: kw("case", beforeExpr),
				_catch: kw("catch"),
				_continue: kw("continue"),
				_debugger: kw("debugger"),
				_default: kw("default", beforeExpr),
				_do: kw("do", {
					isLoop: !0,
					beforeExpr: !0
				}),
				_else: kw("else", beforeExpr),
				_finally: kw("finally"),
				_for: kw("for", { isLoop: !0 }),
				_function: kw("function", startsExpr),
				_if: kw("if"),
				_return: kw("return", beforeExpr),
				_switch: kw("switch"),
				_throw: kw("throw", beforeExpr),
				_try: kw("try"),
				_var: kw("var"),
				_const: kw("const"),
				_while: kw("while", { isLoop: !0 }),
				_with: kw("with"),
				_new: kw("new", {
					beforeExpr: !0,
					startsExpr: !0
				}),
				_this: kw("this", startsExpr),
				_super: kw("super", startsExpr),
				_class: kw("class", startsExpr),
				_extends: kw("extends", beforeExpr),
				_export: kw("export"),
				_import: kw("import", startsExpr),
				_null: kw("null", startsExpr),
				_true: kw("true", startsExpr),
				_false: kw("false", startsExpr),
				_in: kw("in", {
					beforeExpr: !0,
					binop: 7
				}),
				_instanceof: kw("instanceof", {
					beforeExpr: !0,
					binop: 7
				}),
				_typeof: kw("typeof", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				}),
				_void: kw("void", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				}),
				_delete: kw("delete", {
					beforeExpr: !0,
					prefix: !0,
					startsExpr: !0
				})
			}, lineBreak = /\r\n?|\n|\u2028|\u2029/, lineBreakG = new RegExp(lineBreak.source, "g");
			function isNewLine(code) {
				return 10 === code || 13 === code || 8232 === code || 8233 === code;
			}
			function nextLineBreak(code, from, end) {
				void 0 === end && (end = code.length);
				for (var i$1 = from; i$1 < end; i$1++) {
					var next = code.charCodeAt(i$1);
					if (isNewLine(next)) return i$1 < end - 1 && 13 === next && 10 === code.charCodeAt(i$1 + 1) ? i$1 + 2 : i$1 + 1;
				}
				return -1;
			}
			var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref = Object.prototype, acorn_hasOwnProperty = ref.hasOwnProperty, acorn_toString = ref.toString, hasOwn$2 = Object.hasOwn || function(obj, propName) {
				return acorn_hasOwnProperty.call(obj, propName);
			}, isArray = Array.isArray || function(obj) {
				return "[object Array]" === acorn_toString.call(obj);
			}, regexpCache = Object.create(null);
			function wordsRegexp(words) {
				return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
			}
			function codePointToString(code) {
				return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
			}
			var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position = function(line, col) {
				this.line = line, this.column = col;
			};
			Position.prototype.offset = function(n) {
				return new Position(this.line, this.column + n);
			};
			var SourceLocation = function(p$1, start, end) {
				this.start = start, this.end = end, null !== p$1.sourceFile && (this.source = p$1.sourceFile);
			};
			function getLineInfo(input, offset) {
				for (var line = 1, cur = 0;;) {
					var nextBreak = nextLineBreak(input, cur, offset);
					if (nextBreak < 0) return new Position(line, offset - cur);
					++line, cur = nextBreak;
				}
			}
			var defaultOptions$1 = {
				ecmaVersion: null,
				sourceType: "script",
				onInsertedSemicolon: null,
				onTrailingComma: null,
				allowReserved: null,
				allowReturnOutsideFunction: !1,
				allowImportExportEverywhere: !1,
				allowAwaitOutsideFunction: null,
				allowSuperOutsideMethod: null,
				allowHashBang: !1,
				checkPrivateFields: !0,
				locations: !1,
				onToken: null,
				onComment: null,
				ranges: !1,
				program: null,
				sourceFile: null,
				directSourceFile: null,
				preserveParens: !1
			}, warnedAboutEcmaVersion = !1;
			function getOptions$1(opts) {
				var options = {};
				for (var opt in defaultOptions$1) options[opt] = opts && hasOwn$2(opts, opt) ? opts[opt] : defaultOptions$1[opt];
				if ("latest" === options.ecmaVersion ? options.ecmaVersion = 1e8 : null == options.ecmaVersion ? (!warnedAboutEcmaVersion && "object" == typeof console && console.warn && (warnedAboutEcmaVersion = !0, console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), options.allowReserved ??= options.ecmaVersion < 5, opts && null != opts.allowHashBang || (options.allowHashBang = options.ecmaVersion >= 14), isArray(options.onToken)) {
					var tokens = options.onToken;
					options.onToken = function(token) {
						return tokens.push(token);
					};
				}
				return isArray(options.onComment) && (options.onComment = function(options$1, array) {
					return function(block, text, start, end, startLoc, endLoc) {
						var comment = {
							type: block ? "Block" : "Line",
							value: text,
							start,
							end
						};
						options$1.locations && (comment.loc = new SourceLocation(this, startLoc, endLoc)), options$1.ranges && (comment.range = [start, end]), array.push(comment);
					};
				}(options, options.onComment)), options;
			}
			function functionFlags(async, generator) {
				return 2 | (async ? 4 : 0) | (generator ? 8 : 0);
			}
			var Parser$1 = function(options, input, startPos) {
				this.options = options = getOptions$1(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : "module" === options.sourceType ? "5module" : 5]);
				var reserved = "";
				!0 !== options.allowReserved && (reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : 5 === options.ecmaVersion ? 5 : 3], "module" === options.sourceType && (reserved += " await")), this.reservedWords = wordsRegexp(reserved);
				var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
				this.reservedWordsStrict = wordsRegexp(reservedStrict), this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind), this.input = String(input), this.containsEsc = !1, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$1$1.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = !0, this.inModule = "module" === options.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = !1, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = Object.create(null), 0 === this.pos && options.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
			}, prototypeAccessors = {
				inFunction: { configurable: !0 },
				inGenerator: { configurable: !0 },
				inAsync: { configurable: !0 },
				canAwait: { configurable: !0 },
				allowSuper: { configurable: !0 },
				allowDirectSuper: { configurable: !0 },
				treatFunctionsAsVar: { configurable: !0 },
				allowNewDotTarget: { configurable: !0 },
				inClassStaticBlock: { configurable: !0 }
			};
			Parser$1.prototype.parse = function() {
				var node = this.options.program || this.startNode();
				return this.nextToken(), this.parseTopLevel(node);
			}, prototypeAccessors.inFunction.get = function() {
				return (2 & this.currentVarScope().flags) > 0;
			}, prototypeAccessors.inGenerator.get = function() {
				return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
			}, prototypeAccessors.inAsync.get = function() {
				return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
			}, prototypeAccessors.canAwait.get = function() {
				for (var i$1 = this.scopeStack.length - 1; i$1 >= 0; i$1--) {
					var scope = this.scopeStack[i$1];
					if (scope.inClassFieldInit || 256 & scope.flags) return !1;
					if (2 & scope.flags) return (4 & scope.flags) > 0;
				}
				return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
			}, prototypeAccessors.allowSuper.get = function() {
				var ref$1 = this.currentThisScope(), flags = ref$1.flags, inClassFieldInit = ref$1.inClassFieldInit;
				return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
			}, prototypeAccessors.allowDirectSuper.get = function() {
				return (128 & this.currentThisScope().flags) > 0;
			}, prototypeAccessors.treatFunctionsAsVar.get = function() {
				return this.treatFunctionsAsVarInScope(this.currentScope());
			}, prototypeAccessors.allowNewDotTarget.get = function() {
				var ref$1 = this.currentThisScope(), flags = ref$1.flags, inClassFieldInit = ref$1.inClassFieldInit;
				return (258 & flags) > 0 || inClassFieldInit;
			}, prototypeAccessors.inClassStaticBlock.get = function() {
				return (256 & this.currentVarScope().flags) > 0;
			}, Parser$1.extend = function() {
				for (var plugins = [], len = arguments.length; len--;) plugins[len] = arguments[len];
				for (var cls = this, i$1 = 0; i$1 < plugins.length; i$1++) cls = plugins[i$1](cls);
				return cls;
			}, Parser$1.parse = function(input, options) {
				return new this(options, input).parse();
			}, Parser$1.parseExpressionAt = function(input, pos, options) {
				var parser = new this(options, input, pos);
				return parser.nextToken(), parser.parseExpression();
			}, Parser$1.tokenizer = function(input, options) {
				return new this(options, input);
			}, Object.defineProperties(Parser$1.prototype, prototypeAccessors);
			var pp$9 = Parser$1.prototype, literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
			pp$9.strictDirective = function(start) {
				if (this.options.ecmaVersion < 5) return !1;
				for (;;) {
					skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length;
					var match = literal.exec(this.input.slice(start));
					if (!match) return !1;
					if ("use strict" === (match[1] || match[2])) {
						skipWhiteSpace.lastIndex = start + match[0].length;
						var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
						return ";" === next || "}" === next || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || "!" === next && "=" === this.input.charAt(end + 1));
					}
					start += match[0].length, skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length, ";" === this.input[start] && start++;
				}
			}, pp$9.eat = function(type$1) {
				return this.type === type$1 && (this.next(), !0);
			}, pp$9.isContextual = function(name) {
				return this.type === types$1$1.name && this.value === name && !this.containsEsc;
			}, pp$9.eatContextual = function(name) {
				return !!this.isContextual(name) && (this.next(), !0);
			}, pp$9.expectContextual = function(name) {
				this.eatContextual(name) || this.unexpected();
			}, pp$9.canInsertSemicolon = function() {
				return this.type === types$1$1.eof || this.type === types$1$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
			}, pp$9.insertSemicolon = function() {
				if (this.canInsertSemicolon()) return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), !0;
			}, pp$9.semicolon = function() {
				this.eat(types$1$1.semi) || this.insertSemicolon() || this.unexpected();
			}, pp$9.afterTrailingComma = function(tokType, notNext) {
				if (this.type === tokType) return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), !0;
			}, pp$9.expect = function(type$1) {
				this.eat(type$1) || this.unexpected();
			}, pp$9.unexpected = function(pos) {
				this.raise(null != pos ? pos : this.start, "Unexpected token");
			};
			var DestructuringErrors = function() {
				this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
			};
			pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
				if (refDestructuringErrors) {
					refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
					var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
					parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
				}
			}, pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
				if (!refDestructuringErrors) return !1;
				var shorthandAssign = refDestructuringErrors.shorthandAssign, doubleProto = refDestructuringErrors.doubleProto;
				if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;
				shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
			}, pp$9.checkYieldAwaitInDefaultParams = function() {
				this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
			}, pp$9.isSimpleAssignTarget = function(expr) {
				return "ParenthesizedExpression" === expr.type ? this.isSimpleAssignTarget(expr.expression) : "Identifier" === expr.type || "MemberExpression" === expr.type;
			};
			var pp$8 = Parser$1.prototype;
			pp$8.parseTopLevel = function(node) {
				var exports$1 = Object.create(null);
				for (node.body || (node.body = []); this.type !== types$1$1.eof;) {
					var stmt = this.parseStatement(null, !0, exports$1);
					node.body.push(stmt);
				}
				if (this.inModule) for (var i$1 = 0, list$1 = Object.keys(this.undefinedExports); i$1 < list$1.length; i$1 += 1) {
					var name = list$1[i$1];
					this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
				}
				return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
			};
			var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
			pp$8.isLet = function(context) {
				if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return !1;
				skipWhiteSpace.lastIndex = this.pos;
				var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
				if (91 === nextCh || 92 === nextCh) return !0;
				if (context) return !1;
				if (123 === nextCh || nextCh > 55295 && nextCh < 56320) return !0;
				if (isIdentifierStart(nextCh, !0)) {
					for (var pos = next + 1; isIdentifierChar(nextCh = this.input.charCodeAt(pos), !0);) ++pos;
					if (92 === nextCh || nextCh > 55295 && nextCh < 56320) return !0;
					var ident = this.input.slice(next, pos);
					if (!keywordRelationalOperator.test(ident)) return !0;
				}
				return !1;
			}, pp$8.isAsyncFunction = function() {
				if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return !1;
				skipWhiteSpace.lastIndex = this.pos;
				var after, skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length;
				return !(lineBreak.test(this.input.slice(this.pos, next)) || "function" !== this.input.slice(next, next + 8) || next + 8 !== this.input.length && (isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
			}, pp$8.parseStatement = function(context, topLevel, exports$1) {
				var kind, starttype = this.type, node = this.startNode();
				switch (this.isLet(context) && (starttype = types$1$1._var, kind = "let"), starttype) {
					case types$1$1._break:
					case types$1$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword);
					case types$1$1._debugger: return this.parseDebuggerStatement(node);
					case types$1$1._do: return this.parseDoStatement(node);
					case types$1$1._for: return this.parseForStatement(node);
					case types$1$1._function: return context && (this.strict || "if" !== context && "label" !== context) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, !1, !context);
					case types$1$1._class: return context && this.unexpected(), this.parseClass(node, !0);
					case types$1$1._if: return this.parseIfStatement(node);
					case types$1$1._return: return this.parseReturnStatement(node);
					case types$1$1._switch: return this.parseSwitchStatement(node);
					case types$1$1._throw: return this.parseThrowStatement(node);
					case types$1$1._try: return this.parseTryStatement(node);
					case types$1$1._const:
					case types$1$1._var: return kind = kind || this.value, context && "var" !== kind && this.unexpected(), this.parseVarStatement(node, kind);
					case types$1$1._while: return this.parseWhileStatement(node);
					case types$1$1._with: return this.parseWithStatement(node);
					case types$1$1.braceL: return this.parseBlock(!0, node);
					case types$1$1.semi: return this.parseEmptyStatement(node);
					case types$1$1._export:
					case types$1$1._import:
						if (this.options.ecmaVersion > 10 && starttype === types$1$1._import) {
							skipWhiteSpace.lastIndex = this.pos;
							var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
							if (40 === nextCh || 46 === nextCh) return this.parseExpressionStatement(node, this.parseExpression());
						}
						return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$1$1._import ? this.parseImport(node) : this.parseExport(node, exports$1);
					default:
						if (this.isAsyncFunction()) return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, !0, !context);
						var maybeName = this.value, expr = this.parseExpression();
						return starttype === types$1$1.name && "Identifier" === expr.type && this.eat(types$1$1.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
				}
			}, pp$8.parseBreakContinueStatement = function(node, keyword) {
				var isBreak = "break" === keyword;
				this.next(), this.eat(types$1$1.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$1$1.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
				for (var i$1 = 0; i$1 < this.labels.length; ++i$1) {
					var lab = this.labels[i$1];
					if (null == node.label || lab.name === node.label.name) {
						if (null != lab.kind && (isBreak || "loop" === lab.kind)) break;
						if (node.label && isBreak) break;
					}
				}
				return i$1 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
			}, pp$8.parseDebuggerStatement = function(node) {
				return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
			}, pp$8.parseDoStatement = function(node) {
				return this.next(), this.labels.push(loopLabel), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$1$1._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$1$1.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
			}, pp$8.parseForStatement = function(node) {
				this.next();
				var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
				if (this.labels.push(loopLabel), this.enterScope(0), this.expect(types$1$1.parenL), this.type === types$1$1.semi) return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
				var isLet = this.isLet();
				if (this.type === types$1$1._var || this.type === types$1$1._const || isLet) {
					var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
					return this.next(), this.parseVar(init$1, !0, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$1$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === init$1.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === types$1$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
				}
				var startsWithLet = this.isContextual("let"), isForOf = !1, containsEsc = this.containsEsc, refDestructuringErrors = new DestructuringErrors(), initPos = this.start, init$2 = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(!0, refDestructuringErrors);
				return this.type === types$1$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (awaitAt > -1 ? (this.type === types$1$1._in && this.unexpected(awaitAt), node.await = !0) : isForOf && this.options.ecmaVersion >= 8 && (init$2.start !== initPos || containsEsc || "Identifier" !== init$2.type || "async" !== init$2.name ? this.options.ecmaVersion >= 9 && (node.await = !1) : this.unexpected()), startsWithLet && isForOf && this.raise(init$2.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init$2, !1, refDestructuringErrors), this.checkLValPattern(init$2), this.parseForIn(node, init$2)) : (this.checkExpressionErrors(refDestructuringErrors, !0), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$2));
			}, pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
				return this.next(), this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), !1, isAsync);
			}, pp$8.parseIfStatement = function(node) {
				return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$1$1._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
			}, pp$8.parseReturnStatement = function(node) {
				return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$1$1.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
			}, pp$8.parseSwitchStatement = function(node) {
				var cur;
				this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$1$1.braceL), this.labels.push(switchLabel), this.enterScope(0);
				for (var sawDefault = !1; this.type !== types$1$1.braceR;) if (this.type === types$1$1._case || this.type === types$1$1._default) {
					var isCase = this.type === types$1$1._case;
					cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = !0, cur.test = null), this.expect(types$1$1.colon);
				} else cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
				return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
			}, pp$8.parseThrowStatement = function(node) {
				return this.next(), lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
			};
			var empty$1 = [];
			pp$8.parseCatchClauseParam = function() {
				var param = this.parseBindingAtom(), simple = "Identifier" === param.type;
				return this.enterScope(simple ? 32 : 0), this.checkLValPattern(param, simple ? 4 : 2), this.expect(types$1$1.parenR), param;
			}, pp$8.parseTryStatement = function(node) {
				if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$1$1._catch) {
					var clause = this.startNode();
					this.next(), this.eat(types$1$1.parenL) ? clause.param = this.parseCatchClauseParam() : (this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0)), clause.body = this.parseBlock(!1), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
				}
				return node.finalizer = this.eat(types$1$1._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
			}, pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
				return this.next(), this.parseVar(node, !1, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
			}, pp$8.parseWhileStatement = function(node) {
				return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
			}, pp$8.parseWithStatement = function(node) {
				return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
			}, pp$8.parseEmptyStatement = function(node) {
				return this.next(), this.finishNode(node, "EmptyStatement");
			}, pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
				for (var i$1 = 0, list$1 = this.labels; i$1 < list$1.length; i$1 += 1) list$1[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
				for (var kind = this.type.isLoop ? "loop" : this.type === types$1$1._switch ? "switch" : null, i$2 = this.labels.length - 1; i$2 >= 0; i$2--) {
					var label$1 = this.labels[i$2];
					if (label$1.statementStart !== node.start) break;
					label$1.statementStart = this.start, label$1.kind = kind;
				}
				return this.labels.push({
					name: maybeName,
					kind,
					statementStart: this.start
				}), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
			}, pp$8.parseExpressionStatement = function(node, expr) {
				return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
			}, pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
				for (void 0 === createNewLexicalScope && (createNewLexicalScope = !0), void 0 === node && (node = this.startNode()), node.body = [], this.expect(types$1$1.braceL), createNewLexicalScope && this.enterScope(0); this.type !== types$1$1.braceR;) {
					var stmt = this.parseStatement(null);
					node.body.push(stmt);
				}
				return exitStrict && (this.strict = !1), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
			}, pp$8.parseFor = function(node, init$1) {
				return node.init = init$1, this.expect(types$1$1.semi), node.test = this.type === types$1$1.semi ? null : this.parseExpression(), this.expect(types$1$1.semi), node.update = this.type === types$1$1.parenR ? null : this.parseExpression(), this.expect(types$1$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
			}, pp$8.parseForIn = function(node, init$1) {
				var isForIn = this.type === types$1$1._in;
				return this.next(), "VariableDeclaration" === init$1.type && null != init$1.declarations[0].init && (!isForIn || this.options.ecmaVersion < 8 || this.strict || "var" !== init$1.kind || "Identifier" !== init$1.declarations[0].id.type) && this.raise(init$1.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init$1, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$1$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
			}, pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
				for (node.declarations = [], node.kind = kind;;) {
					var decl = this.startNode();
					if (this.parseVarId(decl, kind), this.eat(types$1$1.eq) ? decl.init = this.parseMaybeAssign(isFor) : allowMissingInitializer || "const" !== kind || this.type === types$1$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? allowMissingInitializer || "Identifier" === decl.id.type || isFor && (this.type === types$1$1._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$1$1.comma)) break;
				}
				return node;
			}, pp$8.parseVarId = function(decl, kind) {
				decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, "var" === kind ? 1 : 2, !1);
			};
			var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2;
			function isPrivateNameConflicted(privateNameMap, element) {
				var name = element.key.name, curr = privateNameMap[name], next = "true";
				return "MethodDefinition" !== element.type || "get" !== element.kind && "set" !== element.kind || (next = (element.static ? "s" : "i") + element.kind), "iget" === curr && "iset" === next || "iset" === curr && "iget" === next || "sget" === curr && "sset" === next || "sset" === curr && "sget" === next ? (privateNameMap[name] = "true", !1) : !!curr || (privateNameMap[name] = next, !1);
			}
			function checkKeyName(node, name) {
				var computed = node.computed, key = node.key;
				return !computed && ("Identifier" === key.type && key.name === name || "Literal" === key.type && key.value === name);
			}
			pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
				this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$1$1.star && statement & FUNC_HANGING_STATEMENT && this.unexpected(), node.generator = this.eat(types$1$1.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT && (node.id = 4 & statement && this.type !== types$1$1.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
				var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
				return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags(node.async, node.generator)), statement & FUNC_STATEMENT || (node.id = this.type === types$1$1.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, !1, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
			}, pp$8.parseFunctionParams = function(node) {
				this.expect(types$1$1.parenL), node.params = this.parseBindingList(types$1$1.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
			}, pp$8.parseClass = function(node, isStatement) {
				this.next();
				var oldStrict = this.strict;
				this.strict = !0, this.parseClassId(node, isStatement), this.parseClassSuper(node);
				var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = !1;
				for (classBody.body = [], this.expect(types$1$1.braceL); this.type !== types$1$1.braceR;) {
					var element = this.parseClassElement(null !== node.superClass);
					element && (classBody.body.push(element), "MethodDefinition" === element.type && "constructor" === element.kind ? (hadConstructor && this.raiseRecoverable(element.start, "Duplicate constructor in the same class"), hadConstructor = !0) : element.key && "PrivateIdentifier" === element.key.type && isPrivateNameConflicted(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
				}
				return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
			}, pp$8.parseClassElement = function(constructorAllowsSuper) {
				if (this.eat(types$1$1.semi)) return null;
				var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator = !1, isAsync = !1, kind = "method", isStatic = !1;
				if (this.eatContextual("static")) {
					if (ecmaVersion >= 13 && this.eat(types$1$1.braceL)) return this.parseClassStaticBlock(node), node;
					this.isClassElementNameStart() || this.type === types$1$1.star ? isStatic = !0 : keyName = "static";
				}
				if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$1$1.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = !0), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1$1.star) && (isGenerator = !0), !keyName && !isAsync && !isGenerator) {
					var lastValue = this.value;
					(this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
				}
				if (keyName ? (node.computed = !1, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$1$1.parenL || "method" !== kind || isGenerator || isAsync) {
					var isConstructor = !node.static && checkKeyName(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
					isConstructor && "method" !== kind && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
				} else this.parseClassField(node);
				return node;
			}, pp$8.isClassElementNameStart = function() {
				return this.type === types$1$1.name || this.type === types$1$1.privateId || this.type === types$1$1.num || this.type === types$1$1.string || this.type === types$1$1.bracketL || this.type.keyword;
			}, pp$8.parseClassElementName = function(element) {
				this.type === types$1$1.privateId ? ("constructor" === this.value && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = !1, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
			}, pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
				var key = method.key;
				"constructor" === method.kind ? (isGenerator && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
				var value$1 = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
				return "get" === method.kind && 0 !== value$1.params.length && this.raiseRecoverable(value$1.start, "getter should have no params"), "set" === method.kind && 1 !== value$1.params.length && this.raiseRecoverable(value$1.start, "setter should have exactly one param"), "set" === method.kind && "RestElement" === value$1.params[0].type && this.raiseRecoverable(value$1.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
			}, pp$8.parseClassField = function(field) {
				if (checkKeyName(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$1$1.eq)) {
					var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
					scope.inClassFieldInit = !0, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
				} else field.value = null;
				return this.semicolon(), this.finishNode(field, "PropertyDefinition");
			}, pp$8.parseClassStaticBlock = function(node) {
				node.body = [];
				var oldLabels = this.labels;
				for (this.labels = [], this.enterScope(320); this.type !== types$1$1.braceR;) {
					var stmt = this.parseStatement(null);
					node.body.push(stmt);
				}
				return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
			}, pp$8.parseClassId = function(node, isStatement) {
				this.type === types$1$1.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, !1)) : (!0 === isStatement && this.unexpected(), node.id = null);
			}, pp$8.parseClassSuper = function(node) {
				node.superClass = this.eat(types$1$1._extends) ? this.parseExprSubscripts(null, !1) : null;
			}, pp$8.enterClassBody = function() {
				var element = {
					declared: Object.create(null),
					used: []
				};
				return this.privateNameStack.push(element), element.declared;
			}, pp$8.exitClassBody = function() {
				var ref$1 = this.privateNameStack.pop(), declared = ref$1.declared, used = ref$1.used;
				if (this.options.checkPrivateFields) for (var len = this.privateNameStack.length, parent = 0 === len ? null : this.privateNameStack[len - 1], i$1 = 0; i$1 < used.length; ++i$1) {
					var id = used[i$1];
					hasOwn$2(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
				}
			}, pp$8.parseExportAllDeclaration = function(node, exports$1) {
				return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports$1, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$1$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
			}, pp$8.parseExport = function(node, exports$1) {
				if (this.next(), this.eat(types$1$1.star)) return this.parseExportAllDeclaration(node, exports$1);
				if (this.eat(types$1$1._default)) return this.checkExport(exports$1, "default", this.lastTokStart), node.declaration = this.parseExportDefaultDeclaration(), this.finishNode(node, "ExportDefaultDeclaration");
				if (this.shouldParseExportStatement()) node.declaration = this.parseExportDeclaration(node), "VariableDeclaration" === node.declaration.type ? this.checkVariableExport(exports$1, node.declaration.declarations) : this.checkExport(exports$1, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
				else {
					if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports$1), this.eatContextual("from")) this.type !== types$1$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause());
					else {
						for (var i$1 = 0, list$1 = node.specifiers; i$1 < list$1.length; i$1 += 1) {
							var spec = list$1[i$1];
							this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), "Literal" === spec.local.type && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
						}
						node.source = null;
					}
					this.semicolon();
				}
				return this.finishNode(node, "ExportNamedDeclaration");
			}, pp$8.parseExportDeclaration = function(node) {
				return this.parseStatement(null);
			}, pp$8.parseExportDefaultDeclaration = function() {
				var isAsync;
				if (this.type === types$1$1._function || (isAsync = this.isAsyncFunction())) {
					var fNode = this.startNode();
					return this.next(), isAsync && this.next(), this.parseFunction(fNode, 4 | FUNC_STATEMENT, !1, isAsync);
				}
				if (this.type === types$1$1._class) {
					var cNode = this.startNode();
					return this.parseClass(cNode, "nullableID");
				}
				var declaration = this.parseMaybeAssign();
				return this.semicolon(), declaration;
			}, pp$8.checkExport = function(exports$1, name, pos) {
				exports$1 && ("string" != typeof name && (name = "Identifier" === name.type ? name.name : name.value), hasOwn$2(exports$1, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports$1[name] = !0);
			}, pp$8.checkPatternExport = function(exports$1, pat) {
				var type$1 = pat.type;
				if ("Identifier" === type$1) this.checkExport(exports$1, pat, pat.start);
				else if ("ObjectPattern" === type$1) for (var i$1 = 0, list$1 = pat.properties; i$1 < list$1.length; i$1 += 1) {
					var prop = list$1[i$1];
					this.checkPatternExport(exports$1, prop);
				}
				else if ("ArrayPattern" === type$1) for (var i$1$1 = 0, list$1$1 = pat.elements; i$1$1 < list$1$1.length; i$1$1 += 1) {
					var elt = list$1$1[i$1$1];
					elt && this.checkPatternExport(exports$1, elt);
				}
				else "Property" === type$1 ? this.checkPatternExport(exports$1, pat.value) : "AssignmentPattern" === type$1 ? this.checkPatternExport(exports$1, pat.left) : "RestElement" === type$1 && this.checkPatternExport(exports$1, pat.argument);
			}, pp$8.checkVariableExport = function(exports$1, decls) {
				if (exports$1) for (var i$1 = 0, list$1 = decls; i$1 < list$1.length; i$1 += 1) {
					var decl = list$1[i$1];
					this.checkPatternExport(exports$1, decl.id);
				}
			}, pp$8.shouldParseExportStatement = function() {
				return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
			}, pp$8.parseExportSpecifier = function(exports$1) {
				var node = this.startNode();
				return node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports$1, node.exported, node.exported.start), this.finishNode(node, "ExportSpecifier");
			}, pp$8.parseExportSpecifiers = function(exports$1) {
				var nodes = [], first = !0;
				for (this.expect(types$1$1.braceL); !this.eat(types$1$1.braceR);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.braceR)) break;
					nodes.push(this.parseExportSpecifier(exports$1));
				}
				return nodes;
			}, pp$8.parseImport = function(node) {
				return this.next(), this.type === types$1$1.string ? (node.specifiers = empty$1, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$1$1.string ? this.parseExprAtom() : this.unexpected()), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
			}, pp$8.parseImportSpecifier = function() {
				var node = this.startNode();
				return node.imported = this.parseModuleExportName(), this.eatContextual("as") ? node.local = this.parseIdent() : (this.checkUnreserved(node.imported), node.local = node.imported), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportSpecifier");
			}, pp$8.parseImportDefaultSpecifier = function() {
				var node = this.startNode();
				return node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportDefaultSpecifier");
			}, pp$8.parseImportNamespaceSpecifier = function() {
				var node = this.startNode();
				return this.next(), this.expectContextual("as"), node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportNamespaceSpecifier");
			}, pp$8.parseImportSpecifiers = function() {
				var nodes = [], first = !0;
				if (this.type === types$1$1.name && (nodes.push(this.parseImportDefaultSpecifier()), !this.eat(types$1$1.comma))) return nodes;
				if (this.type === types$1$1.star) return nodes.push(this.parseImportNamespaceSpecifier()), nodes;
				for (this.expect(types$1$1.braceL); !this.eat(types$1$1.braceR);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.braceR)) break;
					nodes.push(this.parseImportSpecifier());
				}
				return nodes;
			}, pp$8.parseWithClause = function() {
				var nodes = [];
				if (!this.eat(types$1$1._with)) return nodes;
				this.expect(types$1$1.braceL);
				for (var attributeKeys = {}, first = !0; !this.eat(types$1$1.braceR);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.braceR)) break;
					var attr = this.parseImportAttribute(), keyName = "Identifier" === attr.key.type ? attr.key.name : attr.key.value;
					hasOwn$2(attributeKeys, keyName) && this.raiseRecoverable(attr.key.start, "Duplicate attribute key '" + keyName + "'"), attributeKeys[keyName] = !0, nodes.push(attr);
				}
				return nodes;
			}, pp$8.parseImportAttribute = function() {
				var node = this.startNode();
				return node.key = this.type === types$1$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved), this.expect(types$1$1.colon), this.type !== types$1$1.string && this.unexpected(), node.value = this.parseExprAtom(), this.finishNode(node, "ImportAttribute");
			}, pp$8.parseModuleExportName = function() {
				if (this.options.ecmaVersion >= 13 && this.type === types$1$1.string) {
					var stringLiteral = this.parseLiteral(this.value);
					return loneSurrogate.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
				}
				return this.parseIdent(!0);
			}, pp$8.adaptDirectivePrologue = function(statements) {
				for (var i$1 = 0; i$1 < statements.length && this.isDirectiveCandidate(statements[i$1]); ++i$1) statements[i$1].directive = statements[i$1].expression.raw.slice(1, -1);
			}, pp$8.isDirectiveCandidate = function(statement) {
				return this.options.ecmaVersion >= 5 && "ExpressionStatement" === statement.type && "Literal" === statement.expression.type && "string" == typeof statement.expression.value && ("\"" === this.input[statement.start] || "'" === this.input[statement.start]);
			};
			var pp$7 = Parser$1.prototype;
			pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
				if (this.options.ecmaVersion >= 6 && node) switch (node.type) {
					case "Identifier":
						this.inAsync && "await" === node.name && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
						break;
					case "ObjectPattern":
					case "ArrayPattern":
					case "AssignmentPattern":
					case "RestElement": break;
					case "ObjectExpression":
						node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, !0);
						for (var i$1 = 0, list$1 = node.properties; i$1 < list$1.length; i$1 += 1) {
							var prop = list$1[i$1];
							this.toAssignable(prop, isBinding), "RestElement" !== prop.type || "ArrayPattern" !== prop.argument.type && "ObjectPattern" !== prop.argument.type || this.raise(prop.argument.start, "Unexpected token");
						}
						break;
					case "Property":
						"init" !== node.kind && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
						break;
					case "ArrayExpression":
						node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, !0), this.toAssignableList(node.elements, isBinding);
						break;
					case "SpreadElement":
						node.type = "RestElement", this.toAssignable(node.argument, isBinding), "AssignmentPattern" === node.argument.type && this.raise(node.argument.start, "Rest elements cannot have a default value");
						break;
					case "AssignmentExpression":
						"=" !== node.operator && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
						break;
					case "ParenthesizedExpression":
						this.toAssignable(node.expression, isBinding, refDestructuringErrors);
						break;
					case "ChainExpression":
						this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
						break;
					case "MemberExpression": if (!isBinding) break;
					default: this.raise(node.start, "Assigning to rvalue");
				}
				else refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, !0);
				return node;
			}, pp$7.toAssignableList = function(exprList, isBinding) {
				for (var end = exprList.length, i$1 = 0; i$1 < end; i$1++) {
					var elt = exprList[i$1];
					elt && this.toAssignable(elt, isBinding);
				}
				if (end) {
					var last = exprList[end - 1];
					6 === this.options.ecmaVersion && isBinding && last && "RestElement" === last.type && "Identifier" !== last.argument.type && this.unexpected(last.argument.start);
				}
				return exprList;
			}, pp$7.parseSpread = function(refDestructuringErrors) {
				var node = this.startNode();
				return this.next(), node.argument = this.parseMaybeAssign(!1, refDestructuringErrors), this.finishNode(node, "SpreadElement");
			}, pp$7.parseRestBinding = function() {
				var node = this.startNode();
				return this.next(), 6 === this.options.ecmaVersion && this.type !== types$1$1.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
			}, pp$7.parseBindingAtom = function() {
				if (this.options.ecmaVersion >= 6) switch (this.type) {
					case types$1$1.bracketL:
						var node = this.startNode();
						return this.next(), node.elements = this.parseBindingList(types$1$1.bracketR, !0, !0), this.finishNode(node, "ArrayPattern");
					case types$1$1.braceL: return this.parseObj(!0);
				}
				return this.parseIdent();
			}, pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
				for (var elts = [], first = !0; !this.eat(close);) if (first ? first = !1 : this.expect(types$1$1.comma), allowEmpty && this.type === types$1$1.comma) elts.push(null);
				else {
					if (allowTrailingComma && this.afterTrailingComma(close)) break;
					if (this.type === types$1$1.ellipsis) {
						var rest = this.parseRestBinding();
						this.parseBindingListItem(rest), elts.push(rest), this.type === types$1$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.expect(close);
						break;
					}
					elts.push(this.parseAssignableListItem(allowModifiers));
				}
				return elts;
			}, pp$7.parseAssignableListItem = function(allowModifiers) {
				var elem = this.parseMaybeDefault(this.start, this.startLoc);
				return this.parseBindingListItem(elem), elem;
			}, pp$7.parseBindingListItem = function(param) {
				return param;
			}, pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
				if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$1$1.eq)) return left;
				var node = this.startNodeAt(startPos, startLoc);
				return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
			}, pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
				void 0 === bindingType && (bindingType = 0);
				var isBind = 0 !== bindingType;
				switch (expr.type) {
					case "Identifier":
						this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (2 === bindingType && "let" === expr.name && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn$2(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = !0), 5 !== bindingType && this.declareName(expr.name, bindingType, expr.start));
						break;
					case "ChainExpression":
						this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
						break;
					case "MemberExpression":
						isBind && this.raiseRecoverable(expr.start, "Binding member expression");
						break;
					case "ParenthesizedExpression": return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
					default: this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
				}
			}, pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
				switch (void 0 === bindingType && (bindingType = 0), expr.type) {
					case "ObjectPattern":
						for (var i$1 = 0, list$1 = expr.properties; i$1 < list$1.length; i$1 += 1) {
							var prop = list$1[i$1];
							this.checkLValInnerPattern(prop, bindingType, checkClashes);
						}
						break;
					case "ArrayPattern":
						for (var i$1$1 = 0, list$1$1 = expr.elements; i$1$1 < list$1$1.length; i$1$1 += 1) {
							var elem = list$1$1[i$1$1];
							elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
						}
						break;
					default: this.checkLValSimple(expr, bindingType, checkClashes);
				}
			}, pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
				switch (void 0 === bindingType && (bindingType = 0), expr.type) {
					case "Property":
						this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
						break;
					case "AssignmentPattern":
						this.checkLValPattern(expr.left, bindingType, checkClashes);
						break;
					case "RestElement":
						this.checkLValPattern(expr.argument, bindingType, checkClashes);
						break;
					default: this.checkLValPattern(expr, bindingType, checkClashes);
				}
			};
			var TokContext = function(token, isExpr, preserveSpace, override, generator) {
				this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator;
			}, types$7 = {
				b_stat: new TokContext("{", !1),
				b_expr: new TokContext("{", !0),
				b_tmpl: new TokContext("${", !1),
				p_stat: new TokContext("(", !1),
				p_expr: new TokContext("(", !0),
				q_tmpl: new TokContext("`", !0, !0, function(p$1) {
					return p$1.tryReadTemplateToken();
				}),
				f_stat: new TokContext("function", !1),
				f_expr: new TokContext("function", !0),
				f_expr_gen: new TokContext("function", !0, !1, null, !0),
				f_gen: new TokContext("function", !1, !1, null, !0)
			}, pp$6 = Parser$1.prototype;
			pp$6.initialContext = function() {
				return [types$7.b_stat];
			}, pp$6.curContext = function() {
				return this.context[this.context.length - 1];
			}, pp$6.braceIsBlock = function(prevType) {
				var parent = this.curContext();
				return parent === types$7.f_expr || parent === types$7.f_stat || (prevType !== types$1$1.colon || parent !== types$7.b_stat && parent !== types$7.b_expr ? prevType === types$1$1._return || prevType === types$1$1.name && this.exprAllowed ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$1$1._else || prevType === types$1$1.semi || prevType === types$1$1.eof || prevType === types$1$1.parenR || prevType === types$1$1.arrow || (prevType === types$1$1.braceL ? parent === types$7.b_stat : prevType !== types$1$1._var && prevType !== types$1$1._const && prevType !== types$1$1.name && !this.exprAllowed) : !parent.isExpr);
			}, pp$6.inGeneratorContext = function() {
				for (var i$1 = this.context.length - 1; i$1 >= 1; i$1--) {
					var context = this.context[i$1];
					if ("function" === context.token) return context.generator;
				}
				return !1;
			}, pp$6.updateContext = function(prevType) {
				var update, type$1 = this.type;
				type$1.keyword && prevType === types$1$1.dot ? this.exprAllowed = !1 : (update = type$1.updateContext) ? update.call(this, prevType) : this.exprAllowed = type$1.beforeExpr;
			}, pp$6.overrideContext = function(tokenCtx) {
				this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
			}, types$1$1.parenR.updateContext = types$1$1.braceR.updateContext = function() {
				if (1 !== this.context.length) {
					var out = this.context.pop();
					out === types$7.b_stat && "function" === this.curContext().token && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
				} else this.exprAllowed = !0;
			}, types$1$1.braceL.updateContext = function(prevType) {
				this.context.push(this.braceIsBlock(prevType) ? types$7.b_stat : types$7.b_expr), this.exprAllowed = !0;
			}, types$1$1.dollarBraceL.updateContext = function() {
				this.context.push(types$7.b_tmpl), this.exprAllowed = !0;
			}, types$1$1.parenL.updateContext = function(prevType) {
				var statementParens = prevType === types$1$1._if || prevType === types$1$1._for || prevType === types$1$1._with || prevType === types$1$1._while;
				this.context.push(statementParens ? types$7.p_stat : types$7.p_expr), this.exprAllowed = !0;
			}, types$1$1.incDec.updateContext = function() {}, types$1$1._function.updateContext = types$1$1._class.updateContext = function(prevType) {
				!prevType.beforeExpr || prevType === types$1$1._else || prevType === types$1$1.semi && this.curContext() !== types$7.p_stat || prevType === types$1$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$1$1.colon || prevType === types$1$1.braceL) && this.curContext() === types$7.b_stat ? this.context.push(types$7.f_stat) : this.context.push(types$7.f_expr), this.exprAllowed = !1;
			}, types$1$1.colon.updateContext = function() {
				"function" === this.curContext().token && this.context.pop(), this.exprAllowed = !0;
			}, types$1$1.backQuote.updateContext = function() {
				this.curContext() === types$7.q_tmpl ? this.context.pop() : this.context.push(types$7.q_tmpl), this.exprAllowed = !1;
			}, types$1$1.star.updateContext = function(prevType) {
				if (prevType === types$1$1._function) {
					var index = this.context.length - 1;
					this.context[index] === types$7.f_expr ? this.context[index] = types$7.f_expr_gen : this.context[index] = types$7.f_gen;
				}
				this.exprAllowed = !0;
			}, types$1$1.name.updateContext = function(prevType) {
				var allowed = !1;
				this.options.ecmaVersion >= 6 && prevType !== types$1$1.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (allowed = !0), this.exprAllowed = allowed;
			};
			var pp$5 = Parser$1.prototype;
			function isLocalVariableAccess(node) {
				return "Identifier" === node.type || "ParenthesizedExpression" === node.type && isLocalVariableAccess(node.expression);
			}
			function isPrivateFieldAccess(node) {
				return "MemberExpression" === node.type && "PrivateIdentifier" === node.property.type || "ChainExpression" === node.type && isPrivateFieldAccess(node.expression) || "ParenthesizedExpression" === node.type && isPrivateFieldAccess(node.expression);
			}
			pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
				if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === prop.type || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
					var name, key = prop.key;
					switch (key.type) {
						case "Identifier":
							name = key.name;
							break;
						case "Literal":
							name = String(key.value);
							break;
						default: return;
					}
					var kind = prop.kind;
					if (this.options.ecmaVersion >= 6) "__proto__" === name && "init" === kind && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = !0);
					else {
						var other = propHash[name = "$" + name];
						if (other) ("init" === kind ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
						else other = propHash[name] = {
							init: !1,
							get: !1,
							set: !1
						};
						other[kind] = !0;
					}
				}
			}, pp$5.parseExpression = function(forInit, refDestructuringErrors) {
				var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
				if (this.type === types$1$1.comma) {
					var node = this.startNodeAt(startPos, startLoc);
					for (node.expressions = [expr]; this.eat(types$1$1.comma);) node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
					return this.finishNode(node, "SequenceExpression");
				}
				return expr;
			}, pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
				if (this.isContextual("yield")) {
					if (this.inGenerator) return this.parseYield(forInit);
					this.exprAllowed = !1;
				}
				var ownDestructuringErrors = !1, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
				refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors(), ownDestructuringErrors = !0);
				var startPos = this.start, startLoc = this.startLoc;
				this.type !== types$1$1.parenL && this.type !== types$1$1.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = "await" === forInit);
				var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
				if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
					var node = this.startNodeAt(startPos, startLoc);
					return node.operator = this.value, this.type === types$1$1.eq && (left = this.toAssignable(left, !1, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$1$1.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
				}
				return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, !0), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
			}, pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
				var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
				if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
				if (this.eat(types$1$1.question)) {
					var node = this.startNodeAt(startPos, startLoc);
					return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$1$1.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
				}
				return expr;
			}, pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
				var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, !1, !1, forInit);
				return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && "ArrowFunctionExpression" === expr.type ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
			}, pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
				var prec = this.type.binop;
				if (null != prec && (!forInit || this.type !== types$1$1._in) && prec > minPrec) {
					var logical = this.type === types$1$1.logicalOR || this.type === types$1$1.logicalAND, coalesce = this.type === types$1$1.coalesce;
					coalesce && (prec = types$1$1.logicalAND.binop);
					var op = this.value;
					this.next();
					var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, !1, !1, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
					return (logical && this.type === types$1$1.coalesce || coalesce && (this.type === types$1$1.logicalOR || this.type === types$1$1.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
				}
				return left;
			}, pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
				"PrivateIdentifier" === right.type && this.raise(right.start, "Private identifier can only be left side of binary expression");
				var node = this.startNodeAt(startPos, startLoc);
				return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
			}, pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
				var expr, startPos = this.start, startLoc = this.startLoc;
				if (this.isContextual("await") && this.canAwait) expr = this.parseAwait(forInit), sawUnary = !0;
				else if (this.type.prefix) {
					var node = this.startNode(), update = this.type === types$1$1.incDec;
					node.operator = this.value, node.prefix = !0, this.next(), node.argument = this.parseMaybeUnary(null, !0, update, forInit), this.checkExpressionErrors(refDestructuringErrors, !0), update ? this.checkLValSimple(node.argument) : this.strict && "delete" === node.operator && isLocalVariableAccess(node.argument) ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : "delete" === node.operator && isPrivateFieldAccess(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = !0, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
				} else if (sawUnary || this.type !== types$1$1.privateId) {
					if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors)) return expr;
					for (; this.type.postfix && !this.canInsertSemicolon();) {
						var node$1 = this.startNodeAt(startPos, startLoc);
						node$1.operator = this.value, node$1.prefix = !1, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
					}
				} else (forInit || 0 === this.privateNameStack.length) && this.options.checkPrivateFields && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$1$1._in && this.unexpected();
				return incDec || !this.eat(types$1$1.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, !1, !1, forInit), "**", !1);
			}, pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
				var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
				if ("ArrowFunctionExpression" === expr.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd)) return expr;
				var result = this.parseSubscripts(expr, startPos, startLoc, !1, forInit);
				return refDestructuringErrors && "MemberExpression" === result.type && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
			}, pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
				for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && "Identifier" === base.type && "async" === base.name && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = !1;;) {
					var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
					if (element.optional && (optionalChained = !0), element === base || "ArrowFunctionExpression" === element.type) {
						if (optionalChained) {
							var chainNode = this.startNodeAt(startPos, startLoc);
							chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
						}
						return element;
					}
					base = element;
				}
			}, pp$5.shouldParseAsyncArrow = function() {
				return !this.canInsertSemicolon() && this.eat(types$1$1.arrow);
			}, pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
				return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, !0, forInit);
			}, pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
				var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$1$1.questionDot);
				noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
				var computed = this.eat(types$1$1.bracketL);
				if (computed || optional && this.type !== types$1$1.parenL && this.type !== types$1$1.backQuote || this.eat(types$1$1.dot)) {
					var node = this.startNodeAt(startPos, startLoc);
					node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$1$1.bracketR)) : this.type === types$1$1.privateId && "Super" !== base.type ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent("never" !== this.options.allowReserved), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
				} else if (!noCalls && this.eat(types$1$1.parenL)) {
					var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
					this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
					var exprList = this.parseExprList(types$1$1.parenR, this.options.ecmaVersion >= 8, !1, refDestructuringErrors);
					if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) return this.checkPatternErrors(refDestructuringErrors, !1), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
					this.checkExpressionErrors(refDestructuringErrors, !0), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
					var node$1 = this.startNodeAt(startPos, startLoc);
					node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
				} else if (this.type === types$1$1.backQuote) {
					(optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
					var node$2 = this.startNodeAt(startPos, startLoc);
					node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: !0 }), base = this.finishNode(node$2, "TaggedTemplateExpression");
				}
				return base;
			}, pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
				this.type === types$1$1.slash && this.readRegexp();
				var node, canBeArrow = this.potentialArrowAt === this.start;
				switch (this.type) {
					case types$1$1._super: return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$1$1.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$1$1.dot && this.type !== types$1$1.bracketL && this.type !== types$1$1.parenL && this.unexpected(), this.finishNode(node, "Super");
					case types$1$1._this: return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
					case types$1$1.name:
						var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(!1);
						if (this.options.ecmaVersion >= 8 && !containsEsc && "async" === id.name && !this.canInsertSemicolon() && this.eat(types$1$1._function)) return this.overrideContext(types$7.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, !1, !0, forInit);
						if (canBeArrow && !this.canInsertSemicolon()) {
							if (this.eat(types$1$1.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], !1, forInit);
							if (this.options.ecmaVersion >= 8 && "async" === id.name && this.type === types$1$1.name && !containsEsc && (!this.potentialArrowInForAwait || "of" !== this.value || this.containsEsc)) return id = this.parseIdent(!1), !this.canInsertSemicolon() && this.eat(types$1$1.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], !0, forInit);
						}
						return id;
					case types$1$1.regexp:
						var value$1 = this.value;
						return (node = this.parseLiteral(value$1.value)).regex = {
							pattern: value$1.pattern,
							flags: value$1.flags
						}, node;
					case types$1$1.num:
					case types$1$1.string: return this.parseLiteral(this.value);
					case types$1$1._null:
					case types$1$1._true:
					case types$1$1._false: return (node = this.startNode()).value = this.type === types$1$1._null ? null : this.type === types$1$1._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
					case types$1$1.parenL:
						var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
						return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
					case types$1$1.bracketL: return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$1$1.bracketR, !0, !0, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
					case types$1$1.braceL: return this.overrideContext(types$7.b_expr), this.parseObj(!1, refDestructuringErrors);
					case types$1$1._function: return node = this.startNode(), this.next(), this.parseFunction(node, 0);
					case types$1$1._class: return this.parseClass(this.startNode(), !1);
					case types$1$1._new: return this.parseNew();
					case types$1$1.backQuote: return this.parseTemplate();
					case types$1$1._import: return this.options.ecmaVersion >= 11 ? this.parseExprImport(forNew) : this.unexpected();
					default: return this.parseExprAtomDefault();
				}
			}, pp$5.parseExprAtomDefault = function() {
				this.unexpected();
			}, pp$5.parseExprImport = function(forNew) {
				var node = this.startNode();
				if (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import"), this.next(), this.type === types$1$1.parenL && !forNew) return this.parseDynamicImport(node);
				if (this.type === types$1$1.dot) {
					var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
					return meta.name = "import", node.meta = this.finishNode(meta, "Identifier"), this.parseImportMeta(node);
				}
				this.unexpected();
			}, pp$5.parseDynamicImport = function(node) {
				if (this.next(), node.source = this.parseMaybeAssign(), this.options.ecmaVersion >= 16) this.eat(types$1$1.parenR) ? node.options = null : (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.parenR) ? node.options = null : (node.options = this.parseMaybeAssign(), this.eat(types$1$1.parenR) || (this.expect(types$1$1.comma), this.afterTrailingComma(types$1$1.parenR) || this.unexpected())));
				else if (!this.eat(types$1$1.parenR)) {
					var errorPos = this.start;
					this.eat(types$1$1.comma) && this.eat(types$1$1.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
				}
				return this.finishNode(node, "ImportExpression");
			}, pp$5.parseImportMeta = function(node) {
				this.next();
				var containsEsc = this.containsEsc;
				return node.property = this.parseIdent(!0), "meta" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), "module" === this.options.sourceType || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
			}, pp$5.parseLiteral = function(value$1) {
				var node = this.startNode();
				return node.value = value$1, node.raw = this.input.slice(this.start, this.end), 110 === node.raw.charCodeAt(node.raw.length - 1) && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
			}, pp$5.parseParenExpression = function() {
				this.expect(types$1$1.parenL);
				var val = this.parseExpression();
				return this.expect(types$1$1.parenR), val;
			}, pp$5.shouldParseArrow = function(exprList) {
				return !this.canInsertSemicolon();
			}, pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
				var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
				if (this.options.ecmaVersion >= 6) {
					this.next();
					var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = !0, lastIsComma = !1, refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
					for (this.yieldPos = 0, this.awaitPos = 0; this.type !== types$1$1.parenR;) {
						if (first ? first = !1 : this.expect(types$1$1.comma), allowTrailingComma && this.afterTrailingComma(types$1$1.parenR, !0)) {
							lastIsComma = !0;
							break;
						}
						if (this.type === types$1$1.ellipsis) {
							spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$1$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
							break;
						}
						exprList.push(this.parseMaybeAssign(!1, refDestructuringErrors, this.parseParenItem));
					}
					var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
					if (this.expect(types$1$1.parenR), canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1$1.arrow)) return this.checkPatternErrors(refDestructuringErrors, !1), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
					exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, !0), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
				} else val = this.parseParenExpression();
				if (this.options.preserveParens) {
					var par = this.startNodeAt(startPos, startLoc);
					return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
				}
				return val;
			}, pp$5.parseParenItem = function(item) {
				return item;
			}, pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
				return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, !1, forInit);
			};
			var empty = [];
			pp$5.parseNew = function() {
				this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
				var node = this.startNode();
				if (this.next(), this.options.ecmaVersion >= 6 && this.type === types$1$1.dot) {
					var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
					meta.name = "new", node.meta = this.finishNode(meta, "Identifier"), this.next();
					var containsEsc = this.containsEsc;
					return node.property = this.parseIdent(!0), "target" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
				}
				var startPos = this.start, startLoc = this.startLoc;
				return node.callee = this.parseSubscripts(this.parseExprAtom(null, !1, !0), startPos, startLoc, !0, !1), this.eat(types$1$1.parenL) ? node.arguments = this.parseExprList(types$1$1.parenR, this.options.ecmaVersion >= 8, !1) : node.arguments = empty, this.finishNode(node, "NewExpression");
			}, pp$5.parseTemplateElement = function(ref$1) {
				var isTagged = ref$1.isTagged, elem = this.startNode();
				return this.type === types$1$1.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = {
					raw: this.value.replace(/\r\n?/g, "\n"),
					cooked: null
				}) : elem.value = {
					raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
					cooked: this.value
				}, this.next(), elem.tail = this.type === types$1$1.backQuote, this.finishNode(elem, "TemplateElement");
			}, pp$5.parseTemplate = function(ref$1) {
				void 0 === ref$1 && (ref$1 = {});
				var isTagged = ref$1.isTagged;
				void 0 === isTagged && (isTagged = !1);
				var node = this.startNode();
				this.next(), node.expressions = [];
				var curElt = this.parseTemplateElement({ isTagged });
				for (node.quasis = [curElt]; !curElt.tail;) this.type === types$1$1.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$1$1.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$1$1.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
				return this.next(), this.finishNode(node, "TemplateLiteral");
			}, pp$5.isAsyncProp = function(prop) {
				return !prop.computed && "Identifier" === prop.key.type && "async" === prop.key.name && (this.type === types$1$1.name || this.type === types$1$1.num || this.type === types$1$1.string || this.type === types$1$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
			}, pp$5.parseObj = function(isPattern, refDestructuringErrors) {
				var node = this.startNode(), first = !0, propHash = {};
				for (node.properties = [], this.next(); !this.eat(types$1$1.braceR);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1$1.braceR)) break;
					var prop = this.parseProperty(isPattern, refDestructuringErrors);
					isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
				}
				return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
			}, pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
				var isGenerator, isAsync, startPos, startLoc, prop = this.startNode();
				if (this.options.ecmaVersion >= 9 && this.eat(types$1$1.ellipsis)) return isPattern ? (prop.argument = this.parseIdent(!1), this.type === types$1$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(!1, refDestructuringErrors), this.type === types$1$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
				this.options.ecmaVersion >= 6 && (prop.method = !1, prop.shorthand = !1, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator = this.eat(types$1$1.star)));
				var containsEsc = this.containsEsc;
				return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop) ? (isAsync = !0, isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1$1.star), this.parsePropertyName(prop)) : isAsync = !1, this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
			}, pp$5.parseGetterSetter = function(prop) {
				prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(!1);
				var paramCount = "get" === prop.kind ? 0 : 1;
				if (prop.value.params.length !== paramCount) {
					var start = prop.value.start;
					"get" === prop.kind ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
				} else "set" === prop.kind && "RestElement" === prop.value.params[0].type && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
			}, pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
				(isGenerator || isAsync) && this.type === types$1$1.colon && this.unexpected(), this.eat(types$1$1.colon) ? (prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(!1, refDestructuringErrors), prop.kind = "init") : this.options.ecmaVersion >= 6 && this.type === types$1$1.parenL ? (isPattern && this.unexpected(), prop.kind = "init", prop.method = !0, prop.value = this.parseMethod(isGenerator, isAsync)) : isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || "Identifier" !== prop.key.type || "get" !== prop.key.name && "set" !== prop.key.name || this.type === types$1$1.comma || this.type === types$1$1.braceR || this.type === types$1$1.eq ? this.options.ecmaVersion >= 6 && !prop.computed && "Identifier" === prop.key.type ? ((isGenerator || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), "await" !== prop.key.name || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$1$1.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = !0) : this.unexpected() : ((isGenerator || isAsync) && this.unexpected(), this.parseGetterSetter(prop));
			}, pp$5.parsePropertyName = function(prop) {
				if (this.options.ecmaVersion >= 6) {
					if (this.eat(types$1$1.bracketL)) return prop.computed = !0, prop.key = this.parseMaybeAssign(), this.expect(types$1$1.bracketR), prop.key;
					prop.computed = !1;
				}
				return prop.key = this.type === types$1$1.num || this.type === types$1$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
			}, pp$5.initFunction = function(node) {
				node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = !1), this.options.ecmaVersion >= 8 && (node.async = !1);
			}, pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
				var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
				return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$1$1.parenL), node.params = this.parseBindingList(types$1$1.parenR, !1, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, !1, !0, !1), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
			}, pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
				var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
				return this.enterScope(16 | functionFlags(isAsync, !1)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, !0), this.parseFunctionBody(node, !0, !1, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
			}, pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
				var isExpression = isArrowFunction && this.type !== types$1$1.braceL, oldStrict = this.strict, useStrict = !1;
				if (isExpression) node.body = this.parseMaybeAssign(forInit), node.expression = !0, this.checkParams(node, !1);
				else {
					var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
					oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
					var oldLabels = this.labels;
					this.labels = [], useStrict && (this.strict = !0), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(!1, void 0, useStrict && !oldStrict), node.expression = !1, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
				}
				this.exitScope();
			}, pp$5.isSimpleParamList = function(params) {
				for (var i$1 = 0, list$1 = params; i$1 < list$1.length; i$1 += 1) if ("Identifier" !== list$1[i$1].type) return !1;
				return !0;
			}, pp$5.checkParams = function(node, allowDuplicates) {
				for (var nameHash = Object.create(null), i$1 = 0, list$1 = node.params; i$1 < list$1.length; i$1 += 1) {
					var param = list$1[i$1];
					this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
				}
			}, pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
				for (var elts = [], first = !0; !this.eat(close);) {
					if (first) first = !1;
					else if (this.expect(types$1$1.comma), allowTrailingComma && this.afterTrailingComma(close)) break;
					var elt = void 0;
					allowEmpty && this.type === types$1$1.comma ? elt = null : this.type === types$1$1.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$1$1.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(!1, refDestructuringErrors), elts.push(elt);
				}
				return elts;
			}, pp$5.checkUnreserved = function(ref$1) {
				var start = ref$1.start, end = ref$1.end, name = ref$1.name;
				(this.inGenerator && "yield" === name && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === name && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && "arguments" === name && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || "arguments" !== name && "await" !== name || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(start, end).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || "await" !== name || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
			}, pp$5.parseIdent = function(liberal) {
				var node = this.parseIdentNode();
				return this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), "await" !== node.name || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
			}, pp$5.parseIdentNode = function() {
				var node = this.startNode();
				return this.type === types$1$1.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, "class" !== node.name && "function" !== node.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop(), this.type = types$1$1.name) : this.unexpected(), node;
			}, pp$5.parsePrivateIdent = function() {
				var node = this.startNode();
				return this.type === types$1$1.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), this.options.checkPrivateFields && (0 === this.privateNameStack.length ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node)), node;
			}, pp$5.parseYield = function(forInit) {
				this.yieldPos || (this.yieldPos = this.start);
				var node = this.startNode();
				return this.next(), this.type === types$1$1.semi || this.canInsertSemicolon() || this.type !== types$1$1.star && !this.type.startsExpr ? (node.delegate = !1, node.argument = null) : (node.delegate = this.eat(types$1$1.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
			}, pp$5.parseAwait = function(forInit) {
				this.awaitPos || (this.awaitPos = this.start);
				var node = this.startNode();
				return this.next(), node.argument = this.parseMaybeUnary(null, !0, !1, forInit), this.finishNode(node, "AwaitExpression");
			};
			var pp$4 = Parser$1.prototype;
			pp$4.raise = function(pos, message) {
				var loc = getLineInfo(this.input, pos);
				message += " (" + loc.line + ":" + loc.column + ")";
				var err = new SyntaxError(message);
				throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
			}, pp$4.raiseRecoverable = pp$4.raise, pp$4.curPosition = function() {
				if (this.options.locations) return new Position(this.curLine, this.pos - this.lineStart);
			};
			var pp$3 = Parser$1.prototype, Scope = function(flags) {
				this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = !1;
			};
			pp$3.enterScope = function(flags) {
				this.scopeStack.push(new Scope(flags));
			}, pp$3.exitScope = function() {
				this.scopeStack.pop();
			}, pp$3.treatFunctionsAsVarInScope = function(scope) {
				return 2 & scope.flags || !this.inModule && 1 & scope.flags;
			}, pp$3.declareName = function(name, bindingType, pos) {
				var redeclared = !1;
				if (2 === bindingType) {
					var scope = this.currentScope();
					redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
				} else if (4 === bindingType) this.currentScope().lexical.push(name);
				else if (3 === bindingType) {
					var scope$2 = this.currentScope();
					redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
				} else for (var i$1 = this.scopeStack.length - 1; i$1 >= 0; --i$1) {
					var scope$3 = this.scopeStack[i$1];
					if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
						redeclared = !0;
						break;
					}
					if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], 259 & scope$3.flags) break;
				}
				redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
			}, pp$3.checkLocalExport = function(id) {
				-1 === this.scopeStack[0].lexical.indexOf(id.name) && -1 === this.scopeStack[0].var.indexOf(id.name) && (this.undefinedExports[id.name] = id);
			}, pp$3.currentScope = function() {
				return this.scopeStack[this.scopeStack.length - 1];
			}, pp$3.currentVarScope = function() {
				for (var i$1 = this.scopeStack.length - 1;; i$1--) {
					var scope = this.scopeStack[i$1];
					if (259 & scope.flags) return scope;
				}
			}, pp$3.currentThisScope = function() {
				for (var i$1 = this.scopeStack.length - 1;; i$1--) {
					var scope = this.scopeStack[i$1];
					if (259 & scope.flags && !(16 & scope.flags)) return scope;
				}
			};
			var Node = function(parser, pos, loc) {
				this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
			}, pp$2 = Parser$1.prototype;
			function finishNodeAt(node, type$1, pos, loc) {
				return node.type = type$1, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
			}
			pp$2.startNode = function() {
				return new Node(this, this.start, this.startLoc);
			}, pp$2.startNodeAt = function(pos, loc) {
				return new Node(this, pos, loc);
			}, pp$2.finishNode = function(node, type$1) {
				return finishNodeAt.call(this, node, type$1, this.lastTokEnd, this.lastTokEndLoc);
			}, pp$2.finishNodeAt = function(node, type$1, pos, loc) {
				return finishNodeAt.call(this, node, type$1, pos, loc);
			}, pp$2.copyNode = function(node) {
				var newNode = new Node(this, node.start, this.startLoc);
				for (var prop in node) newNode[prop] = node[prop];
				return newNode;
			};
			var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic", ecma12BinaryProperties = ecma10BinaryProperties + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties = {
				9: ecma9BinaryProperties,
				10: ecma10BinaryProperties,
				11: ecma10BinaryProperties,
				12: ecma12BinaryProperties,
				13: ecma12BinaryProperties,
				14: ecma12BinaryProperties
			}, unicodeBinaryPropertiesOfStrings = {
				9: "",
				10: "",
				11: "",
				12: "",
				13: "",
				14: "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji"
			}, unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith", unicodeScriptValues = {
				9: ecma9ScriptValues,
				10: ecma10ScriptValues,
				11: ecma11ScriptValues,
				12: ecma12ScriptValues,
				13: ecma13ScriptValues,
				14: ecma13ScriptValues + " Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz"
			}, data = {};
			function buildUnicodeData(ecmaVersion) {
				var d$2 = data[ecmaVersion] = {
					binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
					binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),
					nonBinary: {
						General_Category: wordsRegexp(unicodeGeneralCategoryValues),
						Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
					}
				};
				d$2.nonBinary.Script_Extensions = d$2.nonBinary.Script, d$2.nonBinary.gc = d$2.nonBinary.General_Category, d$2.nonBinary.sc = d$2.nonBinary.Script, d$2.nonBinary.scx = d$2.nonBinary.Script_Extensions;
			}
			for (var i = 0, list = [
				9,
				10,
				11,
				12,
				13,
				14
			]; i < list.length; i += 1) buildUnicodeData(list[i]);
			var pp$1 = Parser$1.prototype, BranchID = function(parent, base) {
				this.parent = parent, this.base = base || this;
			};
			BranchID.prototype.separatedFrom = function(alt) {
				for (var self$1 = this; self$1; self$1 = self$1.parent) for (var other = alt; other; other = other.parent) if (self$1.base === other.base && self$1 !== other) return !0;
				return !1;
			}, BranchID.prototype.sibling = function() {
				return new BranchID(this.parent, this.base);
			};
			var RegExpValidationState = function(parser) {
				this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : ""), this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = !1, this.switchV = !1, this.switchN = !1, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = !1, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = Object.create(null), this.backReferenceNames = [], this.branchID = null;
			};
			function isRegularExpressionModifier(ch) {
				return 105 === ch || 109 === ch || 115 === ch;
			}
			function isSyntaxCharacter(ch) {
				return 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
			}
			function isControlLetter(ch) {
				return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
			}
			RegExpValidationState.prototype.reset = function(start, pattern, flags) {
				var unicodeSets = -1 !== flags.indexOf("v"), unicode = -1 !== flags.indexOf("u");
				this.start = 0 | start, this.source = pattern + "", this.flags = flags, unicodeSets && this.parser.options.ecmaVersion >= 15 ? (this.switchU = !0, this.switchV = !0, this.switchN = !0) : (this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchV = !1, this.switchN = unicode && this.parser.options.ecmaVersion >= 9);
			}, RegExpValidationState.prototype.raise = function(message) {
				this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
			}, RegExpValidationState.prototype.at = function(i$1, forceU) {
				void 0 === forceU && (forceU = !1);
				var s = this.source, l$1 = s.length;
				if (i$1 >= l$1) return -1;
				var c = s.charCodeAt(i$1);
				if (!forceU && !this.switchU || c <= 55295 || c >= 57344 || i$1 + 1 >= l$1) return c;
				var next = s.charCodeAt(i$1 + 1);
				return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
			}, RegExpValidationState.prototype.nextIndex = function(i$1, forceU) {
				void 0 === forceU && (forceU = !1);
				var s = this.source, l$1 = s.length;
				if (i$1 >= l$1) return l$1;
				var next, c = s.charCodeAt(i$1);
				return !forceU && !this.switchU || c <= 55295 || c >= 57344 || i$1 + 1 >= l$1 || (next = s.charCodeAt(i$1 + 1)) < 56320 || next > 57343 ? i$1 + 1 : i$1 + 2;
			}, RegExpValidationState.prototype.current = function(forceU) {
				return void 0 === forceU && (forceU = !1), this.at(this.pos, forceU);
			}, RegExpValidationState.prototype.lookahead = function(forceU) {
				return void 0 === forceU && (forceU = !1), this.at(this.nextIndex(this.pos, forceU), forceU);
			}, RegExpValidationState.prototype.advance = function(forceU) {
				void 0 === forceU && (forceU = !1), this.pos = this.nextIndex(this.pos, forceU);
			}, RegExpValidationState.prototype.eat = function(ch, forceU) {
				return void 0 === forceU && (forceU = !1), this.current(forceU) === ch && (this.advance(forceU), !0);
			}, RegExpValidationState.prototype.eatChars = function(chs, forceU) {
				void 0 === forceU && (forceU = !1);
				for (var pos = this.pos, i$1 = 0, list$1 = chs; i$1 < list$1.length; i$1 += 1) {
					var ch = list$1[i$1], current = this.at(pos, forceU);
					if (-1 === current || current !== ch) return !1;
					pos = this.nextIndex(pos, forceU);
				}
				return this.pos = pos, !0;
			}, pp$1.validateRegExpFlags = function(state) {
				for (var validFlags = state.validFlags, flags = state.flags, u$1 = !1, v$1 = !1, i$1 = 0; i$1 < flags.length; i$1++) {
					var flag = flags.charAt(i$1);
					-1 === validFlags.indexOf(flag) && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i$1 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag"), "u" === flag && (u$1 = !0), "v" === flag && (v$1 = !0);
				}
				this.options.ecmaVersion >= 15 && u$1 && v$1 && this.raise(state.start, "Invalid regular expression flag");
			}, pp$1.validateRegExpPattern = function(state) {
				this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && function(obj) {
					for (var _$2 in obj) return !0;
					return !1;
				}(state.groupNames) && (state.switchN = !0, this.regexp_pattern(state));
			}, pp$1.regexp_pattern = function(state) {
				state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = !1, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames = Object.create(null), state.backReferenceNames.length = 0, state.branchID = null, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
				for (var i$1 = 0, list$1 = state.backReferenceNames; i$1 < list$1.length; i$1 += 1) {
					var name = list$1[i$1];
					state.groupNames[name] || state.raise("Invalid named capture referenced");
				}
			}, pp$1.regexp_disjunction = function(state) {
				var trackDisjunction = this.options.ecmaVersion >= 16;
				for (trackDisjunction && (state.branchID = new BranchID(state.branchID, null)), this.regexp_alternative(state); state.eat(124);) trackDisjunction && (state.branchID = state.branchID.sibling()), this.regexp_alternative(state);
				trackDisjunction && (state.branchID = state.branchID.parent), this.regexp_eatQuantifier(state, !0) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
			}, pp$1.regexp_alternative = function(state) {
				for (; state.pos < state.source.length && this.regexp_eatTerm(state););
			}, pp$1.regexp_eatTerm = function(state) {
				return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), !0) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), !0);
			}, pp$1.regexp_eatAssertion = function(state) {
				var start = state.pos;
				if (state.lastAssertionIsQuantifiable = !1, state.eat(94) || state.eat(36)) return !0;
				if (state.eat(92)) {
					if (state.eat(66) || state.eat(98)) return !0;
					state.pos = start;
				}
				if (state.eat(40) && state.eat(63)) {
					var lookbehind = !1;
					if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33)) return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, !0;
				}
				return state.pos = start, !1;
			}, pp$1.regexp_eatQuantifier = function(state, noError) {
				return void 0 === noError && (noError = !1), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), !0);
			}, pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
				return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
			}, pp$1.regexp_eatBracedQuantifier = function(state, noError) {
				var start = state.pos;
				if (state.eat(123)) {
					var min = 0, max = -1;
					if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125))) return -1 !== max && max < min && !noError && state.raise("numbers out of order in {} quantifier"), !0;
					state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatAtom = function(state) {
				return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
			}, pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
				var start = state.pos;
				if (state.eat(92)) {
					if (this.regexp_eatAtomEscape(state)) return !0;
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatUncapturingGroup = function(state) {
				var start = state.pos;
				if (state.eat(40)) {
					if (state.eat(63)) {
						if (this.options.ecmaVersion >= 16) {
							var addModifiers = this.regexp_eatModifiers(state), hasHyphen = state.eat(45);
							if (addModifiers || hasHyphen) {
								for (var i$1 = 0; i$1 < addModifiers.length; i$1++) {
									var modifier = addModifiers.charAt(i$1);
									addModifiers.indexOf(modifier, i$1 + 1) > -1 && state.raise("Duplicate regular expression modifiers");
								}
								if (hasHyphen) {
									var removeModifiers = this.regexp_eatModifiers(state);
									addModifiers || removeModifiers || 58 !== state.current() || state.raise("Invalid regular expression modifiers");
									for (var i$1$1 = 0; i$1$1 < removeModifiers.length; i$1$1++) {
										var modifier$1 = removeModifiers.charAt(i$1$1);
										(removeModifiers.indexOf(modifier$1, i$1$1 + 1) > -1 || addModifiers.indexOf(modifier$1) > -1) && state.raise("Duplicate regular expression modifiers");
									}
								}
							}
						}
						if (state.eat(58)) {
							if (this.regexp_disjunction(state), state.eat(41)) return !0;
							state.raise("Unterminated group");
						}
					}
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatCapturingGroup = function(state) {
				if (state.eat(40)) {
					if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : 63 === state.current() && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41)) return state.numCapturingParens += 1, !0;
					state.raise("Unterminated group");
				}
				return !1;
			}, pp$1.regexp_eatModifiers = function(state) {
				for (var modifiers = "", ch = 0; -1 !== (ch = state.current()) && isRegularExpressionModifier(ch);) modifiers += codePointToString(ch), state.advance();
				return modifiers;
			}, pp$1.regexp_eatExtendedAtom = function(state) {
				return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
			}, pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
				return this.regexp_eatBracedQuantifier(state, !0) && state.raise("Nothing to repeat"), !1;
			}, pp$1.regexp_eatSyntaxCharacter = function(state) {
				var ch = state.current();
				return !!isSyntaxCharacter(ch) && (state.lastIntValue = ch, state.advance(), !0);
			}, pp$1.regexp_eatPatternCharacters = function(state) {
				for (var start = state.pos, ch = 0; -1 !== (ch = state.current()) && !isSyntaxCharacter(ch);) state.advance();
				return state.pos !== start;
			}, pp$1.regexp_eatExtendedPatternCharacter = function(state) {
				var ch = state.current();
				return !(-1 === ch || 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || 91 === ch || 94 === ch || 124 === ch) && (state.advance(), !0);
			}, pp$1.regexp_groupSpecifier = function(state) {
				if (state.eat(63)) {
					this.regexp_eatGroupName(state) || state.raise("Invalid group");
					var trackDisjunction = this.options.ecmaVersion >= 16, known = state.groupNames[state.lastStringValue];
					if (known) if (trackDisjunction) for (var i$1 = 0, list$1 = known; i$1 < list$1.length; i$1 += 1) list$1[i$1].separatedFrom(state.branchID) || state.raise("Duplicate capture group name");
					else state.raise("Duplicate capture group name");
					trackDisjunction ? (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID) : state.groupNames[state.lastStringValue] = !0;
				}
			}, pp$1.regexp_eatGroupName = function(state) {
				if (state.lastStringValue = "", state.eat(60)) {
					if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) return !0;
					state.raise("Invalid capture group name");
				}
				return !1;
			}, pp$1.regexp_eatRegExpIdentifierName = function(state) {
				if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
					for (state.lastStringValue += codePointToString(state.lastIntValue); this.regexp_eatRegExpIdentifierPart(state);) state.lastStringValue += codePointToString(state.lastIntValue);
					return !0;
				}
				return !1;
			}, pp$1.regexp_eatRegExpIdentifierStart = function(state) {
				var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
				return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch$1) {
					return isIdentifierStart(ch$1, !0) || 36 === ch$1 || 95 === ch$1;
				}(ch) ? (state.lastIntValue = ch, !0) : (state.pos = start, !1);
			}, pp$1.regexp_eatRegExpIdentifierPart = function(state) {
				var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
				return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch$1) {
					return isIdentifierChar(ch$1, !0) || 36 === ch$1 || 95 === ch$1 || 8204 === ch$1 || 8205 === ch$1;
				}(ch) ? (state.lastIntValue = ch, !0) : (state.pos = start, !1);
			}, pp$1.regexp_eatAtomEscape = function(state) {
				return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (99 === state.current() && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), !1);
			}, pp$1.regexp_eatBackReference = function(state) {
				var start = state.pos;
				if (this.regexp_eatDecimalEscape(state)) {
					var n = state.lastIntValue;
					if (state.switchU) return n > state.maxBackReference && (state.maxBackReference = n), !0;
					if (n <= state.numCapturingParens) return !0;
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatKGroupName = function(state) {
				if (state.eat(107)) {
					if (this.regexp_eatGroupName(state)) return state.backReferenceNames.push(state.lastStringValue), !0;
					state.raise("Invalid named reference");
				}
				return !1;
			}, pp$1.regexp_eatCharacterEscape = function(state) {
				return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, !1) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
			}, pp$1.regexp_eatCControlLetter = function(state) {
				var start = state.pos;
				if (state.eat(99)) {
					if (this.regexp_eatControlLetter(state)) return !0;
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatZero = function(state) {
				return 48 === state.current() && !isDecimalDigit(state.lookahead()) && (state.lastIntValue = 0, state.advance(), !0);
			}, pp$1.regexp_eatControlEscape = function(state) {
				var ch = state.current();
				return 116 === ch ? (state.lastIntValue = 9, state.advance(), !0) : 110 === ch ? (state.lastIntValue = 10, state.advance(), !0) : 118 === ch ? (state.lastIntValue = 11, state.advance(), !0) : 102 === ch ? (state.lastIntValue = 12, state.advance(), !0) : 114 === ch && (state.lastIntValue = 13, state.advance(), !0);
			}, pp$1.regexp_eatControlLetter = function(state) {
				var ch = state.current();
				return !!isControlLetter(ch) && (state.lastIntValue = ch % 32, state.advance(), !0);
			}, pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
				void 0 === forceU && (forceU = !1);
				var ch, start = state.pos, switchU = forceU || state.switchU;
				if (state.eat(117)) {
					if (this.regexp_eatFixedHexDigits(state, 4)) {
						var lead = state.lastIntValue;
						if (switchU && lead >= 55296 && lead <= 56319) {
							var leadSurrogateEnd = state.pos;
							if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
								var trail = state.lastIntValue;
								if (trail >= 56320 && trail <= 57343) return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, !0;
							}
							state.pos = leadSurrogateEnd, state.lastIntValue = lead;
						}
						return !0;
					}
					if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && (ch = state.lastIntValue) >= 0 && ch <= 1114111) return !0;
					switchU && state.raise("Invalid unicode escape"), state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatIdentityEscape = function(state) {
				if (state.switchU) return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, !0);
				var ch = state.current();
				return !(99 === ch || state.switchN && 107 === ch) && (state.lastIntValue = ch, state.advance(), !0);
			}, pp$1.regexp_eatDecimalEscape = function(state) {
				state.lastIntValue = 0;
				var ch = state.current();
				if (ch >= 49 && ch <= 57) {
					do
						state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
					while ((ch = state.current()) >= 48 && ch <= 57);
					return !0;
				}
				return !1;
			};
			function isUnicodePropertyNameCharacter(ch) {
				return isControlLetter(ch) || 95 === ch;
			}
			function isUnicodePropertyValueCharacter(ch) {
				return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
			}
			function isDecimalDigit(ch) {
				return ch >= 48 && ch <= 57;
			}
			function isHexDigit(ch) {
				return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
			}
			function hexToInt(ch) {
				return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
			}
			function isOctalDigit(ch) {
				return ch >= 48 && ch <= 55;
			}
			pp$1.regexp_eatCharacterClassEscape = function(state) {
				var ch = state.current();
				if (function(ch$1) {
					return 100 === ch$1 || 68 === ch$1 || 115 === ch$1 || 83 === ch$1 || 119 === ch$1 || 87 === ch$1;
				}(ch)) return state.lastIntValue = -1, state.advance(), 1;
				var negate = !1;
				if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = 80 === ch) || 112 === ch)) {
					var result;
					if (state.lastIntValue = -1, state.advance(), state.eat(123) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(125)) return negate && 2 === result && state.raise("Invalid property name"), result;
					state.raise("Invalid property name");
				}
				return 0;
			}, pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
				var start = state.pos;
				if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
					var name = state.lastStringValue;
					if (this.regexp_eatUnicodePropertyValue(state)) {
						var value$1 = state.lastStringValue;
						return this.regexp_validateUnicodePropertyNameAndValue(state, name, value$1), 1;
					}
				}
				if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
					var nameOrValue = state.lastStringValue;
					return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
				}
				return 0;
			}, pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value$1) {
				hasOwn$2(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value$1) || state.raise("Invalid property value");
			}, pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
				return state.unicodeProperties.binary.test(nameOrValue) ? 1 : state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue) ? 2 : void state.raise("Invalid property name");
			}, pp$1.regexp_eatUnicodePropertyName = function(state) {
				var ch = 0;
				for (state.lastStringValue = ""; isUnicodePropertyNameCharacter(ch = state.current());) state.lastStringValue += codePointToString(ch), state.advance();
				return "" !== state.lastStringValue;
			}, pp$1.regexp_eatUnicodePropertyValue = function(state) {
				var ch = 0;
				for (state.lastStringValue = ""; isUnicodePropertyValueCharacter(ch = state.current());) state.lastStringValue += codePointToString(ch), state.advance();
				return "" !== state.lastStringValue;
			}, pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
				return this.regexp_eatUnicodePropertyValue(state);
			}, pp$1.regexp_eatCharacterClass = function(state) {
				if (state.eat(91)) {
					var negate = state.eat(94), result = this.regexp_classContents(state);
					return state.eat(93) || state.raise("Unterminated character class"), negate && 2 === result && state.raise("Negated character class may contain strings"), !0;
				}
				return !1;
			}, pp$1.regexp_classContents = function(state) {
				return 93 === state.current() ? 1 : state.switchV ? this.regexp_classSetExpression(state) : (this.regexp_nonEmptyClassRanges(state), 1);
			}, pp$1.regexp_nonEmptyClassRanges = function(state) {
				for (; this.regexp_eatClassAtom(state);) {
					var left = state.lastIntValue;
					if (state.eat(45) && this.regexp_eatClassAtom(state)) {
						var right = state.lastIntValue;
						!state.switchU || -1 !== left && -1 !== right || state.raise("Invalid character class"), -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class");
					}
				}
			}, pp$1.regexp_eatClassAtom = function(state) {
				var start = state.pos;
				if (state.eat(92)) {
					if (this.regexp_eatClassEscape(state)) return !0;
					if (state.switchU) {
						var ch$1 = state.current();
						(99 === ch$1 || isOctalDigit(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
					}
					state.pos = start;
				}
				var ch = state.current();
				return 93 !== ch && (state.lastIntValue = ch, state.advance(), !0);
			}, pp$1.regexp_eatClassEscape = function(state) {
				var start = state.pos;
				if (state.eat(98)) return state.lastIntValue = 8, !0;
				if (state.switchU && state.eat(45)) return state.lastIntValue = 45, !0;
				if (!state.switchU && state.eat(99)) {
					if (this.regexp_eatClassControlLetter(state)) return !0;
					state.pos = start;
				}
				return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
			}, pp$1.regexp_classSetExpression = function(state) {
				var subResult, result = 1;
				if (this.regexp_eatClassSetRange(state));
				else if (subResult = this.regexp_eatClassSetOperand(state)) {
					2 === subResult && (result = 2);
					for (var start = state.pos; state.eatChars([38, 38]);) 38 !== state.current() && (subResult = this.regexp_eatClassSetOperand(state)) ? 2 !== subResult && (result = 1) : state.raise("Invalid character in character class");
					if (start !== state.pos) return result;
					for (; state.eatChars([45, 45]);) this.regexp_eatClassSetOperand(state) || state.raise("Invalid character in character class");
					if (start !== state.pos) return result;
				} else state.raise("Invalid character in character class");
				for (;;) if (!this.regexp_eatClassSetRange(state)) {
					if (!(subResult = this.regexp_eatClassSetOperand(state))) return result;
					2 === subResult && (result = 2);
				}
			}, pp$1.regexp_eatClassSetRange = function(state) {
				var start = state.pos;
				if (this.regexp_eatClassSetCharacter(state)) {
					var left = state.lastIntValue;
					if (state.eat(45) && this.regexp_eatClassSetCharacter(state)) {
						var right = state.lastIntValue;
						return -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class"), !0;
					}
					state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatClassSetOperand = function(state) {
				return this.regexp_eatClassSetCharacter(state) ? 1 : this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
			}, pp$1.regexp_eatNestedClass = function(state) {
				var start = state.pos;
				if (state.eat(91)) {
					var negate = state.eat(94), result = this.regexp_classContents(state);
					if (state.eat(93)) return negate && 2 === result && state.raise("Negated character class may contain strings"), result;
					state.pos = start;
				}
				if (state.eat(92)) {
					var result$1 = this.regexp_eatCharacterClassEscape(state);
					if (result$1) return result$1;
					state.pos = start;
				}
				return null;
			}, pp$1.regexp_eatClassStringDisjunction = function(state) {
				var start = state.pos;
				if (state.eatChars([92, 113])) {
					if (state.eat(123)) {
						var result = this.regexp_classStringDisjunctionContents(state);
						if (state.eat(125)) return result;
					} else state.raise("Invalid escape");
					state.pos = start;
				}
				return null;
			}, pp$1.regexp_classStringDisjunctionContents = function(state) {
				for (var result = this.regexp_classString(state); state.eat(124);) 2 === this.regexp_classString(state) && (result = 2);
				return result;
			}, pp$1.regexp_classString = function(state) {
				for (var count = 0; this.regexp_eatClassSetCharacter(state);) count++;
				return 1 === count ? 1 : 2;
			}, pp$1.regexp_eatClassSetCharacter = function(state) {
				var start = state.pos;
				if (state.eat(92)) return !(!this.regexp_eatCharacterEscape(state) && !this.regexp_eatClassSetReservedPunctuator(state)) || (state.eat(98) ? (state.lastIntValue = 8, !0) : (state.pos = start, !1));
				var ch = state.current();
				return !(ch < 0 || ch === state.lookahead() && function(ch$1) {
					return 33 === ch$1 || ch$1 >= 35 && ch$1 <= 38 || ch$1 >= 42 && ch$1 <= 44 || 46 === ch$1 || ch$1 >= 58 && ch$1 <= 64 || 94 === ch$1 || 96 === ch$1 || 126 === ch$1;
				}(ch)) && !function(ch$1) {
					return 40 === ch$1 || 41 === ch$1 || 45 === ch$1 || 47 === ch$1 || ch$1 >= 91 && ch$1 <= 93 || ch$1 >= 123 && ch$1 <= 125;
				}(ch) && (state.advance(), state.lastIntValue = ch, !0);
			}, pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
				var ch = state.current();
				return !!function(ch$1) {
					return 33 === ch$1 || 35 === ch$1 || 37 === ch$1 || 38 === ch$1 || 44 === ch$1 || 45 === ch$1 || ch$1 >= 58 && ch$1 <= 62 || 64 === ch$1 || 96 === ch$1 || 126 === ch$1;
				}(ch) && (state.lastIntValue = ch, state.advance(), !0);
			}, pp$1.regexp_eatClassControlLetter = function(state) {
				var ch = state.current();
				return !(!isDecimalDigit(ch) && 95 !== ch) && (state.lastIntValue = ch % 32, state.advance(), !0);
			}, pp$1.regexp_eatHexEscapeSequence = function(state) {
				var start = state.pos;
				if (state.eat(120)) {
					if (this.regexp_eatFixedHexDigits(state, 2)) return !0;
					state.switchU && state.raise("Invalid escape"), state.pos = start;
				}
				return !1;
			}, pp$1.regexp_eatDecimalDigits = function(state) {
				var start = state.pos, ch = 0;
				for (state.lastIntValue = 0; isDecimalDigit(ch = state.current());) state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
				return state.pos !== start;
			}, pp$1.regexp_eatHexDigits = function(state) {
				var start = state.pos, ch = 0;
				for (state.lastIntValue = 0; isHexDigit(ch = state.current());) state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
				return state.pos !== start;
			}, pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
				if (this.regexp_eatOctalDigit(state)) {
					var n1 = state.lastIntValue;
					if (this.regexp_eatOctalDigit(state)) {
						var n2 = state.lastIntValue;
						n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
					} else state.lastIntValue = n1;
					return !0;
				}
				return !1;
			}, pp$1.regexp_eatOctalDigit = function(state) {
				var ch = state.current();
				return isOctalDigit(ch) ? (state.lastIntValue = ch - 48, state.advance(), !0) : (state.lastIntValue = 0, !1);
			}, pp$1.regexp_eatFixedHexDigits = function(state, length) {
				var start = state.pos;
				state.lastIntValue = 0;
				for (var i$1 = 0; i$1 < length; ++i$1) {
					var ch = state.current();
					if (!isHexDigit(ch)) return state.pos = start, !1;
					state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
				}
				return !0;
			};
			var Token = function(p$1) {
				this.type = p$1.type, this.value = p$1.value, this.start = p$1.start, this.end = p$1.end, p$1.options.locations && (this.loc = new SourceLocation(p$1, p$1.startLoc, p$1.endLoc)), p$1.options.ranges && (this.range = [p$1.start, p$1.end]);
			}, pp = Parser$1.prototype;
			function stringToBigInt(str) {
				return "function" != typeof BigInt ? null : BigInt(str.replace(/_/g, ""));
			}
			pp.next = function(ignoreEscapeSequenceInKeyword) {
				!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
			}, pp.getToken = function() {
				return this.next(), new Token(this);
			}, "undefined" != typeof Symbol && (pp[Symbol.iterator] = function() {
				var this$1$1 = this;
				return { next: function() {
					var token = this$1$1.getToken();
					return {
						done: token.type === types$1$1.eof,
						value: token
					};
				} };
			}), pp.nextToken = function() {
				var curContext = this.curContext();
				return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$1$1.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
			}, pp.readToken = function(code) {
				return isIdentifierStart(code, this.options.ecmaVersion >= 6) || 92 === code ? this.readWord() : this.getTokenFromCode(code);
			}, pp.fullCharCodeAtPos = function() {
				var code = this.input.charCodeAt(this.pos);
				if (code <= 55295 || code >= 56320) return code;
				var next = this.input.charCodeAt(this.pos + 1);
				return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
			}, pp.skipBlockComment = function() {
				var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
				if (-1 === end && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations) for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) ++this.curLine, pos = this.lineStart = nextBreak;
				this.options.onComment && this.options.onComment(!0, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
			}, pp.skipLineComment = function(startSkip) {
				for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip); this.pos < this.input.length && !isNewLine(ch);) ch = this.input.charCodeAt(++this.pos);
				this.options.onComment && this.options.onComment(!1, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
			}, pp.skipSpace = function() {
				loop: for (; this.pos < this.input.length;) {
					var ch = this.input.charCodeAt(this.pos);
					switch (ch) {
						case 32:
						case 160:
							++this.pos;
							break;
						case 13: 10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
						case 10:
						case 8232:
						case 8233:
							++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
							break;
						case 47:
							switch (this.input.charCodeAt(this.pos + 1)) {
								case 42:
									this.skipBlockComment();
									break;
								case 47:
									this.skipLineComment(2);
									break;
								default: break loop;
							}
							break;
						default:
							if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch)))) break loop;
							++this.pos;
					}
				}
			}, pp.finishToken = function(type$1, val) {
				this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
				var prevType = this.type;
				this.type = type$1, this.value = val, this.updateContext(prevType);
			}, pp.readToken_dot = function() {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next >= 48 && next <= 57) return this.readNumber(!0);
				var next2 = this.input.charCodeAt(this.pos + 2);
				return this.options.ecmaVersion >= 6 && 46 === next && 46 === next2 ? (this.pos += 3, this.finishToken(types$1$1.ellipsis)) : (++this.pos, this.finishToken(types$1$1.dot));
			}, pp.readToken_slash = function() {
				var next = this.input.charCodeAt(this.pos + 1);
				return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === next ? this.finishOp(types$1$1.assign, 2) : this.finishOp(types$1$1.slash, 1);
			}, pp.readToken_mult_modulo_exp = function(code) {
				var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = 42 === code ? types$1$1.star : types$1$1.modulo;
				return this.options.ecmaVersion >= 7 && 42 === code && 42 === next && (++size, tokentype = types$1$1.starstar, next = this.input.charCodeAt(this.pos + 2)), 61 === next ? this.finishOp(types$1$1.assign, size + 1) : this.finishOp(tokentype, size);
			}, pp.readToken_pipe_amp = function(code) {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === code) {
					if (this.options.ecmaVersion >= 12) {
						if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1$1.assign, 3);
					}
					return this.finishOp(124 === code ? types$1$1.logicalOR : types$1$1.logicalAND, 2);
				}
				return 61 === next ? this.finishOp(types$1$1.assign, 2) : this.finishOp(124 === code ? types$1$1.bitwiseOR : types$1$1.bitwiseAND, 1);
			}, pp.readToken_caret = function() {
				return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(types$1$1.assign, 2) : this.finishOp(types$1$1.bitwiseXOR, 1);
			}, pp.readToken_plus_min = function(code) {
				var next = this.input.charCodeAt(this.pos + 1);
				return next === code ? 45 !== next || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$1$1.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === next ? this.finishOp(types$1$1.assign, 2) : this.finishOp(types$1$1.plusMin, 1);
			}, pp.readToken_lt_gt = function(code) {
				var next = this.input.charCodeAt(this.pos + 1), size = 1;
				return next === code ? (size = 62 === code && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + size) ? this.finishOp(types$1$1.assign, size + 1) : this.finishOp(types$1$1.bitShift, size)) : 33 !== next || 60 !== code || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === next && (size = 2), this.finishOp(types$1$1.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
			}, pp.readToken_eq_excl = function(code) {
				var next = this.input.charCodeAt(this.pos + 1);
				return 61 === next ? this.finishOp(types$1$1.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === code && 62 === next && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$1$1.arrow)) : this.finishOp(61 === code ? types$1$1.eq : types$1$1.prefix, 1);
			}, pp.readToken_question = function() {
				var ecmaVersion = this.options.ecmaVersion;
				if (ecmaVersion >= 11) {
					var next = this.input.charCodeAt(this.pos + 1);
					if (46 === next) {
						var next2 = this.input.charCodeAt(this.pos + 2);
						if (next2 < 48 || next2 > 57) return this.finishOp(types$1$1.questionDot, 2);
					}
					if (63 === next) {
						if (ecmaVersion >= 12) {
							if (61 === this.input.charCodeAt(this.pos + 2)) return this.finishOp(types$1$1.assign, 3);
						}
						return this.finishOp(types$1$1.coalesce, 2);
					}
				}
				return this.finishOp(types$1$1.question, 1);
			}, pp.readToken_numberSign = function() {
				var code = 35;
				if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart(code = this.fullCharCodeAtPos(), !0) || 92 === code)) return this.finishToken(types$1$1.privateId, this.readWord1());
				this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
			}, pp.getTokenFromCode = function(code) {
				switch (code) {
					case 46: return this.readToken_dot();
					case 40: return ++this.pos, this.finishToken(types$1$1.parenL);
					case 41: return ++this.pos, this.finishToken(types$1$1.parenR);
					case 59: return ++this.pos, this.finishToken(types$1$1.semi);
					case 44: return ++this.pos, this.finishToken(types$1$1.comma);
					case 91: return ++this.pos, this.finishToken(types$1$1.bracketL);
					case 93: return ++this.pos, this.finishToken(types$1$1.bracketR);
					case 123: return ++this.pos, this.finishToken(types$1$1.braceL);
					case 125: return ++this.pos, this.finishToken(types$1$1.braceR);
					case 58: return ++this.pos, this.finishToken(types$1$1.colon);
					case 96:
						if (this.options.ecmaVersion < 6) break;
						return ++this.pos, this.finishToken(types$1$1.backQuote);
					case 48:
						var next = this.input.charCodeAt(this.pos + 1);
						if (120 === next || 88 === next) return this.readRadixNumber(16);
						if (this.options.ecmaVersion >= 6) {
							if (111 === next || 79 === next) return this.readRadixNumber(8);
							if (98 === next || 66 === next) return this.readRadixNumber(2);
						}
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57: return this.readNumber(!1);
					case 34:
					case 39: return this.readString(code);
					case 47: return this.readToken_slash();
					case 37:
					case 42: return this.readToken_mult_modulo_exp(code);
					case 124:
					case 38: return this.readToken_pipe_amp(code);
					case 94: return this.readToken_caret();
					case 43:
					case 45: return this.readToken_plus_min(code);
					case 60:
					case 62: return this.readToken_lt_gt(code);
					case 61:
					case 33: return this.readToken_eq_excl(code);
					case 63: return this.readToken_question();
					case 126: return this.finishOp(types$1$1.prefix, 1);
					case 35: return this.readToken_numberSign();
				}
				this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
			}, pp.finishOp = function(type$1, size) {
				var str = this.input.slice(this.pos, this.pos + size);
				return this.pos += size, this.finishToken(type$1, str);
			}, pp.readRegexp = function() {
				for (var escaped, inClass, start = this.pos;;) {
					this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
					var ch = this.input.charAt(this.pos);
					if (lineBreak.test(ch) && this.raise(start, "Unterminated regular expression"), escaped) escaped = !1;
					else {
						if ("[" === ch) inClass = !0;
						else if ("]" === ch && inClass) inClass = !1;
						else if ("/" === ch && !inClass) break;
						escaped = "\\" === ch;
					}
					++this.pos;
				}
				var pattern = this.input.slice(start, this.pos);
				++this.pos;
				var flagsStart = this.pos, flags = this.readWord1();
				this.containsEsc && this.unexpected(flagsStart);
				var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
				state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
				var value$1 = null;
				try {
					value$1 = new RegExp(pattern, flags);
				} catch (e$1) {}
				return this.finishToken(types$1$1.regexp, {
					pattern,
					flags,
					value: value$1
				});
			}, pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
				for (var allowSeparators = this.options.ecmaVersion >= 12 && void 0 === len, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && 48 === this.input.charCodeAt(this.pos), start = this.pos, total = 0, lastCode = 0, i$1 = 0, e$1 = null == len ? Infinity : len; i$1 < e$1; ++i$1, ++this.pos) {
					var code = this.input.charCodeAt(this.pos), val = void 0;
					if (allowSeparators && 95 === code) isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), 95 === lastCode && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), 0 === i$1 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
					else {
						if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : Infinity) >= radix) break;
						lastCode = code, total = total * radix + val;
					}
				}
				return allowSeparators && 95 === lastCode && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || null != len && this.pos - start !== len ? null : total;
			}, pp.readRadixNumber = function(radix) {
				var start = this.pos;
				this.pos += 2;
				var val = this.readInt(radix);
				return val ?? this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (val = stringToBigInt(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1$1.num, val);
			}, pp.readNumber = function(startsWithDot) {
				var start = this.pos;
				startsWithDot || null !== this.readInt(10, void 0, !0) || this.raise(start, "Invalid number");
				var octal = this.pos - start >= 2 && 48 === this.input.charCodeAt(start);
				octal && this.strict && this.raise(start, "Invalid number");
				var next = this.input.charCodeAt(this.pos);
				if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && 110 === next) {
					var val$1 = stringToBigInt(this.input.slice(start, this.pos));
					return ++this.pos, isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1$1.num, val$1);
				}
				octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = !1), 46 !== next || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), 69 !== next && 101 !== next || octal || (43 !== (next = this.input.charCodeAt(++this.pos)) && 45 !== next || ++this.pos, null === this.readInt(10) && this.raise(start, "Invalid number")), isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
				var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
				return this.finishToken(types$1$1.num, val);
			}, pp.readCodePoint = function() {
				var code;
				if (123 === this.input.charCodeAt(this.pos)) {
					this.options.ecmaVersion < 6 && this.unexpected();
					var codePos = ++this.pos;
					code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
				} else code = this.readHexChar(4);
				return code;
			}, pp.readString = function(quote) {
				for (var out = "", chunkStart = ++this.pos;;) {
					this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
					var ch = this.input.charCodeAt(this.pos);
					if (ch === quote) break;
					92 === ch ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(!1), chunkStart = this.pos) : 8232 === ch || 8233 === ch ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
				}
				return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$1$1.string, out);
			};
			var INVALID_TEMPLATE_ESCAPE_ERROR = {};
			pp.tryReadTemplateToken = function() {
				this.inTemplateElement = !0;
				try {
					this.readTmplToken();
				} catch (err) {
					if (err !== INVALID_TEMPLATE_ESCAPE_ERROR) throw err;
					this.readInvalidTemplateToken();
				}
				this.inTemplateElement = !1;
			}, pp.invalidStringToken = function(position, message) {
				if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw INVALID_TEMPLATE_ESCAPE_ERROR;
				this.raise(position, message);
			}, pp.readTmplToken = function() {
				for (var out = "", chunkStart = this.pos;;) {
					this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
					var ch = this.input.charCodeAt(this.pos);
					if (96 === ch || 36 === ch && 123 === this.input.charCodeAt(this.pos + 1)) return this.pos !== this.start || this.type !== types$1$1.template && this.type !== types$1$1.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$1$1.template, out)) : 36 === ch ? (this.pos += 2, this.finishToken(types$1$1.dollarBraceL)) : (++this.pos, this.finishToken(types$1$1.backQuote));
					if (92 === ch) out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(!0), chunkStart = this.pos;
					else if (isNewLine(ch)) {
						switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
							case 13: 10 === this.input.charCodeAt(this.pos) && ++this.pos;
							case 10:
								out += "\n";
								break;
							default: out += String.fromCharCode(ch);
						}
						this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
					} else ++this.pos;
				}
			}, pp.readInvalidTemplateToken = function() {
				for (; this.pos < this.input.length; this.pos++) switch (this.input[this.pos]) {
					case "\\":
						++this.pos;
						break;
					case "$": if ("{" !== this.input[this.pos + 1]) break;
					case "`": return this.finishToken(types$1$1.invalidTemplate, this.input.slice(this.start, this.pos));
					case "\r": "\n" === this.input[this.pos + 1] && ++this.pos;
					case "\n":
					case "\u2028":
					case "\u2029": ++this.curLine, this.lineStart = this.pos + 1;
				}
				this.raise(this.start, "Unterminated template");
			}, pp.readEscapedChar = function(inTemplate) {
				var ch = this.input.charCodeAt(++this.pos);
				switch (++this.pos, ch) {
					case 110: return "\n";
					case 114: return "\r";
					case 120: return String.fromCharCode(this.readHexChar(2));
					case 117: return codePointToString(this.readCodePoint());
					case 116: return "	";
					case 98: return "\b";
					case 118: return "\v";
					case 102: return "\f";
					case 13: 10 === this.input.charCodeAt(this.pos) && ++this.pos;
					case 10: return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
					case 56:
					case 57: if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
						var codePos = this.pos - 1;
						this.invalidStringToken(codePos, "Invalid escape sequence in template string");
					}
					default:
						if (ch >= 48 && ch <= 55) {
							var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
							return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), "0" === octalStr && 56 !== ch && 57 !== ch || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
						}
						return isNewLine(ch) ? (this.options.locations && (this.lineStart = this.pos, ++this.curLine), "") : String.fromCharCode(ch);
				}
			}, pp.readHexChar = function(len) {
				var codePos = this.pos, n = this.readInt(16, len);
				return null === n && this.invalidStringToken(codePos, "Bad character escape sequence"), n;
			}, pp.readWord1 = function() {
				this.containsEsc = !1;
				for (var word = "", first = !0, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6; this.pos < this.input.length;) {
					var ch = this.fullCharCodeAtPos();
					if (isIdentifierChar(ch, astral)) this.pos += ch <= 65535 ? 1 : 2;
					else {
						if (92 !== ch) break;
						this.containsEsc = !0, word += this.input.slice(chunkStart, this.pos);
						var escStart = this.pos;
						117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
						var esc = this.readCodePoint();
						(first ? isIdentifierStart : isIdentifierChar)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString(esc), chunkStart = this.pos;
					}
					first = !1;
				}
				return word + this.input.slice(chunkStart, this.pos);
			}, pp.readWord = function() {
				var word = this.readWord1(), type$1 = types$1$1.name;
				return this.keywords.test(word) && (type$1 = keywords[word]), this.finishToken(type$1, word);
			};
			Parser$1.acorn = {
				Parser: Parser$1,
				version: "8.14.0",
				defaultOptions: defaultOptions$1,
				Position,
				SourceLocation,
				getLineInfo,
				Node,
				TokenType,
				tokTypes: types$1$1,
				keywordTypes: keywords,
				TokContext,
				tokContexts: types$7,
				isIdentifierChar,
				isIdentifierStart,
				Token,
				isNewLine,
				lineBreak,
				lineBreakG,
				nonASCIIwhitespace
			};
			const external_node_module_namespaceObject = __require("node:module"), external_node_url_namespaceObject = (__require("node:fs"), __require("node:url")), external_node_assert_namespaceObject = __require("node:assert"), external_node_v8_namespaceObject = (__require("node:process"), __require("node:path"), __require("node:v8")), external_node_util_namespaceObject = __require("node:util");
			new Set(external_node_module_namespaceObject.builtinModules);
			function normalizeSlash(path$9) {
				return path$9.replace(/\\/g, "/");
			}
			const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = new Set([
				"string",
				"function",
				"number",
				"object",
				"Function",
				"Object",
				"boolean",
				"bigint",
				"symbol"
			]), codes = {};
			function formatList(array, type$1 = "and") {
				return array.length < 3 ? array.join(` ${type$1} `) : `${array.slice(0, -1).join(", ")}, ${type$1} ${array[array.length - 1]}`;
			}
			const messages = new Map();
			let userStackTraceLimit;
			function createError$1(sym, value$1, constructor) {
				return messages.set(sym, value$1), function(Base, key) {
					return NodeError;
					function NodeError(...parameters) {
						const limit = Error.stackTraceLimit;
						isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
						const error$1 = new Base();
						isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
						const message = function(key$1, parameters$1, self$1) {
							const message$1 = messages.get(key$1);
							if (external_node_assert_namespaceObject(void 0 !== message$1, "expected `message` to be found"), "function" == typeof message$1) return external_node_assert_namespaceObject(message$1.length <= parameters$1.length, `Code: ${key$1}; The provided arguments length (${parameters$1.length}) does not match the required ones (${message$1.length}).`), Reflect.apply(message$1, self$1, parameters$1);
							const regex = /%[dfijoOs]/g;
							let expectedLength = 0;
							for (; null !== regex.exec(message$1);) expectedLength++;
							return external_node_assert_namespaceObject(expectedLength === parameters$1.length, `Code: ${key$1}; The provided arguments length (${parameters$1.length}) does not match the required ones (${expectedLength}).`), 0 === parameters$1.length ? message$1 : (parameters$1.unshift(message$1), Reflect.apply(external_node_util_namespaceObject.format, null, parameters$1));
						}(key, parameters, error$1);
						return Object.defineProperties(error$1, {
							message: {
								value: message,
								enumerable: !1,
								writable: !0,
								configurable: !0
							},
							toString: {
								value() {
									return `${this.name} [${key}]: ${this.message}`;
								},
								enumerable: !1,
								writable: !0,
								configurable: !0
							}
						}), captureLargerStackTrace(error$1), error$1.code = key, error$1;
					}
				}(constructor, sym);
			}
			function isErrorStackTraceLimitWritable() {
				try {
					if (external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot()) return !1;
				} catch {}
				const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
				return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
			}
			codes.ERR_INVALID_ARG_TYPE = createError$1("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
				external_node_assert_namespaceObject("string" == typeof name, "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
				let message = "The ";
				if (name.endsWith(" argument")) message += `${name} `;
				else {
					const type$1 = name.includes(".") ? "property" : "argument";
					message += `"${name}" ${type$1} `;
				}
				message += "must be ";
				const types$8 = [], instances = [], other = [];
				for (const value$1 of expected) external_node_assert_namespaceObject("string" == typeof value$1, "All expected entries have to be of type string"), kTypes.has(value$1) ? types$8.push(value$1.toLowerCase()) : null === classRegExp.exec(value$1) ? (external_node_assert_namespaceObject("object" !== value$1, "The value \"object\" should be written as \"Object\""), other.push(value$1)) : instances.push(value$1);
				if (instances.length > 0) {
					const pos = types$8.indexOf("object");
					-1 !== pos && (types$8.slice(pos, 1), instances.push("Object"));
				}
				return types$8.length > 0 && (message += `${types$8.length > 1 ? "one of type" : "of type"} ${formatList(types$8, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value$1) {
					if (null == value$1) return String(value$1);
					if ("function" == typeof value$1 && value$1.name) return `function ${value$1.name}`;
					if ("object" == typeof value$1) return value$1.constructor && value$1.constructor.name ? `an instance of ${value$1.constructor.name}` : `${(0, external_node_util_namespaceObject.inspect)(value$1, { depth: -1 })}`;
					let inspected = (0, external_node_util_namespaceObject.inspect)(value$1, { colors: !1 });
					inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
					return `type ${typeof value$1} (${inspected})`;
				}(actual)}`, message;
			}, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError$1("ERR_INVALID_MODULE_SPECIFIER", (request$1, reason, base = void 0) => `Invalid module "${request$1}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError$1("ERR_INVALID_PACKAGE_CONFIG", (path$9, base, message) => `Invalid package config ${path$9}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError$1("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = !1, base = void 0) => {
				const relatedError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
				return "." === key ? (external_node_assert_namespaceObject(!1 === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? "; targets must start with \"./\"" : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? "; targets must start with \"./\"" : ""}`;
			}, Error), codes.ERR_MODULE_NOT_FOUND = createError$1("ERR_MODULE_NOT_FOUND", (path$9, base, exactUrl = !1) => `Cannot find ${exactUrl ? "module" : "package"} '${path$9}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError$1("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError$1("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError$1("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError$1("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError$1("ERR_UNSUPPORTED_RESOLVE_REQUEST", "Failed to resolve module specifier \"%s\" from \"%s\": Invalid relative URL or base scheme is not hierarchical.", TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError$1("ERR_UNKNOWN_FILE_EXTENSION", (extension, path$9) => `Unknown file extension "${extension}" for ${path$9}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError$1("ERR_INVALID_ARG_VALUE", (name, value$1, reason = "is invalid") => {
				let inspected = (0, external_node_util_namespaceObject.inspect)(value$1);
				inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
				return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
			}, TypeError);
			const captureLargerStackTrace = function(wrappedFunction) {
				const hidden = "__node_internal_" + wrappedFunction.name;
				return Object.defineProperty(wrappedFunction, "name", { value: hidden }), wrappedFunction;
			}(function(error$1) {
				const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
				return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error$1), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error$1;
			});
			const { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes;
			const { ERR_UNKNOWN_FILE_EXTENSION } = codes;
			RegExp.prototype[Symbol.replace];
			const { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes;
			function fileURLToPath(id) {
				return "string" != typeof id || id.startsWith("file://") ? normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash(id);
			}
			function pathToFileURL(id) {
				return (0, external_node_url_namespaceObject.pathToFileURL)(fileURLToPath(id)).toString();
			}
			function importMetaPathsPlugin(_ctx, opts) {
				return {
					name: "import-meta-paths",
					visitor: { Program(path$9) {
						const metaUrls = [], metaDirnames = [], metaFilenames = [];
						path$9.traverse({ MemberExpression(memberExpPath) {
							const { node } = memberExpPath;
							if ("MetaProperty" === node.object.type && "import" === node.object.meta.name && "meta" === node.object.property.name && "Identifier" === node.property.type) switch (node.property.name) {
								case "url":
									metaUrls.push(memberExpPath);
									break;
								case "dirname":
									metaDirnames.push(memberExpPath);
									break;
								case "filename": metaFilenames.push(memberExpPath);
							}
						} });
						for (const meta of metaUrls) meta.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify(pathToFileURL(opts.filename)) : "require('url').pathToFileURL(__filename).toString()"}`);
						for (const metaDirname of metaDirnames) metaDirname.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify(pathe_ff20891b_dirname(fileURLToPath(pathToFileURL(opts.filename)))) : "__dirname"}`);
						for (const metaFilename of metaFilenames) metaFilename.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify(fileURLToPath(pathToFileURL(opts.filename))) : "__filename"}`);
					} }
				};
			}
			var helper_module_imports_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), helper_module_transforms_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js"), helper_simple_access_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-simple-access@7.25.9/node_modules/@babel/helper-simple-access/lib/index.js");
			function transformDynamicImport(path$9, noInterop, file) {
				path$9.replaceWith((0, helper_module_transforms_lib.buildDynamicImport)(path$9.node, !0, !1, (specifier) => ((source, file$1, noInterop$1) => {
					const exp = lib.template.expression.ast`jitiImport(${source})`;
					return noInterop$1 ? exp : lib.types.callExpression(lib.types.memberExpression(exp, lib.types.identifier("then")), [lib.types.arrowFunctionExpression([lib.types.identifier("m")], lib.types.callExpression(file$1.addHelper("interopRequireWildcard"), [lib.types.identifier("m")]))]);
				})(specifier, file, noInterop)));
			}
			const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
			function findMap(arr, cb) {
				if (arr) for (const el of arr) {
					const res = cb(el);
					if (null != res) return res;
				}
			}
			const transform_module = (0, helper_plugin_utils_lib.declare)((api$1, options) => {
				const { strictNamespace = !1, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = !1, allowCommonJSExports = !0, loose = !1, async = !1 } = options, constantReexports = api$1.assumption("constantReexports") ?? loose, enumerableModuleMeta = api$1.assumption("enumerableModuleMeta") ?? loose, noIncompleteNsImportDetection = api$1.assumption("noIncompleteNsImportDetection") ?? !1;
				if (!("boolean" == typeof lazy || "function" == typeof lazy || Array.isArray(lazy) && lazy.every((item) => "string" == typeof item))) throw new Error(".lazy must be a boolean, array of strings, or a function");
				if ("boolean" != typeof strictNamespace) throw new TypeError(".strictNamespace must be a boolean, or undefined");
				if ("boolean" != typeof mjsStrictNamespace) throw new TypeError(".mjsStrictNamespace must be a boolean, or undefined");
				const getAssertion = (localName) => lib.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = {
					ReferencedIdentifier(path$9) {
						const localName = path$9.node.name;
						if ("module" !== localName && "exports" !== localName) return;
						const localBinding = path$9.scope.getBinding(localName);
						this.scope.getBinding(localName) !== localBinding || path$9.parentPath.isObjectProperty({ value: path$9.node }) && path$9.parentPath.parentPath.isObjectPattern() || path$9.parentPath.isAssignmentExpression({ left: path$9.node }) || path$9.isAssignmentExpression({ left: path$9.node }) || path$9.replaceWith(getAssertion(localName));
					},
					UpdateExpression(path$9) {
						const arg = path$9.get("argument");
						if (!arg.isIdentifier()) return;
						const localName = arg.node.name;
						if ("module" !== localName && "exports" !== localName) return;
						const localBinding = path$9.scope.getBinding(localName);
						this.scope.getBinding(localName) === localBinding && path$9.replaceWith(lib.types.assignmentExpression(path$9.node.operator[0] + "=", arg.node, getAssertion(localName)));
					},
					AssignmentExpression(path$9) {
						const left = path$9.get("left");
						if (left.isIdentifier()) {
							const localName = left.node.name;
							if ("module" !== localName && "exports" !== localName) return;
							const localBinding = path$9.scope.getBinding(localName);
							if (this.scope.getBinding(localName) !== localBinding) return;
							const right = path$9.get("right");
							right.replaceWith(lib.types.sequenceExpression([right.node, getAssertion(localName)]));
						} else if (left.isPattern()) {
							const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).find((localName$1) => ("module" === localName$1 || "exports" === localName$1) && this.scope.getBinding(localName$1) === path$9.scope.getBinding(localName$1));
							if (localName) {
								const right = path$9.get("right");
								right.replaceWith(lib.types.sequenceExpression([right.node, getAssertion(localName)]));
							}
						}
					}
				};
				return {
					name: "transform-modules-commonjs",
					pre() {
						this.file.set("@babel/plugin-transform-modules-*", "commonjs"), lazy && function(file, hook) {
							let hooks = file.get(commonJSHooksKey);
							hooks || file.set(commonJSHooksKey, hooks = []), hooks.push(hook);
						}(this.file, ((lazy$1) => ({
							name: "babel-plugin-transform-modules-commonjs/lazy",
							version: "7.24.7",
							getWrapperPayload: (source, metadata) => (0, helper_module_transforms_lib.isSideEffectImport)(metadata) || metadata.reexportAll ? null : !0 === lazy$1 ? source.includes(".") ? null : "lazy/function" : Array.isArray(lazy$1) ? lazy$1.includes(source) ? "lazy/function" : null : "function" == typeof lazy$1 ? lazy$1(source) ? "lazy/function" : null : void 0,
							buildRequireWrapper(name, init$1, payload, referenced) {
								if ("lazy/function" === payload) return !!referenced && lib.template.statement.ast`
        function ${name}() {
          const data = ${init$1};
          ${name} = function(){ return data; };
          return data;
        }
      `;
							},
							wrapReference(ref$1, payload) {
								if ("lazy/function" === payload) return lib.types.callExpression(ref$1, []);
							}
						}))(lazy));
					},
					visitor: {
						["CallExpression" + (api$1.types.importExpression ? "|ImportExpression" : "")](path$9) {
							if (path$9.isCallExpression() && !lib.types.isImport(path$9.node.callee)) return;
							let { scope } = path$9;
							do
								scope.rename("require");
							while (scope = scope.parent);
							transformDynamicImport(path$9, noInterop, this.file);
						},
						Program: { exit(path$9, state) {
							if (!(0, helper_module_imports_lib.isModule)(path$9)) return;
							path$9.scope.rename("exports"), path$9.scope.rename("module"), path$9.scope.rename("require"), path$9.scope.rename("__filename"), path$9.scope.rename("__dirname"), allowCommonJSExports || (process.env.BABEL_8_BREAKING ? (0, helper_simple_access_lib.A)(path$9, new Set(["module", "exports"])) : (0, helper_simple_access_lib.A)(path$9, new Set(["module", "exports"]), !1), path$9.traverse(moduleExportsVisitor, { scope: path$9.scope }));
							let moduleName = (0, helper_module_transforms_lib.getModuleName)(this.file.opts, options);
							moduleName && (moduleName = lib.types.stringLiteral(moduleName));
							const hooks = function(file) {
								const hooks$1 = file.get(commonJSHooksKey);
								return {
									getWrapperPayload: (...args) => findMap(hooks$1, (hook) => hook.getWrapperPayload?.(...args)),
									wrapReference: (...args) => findMap(hooks$1, (hook) => hook.wrapReference?.(...args)),
									buildRequireWrapper: (...args) => findMap(hooks$1, (hook) => hook.buildRequireWrapper?.(...args))
								};
							}(this.file), { meta, headers } = (0, helper_module_transforms_lib.rewriteModuleStatementsAndPrepareHeader)(path$9, {
								exportName: "exports",
								constantReexports,
								enumerableModuleMeta,
								strict,
								strictMode,
								allowTopLevelThis,
								noInterop,
								importInterop,
								wrapReference: hooks.wrapReference,
								getWrapperPayload: hooks.getWrapperPayload,
								esNamespaceOnly: "string" == typeof state.filename && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace,
								noIncompleteNsImportDetection,
								filename: this.file.opts.filename
							});
							for (const [source, metadata] of meta.source) {
								const loadExpr = async ? lib.types.awaitExpression(lib.types.callExpression(lib.types.identifier("jitiImport"), [lib.types.stringLiteral(source)])) : lib.types.callExpression(lib.types.identifier("require"), [lib.types.stringLiteral(source)]);
								let header;
								if ((0, helper_module_transforms_lib.isSideEffectImport)(metadata)) {
									if (lazy && "function" === metadata.wrap) throw new Error("Assertion failure");
									header = lib.types.expressionStatement(loadExpr);
								} else {
									const init$1 = (0, helper_module_transforms_lib.wrapInterop)(path$9, loadExpr, metadata.interop) || loadExpr;
									if (metadata.wrap) {
										const res = hooks.buildRequireWrapper(metadata.name, init$1, metadata.wrap, metadata.referenced);
										if (!1 === res) continue;
										header = res;
									}
									header ??= lib.template.statement.ast`
                var ${metadata.name} = ${init$1};
              `;
								}
								header.loc = metadata.loc, headers.push(header), headers.push(...(0, helper_module_transforms_lib.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks.wrapReference));
							}
							(0, helper_module_transforms_lib.ensureStatementsHoisted)(headers), path$9.unshiftContainer("body", headers), path$9.get("body").forEach((path$10) => {
								headers.includes(path$10.node) && path$10.isVariableDeclaration() && path$10.scope.registerDeclaration(path$10);
							});
						} }
					}
				};
			});
			function transform$1(opts) {
				const _opts = {
					babelrc: !1,
					configFile: !1,
					compact: !1,
					retainLines: "boolean" != typeof opts.retainLines || opts.retainLines,
					filename: "",
					cwd: "/",
					...opts.babel,
					plugins: [
						[transform_module, {
							allowTopLevelThis: !0,
							noInterop: !opts.interopDefault,
							async: opts.async
						}],
						[importMetaPathsPlugin, { filename: opts.filename }],
						[importMetaEnvPlugin],
						[importMetaResolvePlugin],
						[plugin_syntax_class_properties_lib.A],
						[plugin_transform_export_namespace_from_lib.A]
					]
				};
				opts.jsx && _opts.plugins.push([plugin_syntax_jsx_lib.default], [plugin_transform_react_jsx_lib.A, Object.assign({}, opts.jsx)]), opts.ts && (_opts.plugins.push([plugin_transform_typescript_lib.default, {
					allowDeclareFields: !0,
					isTSX: opts.jsx && /\.[cm]?tsx$/.test(opts.filename || "")
				}]), _opts.plugins.unshift([babel_plugin_transform_typescript_metadata], [plugin_proposal_decorators_lib.A, { legacy: !0 }]), _opts.plugins.push(babel_plugin_parameter_decorator_lib_default()), _opts.plugins.push(plugin_syntax_import_assertions_lib.A)), opts.babel && Array.isArray(opts.babel.plugins) && _opts.plugins?.push(...opts.babel.plugins);
				try {
					return { code: (0, lib.transformSync)(opts.source, _opts)?.code || "" };
				} catch (error$1) {
					return {
						error: error$1,
						code: "exports.__JITI_ERROR__ = " + JSON.stringify({
							filename: opts.filename,
							line: error$1.loc?.line || 0,
							column: error$1.loc?.column || 0,
							code: error$1.code?.replace("BABEL_", "").replace("PARSE_ERROR", "ParseError"),
							message: error$1.message?.replace("/: ", "").replace(/\(.+\)\s*$/, "")
						})
					};
				}
			}
		})(), module.exports = __webpack_exports__.default;
	})();
} });

//#endregion
//#region node_modules/.pnpm/jiti@2.4.2/node_modules/jiti/lib/jiti.mjs
var import_jiti = __toESM(require_jiti(), 1);
var import_babel = __toESM(require_babel(), 1);

//#endregion
//#region node_modules/.pnpm/nuxthub@https+++pkg.pr.new+nuxt-hub+cli+nuxthub@56/node_modules/nuxthub/src/utils/config.mjs
var import_ci_info = __toESM(require_ci_info(), 1);
var import_main = __toESM(require_main(), 1);
(0, import_main.config)();
const INITIAL_CONFIG = loadUserConfig();
const NUXT_HUB_URL = process.env.NUXT_HUB_URL || INITIAL_CONFIG.hub?.url || "https://admin.hub.nuxt.com";
const MAX_ASSET_SIZE = 25 * 1024 * 1024;
const MAX_UPLOAD_CHUNK_SIZE = 10 * 1024 * 1024;
const MAX_UPLOAD_ATTEMPTS = 5;
const UPLOAD_RETRY_DELAY = 1e3;
const CONCURRENT_UPLOADS = 5;
function loadUserConfig() {
	return readUser(".nuxtrc");
}
function withTilde(path$9) {
	return path$9.replace(homedir(), "~/").replace(/\/{2,}/, "/");
}

//#endregion
//#region node_modules/.pnpm/consola@3.4.2/node_modules/consola/dist/core.mjs
const LogLevels = {
	silent: Number.NEGATIVE_INFINITY,
	fatal: 0,
	error: 0,
	warn: 1,
	log: 2,
	info: 3,
	success: 3,
	fail: 3,
	ready: 3,
	start: 3,
	box: 3,
	debug: 4,
	trace: 5,
	verbose: Number.POSITIVE_INFINITY
};
const LogTypes = {
	silent: { level: -1 },
	fatal: { level: LogLevels.fatal },
	error: { level: LogLevels.error },
	warn: { level: LogLevels.warn },
	log: { level: LogLevels.log },
	info: { level: LogLevels.info },
	success: { level: LogLevels.success },
	fail: { level: LogLevels.fail },
	ready: { level: LogLevels.info },
	start: { level: LogLevels.info },
	box: { level: LogLevels.info },
	debug: { level: LogLevels.debug },
	trace: { level: LogLevels.trace },
	verbose: { level: LogLevels.verbose }
};
function isPlainObject$1(value$1) {
	if (value$1 === null || typeof value$1 !== "object") return false;
	const prototype = Object.getPrototypeOf(value$1);
	if (prototype !== null && prototype !== Object.prototype && Object.getPrototypeOf(prototype) !== null) return false;
	if (Symbol.iterator in value$1) return false;
	if (Symbol.toStringTag in value$1) return Object.prototype.toString.call(value$1) === "[object Module]";
	return true;
}
function _defu(baseObject, defaults$1, namespace = ".", merger) {
	if (!isPlainObject$1(defaults$1)) return _defu(baseObject, {}, namespace, merger);
	const object = Object.assign({}, defaults$1);
	for (const key in baseObject) {
		if (key === "__proto__" || key === "constructor") continue;
		const value$1 = baseObject[key];
		if (value$1 === null || value$1 === void 0) continue;
		if (merger && merger(object, key, value$1, namespace)) continue;
		if (Array.isArray(value$1) && Array.isArray(object[key])) object[key] = [...value$1, ...object[key]];
		else if (isPlainObject$1(value$1) && isPlainObject$1(object[key])) object[key] = _defu(value$1, object[key], (namespace ? `${namespace}.` : "") + key.toString(), merger);
		else object[key] = value$1;
	}
	return object;
}
function createDefu(merger) {
	return (...arguments_) => arguments_.reduce((p$1, c) => _defu(p$1, c, "", merger), {});
}
const defu = createDefu();
function isPlainObject(obj) {
	return Object.prototype.toString.call(obj) === "[object Object]";
}
function isLogObj(arg) {
	if (!isPlainObject(arg)) return false;
	if (!arg.message && !arg.args) return false;
	if (arg.stack) return false;
	return true;
}
let paused = false;
const queue = [];
var Consola = class Consola {
	options;
	_lastLog;
	_mockFn;
	/**
	* Creates an instance of Consola with specified options or defaults.
	*
	* @param {Partial<ConsolaOptions>} [options={}] - Configuration options for the Consola instance.
	*/
	constructor(options = {}) {
		const types$7 = options.types || LogTypes;
		this.options = defu({
			...options,
			defaults: { ...options.defaults },
			level: _normalizeLogLevel(options.level, types$7),
			reporters: [...options.reporters || []]
		}, {
			types: LogTypes,
			throttle: 1e3,
			throttleMin: 5,
			formatOptions: {
				date: true,
				colors: false,
				compact: true
			}
		});
		for (const type$1 in types$7) {
			const defaults$1 = {
				type: type$1,
				...this.options.defaults,
				...types$7[type$1]
			};
			this[type$1] = this._wrapLogFn(defaults$1);
			this[type$1].raw = this._wrapLogFn(defaults$1, true);
		}
		if (this.options.mockFn) this.mockTypes();
		this._lastLog = {};
	}
	/**
	* Gets the current log level of the Consola instance.
	*
	* @returns {number} The current log level.
	*/
	get level() {
		return this.options.level;
	}
	/**
	* Sets the minimum log level that will be output by the instance.
	*
	* @param {number} level - The new log level to set.
	*/
	set level(level) {
		this.options.level = _normalizeLogLevel(level, this.options.types, this.options.level);
	}
	/**
	* Displays a prompt to the user and returns the response.
	* Throw an error if `prompt` is not supported by the current configuration.
	*
	* @template T
	* @param {string} message - The message to display in the prompt.
	* @param {T} [opts] - Optional options for the prompt. See {@link PromptOptions}.
	* @returns {promise<T>} A promise that infer with the prompt options. See {@link PromptOptions}.
	*/
	prompt(message, opts) {
		if (!this.options.prompt) throw new Error("prompt is not supported!");
		return this.options.prompt(message, opts);
	}
	/**
	* Creates a new instance of Consola, inheriting options from the current instance, with possible overrides.
	*
	* @param {Partial<ConsolaOptions>} options - Optional overrides for the new instance. See {@link ConsolaOptions}.
	* @returns {ConsolaInstance} A new Consola instance. See {@link ConsolaInstance}.
	*/
	create(options) {
		const instance = new Consola({
			...this.options,
			...options
		});
		if (this._mockFn) instance.mockTypes(this._mockFn);
		return instance;
	}
	/**
	* Creates a new Consola instance with the specified default log object properties.
	*
	* @param {InputLogObject} defaults - Default properties to include in any log from the new instance. See {@link InputLogObject}.
	* @returns {ConsolaInstance} A new Consola instance. See {@link ConsolaInstance}.
	*/
	withDefaults(defaults$1) {
		return this.create({
			...this.options,
			defaults: {
				...this.options.defaults,
				...defaults$1
			}
		});
	}
	/**
	* Creates a new Consola instance with a specified tag, which will be included in every log.
	*
	* @param {string} tag - The tag to include in each log of the new instance.
	* @returns {ConsolaInstance} A new Consola instance. See {@link ConsolaInstance}.
	*/
	withTag(tag) {
		return this.withDefaults({ tag: this.options.defaults.tag ? this.options.defaults.tag + ":" + tag : tag });
	}
	/**
	* Adds a custom reporter to the Consola instance.
	* Reporters will be called for each log message, depending on their implementation and log level.
	*
	* @param {ConsolaReporter} reporter - The reporter to add. See {@link ConsolaReporter}.
	* @returns {Consola} The current Consola instance.
	*/
	addReporter(reporter) {
		this.options.reporters.push(reporter);
		return this;
	}
	/**
	* Removes a custom reporter from the Consola instance.
	* If no reporter is specified, all reporters will be removed.
	*
	* @param {ConsolaReporter} reporter - The reporter to remove. See {@link ConsolaReporter}.
	* @returns {Consola} The current Consola instance.
	*/
	removeReporter(reporter) {
		if (reporter) {
			const i = this.options.reporters.indexOf(reporter);
			if (i !== -1) return this.options.reporters.splice(i, 1);
		} else this.options.reporters.splice(0);
		return this;
	}
	/**
	* Replaces all reporters of the Consola instance with the specified array of reporters.
	*
	* @param {ConsolaReporter[]} reporters - The new reporters to set. See {@link ConsolaReporter}.
	* @returns {Consola} The current Consola instance.
	*/
	setReporters(reporters) {
		this.options.reporters = Array.isArray(reporters) ? reporters : [reporters];
		return this;
	}
	wrapAll() {
		this.wrapConsole();
		this.wrapStd();
	}
	restoreAll() {
		this.restoreConsole();
		this.restoreStd();
	}
	/**
	* Overrides console methods with Consola logging methods for consistent logging.
	*/
	wrapConsole() {
		for (const type$1 in this.options.types) {
			if (!console["__" + type$1]) console["__" + type$1] = console[type$1];
			console[type$1] = this[type$1].raw;
		}
	}
	/**
	* Restores the original console methods, removing Consola overrides.
	*/
	restoreConsole() {
		for (const type$1 in this.options.types) if (console["__" + type$1]) {
			console[type$1] = console["__" + type$1];
			delete console["__" + type$1];
		}
	}
	/**
	* Overrides standard output and error streams to redirect them through Consola.
	*/
	wrapStd() {
		this._wrapStream(this.options.stdout, "log");
		this._wrapStream(this.options.stderr, "log");
	}
	_wrapStream(stream$2, type$1) {
		if (!stream$2) return;
		if (!stream$2.__write) stream$2.__write = stream$2.write;
		stream$2.write = (data) => {
			this[type$1].raw(String(data).trim());
		};
	}
	/**
	* Restores the original standard output and error streams, removing the Consola redirection.
	*/
	restoreStd() {
		this._restoreStream(this.options.stdout);
		this._restoreStream(this.options.stderr);
	}
	_restoreStream(stream$2) {
		if (!stream$2) return;
		if (stream$2.__write) {
			stream$2.write = stream$2.__write;
			delete stream$2.__write;
		}
	}
	/**
	* Pauses logging, queues incoming logs until resumed.
	*/
	pauseLogs() {
		paused = true;
	}
	/**
	* Resumes logging, processing any queued logs.
	*/
	resumeLogs() {
		paused = false;
		const _queue = queue.splice(0);
		for (const item of _queue) item[0]._logFn(item[1], item[2]);
	}
	/**
	* Replaces logging methods with mocks if a mock function is provided.
	*
	* @param {ConsolaOptions["mockFn"]} mockFn - The function to use for mocking logging methods. See {@link ConsolaOptions["mockFn"]}.
	*/
	mockTypes(mockFn) {
		const _mockFn = mockFn || this.options.mockFn;
		this._mockFn = _mockFn;
		if (typeof _mockFn !== "function") return;
		for (const type$1 in this.options.types) {
			this[type$1] = _mockFn(type$1, this.options.types[type$1]) || this[type$1];
			this[type$1].raw = this[type$1];
		}
	}
	_wrapLogFn(defaults$1, isRaw) {
		return (...args) => {
			if (paused) {
				queue.push([
					this,
					defaults$1,
					args,
					isRaw
				]);
				return;
			}
			return this._logFn(defaults$1, args, isRaw);
		};
	}
	_logFn(defaults$1, args, isRaw) {
		if ((defaults$1.level || 0) > this.level) return false;
		const logObj = {
			date: /* @__PURE__ */ new Date(),
			args: [],
			...defaults$1,
			level: _normalizeLogLevel(defaults$1.level, this.options.types)
		};
		if (!isRaw && args.length === 1 && isLogObj(args[0])) Object.assign(logObj, args[0]);
		else logObj.args = [...args];
		if (logObj.message) {
			logObj.args.unshift(logObj.message);
			delete logObj.message;
		}
		if (logObj.additional) {
			if (!Array.isArray(logObj.additional)) logObj.additional = logObj.additional.split("\n");
			logObj.args.push("\n" + logObj.additional.join("\n"));
			delete logObj.additional;
		}
		logObj.type = typeof logObj.type === "string" ? logObj.type.toLowerCase() : "log";
		logObj.tag = typeof logObj.tag === "string" ? logObj.tag : "";
		const resolveLog = (newLog = false) => {
			const repeated = (this._lastLog.count || 0) - this.options.throttleMin;
			if (this._lastLog.object && repeated > 0) {
				const args2 = [...this._lastLog.object.args];
				if (repeated > 1) args2.push(`(repeated ${repeated} times)`);
				this._log({
					...this._lastLog.object,
					args: args2
				});
				this._lastLog.count = 1;
			}
			if (newLog) {
				this._lastLog.object = logObj;
				this._log(logObj);
			}
		};
		clearTimeout(this._lastLog.timeout);
		const diffTime = this._lastLog.time && logObj.date ? logObj.date.getTime() - this._lastLog.time.getTime() : 0;
		this._lastLog.time = logObj.date;
		if (diffTime < this.options.throttle) try {
			const serializedLog = JSON.stringify([
				logObj.type,
				logObj.tag,
				logObj.args
			]);
			const isSameLog = this._lastLog.serialized === serializedLog;
			this._lastLog.serialized = serializedLog;
			if (isSameLog) {
				this._lastLog.count = (this._lastLog.count || 0) + 1;
				if (this._lastLog.count > this.options.throttleMin) {
					this._lastLog.timeout = setTimeout(resolveLog, this.options.throttle);
					return;
				}
			}
		} catch {}
		resolveLog(true);
	}
	_log(logObj) {
		for (const reporter of this.options.reporters) reporter.log(logObj, { options: this.options });
	}
};
function _normalizeLogLevel(input, types$7 = {}, defaultLevel = 3) {
	if (input === void 0) return defaultLevel;
	if (typeof input === "number") return input;
	if (types$7[input] && types$7[input].level !== void 0) return types$7[input].level;
	return defaultLevel;
}
Consola.prototype.add = Consola.prototype.addReporter;
Consola.prototype.remove = Consola.prototype.removeReporter;
Consola.prototype.clear = Consola.prototype.removeReporter;
Consola.prototype.withScope = Consola.prototype.withTag;
Consola.prototype.mock = Consola.prototype.mockTypes;
Consola.prototype.pause = Consola.prototype.pauseLogs;
Consola.prototype.resume = Consola.prototype.resumeLogs;
function createConsola$1(options = {}) {
	return new Consola(options);
}

//#endregion
//#region node_modules/.pnpm/consola@3.4.2/node_modules/consola/dist/browser.mjs
var BrowserReporter = class {
	options;
	defaultColor;
	levelColorMap;
	typeColorMap;
	constructor(options) {
		this.options = { ...options };
		this.defaultColor = "#7f8c8d";
		this.levelColorMap = {
			0: "#c0392b",
			1: "#f39c12",
			3: "#00BCD4"
		};
		this.typeColorMap = { success: "#2ecc71" };
	}
	_getLogFn(level) {
		if (level < 1) return console.__error || console.error;
		if (level === 1) return console.__warn || console.warn;
		return console.__log || console.log;
	}
	log(logObj) {
		const consoleLogFn = this._getLogFn(logObj.level);
		const type$1 = logObj.type === "log" ? "" : logObj.type;
		const tag = logObj.tag || "";
		const color = this.typeColorMap[logObj.type] || this.levelColorMap[logObj.level] || this.defaultColor;
		const style = `
      background: ${color};
      border-radius: 0.5em;
      color: white;
      font-weight: bold;
      padding: 2px 0.5em;
    `;
		const badge = `%c${[tag, type$1].filter(Boolean).join(":")}`;
		if (typeof logObj.args[0] === "string") consoleLogFn(
			`${badge}%c ${logObj.args[0]}`,
			style,
			// Empty string as style resets to default console style
			"",
			...logObj.args.slice(1)
);
		else consoleLogFn(badge, style, ...logObj.args);
	}
};
function createConsola(options = {}) {
	const consola2 = createConsola$1({
		reporters: options.reporters || [new BrowserReporter({})],
		prompt(message, options2 = {}) {
			if (options2.type === "confirm") return Promise.resolve(confirm(message));
			return Promise.resolve(prompt(message));
		},
		...options
	});
	return consola2;
}
const consola = createConsola();

//#endregion
//#region node_modules/.pnpm/consola@3.4.2/node_modules/consola/dist/shared/consola.DXBYu-KD.mjs
const { env = {}, argv = [], platform = "" } = typeof process === "undefined" ? {} : process;
const isDisabled = "NO_COLOR" in env || argv.includes("--no-color");
const isForced = "FORCE_COLOR" in env || argv.includes("--color");
const isWindows = platform === "win32";
const isDumbTerminal = env.TERM === "dumb";
const isCompatibleTerminal = tty && tty.isatty && tty.isatty(1) && env.TERM && !isDumbTerminal;
const isCI = "CI" in env && ("GITHUB_ACTIONS" in env || "GITLAB_CI" in env || "CIRCLECI" in env);
const isColorSupported = !isDisabled && (isForced || isWindows && !isDumbTerminal || isCompatibleTerminal || isCI);
function replaceClose(index, string, close, replace, head = string.slice(0, Math.max(0, index)) + replace, tail = string.slice(Math.max(0, index + close.length)), next = tail.indexOf(close)) {
	return head + (next < 0 ? tail : replaceClose(next, tail, close, replace));
}
function clearBleed(index, string, open$1, close, replace) {
	return index < 0 ? open$1 + string + close : open$1 + replaceClose(index, string, close, replace) + close;
}
function filterEmpty(open$1, close, replace = open$1, at = open$1.length + 1) {
	return (string) => string || !(string === "" || string === void 0) ? clearBleed(("" + string).indexOf(close, at), string, open$1, close, replace) : "";
}
function init(open$1, close, replace) {
	return filterEmpty(`\x1B[${open$1}m`, `\x1B[${close}m`, replace);
}
const colorDefs = {
	reset: init(0, 0),
	bold: init(1, 22, "\x1B[22m\x1B[1m"),
	dim: init(2, 22, "\x1B[22m\x1B[2m"),
	italic: init(3, 23),
	underline: init(4, 24),
	inverse: init(7, 27),
	hidden: init(8, 28),
	strikethrough: init(9, 29),
	black: init(30, 39),
	red: init(31, 39),
	green: init(32, 39),
	yellow: init(33, 39),
	blue: init(34, 39),
	magenta: init(35, 39),
	cyan: init(36, 39),
	white: init(37, 39),
	gray: init(90, 39),
	bgBlack: init(40, 49),
	bgRed: init(41, 49),
	bgGreen: init(42, 49),
	bgYellow: init(43, 49),
	bgBlue: init(44, 49),
	bgMagenta: init(45, 49),
	bgCyan: init(46, 49),
	bgWhite: init(47, 49),
	blackBright: init(90, 39),
	redBright: init(91, 39),
	greenBright: init(92, 39),
	yellowBright: init(93, 39),
	blueBright: init(94, 39),
	magentaBright: init(95, 39),
	cyanBright: init(96, 39),
	whiteBright: init(97, 39),
	bgBlackBright: init(100, 49),
	bgRedBright: init(101, 49),
	bgGreenBright: init(102, 49),
	bgYellowBright: init(103, 49),
	bgBlueBright: init(104, 49),
	bgMagentaBright: init(105, 49),
	bgCyanBright: init(106, 49),
	bgWhiteBright: init(107, 49)
};
function createColors(useColor = isColorSupported) {
	return useColor ? colorDefs : Object.fromEntries(Object.keys(colorDefs).map((key) => [key, String]));
}
const colors$1 = createColors();
const ansiRegex = [String.raw`[\u001B\u009B][[\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\d\/#&.:=?%@~_]+)*|[a-zA-Z\d]+(?:;[-a-zA-Z\d\/#&.:=?%@~_]*)*)?\u0007)`, String.raw`(?:(?:\d{1,4}(?:;\d{0,4})*)?[\dA-PR-TZcf-nq-uy=><~]))`].join("|");

//#endregion
//#region node_modules/.pnpm/sisteransi@1.0.5/node_modules/sisteransi/src/index.js
var require_src = __commonJS({ "node_modules/.pnpm/sisteransi@1.0.5/node_modules/sisteransi/src/index.js"(exports, module) {
	const ESC = "\x1B";
	const CSI = `${ESC}[`;
	const beep = "\x07";
	const cursor = {
		to(x$3, y$2) {
			if (!y$2) return `${CSI}${x$3 + 1}G`;
			return `${CSI}${y$2 + 1};${x$3 + 1}H`;
		},
		move(x$3, y$2) {
			let ret = "";
			if (x$3 < 0) ret += `${CSI}${-x$3}D`;
			else if (x$3 > 0) ret += `${CSI}${x$3}C`;
			if (y$2 < 0) ret += `${CSI}${-y$2}A`;
			else if (y$2 > 0) ret += `${CSI}${y$2}B`;
			return ret;
		},
		up: (count = 1) => `${CSI}${count}A`,
		down: (count = 1) => `${CSI}${count}B`,
		forward: (count = 1) => `${CSI}${count}C`,
		backward: (count = 1) => `${CSI}${count}D`,
		nextLine: (count = 1) => `${CSI}E`.repeat(count),
		prevLine: (count = 1) => `${CSI}F`.repeat(count),
		left: `${CSI}G`,
		hide: `${CSI}?25l`,
		show: `${CSI}?25h`,
		save: `${ESC}7`,
		restore: `${ESC}8`
	};
	const scroll = {
		up: (count = 1) => `${CSI}S`.repeat(count),
		down: (count = 1) => `${CSI}T`.repeat(count)
	};
	const erase = {
		screen: `${CSI}2J`,
		up: (count = 1) => `${CSI}1J`.repeat(count),
		down: (count = 1) => `${CSI}J`.repeat(count),
		line: `${CSI}2K`,
		lineEnd: `${CSI}K`,
		lineStart: `${CSI}1K`,
		lines(count) {
			let clear = "";
			for (let i = 0; i < count; i++) clear += this.line + (i < count - 1 ? cursor.up() : "");
			if (count) clear += cursor.left;
			return clear;
		}
	};
	module.exports = {
		cursor,
		scroll,
		erase,
		beep
	};
} });

//#endregion
//#region node_modules/.pnpm/@clack+core@0.4.2/node_modules/@clack/core/dist/index.mjs
var import_src$1 = __toESM(require_src(), 1);
var import_picocolors_browser$2 = __toESM(require_picocolors_browser(), 1);
function DD({ onlyFirst: e$1 = !1 } = {}) {
	const t = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?(?:\\u0007|\\u001B\\u005C|\\u009C))", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|");
	return new RegExp(t, e$1 ? void 0 : "g");
}
const uD = DD();
function P$1(e$1) {
	if (typeof e$1 != "string") throw new TypeError(`Expected a \`string\`, got \`${typeof e$1}\``);
	return e$1.replace(uD, "");
}
function L$1(e$1) {
	return e$1 && e$1.__esModule && Object.prototype.hasOwnProperty.call(e$1, "default") ? e$1.default : e$1;
}
var W$1 = { exports: {} };
(function(e$1) {
	var u$1 = {};
	e$1.exports = u$1, u$1.eastAsianWidth = function(F$1) {
		var s = F$1.charCodeAt(0), i = F$1.length == 2 ? F$1.charCodeAt(1) : 0, D$1 = s;
		return 55296 <= s && s <= 56319 && 56320 <= i && i <= 57343 && (s &= 1023, i &= 1023, D$1 = s << 10 | i, D$1 += 65536), D$1 == 12288 || 65281 <= D$1 && D$1 <= 65376 || 65504 <= D$1 && D$1 <= 65510 ? "F" : D$1 == 8361 || 65377 <= D$1 && D$1 <= 65470 || 65474 <= D$1 && D$1 <= 65479 || 65482 <= D$1 && D$1 <= 65487 || 65490 <= D$1 && D$1 <= 65495 || 65498 <= D$1 && D$1 <= 65500 || 65512 <= D$1 && D$1 <= 65518 ? "H" : 4352 <= D$1 && D$1 <= 4447 || 4515 <= D$1 && D$1 <= 4519 || 4602 <= D$1 && D$1 <= 4607 || 9001 <= D$1 && D$1 <= 9002 || 11904 <= D$1 && D$1 <= 11929 || 11931 <= D$1 && D$1 <= 12019 || 12032 <= D$1 && D$1 <= 12245 || 12272 <= D$1 && D$1 <= 12283 || 12289 <= D$1 && D$1 <= 12350 || 12353 <= D$1 && D$1 <= 12438 || 12441 <= D$1 && D$1 <= 12543 || 12549 <= D$1 && D$1 <= 12589 || 12593 <= D$1 && D$1 <= 12686 || 12688 <= D$1 && D$1 <= 12730 || 12736 <= D$1 && D$1 <= 12771 || 12784 <= D$1 && D$1 <= 12830 || 12832 <= D$1 && D$1 <= 12871 || 12880 <= D$1 && D$1 <= 13054 || 13056 <= D$1 && D$1 <= 19903 || 19968 <= D$1 && D$1 <= 42124 || 42128 <= D$1 && D$1 <= 42182 || 43360 <= D$1 && D$1 <= 43388 || 44032 <= D$1 && D$1 <= 55203 || 55216 <= D$1 && D$1 <= 55238 || 55243 <= D$1 && D$1 <= 55291 || 63744 <= D$1 && D$1 <= 64255 || 65040 <= D$1 && D$1 <= 65049 || 65072 <= D$1 && D$1 <= 65106 || 65108 <= D$1 && D$1 <= 65126 || 65128 <= D$1 && D$1 <= 65131 || 110592 <= D$1 && D$1 <= 110593 || 127488 <= D$1 && D$1 <= 127490 || 127504 <= D$1 && D$1 <= 127546 || 127552 <= D$1 && D$1 <= 127560 || 127568 <= D$1 && D$1 <= 127569 || 131072 <= D$1 && D$1 <= 194367 || 177984 <= D$1 && D$1 <= 196605 || 196608 <= D$1 && D$1 <= 262141 ? "W" : 32 <= D$1 && D$1 <= 126 || 162 <= D$1 && D$1 <= 163 || 165 <= D$1 && D$1 <= 166 || D$1 == 172 || D$1 == 175 || 10214 <= D$1 && D$1 <= 10221 || 10629 <= D$1 && D$1 <= 10630 ? "Na" : D$1 == 161 || D$1 == 164 || 167 <= D$1 && D$1 <= 168 || D$1 == 170 || 173 <= D$1 && D$1 <= 174 || 176 <= D$1 && D$1 <= 180 || 182 <= D$1 && D$1 <= 186 || 188 <= D$1 && D$1 <= 191 || D$1 == 198 || D$1 == 208 || 215 <= D$1 && D$1 <= 216 || 222 <= D$1 && D$1 <= 225 || D$1 == 230 || 232 <= D$1 && D$1 <= 234 || 236 <= D$1 && D$1 <= 237 || D$1 == 240 || 242 <= D$1 && D$1 <= 243 || 247 <= D$1 && D$1 <= 250 || D$1 == 252 || D$1 == 254 || D$1 == 257 || D$1 == 273 || D$1 == 275 || D$1 == 283 || 294 <= D$1 && D$1 <= 295 || D$1 == 299 || 305 <= D$1 && D$1 <= 307 || D$1 == 312 || 319 <= D$1 && D$1 <= 322 || D$1 == 324 || 328 <= D$1 && D$1 <= 331 || D$1 == 333 || 338 <= D$1 && D$1 <= 339 || 358 <= D$1 && D$1 <= 359 || D$1 == 363 || D$1 == 462 || D$1 == 464 || D$1 == 466 || D$1 == 468 || D$1 == 470 || D$1 == 472 || D$1 == 474 || D$1 == 476 || D$1 == 593 || D$1 == 609 || D$1 == 708 || D$1 == 711 || 713 <= D$1 && D$1 <= 715 || D$1 == 717 || D$1 == 720 || 728 <= D$1 && D$1 <= 731 || D$1 == 733 || D$1 == 735 || 768 <= D$1 && D$1 <= 879 || 913 <= D$1 && D$1 <= 929 || 931 <= D$1 && D$1 <= 937 || 945 <= D$1 && D$1 <= 961 || 963 <= D$1 && D$1 <= 969 || D$1 == 1025 || 1040 <= D$1 && D$1 <= 1103 || D$1 == 1105 || D$1 == 8208 || 8211 <= D$1 && D$1 <= 8214 || 8216 <= D$1 && D$1 <= 8217 || 8220 <= D$1 && D$1 <= 8221 || 8224 <= D$1 && D$1 <= 8226 || 8228 <= D$1 && D$1 <= 8231 || D$1 == 8240 || 8242 <= D$1 && D$1 <= 8243 || D$1 == 8245 || D$1 == 8251 || D$1 == 8254 || D$1 == 8308 || D$1 == 8319 || 8321 <= D$1 && D$1 <= 8324 || D$1 == 8364 || D$1 == 8451 || D$1 == 8453 || D$1 == 8457 || D$1 == 8467 || D$1 == 8470 || 8481 <= D$1 && D$1 <= 8482 || D$1 == 8486 || D$1 == 8491 || 8531 <= D$1 && D$1 <= 8532 || 8539 <= D$1 && D$1 <= 8542 || 8544 <= D$1 && D$1 <= 8555 || 8560 <= D$1 && D$1 <= 8569 || D$1 == 8585 || 8592 <= D$1 && D$1 <= 8601 || 8632 <= D$1 && D$1 <= 8633 || D$1 == 8658 || D$1 == 8660 || D$1 == 8679 || D$1 == 8704 || 8706 <= D$1 && D$1 <= 8707 || 8711 <= D$1 && D$1 <= 8712 || D$1 == 8715 || D$1 == 8719 || D$1 == 8721 || D$1 == 8725 || D$1 == 8730 || 8733 <= D$1 && D$1 <= 8736 || D$1 == 8739 || D$1 == 8741 || 8743 <= D$1 && D$1 <= 8748 || D$1 == 8750 || 8756 <= D$1 && D$1 <= 8759 || 8764 <= D$1 && D$1 <= 8765 || D$1 == 8776 || D$1 == 8780 || D$1 == 8786 || 8800 <= D$1 && D$1 <= 8801 || 8804 <= D$1 && D$1 <= 8807 || 8810 <= D$1 && D$1 <= 8811 || 8814 <= D$1 && D$1 <= 8815 || 8834 <= D$1 && D$1 <= 8835 || 8838 <= D$1 && D$1 <= 8839 || D$1 == 8853 || D$1 == 8857 || D$1 == 8869 || D$1 == 8895 || D$1 == 8978 || 9312 <= D$1 && D$1 <= 9449 || 9451 <= D$1 && D$1 <= 9547 || 9552 <= D$1 && D$1 <= 9587 || 9600 <= D$1 && D$1 <= 9615 || 9618 <= D$1 && D$1 <= 9621 || 9632 <= D$1 && D$1 <= 9633 || 9635 <= D$1 && D$1 <= 9641 || 9650 <= D$1 && D$1 <= 9651 || 9654 <= D$1 && D$1 <= 9655 || 9660 <= D$1 && D$1 <= 9661 || 9664 <= D$1 && D$1 <= 9665 || 9670 <= D$1 && D$1 <= 9672 || D$1 == 9675 || 9678 <= D$1 && D$1 <= 9681 || 9698 <= D$1 && D$1 <= 9701 || D$1 == 9711 || 9733 <= D$1 && D$1 <= 9734 || D$1 == 9737 || 9742 <= D$1 && D$1 <= 9743 || 9748 <= D$1 && D$1 <= 9749 || D$1 == 9756 || D$1 == 9758 || D$1 == 9792 || D$1 == 9794 || 9824 <= D$1 && D$1 <= 9825 || 9827 <= D$1 && D$1 <= 9829 || 9831 <= D$1 && D$1 <= 9834 || 9836 <= D$1 && D$1 <= 9837 || D$1 == 9839 || 9886 <= D$1 && D$1 <= 9887 || 9918 <= D$1 && D$1 <= 9919 || 9924 <= D$1 && D$1 <= 9933 || 9935 <= D$1 && D$1 <= 9953 || D$1 == 9955 || 9960 <= D$1 && D$1 <= 9983 || D$1 == 10045 || D$1 == 10071 || 10102 <= D$1 && D$1 <= 10111 || 11093 <= D$1 && D$1 <= 11097 || 12872 <= D$1 && D$1 <= 12879 || 57344 <= D$1 && D$1 <= 63743 || 65024 <= D$1 && D$1 <= 65039 || D$1 == 65533 || 127232 <= D$1 && D$1 <= 127242 || 127248 <= D$1 && D$1 <= 127277 || 127280 <= D$1 && D$1 <= 127337 || 127344 <= D$1 && D$1 <= 127386 || 917760 <= D$1 && D$1 <= 917999 || 983040 <= D$1 && D$1 <= 1048573 || 1048576 <= D$1 && D$1 <= 1114109 ? "A" : "N";
	}, u$1.characterLength = function(F$1) {
		var s = this.eastAsianWidth(F$1);
		return s == "F" || s == "W" || s == "A" ? 2 : 1;
	};
	function t(F$1) {
		return F$1.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]|[^\uD800-\uDFFF]/g) || [];
	}
	u$1.length = function(F$1) {
		for (var s = t(F$1), i = 0, D$1 = 0; D$1 < s.length; D$1++) i = i + this.characterLength(s[D$1]);
		return i;
	}, u$1.slice = function(F$1, s, i) {
		textLen = u$1.length(F$1), s = s || 0, i = i || 1, s < 0 && (s = textLen + s), i < 0 && (i = textLen + i);
		for (var D$1 = "", r$1 = 0, n = t(F$1), E = 0; E < n.length; E++) {
			var a = n[E], o$1 = u$1.length(a);
			if (r$1 >= s - (o$1 == 2 ? 1 : 0)) if (r$1 + o$1 <= i) D$1 += a;
			else break;
			r$1 += o$1;
		}
		return D$1;
	};
})(W$1);
var tD = W$1.exports;
const eD = L$1(tD);
var FD = function() {
	return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};
const sD = L$1(FD);
function p(e$1, u$1 = {}) {
	if (typeof e$1 != "string" || e$1.length === 0 || (u$1 = {
		ambiguousIsNarrow: !0,
		...u$1
	}, e$1 = P$1(e$1), e$1.length === 0)) return 0;
	e$1 = e$1.replace(sD(), "  ");
	const t = u$1.ambiguousIsNarrow ? 1 : 2;
	let F$1 = 0;
	for (const s of e$1) {
		const i = s.codePointAt(0);
		if (i <= 31 || i >= 127 && i <= 159 || i >= 768 && i <= 879) continue;
		switch (eD.eastAsianWidth(s)) {
			case "F":
			case "W":
				F$1 += 2;
				break;
			case "A":
				F$1 += t;
				break;
			default: F$1 += 1;
		}
	}
	return F$1;
}
const w = 10, N = (e$1 = 0) => (u$1) => `\x1B[${u$1 + e$1}m`, I = (e$1 = 0) => (u$1) => `\x1B[${38 + e$1};5;${u$1}m`, R = (e$1 = 0) => (u$1, t, F$1) => `\x1B[${38 + e$1};2;${u$1};${t};${F$1}m`, C$1 = {
	modifier: {
		reset: [0, 0],
		bold: [1, 22],
		dim: [2, 22],
		italic: [3, 23],
		underline: [4, 24],
		overline: [53, 55],
		inverse: [7, 27],
		hidden: [8, 28],
		strikethrough: [9, 29]
	},
	color: {
		black: [30, 39],
		red: [31, 39],
		green: [32, 39],
		yellow: [33, 39],
		blue: [34, 39],
		magenta: [35, 39],
		cyan: [36, 39],
		white: [37, 39],
		blackBright: [90, 39],
		gray: [90, 39],
		grey: [90, 39],
		redBright: [91, 39],
		greenBright: [92, 39],
		yellowBright: [93, 39],
		blueBright: [94, 39],
		magentaBright: [95, 39],
		cyanBright: [96, 39],
		whiteBright: [97, 39]
	},
	bgColor: {
		bgBlack: [40, 49],
		bgRed: [41, 49],
		bgGreen: [42, 49],
		bgYellow: [43, 49],
		bgBlue: [44, 49],
		bgMagenta: [45, 49],
		bgCyan: [46, 49],
		bgWhite: [47, 49],
		bgBlackBright: [100, 49],
		bgGray: [100, 49],
		bgGrey: [100, 49],
		bgRedBright: [101, 49],
		bgGreenBright: [102, 49],
		bgYellowBright: [103, 49],
		bgBlueBright: [104, 49],
		bgMagentaBright: [105, 49],
		bgCyanBright: [106, 49],
		bgWhiteBright: [107, 49]
	}
};
Object.keys(C$1.modifier);
const iD = Object.keys(C$1.color), rD = Object.keys(C$1.bgColor);
[...iD, ...rD];
function CD() {
	const e$1 = new Map();
	for (const [u$1, t] of Object.entries(C$1)) {
		for (const [F$1, s] of Object.entries(t)) C$1[F$1] = {
			open: `\x1B[${s[0]}m`,
			close: `\x1B[${s[1]}m`
		}, t[F$1] = C$1[F$1], e$1.set(s[0], s[1]);
		Object.defineProperty(C$1, u$1, {
			value: t,
			enumerable: !1
		});
	}
	return Object.defineProperty(C$1, "codes", {
		value: e$1,
		enumerable: !1
	}), C$1.color.close = "\x1B[39m", C$1.bgColor.close = "\x1B[49m", C$1.color.ansi = N(), C$1.color.ansi256 = I(), C$1.color.ansi16m = R(), C$1.bgColor.ansi = N(w), C$1.bgColor.ansi256 = I(w), C$1.bgColor.ansi16m = R(w), Object.defineProperties(C$1, {
		rgbToAnsi256: {
			value: (u$1, t, F$1) => u$1 === t && t === F$1 ? u$1 < 8 ? 16 : u$1 > 248 ? 231 : Math.round((u$1 - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(u$1 / 255 * 5) + 6 * Math.round(t / 255 * 5) + Math.round(F$1 / 255 * 5),
			enumerable: !1
		},
		hexToRgb: {
			value: (u$1) => {
				const t = /[a-f\d]{6}|[a-f\d]{3}/i.exec(u$1.toString(16));
				if (!t) return [
					0,
					0,
					0
				];
				let [F$1] = t;
				F$1.length === 3 && (F$1 = [...F$1].map((i) => i + i).join(""));
				const s = Number.parseInt(F$1, 16);
				return [
					s >> 16 & 255,
					s >> 8 & 255,
					s & 255
				];
			},
			enumerable: !1
		},
		hexToAnsi256: {
			value: (u$1) => C$1.rgbToAnsi256(...C$1.hexToRgb(u$1)),
			enumerable: !1
		},
		ansi256ToAnsi: {
			value: (u$1) => {
				if (u$1 < 8) return 30 + u$1;
				if (u$1 < 16) return 90 + (u$1 - 8);
				let t, F$1, s;
				if (u$1 >= 232) t = ((u$1 - 232) * 10 + 8) / 255, F$1 = t, s = t;
				else {
					u$1 -= 16;
					const r$1 = u$1 % 36;
					t = Math.floor(u$1 / 36) / 5, F$1 = Math.floor(r$1 / 6) / 5, s = r$1 % 6 / 5;
				}
				const i = Math.max(t, F$1, s) * 2;
				if (i === 0) return 30;
				let D$1 = 30 + (Math.round(s) << 2 | Math.round(F$1) << 1 | Math.round(t));
				return i === 2 && (D$1 += 60), D$1;
			},
			enumerable: !1
		},
		rgbToAnsi: {
			value: (u$1, t, F$1) => C$1.ansi256ToAnsi(C$1.rgbToAnsi256(u$1, t, F$1)),
			enumerable: !1
		},
		hexToAnsi: {
			value: (u$1) => C$1.ansi256ToAnsi(C$1.hexToAnsi256(u$1)),
			enumerable: !1
		}
	}), C$1;
}
const ED = CD(), d$1 = new Set(["\x1B", ""]), oD = 39, y$1 = "\x07", V$1 = "[", nD = "]", G$1 = "m", _$1 = `${nD}8;;`, z = (e$1) => `${d$1.values().next().value}${V$1}${e$1}${G$1}`, K$1 = (e$1) => `${d$1.values().next().value}${_$1}${e$1}${y$1}`, aD = (e$1) => e$1.split(" ").map((u$1) => p(u$1)), k$1 = (e$1, u$1, t) => {
	const F$1 = [...u$1];
	let s = !1, i = !1, D$1 = p(P$1(e$1[e$1.length - 1]));
	for (const [r$1, n] of F$1.entries()) {
		const E = p(n);
		if (D$1 + E <= t ? e$1[e$1.length - 1] += n : (e$1.push(n), D$1 = 0), d$1.has(n) && (s = !0, i = F$1.slice(r$1 + 1).join("").startsWith(_$1)), s) {
			i ? n === y$1 && (s = !1, i = !1) : n === G$1 && (s = !1);
			continue;
		}
		D$1 += E, D$1 === t && r$1 < F$1.length - 1 && (e$1.push(""), D$1 = 0);
	}
	!D$1 && e$1[e$1.length - 1].length > 0 && e$1.length > 1 && (e$1[e$1.length - 2] += e$1.pop());
}, hD = (e$1) => {
	const u$1 = e$1.split(" ");
	let t = u$1.length;
	for (; t > 0 && !(p(u$1[t - 1]) > 0);) t--;
	return t === u$1.length ? e$1 : u$1.slice(0, t).join(" ") + u$1.slice(t).join("");
}, lD = (e$1, u$1, t = {}) => {
	if (t.trim !== !1 && e$1.trim() === "") return "";
	let F$1 = "", s, i;
	const D$1 = aD(e$1);
	let r$1 = [""];
	for (const [E, a] of e$1.split(" ").entries()) {
		t.trim !== !1 && (r$1[r$1.length - 1] = r$1[r$1.length - 1].trimStart());
		let o$1 = p(r$1[r$1.length - 1]);
		if (E !== 0 && (o$1 >= u$1 && (t.wordWrap === !1 || t.trim === !1) && (r$1.push(""), o$1 = 0), (o$1 > 0 || t.trim === !1) && (r$1[r$1.length - 1] += " ", o$1++)), t.hard && D$1[E] > u$1) {
			const c = u$1 - o$1, f = 1 + Math.floor((D$1[E] - c - 1) / u$1);
			Math.floor((D$1[E] - 1) / u$1) < f && r$1.push(""), k$1(r$1, a, u$1);
			continue;
		}
		if (o$1 + D$1[E] > u$1 && o$1 > 0 && D$1[E] > 0) {
			if (t.wordWrap === !1 && o$1 < u$1) {
				k$1(r$1, a, u$1);
				continue;
			}
			r$1.push("");
		}
		if (o$1 + D$1[E] > u$1 && t.wordWrap === !1) {
			k$1(r$1, a, u$1);
			continue;
		}
		r$1[r$1.length - 1] += a;
	}
	t.trim !== !1 && (r$1 = r$1.map((E) => hD(E)));
	const n = [...r$1.join(`
`)];
	for (const [E, a] of n.entries()) {
		if (F$1 += a, d$1.has(a)) {
			const { groups: c } = new RegExp(`(?:\\${V$1}(?<code>\\d+)m|\\${_$1}(?<uri>.*)${y$1})`).exec(n.slice(E).join("")) || { groups: {} };
			if (c.code !== void 0) {
				const f = Number.parseFloat(c.code);
				s = f === oD ? void 0 : f;
			} else c.uri !== void 0 && (i = c.uri.length === 0 ? void 0 : c.uri);
		}
		const o$1 = ED.codes.get(Number(s));
		n[E + 1] === `
` ? (i && (F$1 += K$1("")), s && o$1 && (F$1 += z(o$1))) : a === `
` && (s && o$1 && (F$1 += z(s)), i && (F$1 += K$1(i)));
	}
	return F$1;
};
function Y$1(e$1, u$1, t) {
	return String(e$1).normalize().replace(/\r\n/g, `
`).split(`
`).map((F$1) => lD(F$1, u$1, t)).join(`
`);
}
const xD = [
	"up",
	"down",
	"left",
	"right",
	"space",
	"enter",
	"cancel"
], B = {
	actions: new Set(xD),
	aliases: new Map([
		["k", "up"],
		["j", "down"],
		["h", "left"],
		["l", "right"],
		["", "cancel"],
		["escape", "cancel"]
	])
};
function $(e$1, u$1) {
	if (typeof e$1 == "string") return B.aliases.get(e$1) === u$1;
	for (const t of e$1) if (t !== void 0 && $(t, u$1)) return !0;
	return !1;
}
function BD(e$1, u$1) {
	if (e$1 === u$1) return;
	const t = e$1.split(`
`), F$1 = u$1.split(`
`), s = [];
	for (let i = 0; i < Math.max(t.length, F$1.length); i++) t[i] !== F$1[i] && s.push(i);
	return s;
}
const AD = globalThis.process.platform.startsWith("win"), S = Symbol("clack:cancel");
function pD(e$1) {
	return e$1 === S;
}
function m(e$1, u$1) {
	const t = e$1;
	t.isTTY && t.setRawMode(u$1);
}
function fD({ input: e$1 = stdin, output: u$1 = stdout, overwrite: t = !0, hideCursor: F$1 = !0 } = {}) {
	const s = g.createInterface({
		input: e$1,
		output: u$1,
		prompt: "",
		tabSize: 1
	});
	g.emitKeypressEvents(e$1, s), e$1.isTTY && e$1.setRawMode(!0);
	const i = (D$1, { name: r$1, sequence: n }) => {
		const E = String(D$1);
		if ($([
			E,
			r$1,
			n
		], "cancel")) {
			F$1 && u$1.write(import_src$1.cursor.show), process.exit(0);
			return;
		}
		if (!t) return;
		const a = r$1 === "return" ? 0 : -1, o$1 = r$1 === "return" ? -1 : 0;
		g.moveCursor(u$1, a, o$1, () => {
			g.clearLine(u$1, 1, () => {
				e$1.once("keypress", i);
			});
		});
	};
	return F$1 && u$1.write(import_src$1.cursor.hide), e$1.once("keypress", i), () => {
		e$1.off("keypress", i), F$1 && u$1.write(import_src$1.cursor.show), e$1.isTTY && !AD && e$1.setRawMode(!1), s.terminal = !1, s.close();
	};
}
var gD = Object.defineProperty, vD = (e$1, u$1, t) => u$1 in e$1 ? gD(e$1, u$1, {
	enumerable: !0,
	configurable: !0,
	writable: !0,
	value: t
}) : e$1[u$1] = t, h = (e$1, u$1, t) => (vD(e$1, typeof u$1 != "symbol" ? u$1 + "" : u$1, t), t);
var x$1 = class {
	constructor(u$1, t = !0) {
		h(this, "input"), h(this, "output"), h(this, "_abortSignal"), h(this, "rl"), h(this, "opts"), h(this, "_render"), h(this, "_track", !1), h(this, "_prevFrame", ""), h(this, "_subscribers", new Map()), h(this, "_cursor", 0), h(this, "state", "initial"), h(this, "error", ""), h(this, "value");
		const { input: F$1 = stdin, output: s = stdout, render: i, signal: D$1,...r$1 } = u$1;
		this.opts = r$1, this.onKeypress = this.onKeypress.bind(this), this.close = this.close.bind(this), this.render = this.render.bind(this), this._render = i.bind(this), this._track = t, this._abortSignal = D$1, this.input = F$1, this.output = s;
	}
	unsubscribe() {
		this._subscribers.clear();
	}
	setSubscriber(u$1, t) {
		const F$1 = this._subscribers.get(u$1) ?? [];
		F$1.push(t), this._subscribers.set(u$1, F$1);
	}
	on(u$1, t) {
		this.setSubscriber(u$1, { cb: t });
	}
	once(u$1, t) {
		this.setSubscriber(u$1, {
			cb: t,
			once: !0
		});
	}
	emit(u$1, ...t) {
		const F$1 = this._subscribers.get(u$1) ?? [], s = [];
		for (const i of F$1) i.cb(...t), i.once && s.push(() => F$1.splice(F$1.indexOf(i), 1));
		for (const i of s) i();
	}
	prompt() {
		return new Promise((u$1, t) => {
			if (this._abortSignal) {
				if (this._abortSignal.aborted) return this.state = "cancel", this.close(), u$1(S);
				this._abortSignal.addEventListener("abort", () => {
					this.state = "cancel", this.close();
				}, { once: !0 });
			}
			const F$1 = new Writable();
			F$1._write = (s, i, D$1) => {
				this._track && (this.value = this.rl?.line.replace(/\t/g, ""), this._cursor = this.rl?.cursor ?? 0, this.emit("value", this.value)), D$1();
			}, this.input.pipe(F$1), this.rl = O.createInterface({
				input: this.input,
				output: F$1,
				tabSize: 2,
				prompt: "",
				escapeCodeTimeout: 50,
				terminal: !0
			}), O.emitKeypressEvents(this.input, this.rl), this.rl.prompt(), this.opts.initialValue !== void 0 && this._track && this.rl.write(this.opts.initialValue), this.input.on("keypress", this.onKeypress), m(this.input, !0), this.output.on("resize", this.render), this.render(), this.once("submit", () => {
				this.output.write(import_src$1.cursor.show), this.output.off("resize", this.render), m(this.input, !1), u$1(this.value);
			}), this.once("cancel", () => {
				this.output.write(import_src$1.cursor.show), this.output.off("resize", this.render), m(this.input, !1), u$1(S);
			});
		});
	}
	onKeypress(u$1, t) {
		if (this.state === "error" && (this.state = "active"), t?.name && (!this._track && B.aliases.has(t.name) && this.emit("cursor", B.aliases.get(t.name)), B.actions.has(t.name) && this.emit("cursor", t.name)), u$1 && (u$1.toLowerCase() === "y" || u$1.toLowerCase() === "n") && this.emit("confirm", u$1.toLowerCase() === "y"), u$1 === "	" && this.opts.placeholder && (this.value || (this.rl?.write(this.opts.placeholder), this.emit("value", this.opts.placeholder))), u$1 && this.emit("key", u$1.toLowerCase()), t?.name === "return") {
			if (!this.value && this.opts.placeholder && (this.rl?.write(this.opts.placeholder), this.emit("value", this.opts.placeholder)), this.opts.validate) {
				const F$1 = this.opts.validate(this.value);
				F$1 && (this.error = F$1 instanceof Error ? F$1.message : F$1, this.state = "error", this.rl?.write(this.value));
			}
			this.state !== "error" && (this.state = "submit");
		}
		$([
			u$1,
			t?.name,
			t?.sequence
		], "cancel") && (this.state = "cancel"), (this.state === "submit" || this.state === "cancel") && this.emit("finalize"), this.render(), (this.state === "submit" || this.state === "cancel") && this.close();
	}
	close() {
		this.input.unpipe(), this.input.removeListener("keypress", this.onKeypress), this.output.write(`
`), m(this.input, !1), this.rl?.close(), this.rl = void 0, this.emit(`${this.state}`, this.value), this.unsubscribe();
	}
	restoreCursor() {
		const u$1 = Y$1(this._prevFrame, process.stdout.columns, { hard: !0 }).split(`
`).length - 1;
		this.output.write(import_src$1.cursor.move(-999, u$1 * -1));
	}
	render() {
		const u$1 = Y$1(this._render(this) ?? "", process.stdout.columns, { hard: !0 });
		if (u$1 !== this._prevFrame) {
			if (this.state === "initial") this.output.write(import_src$1.cursor.hide);
			else {
				const t = BD(this._prevFrame, u$1);
				if (this.restoreCursor(), t && t?.length === 1) {
					const F$1 = t[0];
					this.output.write(import_src$1.cursor.move(0, F$1)), this.output.write(import_src$1.erase.lines(1));
					const s = u$1.split(`
`);
					this.output.write(s[F$1]), this._prevFrame = u$1, this.output.write(import_src$1.cursor.move(0, s.length - F$1 - 1));
					return;
				}
				if (t && t?.length > 1) {
					const F$1 = t[0];
					this.output.write(import_src$1.cursor.move(0, F$1)), this.output.write(import_src$1.erase.down());
					const s = u$1.split(`
`).slice(F$1);
					this.output.write(s.join(`
`)), this._prevFrame = u$1;
					return;
				}
				this.output.write(import_src$1.erase.down());
			}
			this.output.write(u$1), this.state === "initial" && (this.state = "active"), this._prevFrame = u$1;
		}
	}
};
var dD = class extends x$1 {
	get cursor() {
		return this.value ? 0 : 1;
	}
	get _value() {
		return this.cursor === 0;
	}
	constructor(u$1) {
		super(u$1, !1), this.value = !!u$1.initialValue, this.on("value", () => {
			this.value = this._value;
		}), this.on("confirm", (t) => {
			this.output.write(import_src$1.cursor.move(0, -1)), this.value = t, this.state = "submit", this.close();
		}), this.on("cursor", () => {
			this.value = !this.value;
		});
	}
};
var mD = Object.defineProperty, bD = (e$1, u$1, t) => u$1 in e$1 ? mD(e$1, u$1, {
	enumerable: !0,
	configurable: !0,
	writable: !0,
	value: t
}) : e$1[u$1] = t, Z = (e$1, u$1, t) => (bD(e$1, typeof u$1 != "symbol" ? u$1 + "" : u$1, t), t), q$1 = (e$1, u$1, t) => {
	if (!u$1.has(e$1)) throw TypeError("Cannot " + t);
}, T$1 = (e$1, u$1, t) => (q$1(e$1, u$1, "read from private field"), t ? t.call(e$1) : u$1.get(e$1)), wD = (e$1, u$1, t) => {
	if (u$1.has(e$1)) throw TypeError("Cannot add the same private member more than once");
	u$1 instanceof WeakSet ? u$1.add(e$1) : u$1.set(e$1, t);
}, yD = (e$1, u$1, t, F$1) => (q$1(e$1, u$1, "write to private field"), F$1 ? F$1.call(e$1, t) : u$1.set(e$1, t), t), A$1;
let _D = class extends x$1 {
	constructor(u$1) {
		super(u$1, !1), Z(this, "options"), Z(this, "cursor", 0), wD(this, A$1, void 0);
		const { options: t } = u$1;
		yD(this, A$1, u$1.selectableGroups !== !1), this.options = Object.entries(t).flatMap(([F$1, s]) => [{
			value: F$1,
			group: !0,
			label: F$1
		}, ...s.map((i) => ({
			...i,
			group: F$1
		}))]), this.value = [...u$1.initialValues ?? []], this.cursor = Math.max(this.options.findIndex(({ value: F$1 }) => F$1 === u$1.cursorAt), T$1(this, A$1) ? 0 : 1), this.on("cursor", (F$1) => {
			switch (F$1) {
				case "left":
				case "up": {
					this.cursor = this.cursor === 0 ? this.options.length - 1 : this.cursor - 1;
					const s = this.options[this.cursor]?.group === !0;
					!T$1(this, A$1) && s && (this.cursor = this.cursor === 0 ? this.options.length - 1 : this.cursor - 1);
					break;
				}
				case "down":
				case "right": {
					this.cursor = this.cursor === this.options.length - 1 ? 0 : this.cursor + 1;
					const s = this.options[this.cursor]?.group === !0;
					!T$1(this, A$1) && s && (this.cursor = this.cursor === this.options.length - 1 ? 0 : this.cursor + 1);
					break;
				}
				case "space":
					this.toggleValue();
					break;
			}
		});
	}
	getGroupItems(u$1) {
		return this.options.filter((t) => t.group === u$1);
	}
	isGroupSelected(u$1) {
		return this.getGroupItems(u$1).every((t) => this.value.includes(t.value));
	}
	toggleValue() {
		const u$1 = this.options[this.cursor];
		if (u$1.group === !0) {
			const t = u$1.value, F$1 = this.getGroupItems(t);
			this.isGroupSelected(t) ? this.value = this.value.filter((s) => F$1.findIndex((i) => i.value === s) === -1) : this.value = [...this.value, ...F$1.map((s) => s.value)], this.value = Array.from(new Set(this.value));
		} else {
			const t = this.value.includes(u$1.value);
			this.value = t ? this.value.filter((F$1) => F$1 !== u$1.value) : [...this.value, u$1.value];
		}
	}
};
A$1 = new WeakMap();
var kD = Object.defineProperty, $D = (e$1, u$1, t) => u$1 in e$1 ? kD(e$1, u$1, {
	enumerable: !0,
	configurable: !0,
	writable: !0,
	value: t
}) : e$1[u$1] = t, H = (e$1, u$1, t) => ($D(e$1, typeof u$1 != "symbol" ? u$1 + "" : u$1, t), t);
let SD = class extends x$1 {
	constructor(u$1) {
		super(u$1, !1), H(this, "options"), H(this, "cursor", 0), this.options = u$1.options, this.value = [...u$1.initialValues ?? []], this.cursor = Math.max(this.options.findIndex(({ value: t }) => t === u$1.cursorAt), 0), this.on("key", (t) => {
			t === "a" && this.toggleAll();
		}), this.on("cursor", (t) => {
			switch (t) {
				case "left":
				case "up":
					this.cursor = this.cursor === 0 ? this.options.length - 1 : this.cursor - 1;
					break;
				case "down":
				case "right":
					this.cursor = this.cursor === this.options.length - 1 ? 0 : this.cursor + 1;
					break;
				case "space":
					this.toggleValue();
					break;
			}
		});
	}
	get _value() {
		return this.options[this.cursor].value;
	}
	toggleAll() {
		const u$1 = this.value.length === this.options.length;
		this.value = u$1 ? [] : this.options.map((t) => t.value);
	}
	toggleValue() {
		const u$1 = this.value.includes(this._value);
		this.value = u$1 ? this.value.filter((t) => t !== this._value) : [...this.value, this._value];
	}
};
var TD = Object.defineProperty, jD = (e$1, u$1, t) => u$1 in e$1 ? TD(e$1, u$1, {
	enumerable: !0,
	configurable: !0,
	writable: !0,
	value: t
}) : e$1[u$1] = t, U$1 = (e$1, u$1, t) => (jD(e$1, typeof u$1 != "symbol" ? u$1 + "" : u$1, t), t);
var MD = class extends x$1 {
	constructor({ mask: u$1,...t }) {
		super(t), U$1(this, "valueWithCursor", ""), U$1(this, "_mask", "•"), this._mask = u$1 ?? "•", this.on("finalize", () => {
			this.valueWithCursor = this.masked;
		}), this.on("value", () => {
			if (this.cursor >= this.value.length) this.valueWithCursor = `${this.masked}${import_picocolors_browser$2.default.inverse(import_picocolors_browser$2.default.hidden("_"))}`;
			else {
				const F$1 = this.masked.slice(0, this.cursor), s = this.masked.slice(this.cursor);
				this.valueWithCursor = `${F$1}${import_picocolors_browser$2.default.inverse(s[0])}${s.slice(1)}`;
			}
		});
	}
	get cursor() {
		return this._cursor;
	}
	get masked() {
		return this.value.replaceAll(/./g, this._mask);
	}
};
var OD = Object.defineProperty, PD = (e$1, u$1, t) => u$1 in e$1 ? OD(e$1, u$1, {
	enumerable: !0,
	configurable: !0,
	writable: !0,
	value: t
}) : e$1[u$1] = t, J$1 = (e$1, u$1, t) => (PD(e$1, typeof u$1 != "symbol" ? u$1 + "" : u$1, t), t);
var LD = class extends x$1 {
	constructor(u$1) {
		super(u$1, !1), J$1(this, "options"), J$1(this, "cursor", 0), this.options = u$1.options, this.cursor = this.options.findIndex(({ value: t }) => t === u$1.initialValue), this.cursor === -1 && (this.cursor = 0), this.changeValue(), this.on("cursor", (t) => {
			switch (t) {
				case "left":
				case "up":
					this.cursor = this.cursor === 0 ? this.options.length - 1 : this.cursor - 1;
					break;
				case "down":
				case "right":
					this.cursor = this.cursor === this.options.length - 1 ? 0 : this.cursor + 1;
					break;
			}
			this.changeValue();
		});
	}
	get _value() {
		return this.options[this.cursor];
	}
	changeValue() {
		this.value = this._value.value;
	}
};
var WD = Object.defineProperty, ND = (e$1, u$1, t) => u$1 in e$1 ? WD(e$1, u$1, {
	enumerable: !0,
	configurable: !0,
	writable: !0,
	value: t
}) : e$1[u$1] = t, Q = (e$1, u$1, t) => (ND(e$1, typeof u$1 != "symbol" ? u$1 + "" : u$1, t), t);
var ID = class extends x$1 {
	constructor(u$1) {
		super(u$1, !1), Q(this, "options"), Q(this, "cursor", 0), this.options = u$1.options;
		const t = this.options.map(({ value: [F$1] }) => F$1?.toLowerCase());
		this.cursor = Math.max(t.indexOf(u$1.initialValue), 0), this.on("key", (F$1) => {
			if (!t.includes(F$1)) return;
			const s = this.options.find(({ value: [i] }) => i?.toLowerCase() === F$1);
			s && (this.value = s.value, this.state = "submit", this.emit("submit"));
		});
	}
};
var RD = class extends x$1 {
	get valueWithCursor() {
		if (this.state === "submit") return this.value;
		if (this.cursor >= this.value.length) return `${this.value}\u2588`;
		const u$1 = this.value.slice(0, this.cursor), [t, ...F$1] = this.value.slice(this.cursor);
		return `${u$1}${import_picocolors_browser$2.default.inverse(t)}${F$1.join("")}`;
	}
	get cursor() {
		return this._cursor;
	}
	constructor(u$1) {
		super(u$1), this.on("finalize", () => {
			this.value || (this.value = u$1.defaultValue);
		});
	}
};

//#endregion
//#region node_modules/.pnpm/@clack+prompts@0.10.1/node_modules/@clack/prompts/dist/index.mjs
var import_picocolors_browser$1 = __toESM(require_picocolors_browser(), 1);
var import_src = __toESM(require_src(), 1);
function ce() {
	return y.platform !== "win32" ? y.env.TERM !== "linux" : !!y.env.CI || !!y.env.WT_SESSION || !!y.env.TERMINUS_SUBLIME || y.env.ConEmuTask === "{cmd::Cmder}" || y.env.TERM_PROGRAM === "Terminus-Sublime" || y.env.TERM_PROGRAM === "vscode" || y.env.TERM === "xterm-256color" || y.env.TERM === "alacritty" || y.env.TERMINAL_EMULATOR === "JetBrains-JediTerm";
}
const V = ce(), u = (t, n) => V ? t : n, le = u("◆", "*"), L = u("■", "x"), W = u("▲", "x"), C = u("◇", "o"), ue = u("┌", "T"), o = u("│", "|"), d = u("└", "—"), k = u("●", ">"), P = u("○", " "), A = u("◻", "[•]"), T = u("◼", "[+]"), F = u("◻", "[ ]"), $e = u("▪", "•"), _ = u("─", "-"), me = u("╮", "+"), de = u("├", "+"), pe = u("╯", "+"), q = u("●", "•"), D = u("◆", "*"), U = u("▲", "!"), K = u("■", "x"), b = (t) => {
	switch (t) {
		case "initial":
		case "active": return import_picocolors_browser$1.default.cyan(le);
		case "cancel": return import_picocolors_browser$1.default.red(L);
		case "error": return import_picocolors_browser$1.default.yellow(W);
		case "submit": return import_picocolors_browser$1.default.green(C);
	}
}, G = (t) => {
	const { cursor: n, options: r$1, style: i } = t, s = t.maxItems ?? Number.POSITIVE_INFINITY, c = Math.max(process.stdout.rows - 4, 0), a = Math.min(c, Math.max(s, 5));
	let l$1 = 0;
	n >= l$1 + a - 3 ? l$1 = Math.max(Math.min(n - a + 3, r$1.length - a), 0) : n < l$1 + 2 && (l$1 = Math.max(n - 2, 0));
	const $$1 = a < r$1.length && l$1 > 0, g$1 = a < r$1.length && l$1 + a < r$1.length;
	return r$1.slice(l$1, l$1 + a).map((p$1, v$1, f) => {
		const j = v$1 === 0 && $$1, E = v$1 === f.length - 1 && g$1;
		return j || E ? import_picocolors_browser$1.default.dim("...") : i(p$1, v$1 + l$1 === n);
	});
}, he = (t) => new RD({
	validate: t.validate,
	placeholder: t.placeholder,
	defaultValue: t.defaultValue,
	initialValue: t.initialValue,
	render() {
		const n = `${import_picocolors_browser$1.default.gray(o)}
${b(this.state)}  ${t.message}
`, r$1 = t.placeholder ? import_picocolors_browser$1.default.inverse(t.placeholder[0]) + import_picocolors_browser$1.default.dim(t.placeholder.slice(1)) : import_picocolors_browser$1.default.inverse(import_picocolors_browser$1.default.hidden("_")), i = this.value ? this.valueWithCursor : r$1;
		switch (this.state) {
			case "error": return `${n.trim()}
${import_picocolors_browser$1.default.yellow(o)}  ${i}
${import_picocolors_browser$1.default.yellow(d)}  ${import_picocolors_browser$1.default.yellow(this.error)}
`;
			case "submit": return `${n}${import_picocolors_browser$1.default.gray(o)}  ${import_picocolors_browser$1.default.dim(this.value || t.placeholder)}`;
			case "cancel": return `${n}${import_picocolors_browser$1.default.gray(o)}  ${import_picocolors_browser$1.default.strikethrough(import_picocolors_browser$1.default.dim(this.value ?? ""))}${this.value?.trim() ? `
${import_picocolors_browser$1.default.gray(o)}` : ""}`;
			default: return `${n}${import_picocolors_browser$1.default.cyan(o)}  ${i}
${import_picocolors_browser$1.default.cyan(d)}
`;
		}
	}
}).prompt(), ge = (t) => new MD({
	validate: t.validate,
	mask: t.mask ?? $e,
	render() {
		const n = `${import_picocolors_browser$1.default.gray(o)}
${b(this.state)}  ${t.message}
`, r$1 = this.valueWithCursor, i = this.masked;
		switch (this.state) {
			case "error": return `${n.trim()}
${import_picocolors_browser$1.default.yellow(o)}  ${i}
${import_picocolors_browser$1.default.yellow(d)}  ${import_picocolors_browser$1.default.yellow(this.error)}
`;
			case "submit": return `${n}${import_picocolors_browser$1.default.gray(o)}  ${import_picocolors_browser$1.default.dim(i)}`;
			case "cancel": return `${n}${import_picocolors_browser$1.default.gray(o)}  ${import_picocolors_browser$1.default.strikethrough(import_picocolors_browser$1.default.dim(i ?? ""))}${i ? `
${import_picocolors_browser$1.default.gray(o)}` : ""}`;
			default: return `${n}${import_picocolors_browser$1.default.cyan(o)}  ${r$1}
${import_picocolors_browser$1.default.cyan(d)}
`;
		}
	}
}).prompt(), ye = (t) => {
	const n = t.active ?? "Yes", r$1 = t.inactive ?? "No";
	return new dD({
		active: n,
		inactive: r$1,
		initialValue: t.initialValue ?? !0,
		render() {
			const i = `${import_picocolors_browser$1.default.gray(o)}
${b(this.state)}  ${t.message}
`, s = this.value ? n : r$1;
			switch (this.state) {
				case "submit": return `${i}${import_picocolors_browser$1.default.gray(o)}  ${import_picocolors_browser$1.default.dim(s)}`;
				case "cancel": return `${i}${import_picocolors_browser$1.default.gray(o)}  ${import_picocolors_browser$1.default.strikethrough(import_picocolors_browser$1.default.dim(s))}
${import_picocolors_browser$1.default.gray(o)}`;
				default: return `${i}${import_picocolors_browser$1.default.cyan(o)}  ${this.value ? `${import_picocolors_browser$1.default.green(k)} ${n}` : `${import_picocolors_browser$1.default.dim(P)} ${import_picocolors_browser$1.default.dim(n)}`} ${import_picocolors_browser$1.default.dim("/")} ${this.value ? `${import_picocolors_browser$1.default.dim(P)} ${import_picocolors_browser$1.default.dim(r$1)}` : `${import_picocolors_browser$1.default.green(k)} ${r$1}`}
${import_picocolors_browser$1.default.cyan(d)}
`;
			}
		}
	}).prompt();
}, ve = (t) => {
	const n = (r$1, i) => {
		const s = r$1.label ?? String(r$1.value);
		switch (i) {
			case "selected": return `${import_picocolors_browser$1.default.dim(s)}`;
			case "active": return `${import_picocolors_browser$1.default.green(k)} ${s} ${r$1.hint ? import_picocolors_browser$1.default.dim(`(${r$1.hint})`) : ""}`;
			case "cancelled": return `${import_picocolors_browser$1.default.strikethrough(import_picocolors_browser$1.default.dim(s))}`;
			default: return `${import_picocolors_browser$1.default.dim(P)} ${import_picocolors_browser$1.default.dim(s)}`;
		}
	};
	return new LD({
		options: t.options,
		initialValue: t.initialValue,
		render() {
			const r$1 = `${import_picocolors_browser$1.default.gray(o)}
${b(this.state)}  ${t.message}
`;
			switch (this.state) {
				case "submit": return `${r$1}${import_picocolors_browser$1.default.gray(o)}  ${n(this.options[this.cursor], "selected")}`;
				case "cancel": return `${r$1}${import_picocolors_browser$1.default.gray(o)}  ${n(this.options[this.cursor], "cancelled")}
${import_picocolors_browser$1.default.gray(o)}`;
				default: return `${r$1}${import_picocolors_browser$1.default.cyan(o)}  ${G({
					cursor: this.cursor,
					options: this.options,
					maxItems: t.maxItems,
					style: (i, s) => n(i, s ? "active" : "inactive")
				}).join(`
${import_picocolors_browser$1.default.cyan(o)}  `)}
${import_picocolors_browser$1.default.cyan(d)}
`;
			}
		}
	}).prompt();
}, we = (t) => {
	const n = (r$1, i = "inactive") => {
		const s = r$1.label ?? String(r$1.value);
		return i === "selected" ? `${import_picocolors_browser$1.default.dim(s)}` : i === "cancelled" ? `${import_picocolors_browser$1.default.strikethrough(import_picocolors_browser$1.default.dim(s))}` : i === "active" ? `${import_picocolors_browser$1.default.bgCyan(import_picocolors_browser$1.default.gray(` ${r$1.value} `))} ${s} ${r$1.hint ? import_picocolors_browser$1.default.dim(`(${r$1.hint})`) : ""}` : `${import_picocolors_browser$1.default.gray(import_picocolors_browser$1.default.bgWhite(import_picocolors_browser$1.default.inverse(` ${r$1.value} `)))} ${s} ${r$1.hint ? import_picocolors_browser$1.default.dim(`(${r$1.hint})`) : ""}`;
	};
	return new ID({
		options: t.options,
		initialValue: t.initialValue,
		render() {
			const r$1 = `${import_picocolors_browser$1.default.gray(o)}
${b(this.state)}  ${t.message}
`;
			switch (this.state) {
				case "submit": return `${r$1}${import_picocolors_browser$1.default.gray(o)}  ${n(this.options.find((i) => i.value === this.value) ?? t.options[0], "selected")}`;
				case "cancel": return `${r$1}${import_picocolors_browser$1.default.gray(o)}  ${n(this.options[0], "cancelled")}
${import_picocolors_browser$1.default.gray(o)}`;
				default: return `${r$1}${import_picocolors_browser$1.default.cyan(o)}  ${this.options.map((i, s) => n(i, s === this.cursor ? "active" : "inactive")).join(`
${import_picocolors_browser$1.default.cyan(o)}  `)}
${import_picocolors_browser$1.default.cyan(d)}
`;
			}
		}
	}).prompt();
}, fe = (t) => {
	const n = (r$1, i) => {
		const s = r$1.label ?? String(r$1.value);
		return i === "active" ? `${import_picocolors_browser$1.default.cyan(A)} ${s} ${r$1.hint ? import_picocolors_browser$1.default.dim(`(${r$1.hint})`) : ""}` : i === "selected" ? `${import_picocolors_browser$1.default.green(T)} ${import_picocolors_browser$1.default.dim(s)} ${r$1.hint ? import_picocolors_browser$1.default.dim(`(${r$1.hint})`) : ""}` : i === "cancelled" ? `${import_picocolors_browser$1.default.strikethrough(import_picocolors_browser$1.default.dim(s))}` : i === "active-selected" ? `${import_picocolors_browser$1.default.green(T)} ${s} ${r$1.hint ? import_picocolors_browser$1.default.dim(`(${r$1.hint})`) : ""}` : i === "submitted" ? `${import_picocolors_browser$1.default.dim(s)}` : `${import_picocolors_browser$1.default.dim(F)} ${import_picocolors_browser$1.default.dim(s)}`;
	};
	return new SD({
		options: t.options,
		initialValues: t.initialValues,
		required: t.required ?? !0,
		cursorAt: t.cursorAt,
		validate(r$1) {
			if (this.required && r$1.length === 0) return `Please select at least one option.
${import_picocolors_browser$1.default.reset(import_picocolors_browser$1.default.dim(`Press ${import_picocolors_browser$1.default.gray(import_picocolors_browser$1.default.bgWhite(import_picocolors_browser$1.default.inverse(" space ")))} to select, ${import_picocolors_browser$1.default.gray(import_picocolors_browser$1.default.bgWhite(import_picocolors_browser$1.default.inverse(" enter ")))} to submit`))}`;
		},
		render() {
			const r$1 = `${import_picocolors_browser$1.default.gray(o)}
${b(this.state)}  ${t.message}
`, i = (s, c) => {
				const a = this.value.includes(s.value);
				return c && a ? n(s, "active-selected") : a ? n(s, "selected") : n(s, c ? "active" : "inactive");
			};
			switch (this.state) {
				case "submit": return `${r$1}${import_picocolors_browser$1.default.gray(o)}  ${this.options.filter(({ value: s }) => this.value.includes(s)).map((s) => n(s, "submitted")).join(import_picocolors_browser$1.default.dim(", ")) || import_picocolors_browser$1.default.dim("none")}`;
				case "cancel": {
					const s = this.options.filter(({ value: c }) => this.value.includes(c)).map((c) => n(c, "cancelled")).join(import_picocolors_browser$1.default.dim(", "));
					return `${r$1}${import_picocolors_browser$1.default.gray(o)}  ${s.trim() ? `${s}
${import_picocolors_browser$1.default.gray(o)}` : ""}`;
				}
				case "error": {
					const s = this.error.split(`
`).map((c, a) => a === 0 ? `${import_picocolors_browser$1.default.yellow(d)}  ${import_picocolors_browser$1.default.yellow(c)}` : `   ${c}`).join(`
`);
					return `${r$1 + import_picocolors_browser$1.default.yellow(o)}  ${G({
						options: this.options,
						cursor: this.cursor,
						maxItems: t.maxItems,
						style: i
					}).join(`
${import_picocolors_browser$1.default.yellow(o)}  `)}
${s}
`;
				}
				default: return `${r$1}${import_picocolors_browser$1.default.cyan(o)}  ${G({
					options: this.options,
					cursor: this.cursor,
					maxItems: t.maxItems,
					style: i
				}).join(`
${import_picocolors_browser$1.default.cyan(o)}  `)}
${import_picocolors_browser$1.default.cyan(d)}
`;
			}
		}
	}).prompt();
}, be = (t) => {
	const { selectableGroups: n = !0 } = t, r$1 = (i, s, c = []) => {
		const a = i.label ?? String(i.value), l$1 = typeof i.group == "string", $$1 = l$1 && (c[c.indexOf(i) + 1] ?? { group: !0 }), g$1 = l$1 && $$1.group === !0, p$1 = l$1 ? n ? `${g$1 ? d : o} ` : "  " : "";
		if (s === "active") return `${import_picocolors_browser$1.default.dim(p$1)}${import_picocolors_browser$1.default.cyan(A)} ${a} ${i.hint ? import_picocolors_browser$1.default.dim(`(${i.hint})`) : ""}`;
		if (s === "group-active") return `${p$1}${import_picocolors_browser$1.default.cyan(A)} ${import_picocolors_browser$1.default.dim(a)}`;
		if (s === "group-active-selected") return `${p$1}${import_picocolors_browser$1.default.green(T)} ${import_picocolors_browser$1.default.dim(a)}`;
		if (s === "selected") {
			const f = l$1 || n ? import_picocolors_browser$1.default.green(T) : "";
			return `${import_picocolors_browser$1.default.dim(p$1)}${f} ${import_picocolors_browser$1.default.dim(a)} ${i.hint ? import_picocolors_browser$1.default.dim(`(${i.hint})`) : ""}`;
		}
		if (s === "cancelled") return `${import_picocolors_browser$1.default.strikethrough(import_picocolors_browser$1.default.dim(a))}`;
		if (s === "active-selected") return `${import_picocolors_browser$1.default.dim(p$1)}${import_picocolors_browser$1.default.green(T)} ${a} ${i.hint ? import_picocolors_browser$1.default.dim(`(${i.hint})`) : ""}`;
		if (s === "submitted") return `${import_picocolors_browser$1.default.dim(a)}`;
		const v$1 = l$1 || n ? import_picocolors_browser$1.default.dim(F) : "";
		return `${import_picocolors_browser$1.default.dim(p$1)}${v$1} ${import_picocolors_browser$1.default.dim(a)}`;
	};
	return new _D({
		options: t.options,
		initialValues: t.initialValues,
		required: t.required ?? !0,
		cursorAt: t.cursorAt,
		selectableGroups: n,
		validate(i) {
			if (this.required && i.length === 0) return `Please select at least one option.
${import_picocolors_browser$1.default.reset(import_picocolors_browser$1.default.dim(`Press ${import_picocolors_browser$1.default.gray(import_picocolors_browser$1.default.bgWhite(import_picocolors_browser$1.default.inverse(" space ")))} to select, ${import_picocolors_browser$1.default.gray(import_picocolors_browser$1.default.bgWhite(import_picocolors_browser$1.default.inverse(" enter ")))} to submit`))}`;
		},
		render() {
			const i = `${import_picocolors_browser$1.default.gray(o)}
${b(this.state)}  ${t.message}
`;
			switch (this.state) {
				case "submit": return `${i}${import_picocolors_browser$1.default.gray(o)}  ${this.options.filter(({ value: s }) => this.value.includes(s)).map((s) => r$1(s, "submitted")).join(import_picocolors_browser$1.default.dim(", "))}`;
				case "cancel": {
					const s = this.options.filter(({ value: c }) => this.value.includes(c)).map((c) => r$1(c, "cancelled")).join(import_picocolors_browser$1.default.dim(", "));
					return `${i}${import_picocolors_browser$1.default.gray(o)}  ${s.trim() ? `${s}
${import_picocolors_browser$1.default.gray(o)}` : ""}`;
				}
				case "error": {
					const s = this.error.split(`
`).map((c, a) => a === 0 ? `${import_picocolors_browser$1.default.yellow(d)}  ${import_picocolors_browser$1.default.yellow(c)}` : `   ${c}`).join(`
`);
					return `${i}${import_picocolors_browser$1.default.yellow(o)}  ${this.options.map((c, a, l$1) => {
						const $$1 = this.value.includes(c.value) || c.group === !0 && this.isGroupSelected(`${c.value}`), g$1 = a === this.cursor;
						return !g$1 && typeof c.group == "string" && this.options[this.cursor].value === c.group ? r$1(c, $$1 ? "group-active-selected" : "group-active", l$1) : g$1 && $$1 ? r$1(c, "active-selected", l$1) : $$1 ? r$1(c, "selected", l$1) : r$1(c, g$1 ? "active" : "inactive", l$1);
					}).join(`
${import_picocolors_browser$1.default.yellow(o)}  `)}
${s}
`;
				}
				default: return `${i}${import_picocolors_browser$1.default.cyan(o)}  ${this.options.map((s, c, a) => {
					const l$1 = this.value.includes(s.value) || s.group === !0 && this.isGroupSelected(`${s.value}`), $$1 = c === this.cursor;
					return !$$1 && typeof s.group == "string" && this.options[this.cursor].value === s.group ? r$1(s, l$1 ? "group-active-selected" : "group-active", a) : $$1 && l$1 ? r$1(s, "active-selected", a) : l$1 ? r$1(s, "selected", a) : r$1(s, $$1 ? "active" : "inactive", a);
				}).join(`
${import_picocolors_browser$1.default.cyan(o)}  `)}
${import_picocolors_browser$1.default.cyan(d)}
`;
			}
		}
	}).prompt();
}, Me = (t = "", n = "") => {
	const r$1 = `
${t}
`.split(`
`), i = stripVTControlCharacters(n).length, s = Math.max(r$1.reduce((a, l$1) => {
		const $$1 = stripVTControlCharacters(l$1);
		return $$1.length > a ? $$1.length : a;
	}, 0), i) + 2, c = r$1.map((a) => `${import_picocolors_browser$1.default.gray(o)}  ${import_picocolors_browser$1.default.dim(a)}${" ".repeat(s - stripVTControlCharacters(a).length)}${import_picocolors_browser$1.default.gray(o)}`).join(`
`);
	process.stdout.write(`${import_picocolors_browser$1.default.gray(o)}
${import_picocolors_browser$1.default.green(C)}  ${import_picocolors_browser$1.default.reset(n)} ${import_picocolors_browser$1.default.gray(_.repeat(Math.max(s - i - 1, 1)) + me)}
${c}
${import_picocolors_browser$1.default.gray(de + _.repeat(s + 2) + pe)}
`);
}, xe = (t = "") => {
	process.stdout.write(`${import_picocolors_browser$1.default.gray(d)}  ${import_picocolors_browser$1.default.red(t)}

`);
}, Ie = (t = "") => {
	process.stdout.write(`${import_picocolors_browser$1.default.gray(ue)}  ${t}
`);
}, Se = (t = "") => {
	process.stdout.write(`${import_picocolors_browser$1.default.gray(o)}
${import_picocolors_browser$1.default.gray(d)}  ${t}

`);
}, M = {
	message: (t = "", { symbol: n = import_picocolors_browser$1.default.gray(o) } = {}) => {
		const r$1 = [`${import_picocolors_browser$1.default.gray(o)}`];
		if (t) {
			const [i, ...s] = t.split(`
`);
			r$1.push(`${n}  ${i}`, ...s.map((c) => `${import_picocolors_browser$1.default.gray(o)}  ${c}`));
		}
		process.stdout.write(`${r$1.join(`
`)}
`);
	},
	info: (t) => {
		M.message(t, { symbol: import_picocolors_browser$1.default.blue(q) });
	},
	success: (t) => {
		M.message(t, { symbol: import_picocolors_browser$1.default.green(D) });
	},
	step: (t) => {
		M.message(t, { symbol: import_picocolors_browser$1.default.green(C) });
	},
	warn: (t) => {
		M.message(t, { symbol: import_picocolors_browser$1.default.yellow(U) });
	},
	warning: (t) => {
		M.warn(t);
	},
	error: (t) => {
		M.message(t, { symbol: import_picocolors_browser$1.default.red(K) });
	}
}, J = `${import_picocolors_browser$1.default.gray(o)}  `, x = {
	message: async (t, { symbol: n = import_picocolors_browser$1.default.gray(o) } = {}) => {
		process.stdout.write(`${import_picocolors_browser$1.default.gray(o)}
${n}  `);
		let r$1 = 3;
		for await (let i of t) {
			i = i.replace(/\n/g, `
${J}`), i.includes(`
`) && (r$1 = 3 + stripVTControlCharacters(i.slice(i.lastIndexOf(`
`))).length);
			const s = stripVTControlCharacters(i).length;
			r$1 + s < process.stdout.columns ? (r$1 += s, process.stdout.write(i)) : (process.stdout.write(`
${J}${i.trimStart()}`), r$1 = 3 + stripVTControlCharacters(i.trimStart()).length);
		}
		process.stdout.write(`
`);
	},
	info: (t) => x.message(t, { symbol: import_picocolors_browser$1.default.blue(q) }),
	success: (t) => x.message(t, { symbol: import_picocolors_browser$1.default.green(D) }),
	step: (t) => x.message(t, { symbol: import_picocolors_browser$1.default.green(C) }),
	warn: (t) => x.message(t, { symbol: import_picocolors_browser$1.default.yellow(U) }),
	warning: (t) => x.warn(t),
	error: (t) => x.message(t, { symbol: import_picocolors_browser$1.default.red(K) })
}, Y = ({ indicator: t = "dots" } = {}) => {
	const n = V ? [
		"◒",
		"◐",
		"◓",
		"◑"
	] : [
		"•",
		"o",
		"O",
		"0"
	], r$1 = V ? 80 : 120, i = process.env.CI === "true";
	let s, c, a = !1, l$1 = "", $$1, g$1 = performance.now();
	const p$1 = (m$1) => {
		const h$1 = m$1 > 1 ? "Something went wrong" : "Canceled";
		a && N$1(h$1, m$1);
	}, v$1 = () => p$1(2), f = () => p$1(1), j = () => {
		process.on("uncaughtExceptionMonitor", v$1), process.on("unhandledRejection", v$1), process.on("SIGINT", f), process.on("SIGTERM", f), process.on("exit", p$1);
	}, E = () => {
		process.removeListener("uncaughtExceptionMonitor", v$1), process.removeListener("unhandledRejection", v$1), process.removeListener("SIGINT", f), process.removeListener("SIGTERM", f), process.removeListener("exit", p$1);
	}, B$1 = () => {
		if ($$1 === void 0) return;
		i && process.stdout.write(`
`);
		const m$1 = $$1.split(`
`);
		process.stdout.write(import_src.cursor.move(-999, m$1.length - 1)), process.stdout.write(import_src.erase.down(m$1.length));
	}, R$1 = (m$1) => m$1.replace(/\.+$/, ""), O$1 = (m$1) => {
		const h$1 = (performance.now() - m$1) / 1e3, w$1 = Math.floor(h$1 / 60), I$1 = Math.floor(h$1 % 60);
		return w$1 > 0 ? `[${w$1}m ${I$1}s]` : `[${I$1}s]`;
	}, H$1 = (m$1 = "") => {
		a = !0, s = fD(), l$1 = R$1(m$1), g$1 = performance.now(), process.stdout.write(`${import_picocolors_browser$1.default.gray(o)}
`);
		let h$1 = 0, w$1 = 0;
		j(), c = setInterval(() => {
			if (i && l$1 === $$1) return;
			B$1(), $$1 = l$1;
			const I$1 = import_picocolors_browser$1.default.magenta(n[h$1]);
			if (i) process.stdout.write(`${I$1}  ${l$1}...`);
			else if (t === "timer") process.stdout.write(`${I$1}  ${l$1} ${O$1(g$1)}`);
			else {
				const z$1 = ".".repeat(Math.floor(w$1)).slice(0, 3);
				process.stdout.write(`${I$1}  ${l$1}${z$1}`);
			}
			h$1 = h$1 + 1 < n.length ? h$1 + 1 : 0, w$1 = w$1 < n.length ? w$1 + .125 : 0;
		}, r$1);
	}, N$1 = (m$1 = "", h$1 = 0) => {
		a = !1, clearInterval(c), B$1();
		const w$1 = h$1 === 0 ? import_picocolors_browser$1.default.green(C) : h$1 === 1 ? import_picocolors_browser$1.default.red(L) : import_picocolors_browser$1.default.red(W);
		l$1 = R$1(m$1 ?? l$1), t === "timer" ? process.stdout.write(`${w$1}  ${l$1} ${O$1(g$1)}
`) : process.stdout.write(`${w$1}  ${l$1}
`), E(), s();
	};
	return {
		start: H$1,
		stop: N$1,
		message: (m$1 = "") => {
			l$1 = R$1(m$1 ?? l$1);
		}
	};
}, Ce = async (t, n) => {
	const r$1 = {}, i = Object.keys(t);
	for (const s of i) {
		const c = t[s], a = await c({ results: r$1 })?.catch((l$1) => {
			throw l$1;
		});
		if (typeof n?.onCancel == "function" && pD(a)) {
			r$1[s] = "canceled", n.onCancel({ results: r$1 });
			continue;
		}
		r$1[s] = a;
	}
	return r$1;
}, Te = async (t) => {
	for (const n of t) {
		if (n.enabled === !1) continue;
		const r$1 = Y();
		r$1.start(n.title);
		const i = await n.task(r$1.message);
		r$1.stop(i || n.title);
	}
};

//#endregion
//#region node_modules/.pnpm/nuxthub@https+++pkg.pr.new+nuxt-hub+cli+nuxthub@56/node_modules/nuxthub/src/utils/data.mjs
const $api = ofetch.create({
	baseURL: joinURL(NUXT_HUB_URL, "/api"),
	onRequest({ request: request$1, options }) {
		if (!options.headers.has("Authorization")) options.headers.set("Authorization", `Bearer ${loadUserConfig().hub?.userToken || process.env.NUXT_HUB_USER_TOKEN || ""}`);
		consola.debug(`Fetching \`${joinURL(options.baseURL, request$1)}\``);
	},
	onResponseError(ctx) {
		consola.debug(`Error when fetching \`${ctx.request}\``);
		if (ctx.response._data?.message) ctx.error = new Error(`- ${ctx.response._data.message}`);
		if (ctx.response._data?.data) consola.debug(ctx.response._data?.data);
	}
});

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/lib/reader.js
var require_reader = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/lib/reader.js"(exports, module) {
	/**
	* [Reader description]
	* @param {[type]} buffer [description]
	* @param {[type]} offset [description]
	*/
	function BufferReader$1(buffer, offset) {
		this.buffer = buffer;
		this.offset = offset || 0;
		return this;
	}
	/**
	* [read description]
	* @param  {[type]} buffer [description]
	* @param  {[type]} offset [description]
	* @param  {[type]} length [description]
	* @return {[type]}        [description]
	*/
	BufferReader$1.read = function(buffer, offset, length) {
		let a = [];
		let c = Math.ceil(length / 8);
		let l$1 = Math.floor(offset / 8);
		const m$1 = offset % 8;
		function t(n) {
			const r$1 = [
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0
			];
			for (let i = 7; i >= 0; i--) r$1[7 - i] = n & Math.pow(2, i) ? 1 : 0;
			a = a.concat(r$1);
		}
		function p$1(a$1) {
			let n = 0;
			const f = a$1.length - 1;
			for (let i = f; i >= 0; i--) if (a$1[f - i]) n += Math.pow(2, i);
			return n;
		}
		while (c--) t(buffer.readUInt8(l$1++));
		return p$1(a.slice(m$1, m$1 + length));
	};
	/**
	* [read description]
	* @param  {[type]} size [description]
	* @return {[type]}      [description]
	*/
	BufferReader$1.prototype.read = function(size) {
		const val = BufferReader$1.read(this.buffer, this.offset, size);
		this.offset += size;
		return val;
	};
	module.exports = BufferReader$1;
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/lib/writer.js
var require_writer = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/lib/writer.js"(exports, module) {
	/**
	* [Writer description]
	*/
	function BufferWriter$1() {
		this.buffer = [];
	}
	/**
	* [write description]
	* @param  {[type]} d    [description]
	* @param  {[type]} size [description]
	* @return {[type]}      [description]
	*/
	BufferWriter$1.prototype.write = function(d$2, size) {
		for (let i = 0; i < size; i++) this.buffer.push(d$2 & Math.pow(2, size - i - 1) ? 1 : 0);
	};
	/**
	* [writeBuffer description]
	* @param {[type]} b [description]
	*/
	BufferWriter$1.prototype.writeBuffer = function(b$2) {
		this.buffer = this.buffer.concat(b$2.buffer);
	};
	/**
	* [toBuffer description]
	* @return {[type]} [description]
	*/
	BufferWriter$1.prototype.toBuffer = function() {
		const arr = [];
		for (let i = 0; i < this.buffer.length; i += 8) {
			const chunk = this.buffer.slice(i, i + 8);
			arr.push(parseInt(chunk.join(""), 2));
		}
		return Buffer.from(arr);
	};
	module.exports = BufferWriter$1;
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/packet.js
var require_packet = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/packet.js"(exports, module) {
	const { debuglog: debuglog$2 } = __require("util");
	const BufferReader = require_reader();
	const BufferWriter = require_writer();
	const debug$2 = debuglog$2("dns2");
	const toIPv6 = (buffer) => buffer.map((part) => part > 0 ? part.toString(16) : "0").join(":").replace(/\b(?:0+:){1,}/, ":");
	const fromIPv6 = (address) => {
		const digits = address.split(":");
		if (digits[0] === "") digits.shift();
		if (digits[digits.length - 1] === "") digits.pop();
		const missingFields = 8 - digits.length + 1;
		return digits.flatMap((digit) => {
			if (digit === "") return Array(missingFields).fill("0");
			return digit.padStart(4, "0");
		});
	};
	/**
	* [Packet description]
	* @param {[type]} data [description]
	* @docs https://tools.ietf.org/html/rfc1034
	* @docs https://tools.ietf.org/html/rfc1035
	*
	* <Buffer 29 64 01 00 00 01 00 00 00 00 00 00
	*       |-ID----------- HEADER ----------->|
	*
	*  03 77 77 77 01 7a 02 63 6e 00 00 01 00 01>
	*   <-W--W--W-----Z-----C--N>|<----------->|
	*/
	function Packet$6(data) {
		this.header = {};
		this.questions = [];
		this.answers = [];
		this.authorities = [];
		this.additionals = [];
		if (data instanceof Packet$6) return data;
		else if (data instanceof Packet$6.Header) this.header = data;
		else if (data instanceof Packet$6.Question) this.questions.push(data);
		else if (data instanceof Packet$6.Resource) this.answers.push(data);
		else if (typeof data === "string") this.questions.push(data);
		else if (typeof data === "object") {
			const type$1 = {}.toString.call(data).match(/\[object (\w+)\]/)[1];
			if (type$1 === "Array") this.questions = data;
			if (type$1 === "Object") this.header = data;
		}
		return this;
	}
	/**
	* [QUERY_TYPE description]
	* @type {Object}
	* @docs https://tools.ietf.org/html/rfc1035#section-3.2.2
	*/
	Packet$6.TYPE = {
		A: 1,
		NS: 2,
		MD: 3,
		MF: 4,
		CNAME: 5,
		SOA: 6,
		MB: 7,
		MG: 8,
		MR: 9,
		NULL: 10,
		WKS: 11,
		PTR: 12,
		HINFO: 13,
		MINFO: 14,
		MX: 15,
		TXT: 16,
		AAAA: 28,
		SRV: 33,
		EDNS: 41,
		SPF: 99,
		AXFR: 252,
		MAILB: 253,
		MAILA: 254,
		ANY: 255,
		CAA: 257
	};
	/**
	* [QUERY_CLASS description]
	* @type {Object}
	* @docs https://tools.ietf.org/html/rfc1035#section-3.2.4
	*/
	Packet$6.CLASS = {
		IN: 1,
		CS: 2,
		CH: 3,
		HS: 4,
		ANY: 255
	};
	/**
	* [EDNS_OPTION_CODE description]
	* @type {Object}
	* @docs https://tools.ietf.org/html/rfc6891#section-6.1.2
	*/
	Packet$6.EDNS_OPTION_CODE = { ECS: 8 };
	/**
	* [uuid description]
	* @return {[type]} [description]
	*/
	Packet$6.uuid = function() {
		return Math.floor(Math.random() * 1e5);
	};
	/**
	* [parse description]
	* @param  {[type]} buffer [description]
	* @return {[type]}        [description]
	*/
	Packet$6.parse = function(buffer) {
		const packet = new Packet$6();
		const reader = new Packet$6.Reader(buffer);
		packet.header = Packet$6.Header.parse(reader);
		[
			[
				"questions",
				Packet$6.Question,
				packet.header.qdcount
			],
			[
				"answers",
				Packet$6.Resource,
				packet.header.ancount
			],
			[
				"authorities",
				Packet$6.Resource,
				packet.header.nscount
			],
			[
				"additionals",
				Packet$6.Resource,
				packet.header.arcount
			]
		].forEach(function(def) {
			const section = def[0];
			const decoder = def[1];
			let count = def[2];
			while (count--) try {
				packet[section] = packet[section] || [];
				packet[section].push(decoder.parse(reader));
			} catch (e$1) {
				debug$2("node-dns > parse %s error:", section, e$1.message);
			}
		});
		return packet;
	};
	/**
	* recursive
	*/
	Object.defineProperty(Packet$6.prototype, "recursive", {
		enumerable: true,
		configurable: true,
		get() {
			return !!this.header.rd;
		},
		set(yn) {
			this.header.rd = +yn;
			return this.header.rd;
		}
	});
	/**
	* [toBuffer description]
	* @return {[type]} [description]
	*/
	Packet$6.prototype.toBuffer = function(writer) {
		writer = writer || new Packet$6.Writer();
		this.header.qdcount = this.questions.length;
		this.header.ancount = this.answers.length;
		this.header.nscount = this.authorities.length;
		this.header.arcount = this.additionals.length;
		if (!(this instanceof Packet$6.Header)) this.header = new Packet$6.Header(this.header);
		this.header.toBuffer(writer);
		[
			["questions", Packet$6.Question],
			["answers", Packet$6.Resource],
			["authorities", Packet$6.Resource],
			["additionals", Packet$6.Resource]
		].forEach(function(def) {
			const section = def[0];
			const Encoder = def[1];
			(this[section] || []).map(function(resource) {
				return Encoder.encode(resource, writer);
			});
		}.bind(this));
		return writer.toBuffer();
	};
	/**
	* [Header description]
	* @param {[type]} options [description]
	* @docs https://tools.ietf.org/html/rfc1035#section-4.1.1
	*/
	Packet$6.Header = function(header) {
		this.id = 0;
		this.qr = 0;
		this.opcode = 0;
		this.aa = 0;
		this.tc = 0;
		this.rd = 0;
		this.ra = 0;
		this.z = 0;
		this.rcode = 0;
		this.qdcount = 0;
		this.nscount = 0;
		this.arcount = 0;
		for (const k$2 in header) this[k$2] = header[k$2];
		return this;
	};
	/**
	* [parse description]
	* @param  {[type]} buffer [description]
	* @return {[type]}        [description]
	* @docs https://tools.ietf.org/html/rfc1035#section-4.1.1
	*/
	Packet$6.Header.parse = function(reader) {
		const header = new Packet$6.Header();
		if (reader instanceof Buffer) reader = new Packet$6.Reader(reader);
		header.id = reader.read(16);
		header.qr = reader.read(1);
		header.opcode = reader.read(4);
		header.aa = reader.read(1);
		header.tc = reader.read(1);
		header.rd = reader.read(1);
		header.ra = reader.read(1);
		header.z = reader.read(3);
		header.rcode = reader.read(4);
		header.qdcount = reader.read(16);
		header.ancount = reader.read(16);
		header.nscount = reader.read(16);
		header.arcount = reader.read(16);
		return header;
	};
	/**
	* [toBuffer description]
	* @return {[type]} [description]
	*/
	Packet$6.Header.prototype.toBuffer = function(writer) {
		writer = writer || new Packet$6.Writer();
		writer.write(this.id, 16);
		writer.write(this.qr, 1);
		writer.write(this.opcode, 4);
		writer.write(this.aa, 1);
		writer.write(this.tc, 1);
		writer.write(this.rd, 1);
		writer.write(this.ra, 1);
		writer.write(this.z, 3);
		writer.write(this.rcode, 4);
		writer.write(this.qdcount, 16);
		writer.write(this.ancount, 16);
		writer.write(this.nscount, 16);
		writer.write(this.arcount, 16);
		return writer.toBuffer();
	};
	/**
	* Question section format
	* @docs https://tools.ietf.org/html/rfc1035#section-4.1.2
	*/
	Packet$6.Question = function(name, type$1, cls) {
		const defaults$1 = {
			type: Packet$6.TYPE.ANY,
			class: Packet$6.CLASS.ANY
		};
		if (typeof name === "object") for (const k$2 in name) this[k$2] = name[k$2] || defaults$1[k$2];
		else {
			this.name = name;
			this.type = type$1 || defaults$1.type;
			this.class = cls || defaults$1.class;
		}
		return this;
	};
	/**
	* [toBuffer description]
	* @param  {[type]} writer [description]
	* @return {[type]}        [description]
	*/
	Packet$6.Question.prototype.toBuffer = function(writer) {
		return Packet$6.Question.encode(this, writer);
	};
	/**
	* [parse description]
	* @param  {[type]} reader [description]
	* @return {[type]}        [description]
	*/
	Packet$6.Question.parse = Packet$6.Question.decode = function(reader) {
		const question = new Packet$6.Question();
		if (reader instanceof Buffer) reader = new Packet$6.Reader(reader);
		question.name = Packet$6.Name.decode(reader);
		question.type = reader.read(16);
		question.class = reader.read(16);
		return question;
	};
	Packet$6.Question.encode = function(question, writer) {
		writer = writer || new Packet$6.Writer();
		Packet$6.Name.encode(question.name, writer);
		writer.write(question.type, 16);
		writer.write(question.class, 16);
		return writer.toBuffer();
	};
	/**
	* Resource record format
	* @docs https://tools.ietf.org/html/rfc1035#section-4.1.3
	*/
	Packet$6.Resource = function(name, type$1, cls, ttl) {
		const defaults$1 = {
			name: "",
			ttl: 300,
			type: Packet$6.TYPE.ANY,
			class: Packet$6.CLASS.ANY
		};
		let input;
		if (typeof name === "object") input = name;
		else input = {
			name,
			type: type$1,
			class: cls,
			ttl
		};
		Object.assign(this, defaults$1, input);
		return this;
	};
	/**
	* [toBuffer description]
	* @param  {[type]} writer [description]
	* @return {[type]}        [description]
	*/
	Packet$6.Resource.prototype.toBuffer = function(writer) {
		return Packet$6.Resource.encode(this, writer);
	};
	/**
	* [encode description]
	* @param  {[type]} resource [description]
	* @param  {[type]} writer   [description]
	* @return {[type]}          [description]
	*/
	Packet$6.Resource.encode = function(resource, writer) {
		writer = writer || new Packet$6.Writer();
		Packet$6.Name.encode(resource.name, writer);
		writer.write(resource.type, 16);
		writer.write(resource.class, 16);
		writer.write(resource.ttl, 32);
		const encoder$2 = Object.keys(Packet$6.TYPE).filter(function(type$1) {
			return resource.type === Packet$6.TYPE[type$1];
		})[0];
		if (encoder$2 in Packet$6.Resource && Packet$6.Resource[encoder$2].encode) return Packet$6.Resource[encoder$2].encode(resource, writer);
		else debug$2("node-dns > unknown encoder %s(%j)", encoder$2, resource.type);
	};
	/**
	* [parse description]
	* @param  {[type]} reader [description]
	* @return {[type]}        [description]
	*/
	Packet$6.Resource.parse = Packet$6.Resource.decode = function(reader) {
		if (reader instanceof Buffer) reader = new Packet$6.Reader(reader);
		let resource = new Packet$6.Resource();
		resource.name = Packet$6.Name.decode(reader);
		resource.type = reader.read(16);
		resource.class = reader.read(16);
		resource.ttl = reader.read(32);
		let length = reader.read(16);
		const parser = Object.keys(Packet$6.TYPE).filter(function(type$1) {
			return resource.type === Packet$6.TYPE[type$1];
		})[0];
		if (parser in Packet$6.Resource) resource = Packet$6.Resource[parser].decode.call(resource, reader, length);
		else {
			debug$2("node-dns > unknown parser type: %s(%j)", parser, resource.type);
			const arr = [];
			while (length--) arr.push(reader.read(8));
			resource.data = Buffer.from(arr);
		}
		return resource;
	};
	/**
	* [encode_name description]
	* @param  {[type]} domain [description]
	* @return {[type]}        [description]
	*/
	Packet$6.Name = {
		COPY: 192,
		decode: function(reader) {
			if (reader instanceof Buffer) reader = new Packet$6.Reader(reader);
			const name = [];
			let o$1;
			let len = reader.read(8);
			while (len) if ((len & Packet$6.Name.COPY) === Packet$6.Name.COPY) {
				len -= Packet$6.Name.COPY;
				len = len << 8;
				const pos = len + reader.read(8);
				if (!o$1) o$1 = reader.offset;
				reader.offset = pos * 8;
				len = reader.read(8);
				continue;
			} else {
				let part = "";
				while (len--) part += String.fromCharCode(reader.read(8));
				name.push(part);
				len = reader.read(8);
			}
			if (o$1) reader.offset = o$1;
			return name.join(".");
		},
		encode: function(domain, writer) {
			writer = writer || new Packet$6.Writer();
			(domain || "").split(".").filter(function(part) {
				return !!part;
			}).forEach(function(part) {
				writer.write(part.length, 8);
				part.split("").map(function(c) {
					writer.write(c.charCodeAt(0), 8);
					return c.charCodeAt(0);
				});
			});
			writer.write(0, 8);
			return writer.toBuffer();
		}
	};
	/**
	* [A description]
	* @type {Object}
	* @docs https://tools.ietf.org/html/rfc1035#section-3.4.1
	*/
	Packet$6.Resource.A = function(address) {
		this.type = Packet$6.TYPE.A;
		this.class = Packet$6.CLASS.IN;
		this.address = address;
		return this;
	};
	Packet$6.Resource.A.encode = function(record, writer) {
		writer = writer || new Packet$6.Writer();
		const parts = record.address.split(".");
		writer.write(parts.length, 16);
		parts.forEach(function(part) {
			writer.write(parseInt(part, 10), 8);
		});
		return writer.toBuffer();
	};
	Packet$6.Resource.A.decode = function(reader, length) {
		const parts = [];
		while (length--) parts.push(reader.read(8));
		this.address = parts.join(".");
		return this;
	};
	/**
	* [MX description]
	* @param {[type]} exchange [description]
	* @param {[type]} priority [description]
	* @docs https://tools.ietf.org/html/rfc1035#section-3.3.9
	*/
	Packet$6.Resource.MX = function(exchange, priority) {
		this.type = Packet$6.TYPE.MX;
		this.class = Packet$6.CLASS.IN;
		this.exchange = exchange;
		this.priority = priority;
		return this;
	};
	/**
	* [encode description]
	* @param  {[type]} record [description]
	* @param  {[type]} writer [description]
	* @return {[type]}        [description]
	*/
	Packet$6.Resource.MX.encode = function(record, writer) {
		writer = writer || new Packet$6.Writer();
		const len = Packet$6.Name.encode(record.exchange).length;
		writer.write(len + 2, 16);
		writer.write(record.priority, 16);
		Packet$6.Name.encode(record.exchange, writer);
		return writer.toBuffer();
	};
	/**
	* [decode description]
	* @param  {[type]} reader [description]
	* @param  {[type]} length [description]
	* @return {[type]}        [description]
	*/
	Packet$6.Resource.MX.decode = function(reader, length) {
		this.priority = reader.read(16);
		this.exchange = Packet$6.Name.decode(reader);
		return this;
	};
	/**
	* [AAAA description]
	* @type {Object}
	* @docs https://en.wikipedia.org/wiki/IPv6
	*/
	Packet$6.Resource.AAAA = {
		decode: function(reader, length) {
			const parts = [];
			while (length) {
				length -= 2;
				parts.push(reader.read(16));
			}
			this.address = toIPv6(parts);
			return this;
		},
		encode: function(record, writer) {
			writer = writer || new Packet$6.Writer();
			const parts = fromIPv6(record.address);
			writer.write(parts.length * 2, 16);
			parts.forEach(function(part) {
				writer.write(parseInt(part, 16), 16);
			});
			return writer.toBuffer();
		}
	};
	/**
	* [NS description]
	* @type {Object}
	* @docs https://tools.ietf.org/html/rfc1035#section-3.3.11
	*/
	Packet$6.Resource.NS = {
		decode: function(reader, length) {
			this.ns = Packet$6.Name.decode(reader);
			return this;
		},
		encode: function(record, writer) {
			writer = writer || new Packet$6.Writer();
			writer.write(Packet$6.Name.encode(record.ns).length, 16);
			Packet$6.Name.encode(record.ns, writer);
			return writer.toBuffer();
		}
	};
	/**
	* [CNAME description]
	* @type {Object}
	* @docs https://tools.ietf.org/html/rfc1035#section-3.3.1
	*/
	Packet$6.Resource.PTR = Packet$6.Resource.CNAME = {
		decode: function(reader, length) {
			this.domain = Packet$6.Name.decode(reader);
			return this;
		},
		encode: function(record, writer) {
			writer = writer || new Packet$6.Writer();
			writer.write(Packet$6.Name.encode(record.domain).length, 16);
			Packet$6.Name.encode(record.domain, writer);
			return writer.toBuffer();
		}
	};
	/**
	* [SPF description]
	* @type {[type]}
	* @docs https://tools.ietf.org/html/rfc1035#section-3.3.14
	*/
	Packet$6.Resource.SPF = Packet$6.Resource.TXT = {
		decode: function(reader, length) {
			const parts = [];
			let bytesRead = 0;
			let chunkLength = 0;
			while (bytesRead < length) {
				chunkLength = reader.read(8);
				bytesRead++;
				while (chunkLength--) {
					parts.push(reader.read(8));
					bytesRead++;
				}
			}
			this.data = Buffer.from(parts).toString("utf8");
			return this;
		},
		encode: function(record, writer) {
			writer = writer || new Packet$6.Writer();
			const characterStrings = Array.isArray(record.data) ? record.data : [record.data];
			const characterStringBuffers = characterStrings.map(function(characterString) {
				if (Buffer.isBuffer(characterString)) return characterString;
				if (typeof characterString === "string") return Buffer.from(characterString, "utf8");
				return false;
			}).filter(function(characterString) {
				return characterString;
			});
			const bufferLength = characterStringBuffers.reduce(function(sum, characterStringBuffer) {
				return sum + characterStringBuffer.length;
			}, 0);
			writer.write(bufferLength + characterStringBuffers.length, 16);
			characterStringBuffers.forEach(function(buffer) {
				writer.write(buffer.length, 8);
				buffer.forEach(function(c) {
					writer.write(c, 8);
				});
			});
			return writer.toBuffer();
		}
	};
	/**
	* [SOA description]
	* @type {Object}
	* @docs https://tools.ietf.org/html/rfc1035#section-3.3.13
	*/
	Packet$6.Resource.SOA = {
		decode: function(reader, length) {
			this.primary = Packet$6.Name.decode(reader);
			this.admin = Packet$6.Name.decode(reader);
			this.serial = reader.read(32);
			this.refresh = reader.read(32);
			this.retry = reader.read(32);
			this.expiration = reader.read(32);
			this.minimum = reader.read(32);
			return this;
		},
		encode: function(record, writer) {
			writer = writer || new Packet$6.Writer();
			let len = 0;
			len += Packet$6.Name.encode(record.primary).length;
			len += Packet$6.Name.encode(record.admin).length;
			len += 32 * 5 / 8;
			writer.write(len, 16);
			Packet$6.Name.encode(record.primary, writer);
			Packet$6.Name.encode(record.admin, writer);
			writer.write(record.serial, 32);
			writer.write(record.refresh, 32);
			writer.write(record.retry, 32);
			writer.write(record.expiration, 32);
			writer.write(record.minimum, 32);
			return writer.toBuffer();
		}
	};
	/**
	* [SRV description]
	* @type {Object}
	* @docs https://tools.ietf.org/html/rfc2782
	*/
	Packet$6.Resource.SRV = {
		decode: function(reader, length) {
			this.priority = reader.read(16);
			this.weight = reader.read(16);
			this.port = reader.read(16);
			this.target = Packet$6.Name.decode(reader);
			return this;
		},
		encode: function(record, writer) {
			writer = writer || new Packet$6.Writer();
			const { length } = Packet$6.Name.encode(record.target);
			writer.write(length + 6, 16);
			writer.write(record.priority, 16);
			writer.write(record.weight, 16);
			writer.write(record.port, 16);
			Packet$6.Name.encode(record.target, writer);
			return writer.toBuffer();
		}
	};
	Packet$6.Resource.EDNS = function(rdata) {
		return {
			type: Packet$6.TYPE.EDNS,
			class: 512,
			ttl: 0,
			rdata
		};
	};
	Packet$6.Resource.EDNS.decode = function(reader, length) {
		this.type = Packet$6.TYPE.EDNS;
		this.class = 512;
		this.ttl = 0;
		this.rdata = [];
		while (length) {
			const optionCode = reader.read(16);
			const optionLength = reader.read(16);
			const decoder = Object.keys(Packet$6.EDNS_OPTION_CODE).filter(function(type$1) {
				return optionCode === Packet$6.EDNS_OPTION_CODE[type$1];
			})[0];
			if (decoder in Packet$6.Resource.EDNS && Packet$6.Resource.EDNS[decoder].decode) {
				const rdata = Packet$6.Resource.EDNS[decoder].decode(reader, optionLength);
				this.rdata.push(rdata);
			} else {
				reader.read(optionLength);
				debug$2("node-dns > unknown EDNS rdata decoder %s(%j)", decoder, optionCode);
			}
			length = length - 4 - optionLength;
		}
		return this;
	};
	Packet$6.Resource.EDNS.encode = function(record, writer) {
		const rdataWriter = new Packet$6.Writer();
		for (const rdata of record.rdata) {
			const encoder$2 = Object.keys(Packet$6.EDNS_OPTION_CODE).filter(function(type$1) {
				return rdata.ednsCode === Packet$6.EDNS_OPTION_CODE[type$1];
			})[0];
			if (encoder$2 in Packet$6.Resource.EDNS && Packet$6.Resource.EDNS[encoder$2].encode) {
				const w$1 = new Packet$6.Writer();
				Packet$6.Resource.EDNS[encoder$2].encode(rdata, w$1);
				rdataWriter.write(rdata.ednsCode, 16);
				rdataWriter.write(w$1.buffer.length / 8, 16);
				rdataWriter.writeBuffer(w$1);
			} else debug$2("node-dns > unknown EDNS rdata encoder %s(%j)", encoder$2, rdata.ednsCode);
		}
		writer = writer || new Packet$6.Writer();
		writer.write(rdataWriter.buffer.length / 8, 16);
		writer.writeBuffer(rdataWriter);
		return writer.toBuffer();
	};
	Packet$6.Resource.EDNS.ECS = function(clientIp) {
		const [ip, prefixLength] = clientIp.split("/");
		const numPrefixLength = parseInt(prefixLength) || 32;
		return {
			ednsCode: Packet$6.EDNS_OPTION_CODE.ECS,
			family: 1,
			sourcePrefixLength: numPrefixLength,
			scopePrefixLength: 0,
			ip
		};
	};
	Packet$6.Resource.EDNS.ECS.decode = function(reader, length) {
		const rdata = {};
		rdata.ednsCode = Packet$6.EDNS_OPTION_CODE.ECS;
		rdata.family = reader.read(16);
		rdata.sourcePrefixLength = reader.read(8);
		rdata.scopePrefixLength = reader.read(8);
		length -= 4;
		if (rdata.family !== 1) {
			debug$2("node-dns > unimplemented address family");
			reader.read(length * 8);
			return rdata;
		}
		const ipv4Octets = [];
		while (length--) {
			const octet = reader.read(8);
			ipv4Octets.push(octet);
		}
		while (ipv4Octets.length < 4) ipv4Octets.push(0);
		rdata.ip = ipv4Octets.join(".");
		return rdata;
	};
	Packet$6.Resource.EDNS.ECS.encode = function(record, writer) {
		const ip = record.ip.split(".").map((s) => parseInt(s));
		writer.write(record.family, 16);
		writer.write(record.sourcePrefixLength, 8);
		writer.write(record.scopePrefixLength, 8);
		writer.write(ip[0], 8);
		writer.write(ip[1], 8);
		writer.write(ip[2], 8);
		writer.write(ip[3], 8);
	};
	Packet$6.Resource.CAA = { encode: function(record, writer) {
		writer = writer || new Packet$6.Writer();
		const buffer = Buffer.from(record.tag + record.value, "utf8");
		writer.write(2 + buffer.length, 16);
		writer.write(record.flags, 8);
		writer.write(record.tag.length, 8);
		buffer.forEach(function(c) {
			writer.write(c, 8);
		});
		return writer.toBuffer();
	} };
	Packet$6.Reader = BufferReader;
	Packet$6.Writer = BufferWriter;
	Packet$6.createResponseFromRequest = function(request$1) {
		const response = new Packet$6(request$1);
		response.header.qr = 1;
		response.additionals = [];
		return response;
	};
	Packet$6.createResourceFromQuestion = function(base, record) {
		const resource = new Packet$6.Resource(base);
		Object.assign(resource, record);
		return resource;
	};
	Packet$6.readStream = (socket) => {
		let chunks = [];
		let chunklen = 0;
		let received = false;
		let expected = false;
		return new Promise((resolve$1, reject) => {
			const processMessage = () => {
				if (received) return;
				received = true;
				const buffer = Buffer.concat(chunks, chunklen);
				resolve$1(buffer.slice(2));
			};
			socket.on("end", processMessage);
			socket.on("error", reject);
			socket.on("readable", () => {
				let chunk;
				while ((chunk = socket.read()) !== null) {
					chunks.push(chunk);
					chunklen += chunk.length;
				}
				if (!expected && chunklen >= 2) {
					if (chunks.length > 1) chunks = [Buffer.concat(chunks, chunklen)];
					expected = chunks[0].readUInt16BE(0);
				}
				if (chunklen >= 2 + expected) processMessage();
			});
		});
	};
	/**
	* DoH
	* @docs https://tools.ietf.org/html/rfc8484
	*/
	Packet$6.prototype.toBase64URL = function() {
		const buffer = this.toBuffer();
		const base64 = buffer.toString("base64");
		return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
	};
	module.exports = Packet$6;
	module.exports.toIPv6 = toIPv6;
	module.exports.fromIPv6 = fromIPv6;
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/udp.js
var require_udp$1 = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/udp.js"(exports, module) {
	const udp$1 = __require("dgram");
	const Packet$5 = require_packet();
	/**
	* [Server description]
	* @docs https://tools.ietf.org/html/rfc1034
	* @docs https://tools.ietf.org/html/rfc1035
	*/
	var Server$2 = class extends udp$1.Socket {
		constructor(options) {
			let type$1 = "udp4";
			if (typeof options === "object") type$1 = options.type;
			super(type$1);
			if (typeof options === "function") this.on("request", options);
			this.on("message", this.handle.bind(this));
		}
		handle(data, rinfo) {
			try {
				const message = Packet$5.parse(data);
				this.emit("request", message, this.response.bind(this, rinfo), rinfo);
			} catch (e$1) {
				this.emit("requestError", e$1);
			}
		}
		response(rinfo, message) {
			if (message instanceof Packet$5) message = message.toBuffer();
			return new Promise((resolve$1, reject) => {
				this.send(message, rinfo.port, rinfo.address, (err) => {
					if (err) return reject(err);
					resolve$1(message);
				});
			});
		}
		listen(port, address) {
			return new Promise((resolve$1) => this.bind(port, address, resolve$1));
		}
	};
	module.exports = Server$2;
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/tcp.js
var require_tcp$1 = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/tcp.js"(exports, module) {
	const tcp$1 = __require("net");
	const Packet$4 = require_packet();
	var Server$1 = class extends tcp$1.Server {
		constructor(options) {
			super();
			if (typeof options === "function") this.on("request", options);
			this.on("connection", this.handle.bind(this));
		}
		async handle(client) {
			try {
				const data = await Packet$4.readStream(client);
				const message = Packet$4.parse(data);
				this.emit("request", message, this.response.bind(this, client), client);
			} catch (e$1) {
				this.emit("requestError", e$1);
				client.destroy();
			}
		}
		response(client, message) {
			if (message instanceof Packet$4) message = message.toBuffer();
			const len = Buffer.alloc(2);
			len.writeUInt16BE(message.length);
			client.end(Buffer.concat([len, message]));
		}
	};
	module.exports = Server$1;
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/doh.js
var require_doh$1 = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/doh.js"(exports, module) {
	const http = __require("http");
	const https$1 = __require("https");
	const { URL: URL$1 } = __require("url");
	const Packet$3 = require_packet();
	const EventEmitter$3 = __require("events");
	const { debuglog: debuglog$1 } = __require("util");
	const debug$1 = debuglog$1("dns2-server");
	const decodeBase64URL = (str) => {
		let queryData = str.replace(/-/g, "+").replace(/_/g, "/");
		const pad = queryData.length % 4;
		if (pad === 1) return;
		if (pad) queryData += new Array(5 - pad).join("=");
		return queryData;
	};
	const readStream$2 = (stream$2) => new Promise((resolve$1, reject) => {
		let buffer = "";
		stream$2.on("error", reject).on("data", (chunk) => {
			buffer += chunk;
		}).on("end", () => resolve$1(buffer));
	});
	var Server = class extends EventEmitter$3 {
		constructor(options) {
			super();
			const { ssl } = Object.assign(this, { cors: true }, options);
			this.server = (ssl ? https$1.createServer(options) : http.createServer()).on("request", this.handleRequest.bind(this)).on("listening", () => this.emit("listening", this.address())).on("error", (error$1) => this.emit("error", error$1)).on("close", () => {
				this.server.removeAllListeners();
				this.emit("close");
			});
			return this;
		}
		async handleRequest(client, res) {
			try {
				const { method, url, headers } = client;
				const { pathname, searchParams: query } = new URL$1(url, "http://unused/");
				const { cors } = this;
				if (cors === true) res.setHeader("Access-Control-Allow-Origin", "*");
				else if (typeof cors === "string") {
					res.setHeader("Access-Control-Allow-Origin", cors);
					res.setHeader("Vary", "Origin");
				} else if (typeof cors === "function") {
					const isAllowed = cors(headers.origin);
					res.setHeader("Access-Control-Allow-Origin", isAllowed ? headers.origin : "false");
					res.setHeader("Vary", "Origin");
				}
				debug$1("request", method, url);
				if (method !== "GET" && method !== "POST") {
					res.writeHead(405, { "Content-Type": "text/plain" });
					res.write("405 Method not allowed\n");
					res.end();
					return;
				}
				if (pathname !== "/dns-query") {
					res.writeHead(404, { "Content-Type": "text/plain" });
					res.write("404 Not Found\n");
					res.end();
					return;
				}
				const contentType = headers.accept;
				if (contentType !== "application/dns-message") {
					res.writeHead(400, { "Content-Type": "text/plain" });
					res.write("400 Bad Request: Illegal content type\n");
					res.end();
					return;
				}
				let queryData;
				if (method === "GET") {
					const dns = query.get("dns");
					if (!dns) {
						res.writeHead(400, { "Content-Type": "text/plain" });
						res.write("400 Bad Request: No query defined\n");
						res.end();
						return;
					}
					const base64 = decodeBase64URL(dns);
					if (!base64) {
						res.writeHead(400, { "Content-Type": "text/plain" });
						res.write("400 Bad Request: Invalid query data\n");
						res.end();
						return;
					}
					queryData = Buffer.from(base64, "base64");
				} else if (method === "POST") queryData = await readStream$2(client);
				const message = Packet$3.parse(queryData);
				this.emit("request", message, this.response.bind(this, res), client);
			} catch (e$1) {
				this.emit("requestError", e$1);
				res.destroy();
			}
		}
		/**
		* Send of the response to the client
		* @param {*} res
		* @param {*} message
		*/
		response(res, message) {
			debug$1("response");
			res.setHeader("Content-Type", "application/dns-message");
			res.writeHead(200);
			res.end(message.toBuffer());
		}
		/**
		* listen
		* @param {*} port
		* @returns
		*/
		listen(port, address) {
			return this.server.listen(port || this.port, address);
		}
		address() {
			return this.server.address();
		}
		close() {
			return this.server.close();
		}
	};
	module.exports = Server;
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/dns.js
var require_dns = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/dns.js"(exports, module) {
	const EventEmitter$2 = __require("events");
	const DOHServer$2 = require_doh$1();
	const TCPServer$2 = require_tcp$1();
	const UDPServer$2 = require_udp$1();
	var DNSServer$1 = class extends EventEmitter$2 {
		constructor(options = {}) {
			super();
			this.servers = {};
			if (options.doh) this.servers.doh = new DOHServer$2(options.doh).on("error", (error$1) => this.emit("error", error$1, "doh"));
			if (options.tcp) this.servers.tcp = new TCPServer$2().on("error", (error$1) => this.emit("error", error$1, "tcp"));
			if (options.udp) this.servers.udp = new UDPServer$2(typeof options.udp === "object" ? options.udp : void 0).on("error", (error$1) => this.emit("error", error$1, "udp"));
			const servers = Object.values(this.servers);
			this.closed = Promise.all(servers.map((server) => new Promise((resolve$1) => server.once("close", resolve$1)))).then(() => {
				this.emit("close");
			});
			this.listening = Promise.all(servers.map((server) => new Promise((resolve$1) => server.once("listening", resolve$1)))).then(() => {
				const addresses = this.addresses();
				this.emit("listening", addresses);
				return addresses;
			});
			const emitRequest = (request$1, send, client) => this.emit("request", request$1, send, client);
			const emitRequestError = (error$1) => this.emit("requestError", error$1);
			for (const server of servers) {
				server.on("request", emitRequest);
				server.on("requestError", emitRequestError);
			}
			if (options.handle) this.on("request", options.handle.bind(options));
		}
		addresses() {
			const addresses = {};
			const { udp: udp$2, tcp: tcp$2, doh } = this.servers;
			if (udp$2) addresses.udp = udp$2.address();
			if (tcp$2) addresses.tcp = tcp$2.address();
			if (doh) addresses.doh = doh.address();
			return addresses;
		}
		listen(options = {}) {
			for (const serverType of Object.keys(this.servers)) {
				const server = this.servers[serverType];
				const serverOptions = options[serverType];
				if (serverOptions && serverOptions.port) server.listen(serverOptions.port, serverOptions.address);
				else server.listen(serverOptions);
			}
			return this.listening;
		}
		close() {
			const { doh, udp: udp$2, tcp: tcp$2 } = this.servers;
			if (udp$2) udp$2.close();
			if (tcp$2) tcp$2.close();
			if (doh) doh.close();
			return this.closed;
		}
	};
	module.exports = DNSServer$1;
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/index.js
var require_server = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/server/index.js"(exports, module) {
	const UDPServer$1 = require_udp$1();
	const TCPServer$1 = require_tcp$1();
	const DOHServer$1 = require_doh$1();
	const DNSServer = require_dns();
	const createUDPServer$1 = (options) => {
		return new UDPServer$1(options);
	};
	const createTCPServer$1 = (options) => {
		return new TCPServer$1(options);
	};
	const createDOHServer$1 = (options) => {
		return new DOHServer$1(options);
	};
	const createServer$1 = (options) => {
		return new DNSServer(options);
	};
	module.exports = {
		UDPServer: UDPServer$1,
		TCPServer: TCPServer$1,
		DOHServer: DOHServer$1,
		DNSServer,
		createTCPServer: createTCPServer$1,
		createUDPServer: createUDPServer$1,
		createDOHServer: createDOHServer$1,
		createServer: createServer$1
	};
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/client/tcp.js
var require_tcp = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/client/tcp.js"(exports, module) {
	const tcp = __require("net");
	const Packet$2 = require_packet();
	module.exports = ({ dns = "1.1.1.1", port = 53 } = {}) => {
		return async (name, type$1 = "A", cls = Packet$2.CLASS.IN, { clientIp, recursive = true } = {}) => {
			const packet = new Packet$2();
			if (recursive) packet.header.rd = 1;
			if (clientIp) packet.additionals.push(Packet$2.Resource.EDNS([Packet$2.Resource.EDNS.ECS(clientIp)]));
			packet.questions.push({
				name,
				class: cls,
				type: Packet$2.TYPE[type$1]
			});
			const message = packet.toBuffer();
			const len = Buffer.alloc(2);
			len.writeUInt16BE(message.length);
			const client = tcp.connect({
				host: dns,
				port
			});
			client.end(Buffer.concat([len, message]));
			const data = await Packet$2.readStream(client);
			if (!data.length) throw new Error("Empty TCP response");
			return Packet$2.parse(data);
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/client/doh.js
var require_doh = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/client/doh.js"(exports, module) {
	const Packet$1 = require_packet();
	const defaultGet = (url) => new Promise((resolve$1, reject) => {
		const headers = { accept: "application/dns-message" };
		const base = url.startsWith("https") ? __require("https") : __require("http");
		const req = base.get(url, { headers }, resolve$1);
		req.on("error", reject);
	});
	const readStream$1 = (stream$2) => {
		const buffer = [];
		return new Promise((resolve$1, reject) => {
			stream$2.on("error", reject).on("data", (chunk) => buffer.push(chunk)).on("end", () => resolve$1(Buffer.concat(buffer)));
		});
	};
	/**
	* @docs https://tools.ietf.org/html/rfc8484
	* @param {*} param0
	*/
	const DOHClient = ({ dns, http: http$4, get: get$1 = defaultGet } = {}) => {
		return (name, type$1 = "A", cls = Packet$1.CLASS.IN, { clientIp, recursive = true } = {}) => {
			const packet = new Packet$1();
			if (recursive) packet.header.rd = 1;
			if (clientIp) packet.additionals.push(Packet$1.Resource.EDNS([Packet$1.Resource.EDNS.ECS(clientIp)]));
			packet.questions.push({
				name,
				class: cls,
				type: Packet$1.TYPE[type$1]
			});
			const query = packet.toBase64URL();
			return Promise.resolve(get$1(`http${http$4 ? "" : "s"}://${dns}/dns-query?dns=${query}`)).then(readStream$1).then(Packet$1.parse);
		};
	};
	module.exports = DOHClient;
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/client/udp.js
var require_udp = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/client/udp.js"(exports, module) {
	const udp = __require("dgram");
	const Packet = require_packet();
	const { equal } = __require("assert");
	const { debuglog } = __require("util");
	const debug = debuglog("dns2");
	module.exports = ({ dns = "8.8.8.8", port = 53, socketType = "udp4" } = {}) => {
		return (name, type$1 = "A", cls = Packet.CLASS.IN, { clientIp, recursive = true } = {}) => {
			const query = new Packet();
			query.header.id = Math.random() * 1e4 | 0;
			if (recursive) query.header.rd = 1;
			if (clientIp) query.additionals.push(Packet.Resource.EDNS([Packet.Resource.EDNS.ECS(clientIp)]));
			query.questions.push({
				name,
				class: cls,
				type: Packet.TYPE[type$1]
			});
			const client = new udp.Socket(socketType);
			return new Promise((resolve$1, reject) => {
				client.once("message", function onMessage(message) {
					client.close();
					const response = Packet.parse(message);
					equal(response.header.id, query.header.id);
					resolve$1(response);
				});
				debug("send", dns, query.toBuffer());
				client.send(query.toBuffer(), port, dns, (err) => err && reject(err));
			});
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/client/google.js
var require_google = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/client/google.js"(exports, module) {
	const https = __require("https");
	const get = (url) => new Promise((resolve$1) => https.get(url, resolve$1));
	const readStream = (stream$2) => {
		const buffer = [];
		return new Promise((resolve$1, reject) => {
			stream$2.on("error", reject).on("data", (chunk) => {
				buffer.push(chunk);
			}).on("end", () => resolve$1(Buffer.concat(buffer)));
		});
	};
	const GoogleClient = () => (name, type$1 = "ANY") => {
		return Promise.resolve().then(() => get(`https://dns.google.com/resolve?name=${name}&type=${type$1}`)).then(readStream).then(JSON.parse);
	};
	module.exports = GoogleClient;
} });

//#endregion
//#region node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/index.js
var require_dns2 = __commonJS({ "node_modules/.pnpm/dns2@2.1.0/node_modules/dns2/index.js"(exports, module) {
	const { TCPServer, UDPServer, DOHServer, createTCPServer, createUDPServer, createDOHServer, createServer } = require_server();
	const EventEmitter$1 = __require("events");
	/**
	* [DNS description]
	* @docs https://tools.ietf.org/html/rfc1034
	* @docs https://tools.ietf.org/html/rfc1035
	*/
	var DNS = class DNS extends EventEmitter$1 {
		constructor(options) {
			super();
			Object.assign(this, {
				port: 53,
				retries: 3,
				timeout: 3,
				recursive: true,
				resolverProtocol: "UDP",
				nameServers: ["8.8.8.8", "114.114.114.114"],
				rootServers: [
					"a",
					"b",
					"c",
					"d",
					"e",
					"f",
					"g",
					"h",
					"i",
					"j",
					"k",
					"l",
					"m"
				].map((x$3) => `${x$3}.root-servers.net`)
			}, options);
		}
		/**
		* query
		* @param {*} questions
		*/
		query(name, type$1, cls, clientIp) {
			const { port, nameServers, recursive, resolverProtocol = "UDP" } = this;
			const createResolver = DNS[resolverProtocol + "Client"];
			return Promise.race(nameServers.map((address) => {
				const resolve$1 = createResolver({
					dns: address,
					port,
					recursive
				});
				return resolve$1(name, type$1, cls, clientIp);
			}));
		}
		/**
		* resolve
		* @param {*} domain
		* @param {*} type
		* @param {*} cls
		*/
		resolve(domain, type$1 = "ANY", cls = DNS.Packet.CLASS.IN, clientIp = void 0) {
			return this.query(domain, type$1, cls, clientIp);
		}
		resolveA(domain, clientIp) {
			return this.resolve(domain, "A", void 0, clientIp);
		}
		resolveAAAA(domain) {
			return this.resolve(domain, "AAAA");
		}
		resolveMX(domain) {
			return this.resolve(domain, "MX");
		}
		resolveCNAME(domain) {
			return this.resolve(domain, "CNAME");
		}
		resolvePTR(domain) {
			return this.resolve(domain, "PTR");
		}
	};
	DNS.TCPServer = TCPServer;
	DNS.UDPServer = UDPServer;
	DNS.DOHServer = DOHServer;
	DNS.createUDPServer = createUDPServer;
	DNS.createTCPServer = createTCPServer;
	DNS.createDOHServer = createDOHServer;
	DNS.createServer = createServer;
	DNS.TCPClient = require_tcp();
	DNS.DOHClient = require_doh();
	DNS.UDPClient = require_udp();
	DNS.GoogleClient = require_google();
	DNS.Packet = require_packet();
	module.exports = DNS;
} });

//#endregion
//#region node_modules/.pnpm/nuxthub@https+++pkg.pr.new+nuxt-hub+cli+nuxthub@56/node_modules/nuxthub/src/utils/poll.mjs
var import_dns2 = __toESM(require_dns2(), 1);
const TIMEOUT = 1e3 * 60 * 5;

//#endregion
//#region node_modules/.pnpm/ws@8.18.1/node_modules/ws/browser.js
var require_browser = __commonJS({ "node_modules/.pnpm/ws@8.18.1/node_modules/ws/browser.js"(exports, module) {
	module.exports = function() {
		throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object");
	};
} });

//#endregion
//#region node_modules/.pnpm/nuxthub@https+++pkg.pr.new+nuxt-hub+cli+nuxthub@56/node_modules/nuxthub/src/utils/logs.mjs
var import_browser = __toESM(require_browser(), 1);

//#endregion
//#region node_modules/.pnpm/nuxthub@https+++pkg.pr.new+nuxt-hub+cli+nuxthub@56/node_modules/nuxthub/src/utils/database.mjs
const CreateDatabaseMigrationsTableQuery = `CREATE TABLE IF NOT EXISTS _hub_migrations (
    id         INTEGER PRIMARY KEY AUTOINCREMENT,
    name       TEXT UNIQUE,
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);`;
const ListDatabaseMigrationsQuery = "select \"id\", \"name\", \"applied_at\" from \"_hub_migrations\" order by \"_hub_migrations\".\"id\"";

//#endregion
//#region node_modules/.pnpm/duplexer@0.1.2/node_modules/duplexer/index.js
var require_duplexer = __commonJS({ "node_modules/.pnpm/duplexer@0.1.2/node_modules/duplexer/index.js"(exports, module) {
	var Stream = __require("stream");
	var writeMethods = [
		"write",
		"end",
		"destroy"
	];
	var readMethods = ["resume", "pause"];
	var readEvents = ["data", "close"];
	var slice = Array.prototype.slice;
	module.exports = duplex;
	function forEach(arr, fn) {
		if (arr.forEach) return arr.forEach(fn);
		for (var i = 0; i < arr.length; i++) fn(arr[i], i);
	}
	function duplex(writer, reader) {
		var stream$2 = new Stream();
		var ended = false;
		forEach(writeMethods, proxyWriter);
		forEach(readMethods, proxyReader);
		forEach(readEvents, proxyStream);
		reader.on("end", handleEnd);
		writer.on("drain", function() {
			stream$2.emit("drain");
		});
		writer.on("error", reemit);
		reader.on("error", reemit);
		stream$2.writable = writer.writable;
		stream$2.readable = reader.readable;
		return stream$2;
		function proxyWriter(methodName) {
			stream$2[methodName] = method;
			function method() {
				return writer[methodName].apply(writer, arguments);
			}
		}
		function proxyReader(methodName) {
			stream$2[methodName] = method;
			function method() {
				stream$2.emit(methodName);
				var func = reader[methodName];
				if (func) return func.apply(reader, arguments);
				reader.emit(methodName);
			}
		}
		function proxyStream(methodName) {
			reader.on(methodName, reemit$1);
			function reemit$1() {
				var args = slice.call(arguments);
				args.unshift(methodName);
				stream$2.emit.apply(stream$2, args);
			}
		}
		function handleEnd() {
			if (ended) return;
			ended = true;
			var args = slice.call(arguments);
			args.unshift("end");
			stream$2.emit.apply(stream$2, args);
		}
		function reemit(err) {
			stream$2.emit("error", err);
		}
	}
} });

//#endregion
//#region node_modules/.pnpm/gzip-size@7.0.0/node_modules/gzip-size/index.js
var import_duplexer = __toESM(require_duplexer(), 1);
const getOptions = (options) => ({
	level: 9,
	...options
});
const gzip = promisify(zlib.gzip);
async function gzipSize(input, options) {
	if (!input) return 0;
	const data = await gzip(input, getOptions(options));
	return data.length;
}

//#endregion
//#region node_modules/.pnpm/nuxthub@https+++pkg.pr.new+nuxt-hub+cli+nuxthub@56/node_modules/nuxthub/src/utils/deploy.mjs
function hashFile(filePath, data) {
	const extension = extname(filePath).substring(1);
	return createHash("sha256").update(data + extension).digest("hex").slice(0, 32);
}
/**
* Create chunks based on base64 size
*/
async function createChunks(files) {
	const chunks = [];
	let currentChunk = [];
	let currentSize = 0;
	for (const file of files) {
		if (file.size > MAX_UPLOAD_CHUNK_SIZE) {
			if (currentChunk.length > 0) {
				chunks.push(currentChunk);
				currentChunk = [];
				currentSize = 0;
			}
			chunks.push([file]);
			continue;
		}
		if (currentSize + file.size > MAX_UPLOAD_CHUNK_SIZE && currentChunk.length > 0) {
			chunks.push(currentChunk);
			currentChunk = [];
			currentSize = 0;
		}
		currentChunk.push(file);
		currentSize += file.size;
	}
	if (currentChunk.length > 0) chunks.push(currentChunk);
	return chunks;
}
/**
* Create a storage instance for the dist directory
* @param {string} dir - Nuxt build output directory
* @returns {Promise<import('unstorage').Storage>}
* @throws {Error} If dist directory doesn't exist
*/
async function getStorage(dir) {
	await access(dir).catch(() => {
		throw new Error(`${withTilde(dir)} directory not found`);
	});
	return createStorage({ driver: fs_default({
		base: dir,
		ignore: [".DS_Store"]
	}) });
}
/**
* Get all files to deploy
* @param {string[]} fileKeys - Array of file paths from storage
* @returns {string[]} Array of paths to deploy
*/
function getPathsToDeploy(fileKeys) {
	const fileKeyToPath = (fileKey) => joinURL("/", fileKey.replace(/:/g, "/"));
	return fileKeys.map(fileKeyToPath).filter((path$9) => {
		if (path$9.startsWith("/.wrangler/")) return false;
		if (path$9.startsWith("/node_modules/")) return false;
		if (path$9 === "/wrangler.toml") return false;
		if (path$9 === "/.dev.vars") return false;
		if (path$9.startsWith("/database/migrations/")) return false;
		return true;
	});
}
/**
* Get file data with metadata
* @param {import('unstorage').Storage} storage - Storage instance
* @param {string} path - File path
* @param {BufferEncoding} [encoding='utf-8'] - File encoding
* @returns {Promise<{ path: string, data: string, size: number, encoding: string, hash: string, contentType: string }>}
* @throws {Error} If file size exceeds MAX_ASSET_SIZE
*/
async function getFile(storage, path$9, encoding = "utf-8") {
	const dataAsBuffer = await storage.getItemRaw(path$9);
	if (dataAsBuffer.length > MAX_ASSET_SIZE) throw new Error(`NuxtHub deploy only supports files up to ${prettyBytes(MAX_ASSET_SIZE, { binary: true })} in size\n${withTilde(path$9)} is ${prettyBytes(dataAsBuffer.length, { binary: true })} in size`);
	const gzipSize$1 = await gzipSize(dataAsBuffer);
	const data = dataAsBuffer.toString(encoding);
	return {
		path: path$9,
		data,
		size: dataAsBuffer.length,
		gzipSize: gzipSize$1,
		encoding,
		hash: hashFile(path$9, data),
		contentType: src_default.getType(path$9) || "application/octet-stream"
	};
}
const META_PATHS = [
	"/_redirects",
	"/_headers",
	"/_routes.json",
	"/nitro.json",
	"/hub.config.json",
	"/wrangler.toml",
	"/package-lock.json",
	"/package.json"
];
const isMetaPath = (path$9) => META_PATHS.includes(path$9);
const isServerPath = (path$9) => path$9.startsWith("/_worker.js/");
const isPublicPath = (path$9) => !isMetaPath(path$9) && !isServerPath(path$9);
const isWorkerMetaPath = (path$9) => META_PATHS.includes(path$9);
const isWorkerPublicPath = (path$9) => path$9.startsWith("/public/");
const isWorkerServerPath = (path$9) => path$9.startsWith("/server/");
/**
* Get all public files with their metadata
* @param {import('unstorage').Storage} storage - Storage instance
* @param {string[]} paths - Array of paths to filter and process
* @returns {Promise<Array<{ path: string, data: string, size: number, encoding: string, hash: string, contentType: string }>>}
*/
async function getPublicFiles(storage, paths) {
	return Promise.all(paths.filter(isPublicPath).map((p$1) => getFile(storage, p$1, "base64")));
}
async function getWorkerPublicFiles(storage, paths) {
	const files = await Promise.all(paths.filter(isWorkerPublicPath).map((p$1) => getFile(storage, p$1, "base64")));
	return files.map((file) => ({
		...file,
		path: file.path.replace("/public/", "/")
	}));
}
/**
* Upload assets to Cloudflare Pages with concurrent uploads
* @param {Array<{ path: string, data: string, hash: string, contentType: string }>} files - Files to upload
* @param {string} cloudflareUploadJwt - Cloudflare upload JWT
* @param {Function} onProgress - Callback function to update progress
*/
async function uploadAssetsToCloudflare(files, cloudflareUploadJwt, onProgress) {
	const chunks = await createChunks(files);
	if (!chunks.length) return;
	let filesUploaded = 0;
	let progressSize = 0;
	const totalSize = files.reduce((acc, file) => acc + file.size, 0);
	for (let i = 0; i < chunks.length; i += CONCURRENT_UPLOADS) {
		const chunkGroup = chunks.slice(i, i + CONCURRENT_UPLOADS);
		await Promise.all(chunkGroup.map(async (filesInChunk) => {
			return ofetch("/pages/assets/upload", {
				baseURL: "https://api.cloudflare.com/client/v4/",
				method: "POST",
				headers: { Authorization: `Bearer ${cloudflareUploadJwt}` },
				retry: MAX_UPLOAD_ATTEMPTS,
				retryDelay: UPLOAD_RETRY_DELAY,
				body: filesInChunk.map((file) => ({
					path: file.path,
					key: file.hash,
					value: file.data,
					base64: true,
					metadata: { contentType: file.contentType }
				}))
			}).then(() => {
				if (typeof onProgress === "function") {
					filesUploaded += filesInChunk.length;
					progressSize += filesInChunk.reduce((acc, file) => acc + file.size, 0);
					onProgress({
						progress: filesUploaded,
						progressSize,
						total: files.length,
						totalSize
					});
				}
			}).catch((err) => {
				if (err.data) throw new Error(`Error while uploading assets to Cloudflare: ${JSON.stringify(err.data)} - ${err.message}`);
				else throw new Error(`Error while uploading assets to Cloudflare: ${err.message.split(" - ")[1] || err.message}`);
			});
		}));
	}
}
/**
* Upload assets to Cloudflare Workers with concurrent uploads
* @param {Array<string<string>} buckets - Buckets of hashes to upload
* @param {Array<{ path: string, data: string, hash: string, contentType: string }>} files - Files to upload
* @param {string} cloudflareUploadJwt - Cloudflare upload JWT
* @param {Function} onProgress - Callback function to update progress
*/
async function uploadWorkersAssetsToCloudflare(accountId, files, cloudflareUploadJwt, onProgress) {
	const chunks = await createChunks(files);
	if (!chunks.length) return;
	let filesUploaded = 0;
	let progressSize = 0;
	let completionToken;
	const totalSize = files.reduce((acc, file) => acc + file.size, 0);
	for (let i = 0; i < chunks.length; i += CONCURRENT_UPLOADS) {
		const chunkGroup = chunks.slice(i, i + CONCURRENT_UPLOADS);
		await Promise.all(chunkGroup.map(async (filesInChunk) => {
			const form = new FormData();
			for (const file of filesInChunk) form.append(file.hash, new File([file.data], file.hash, { type: file.contentType }), file.hash);
			return ofetch(`/accounts/${accountId}/workers/assets/upload?base64=true`, {
				baseURL: "https://api.cloudflare.com/client/v4/",
				method: "POST",
				headers: { Authorization: `Bearer ${cloudflareUploadJwt}` },
				retry: MAX_UPLOAD_ATTEMPTS,
				retryDelay: UPLOAD_RETRY_DELAY,
				body: form
			}).then((data) => {
				if (data && data.result?.jwt) completionToken = data.result.jwt;
				if (typeof onProgress === "function") {
					filesUploaded += filesInChunk.length;
					progressSize += filesInChunk.reduce((acc, file) => acc + file.size, 0);
					onProgress({
						progress: filesUploaded,
						progressSize,
						total: files.length,
						totalSize
					});
				}
			}).catch((err) => {
				if (err.data) throw new Error(`Error while uploading assets to Cloudflare: ${JSON.stringify(err.data)} - ${err.message}`);
				else throw new Error(`Error while uploading assets to Cloudflare: ${err.message.split(" - ")[1] || err.message}`);
			});
		}));
	}
	return completionToken;
}

//#endregion
//#region src/database.ts
async function queryDatabase(options) {
	return await ofetch(`${options.hubUrl}/api/projects/${options.projectKey}/database/${options.env}/query`, {
		method: "POST",
		headers: { authorization: `Bearer ${options.token}` },
		body: { query: options.query }
	}).catch((error$1) => {
		throw new Error(`Failed to query database: ${error$1.data?.message || error$1.message}`);
	});
}
async function createMigrationsTable(options) {
	await queryDatabase({
		...options,
		query: CreateDatabaseMigrationsTableQuery
	});
}
async function fetchRemoteMigrations(options) {
	try {
		const res = await queryDatabase({
			...options,
			query: ListDatabaseMigrationsQuery
		});
		return res[0]?.results ?? [];
	} catch (error$1) {
		if (error$1?.response?._data?.message?.includes("no such table")) return [];
		throw error$1;
	}
}

//#endregion
//#region src/main.ts
var import_picocolors_browser = __toESM(require_picocolors_browser(), 1);
var import_core = __toESM(require_core(), 1);
async function run() {
	try {
		const projectKeyInput = import_core.getInput("project-key");
		const directory = import_core.getInput("directory");
		const hubUrl = import_core.getInput("hub-url");
		if (projectKeyInput !== void 0) import_core.debug(`Linked with: \`${projectKeyInput}\``);
		import_core.debug(`Nuxt output directory: ${directory}`);
		import_core.debug(`NuxtHub URL: ${hubUrl}`);
		let accessToken = "";
		const $api$1 = ofetch.create({
			baseURL: joinURL(hubUrl, "/api"),
			onRequest({ options }) {
				if (!options.headers.has("Authorization")) options.headers.set("Authorization", `Bearer ${accessToken}`);
			}
		});
		const audience = projectKeyInput ? new URL(`${hubUrl}/projects/${projectKeyInput}`).toString() : void 0;
		const idToken = await import_core.getIDToken(audience);
		import_core.debug(`Got ID token`);
		import_core.debug("Retrieving project information...");
		const projectInfo = await $api$1(`/ci-cd/token`, { headers: { Authorization: `Bearer ${idToken}` } }).catch((err) => {
			if (err.data?.statusCode === 404) throw new Error("Project not found");
			import_core.debug(`Error: ${err.data?.message || err.message}`);
			throw err;
		});
		accessToken = projectInfo.accessToken;
		const projectKey = projectInfo.projectKey;
		import_core.setSecret(projectInfo.accessToken);
		import_core.debug(`Retrieved project info ${JSON.stringify(projectInfo)}`);
		if (projectInfo.type === "worker" && projectInfo.environment === "preview") throw new Error("Currently NuxtHub on Workers (BETA) does not support preview environments.");
		import_core.info(`Deploying ${import_picocolors_browser.default.blueBright(projectInfo.projectSlug)} to ${import_picocolors_browser.default.blueBright(projectInfo.environment)} environment...`);
		import_core.debug(`Processing files in ${directory}...`);
		const storage = await getStorage(directory);
		const fileKeys = await storage.getKeys();
		const pathsToDeploy = getPathsToDeploy(fileKeys);
		const config$2 = await storage.getItem("hub.config.json");
		if (!config$2.nitroPreset && projectInfo.type === "worker") throw new Error("Please upgrade `@nuxthub/core` to the latest version to deploy to a worker project.");
		const isWorkerPreset = [
			"cloudflare_module",
			"cloudflare_durable",
			"cloudflare-module",
			"cloudflare-durable"
		].includes(config$2.nitroPreset);
		const { format: formatNumber } = new Intl.NumberFormat("en-US");
		const publicFiles = await getPublicFiles(storage, pathsToDeploy);
		import_core.debug("Preparing deployment...");
		let deploymentInfo;
		try {
			let prepareUrl = `/teams/${projectInfo.teamSlug}/projects/${projectInfo.projectSlug}/${projectInfo.environment}/deploy/prepare`;
			let publicFiles$1, publicManifest;
			if (isWorkerPreset) {
				prepareUrl = `/teams/${projectInfo.teamSlug}/projects/${projectInfo.projectSlug}/${projectInfo.environment}/deploy/worker/prepare`;
				publicFiles$1 = await getWorkerPublicFiles(storage, pathsToDeploy);
				/**
				* {  "/index.html": { hash: "hash", size: 30 }
				*/
				publicManifest = publicFiles$1.reduce((acc, file) => {
					acc[file.path] = {
						hash: file.hash,
						size: file.size
					};
					return acc;
				}, {});
			} else {
				publicFiles$1 = await getPublicFiles(storage, pathsToDeploy);
				/**
				* {  "/index.html": "hash" }
				*/
				publicManifest = publicFiles$1.reduce((acc, file) => {
					acc[file.path] = file.hash;
					return acc;
				}, {});
			}
			deploymentInfo = await $api$1(prepareUrl, {
				method: "POST",
				body: {
					config: config$2,
					publicManifest
				}
			});
		} catch (err) {
			if (err.data) {
				import_core.debug(JSON.stringify(err.data));
				throw new Error(`Error while preparing deployment: ${JSON.stringify(err.data.data?.issues || err.data.message || err.data.statusMessage || err.data)} - ${err.message}`);
			} else throw new Error(`Error while preparing deployment: ${err.message.split(" - ")[1] || err.message}`);
		}
		const { deploymentKey, buckets, cloudflareUploadJwt, accountId } = deploymentInfo;
		let missingPublicHashes = deploymentInfo.missingPublicHashes || buckets.flat();
		const publicFilesToUpload = publicFiles.filter((file) => missingPublicHashes.includes(file.hash));
		import_core.debug("Uploading assets to Cloudflare...");
		let completionToken;
		if (publicFilesToUpload.length) {
			const totalSizeToUpload = publicFilesToUpload.reduce((acc, file) => acc + file.size, 0);
			import_core.info(`Uploading ${import_picocolors_browser.default.blueBright(formatNumber(publicFilesToUpload.length))} new static assets (${import_picocolors_browser.default.blueBright(prettyBytes(totalSizeToUpload))})...`);
			if (projectInfo.type === "pages") await uploadAssetsToCloudflare(publicFilesToUpload, cloudflareUploadJwt, ({ progressSize, totalSize }) => {
				const percentage = Math.round(progressSize / totalSize * 100);
				import_core.info(`${percentage}% uploaded (${prettyBytes(progressSize)}/${prettyBytes(totalSize)})`);
			});
			else completionToken = await uploadWorkersAssetsToCloudflare(accountId, publicFilesToUpload, cloudflareUploadJwt, ({ progressSize, totalSize }) => {
				const percentage = Math.round(progressSize / totalSize * 100);
				import_core.info(`${percentage}% uploaded (${prettyBytes(progressSize)}/${prettyBytes(totalSize)})`);
			});
			import_core.info(`${import_picocolors_browser.default.blueBright(formatNumber(publicFilesToUpload.length))} new static assets uploaded (${import_picocolors_browser.default.blueBright(prettyBytes(totalSizeToUpload))})`);
		}
		if (publicFiles.length) {
			const totalSize = publicFiles.reduce((acc, file) => acc + file.size, 0);
			const totalGzipSize = publicFiles.reduce((acc, file) => acc + file.gzipSize, 0);
			import_core.info(`${import_picocolors_browser.default.blueBright(formatNumber(publicFiles.length))} static assets (${import_picocolors_browser.default.blueBright(prettyBytes(totalSize))} / ${import_picocolors_browser.default.blueBright(prettyBytes(totalGzipSize))} gzip)`);
		}
		const metaFiles = await Promise.all(pathsToDeploy.filter(isWorkerPreset ? isWorkerMetaPath : isMetaPath).map((p$1) => getFile(storage, p$1, "base64")));
		let serverFiles = await Promise.all(pathsToDeploy.filter(isWorkerPreset ? isWorkerServerPath : isServerPath).map((p$1) => getFile(storage, p$1, "base64")));
		if (isWorkerPreset) serverFiles = serverFiles.map((file) => ({
			...file,
			path: file.path.replace("/server/", "/")
		}));
		const serverFilesSize = serverFiles.reduce((acc, file) => acc + file.size, 0);
		const serverFilesGzipSize = serverFiles.reduce((acc, file) => acc + file.gzipSize, 0);
		import_core.info(`${import_picocolors_browser.default.blueBright(formatNumber(serverFiles.length))} server files (${import_picocolors_browser.default.blueBright(prettyBytes(serverFilesSize))} / ${import_picocolors_browser.default.blueBright(prettyBytes(serverFilesGzipSize))} gzip)`);
		if (!config$2.database) import_core.info("Skipping database migrations and queries - database not enabled in config");
		if (config$2.database) {
			import_core.info("Processing database migrations...");
			const localMigrations = fileKeys.filter((fileKey) => fileKey.startsWith("database:migrations:") && fileKey.endsWith(".sql")).map((fileKey) => fileKey.replace("database:migrations:", "").replace(".sql", ""));
			if (!localMigrations.length) {
				import_core.info(`Skipping database migrations - no database migrations found in ${import_picocolors_browser.default.blueBright(`${directory}/database/migrations`)}`);
				import_core.info("No pending migrations to apply");
			}
			if (localMigrations.length) {
				import_core.debug("Creating migrations table if non-existent...");
				await createMigrationsTable({
					hubUrl,
					projectKey,
					token: projectInfo.accessToken,
					env: projectInfo.environment
				});
				import_core.debug("Fetching remote migrations...");
				const remoteMigrations = await fetchRemoteMigrations({
					hubUrl,
					projectKey,
					token: projectInfo.accessToken,
					env: projectInfo.environment
				});
				import_core.info(`Found ${import_picocolors_browser.default.blueBright(remoteMigrations.length)} applied database migration${remoteMigrations.length === 1 ? "" : "s"}`);
				const pendingMigrations = localMigrations.filter((localName) => !remoteMigrations.find(({ name }) => name === localName));
				if (!pendingMigrations.length) import_core.info("No pending migrations to apply");
				for (const queryName of pendingMigrations) {
					let query = await storage.getItem(`database/migrations/${queryName}.sql`);
					if (query.at(-1) !== ";") query += ";";
					query += `INSERT INTO _hub_migrations (name) values ('${queryName}');`;
					import_core.info(`Applying database migration ${import_picocolors_browser.default.blueBright(queryName)}...`);
					import_core.debug(query);
					try {
						await queryDatabase({
							hubUrl,
							projectKey,
							token: projectInfo.accessToken,
							env: projectInfo.environment,
							query
						});
						import_core.info(`Applied database migration ${import_picocolors_browser.default.blueBright(queryName)}`);
					} catch (error$1) {
						const errorMessage = error$1?.response?._data?.message || error$1?.message;
						import_core.error(errorMessage, {
							file: join("server/database/migrations", `${queryName}.sql`),
							title: "Database migration failed"
						});
						throw new Error(`Failed to apply database migration ${queryName}: ${errorMessage}`);
					}
				}
				if (pendingMigrations.length) import_core.info(`${import_picocolors_browser.default.blueBright(formatNumber(localMigrations.length))} database migrations applied`);
			}
			const localQueries = fileKeys.filter((fileKey) => fileKey.startsWith("database:queries:") && fileKey.endsWith(".sql")).map((fileKey) => fileKey.replace("database:queries:", "").replace(".sql", ""));
			if (!localQueries.length) import_core.info(`Skipping database queries - no database queries found in ${import_picocolors_browser.default.blueBright(`${directory}/database/queries`)}`);
			if (localQueries.length) {
				import_core.info(`Applying ${import_picocolors_browser.default.blueBright(formatNumber(localQueries.length))} database ${localQueries.length === 1 ? "query" : "queries"}...`);
				for (const queryName of localQueries) {
					const query = await storage.getItem(`database/queries/${queryName}.sql`);
					import_core.info(`Applying database query ${import_picocolors_browser.default.blueBright(queryName)}...`);
					import_core.debug(query);
					try {
						await queryDatabase({
							hubUrl,
							projectKey,
							token: projectInfo.accessToken,
							env: projectInfo.environment,
							query
						});
						import_core.info(`Applied database query ${import_picocolors_browser.default.blueBright(queryName)}`);
					} catch (error$1) {
						const errorMessage = error$1?.response?._data?.message || error$1?.message;
						import_core.error(errorMessage, {
							file: join("server/database/queries", `${queryName}.sql`),
							title: "Database query failed"
						});
						throw new Error(`Failed to apply database query ${queryName}: ${errorMessage}`);
					}
				}
				import_core.info(`${import_picocolors_browser.default.blueBright(formatNumber(localQueries.length))} database ${localQueries.length === 1 ? "query" : "queries"} applied`);
			}
		}
		import_core.info(`Publishing deployment...`);
		const deployment = await $api$1(`/teams/${projectInfo.teamSlug}/projects/${projectInfo.projectSlug}/${projectInfo.environment}/deploy/${isWorkerPreset ? "worker/complete" : "complete"}`, {
			method: "POST",
			body: {
				deploymentKey,
				serverFiles,
				metaFiles,
				completionToken
			}
		}).catch((err) => {
			if (err.data) {
				import_core.debug(JSON.stringify(err.data));
				throw new Error(`Error while publishing deployment: ${JSON.stringify(err.data.data?.issues || err.data.message || err.data.statusMessage || err.data)} - ${err.message}`);
			} else throw new Error(`Error while publishing deployment: ${err.message.split(" - ")[1] || err.message}`);
		});
		import_core.debug(`Deployment details ${JSON.stringify(deployment)}`);
		import_core.setOutput("deployment-url", deployment.primaryUrl);
		import_core.setOutput("branch-url", deployment.branchUrl);
		import_core.setOutput("environment", projectInfo.environment);
		import_core.info(`Deployed to ${projectInfo.environment}: ${deployment.url ?? deployment.primaryUrl}`);
	} catch (error$1) {
		if (error$1 instanceof Error) import_core.setFailed(error$1.message);
	}
}

//#endregion
//#region src/index.ts
run();

//#endregion